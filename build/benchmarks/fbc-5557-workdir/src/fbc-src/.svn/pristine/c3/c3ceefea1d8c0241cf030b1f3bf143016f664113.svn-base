--- ..\sqlite-3.2.6\configure	2005-09-17 11:34:54.000000000 +0000
+++ configure	2005-09-23 12:57:08.000000000 +0000
@@ -19594,9 +19594,9 @@
 fi
 if test "$TARGET_EXEEXT" = ".exe"; then
   OS_UNIX=0
-  OS_WIN=1
+  OS_WIN=0
   tclsubdir=win
-  TARGET_CFLAGS="$TARGET_CFLAGS -DOS_WIN=1"
+  TARGET_CFLAGS="$TARGET_CFLAGS"
 else
   OS_UNIX=1
   OS_WIN=0
   
--- ..\sqlite-3.2.6\configure.ac	2005-09-17 11:34:54.000000000 +0000
+++ configure.ac	2005-09-23 12:58:22.000000000 +0000
@@ -368,9 +368,9 @@
 fi
 if test "$TARGET_EXEEXT" = ".exe"; then
   OS_UNIX=0
-  OS_WIN=1
+  OS_WIN=0
   tclsubdir=win
-  TARGET_CFLAGS="$TARGET_CFLAGS -DOS_WIN=1"
+  TARGET_CFLAGS="$TARGET_CFLAGS"
 else
   OS_UNIX=1
   OS_WIN=0
   
--- ..\sqlite-3.2.6\src\os_unix.c	2005-09-17 11:34:56.000000000 +0000
+++ src\os_unix.c	2005-09-23 12:55:56.000000000 +0000
@@ -1311,6 +1311,10 @@
   return SQLITE_OK;
 }
 
+#ifdef __MSDOS__
+#include <sys/stat.h>
+#endif
+
 /*
 ** Turn a relative pathname into a full pathname.  Return a pointer
 ** to the full pathname stored in space obtained from sqliteMalloc().
@@ -1319,6 +1323,11 @@
 */
 char *sqlite3OsFullPathname(const char *zRelative){
   char *zFull = 0;
+#ifdef __MSDOS__
+  char zBuf[5000];
+  zBuf[0] = 0;
+  sqlite3SetString(&zFull, _truename( zRelative, zBuf ), (char*)0);
+#else
   if( zRelative[0]=='/' ){
     sqlite3SetString(&zFull, zRelative, (char*)0);
   }else{
@@ -1331,6 +1340,7 @@
                     (char*)0);
     sqliteFree(zBuf);
   }
+#endif
   return zFull;
 }
 
