switch:0
case:1
((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
while (retval < 0) {
					retval += 1000;
				}

case:2
(date_globals.last_errors) = ((void *)0);
while (retval < 0) {
					retval += 1000;
				}

case:3
(date_globals.timezone) = ((void *)0);
while (retval < 0) {
					retval += 1000;
				}

case:4
(date_globals.timezone) = _estrndup((zone), (zone_len), "ext/date/php_date.c", 3945, ((void *)0), 0);
while (retval < 0) {
					retval += 1000;
				}

case:5
(date_globals.tzcache) = ((void *)0);
while (retval < 0) {
					retval += 1000;
				}

case:6
(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16));
while (retval < 0) {
					retval += 1000;
				}

case:7
(format)++;
while (retval < 0) {
					retval += 1000;
				}

case:8
(offset) = timelib_get_time_zone_info(t->sse, t->tz_info);
while (retval < 0) {
					retval += 1000;
				}

case:9
(offset) = timelib_time_offset_ctor();
while (retval < 0) {
					retval += 1000;
				}

case:10
(offset)->abbr = malloc(9);
while (retval < 0) {
					retval += 1000;
				}

case:11
(offset)->abbr = strdup(t->tz_abbr);
while (retval < 0) {
					retval += 1000;
				}

case:12
(offset)->is_dst = 0;
while (retval < 0) {
					retval += 1000;
				}

case:13
(offset)->is_dst = t->dst;
while (retval < 0) {
					retval += 1000;
				}

case:14
(offset)->leap_secs = 0;
while (retval < 0) {
					retval += 1000;
				}

case:15
(offset)->offset = (t->z - (t->dst * 60)) * -60;
while (retval < 0) {
					retval += 1000;
				}

case:16
(offset)->offset = (t->z) * -60;
while (retval < 0) {
					retval += 1000;
				}

case:17
_efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
while (retval < 0) {
					retval += 1000;
				}

case:18
_efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
while (retval < 0) {
					retval += 1000;
				}

case:19
_efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
while (retval < 0) {
					retval += 1000;
				}

case:20
_efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
while (retval < 0) {
					retval += 1000;
				}

case:21
_efree(((format)), "ext/date/php_date.c", 1413, ((void *)0), 0);
while (retval < 0) {
					retval += 1000;
				}

case:22
_efree(((format)), "ext/date/php_date.c", 1654, ((void *)0), 0);
while (retval < 0) {
					retval += 1000;
				}

case:23
_efree(((format)), "ext/date/php_date.c", 2536, ((void *)0), 0);
while (retval < 0) {
					retval += 1000;
				}

case:24
_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
while (retval < 0) {
					retval += 1000;
				}

case:25
ap_php_snprintf((offset)->abbr, 9, "GMT%c%02d%02d", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0);
while (retval < 0) {
					retval += 1000;
				}

case:26
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", localtime ? (((offset)->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0);
while (retval < 0) {
					retval += 1000;
				}

case:27
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs((offset)->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0);
while (retval < 0) {
					retval += 1000;
				}

case:28
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs(((offset)->offset % 3600) / 60) : 0);
while (retval < 0) {
					retval += 1000;
				}

case:29
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0);
while (retval < 0) {
					retval += 1000;
				}

case:30
buffer[1] = '\x00';
while (retval < 0) {
					retval += 1000;
				}

case:31
date_ce_period->get_iterator = date_object_period_get_iterator;
while (retval < 0) {
					retval += 1000;
				}

case:32
date_ce_period->iterator_funcs.funcs = &date_period_it_funcs;
while (retval < 0) {
					retval += 1000;
				}

case:33
date_object_handlers_date.clone_obj = date_object_clone_date;
while (retval < 0) {
					retval += 1000;
				}

case:34
date_object_handlers_date.compare_objects = date_object_compare_date;
while (retval < 0) {
					retval += 1000;
				}

case:35
date_object_handlers_date.get_properties = date_object_get_properties;
while (retval < 0) {
					retval += 1000;
				}

case:36
date_object_handlers_interval.clone_obj = date_object_clone_interval;
while (retval < 0) {
					retval += 1000;
				}

case:37
date_object_handlers_interval.get_properties = date_object_get_properties_interval;
while (retval < 0) {
					retval += 1000;
				}

case:38
date_object_handlers_interval.get_property_ptr_ptr = ((void *)0);
while (retval < 0) {
					retval += 1000;
				}

case:39
date_object_handlers_interval.read_property = date_interval_read_property;
while (retval < 0) {
					retval += 1000;
				}

case:40
date_object_handlers_interval.write_property = date_interval_write_property;
while (retval < 0) {
					retval += 1000;
				}

case:41
date_object_handlers_period.clone_obj = date_object_clone_period;
while (retval < 0) {
					retval += 1000;
				}

case:42
date_object_handlers_timezone.clone_obj = date_object_clone_timezone;
while (retval < 0) {
					retval += 1000;
				}

case:43
date_register_classes();
while (retval < 0) {
					retval += 1000;
				}

case:44
exit(1);
while (retval < 0) {
					retval += 1000;
				}

case:45
i++;
while (retval < 0) {
					retval += 1000;
				}

case:46
if (!(date_globals.tzcache)) {
    ((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
    _zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
}
while (retval < 0) {
					retval += 1000;
				}

case:47
if (!format_len) {
    return _estrdup((""), "ext/date/php_date.c", 1018, ((void *)0), 0);
}
while (retval < 0) {
					retval += 1000;
				}

case:48
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
    (date_globals.last_errors) = ((void *)0);
}
while (retval < 0) {
					retval += 1000;
				}

case:49
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
}
while (retval < 0) {
					retval += 1000;
				}

case:50
if ((date_globals.timezone) && (strlen((date_globals.timezone)) > 0)) {
    return (date_globals.timezone);
}
while (retval < 0) {
					retval += 1000;
				}

case:51
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
    (date_globals.timezone) = ((void *)0);
}
while (retval < 0) {
					retval += 1000;
				}

case:52
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
}
while (retval < 0) {
					retval += 1000;
				}

case:53
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
}
while (retval < 0) {
					retval += 1000;
				}

case:54
if ((date_globals.tzcache)) {
    zend_hash_destroy((date_globals.tzcache));
    _efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
    (date_globals.tzcache) = ((void *)0);
}
while (retval < 0) {
					retval += 1000;
				}

case:55
if (i < format_len)
    i++;
while (retval < 0) {
					retval += 1000;
				}

case:56
if (localtime) {
    timelib_time_offset_dtor(offset);
}
while (retval < 0) {
					retval += 1000;
				}

case:57
if (t->zone_type == 1) {
    offset = timelib_time_offset_ctor();
    offset->offset = (t->z) * -60;
    offset->leap_secs = 0;
    offset->is_dst = 0;
    offset->abbr = malloc(9);
    ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0);
} else {
    offset = timelib_get_time_zone_info(t->sse, t->tz_info);
}
while (retval < 0) {
					retval += 1000;
				}

case:58
length = 1;
while (retval < 0) {
					retval += 1000;
				}

case:59
length = ap_php_slprintf(buffer, 32, "%03d", retval);
while (retval < 0) {
					retval += 1000;
				}

case:60
length = ap_php_slprintf(buffer, 32, "%s", "UTC");
while (retval < 0) {
					retval += 1000;
				}

case:61
memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
while (retval < 0) {
					retval += 1000;
				}

case:62
memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
while (retval < 0) {
					retval += 1000;
				}

case:63
memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
while (retval < 0) {
					retval += 1000;
				}

case:64
memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
while (retval < 0) {
					retval += 1000;
				}

case:65
offset = timelib_get_time_zone_info((t)->sse, t->tz_info);
while (retval < 0) {
					retval += 1000;
				}

case:66
offset = timelib_get_time_zone_info(t->sse, (t)->tz_info);
while (retval < 0) {
					retval += 1000;
				}

case:67
offset = timelib_get_time_zone_info(t->sse, t->tz_info);
while (retval < 0) {
					retval += 1000;
				}

case:68
offset = timelib_time_offset_ctor();
while (retval < 0) {
					retval += 1000;
				}

case:69
offset->abbr = malloc(9);
while (retval < 0) {
					retval += 1000;
				}

case:70
offset->abbr = strdup((t)->tz_abbr);
while (retval < 0) {
					retval += 1000;
				}

case:71
offset->abbr = strdup(t->tz_abbr);
while (retval < 0) {
					retval += 1000;
				}

case:72
offset->is_dst = (t)->dst;
while (retval < 0) {
					retval += 1000;
				}

case:73
offset->is_dst = 0;
while (retval < 0) {
					retval += 1000;
				}

case:74
offset->is_dst = t->dst;
while (retval < 0) {
					retval += 1000;
				}

case:75
offset->leap_secs = 0;
while (retval < 0) {
					retval += 1000;
				}

case:76
offset->offset = ((t)->z - (t->dst * 60)) * -60;
while (retval < 0) {
					retval += 1000;
				}

case:77
offset->offset = ((t)->z) * -60;
while (retval < 0) {
					retval += 1000;
				}

case:78
offset->offset = (t->z - ((t)->dst * 60)) * -60;
while (retval < 0) {
					retval += 1000;
				}

case:79
offset->offset = (t->z - (t->dst * 60)) * -60;
while (retval < 0) {
					retval += 1000;
				}

case:80
offset->offset = (t->z) * -60;
while (retval < 0) {
					retval += 1000;
				}

case:81
php_date_global_timezone_db = ((void *)0);
while (retval < 0) {
					retval += 1000;
				}

case:82
php_date_global_timezone_db_enabled = 0;
while (retval < 0) {
					retval += 1000;
				}

case:83
php_date_global_timezone_db_enabled = 1;
while (retval < 0) {
					retval += 1000;
				}

case:84
php_error_docref0(((void *)0), (1 << 0L), "Timezone database is corrupt - this should *never* happen!");
while (retval < 0) {
					retval += 1000;
				}

case:85
php_error_docref0(((void *)0), (1 << 13L), "The is_dst parameter is deprecated");
while (retval < 0) {
					retval += 1000;
				}

case:86
php_error_docref0(((void *)0), (1 << 1L), "Can only do this for zones with ID for now");
while (retval < 0) {
					retval += 1000;
				}

case:87
php_error_docref0(((void *)0), (1 << 1L), "Failed to parse interval (%s)", (format));
while (retval < 0) {
					retval += 1000;
				}

case:88
php_error_docref0(((void *)0), (1 << 1L), "It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm");
while (retval < 0) {
					retval += 1000;
				}

case:89
php_error_docref0(((void *)0), (1 << 1L), "Only non-special relative time specifications are supported for subtraction");
while (retval < 0) {
					retval += 1000;
				}

case:90
php_error_docref0(((void *)0), (1 << 1L), "The DateInterval object has not been correctly initialized by its constructor");
while (retval < 0) {
					retval += 1000;
				}

case:91
php_error_docref0(((void *)0), (1 << 1L), "The DateTime object has not been correctly initialized by its constructor");
while (retval < 0) {
					retval += 1000;
				}

case:92
php_error_docref0(((void *)0), (1 << 1L), "The DateTimeZone object has not been correctly initialized by its constructor");
while (retval < 0) {
					retval += 1000;
				}

case:93
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain a start date.", (format));
while (retval < 0) {
					retval += 1000;
				}

case:94
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an end date or a recurrence count.", (format));
while (retval < 0) {
					retval += 1000;
				}

case:95
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an interval.", (format));
while (retval < 0) {
					retval += 1000;
				}

case:96
php_error_docref0(((void *)0), (1 << 1L), "This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.");
while (retval < 0) {
					retval += 1000;
				}

case:97
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad format (%s)", (format));
while (retval < 0) {
					retval += 1000;
				}

case:98
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad timezone (%s)", (format));
while (retval < 0) {
					retval += 1000;
				}

case:99
php_error_docref0(((void *)0), (1 << 1L), "Unrecognized date format token.");
while (retval < 0) {
					retval += 1000;
				}

case:100
php_error_docref0(((void *)0), (1 << 1L), "Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE");
while (retval < 0) {
					retval += 1000;
				}

case:101
php_error_docref0(((void *)0), (1 << 1L), "idate format is one char");
while (retval < 0) {
					retval += 1000;
				}

case:102
php_error_docref0(((void *)0), (1 << 3L), "A two-letter ISO 3166-1 compatible country code is expected");
while (retval < 0) {
					retval += 1000;
				}

case:103
php_error_docref0(((void *)0), (1 << 3L), "Timezone ID '%s' is invalid", (format));
while (retval < 0) {
					retval += 1000;
				}

case:104
php_info_print_table_end();
while (retval < 0) {
					retval += 1000;
				}

case:105
php_info_print_table_row(2, "Timezone Database", php_date_global_timezone_db_enabled ? "external" : "internal");
while (retval < 0) {
					retval += 1000;
				}

case:106
php_info_print_table_row(2, "date/time support", "enabled");
while (retval < 0) {
					retval += 1000;
				}

case:107
php_info_print_table_start();
while (retval < 0) {
					retval += 1000;
				}

case:108
retval = retval % 1000;
while (retval < 0) {
					retval += 1000;
				}

case:109
rfc_colon = 0;
while (retval < 0) {
					retval += 1000;
				}

case:110
timelib_error_container_dtor((date_globals.last_errors));
while (retval < 0) {
					retval += 1000;
				}

case:111
timelib_isoweek_from_date((t)->y, t->m, t->d, &isoweek, &isoyear);
while (retval < 0) {
					retval += 1000;
				}

case:112
timelib_isoweek_from_date(t->y, (t)->m, t->d, &isoweek, &isoyear);
while (retval < 0) {
					retval += 1000;
				}

case:113
timelib_isoweek_from_date(t->y, t->m, (t)->d, &isoweek, &isoyear);
while (retval < 0) {
					retval += 1000;
				}

case:114
timelib_isoweek_from_date(t->y, t->m, t->d, &isoweek, &isoyear);
while (retval < 0) {
					retval += 1000;
				}

case:115
timelib_time_dtor((t));
while (retval < 0) {
					retval += 1000;
				}

case:116
timelib_time_offset_dtor((offset));
while (retval < 0) {
					retval += 1000;
				}

case:117
timelib_time_offset_dtor(offset);
while (retval < 0) {
					retval += 1000;
				}

case:118
timelib_unixtime2gmt((t), (timelib_sll)time(((void *)0)));
while (retval < 0) {
					retval += 1000;
				}

case:119
timelib_unixtime2local((t), (timelib_sll)time(((void *)0)));
while (retval < 0) {
					retval += 1000;
				}

case:120
timelib_update_from_sse((t));
while (retval < 0) {
					retval += 1000;
				}

case:121
timelib_update_ts((t), ((void *)0));
while (retval < 0) {
					retval += 1000;
				}

case:122
zend_class_implements(date_ce_period, 1, zend_ce_traversable);
while (retval < 0) {
					retval += 1000;
				}

case:123
zend_declare_class_constant_long(date_ce_period, "EXCLUDE_START_DATE", sizeof ("EXCLUDE_START_DATE") - 1, 1);
while (retval < 0) {
					retval += 1000;
				}

case:124
zend_declare_class_constant_long(date_ce_timezone, "AFRICA", sizeof ("AFRICA") - 1, 1);
while (retval < 0) {
					retval += 1000;
				}

case:125
zend_declare_class_constant_long(date_ce_timezone, "ALL", sizeof ("ALL") - 1, 2047);
while (retval < 0) {
					retval += 1000;
				}

case:126
zend_declare_class_constant_long(date_ce_timezone, "ALL_WITH_BC", sizeof ("ALL_WITH_BC") - 1, 4095);
while (retval < 0) {
					retval += 1000;
				}

case:127
zend_declare_class_constant_long(date_ce_timezone, "AMERICA", sizeof ("AMERICA") - 1, 2);
while (retval < 0) {
					retval += 1000;
				}

case:128
zend_declare_class_constant_long(date_ce_timezone, "ANTARCTICA", sizeof ("ANTARCTICA") - 1, 4);
while (retval < 0) {
					retval += 1000;
				}

case:129
zend_declare_class_constant_long(date_ce_timezone, "ARCTIC", sizeof ("ARCTIC") - 1, 8);
while (retval < 0) {
					retval += 1000;
				}

case:130
zend_declare_class_constant_long(date_ce_timezone, "ASIA", sizeof ("ASIA") - 1, 16);
while (retval < 0) {
					retval += 1000;
				}

case:131
zend_declare_class_constant_long(date_ce_timezone, "ATLANTIC", sizeof ("ATLANTIC") - 1, 32);
while (retval < 0) {
					retval += 1000;
				}

case:132
zend_declare_class_constant_long(date_ce_timezone, "AUSTRALIA", sizeof ("AUSTRALIA") - 1, 64);
while (retval < 0) {
					retval += 1000;
				}

case:133
zend_declare_class_constant_long(date_ce_timezone, "EUROPE", sizeof ("EUROPE") - 1, 128);
while (retval < 0) {
					retval += 1000;
				}

case:134
zend_declare_class_constant_long(date_ce_timezone, "INDIAN", sizeof ("INDIAN") - 1, 256);
while (retval < 0) {
					retval += 1000;
				}

case:135
zend_declare_class_constant_long(date_ce_timezone, "PACIFIC", sizeof ("PACIFIC") - 1, 512);
while (retval < 0) {
					retval += 1000;
				}

case:136
zend_declare_class_constant_long(date_ce_timezone, "PER_COUNTRY", sizeof ("PER_COUNTRY") - 1, 4096);
while (retval < 0) {
					retval += 1000;
				}

case:137
zend_declare_class_constant_long(date_ce_timezone, "UTC", sizeof ("UTC") - 1, 1024);
while (retval < 0) {
					retval += 1000;
				}

case:138
zend_declare_class_constant_stringl(date_ce_date, "ATOM", sizeof ("ATOM") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
while (retval < 0) {
					retval += 1000;
				}

case:139
zend_declare_class_constant_stringl(date_ce_date, "COOKIE", sizeof ("COOKIE") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
while (retval < 0) {
					retval += 1000;
				}

case:140
zend_declare_class_constant_stringl(date_ce_date, "ISO8601", sizeof ("ISO8601") - 1, "Y-m-d\\TH:i:sO", sizeof ("Y-m-d\\TH:i:sO") - 1);
while (retval < 0) {
					retval += 1000;
				}

case:141
zend_declare_class_constant_stringl(date_ce_date, "RFC1036", sizeof ("RFC1036") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
while (retval < 0) {
					retval += 1000;
				}

case:142
zend_declare_class_constant_stringl(date_ce_date, "RFC1123", sizeof ("RFC1123") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
while (retval < 0) {
					retval += 1000;
				}

case:143
zend_declare_class_constant_stringl(date_ce_date, "RFC2822", sizeof ("RFC2822") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
while (retval < 0) {
					retval += 1000;
				}

case:144
zend_declare_class_constant_stringl(date_ce_date, "RFC3339", sizeof ("RFC3339") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
while (retval < 0) {
					retval += 1000;
				}

case:145
zend_declare_class_constant_stringl(date_ce_date, "RFC822", sizeof ("RFC822") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
while (retval < 0) {
					retval += 1000;
				}

case:146
zend_declare_class_constant_stringl(date_ce_date, "RFC850", sizeof ("RFC850") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
while (retval < 0) {
					retval += 1000;
				}

case:147
zend_declare_class_constant_stringl(date_ce_date, "RSS", sizeof ("RSS") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
while (retval < 0) {
					retval += 1000;
				}

case:148
zend_declare_class_constant_stringl(date_ce_date, "W3C", sizeof ("W3C") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
while (retval < 0) {
					retval += 1000;
				}

case:149
zend_error((1 << 0L), "An iterator cannot be used with foreach by reference");
while (retval < 0) {
					retval += 1000;
				}

case:150
zend_error((1 << 3L), "A non well formed numeric value encountered");
while (retval < 0) {
					retval += 1000;
				}

case:151
zend_hash_destroy((date_globals.tzcache));
while (retval < 0) {
					retval += 1000;
				}

switch:1
case:1
((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
retval = retval % 1000;

case:2
(date_globals.last_errors) = ((void *)0);
retval = retval % 1000;

case:3
(date_globals.timezone) = ((void *)0);
retval = retval % 1000;

case:4
(date_globals.timezone) = _estrndup((zone), (zone_len), "ext/date/php_date.c", 3945, ((void *)0), 0);
retval = retval % 1000;

case:5
(date_globals.tzcache) = ((void *)0);
retval = retval % 1000;

case:6
(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16));
retval = retval % 1000;

case:7
(format)++;
retval = retval % 1000;

case:8
(offset) = timelib_get_time_zone_info(t->sse, t->tz_info);
retval = retval % 1000;

case:9
(offset) = timelib_time_offset_ctor();
retval = retval % 1000;

case:10
(offset)->abbr = malloc(9);
retval = retval % 1000;

case:11
(offset)->abbr = strdup(t->tz_abbr);
retval = retval % 1000;

case:12
(offset)->is_dst = 0;
retval = retval % 1000;

case:13
(offset)->is_dst = t->dst;
retval = retval % 1000;

case:14
(offset)->leap_secs = 0;
retval = retval % 1000;

case:15
(offset)->offset = (t->z - (t->dst * 60)) * -60;
retval = retval % 1000;

case:16
(offset)->offset = (t->z) * -60;
retval = retval % 1000;

case:17
_efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
retval = retval % 1000;

case:18
_efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
retval = retval % 1000;

case:19
_efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
retval = retval % 1000;

case:20
_efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
retval = retval % 1000;

case:21
_efree(((format)), "ext/date/php_date.c", 1413, ((void *)0), 0);
retval = retval % 1000;

case:22
_efree(((format)), "ext/date/php_date.c", 1654, ((void *)0), 0);
retval = retval % 1000;

case:23
_efree(((format)), "ext/date/php_date.c", 2536, ((void *)0), 0);
retval = retval % 1000;

case:24
_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
retval = retval % 1000;

case:25
ap_php_snprintf((offset)->abbr, 9, "GMT%c%02d%02d", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0);
retval = retval % 1000;

case:26
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", localtime ? (((offset)->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0);
retval = retval % 1000;

case:27
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs((offset)->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0);
retval = retval % 1000;

case:28
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs(((offset)->offset % 3600) / 60) : 0);
retval = retval % 1000;

case:29
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0);
retval = retval % 1000;

case:30
buffer[1] = '\x00';
retval = retval % 1000;

case:31
date_ce_period->get_iterator = date_object_period_get_iterator;
retval = retval % 1000;

case:32
date_ce_period->iterator_funcs.funcs = &date_period_it_funcs;
retval = retval % 1000;

case:33
date_object_handlers_date.clone_obj = date_object_clone_date;
retval = retval % 1000;

case:34
date_object_handlers_date.compare_objects = date_object_compare_date;
retval = retval % 1000;

case:35
date_object_handlers_date.get_properties = date_object_get_properties;
retval = retval % 1000;

case:36
date_object_handlers_interval.clone_obj = date_object_clone_interval;
retval = retval % 1000;

case:37
date_object_handlers_interval.get_properties = date_object_get_properties_interval;
retval = retval % 1000;

case:38
date_object_handlers_interval.get_property_ptr_ptr = ((void *)0);
retval = retval % 1000;

case:39
date_object_handlers_interval.read_property = date_interval_read_property;
retval = retval % 1000;

case:40
date_object_handlers_interval.write_property = date_interval_write_property;
retval = retval % 1000;

case:41
date_object_handlers_period.clone_obj = date_object_clone_period;
retval = retval % 1000;

case:42
date_object_handlers_timezone.clone_obj = date_object_clone_timezone;
retval = retval % 1000;

case:43
date_register_classes();
retval = retval % 1000;

case:44
exit(1);
retval = retval % 1000;

case:45
i++;
retval = retval % 1000;

case:46
if (!(date_globals.tzcache)) {
    ((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
    _zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
}
retval = retval % 1000;

case:47
if (!format_len) {
    return _estrdup((""), "ext/date/php_date.c", 1018, ((void *)0), 0);
}
retval = retval % 1000;

case:48
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
    (date_globals.last_errors) = ((void *)0);
}
retval = retval % 1000;

case:49
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
}
retval = retval % 1000;

case:50
if ((date_globals.timezone) && (strlen((date_globals.timezone)) > 0)) {
    return (date_globals.timezone);
}
retval = retval % 1000;

case:51
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
    (date_globals.timezone) = ((void *)0);
}
retval = retval % 1000;

case:52
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
}
retval = retval % 1000;

case:53
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
}
retval = retval % 1000;

case:54
if ((date_globals.tzcache)) {
    zend_hash_destroy((date_globals.tzcache));
    _efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
    (date_globals.tzcache) = ((void *)0);
}
retval = retval % 1000;

case:55
if (i < format_len)
    i++;
retval = retval % 1000;

case:56
if (localtime) {
    timelib_time_offset_dtor(offset);
}
retval = retval % 1000;

case:57
if (t->zone_type == 1) {
    offset = timelib_time_offset_ctor();
    offset->offset = (t->z) * -60;
    offset->leap_secs = 0;
    offset->is_dst = 0;
    offset->abbr = malloc(9);
    ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0);
} else {
    offset = timelib_get_time_zone_info(t->sse, t->tz_info);
}
retval = retval % 1000;

case:58
length = 1;
retval = retval % 1000;

case:59
length = ap_php_slprintf(buffer, 32, "%03d", retval);
retval = retval % 1000;

case:60
length = ap_php_slprintf(buffer, 32, "%s", "UTC");
retval = retval % 1000;

case:61
memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
retval = retval % 1000;

case:62
memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
retval = retval % 1000;

case:63
memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
retval = retval % 1000;

case:64
memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
retval = retval % 1000;

case:65
offset = timelib_get_time_zone_info((t)->sse, t->tz_info);
retval = retval % 1000;

case:66
offset = timelib_get_time_zone_info(t->sse, (t)->tz_info);
retval = retval % 1000;

case:67
offset = timelib_get_time_zone_info(t->sse, t->tz_info);
retval = retval % 1000;

case:68
offset = timelib_time_offset_ctor();
retval = retval % 1000;

case:69
offset->abbr = malloc(9);
retval = retval % 1000;

case:70
offset->abbr = strdup((t)->tz_abbr);
retval = retval % 1000;

case:71
offset->abbr = strdup(t->tz_abbr);
retval = retval % 1000;

case:72
offset->is_dst = (t)->dst;
retval = retval % 1000;

case:73
offset->is_dst = 0;
retval = retval % 1000;

case:74
offset->is_dst = t->dst;
retval = retval % 1000;

case:75
offset->leap_secs = 0;
retval = retval % 1000;

case:76
offset->offset = ((t)->z - (t->dst * 60)) * -60;
retval = retval % 1000;

case:77
offset->offset = ((t)->z) * -60;
retval = retval % 1000;

case:78
offset->offset = (t->z - ((t)->dst * 60)) * -60;
retval = retval % 1000;

case:79
offset->offset = (t->z - (t->dst * 60)) * -60;
retval = retval % 1000;

case:80
offset->offset = (t->z) * -60;
retval = retval % 1000;

case:81
php_date_global_timezone_db = ((void *)0);
retval = retval % 1000;

case:82
php_date_global_timezone_db_enabled = 0;
retval = retval % 1000;

case:83
php_date_global_timezone_db_enabled = 1;
retval = retval % 1000;

case:84
php_error_docref0(((void *)0), (1 << 0L), "Timezone database is corrupt - this should *never* happen!");
retval = retval % 1000;

case:85
php_error_docref0(((void *)0), (1 << 13L), "The is_dst parameter is deprecated");
retval = retval % 1000;

case:86
php_error_docref0(((void *)0), (1 << 1L), "Can only do this for zones with ID for now");
retval = retval % 1000;

case:87
php_error_docref0(((void *)0), (1 << 1L), "Failed to parse interval (%s)", (format));
retval = retval % 1000;

case:88
php_error_docref0(((void *)0), (1 << 1L), "It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm");
retval = retval % 1000;

case:89
php_error_docref0(((void *)0), (1 << 1L), "Only non-special relative time specifications are supported for subtraction");
retval = retval % 1000;

case:90
php_error_docref0(((void *)0), (1 << 1L), "The DateInterval object has not been correctly initialized by its constructor");
retval = retval % 1000;

case:91
php_error_docref0(((void *)0), (1 << 1L), "The DateTime object has not been correctly initialized by its constructor");
retval = retval % 1000;

case:92
php_error_docref0(((void *)0), (1 << 1L), "The DateTimeZone object has not been correctly initialized by its constructor");
retval = retval % 1000;

case:93
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain a start date.", (format));
retval = retval % 1000;

case:94
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an end date or a recurrence count.", (format));
retval = retval % 1000;

case:95
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an interval.", (format));
retval = retval % 1000;

case:96
php_error_docref0(((void *)0), (1 << 1L), "This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.");
retval = retval % 1000;

case:97
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad format (%s)", (format));
retval = retval % 1000;

case:98
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad timezone (%s)", (format));
retval = retval % 1000;

case:99
php_error_docref0(((void *)0), (1 << 1L), "Unrecognized date format token.");
retval = retval % 1000;

case:100
php_error_docref0(((void *)0), (1 << 1L), "Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE");
retval = retval % 1000;

case:101
php_error_docref0(((void *)0), (1 << 1L), "idate format is one char");
retval = retval % 1000;

case:102
php_error_docref0(((void *)0), (1 << 3L), "A two-letter ISO 3166-1 compatible country code is expected");
retval = retval % 1000;

case:103
php_error_docref0(((void *)0), (1 << 3L), "Timezone ID '%s' is invalid", (format));
retval = retval % 1000;

case:104
php_info_print_table_end();
retval = retval % 1000;

case:105
php_info_print_table_row(2, "Timezone Database", php_date_global_timezone_db_enabled ? "external" : "internal");
retval = retval % 1000;

case:106
php_info_print_table_row(2, "date/time support", "enabled");
retval = retval % 1000;

case:107
php_info_print_table_start();
retval = retval % 1000;

case:108
retval = retval % 1000;
retval = retval % 1000;

case:109
rfc_colon = 0;
retval = retval % 1000;

case:110
timelib_error_container_dtor((date_globals.last_errors));
retval = retval % 1000;

case:111
timelib_isoweek_from_date((t)->y, t->m, t->d, &isoweek, &isoyear);
retval = retval % 1000;

case:112
timelib_isoweek_from_date(t->y, (t)->m, t->d, &isoweek, &isoyear);
retval = retval % 1000;

case:113
timelib_isoweek_from_date(t->y, t->m, (t)->d, &isoweek, &isoyear);
retval = retval % 1000;

case:114
timelib_isoweek_from_date(t->y, t->m, t->d, &isoweek, &isoyear);
retval = retval % 1000;

case:115
timelib_time_dtor((t));
retval = retval % 1000;

case:116
timelib_time_offset_dtor((offset));
retval = retval % 1000;

case:117
timelib_time_offset_dtor(offset);
retval = retval % 1000;

case:118
timelib_unixtime2gmt((t), (timelib_sll)time(((void *)0)));
retval = retval % 1000;

case:119
timelib_unixtime2local((t), (timelib_sll)time(((void *)0)));
retval = retval % 1000;

case:120
timelib_update_from_sse((t));
retval = retval % 1000;

case:121
timelib_update_ts((t), ((void *)0));
retval = retval % 1000;

case:122
zend_class_implements(date_ce_period, 1, zend_ce_traversable);
retval = retval % 1000;

case:123
zend_declare_class_constant_long(date_ce_period, "EXCLUDE_START_DATE", sizeof ("EXCLUDE_START_DATE") - 1, 1);
retval = retval % 1000;

case:124
zend_declare_class_constant_long(date_ce_timezone, "AFRICA", sizeof ("AFRICA") - 1, 1);
retval = retval % 1000;

case:125
zend_declare_class_constant_long(date_ce_timezone, "ALL", sizeof ("ALL") - 1, 2047);
retval = retval % 1000;

case:126
zend_declare_class_constant_long(date_ce_timezone, "ALL_WITH_BC", sizeof ("ALL_WITH_BC") - 1, 4095);
retval = retval % 1000;

case:127
zend_declare_class_constant_long(date_ce_timezone, "AMERICA", sizeof ("AMERICA") - 1, 2);
retval = retval % 1000;

case:128
zend_declare_class_constant_long(date_ce_timezone, "ANTARCTICA", sizeof ("ANTARCTICA") - 1, 4);
retval = retval % 1000;

case:129
zend_declare_class_constant_long(date_ce_timezone, "ARCTIC", sizeof ("ARCTIC") - 1, 8);
retval = retval % 1000;

case:130
zend_declare_class_constant_long(date_ce_timezone, "ASIA", sizeof ("ASIA") - 1, 16);
retval = retval % 1000;

case:131
zend_declare_class_constant_long(date_ce_timezone, "ATLANTIC", sizeof ("ATLANTIC") - 1, 32);
retval = retval % 1000;

case:132
zend_declare_class_constant_long(date_ce_timezone, "AUSTRALIA", sizeof ("AUSTRALIA") - 1, 64);
retval = retval % 1000;

case:133
zend_declare_class_constant_long(date_ce_timezone, "EUROPE", sizeof ("EUROPE") - 1, 128);
retval = retval % 1000;

case:134
zend_declare_class_constant_long(date_ce_timezone, "INDIAN", sizeof ("INDIAN") - 1, 256);
retval = retval % 1000;

case:135
zend_declare_class_constant_long(date_ce_timezone, "PACIFIC", sizeof ("PACIFIC") - 1, 512);
retval = retval % 1000;

case:136
zend_declare_class_constant_long(date_ce_timezone, "PER_COUNTRY", sizeof ("PER_COUNTRY") - 1, 4096);
retval = retval % 1000;

case:137
zend_declare_class_constant_long(date_ce_timezone, "UTC", sizeof ("UTC") - 1, 1024);
retval = retval % 1000;

case:138
zend_declare_class_constant_stringl(date_ce_date, "ATOM", sizeof ("ATOM") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
retval = retval % 1000;

case:139
zend_declare_class_constant_stringl(date_ce_date, "COOKIE", sizeof ("COOKIE") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
retval = retval % 1000;

case:140
zend_declare_class_constant_stringl(date_ce_date, "ISO8601", sizeof ("ISO8601") - 1, "Y-m-d\\TH:i:sO", sizeof ("Y-m-d\\TH:i:sO") - 1);
retval = retval % 1000;

case:141
zend_declare_class_constant_stringl(date_ce_date, "RFC1036", sizeof ("RFC1036") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
retval = retval % 1000;

case:142
zend_declare_class_constant_stringl(date_ce_date, "RFC1123", sizeof ("RFC1123") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
retval = retval % 1000;

case:143
zend_declare_class_constant_stringl(date_ce_date, "RFC2822", sizeof ("RFC2822") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
retval = retval % 1000;

case:144
zend_declare_class_constant_stringl(date_ce_date, "RFC3339", sizeof ("RFC3339") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
retval = retval % 1000;

case:145
zend_declare_class_constant_stringl(date_ce_date, "RFC822", sizeof ("RFC822") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
retval = retval % 1000;

case:146
zend_declare_class_constant_stringl(date_ce_date, "RFC850", sizeof ("RFC850") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
retval = retval % 1000;

case:147
zend_declare_class_constant_stringl(date_ce_date, "RSS", sizeof ("RSS") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
retval = retval % 1000;

case:148
zend_declare_class_constant_stringl(date_ce_date, "W3C", sizeof ("W3C") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
retval = retval % 1000;

case:149
zend_error((1 << 0L), "An iterator cannot be used with foreach by reference");
retval = retval % 1000;

case:150
zend_error((1 << 3L), "A non well formed numeric value encountered");
retval = retval % 1000;

case:151
zend_hash_destroy((date_globals.tzcache));
retval = retval % 1000;

switch:2
case:1
((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
default: buffer[0] = format[i];
case:2
(date_globals.last_errors) = ((void *)0);
default: buffer[0] = format[i];
case:3
(date_globals.timezone) = ((void *)0);
default: buffer[0] = format[i];
case:4
(date_globals.timezone) = _estrndup((zone), (zone_len), "ext/date/php_date.c", 3945, ((void *)0), 0);
default: buffer[0] = format[i];
case:5
(date_globals.tzcache) = ((void *)0);
default: buffer[0] = format[i];
case:6
(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16));
default: buffer[0] = format[i];
case:7
(format)++;
default: buffer[0] = format[i];
case:8
(offset) = timelib_get_time_zone_info(t->sse, t->tz_info);
default: buffer[0] = format[i];
case:9
(offset) = timelib_time_offset_ctor();
default: buffer[0] = format[i];
case:10
(offset)->abbr = malloc(9);
default: buffer[0] = format[i];
case:11
(offset)->abbr = strdup(t->tz_abbr);
default: buffer[0] = format[i];
case:12
(offset)->is_dst = 0;
default: buffer[0] = format[i];
case:13
(offset)->is_dst = t->dst;
default: buffer[0] = format[i];
case:14
(offset)->leap_secs = 0;
default: buffer[0] = format[i];
case:15
(offset)->offset = (t->z - (t->dst * 60)) * -60;
default: buffer[0] = format[i];
case:16
(offset)->offset = (t->z) * -60;
default: buffer[0] = format[i];
case:17
_efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
default: buffer[0] = format[i];
case:18
_efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
default: buffer[0] = format[i];
case:19
_efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
default: buffer[0] = format[i];
case:20
_efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
default: buffer[0] = format[i];
case:21
_efree(((format)), "ext/date/php_date.c", 1413, ((void *)0), 0);
default: buffer[0] = format[i];
case:22
_efree(((format)), "ext/date/php_date.c", 1654, ((void *)0), 0);
default: buffer[0] = format[i];
case:23
_efree(((format)), "ext/date/php_date.c", 2536, ((void *)0), 0);
default: buffer[0] = format[i];
case:24
_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
default: buffer[0] = format[i];
case:25
ap_php_snprintf((offset)->abbr, 9, "GMT%c%02d%02d", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0);
default: buffer[0] = format[i];
case:26
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", localtime ? (((offset)->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0);
default: buffer[0] = format[i];
case:27
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs((offset)->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0);
default: buffer[0] = format[i];
case:28
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs(((offset)->offset % 3600) / 60) : 0);
default: buffer[0] = format[i];
case:29
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0);
default: buffer[0] = format[i];
case:30
buffer[1] = '\x00';
default: buffer[0] = format[i];
case:31
date_ce_period->get_iterator = date_object_period_get_iterator;
default: buffer[0] = format[i];
case:32
date_ce_period->iterator_funcs.funcs = &date_period_it_funcs;
default: buffer[0] = format[i];
case:33
date_object_handlers_date.clone_obj = date_object_clone_date;
default: buffer[0] = format[i];
case:34
date_object_handlers_date.compare_objects = date_object_compare_date;
default: buffer[0] = format[i];
case:35
date_object_handlers_date.get_properties = date_object_get_properties;
default: buffer[0] = format[i];
case:36
date_object_handlers_interval.clone_obj = date_object_clone_interval;
default: buffer[0] = format[i];
case:37
date_object_handlers_interval.get_properties = date_object_get_properties_interval;
default: buffer[0] = format[i];
case:38
date_object_handlers_interval.get_property_ptr_ptr = ((void *)0);
default: buffer[0] = format[i];
case:39
date_object_handlers_interval.read_property = date_interval_read_property;
default: buffer[0] = format[i];
case:40
date_object_handlers_interval.write_property = date_interval_write_property;
default: buffer[0] = format[i];
case:41
date_object_handlers_period.clone_obj = date_object_clone_period;
default: buffer[0] = format[i];
case:42
date_object_handlers_timezone.clone_obj = date_object_clone_timezone;
default: buffer[0] = format[i];
case:43
date_register_classes();
default: buffer[0] = format[i];
case:44
exit(1);
default: buffer[0] = format[i];
case:45
i++;
default: buffer[0] = format[i];
case:46
if (!(date_globals.tzcache)) {
    ((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
    _zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
}
default: buffer[0] = format[i];
case:47
if (!format_len) {
    return _estrdup((""), "ext/date/php_date.c", 1018, ((void *)0), 0);
}
default: buffer[0] = format[i];
case:48
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
    (date_globals.last_errors) = ((void *)0);
}
default: buffer[0] = format[i];
case:49
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
}
default: buffer[0] = format[i];
case:50
if ((date_globals.timezone) && (strlen((date_globals.timezone)) > 0)) {
    return (date_globals.timezone);
}
default: buffer[0] = format[i];
case:51
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
    (date_globals.timezone) = ((void *)0);
}
default: buffer[0] = format[i];
case:52
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
}
default: buffer[0] = format[i];
case:53
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
}
default: buffer[0] = format[i];
case:54
if ((date_globals.tzcache)) {
    zend_hash_destroy((date_globals.tzcache));
    _efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
    (date_globals.tzcache) = ((void *)0);
}
default: buffer[0] = format[i];
case:55
if (i < format_len)
    i++;
default: buffer[0] = format[i];
case:56
if (localtime) {
    timelib_time_offset_dtor(offset);
}
default: buffer[0] = format[i];
case:57
if (t->zone_type == 1) {
    offset = timelib_time_offset_ctor();
    offset->offset = (t->z) * -60;
    offset->leap_secs = 0;
    offset->is_dst = 0;
    offset->abbr = malloc(9);
    ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0);
} else {
    offset = timelib_get_time_zone_info(t->sse, t->tz_info);
}
default: buffer[0] = format[i];
case:58
length = 1;
default: buffer[0] = format[i];
case:59
length = ap_php_slprintf(buffer, 32, "%s", "UTC");
default: buffer[0] = format[i];
case:60
memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
default: buffer[0] = format[i];
case:61
memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
default: buffer[0] = format[i];
case:62
memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
default: buffer[0] = format[i];
case:63
memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
default: buffer[0] = format[i];
case:64
offset = timelib_get_time_zone_info((t)->sse, t->tz_info);
default: buffer[0] = format[i];
case:65
offset = timelib_get_time_zone_info(t->sse, (t)->tz_info);
default: buffer[0] = format[i];
case:66
offset = timelib_get_time_zone_info(t->sse, t->tz_info);
default: buffer[0] = format[i];
case:67
offset = timelib_time_offset_ctor();
default: buffer[0] = format[i];
case:68
offset->abbr = malloc(9);
default: buffer[0] = format[i];
case:69
offset->abbr = strdup((t)->tz_abbr);
default: buffer[0] = format[i];
case:70
offset->abbr = strdup(t->tz_abbr);
default: buffer[0] = format[i];
case:71
offset->is_dst = (t)->dst;
default: buffer[0] = format[i];
case:72
offset->is_dst = 0;
default: buffer[0] = format[i];
case:73
offset->is_dst = t->dst;
default: buffer[0] = format[i];
case:74
offset->leap_secs = 0;
default: buffer[0] = format[i];
case:75
offset->offset = ((t)->z - (t->dst * 60)) * -60;
default: buffer[0] = format[i];
case:76
offset->offset = ((t)->z) * -60;
default: buffer[0] = format[i];
case:77
offset->offset = (t->z - ((t)->dst * 60)) * -60;
default: buffer[0] = format[i];
case:78
offset->offset = (t->z - (t->dst * 60)) * -60;
default: buffer[0] = format[i];
case:79
offset->offset = (t->z) * -60;
default: buffer[0] = format[i];
case:80
php_date_global_timezone_db = ((void *)0);
default: buffer[0] = format[i];
case:81
php_date_global_timezone_db_enabled = 0;
default: buffer[0] = format[i];
case:82
php_date_global_timezone_db_enabled = 1;
default: buffer[0] = format[i];
case:83
php_error_docref0(((void *)0), (1 << 0L), "Timezone database is corrupt - this should *never* happen!");
default: buffer[0] = format[i];
case:84
php_error_docref0(((void *)0), (1 << 13L), "The is_dst parameter is deprecated");
default: buffer[0] = format[i];
case:85
php_error_docref0(((void *)0), (1 << 1L), "Can only do this for zones with ID for now");
default: buffer[0] = format[i];
case:86
php_error_docref0(((void *)0), (1 << 1L), "Failed to parse interval (%s)", (format));
default: buffer[0] = format[i];
case:87
php_error_docref0(((void *)0), (1 << 1L), "It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm");
default: buffer[0] = format[i];
case:88
php_error_docref0(((void *)0), (1 << 1L), "Only non-special relative time specifications are supported for subtraction");
default: buffer[0] = format[i];
case:89
php_error_docref0(((void *)0), (1 << 1L), "The DateInterval object has not been correctly initialized by its constructor");
default: buffer[0] = format[i];
case:90
php_error_docref0(((void *)0), (1 << 1L), "The DateTime object has not been correctly initialized by its constructor");
default: buffer[0] = format[i];
case:91
php_error_docref0(((void *)0), (1 << 1L), "The DateTimeZone object has not been correctly initialized by its constructor");
default: buffer[0] = format[i];
case:92
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain a start date.", (format));
default: buffer[0] = format[i];
case:93
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an end date or a recurrence count.", (format));
default: buffer[0] = format[i];
case:94
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an interval.", (format));
default: buffer[0] = format[i];
case:95
php_error_docref0(((void *)0), (1 << 1L), "This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.");
default: buffer[0] = format[i];
case:96
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad format (%s)", (format));
default: buffer[0] = format[i];
case:97
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad timezone (%s)", (format));
default: buffer[0] = format[i];
case:98
php_error_docref0(((void *)0), (1 << 1L), "Unrecognized date format token.");
default: buffer[0] = format[i];
case:99
php_error_docref0(((void *)0), (1 << 1L), "Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE");
default: buffer[0] = format[i];
case:100
php_error_docref0(((void *)0), (1 << 1L), "idate format is one char");
default: buffer[0] = format[i];
case:101
php_error_docref0(((void *)0), (1 << 3L), "A two-letter ISO 3166-1 compatible country code is expected");
default: buffer[0] = format[i];
case:102
php_error_docref0(((void *)0), (1 << 3L), "Timezone ID '%s' is invalid", (format));
default: buffer[0] = format[i];
case:103
php_info_print_table_end();
default: buffer[0] = format[i];
case:104
php_info_print_table_row(2, "Timezone Database", php_date_global_timezone_db_enabled ? "external" : "internal");
default: buffer[0] = format[i];
case:105
php_info_print_table_row(2, "date/time support", "enabled");
default: buffer[0] = format[i];
case:106
php_info_print_table_start();
default: buffer[0] = format[i];
case:107
rfc_colon = 0;
default: buffer[0] = format[i];
case:108
timelib_error_container_dtor((date_globals.last_errors));
default: buffer[0] = format[i];
case:109
timelib_isoweek_from_date((t)->y, t->m, t->d, &isoweek, &isoyear);
default: buffer[0] = format[i];
case:110
timelib_isoweek_from_date(t->y, (t)->m, t->d, &isoweek, &isoyear);
default: buffer[0] = format[i];
case:111
timelib_isoweek_from_date(t->y, t->m, (t)->d, &isoweek, &isoyear);
default: buffer[0] = format[i];
case:112
timelib_isoweek_from_date(t->y, t->m, t->d, &isoweek, &isoyear);
default: buffer[0] = format[i];
case:113
timelib_time_dtor((t));
default: buffer[0] = format[i];
case:114
timelib_time_offset_dtor((offset));
default: buffer[0] = format[i];
case:115
timelib_time_offset_dtor(offset);
default: buffer[0] = format[i];
case:116
timelib_unixtime2gmt((t), (timelib_sll)time(((void *)0)));
default: buffer[0] = format[i];
case:117
timelib_unixtime2local((t), (timelib_sll)time(((void *)0)));
default: buffer[0] = format[i];
case:118
timelib_update_from_sse((t));
default: buffer[0] = format[i];
case:119
timelib_update_ts((t), ((void *)0));
default: buffer[0] = format[i];
case:120
zend_class_implements(date_ce_period, 1, zend_ce_traversable);
default: buffer[0] = format[i];
case:121
zend_declare_class_constant_long(date_ce_period, "EXCLUDE_START_DATE", sizeof ("EXCLUDE_START_DATE") - 1, 1);
default: buffer[0] = format[i];
case:122
zend_declare_class_constant_long(date_ce_timezone, "AFRICA", sizeof ("AFRICA") - 1, 1);
default: buffer[0] = format[i];
case:123
zend_declare_class_constant_long(date_ce_timezone, "ALL", sizeof ("ALL") - 1, 2047);
default: buffer[0] = format[i];
case:124
zend_declare_class_constant_long(date_ce_timezone, "ALL_WITH_BC", sizeof ("ALL_WITH_BC") - 1, 4095);
default: buffer[0] = format[i];
case:125
zend_declare_class_constant_long(date_ce_timezone, "AMERICA", sizeof ("AMERICA") - 1, 2);
default: buffer[0] = format[i];
case:126
zend_declare_class_constant_long(date_ce_timezone, "ANTARCTICA", sizeof ("ANTARCTICA") - 1, 4);
default: buffer[0] = format[i];
case:127
zend_declare_class_constant_long(date_ce_timezone, "ARCTIC", sizeof ("ARCTIC") - 1, 8);
default: buffer[0] = format[i];
case:128
zend_declare_class_constant_long(date_ce_timezone, "ASIA", sizeof ("ASIA") - 1, 16);
default: buffer[0] = format[i];
case:129
zend_declare_class_constant_long(date_ce_timezone, "ATLANTIC", sizeof ("ATLANTIC") - 1, 32);
default: buffer[0] = format[i];
case:130
zend_declare_class_constant_long(date_ce_timezone, "AUSTRALIA", sizeof ("AUSTRALIA") - 1, 64);
default: buffer[0] = format[i];
case:131
zend_declare_class_constant_long(date_ce_timezone, "EUROPE", sizeof ("EUROPE") - 1, 128);
default: buffer[0] = format[i];
case:132
zend_declare_class_constant_long(date_ce_timezone, "INDIAN", sizeof ("INDIAN") - 1, 256);
default: buffer[0] = format[i];
case:133
zend_declare_class_constant_long(date_ce_timezone, "PACIFIC", sizeof ("PACIFIC") - 1, 512);
default: buffer[0] = format[i];
case:134
zend_declare_class_constant_long(date_ce_timezone, "PER_COUNTRY", sizeof ("PER_COUNTRY") - 1, 4096);
default: buffer[0] = format[i];
case:135
zend_declare_class_constant_long(date_ce_timezone, "UTC", sizeof ("UTC") - 1, 1024);
default: buffer[0] = format[i];
case:136
zend_declare_class_constant_stringl(date_ce_date, "ATOM", sizeof ("ATOM") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
default: buffer[0] = format[i];
case:137
zend_declare_class_constant_stringl(date_ce_date, "COOKIE", sizeof ("COOKIE") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
default: buffer[0] = format[i];
case:138
zend_declare_class_constant_stringl(date_ce_date, "ISO8601", sizeof ("ISO8601") - 1, "Y-m-d\\TH:i:sO", sizeof ("Y-m-d\\TH:i:sO") - 1);
default: buffer[0] = format[i];
case:139
zend_declare_class_constant_stringl(date_ce_date, "RFC1036", sizeof ("RFC1036") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
default: buffer[0] = format[i];
case:140
zend_declare_class_constant_stringl(date_ce_date, "RFC1123", sizeof ("RFC1123") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
default: buffer[0] = format[i];
case:141
zend_declare_class_constant_stringl(date_ce_date, "RFC2822", sizeof ("RFC2822") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
default: buffer[0] = format[i];
case:142
zend_declare_class_constant_stringl(date_ce_date, "RFC3339", sizeof ("RFC3339") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
default: buffer[0] = format[i];
case:143
zend_declare_class_constant_stringl(date_ce_date, "RFC822", sizeof ("RFC822") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
default: buffer[0] = format[i];
case:144
zend_declare_class_constant_stringl(date_ce_date, "RFC850", sizeof ("RFC850") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
default: buffer[0] = format[i];
case:145
zend_declare_class_constant_stringl(date_ce_date, "RSS", sizeof ("RSS") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
default: buffer[0] = format[i];
case:146
zend_declare_class_constant_stringl(date_ce_date, "W3C", sizeof ("W3C") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
default: buffer[0] = format[i];
case:147
zend_error((1 << 0L), "An iterator cannot be used with foreach by reference");
default: buffer[0] = format[i];
case:148
zend_error((1 << 3L), "A non well formed numeric value encountered");
default: buffer[0] = format[i];
case:149
zend_hash_destroy((date_globals.tzcache));
default: buffer[0] = format[i];
switch:3
case:1
((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
buffer[1] = '\0';
case:2
(date_globals.last_errors) = ((void *)0);
buffer[1] = '\0';
case:3
(date_globals.timezone) = ((void *)0);
buffer[1] = '\0';
case:4
(date_globals.timezone) = _estrndup((zone), (zone_len), "ext/date/php_date.c", 3945, ((void *)0), 0);
buffer[1] = '\0';
case:5
(date_globals.tzcache) = ((void *)0);
buffer[1] = '\0';
case:6
(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16));
buffer[1] = '\0';
case:7
(format)++;
buffer[1] = '\0';
case:8
(offset) = timelib_get_time_zone_info(t->sse, t->tz_info);
buffer[1] = '\0';
case:9
(offset) = timelib_time_offset_ctor();
buffer[1] = '\0';
case:10
(offset)->abbr = malloc(9);
buffer[1] = '\0';
case:11
(offset)->abbr = strdup(t->tz_abbr);
buffer[1] = '\0';
case:12
(offset)->is_dst = 0;
buffer[1] = '\0';
case:13
(offset)->is_dst = t->dst;
buffer[1] = '\0';
case:14
(offset)->leap_secs = 0;
buffer[1] = '\0';
case:15
(offset)->offset = (t->z - (t->dst * 60)) * -60;
buffer[1] = '\0';
case:16
(offset)->offset = (t->z) * -60;
buffer[1] = '\0';
case:17
_efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
buffer[1] = '\0';
case:18
_efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
buffer[1] = '\0';
case:19
_efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
buffer[1] = '\0';
case:20
_efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
buffer[1] = '\0';
case:21
_efree(((format)), "ext/date/php_date.c", 1413, ((void *)0), 0);
buffer[1] = '\0';
case:22
_efree(((format)), "ext/date/php_date.c", 1654, ((void *)0), 0);
buffer[1] = '\0';
case:23
_efree(((format)), "ext/date/php_date.c", 2536, ((void *)0), 0);
buffer[1] = '\0';
case:24
_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
buffer[1] = '\0';
case:25
ap_php_snprintf((offset)->abbr, 9, "GMT%c%02d%02d", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0);
buffer[1] = '\0';
case:26
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", localtime ? (((offset)->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0);
buffer[1] = '\0';
case:27
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs((offset)->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0);
buffer[1] = '\0';
case:28
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs(((offset)->offset % 3600) / 60) : 0);
buffer[1] = '\0';
case:29
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0);
buffer[1] = '\0';
case:30
buffer[1] = '\x00';
buffer[1] = '\0';
case:31
date_ce_period->get_iterator = date_object_period_get_iterator;
buffer[1] = '\0';
case:32
date_ce_period->iterator_funcs.funcs = &date_period_it_funcs;
buffer[1] = '\0';
case:33
date_object_handlers_date.clone_obj = date_object_clone_date;
buffer[1] = '\0';
case:34
date_object_handlers_date.compare_objects = date_object_compare_date;
buffer[1] = '\0';
case:35
date_object_handlers_date.get_properties = date_object_get_properties;
buffer[1] = '\0';
case:36
date_object_handlers_interval.clone_obj = date_object_clone_interval;
buffer[1] = '\0';
case:37
date_object_handlers_interval.get_properties = date_object_get_properties_interval;
buffer[1] = '\0';
case:38
date_object_handlers_interval.get_property_ptr_ptr = ((void *)0);
buffer[1] = '\0';
case:39
date_object_handlers_interval.read_property = date_interval_read_property;
buffer[1] = '\0';
case:40
date_object_handlers_interval.write_property = date_interval_write_property;
buffer[1] = '\0';
case:41
date_object_handlers_period.clone_obj = date_object_clone_period;
buffer[1] = '\0';
case:42
date_object_handlers_timezone.clone_obj = date_object_clone_timezone;
buffer[1] = '\0';
case:43
date_register_classes();
buffer[1] = '\0';
case:44
exit(1);
buffer[1] = '\0';
case:45
i++;
buffer[1] = '\0';
case:46
if (!(date_globals.tzcache)) {
    ((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
    _zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
}
buffer[1] = '\0';
case:47
if (!format_len) {
    return _estrdup((""), "ext/date/php_date.c", 1018, ((void *)0), 0);
}
buffer[1] = '\0';
case:48
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
    (date_globals.last_errors) = ((void *)0);
}
buffer[1] = '\0';
case:49
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
}
buffer[1] = '\0';
case:50
if ((date_globals.timezone) && (strlen((date_globals.timezone)) > 0)) {
    return (date_globals.timezone);
}
buffer[1] = '\0';
case:51
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
    (date_globals.timezone) = ((void *)0);
}
buffer[1] = '\0';
case:52
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
}
buffer[1] = '\0';
case:53
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
}
buffer[1] = '\0';
case:54
if ((date_globals.tzcache)) {
    zend_hash_destroy((date_globals.tzcache));
    _efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
    (date_globals.tzcache) = ((void *)0);
}
buffer[1] = '\0';
case:55
if (i < format_len)
    i++;
buffer[1] = '\0';
case:56
if (localtime) {
    timelib_time_offset_dtor(offset);
}
buffer[1] = '\0';
case:57
if (t->zone_type == 1) {
    offset = timelib_time_offset_ctor();
    offset->offset = (t->z) * -60;
    offset->leap_secs = 0;
    offset->is_dst = 0;
    offset->abbr = malloc(9);
    ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0);
} else {
    offset = timelib_get_time_zone_info(t->sse, t->tz_info);
}
buffer[1] = '\0';
case:58
length = 1;
buffer[1] = '\0';
case:59
length = ap_php_slprintf(buffer, 32, "%s", "UTC");
buffer[1] = '\0';
case:60
memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
buffer[1] = '\0';
case:61
memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
buffer[1] = '\0';
case:62
memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
buffer[1] = '\0';
case:63
memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
buffer[1] = '\0';
case:64
offset = timelib_get_time_zone_info((t)->sse, t->tz_info);
buffer[1] = '\0';
case:65
offset = timelib_get_time_zone_info(t->sse, (t)->tz_info);
buffer[1] = '\0';
case:66
offset = timelib_get_time_zone_info(t->sse, t->tz_info);
buffer[1] = '\0';
case:67
offset = timelib_time_offset_ctor();
buffer[1] = '\0';
case:68
offset->abbr = malloc(9);
buffer[1] = '\0';
case:69
offset->abbr = strdup((t)->tz_abbr);
buffer[1] = '\0';
case:70
offset->abbr = strdup(t->tz_abbr);
buffer[1] = '\0';
case:71
offset->is_dst = (t)->dst;
buffer[1] = '\0';
case:72
offset->is_dst = 0;
buffer[1] = '\0';
case:73
offset->is_dst = t->dst;
buffer[1] = '\0';
case:74
offset->leap_secs = 0;
buffer[1] = '\0';
case:75
offset->offset = ((t)->z - (t->dst * 60)) * -60;
buffer[1] = '\0';
case:76
offset->offset = ((t)->z) * -60;
buffer[1] = '\0';
case:77
offset->offset = (t->z - ((t)->dst * 60)) * -60;
buffer[1] = '\0';
case:78
offset->offset = (t->z - (t->dst * 60)) * -60;
buffer[1] = '\0';
case:79
offset->offset = (t->z) * -60;
buffer[1] = '\0';
case:80
php_date_global_timezone_db = ((void *)0);
buffer[1] = '\0';
case:81
php_date_global_timezone_db_enabled = 0;
buffer[1] = '\0';
case:82
php_date_global_timezone_db_enabled = 1;
buffer[1] = '\0';
case:83
php_error_docref0(((void *)0), (1 << 0L), "Timezone database is corrupt - this should *never* happen!");
buffer[1] = '\0';
case:84
php_error_docref0(((void *)0), (1 << 13L), "The is_dst parameter is deprecated");
buffer[1] = '\0';
case:85
php_error_docref0(((void *)0), (1 << 1L), "Can only do this for zones with ID for now");
buffer[1] = '\0';
case:86
php_error_docref0(((void *)0), (1 << 1L), "Failed to parse interval (%s)", (format));
buffer[1] = '\0';
case:87
php_error_docref0(((void *)0), (1 << 1L), "It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm");
buffer[1] = '\0';
case:88
php_error_docref0(((void *)0), (1 << 1L), "Only non-special relative time specifications are supported for subtraction");
buffer[1] = '\0';
case:89
php_error_docref0(((void *)0), (1 << 1L), "The DateInterval object has not been correctly initialized by its constructor");
buffer[1] = '\0';
case:90
php_error_docref0(((void *)0), (1 << 1L), "The DateTime object has not been correctly initialized by its constructor");
buffer[1] = '\0';
case:91
php_error_docref0(((void *)0), (1 << 1L), "The DateTimeZone object has not been correctly initialized by its constructor");
buffer[1] = '\0';
case:92
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain a start date.", (format));
buffer[1] = '\0';
case:93
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an end date or a recurrence count.", (format));
buffer[1] = '\0';
case:94
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an interval.", (format));
buffer[1] = '\0';
case:95
php_error_docref0(((void *)0), (1 << 1L), "This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.");
buffer[1] = '\0';
case:96
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad format (%s)", (format));
buffer[1] = '\0';
case:97
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad timezone (%s)", (format));
buffer[1] = '\0';
case:98
php_error_docref0(((void *)0), (1 << 1L), "Unrecognized date format token.");
buffer[1] = '\0';
case:99
php_error_docref0(((void *)0), (1 << 1L), "Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE");
buffer[1] = '\0';
case:100
php_error_docref0(((void *)0), (1 << 1L), "idate format is one char");
buffer[1] = '\0';
case:101
php_error_docref0(((void *)0), (1 << 3L), "A two-letter ISO 3166-1 compatible country code is expected");
buffer[1] = '\0';
case:102
php_error_docref0(((void *)0), (1 << 3L), "Timezone ID '%s' is invalid", (format));
buffer[1] = '\0';
case:103
php_info_print_table_end();
buffer[1] = '\0';
case:104
php_info_print_table_row(2, "Timezone Database", php_date_global_timezone_db_enabled ? "external" : "internal");
buffer[1] = '\0';
case:105
php_info_print_table_row(2, "date/time support", "enabled");
buffer[1] = '\0';
case:106
php_info_print_table_start();
buffer[1] = '\0';
case:107
rfc_colon = 0;
buffer[1] = '\0';
case:108
timelib_error_container_dtor((date_globals.last_errors));
buffer[1] = '\0';
case:109
timelib_isoweek_from_date((t)->y, t->m, t->d, &isoweek, &isoyear);
buffer[1] = '\0';
case:110
timelib_isoweek_from_date(t->y, (t)->m, t->d, &isoweek, &isoyear);
buffer[1] = '\0';
case:111
timelib_isoweek_from_date(t->y, t->m, (t)->d, &isoweek, &isoyear);
buffer[1] = '\0';
case:112
timelib_isoweek_from_date(t->y, t->m, t->d, &isoweek, &isoyear);
buffer[1] = '\0';
case:113
timelib_time_dtor((t));
buffer[1] = '\0';
case:114
timelib_time_offset_dtor((offset));
buffer[1] = '\0';
case:115
timelib_time_offset_dtor(offset);
buffer[1] = '\0';
case:116
timelib_unixtime2gmt((t), (timelib_sll)time(((void *)0)));
buffer[1] = '\0';
case:117
timelib_unixtime2local((t), (timelib_sll)time(((void *)0)));
buffer[1] = '\0';
case:118
timelib_update_from_sse((t));
buffer[1] = '\0';
case:119
timelib_update_ts((t), ((void *)0));
buffer[1] = '\0';
case:120
zend_class_implements(date_ce_period, 1, zend_ce_traversable);
buffer[1] = '\0';
case:121
zend_declare_class_constant_long(date_ce_period, "EXCLUDE_START_DATE", sizeof ("EXCLUDE_START_DATE") - 1, 1);
buffer[1] = '\0';
case:122
zend_declare_class_constant_long(date_ce_timezone, "AFRICA", sizeof ("AFRICA") - 1, 1);
buffer[1] = '\0';
case:123
zend_declare_class_constant_long(date_ce_timezone, "ALL", sizeof ("ALL") - 1, 2047);
buffer[1] = '\0';
case:124
zend_declare_class_constant_long(date_ce_timezone, "ALL_WITH_BC", sizeof ("ALL_WITH_BC") - 1, 4095);
buffer[1] = '\0';
case:125
zend_declare_class_constant_long(date_ce_timezone, "AMERICA", sizeof ("AMERICA") - 1, 2);
buffer[1] = '\0';
case:126
zend_declare_class_constant_long(date_ce_timezone, "ANTARCTICA", sizeof ("ANTARCTICA") - 1, 4);
buffer[1] = '\0';
case:127
zend_declare_class_constant_long(date_ce_timezone, "ARCTIC", sizeof ("ARCTIC") - 1, 8);
buffer[1] = '\0';
case:128
zend_declare_class_constant_long(date_ce_timezone, "ASIA", sizeof ("ASIA") - 1, 16);
buffer[1] = '\0';
case:129
zend_declare_class_constant_long(date_ce_timezone, "ATLANTIC", sizeof ("ATLANTIC") - 1, 32);
buffer[1] = '\0';
case:130
zend_declare_class_constant_long(date_ce_timezone, "AUSTRALIA", sizeof ("AUSTRALIA") - 1, 64);
buffer[1] = '\0';
case:131
zend_declare_class_constant_long(date_ce_timezone, "EUROPE", sizeof ("EUROPE") - 1, 128);
buffer[1] = '\0';
case:132
zend_declare_class_constant_long(date_ce_timezone, "INDIAN", sizeof ("INDIAN") - 1, 256);
buffer[1] = '\0';
case:133
zend_declare_class_constant_long(date_ce_timezone, "PACIFIC", sizeof ("PACIFIC") - 1, 512);
buffer[1] = '\0';
case:134
zend_declare_class_constant_long(date_ce_timezone, "PER_COUNTRY", sizeof ("PER_COUNTRY") - 1, 4096);
buffer[1] = '\0';
case:135
zend_declare_class_constant_long(date_ce_timezone, "UTC", sizeof ("UTC") - 1, 1024);
buffer[1] = '\0';
case:136
zend_declare_class_constant_stringl(date_ce_date, "ATOM", sizeof ("ATOM") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
buffer[1] = '\0';
case:137
zend_declare_class_constant_stringl(date_ce_date, "COOKIE", sizeof ("COOKIE") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
buffer[1] = '\0';
case:138
zend_declare_class_constant_stringl(date_ce_date, "ISO8601", sizeof ("ISO8601") - 1, "Y-m-d\\TH:i:sO", sizeof ("Y-m-d\\TH:i:sO") - 1);
buffer[1] = '\0';
case:139
zend_declare_class_constant_stringl(date_ce_date, "RFC1036", sizeof ("RFC1036") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
buffer[1] = '\0';
case:140
zend_declare_class_constant_stringl(date_ce_date, "RFC1123", sizeof ("RFC1123") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
buffer[1] = '\0';
case:141
zend_declare_class_constant_stringl(date_ce_date, "RFC2822", sizeof ("RFC2822") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
buffer[1] = '\0';
case:142
zend_declare_class_constant_stringl(date_ce_date, "RFC3339", sizeof ("RFC3339") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
buffer[1] = '\0';
case:143
zend_declare_class_constant_stringl(date_ce_date, "RFC822", sizeof ("RFC822") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
buffer[1] = '\0';
case:144
zend_declare_class_constant_stringl(date_ce_date, "RFC850", sizeof ("RFC850") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
buffer[1] = '\0';
case:145
zend_declare_class_constant_stringl(date_ce_date, "RSS", sizeof ("RSS") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
buffer[1] = '\0';
case:146
zend_declare_class_constant_stringl(date_ce_date, "W3C", sizeof ("W3C") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
buffer[1] = '\0';
case:147
zend_error((1 << 0L), "An iterator cannot be used with foreach by reference");
buffer[1] = '\0';
case:148
zend_error((1 << 3L), "A non well formed numeric value encountered");
buffer[1] = '\0';
case:149
zend_hash_destroy((date_globals.tzcache));
buffer[1] = '\0';
switch:4
case:1
((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
RETVAL_STRING(string, 0);

case:2
(date_globals.last_errors) = ((void *)0);
RETVAL_STRING(string, 0);

case:3
(date_globals.timezone) = ((void *)0);
RETVAL_STRING(string, 0);

case:4
(date_globals.timezone) = _estrndup((zone), (zone_len), "ext/date/php_date.c", 3945, ((void *)0), 0);
RETVAL_STRING(string, 0);

case:5
(date_globals.tzcache) = ((void *)0);
RETVAL_STRING(string, 0);

case:6
(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16));
RETVAL_STRING(string, 0);

case:7
(format) = php_format_date(format, format_len, ts, localtime);
RETVAL_STRING(string, 0);

case:8
(format)++;
RETVAL_STRING(string, 0);

case:9
(string) = php_format_date(format, format_len, ts, localtime);
RETVAL_STRING(string, 0);

case:10
(string)++;
RETVAL_STRING(string, 0);

case:11
_array_init(((return_value)), 0, "ext/date/php_date.c", 1703);
RETVAL_STRING(string, 0);

case:12
_array_init(((return_value)), 0, "ext/date/php_date.c", 1749);
RETVAL_STRING(string, 0);

case:13
_array_init(((return_value)), 0, "ext/date/php_date.c", 2605);
RETVAL_STRING(string, 0);

case:14
_array_init(((return_value)), 0, "ext/date/php_date.c", 2613);
RETVAL_STRING(string, 0);

case:15
_array_init(((return_value)), 0, "ext/date/php_date.c", 2626);
RETVAL_STRING(string, 0);

case:16
_array_init(((return_value)), 0, "ext/date/php_date.c", 2638);
RETVAL_STRING(string, 0);

case:17
_array_init(((return_value)), 0, "ext/date/php_date.c", 2688);
RETVAL_STRING(string, 0);

case:18
_array_init(((return_value)), 0, "ext/date/php_date.c", 3379);
RETVAL_STRING(string, 0);

case:19
_array_init(((return_value)), 0, "ext/date/php_date.c", 3382);
RETVAL_STRING(string, 0);

case:20
_array_init(((return_value)), 0, "ext/date/php_date.c", 3392);
RETVAL_STRING(string, 0);

case:21
_array_init(((return_value)), 0, "ext/date/php_date.c", 3394);
RETVAL_STRING(string, 0);

case:22
_array_init(((return_value)), 0, "ext/date/php_date.c", 3406);
RETVAL_STRING(string, 0);

case:23
_array_init(((return_value)), 0, "ext/date/php_date.c", 3408);
RETVAL_STRING(string, 0);

case:24
_array_init(((return_value)), 0, "ext/date/php_date.c", 3413);
RETVAL_STRING(string, 0);

case:25
_array_init(((return_value)), 0, "ext/date/php_date.c", 3437);
RETVAL_STRING(string, 0);

case:26
_array_init(((return_value)), 0, "ext/date/php_date.c", 3865);
RETVAL_STRING(string, 0);

case:27
_array_init(((return_value)), 0, "ext/date/php_date.c", 3900);
RETVAL_STRING(string, 0);

case:28
_array_init(((return_value)), 0, "ext/date/php_date.c", 3905);
RETVAL_STRING(string, 0);

case:29
_array_init(((return_value)), 0, "ext/date/php_date.c", 3916);
RETVAL_STRING(string, 0);

case:30
_array_init(((return_value)), 0, "ext/date/php_date.c", 4089);
RETVAL_STRING(string, 0);

case:31
_array_init(((this_ptr)), 0, "ext/date/php_date.c", 1703);
RETVAL_STRING(string, 0);

case:32
_array_init(((this_ptr)), 0, "ext/date/php_date.c", 1749);
RETVAL_STRING(string, 0);

case:33
_array_init(((this_ptr)), 0, "ext/date/php_date.c", 2605);
RETVAL_STRING(string, 0);

case:34
_array_init(((this_ptr)), 0, "ext/date/php_date.c", 2613);
RETVAL_STRING(string, 0);

case:35
_array_init(((this_ptr)), 0, "ext/date/php_date.c", 2626);
RETVAL_STRING(string, 0);

case:36
_array_init(((this_ptr)), 0, "ext/date/php_date.c", 2638);
RETVAL_STRING(string, 0);

case:37
_array_init(((this_ptr)), 0, "ext/date/php_date.c", 2688);
RETVAL_STRING(string, 0);

case:38
_array_init(((this_ptr)), 0, "ext/date/php_date.c", 3379);
RETVAL_STRING(string, 0);

case:39
_array_init(((this_ptr)), 0, "ext/date/php_date.c", 3382);
RETVAL_STRING(string, 0);

case:40
_array_init(((this_ptr)), 0, "ext/date/php_date.c", 3392);
RETVAL_STRING(string, 0);

case:41
_array_init(((this_ptr)), 0, "ext/date/php_date.c", 3394);
RETVAL_STRING(string, 0);

case:42
_array_init(((this_ptr)), 0, "ext/date/php_date.c", 3406);
RETVAL_STRING(string, 0);

case:43
_array_init(((this_ptr)), 0, "ext/date/php_date.c", 3408);
RETVAL_STRING(string, 0);

case:44
_array_init(((this_ptr)), 0, "ext/date/php_date.c", 3413);
RETVAL_STRING(string, 0);

case:45
_array_init(((this_ptr)), 0, "ext/date/php_date.c", 3437);
RETVAL_STRING(string, 0);

case:46
_array_init(((this_ptr)), 0, "ext/date/php_date.c", 3865);
RETVAL_STRING(string, 0);

case:47
_array_init(((this_ptr)), 0, "ext/date/php_date.c", 3900);
RETVAL_STRING(string, 0);

case:48
_array_init(((this_ptr)), 0, "ext/date/php_date.c", 3905);
RETVAL_STRING(string, 0);

case:49
_array_init(((this_ptr)), 0, "ext/date/php_date.c", 3916);
RETVAL_STRING(string, 0);

case:50
_array_init(((this_ptr)), 0, "ext/date/php_date.c", 4089);
RETVAL_STRING(string, 0);

case:51
_convert_to_string((*(return_value_ptr)), "ext/date/php_date.c", 2524);
RETVAL_STRING(string, 0);

case:52
_convert_to_string((*(return_value_ptr)), "ext/date/php_date.c", 2528);
RETVAL_STRING(string, 0);

case:53
_convert_to_string((*(return_value_ptr)), "ext/date/php_date.c", 2541);
RETVAL_STRING(string, 0);

case:54
_efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
RETVAL_STRING(string, 0);

case:55
_efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
RETVAL_STRING(string, 0);

case:56
_efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
RETVAL_STRING(string, 0);

case:57
_efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
RETVAL_STRING(string, 0);

case:58
_efree(((format)), "ext/date/php_date.c", 1413, ((void *)0), 0);
RETVAL_STRING(string, 0);

case:59
_efree(((format)), "ext/date/php_date.c", 1654, ((void *)0), 0);
RETVAL_STRING(string, 0);

case:60
_efree(((format)), "ext/date/php_date.c", 2536, ((void *)0), 0);
RETVAL_STRING(string, 0);

case:61
_efree(((string)), "ext/date/php_date.c", 1413, ((void *)0), 0);
RETVAL_STRING(string, 0);

case:62
_efree(((string)), "ext/date/php_date.c", 1654, ((void *)0), 0);
RETVAL_STRING(string, 0);

case:63
_efree(((string)), "ext/date/php_date.c", 2536, ((void *)0), 0);
RETVAL_STRING(string, 0);

case:64
_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
RETVAL_STRING(string, 0);

case:65
_zval_copy_ctor(((return_value)), "ext/date/php_date.c", 2830);
RETVAL_STRING(string, 0);

case:66
_zval_copy_ctor(((return_value)), "ext/date/php_date.c", 2874);
RETVAL_STRING(string, 0);

case:67
_zval_copy_ctor(((return_value)), "ext/date/php_date.c", 2920);
RETVAL_STRING(string, 0);

case:68
_zval_copy_ctor(((return_value)), "ext/date/php_date.c", 2985);
RETVAL_STRING(string, 0);

case:69
_zval_copy_ctor(((return_value)), "ext/date/php_date.c", 3043);
RETVAL_STRING(string, 0);

case:70
_zval_copy_ctor(((return_value)), "ext/date/php_date.c", 3066);
RETVAL_STRING(string, 0);

case:71
_zval_copy_ctor(((return_value)), "ext/date/php_date.c", 3093);
RETVAL_STRING(string, 0);

case:72
_zval_copy_ctor(((return_value)), "ext/date/php_date.c", 3114);
RETVAL_STRING(string, 0);

case:73
_zval_copy_ctor(((this_ptr)), "ext/date/php_date.c", 2830);
RETVAL_STRING(string, 0);

case:74
_zval_copy_ctor(((this_ptr)), "ext/date/php_date.c", 2874);
RETVAL_STRING(string, 0);

case:75
_zval_copy_ctor(((this_ptr)), "ext/date/php_date.c", 2920);
RETVAL_STRING(string, 0);

case:76
_zval_copy_ctor(((this_ptr)), "ext/date/php_date.c", 2985);
RETVAL_STRING(string, 0);

case:77
_zval_copy_ctor(((this_ptr)), "ext/date/php_date.c", 3043);
RETVAL_STRING(string, 0);

case:78
_zval_copy_ctor(((this_ptr)), "ext/date/php_date.c", 3066);
RETVAL_STRING(string, 0);

case:79
_zval_copy_ctor(((this_ptr)), "ext/date/php_date.c", 3093);
RETVAL_STRING(string, 0);

case:80
_zval_copy_ctor(((this_ptr)), "ext/date/php_date.c", 3114);
RETVAL_STRING(string, 0);

case:81
_zval_dtor(((return_value)), "/root/project/prophet-gpl/build/php-case-2adf58/php-2adf58-workdir/src/Zend/zend_execute.h", 87);
RETVAL_STRING(string, 0);

case:82
_zval_dtor(((return_value)), "ext/date/php_date.c", 3513);
RETVAL_STRING(string, 0);

case:83
_zval_dtor(((return_value)), "ext/date/php_date.c", 3525);
RETVAL_STRING(string, 0);

case:84
_zval_dtor(((return_value)), "ext/date/php_date.c", 3562);
RETVAL_STRING(string, 0);

case:85
_zval_dtor(((return_value)), "ext/date/php_date.c", 3563);
RETVAL_STRING(string, 0);

case:86
_zval_dtor(((return_value)), "ext/date/php_date.c", 3564);
RETVAL_STRING(string, 0);

case:87
_zval_dtor(((return_value)), "ext/date/php_date.c", 3565);
RETVAL_STRING(string, 0);

case:88
_zval_dtor(((return_value)), "ext/date/php_date.c", 3566);
RETVAL_STRING(string, 0);

case:89
_zval_dtor(((return_value)), "ext/date/php_date.c", 3567);
RETVAL_STRING(string, 0);

case:90
_zval_dtor(((return_value)), "ext/date/php_date.c", 3568);
RETVAL_STRING(string, 0);

case:91
_zval_dtor(((return_value)), "ext/date/php_date.c", 3574);
RETVAL_STRING(string, 0);

case:92
_zval_dtor(((this_ptr)), "/root/project/prophet-gpl/build/php-case-2adf58/php-2adf58-workdir/src/Zend/zend_execute.h", 87);
RETVAL_STRING(string, 0);

case:93
_zval_dtor(((this_ptr)), "ext/date/php_date.c", 3513);
RETVAL_STRING(string, 0);

case:94
_zval_dtor(((this_ptr)), "ext/date/php_date.c", 3525);
RETVAL_STRING(string, 0);

case:95
_zval_dtor(((this_ptr)), "ext/date/php_date.c", 3562);
RETVAL_STRING(string, 0);

case:96
_zval_dtor(((this_ptr)), "ext/date/php_date.c", 3563);
RETVAL_STRING(string, 0);

case:97
_zval_dtor(((this_ptr)), "ext/date/php_date.c", 3564);
RETVAL_STRING(string, 0);

case:98
_zval_dtor(((this_ptr)), "ext/date/php_date.c", 3565);
RETVAL_STRING(string, 0);

case:99
_zval_dtor(((this_ptr)), "ext/date/php_date.c", 3566);
RETVAL_STRING(string, 0);

case:100
_zval_dtor(((this_ptr)), "ext/date/php_date.c", 3567);
RETVAL_STRING(string, 0);

case:101
_zval_dtor(((this_ptr)), "ext/date/php_date.c", 3568);
RETVAL_STRING(string, 0);

case:102
_zval_dtor(((this_ptr)), "ext/date/php_date.c", 3574);
RETVAL_STRING(string, 0);

case:103
_zval_ptr_dtor((&(return_value)), "/root/project/prophet-gpl/build/php-case-2adf58/php-2adf58-workdir/src/Zend/zend_execute.h", 144);
RETVAL_STRING(string, 0);

case:104
_zval_ptr_dtor((&(return_value)), "ext/date/php_date.c", 2552);
RETVAL_STRING(string, 0);

case:105
_zval_ptr_dtor((&(return_value)), "ext/date/php_date.c", 2830);
RETVAL_STRING(string, 0);

case:106
_zval_ptr_dtor((&(return_value)), "ext/date/php_date.c", 2874);
RETVAL_STRING(string, 0);

case:107
_zval_ptr_dtor((&(return_value)), "ext/date/php_date.c", 2920);
RETVAL_STRING(string, 0);

case:108
_zval_ptr_dtor((&(return_value)), "ext/date/php_date.c", 2985);
RETVAL_STRING(string, 0);

case:109
_zval_ptr_dtor((&(return_value)), "ext/date/php_date.c", 3043);
RETVAL_STRING(string, 0);

case:110
_zval_ptr_dtor((&(return_value)), "ext/date/php_date.c", 3066);
RETVAL_STRING(string, 0);

case:111
_zval_ptr_dtor((&(return_value)), "ext/date/php_date.c", 3093);
RETVAL_STRING(string, 0);

case:112
_zval_ptr_dtor((&(return_value)), "ext/date/php_date.c", 3114);
RETVAL_STRING(string, 0);

case:113
_zval_ptr_dtor((&(this_ptr)), "/root/project/prophet-gpl/build/php-case-2adf58/php-2adf58-workdir/src/Zend/zend_execute.h", 144);
RETVAL_STRING(string, 0);

case:114
_zval_ptr_dtor((&(this_ptr)), "ext/date/php_date.c", 2552);
RETVAL_STRING(string, 0);

case:115
_zval_ptr_dtor((&(this_ptr)), "ext/date/php_date.c", 2830);
RETVAL_STRING(string, 0);

case:116
_zval_ptr_dtor((&(this_ptr)), "ext/date/php_date.c", 2874);
RETVAL_STRING(string, 0);

case:117
_zval_ptr_dtor((&(this_ptr)), "ext/date/php_date.c", 2920);
RETVAL_STRING(string, 0);

case:118
_zval_ptr_dtor((&(this_ptr)), "ext/date/php_date.c", 2985);
RETVAL_STRING(string, 0);

case:119
_zval_ptr_dtor((&(this_ptr)), "ext/date/php_date.c", 3043);
RETVAL_STRING(string, 0);

case:120
_zval_ptr_dtor((&(this_ptr)), "ext/date/php_date.c", 3066);
RETVAL_STRING(string, 0);

case:121
_zval_ptr_dtor((&(this_ptr)), "ext/date/php_date.c", 3093);
RETVAL_STRING(string, 0);

case:122
_zval_ptr_dtor((&(this_ptr)), "ext/date/php_date.c", 3114);
RETVAL_STRING(string, 0);

case:123
add_assoc_bool_ex((return_value), "astronomical_twilight_end", strlen("astronomical_twilight_end") + 1, 0);
RETVAL_STRING(string, 0);

case:124
add_assoc_bool_ex((return_value), "astronomical_twilight_end", strlen("astronomical_twilight_end") + 1, 1);
RETVAL_STRING(string, 0);

case:125
add_assoc_bool_ex((return_value), "civil_twilight_end", strlen("civil_twilight_end") + 1, 0);
RETVAL_STRING(string, 0);

case:126
add_assoc_bool_ex((return_value), "civil_twilight_end", strlen("civil_twilight_end") + 1, 1);
RETVAL_STRING(string, 0);

case:127
add_assoc_bool_ex((return_value), "day", strlen("day") + 1, 0);
RETVAL_STRING(string, 0);

case:128
add_assoc_bool_ex((return_value), "fraction", strlen("fraction") + 1, 0);
RETVAL_STRING(string, 0);

case:129
add_assoc_bool_ex((return_value), "hour", strlen("hour") + 1, 0);
RETVAL_STRING(string, 0);

case:130
add_assoc_bool_ex((return_value), "minute", strlen("minute") + 1, 0);
RETVAL_STRING(string, 0);

case:131
add_assoc_bool_ex((return_value), "month", strlen("month") + 1, 0);
RETVAL_STRING(string, 0);

case:132
add_assoc_bool_ex((return_value), "nautical_twilight_end", strlen("nautical_twilight_end") + 1, 0);
RETVAL_STRING(string, 0);

case:133
add_assoc_bool_ex((return_value), "nautical_twilight_end", strlen("nautical_twilight_end") + 1, 1);
RETVAL_STRING(string, 0);

case:134
add_assoc_bool_ex((return_value), "second", strlen("second") + 1, 0);
RETVAL_STRING(string, 0);

case:135
add_assoc_bool_ex((return_value), "sunset", strlen("sunset") + 1, 0);
RETVAL_STRING(string, 0);

case:136
add_assoc_bool_ex((return_value), "sunset", strlen("sunset") + 1, 1);
RETVAL_STRING(string, 0);

case:137
add_assoc_bool_ex((return_value), "year", strlen("year") + 1, 0);
RETVAL_STRING(string, 0);

case:138
add_assoc_bool_ex((return_value), "zone", strlen("zone") + 1, 0);
RETVAL_STRING(string, 0);

case:139
add_assoc_bool_ex((return_value), "zone_type", strlen("zone_type") + 1, 0);
RETVAL_STRING(string, 0);

case:140
add_assoc_bool_ex((this_ptr), "astronomical_twilight_end", strlen("astronomical_twilight_end") + 1, 0);
RETVAL_STRING(string, 0);

case:141
add_assoc_bool_ex((this_ptr), "astronomical_twilight_end", strlen("astronomical_twilight_end") + 1, 1);
RETVAL_STRING(string, 0);

case:142
add_assoc_bool_ex((this_ptr), "civil_twilight_end", strlen("civil_twilight_end") + 1, 0);
RETVAL_STRING(string, 0);

case:143
add_assoc_bool_ex((this_ptr), "civil_twilight_end", strlen("civil_twilight_end") + 1, 1);
RETVAL_STRING(string, 0);

case:144
add_assoc_bool_ex((this_ptr), "day", strlen("day") + 1, 0);
RETVAL_STRING(string, 0);

case:145
add_assoc_bool_ex((this_ptr), "fraction", strlen("fraction") + 1, 0);
RETVAL_STRING(string, 0);

case:146
add_assoc_bool_ex((this_ptr), "hour", strlen("hour") + 1, 0);
RETVAL_STRING(string, 0);

case:147
add_assoc_bool_ex((this_ptr), "minute", strlen("minute") + 1, 0);
RETVAL_STRING(string, 0);

case:148
add_assoc_bool_ex((this_ptr), "month", strlen("month") + 1, 0);
RETVAL_STRING(string, 0);

case:149
add_assoc_bool_ex((this_ptr), "nautical_twilight_end", strlen("nautical_twilight_end") + 1, 0);
RETVAL_STRING(string, 0);

case:150
add_assoc_bool_ex((this_ptr), "nautical_twilight_end", strlen("nautical_twilight_end") + 1, 1);
RETVAL_STRING(string, 0);

case:151
add_assoc_bool_ex((this_ptr), "second", strlen("second") + 1, 0);
RETVAL_STRING(string, 0);

case:152
add_assoc_bool_ex((this_ptr), "sunset", strlen("sunset") + 1, 0);
RETVAL_STRING(string, 0);

case:153
add_assoc_bool_ex((this_ptr), "sunset", strlen("sunset") + 1, 1);
RETVAL_STRING(string, 0);

case:154
add_assoc_bool_ex((this_ptr), "year", strlen("year") + 1, 0);
RETVAL_STRING(string, 0);

case:155
add_assoc_bool_ex((this_ptr), "zone", strlen("zone") + 1, 0);
RETVAL_STRING(string, 0);

case:156
add_assoc_bool_ex((this_ptr), "zone_type", strlen("zone_type") + 1, 0);
RETVAL_STRING(string, 0);

case:157
add_assoc_null_ex((return_value), "timezone_id", strlen("timezone_id") + 1);
RETVAL_STRING(string, 0);

case:158
add_assoc_null_ex((this_ptr), "timezone_id", strlen("timezone_id") + 1);
RETVAL_STRING(string, 0);

case:159
convert_to_boolean((return_value));
RETVAL_STRING(string, 0);

case:160
convert_to_boolean((this_ptr));
RETVAL_STRING(string, 0);

case:161
convert_to_long(*(return_value_ptr));
RETVAL_STRING(string, 0);

case:162
date_ce_period->get_iterator = date_object_period_get_iterator;
RETVAL_STRING(string, 0);

case:163
date_ce_period->iterator_funcs.funcs = &date_period_it_funcs;
RETVAL_STRING(string, 0);

case:164
date_object_handlers_date.clone_obj = date_object_clone_date;
RETVAL_STRING(string, 0);

case:165
date_object_handlers_date.compare_objects = date_object_compare_date;
RETVAL_STRING(string, 0);

case:166
date_object_handlers_date.get_properties = date_object_get_properties;
RETVAL_STRING(string, 0);

case:167
date_object_handlers_interval.clone_obj = date_object_clone_interval;
RETVAL_STRING(string, 0);

case:168
date_object_handlers_interval.get_properties = date_object_get_properties_interval;
RETVAL_STRING(string, 0);

case:169
date_object_handlers_interval.get_property_ptr_ptr = ((void *)0);
RETVAL_STRING(string, 0);

case:170
date_object_handlers_interval.read_property = date_interval_read_property;
RETVAL_STRING(string, 0);

case:171
date_object_handlers_interval.write_property = date_interval_write_property;
RETVAL_STRING(string, 0);

case:172
date_object_handlers_period.clone_obj = date_object_clone_period;
RETVAL_STRING(string, 0);

case:173
date_object_handlers_timezone.clone_obj = date_object_clone_timezone;
RETVAL_STRING(string, 0);

case:174
date_register_classes();
RETVAL_STRING(string, 0);

case:175
exit(1);
RETVAL_STRING(string, 0);

case:176
gc_remove_zval_from_buffer((return_value));
RETVAL_STRING(string, 0);

case:177
gc_remove_zval_from_buffer((this_ptr));
RETVAL_STRING(string, 0);

case:178
gc_zval_check_possible_root(((return_value)));
RETVAL_STRING(string, 0);

case:179
gc_zval_check_possible_root(((this_ptr)));
RETVAL_STRING(string, 0);

case:180
gc_zval_possible_root((return_value));
RETVAL_STRING(string, 0);

case:181
gc_zval_possible_root((this_ptr));
RETVAL_STRING(string, 0);

case:182
i_zval_ptr_dtor((return_value), "/root/project/prophet-gpl/build/php-case-2adf58/php-2adf58-workdir/src/Zend/zend_execute.h", 339);
RETVAL_STRING(string, 0);

case:183
i_zval_ptr_dtor((this_ptr), "/root/project/prophet-gpl/build/php-case-2adf58/php-2adf58-workdir/src/Zend/zend_execute.h", 339);
RETVAL_STRING(string, 0);

case:184
if (!(date_globals.tzcache)) {
    ((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
    _zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
}
RETVAL_STRING(string, 0);

case:185
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
    (date_globals.last_errors) = ((void *)0);
}
RETVAL_STRING(string, 0);

case:186
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
}
RETVAL_STRING(string, 0);

case:187
if ((date_globals.timezone) && (strlen((date_globals.timezone)) > 0)) {
    return (date_globals.timezone);
}
RETVAL_STRING(string, 0);

case:188
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
    (date_globals.timezone) = ((void *)0);
}
RETVAL_STRING(string, 0);

case:189
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
}
RETVAL_STRING(string, 0);

case:190
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
}
RETVAL_STRING(string, 0);

case:191
if ((date_globals.tzcache)) {
    zend_hash_destroy((date_globals.tzcache));
    _efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
    (date_globals.tzcache) = ((void *)0);
}
RETVAL_STRING(string, 0);

case:192
if ((ht) == 1) {
    ts = time(((void *)0));
}
RETVAL_STRING(string, 0);

case:193
memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
RETVAL_STRING(string, 0);

case:194
memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
RETVAL_STRING(string, 0);

case:195
memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
RETVAL_STRING(string, 0);

case:196
memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
RETVAL_STRING(string, 0);

case:197
php_date_global_timezone_db = ((void *)0);
RETVAL_STRING(string, 0);

case:198
php_date_global_timezone_db_enabled = 0;
RETVAL_STRING(string, 0);

case:199
php_date_global_timezone_db_enabled = 1;
RETVAL_STRING(string, 0);

case:200
php_date_instantiate(date_ce_date, (return_value));
RETVAL_STRING(string, 0);

case:201
php_date_instantiate(date_ce_date, (this_ptr));
RETVAL_STRING(string, 0);

case:202
php_date_instantiate(date_ce_interval, (return_value));
RETVAL_STRING(string, 0);

case:203
php_date_instantiate(date_ce_interval, (this_ptr));
RETVAL_STRING(string, 0);

case:204
php_date_instantiate(date_ce_timezone, (return_value));
RETVAL_STRING(string, 0);

case:205
php_date_instantiate(date_ce_timezone, (this_ptr));
RETVAL_STRING(string, 0);

case:206
php_error_docref0(((void *)0), (1 << 0L), "Timezone database is corrupt - this should *never* happen!");
RETVAL_STRING(string, 0);

case:207
php_error_docref0(((void *)0), (1 << 13L), "The is_dst parameter is deprecated");
RETVAL_STRING(string, 0);

case:208
php_error_docref0(((void *)0), (1 << 1L), "Can only do this for zones with ID for now");
RETVAL_STRING(string, 0);

case:209
php_error_docref0(((void *)0), (1 << 1L), "Failed to parse interval (%s)", (format));
RETVAL_STRING(string, 0);

case:210
php_error_docref0(((void *)0), (1 << 1L), "Failed to parse interval (%s)", (string));
RETVAL_STRING(string, 0);

case:211
php_error_docref0(((void *)0), (1 << 1L), "It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm");
RETVAL_STRING(string, 0);

case:212
php_error_docref0(((void *)0), (1 << 1L), "Only non-special relative time specifications are supported for subtraction");
RETVAL_STRING(string, 0);

case:213
php_error_docref0(((void *)0), (1 << 1L), "The DateInterval object has not been correctly initialized by its constructor");
RETVAL_STRING(string, 0);

case:214
php_error_docref0(((void *)0), (1 << 1L), "The DateTime object has not been correctly initialized by its constructor");
RETVAL_STRING(string, 0);

case:215
php_error_docref0(((void *)0), (1 << 1L), "The DateTimeZone object has not been correctly initialized by its constructor");
RETVAL_STRING(string, 0);

case:216
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain a start date.", (format));
RETVAL_STRING(string, 0);

case:217
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain a start date.", (string));
RETVAL_STRING(string, 0);

case:218
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an end date or a recurrence count.", (format));
RETVAL_STRING(string, 0);

case:219
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an end date or a recurrence count.", (string));
RETVAL_STRING(string, 0);

case:220
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an interval.", (format));
RETVAL_STRING(string, 0);

case:221
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an interval.", (string));
RETVAL_STRING(string, 0);

case:222
php_error_docref0(((void *)0), (1 << 1L), "This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.");
RETVAL_STRING(string, 0);

case:223
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad format (%s)", (format));
RETVAL_STRING(string, 0);

case:224
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad format (%s)", (string));
RETVAL_STRING(string, 0);

case:225
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad timezone (%s)", (format));
RETVAL_STRING(string, 0);

case:226
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad timezone (%s)", (string));
RETVAL_STRING(string, 0);

case:227
php_error_docref0(((void *)0), (1 << 1L), "Unrecognized date format token.");
RETVAL_STRING(string, 0);

case:228
php_error_docref0(((void *)0), (1 << 1L), "Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE");
RETVAL_STRING(string, 0);

case:229
php_error_docref0(((void *)0), (1 << 1L), "idate format is one char");
RETVAL_STRING(string, 0);

case:230
php_error_docref0(((void *)0), (1 << 3L), "A two-letter ISO 3166-1 compatible country code is expected");
RETVAL_STRING(string, 0);

case:231
php_error_docref0(((void *)0), (1 << 3L), "Timezone ID '%s' is invalid", (format));
RETVAL_STRING(string, 0);

case:232
php_error_docref0(((void *)0), (1 << 3L), "Timezone ID '%s' is invalid", (string));
RETVAL_STRING(string, 0);

case:233
php_info_print_table_end();
RETVAL_STRING(string, 0);

case:234
php_info_print_table_row(2, "Timezone Database", php_date_global_timezone_db_enabled ? "external" : "internal");
RETVAL_STRING(string, 0);

case:235
php_info_print_table_row(2, "date/time support", "enabled");
RETVAL_STRING(string, 0);

case:236
php_info_print_table_start();
RETVAL_STRING(string, 0);

case:237
string = php_format_date((format), format_len, ts, localtime);
RETVAL_STRING(string, 0);

case:238
string = php_format_date((string), format_len, ts, localtime);
RETVAL_STRING(string, 0);

case:239
string = php_format_date(format, format_len, ts, localtime);
RETVAL_STRING(string, 0);

case:240
timelib_error_container_dtor((date_globals.last_errors));
RETVAL_STRING(string, 0);

case:241
ts = time(((void *)0));
RETVAL_STRING(string, 0);

case:242
zend_class_implements(date_ce_period, 1, zend_ce_traversable);
RETVAL_STRING(string, 0);

case:243
zend_declare_class_constant_long(date_ce_period, "EXCLUDE_START_DATE", sizeof ("EXCLUDE_START_DATE") - 1, 1);
RETVAL_STRING(string, 0);

case:244
zend_declare_class_constant_long(date_ce_timezone, "AFRICA", sizeof ("AFRICA") - 1, 1);
RETVAL_STRING(string, 0);

case:245
zend_declare_class_constant_long(date_ce_timezone, "ALL", sizeof ("ALL") - 1, 2047);
RETVAL_STRING(string, 0);

case:246
zend_declare_class_constant_long(date_ce_timezone, "ALL_WITH_BC", sizeof ("ALL_WITH_BC") - 1, 4095);
RETVAL_STRING(string, 0);

case:247
zend_declare_class_constant_long(date_ce_timezone, "AMERICA", sizeof ("AMERICA") - 1, 2);
RETVAL_STRING(string, 0);

case:248
zend_declare_class_constant_long(date_ce_timezone, "ANTARCTICA", sizeof ("ANTARCTICA") - 1, 4);
RETVAL_STRING(string, 0);

case:249
zend_declare_class_constant_long(date_ce_timezone, "ARCTIC", sizeof ("ARCTIC") - 1, 8);
RETVAL_STRING(string, 0);

case:250
zend_declare_class_constant_long(date_ce_timezone, "ASIA", sizeof ("ASIA") - 1, 16);
RETVAL_STRING(string, 0);

case:251
zend_declare_class_constant_long(date_ce_timezone, "ATLANTIC", sizeof ("ATLANTIC") - 1, 32);
RETVAL_STRING(string, 0);

case:252
zend_declare_class_constant_long(date_ce_timezone, "AUSTRALIA", sizeof ("AUSTRALIA") - 1, 64);
RETVAL_STRING(string, 0);

case:253
zend_declare_class_constant_long(date_ce_timezone, "EUROPE", sizeof ("EUROPE") - 1, 128);
RETVAL_STRING(string, 0);

case:254
zend_declare_class_constant_long(date_ce_timezone, "INDIAN", sizeof ("INDIAN") - 1, 256);
RETVAL_STRING(string, 0);

case:255
zend_declare_class_constant_long(date_ce_timezone, "PACIFIC", sizeof ("PACIFIC") - 1, 512);
RETVAL_STRING(string, 0);

case:256
zend_declare_class_constant_long(date_ce_timezone, "PER_COUNTRY", sizeof ("PER_COUNTRY") - 1, 4096);
RETVAL_STRING(string, 0);

case:257
zend_declare_class_constant_long(date_ce_timezone, "UTC", sizeof ("UTC") - 1, 1024);
RETVAL_STRING(string, 0);

case:258
zend_declare_class_constant_stringl(date_ce_date, "ATOM", sizeof ("ATOM") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
RETVAL_STRING(string, 0);

case:259
zend_declare_class_constant_stringl(date_ce_date, "COOKIE", sizeof ("COOKIE") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
RETVAL_STRING(string, 0);

case:260
zend_declare_class_constant_stringl(date_ce_date, "ISO8601", sizeof ("ISO8601") - 1, "Y-m-d\\TH:i:sO", sizeof ("Y-m-d\\TH:i:sO") - 1);
RETVAL_STRING(string, 0);

case:261
zend_declare_class_constant_stringl(date_ce_date, "RFC1036", sizeof ("RFC1036") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
RETVAL_STRING(string, 0);

case:262
zend_declare_class_constant_stringl(date_ce_date, "RFC1123", sizeof ("RFC1123") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
RETVAL_STRING(string, 0);

case:263
zend_declare_class_constant_stringl(date_ce_date, "RFC2822", sizeof ("RFC2822") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
RETVAL_STRING(string, 0);

case:264
zend_declare_class_constant_stringl(date_ce_date, "RFC3339", sizeof ("RFC3339") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
RETVAL_STRING(string, 0);

case:265
zend_declare_class_constant_stringl(date_ce_date, "RFC822", sizeof ("RFC822") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
RETVAL_STRING(string, 0);

case:266
zend_declare_class_constant_stringl(date_ce_date, "RFC850", sizeof ("RFC850") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
RETVAL_STRING(string, 0);

case:267
zend_declare_class_constant_stringl(date_ce_date, "RSS", sizeof ("RSS") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
RETVAL_STRING(string, 0);

case:268
zend_declare_class_constant_stringl(date_ce_date, "W3C", sizeof ("W3C") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
RETVAL_STRING(string, 0);

case:269
zend_error((1 << 0L), "An iterator cannot be used with foreach by reference");
RETVAL_STRING(string, 0);

case:270
zend_error((1 << 3L), "A non well formed numeric value encountered");
RETVAL_STRING(string, 0);

case:271
zend_hash_destroy((date_globals.tzcache));
RETVAL_STRING(string, 0);

case:272
zval_addref_p((return_value));
RETVAL_STRING(string, 0);

case:273
zval_addref_p((this_ptr));
RETVAL_STRING(string, 0);

case:274
zval_from_error_container((return_value), (date_globals.last_errors));
RETVAL_STRING(string, 0);

case:275
zval_from_error_container((this_ptr), (date_globals.last_errors));
RETVAL_STRING(string, 0);

case:276
zval_set_refcount_p((return_value), 0);
RETVAL_STRING(string, 0);

case:277
zval_set_refcount_p((return_value), 1);
RETVAL_STRING(string, 0);

case:278
zval_set_refcount_p((this_ptr), 0);
RETVAL_STRING(string, 0);

case:279
zval_set_refcount_p((this_ptr), 1);
RETVAL_STRING(string, 0);

case:280
zval_unset_isref_p((return_value));
RETVAL_STRING(string, 0);

case:281
zval_unset_isref_p((this_ptr));
RETVAL_STRING(string, 0);

switch:5
case:1
((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
t = timelib_time_ctor();

case:2
(date_globals.last_errors) = ((void *)0);
t = timelib_time_ctor();

case:3
(date_globals.timezone) = ((void *)0);
t = timelib_time_ctor();

case:4
(date_globals.timezone) = _estrndup((zone), (zone_len), "ext/date/php_date.c", 3945, ((void *)0), 0);
t = timelib_time_ctor();

case:5
(date_globals.tzcache) = ((void *)0);
t = timelib_time_ctor();

case:6
(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16));
t = timelib_time_ctor();

case:7
(format) = date_format(format, format_len, t, localtime);
t = timelib_time_ctor();

case:8
(format)++;
t = timelib_time_ctor();

case:9
(string) = date_format(format, format_len, t, localtime);
t = timelib_time_ctor();

case:10
(string)++;
t = timelib_time_ctor();

case:11
(t) = timelib_time_ctor();

case:12
(t) = timelib_time_ctor();
t = timelib_time_ctor();

case:13
(t)->tz_info = tzi;
t = timelib_time_ctor();

case:14
(t)->zone_type = 3;
t = timelib_time_ctor();

case:15
(tzi) = ((void *)0);
t = timelib_time_ctor();

case:16
(tzi) = get_timezone_info();
t = timelib_time_ctor();

case:17
_efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
t = timelib_time_ctor();

case:18
_efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
t = timelib_time_ctor();

case:19
_efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
t = timelib_time_ctor();

case:20
_efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
t = timelib_time_ctor();

case:21
_efree(((format)), "ext/date/php_date.c", 1413, ((void *)0), 0);
t = timelib_time_ctor();

case:22
_efree(((format)), "ext/date/php_date.c", 1654, ((void *)0), 0);
t = timelib_time_ctor();

case:23
_efree(((format)), "ext/date/php_date.c", 2536, ((void *)0), 0);
t = timelib_time_ctor();

case:24
_efree(((string)), "ext/date/php_date.c", 1413, ((void *)0), 0);
t = timelib_time_ctor();

case:25
_efree(((string)), "ext/date/php_date.c", 1654, ((void *)0), 0);
t = timelib_time_ctor();

case:26
_efree(((string)), "ext/date/php_date.c", 2536, ((void *)0), 0);
t = timelib_time_ctor();

case:27
_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
t = timelib_time_ctor();

case:28
date_ce_period->get_iterator = date_object_period_get_iterator;
t = timelib_time_ctor();

case:29
date_ce_period->iterator_funcs.funcs = &date_period_it_funcs;
t = timelib_time_ctor();

case:30
date_object_handlers_date.clone_obj = date_object_clone_date;
t = timelib_time_ctor();

case:31
date_object_handlers_date.compare_objects = date_object_compare_date;
t = timelib_time_ctor();

case:32
date_object_handlers_date.get_properties = date_object_get_properties;
t = timelib_time_ctor();

case:33
date_object_handlers_interval.clone_obj = date_object_clone_interval;
t = timelib_time_ctor();

case:34
date_object_handlers_interval.get_properties = date_object_get_properties_interval;
t = timelib_time_ctor();

case:35
date_object_handlers_interval.get_property_ptr_ptr = ((void *)0);
t = timelib_time_ctor();

case:36
date_object_handlers_interval.read_property = date_interval_read_property;
t = timelib_time_ctor();

case:37
date_object_handlers_interval.write_property = date_interval_write_property;
t = timelib_time_ctor();

case:38
date_object_handlers_period.clone_obj = date_object_clone_period;
t = timelib_time_ctor();

case:39
date_object_handlers_timezone.clone_obj = date_object_clone_timezone;
t = timelib_time_ctor();

case:40
date_register_classes();
t = timelib_time_ctor();

case:41
exit(1);
t = timelib_time_ctor();

case:42
if (!(date_globals.tzcache)) {
    ((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
    _zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
}
t = timelib_time_ctor();

case:43
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
    (date_globals.last_errors) = ((void *)0);
}
t = timelib_time_ctor();

case:44
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
}
t = timelib_time_ctor();

case:45
if ((date_globals.timezone) && (strlen((date_globals.timezone)) > 0)) {
    return (date_globals.timezone);
}
t = timelib_time_ctor();

case:46
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
    (date_globals.timezone) = ((void *)0);
}
t = timelib_time_ctor();

case:47
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
}
t = timelib_time_ctor();

case:48
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
}
t = timelib_time_ctor();

case:49
if ((date_globals.tzcache)) {
    zend_hash_destroy((date_globals.tzcache));
    _efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
    (date_globals.tzcache) = ((void *)0);
}
t = timelib_time_ctor();

case:50
if (localtime) {
    tzi = get_timezone_info();
    t->tz_info = tzi;
    t->zone_type = 3;
    timelib_unixtime2local(t, ts);
} else {
    tzi = ((void *)0);
    timelib_unixtime2gmt(t, ts);
}
t = timelib_time_ctor();

case:51
memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
t = timelib_time_ctor();

case:52
memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
t = timelib_time_ctor();

case:53
memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
t = timelib_time_ctor();

case:54
memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
t = timelib_time_ctor();

case:55
memset(t, 0, sizeof (*(t)));
t = timelib_time_ctor();

case:56
php_date_global_timezone_db = ((void *)0);
t = timelib_time_ctor();

case:57
php_date_global_timezone_db_enabled = 0;
t = timelib_time_ctor();

case:58
php_date_global_timezone_db_enabled = 1;
t = timelib_time_ctor();

case:59
php_error_docref0(((void *)0), (1 << 0L), "Timezone database is corrupt - this should *never* happen!");
t = timelib_time_ctor();

case:60
php_error_docref0(((void *)0), (1 << 13L), "The is_dst parameter is deprecated");
t = timelib_time_ctor();

case:61
php_error_docref0(((void *)0), (1 << 1L), "Can only do this for zones with ID for now");
t = timelib_time_ctor();

case:62
php_error_docref0(((void *)0), (1 << 1L), "Failed to parse interval (%s)", (format));
t = timelib_time_ctor();

case:63
php_error_docref0(((void *)0), (1 << 1L), "Failed to parse interval (%s)", (string));
t = timelib_time_ctor();

case:64
php_error_docref0(((void *)0), (1 << 1L), "It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm");
t = timelib_time_ctor();

case:65
php_error_docref0(((void *)0), (1 << 1L), "Only non-special relative time specifications are supported for subtraction");
t = timelib_time_ctor();

case:66
php_error_docref0(((void *)0), (1 << 1L), "The DateInterval object has not been correctly initialized by its constructor");
t = timelib_time_ctor();

case:67
php_error_docref0(((void *)0), (1 << 1L), "The DateTime object has not been correctly initialized by its constructor");
t = timelib_time_ctor();

case:68
php_error_docref0(((void *)0), (1 << 1L), "The DateTimeZone object has not been correctly initialized by its constructor");
t = timelib_time_ctor();

case:69
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain a start date.", (format));
t = timelib_time_ctor();

case:70
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain a start date.", (string));
t = timelib_time_ctor();

case:71
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an end date or a recurrence count.", (format));
t = timelib_time_ctor();

case:72
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an end date or a recurrence count.", (string));
t = timelib_time_ctor();

case:73
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an interval.", (format));
t = timelib_time_ctor();

case:74
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an interval.", (string));
t = timelib_time_ctor();

case:75
php_error_docref0(((void *)0), (1 << 1L), "This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.");
t = timelib_time_ctor();

case:76
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad format (%s)", (format));
t = timelib_time_ctor();

case:77
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad format (%s)", (string));
t = timelib_time_ctor();

case:78
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad timezone (%s)", (format));
t = timelib_time_ctor();

case:79
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad timezone (%s)", (string));
t = timelib_time_ctor();

case:80
php_error_docref0(((void *)0), (1 << 1L), "Unrecognized date format token.");
t = timelib_time_ctor();

case:81
php_error_docref0(((void *)0), (1 << 1L), "Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE");
t = timelib_time_ctor();

case:82
php_error_docref0(((void *)0), (1 << 1L), "idate format is one char");
t = timelib_time_ctor();

case:83
php_error_docref0(((void *)0), (1 << 3L), "A two-letter ISO 3166-1 compatible country code is expected");
t = timelib_time_ctor();

case:84
php_error_docref0(((void *)0), (1 << 3L), "Timezone ID '%s' is invalid", (format));
t = timelib_time_ctor();

case:85
php_error_docref0(((void *)0), (1 << 3L), "Timezone ID '%s' is invalid", (string));
t = timelib_time_ctor();

case:86
php_info_print_table_end();
t = timelib_time_ctor();

case:87
php_info_print_table_row(2, "Timezone Database", php_date_global_timezone_db_enabled ? "external" : "internal");
t = timelib_time_ctor();

case:88
php_info_print_table_row(2, "date/time support", "enabled");
t = timelib_time_ctor();

case:89
php_info_print_table_start();
t = timelib_time_ctor();

case:90
string = date_format((format), format_len, t, localtime);
t = timelib_time_ctor();

case:91
string = date_format((string), format_len, t, localtime);
t = timelib_time_ctor();

case:92
string = date_format(format, format_len, (t), localtime);
t = timelib_time_ctor();

case:93
string = date_format(format, format_len, t, localtime);
t = timelib_time_ctor();

case:94
t = timelib_time_ctor();
t = timelib_time_ctor();

case:95
t->tz_info = (tzi);
t = timelib_time_ctor();

case:96
t->tz_info = tzi;
t = timelib_time_ctor();

case:97
t->zone_type = 3;
t = timelib_time_ctor();

case:98
timelib_error_container_dtor((date_globals.last_errors));
t = timelib_time_ctor();

case:99
timelib_time_dtor((t));
t = timelib_time_ctor();

case:100
timelib_time_dtor(t);
t = timelib_time_ctor();

case:101
timelib_unixtime2gmt((t), (timelib_sll)time(((void *)0)));
t = timelib_time_ctor();

case:102
timelib_unixtime2gmt((t), ts);
t = timelib_time_ctor();

case:103
timelib_unixtime2gmt(t, ts);
t = timelib_time_ctor();

case:104
timelib_unixtime2local((t), (timelib_sll)time(((void *)0)));
t = timelib_time_ctor();

case:105
timelib_unixtime2local((t), ts);
t = timelib_time_ctor();

case:106
timelib_unixtime2local(t, ts);
t = timelib_time_ctor();

case:107
timelib_update_from_sse((t));
t = timelib_time_ctor();

case:108
timelib_update_ts((t), ((void *)0));
t = timelib_time_ctor();

case:109
tzi = ((void *)0);
t = timelib_time_ctor();

case:110
tzi = get_timezone_info();
t = timelib_time_ctor();

case:111
zend_class_implements(date_ce_period, 1, zend_ce_traversable);
t = timelib_time_ctor();

case:112
zend_declare_class_constant_long(date_ce_period, "EXCLUDE_START_DATE", sizeof ("EXCLUDE_START_DATE") - 1, 1);
t = timelib_time_ctor();

case:113
zend_declare_class_constant_long(date_ce_timezone, "AFRICA", sizeof ("AFRICA") - 1, 1);
t = timelib_time_ctor();

case:114
zend_declare_class_constant_long(date_ce_timezone, "ALL", sizeof ("ALL") - 1, 2047);
t = timelib_time_ctor();

case:115
zend_declare_class_constant_long(date_ce_timezone, "ALL_WITH_BC", sizeof ("ALL_WITH_BC") - 1, 4095);
t = timelib_time_ctor();

case:116
zend_declare_class_constant_long(date_ce_timezone, "AMERICA", sizeof ("AMERICA") - 1, 2);
t = timelib_time_ctor();

case:117
zend_declare_class_constant_long(date_ce_timezone, "ANTARCTICA", sizeof ("ANTARCTICA") - 1, 4);
t = timelib_time_ctor();

case:118
zend_declare_class_constant_long(date_ce_timezone, "ARCTIC", sizeof ("ARCTIC") - 1, 8);
t = timelib_time_ctor();

case:119
zend_declare_class_constant_long(date_ce_timezone, "ASIA", sizeof ("ASIA") - 1, 16);
t = timelib_time_ctor();

case:120
zend_declare_class_constant_long(date_ce_timezone, "ATLANTIC", sizeof ("ATLANTIC") - 1, 32);
t = timelib_time_ctor();

case:121
zend_declare_class_constant_long(date_ce_timezone, "AUSTRALIA", sizeof ("AUSTRALIA") - 1, 64);
t = timelib_time_ctor();

case:122
zend_declare_class_constant_long(date_ce_timezone, "EUROPE", sizeof ("EUROPE") - 1, 128);
t = timelib_time_ctor();

case:123
zend_declare_class_constant_long(date_ce_timezone, "INDIAN", sizeof ("INDIAN") - 1, 256);
t = timelib_time_ctor();

case:124
zend_declare_class_constant_long(date_ce_timezone, "PACIFIC", sizeof ("PACIFIC") - 1, 512);
t = timelib_time_ctor();

case:125
zend_declare_class_constant_long(date_ce_timezone, "PER_COUNTRY", sizeof ("PER_COUNTRY") - 1, 4096);
t = timelib_time_ctor();

case:126
zend_declare_class_constant_long(date_ce_timezone, "UTC", sizeof ("UTC") - 1, 1024);
t = timelib_time_ctor();

case:127
zend_declare_class_constant_stringl(date_ce_date, "ATOM", sizeof ("ATOM") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
t = timelib_time_ctor();

case:128
zend_declare_class_constant_stringl(date_ce_date, "COOKIE", sizeof ("COOKIE") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
t = timelib_time_ctor();

case:129
zend_declare_class_constant_stringl(date_ce_date, "ISO8601", sizeof ("ISO8601") - 1, "Y-m-d\\TH:i:sO", sizeof ("Y-m-d\\TH:i:sO") - 1);
t = timelib_time_ctor();

case:130
zend_declare_class_constant_stringl(date_ce_date, "RFC1036", sizeof ("RFC1036") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
t = timelib_time_ctor();

case:131
zend_declare_class_constant_stringl(date_ce_date, "RFC1123", sizeof ("RFC1123") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
t = timelib_time_ctor();

case:132
zend_declare_class_constant_stringl(date_ce_date, "RFC2822", sizeof ("RFC2822") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
t = timelib_time_ctor();

case:133
zend_declare_class_constant_stringl(date_ce_date, "RFC3339", sizeof ("RFC3339") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
t = timelib_time_ctor();

case:134
zend_declare_class_constant_stringl(date_ce_date, "RFC822", sizeof ("RFC822") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
t = timelib_time_ctor();

case:135
zend_declare_class_constant_stringl(date_ce_date, "RFC850", sizeof ("RFC850") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
t = timelib_time_ctor();

case:136
zend_declare_class_constant_stringl(date_ce_date, "RSS", sizeof ("RSS") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
t = timelib_time_ctor();

case:137
zend_declare_class_constant_stringl(date_ce_date, "W3C", sizeof ("W3C") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
t = timelib_time_ctor();

case:138
zend_error((1 << 0L), "An iterator cannot be used with foreach by reference");
t = timelib_time_ctor();

case:139
zend_error((1 << 3L), "A non well formed numeric value encountered");
t = timelib_time_ctor();

case:140
zend_hash_destroy((date_globals.tzcache));
t = timelib_time_ctor();

switch:6
case:1
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:2
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:3
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		(date_globals.last_errors) = ((void *)0);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:4
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		(date_globals.timezone) = ((void *)0);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:5
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		(date_globals.timezone) = _estrndup((zone), (zone_len), "ext/date/php_date.c", 3945, ((void *)0), 0);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:6
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		(date_globals.tzcache) = ((void *)0);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:7
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:8
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		(format) = date_format(format, format_len, t, localtime);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:9
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		(format)++;
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:10
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		(string) = date_format(format, format_len, t, localtime);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:11
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		(string)++;
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:12
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		(t) = timelib_time_ctor();
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:13
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		(t)->tz_info = tzi;
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:14
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		(t)->zone_type = 3;
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:15
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		(tzi) = ((void *)0);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:16
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		(tzi) = get_timezone_info();
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:17
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		Debug(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:18
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		_efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:19
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		_efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:20
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		_efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:21
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		_efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:22
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		_efree(((format)), "ext/date/php_date.c", 1413, ((void *)0), 0);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:23
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		_efree(((format)), "ext/date/php_date.c", 1654, ((void *)0), 0);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:24
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		_efree(((format)), "ext/date/php_date.c", 2536, ((void *)0), 0);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:25
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		_efree(((string)), "ext/date/php_date.c", 1413, ((void *)0), 0);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:26
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		_efree(((string)), "ext/date/php_date.c", 1654, ((void *)0), 0);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:27
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		_efree(((string)), "ext/date/php_date.c", 2536, ((void *)0), 0);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:28
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:29
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		date_ce_period->get_iterator = date_object_period_get_iterator;
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:30
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		date_ce_period->iterator_funcs.funcs = &date_period_it_funcs;
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:31
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		date_object_handlers_date.clone_obj = date_object_clone_date;
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:32
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		date_object_handlers_date.compare_objects = date_object_compare_date;
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:33
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		date_object_handlers_date.get_properties = date_object_get_properties;
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:34
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		date_object_handlers_interval.clone_obj = date_object_clone_interval;
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:35
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		date_object_handlers_interval.get_properties = date_object_get_properties_interval;
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:36
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		date_object_handlers_interval.get_property_ptr_ptr = ((void *)0);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:37
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		date_object_handlers_interval.read_property = date_interval_read_property;
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:38
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		date_object_handlers_interval.write_property = date_interval_write_property;
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:39
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		date_object_handlers_period.clone_obj = date_object_clone_period;
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:40
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		date_object_handlers_timezone.clone_obj = date_object_clone_timezone;
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:41
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		date_register_classes();
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:42
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		exit(1);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:43
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		if (!(date_globals.tzcache)) {
    ((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
    _zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
}
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:44
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
    (date_globals.last_errors) = ((void *)0);
}
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:45
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
}
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:46
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		if ((date_globals.timezone) && (strlen((date_globals.timezone)) > 0)) {
    return (date_globals.timezone);
}
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:47
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
    (date_globals.timezone) = ((void *)0);
}
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:48
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
}
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:49
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
}
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:50
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		if ((date_globals.tzcache)) {
    zend_hash_destroy((date_globals.tzcache));
    _efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
    (date_globals.tzcache) = ((void *)0);
}
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:51
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		if (localtime) {
    tzi = get_timezone_info();
    t->tz_info = tzi;
    t->zone_type = 3;
    timelib_unixtime2local(t, ts);
} else {
    tzi = ((void *)0);
    timelib_unixtime2gmt(t, ts);
}
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:52
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:53
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:54
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:55
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:56
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		memset(t, 0, sizeof (*(t)));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:57
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_date_global_timezone_db = ((void *)0);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:58
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_date_global_timezone_db_enabled = 0;
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:59
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_date_global_timezone_db_enabled = 1;
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:60
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 0L), "Timezone database is corrupt - this should *never* happen!");
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:61
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 13L), "The is_dst parameter is deprecated");
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:62
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 1L), "Can only do this for zones with ID for now");
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:63
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 1L), "Failed to parse interval (%s)", (format));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:64
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 1L), "Failed to parse interval (%s)", (string));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:65
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 1L), "It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm");
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:66
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 1L), "Only non-special relative time specifications are supported for subtraction");
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:67
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 1L), "The DateInterval object has not been correctly initialized by its constructor");
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:68
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 1L), "The DateTime object has not been correctly initialized by its constructor");
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:69
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 1L), "The DateTimeZone object has not been correctly initialized by its constructor");
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:70
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain a start date.", (format));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:71
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain a start date.", (string));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:72
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an end date or a recurrence count.", (format));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:73
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an end date or a recurrence count.", (string));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:74
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an interval.", (format));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:75
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an interval.", (string));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:76
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 1L), "This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.");
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:77
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad format (%s)", (format));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:78
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad format (%s)", (string));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:79
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad timezone (%s)", (format));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:80
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad timezone (%s)", (string));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:81
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 1L), "Unrecognized date format token.");
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:82
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 1L), "Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE");
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:83
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 1L), "idate format is one char");
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:84
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 3L), "A two-letter ISO 3166-1 compatible country code is expected");
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:85
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 3L), "Timezone ID '%s' is invalid", (format));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:86
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_error_docref0(((void *)0), (1 << 3L), "Timezone ID '%s' is invalid", (string));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:87
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_info_print_table_end();
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:88
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_info_print_table_row(2, "Timezone Database", php_date_global_timezone_db_enabled ? "external" : "internal");
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:89
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_info_print_table_row(2, "date/time support", "enabled");
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:90
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_info_print_table_start();
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:91
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		php_printf(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:92
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		printf(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:93
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		scanf(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:94
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		string = date_format((format), format_len, t, localtime);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:95
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		string = date_format((string), format_len, t, localtime);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:96
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		string = date_format(format, format_len, (t), localtime);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:97
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		string = date_format(format, format_len, t, localtime);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:98
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		t = timelib_time_ctor();
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:99
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		t->tz_info = (tzi);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:100
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		t->tz_info = tzi;
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:101
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		t->zone_type = 3;
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:102
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_error_container_dtor((date_globals.last_errors));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:103
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_time_dtor((t));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:104
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_time_dtor(t);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:105
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2gmt((t), (timelib_sll)time(((void *)0)));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:106
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2gmt((t), ts);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:107
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2gmt(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:108
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2gmt(t, ts);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:109
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local((t), (timelib_sll)time(((void *)0)));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:110
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local((t), ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:111
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local((t), ts);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:112
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:113
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_update_from_sse((t));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:114
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_update_ts((t), ((void *)0));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:115
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		tzi = ((void *)0);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:116
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		tzi = get_timezone_info();
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:117
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		wprintf(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:118
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		wscanf(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:119
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_class_implements(date_ce_period, 1, zend_ce_traversable);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:120
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_debug_alloc_output(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:121
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_long(date_ce_period, "EXCLUDE_START_DATE", sizeof ("EXCLUDE_START_DATE") - 1, 1);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:122
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_long(date_ce_timezone, "AFRICA", sizeof ("AFRICA") - 1, 1);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:123
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_long(date_ce_timezone, "ALL", sizeof ("ALL") - 1, 2047);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:124
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_long(date_ce_timezone, "ALL_WITH_BC", sizeof ("ALL_WITH_BC") - 1, 4095);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:125
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_long(date_ce_timezone, "AMERICA", sizeof ("AMERICA") - 1, 2);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:126
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_long(date_ce_timezone, "ANTARCTICA", sizeof ("ANTARCTICA") - 1, 4);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:127
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_long(date_ce_timezone, "ARCTIC", sizeof ("ARCTIC") - 1, 8);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:128
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_long(date_ce_timezone, "ASIA", sizeof ("ASIA") - 1, 16);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:129
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_long(date_ce_timezone, "ATLANTIC", sizeof ("ATLANTIC") - 1, 32);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:130
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_long(date_ce_timezone, "AUSTRALIA", sizeof ("AUSTRALIA") - 1, 64);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:131
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_long(date_ce_timezone, "EUROPE", sizeof ("EUROPE") - 1, 128);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:132
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_long(date_ce_timezone, "INDIAN", sizeof ("INDIAN") - 1, 256);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:133
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_long(date_ce_timezone, "PACIFIC", sizeof ("PACIFIC") - 1, 512);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:134
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_long(date_ce_timezone, "PER_COUNTRY", sizeof ("PER_COUNTRY") - 1, 4096);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:135
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_long(date_ce_timezone, "UTC", sizeof ("UTC") - 1, 1024);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:136
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_stringl(date_ce_date, "ATOM", sizeof ("ATOM") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:137
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_stringl(date_ce_date, "COOKIE", sizeof ("COOKIE") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:138
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_stringl(date_ce_date, "ISO8601", sizeof ("ISO8601") - 1, "Y-m-d\\TH:i:sO", sizeof ("Y-m-d\\TH:i:sO") - 1);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:139
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_stringl(date_ce_date, "RFC1036", sizeof ("RFC1036") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:140
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_stringl(date_ce_date, "RFC1123", sizeof ("RFC1123") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:141
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_stringl(date_ce_date, "RFC2822", sizeof ("RFC2822") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:142
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_stringl(date_ce_date, "RFC3339", sizeof ("RFC3339") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:143
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_stringl(date_ce_date, "RFC822", sizeof ("RFC822") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:144
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_stringl(date_ce_date, "RFC850", sizeof ("RFC850") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:145
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_stringl(date_ce_date, "RSS", sizeof ("RSS") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:146
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_declare_class_constant_stringl(date_ce_date, "W3C", sizeof ("W3C") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:147
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_error((1 << 0L), "An iterator cannot be used with foreach by reference");
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:148
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_error((1 << 3L), "A non well formed numeric value encountered");
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:149
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		zend_hash_destroy((date_globals.tzcache));
timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:150
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:151
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:152
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		(date_globals.last_errors) = ((void *)0);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:153
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		(date_globals.timezone) = ((void *)0);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:154
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		(date_globals.timezone) = _estrndup((zone), (zone_len), "ext/date/php_date.c", 3945, ((void *)0), 0);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:155
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		(date_globals.tzcache) = ((void *)0);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:156
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:157
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		(format) = date_format(format, format_len, t, localtime);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:158
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		(format)++;
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:159
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		(string) = date_format(format, format_len, t, localtime);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:160
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		(string)++;
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:161
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		(t) = timelib_time_ctor();
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:162
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		(t)->tz_info = tzi;
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:163
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		(t)->zone_type = 3;
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:164
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		(tzi) = ((void *)0);
		timelib_unixtime2gmt(t, ts);
	}

case:165
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		(tzi) = ((void *)0);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:166
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		(tzi) = get_timezone_info();
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:167
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		_efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:168
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		_efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:169
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		_efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:170
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		_efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:171
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		_efree(((format)), "ext/date/php_date.c", 1413, ((void *)0), 0);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:172
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		_efree(((format)), "ext/date/php_date.c", 1654, ((void *)0), 0);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:173
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		_efree(((format)), "ext/date/php_date.c", 2536, ((void *)0), 0);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:174
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		_efree(((string)), "ext/date/php_date.c", 1413, ((void *)0), 0);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:175
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		_efree(((string)), "ext/date/php_date.c", 1654, ((void *)0), 0);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:176
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		_efree(((string)), "ext/date/php_date.c", 2536, ((void *)0), 0);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:177
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:178
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		date_ce_period->get_iterator = date_object_period_get_iterator;
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:179
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		date_ce_period->iterator_funcs.funcs = &date_period_it_funcs;
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:180
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		date_object_handlers_date.clone_obj = date_object_clone_date;
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:181
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		date_object_handlers_date.compare_objects = date_object_compare_date;
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:182
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		date_object_handlers_date.get_properties = date_object_get_properties;
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:183
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		date_object_handlers_interval.clone_obj = date_object_clone_interval;
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:184
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		date_object_handlers_interval.get_properties = date_object_get_properties_interval;
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:185
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		date_object_handlers_interval.get_property_ptr_ptr = ((void *)0);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:186
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		date_object_handlers_interval.read_property = date_interval_read_property;
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:187
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		date_object_handlers_interval.write_property = date_interval_write_property;
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:188
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		date_object_handlers_period.clone_obj = date_object_clone_period;
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:189
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		date_object_handlers_timezone.clone_obj = date_object_clone_timezone;
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:190
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		date_register_classes();
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:191
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		exit(1);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:192
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		if (!(date_globals.tzcache)) {
    ((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
    _zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
}
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:193
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
    (date_globals.last_errors) = ((void *)0);
}
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:194
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
}
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:195
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		if ((date_globals.timezone) && (strlen((date_globals.timezone)) > 0)) {
    return (date_globals.timezone);
}
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:196
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
    (date_globals.timezone) = ((void *)0);
}
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:197
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
}
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:198
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
}
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:199
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		if ((date_globals.tzcache)) {
    zend_hash_destroy((date_globals.tzcache));
    _efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
    (date_globals.tzcache) = ((void *)0);
}
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:200
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		if (localtime) {
    tzi = get_timezone_info();
    t->tz_info = tzi;
    t->zone_type = 3;
    timelib_unixtime2local(t, ts);
} else {
    tzi = ((void *)0);
    timelib_unixtime2gmt(t, ts);
}
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:201
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:202
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:203
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:204
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:205
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_date_global_timezone_db = ((void *)0);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:206
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_date_global_timezone_db_enabled = 0;
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:207
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_date_global_timezone_db_enabled = 1;
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:208
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 0L), "Timezone database is corrupt - this should *never* happen!");
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:209
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 13L), "The is_dst parameter is deprecated");
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:210
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 1L), "Can only do this for zones with ID for now");
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:211
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 1L), "Failed to parse interval (%s)", (format));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:212
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 1L), "Failed to parse interval (%s)", (string));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:213
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 1L), "It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm");
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:214
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 1L), "Only non-special relative time specifications are supported for subtraction");
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:215
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 1L), "The DateInterval object has not been correctly initialized by its constructor");
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:216
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 1L), "The DateTime object has not been correctly initialized by its constructor");
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:217
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 1L), "The DateTimeZone object has not been correctly initialized by its constructor");
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:218
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain a start date.", (format));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:219
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain a start date.", (string));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:220
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an end date or a recurrence count.", (format));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:221
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an end date or a recurrence count.", (string));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:222
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an interval.", (format));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:223
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an interval.", (string));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:224
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 1L), "This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.");
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:225
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad format (%s)", (format));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:226
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad format (%s)", (string));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:227
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad timezone (%s)", (format));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:228
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad timezone (%s)", (string));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:229
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 1L), "Unrecognized date format token.");
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:230
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 1L), "Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE");
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:231
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 1L), "idate format is one char");
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:232
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 3L), "A two-letter ISO 3166-1 compatible country code is expected");
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:233
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 3L), "Timezone ID '%s' is invalid", (format));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:234
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_error_docref0(((void *)0), (1 << 3L), "Timezone ID '%s' is invalid", (string));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:235
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_info_print_table_end();
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:236
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_info_print_table_row(2, "Timezone Database", php_date_global_timezone_db_enabled ? "external" : "internal");
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:237
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_info_print_table_row(2, "date/time support", "enabled");
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:238
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		php_info_print_table_start();
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:239
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		string = date_format((format), format_len, t, localtime);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:240
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		string = date_format((string), format_len, t, localtime);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:241
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		string = date_format(format, format_len, (t), localtime);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:242
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		string = date_format(format, format_len, t, localtime);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:243
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		t = timelib_time_ctor();
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:244
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		t->tz_info = (tzi);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:245
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		t->tz_info = tzi;
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:246
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		t->zone_type = 3;
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:247
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		timelib_error_container_dtor((date_globals.last_errors));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:248
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		timelib_time_dtor((t));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:249
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		timelib_time_dtor(t);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:250
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		timelib_unixtime2gmt((t), (timelib_sll)time(((void *)0)));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:251
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		timelib_unixtime2gmt((t), ts);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:252
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		timelib_unixtime2gmt(t, ts);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:253
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		timelib_unixtime2local((t), (timelib_sll)time(((void *)0)));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:254
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		timelib_unixtime2local((t), ts);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:255
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		timelib_unixtime2local(t, ts);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:256
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		timelib_update_from_sse((t));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:257
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		timelib_update_ts((t), ((void *)0));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:258
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = ((void *)0);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:259
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = get_timezone_info();
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:260
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_class_implements(date_ce_period, 1, zend_ce_traversable);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:261
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_long(date_ce_period, "EXCLUDE_START_DATE", sizeof ("EXCLUDE_START_DATE") - 1, 1);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:262
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_long(date_ce_timezone, "AFRICA", sizeof ("AFRICA") - 1, 1);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:263
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_long(date_ce_timezone, "ALL", sizeof ("ALL") - 1, 2047);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:264
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_long(date_ce_timezone, "ALL_WITH_BC", sizeof ("ALL_WITH_BC") - 1, 4095);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:265
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_long(date_ce_timezone, "AMERICA", sizeof ("AMERICA") - 1, 2);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:266
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_long(date_ce_timezone, "ANTARCTICA", sizeof ("ANTARCTICA") - 1, 4);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:267
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_long(date_ce_timezone, "ARCTIC", sizeof ("ARCTIC") - 1, 8);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:268
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_long(date_ce_timezone, "ASIA", sizeof ("ASIA") - 1, 16);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:269
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_long(date_ce_timezone, "ATLANTIC", sizeof ("ATLANTIC") - 1, 32);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:270
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_long(date_ce_timezone, "AUSTRALIA", sizeof ("AUSTRALIA") - 1, 64);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:271
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_long(date_ce_timezone, "EUROPE", sizeof ("EUROPE") - 1, 128);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:272
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_long(date_ce_timezone, "INDIAN", sizeof ("INDIAN") - 1, 256);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:273
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_long(date_ce_timezone, "PACIFIC", sizeof ("PACIFIC") - 1, 512);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:274
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_long(date_ce_timezone, "PER_COUNTRY", sizeof ("PER_COUNTRY") - 1, 4096);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:275
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_long(date_ce_timezone, "UTC", sizeof ("UTC") - 1, 1024);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:276
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_stringl(date_ce_date, "ATOM", sizeof ("ATOM") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:277
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_stringl(date_ce_date, "COOKIE", sizeof ("COOKIE") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:278
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_stringl(date_ce_date, "ISO8601", sizeof ("ISO8601") - 1, "Y-m-d\\TH:i:sO", sizeof ("Y-m-d\\TH:i:sO") - 1);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:279
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_stringl(date_ce_date, "RFC1036", sizeof ("RFC1036") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:280
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_stringl(date_ce_date, "RFC1123", sizeof ("RFC1123") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:281
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_stringl(date_ce_date, "RFC2822", sizeof ("RFC2822") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:282
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_stringl(date_ce_date, "RFC3339", sizeof ("RFC3339") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:283
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_stringl(date_ce_date, "RFC822", sizeof ("RFC822") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:284
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_stringl(date_ce_date, "RFC850", sizeof ("RFC850") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:285
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_stringl(date_ce_date, "RSS", sizeof ("RSS") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:286
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_declare_class_constant_stringl(date_ce_date, "W3C", sizeof ("W3C") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:287
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_error((1 << 0L), "An iterator cannot be used with foreach by reference");
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:288
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_error((1 << 3L), "A non well formed numeric value encountered");
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:289
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		zend_hash_destroy((date_globals.tzcache));
tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:290
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:291
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
timelib_unixtime2gmt(t, ts);
	}

case:292
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		(date_globals.last_errors) = ((void *)0);
timelib_unixtime2gmt(t, ts);
	}

case:293
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		(date_globals.timezone) = ((void *)0);
timelib_unixtime2gmt(t, ts);
	}

case:294
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		(date_globals.timezone) = _estrndup((zone), (zone_len), "ext/date/php_date.c", 3945, ((void *)0), 0);
timelib_unixtime2gmt(t, ts);
	}

case:295
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		(date_globals.tzcache) = ((void *)0);
timelib_unixtime2gmt(t, ts);
	}

case:296
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16));
timelib_unixtime2gmt(t, ts);
	}

case:297
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		(format) = date_format(format, format_len, t, localtime);
timelib_unixtime2gmt(t, ts);
	}

case:298
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		(format)++;
timelib_unixtime2gmt(t, ts);
	}

case:299
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		(string) = date_format(format, format_len, t, localtime);
timelib_unixtime2gmt(t, ts);
	}

case:300
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		(string)++;
timelib_unixtime2gmt(t, ts);
	}

case:301
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		(t) = timelib_time_ctor();
timelib_unixtime2gmt(t, ts);
	}

case:302
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		(t)->tz_info = tzi;
timelib_unixtime2gmt(t, ts);
	}

case:303
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		(t)->zone_type = 3;
timelib_unixtime2gmt(t, ts);
	}

case:304
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		(tzi) = ((void *)0);
timelib_unixtime2gmt(t, ts);
	}

case:305
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		(tzi) = get_timezone_info();
timelib_unixtime2gmt(t, ts);
	}

case:306
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		Debug(t, ts);
	}

case:307
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		_efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
timelib_unixtime2gmt(t, ts);
	}

case:308
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		_efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
timelib_unixtime2gmt(t, ts);
	}

case:309
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		_efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
timelib_unixtime2gmt(t, ts);
	}

case:310
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		_efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
timelib_unixtime2gmt(t, ts);
	}

case:311
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		_efree(((format)), "ext/date/php_date.c", 1413, ((void *)0), 0);
timelib_unixtime2gmt(t, ts);
	}

case:312
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		_efree(((format)), "ext/date/php_date.c", 1654, ((void *)0), 0);
timelib_unixtime2gmt(t, ts);
	}

case:313
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		_efree(((format)), "ext/date/php_date.c", 2536, ((void *)0), 0);
timelib_unixtime2gmt(t, ts);
	}

case:314
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		_efree(((string)), "ext/date/php_date.c", 1413, ((void *)0), 0);
timelib_unixtime2gmt(t, ts);
	}

case:315
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		_efree(((string)), "ext/date/php_date.c", 1654, ((void *)0), 0);
timelib_unixtime2gmt(t, ts);
	}

case:316
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		_efree(((string)), "ext/date/php_date.c", 2536, ((void *)0), 0);
timelib_unixtime2gmt(t, ts);
	}

case:317
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
timelib_unixtime2gmt(t, ts);
	}

case:318
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		date_ce_period->get_iterator = date_object_period_get_iterator;
timelib_unixtime2gmt(t, ts);
	}

case:319
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		date_ce_period->iterator_funcs.funcs = &date_period_it_funcs;
timelib_unixtime2gmt(t, ts);
	}

case:320
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		date_object_handlers_date.clone_obj = date_object_clone_date;
timelib_unixtime2gmt(t, ts);
	}

case:321
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		date_object_handlers_date.compare_objects = date_object_compare_date;
timelib_unixtime2gmt(t, ts);
	}

case:322
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		date_object_handlers_date.get_properties = date_object_get_properties;
timelib_unixtime2gmt(t, ts);
	}

case:323
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		date_object_handlers_interval.clone_obj = date_object_clone_interval;
timelib_unixtime2gmt(t, ts);
	}

case:324
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		date_object_handlers_interval.get_properties = date_object_get_properties_interval;
timelib_unixtime2gmt(t, ts);
	}

case:325
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		date_object_handlers_interval.get_property_ptr_ptr = ((void *)0);
timelib_unixtime2gmt(t, ts);
	}

case:326
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		date_object_handlers_interval.read_property = date_interval_read_property;
timelib_unixtime2gmt(t, ts);
	}

case:327
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		date_object_handlers_interval.write_property = date_interval_write_property;
timelib_unixtime2gmt(t, ts);
	}

case:328
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		date_object_handlers_period.clone_obj = date_object_clone_period;
timelib_unixtime2gmt(t, ts);
	}

case:329
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		date_object_handlers_timezone.clone_obj = date_object_clone_timezone;
timelib_unixtime2gmt(t, ts);
	}

case:330
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		date_register_classes();
timelib_unixtime2gmt(t, ts);
	}

case:331
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		exit(1);
timelib_unixtime2gmt(t, ts);
	}

case:332
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		if (!(date_globals.tzcache)) {
    ((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
    _zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
}
timelib_unixtime2gmt(t, ts);
	}

case:333
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
    (date_globals.last_errors) = ((void *)0);
}
timelib_unixtime2gmt(t, ts);
	}

case:334
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
}
timelib_unixtime2gmt(t, ts);
	}

case:335
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		if ((date_globals.timezone) && (strlen((date_globals.timezone)) > 0)) {
    return (date_globals.timezone);
}
timelib_unixtime2gmt(t, ts);
	}

case:336
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
    (date_globals.timezone) = ((void *)0);
}
timelib_unixtime2gmt(t, ts);
	}

case:337
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
}
timelib_unixtime2gmt(t, ts);
	}

case:338
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
}
timelib_unixtime2gmt(t, ts);
	}

case:339
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		if ((date_globals.tzcache)) {
    zend_hash_destroy((date_globals.tzcache));
    _efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
    (date_globals.tzcache) = ((void *)0);
}
timelib_unixtime2gmt(t, ts);
	}

case:340
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		if (localtime) {
    tzi = get_timezone_info();
    t->tz_info = tzi;
    t->zone_type = 3;
    timelib_unixtime2local(t, ts);
} else {
    tzi = ((void *)0);
    timelib_unixtime2gmt(t, ts);
}
timelib_unixtime2gmt(t, ts);
	}

case:341
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
timelib_unixtime2gmt(t, ts);
	}

case:342
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
timelib_unixtime2gmt(t, ts);
	}

case:343
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
timelib_unixtime2gmt(t, ts);
	}

case:344
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
timelib_unixtime2gmt(t, ts);
	}

case:345
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		memset(t, 0, sizeof (*(t)));
timelib_unixtime2gmt(t, ts);
	}

case:346
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_date_global_timezone_db = ((void *)0);
timelib_unixtime2gmt(t, ts);
	}

case:347
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_date_global_timezone_db_enabled = 0;
timelib_unixtime2gmt(t, ts);
	}

case:348
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_date_global_timezone_db_enabled = 1;
timelib_unixtime2gmt(t, ts);
	}

case:349
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 0L), "Timezone database is corrupt - this should *never* happen!");
timelib_unixtime2gmt(t, ts);
	}

case:350
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 13L), "The is_dst parameter is deprecated");
timelib_unixtime2gmt(t, ts);
	}

case:351
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 1L), "Can only do this for zones with ID for now");
timelib_unixtime2gmt(t, ts);
	}

case:352
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 1L), "Failed to parse interval (%s)", (format));
timelib_unixtime2gmt(t, ts);
	}

case:353
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 1L), "Failed to parse interval (%s)", (string));
timelib_unixtime2gmt(t, ts);
	}

case:354
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 1L), "It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm");
timelib_unixtime2gmt(t, ts);
	}

case:355
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 1L), "Only non-special relative time specifications are supported for subtraction");
timelib_unixtime2gmt(t, ts);
	}

case:356
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 1L), "The DateInterval object has not been correctly initialized by its constructor");
timelib_unixtime2gmt(t, ts);
	}

case:357
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 1L), "The DateTime object has not been correctly initialized by its constructor");
timelib_unixtime2gmt(t, ts);
	}

case:358
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 1L), "The DateTimeZone object has not been correctly initialized by its constructor");
timelib_unixtime2gmt(t, ts);
	}

case:359
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain a start date.", (format));
timelib_unixtime2gmt(t, ts);
	}

case:360
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain a start date.", (string));
timelib_unixtime2gmt(t, ts);
	}

case:361
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an end date or a recurrence count.", (format));
timelib_unixtime2gmt(t, ts);
	}

case:362
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an end date or a recurrence count.", (string));
timelib_unixtime2gmt(t, ts);
	}

case:363
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an interval.", (format));
timelib_unixtime2gmt(t, ts);
	}

case:364
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an interval.", (string));
timelib_unixtime2gmt(t, ts);
	}

case:365
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 1L), "This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.");
timelib_unixtime2gmt(t, ts);
	}

case:366
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad format (%s)", (format));
timelib_unixtime2gmt(t, ts);
	}

case:367
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad format (%s)", (string));
timelib_unixtime2gmt(t, ts);
	}

case:368
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad timezone (%s)", (format));
timelib_unixtime2gmt(t, ts);
	}

case:369
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad timezone (%s)", (string));
timelib_unixtime2gmt(t, ts);
	}

case:370
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 1L), "Unrecognized date format token.");
timelib_unixtime2gmt(t, ts);
	}

case:371
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 1L), "Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE");
timelib_unixtime2gmt(t, ts);
	}

case:372
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 1L), "idate format is one char");
timelib_unixtime2gmt(t, ts);
	}

case:373
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 3L), "A two-letter ISO 3166-1 compatible country code is expected");
timelib_unixtime2gmt(t, ts);
	}

case:374
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 3L), "Timezone ID '%s' is invalid", (format));
timelib_unixtime2gmt(t, ts);
	}

case:375
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_error_docref0(((void *)0), (1 << 3L), "Timezone ID '%s' is invalid", (string));
timelib_unixtime2gmt(t, ts);
	}

case:376
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_info_print_table_end();
timelib_unixtime2gmt(t, ts);
	}

case:377
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_info_print_table_row(2, "Timezone Database", php_date_global_timezone_db_enabled ? "external" : "internal");
timelib_unixtime2gmt(t, ts);
	}

case:378
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_info_print_table_row(2, "date/time support", "enabled");
timelib_unixtime2gmt(t, ts);
	}

case:379
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_info_print_table_start();
timelib_unixtime2gmt(t, ts);
	}

case:380
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		php_printf(t, ts);
	}

case:381
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		printf(t, ts);
	}

case:382
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		scanf(t, ts);
	}

case:383
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		string = date_format((format), format_len, t, localtime);
timelib_unixtime2gmt(t, ts);
	}

case:384
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		string = date_format((string), format_len, t, localtime);
timelib_unixtime2gmt(t, ts);
	}

case:385
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		string = date_format(format, format_len, (t), localtime);
timelib_unixtime2gmt(t, ts);
	}

case:386
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		string = date_format(format, format_len, t, localtime);
timelib_unixtime2gmt(t, ts);
	}

case:387
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		t = timelib_time_ctor();
timelib_unixtime2gmt(t, ts);
	}

case:388
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		t->tz_info = (tzi);
timelib_unixtime2gmt(t, ts);
	}

case:389
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		t->tz_info = tzi;
timelib_unixtime2gmt(t, ts);
	}

case:390
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		t->zone_type = 3;
timelib_unixtime2gmt(t, ts);
	}

case:391
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_error_container_dtor((date_globals.last_errors));
timelib_unixtime2gmt(t, ts);
	}

case:392
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_time_dtor((t));
timelib_unixtime2gmt(t, ts);
	}

case:393
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_time_dtor(t);
timelib_unixtime2gmt(t, ts);
	}

case:394
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt((t), (timelib_sll)time(((void *)0)));
timelib_unixtime2gmt(t, ts);
	}

case:395
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt((t), ts);
	}

case:396
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt((t), ts);
timelib_unixtime2gmt(t, ts);
	}

case:397
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
timelib_unixtime2gmt(t, ts);
	}

case:398
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2local((t), (timelib_sll)time(((void *)0)));
timelib_unixtime2gmt(t, ts);
	}

case:399
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2local((t), ts);
timelib_unixtime2gmt(t, ts);
	}

case:400
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2local(t, ts);
	}

case:401
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2local(t, ts);
timelib_unixtime2gmt(t, ts);
	}

case:402
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_update_from_sse((t));
timelib_unixtime2gmt(t, ts);
	}

case:403
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_update_ts((t), ((void *)0));
timelib_unixtime2gmt(t, ts);
	}

case:404
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		tzi = ((void *)0);
timelib_unixtime2gmt(t, ts);
	}

case:405
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		tzi = get_timezone_info();
timelib_unixtime2gmt(t, ts);
	}

case:406
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		wprintf(t, ts);
	}

case:407
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		wscanf(t, ts);
	}

case:408
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_class_implements(date_ce_period, 1, zend_ce_traversable);
timelib_unixtime2gmt(t, ts);
	}

case:409
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_debug_alloc_output(t, ts);
	}

case:410
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_long(date_ce_period, "EXCLUDE_START_DATE", sizeof ("EXCLUDE_START_DATE") - 1, 1);
timelib_unixtime2gmt(t, ts);
	}

case:411
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_long(date_ce_timezone, "AFRICA", sizeof ("AFRICA") - 1, 1);
timelib_unixtime2gmt(t, ts);
	}

case:412
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_long(date_ce_timezone, "ALL", sizeof ("ALL") - 1, 2047);
timelib_unixtime2gmt(t, ts);
	}

case:413
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_long(date_ce_timezone, "ALL_WITH_BC", sizeof ("ALL_WITH_BC") - 1, 4095);
timelib_unixtime2gmt(t, ts);
	}

case:414
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_long(date_ce_timezone, "AMERICA", sizeof ("AMERICA") - 1, 2);
timelib_unixtime2gmt(t, ts);
	}

case:415
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_long(date_ce_timezone, "ANTARCTICA", sizeof ("ANTARCTICA") - 1, 4);
timelib_unixtime2gmt(t, ts);
	}

case:416
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_long(date_ce_timezone, "ARCTIC", sizeof ("ARCTIC") - 1, 8);
timelib_unixtime2gmt(t, ts);
	}

case:417
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_long(date_ce_timezone, "ASIA", sizeof ("ASIA") - 1, 16);
timelib_unixtime2gmt(t, ts);
	}

case:418
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_long(date_ce_timezone, "ATLANTIC", sizeof ("ATLANTIC") - 1, 32);
timelib_unixtime2gmt(t, ts);
	}

case:419
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_long(date_ce_timezone, "AUSTRALIA", sizeof ("AUSTRALIA") - 1, 64);
timelib_unixtime2gmt(t, ts);
	}

case:420
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_long(date_ce_timezone, "EUROPE", sizeof ("EUROPE") - 1, 128);
timelib_unixtime2gmt(t, ts);
	}

case:421
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_long(date_ce_timezone, "INDIAN", sizeof ("INDIAN") - 1, 256);
timelib_unixtime2gmt(t, ts);
	}

case:422
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_long(date_ce_timezone, "PACIFIC", sizeof ("PACIFIC") - 1, 512);
timelib_unixtime2gmt(t, ts);
	}

case:423
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_long(date_ce_timezone, "PER_COUNTRY", sizeof ("PER_COUNTRY") - 1, 4096);
timelib_unixtime2gmt(t, ts);
	}

case:424
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_long(date_ce_timezone, "UTC", sizeof ("UTC") - 1, 1024);
timelib_unixtime2gmt(t, ts);
	}

case:425
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_stringl(date_ce_date, "ATOM", sizeof ("ATOM") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
timelib_unixtime2gmt(t, ts);
	}

case:426
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_stringl(date_ce_date, "COOKIE", sizeof ("COOKIE") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
timelib_unixtime2gmt(t, ts);
	}

case:427
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_stringl(date_ce_date, "ISO8601", sizeof ("ISO8601") - 1, "Y-m-d\\TH:i:sO", sizeof ("Y-m-d\\TH:i:sO") - 1);
timelib_unixtime2gmt(t, ts);
	}

case:428
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_stringl(date_ce_date, "RFC1036", sizeof ("RFC1036") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
timelib_unixtime2gmt(t, ts);
	}

case:429
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_stringl(date_ce_date, "RFC1123", sizeof ("RFC1123") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
timelib_unixtime2gmt(t, ts);
	}

case:430
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_stringl(date_ce_date, "RFC2822", sizeof ("RFC2822") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
timelib_unixtime2gmt(t, ts);
	}

case:431
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_stringl(date_ce_date, "RFC3339", sizeof ("RFC3339") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
timelib_unixtime2gmt(t, ts);
	}

case:432
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_stringl(date_ce_date, "RFC822", sizeof ("RFC822") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
timelib_unixtime2gmt(t, ts);
	}

case:433
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_stringl(date_ce_date, "RFC850", sizeof ("RFC850") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
timelib_unixtime2gmt(t, ts);
	}

case:434
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_stringl(date_ce_date, "RSS", sizeof ("RSS") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
timelib_unixtime2gmt(t, ts);
	}

case:435
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_declare_class_constant_stringl(date_ce_date, "W3C", sizeof ("W3C") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
timelib_unixtime2gmt(t, ts);
	}

case:436
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_error((1 << 0L), "An iterator cannot be used with foreach by reference");
timelib_unixtime2gmt(t, ts);
	}

case:437
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_error((1 << 3L), "A non well formed numeric value encountered");
timelib_unixtime2gmt(t, ts);
	}

case:438
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		zend_hash_destroy((date_globals.tzcache));
timelib_unixtime2gmt(t, ts);
	}

case:439
((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:440
(date_globals.last_errors) = ((void *)0);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:441
(date_globals.timezone) = ((void *)0);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:442
(date_globals.timezone) = _estrndup((zone), (zone_len), "ext/date/php_date.c", 3945, ((void *)0), 0);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:443
(date_globals.tzcache) = ((void *)0);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:444
(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:445
(format) = date_format(format, format_len, t, localtime);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:446
(format)++;
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:447
(string) = date_format(format, format_len, t, localtime);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:448
(string)++;
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:449
(t) = timelib_time_ctor();
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:450
(t)->tz_info = tzi;
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:451
(t)->zone_type = 3;
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:452
(tzi) = ((void *)0);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:453
(tzi) = get_timezone_info();
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:454
_efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:455
_efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:456
_efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:457
_efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:458
_efree(((format)), "ext/date/php_date.c", 1413, ((void *)0), 0);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:459
_efree(((format)), "ext/date/php_date.c", 1654, ((void *)0), 0);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:460
_efree(((format)), "ext/date/php_date.c", 2536, ((void *)0), 0);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:461
_efree(((string)), "ext/date/php_date.c", 1413, ((void *)0), 0);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:462
_efree(((string)), "ext/date/php_date.c", 1654, ((void *)0), 0);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:463
_efree(((string)), "ext/date/php_date.c", 2536, ((void *)0), 0);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:464
_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:465
date_ce_period->get_iterator = date_object_period_get_iterator;
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:466
date_ce_period->iterator_funcs.funcs = &date_period_it_funcs;
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:467
date_object_handlers_date.clone_obj = date_object_clone_date;
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:468
date_object_handlers_date.compare_objects = date_object_compare_date;
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:469
date_object_handlers_date.get_properties = date_object_get_properties;
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:470
date_object_handlers_interval.clone_obj = date_object_clone_interval;
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:471
date_object_handlers_interval.get_properties = date_object_get_properties_interval;
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:472
date_object_handlers_interval.get_property_ptr_ptr = ((void *)0);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:473
date_object_handlers_interval.read_property = date_interval_read_property;
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:474
date_object_handlers_interval.write_property = date_interval_write_property;
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:475
date_object_handlers_period.clone_obj = date_object_clone_period;
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:476
date_object_handlers_timezone.clone_obj = date_object_clone_timezone;
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:477
date_register_classes();
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:478
exit(1);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:479
if (!(date_globals.tzcache)) {
    ((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
    _zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
}
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:480
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
    (date_globals.last_errors) = ((void *)0);
}
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:481
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
}
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:482
if ((date_globals.timezone) && (strlen((date_globals.timezone)) > 0)) {
    return (date_globals.timezone);
}
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:483
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
    (date_globals.timezone) = ((void *)0);
}
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:484
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
}
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:485
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
}
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:486
if ((date_globals.tzcache)) {
    zend_hash_destroy((date_globals.tzcache));
    _efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
    (date_globals.tzcache) = ((void *)0);
}
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:487
if (localtime) {
    tzi = get_timezone_info();
    t->tz_info = tzi;
    t->zone_type = 3;
    timelib_unixtime2local(t, ts);
} else {
    tzi = ((void *)0);
    timelib_unixtime2gmt(t, ts);
}
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:488
memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:489
memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:490
memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:491
memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:492
memset(t, 0, sizeof (*(t)));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:493
php_date_global_timezone_db = ((void *)0);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:494
php_date_global_timezone_db_enabled = 0;
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:495
php_date_global_timezone_db_enabled = 1;
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:496
php_error_docref0(((void *)0), (1 << 0L), "Timezone database is corrupt - this should *never* happen!");
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:497
php_error_docref0(((void *)0), (1 << 13L), "The is_dst parameter is deprecated");
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:498
php_error_docref0(((void *)0), (1 << 1L), "Can only do this for zones with ID for now");
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:499
php_error_docref0(((void *)0), (1 << 1L), "Failed to parse interval (%s)", (format));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:500
php_error_docref0(((void *)0), (1 << 1L), "Failed to parse interval (%s)", (string));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:501
php_error_docref0(((void *)0), (1 << 1L), "It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm");
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:502
php_error_docref0(((void *)0), (1 << 1L), "Only non-special relative time specifications are supported for subtraction");
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:503
php_error_docref0(((void *)0), (1 << 1L), "The DateInterval object has not been correctly initialized by its constructor");
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:504
php_error_docref0(((void *)0), (1 << 1L), "The DateTime object has not been correctly initialized by its constructor");
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:505
php_error_docref0(((void *)0), (1 << 1L), "The DateTimeZone object has not been correctly initialized by its constructor");
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:506
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain a start date.", (format));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:507
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain a start date.", (string));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:508
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an end date or a recurrence count.", (format));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:509
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an end date or a recurrence count.", (string));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:510
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an interval.", (format));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:511
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an interval.", (string));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:512
php_error_docref0(((void *)0), (1 << 1L), "This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.");
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:513
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad format (%s)", (format));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:514
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad format (%s)", (string));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:515
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad timezone (%s)", (format));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:516
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad timezone (%s)", (string));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:517
php_error_docref0(((void *)0), (1 << 1L), "Unrecognized date format token.");
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:518
php_error_docref0(((void *)0), (1 << 1L), "Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE");
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:519
php_error_docref0(((void *)0), (1 << 1L), "idate format is one char");
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:520
php_error_docref0(((void *)0), (1 << 3L), "A two-letter ISO 3166-1 compatible country code is expected");
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:521
php_error_docref0(((void *)0), (1 << 3L), "Timezone ID '%s' is invalid", (format));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:522
php_error_docref0(((void *)0), (1 << 3L), "Timezone ID '%s' is invalid", (string));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:523
php_info_print_table_end();
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:524
php_info_print_table_row(2, "Timezone Database", php_date_global_timezone_db_enabled ? "external" : "internal");
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:525
php_info_print_table_row(2, "date/time support", "enabled");
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:526
php_info_print_table_start();
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:527
string = date_format((format), format_len, t, localtime);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:528
string = date_format((string), format_len, t, localtime);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:529
string = date_format(format, format_len, (t), localtime);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:530
string = date_format(format, format_len, t, localtime);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:531
t = timelib_time_ctor();
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:532
t->tz_info = (tzi);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:533
t->tz_info = tzi;
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:534
t->zone_type = 3;
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:535
timelib_error_container_dtor((date_globals.last_errors));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:536
timelib_time_dtor((t));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:537
timelib_time_dtor(t);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:538
timelib_unixtime2gmt((t), (timelib_sll)time(((void *)0)));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:539
timelib_unixtime2gmt((t), ts);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:540
timelib_unixtime2gmt(t, ts);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:541
timelib_unixtime2local((t), (timelib_sll)time(((void *)0)));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:542
timelib_unixtime2local((t), ts);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:543
timelib_unixtime2local(t, ts);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:544
timelib_update_from_sse((t));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:545
timelib_update_ts((t), ((void *)0));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:546
tzi = ((void *)0);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:547
tzi = get_timezone_info();
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:548
zend_class_implements(date_ce_period, 1, zend_ce_traversable);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:549
zend_declare_class_constant_long(date_ce_period, "EXCLUDE_START_DATE", sizeof ("EXCLUDE_START_DATE") - 1, 1);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:550
zend_declare_class_constant_long(date_ce_timezone, "AFRICA", sizeof ("AFRICA") - 1, 1);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:551
zend_declare_class_constant_long(date_ce_timezone, "ALL", sizeof ("ALL") - 1, 2047);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:552
zend_declare_class_constant_long(date_ce_timezone, "ALL_WITH_BC", sizeof ("ALL_WITH_BC") - 1, 4095);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:553
zend_declare_class_constant_long(date_ce_timezone, "AMERICA", sizeof ("AMERICA") - 1, 2);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:554
zend_declare_class_constant_long(date_ce_timezone, "ANTARCTICA", sizeof ("ANTARCTICA") - 1, 4);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:555
zend_declare_class_constant_long(date_ce_timezone, "ARCTIC", sizeof ("ARCTIC") - 1, 8);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:556
zend_declare_class_constant_long(date_ce_timezone, "ASIA", sizeof ("ASIA") - 1, 16);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:557
zend_declare_class_constant_long(date_ce_timezone, "ATLANTIC", sizeof ("ATLANTIC") - 1, 32);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:558
zend_declare_class_constant_long(date_ce_timezone, "AUSTRALIA", sizeof ("AUSTRALIA") - 1, 64);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:559
zend_declare_class_constant_long(date_ce_timezone, "EUROPE", sizeof ("EUROPE") - 1, 128);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:560
zend_declare_class_constant_long(date_ce_timezone, "INDIAN", sizeof ("INDIAN") - 1, 256);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:561
zend_declare_class_constant_long(date_ce_timezone, "PACIFIC", sizeof ("PACIFIC") - 1, 512);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:562
zend_declare_class_constant_long(date_ce_timezone, "PER_COUNTRY", sizeof ("PER_COUNTRY") - 1, 4096);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:563
zend_declare_class_constant_long(date_ce_timezone, "UTC", sizeof ("UTC") - 1, 1024);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:564
zend_declare_class_constant_stringl(date_ce_date, "ATOM", sizeof ("ATOM") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:565
zend_declare_class_constant_stringl(date_ce_date, "COOKIE", sizeof ("COOKIE") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:566
zend_declare_class_constant_stringl(date_ce_date, "ISO8601", sizeof ("ISO8601") - 1, "Y-m-d\\TH:i:sO", sizeof ("Y-m-d\\TH:i:sO") - 1);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:567
zend_declare_class_constant_stringl(date_ce_date, "RFC1036", sizeof ("RFC1036") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:568
zend_declare_class_constant_stringl(date_ce_date, "RFC1123", sizeof ("RFC1123") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:569
zend_declare_class_constant_stringl(date_ce_date, "RFC2822", sizeof ("RFC2822") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:570
zend_declare_class_constant_stringl(date_ce_date, "RFC3339", sizeof ("RFC3339") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:571
zend_declare_class_constant_stringl(date_ce_date, "RFC822", sizeof ("RFC822") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:572
zend_declare_class_constant_stringl(date_ce_date, "RFC850", sizeof ("RFC850") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:573
zend_declare_class_constant_stringl(date_ce_date, "RSS", sizeof ("RSS") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:574
zend_declare_class_constant_stringl(date_ce_date, "W3C", sizeof ("W3C") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:575
zend_error((1 << 0L), "An iterator cannot be used with foreach by reference");
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:576
zend_error((1 << 3L), "A non well formed numeric value encountered");
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:577
zend_hash_destroy((date_globals.tzcache));
if (localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

switch:7
case:1
((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
string = date_format(format, format_len, t, localtime);

case:2
(date_globals.last_errors) = ((void *)0);
string = date_format(format, format_len, t, localtime);

case:3
(date_globals.timezone) = ((void *)0);
string = date_format(format, format_len, t, localtime);

case:4
(date_globals.timezone) = _estrndup((zone), (zone_len), "ext/date/php_date.c", 3945, ((void *)0), 0);
string = date_format(format, format_len, t, localtime);

case:5
(date_globals.tzcache) = ((void *)0);
string = date_format(format, format_len, t, localtime);

case:6
(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16));
string = date_format(format, format_len, t, localtime);

case:7
(format) = date_format(format, format_len, t, localtime);

case:8
(format) = date_format(format, format_len, t, localtime);
string = date_format(format, format_len, t, localtime);

case:9
(format)++;
string = date_format(format, format_len, t, localtime);

case:10
(string) = date_format(format, format_len, t, localtime);

case:11
(string) = date_format(format, format_len, t, localtime);
string = date_format(format, format_len, t, localtime);

case:12
(string)++;
string = date_format(format, format_len, t, localtime);

case:13
(t) = timelib_time_ctor();
string = date_format(format, format_len, t, localtime);

case:14
(t)->tz_info = tzi;
string = date_format(format, format_len, t, localtime);

case:15
(t)->zone_type = 3;
string = date_format(format, format_len, t, localtime);

case:16
(tzi) = ((void *)0);
string = date_format(format, format_len, t, localtime);

case:17
(tzi) = get_timezone_info();
string = date_format(format, format_len, t, localtime);

case:18
_efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
string = date_format(format, format_len, t, localtime);

case:19
_efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
string = date_format(format, format_len, t, localtime);

case:20
_efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
string = date_format(format, format_len, t, localtime);

case:21
_efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
string = date_format(format, format_len, t, localtime);

case:22
_efree(((format)), "ext/date/php_date.c", 1413, ((void *)0), 0);
string = date_format(format, format_len, t, localtime);

case:23
_efree(((format)), "ext/date/php_date.c", 1654, ((void *)0), 0);
string = date_format(format, format_len, t, localtime);

case:24
_efree(((format)), "ext/date/php_date.c", 2536, ((void *)0), 0);
string = date_format(format, format_len, t, localtime);

case:25
_efree(((string)), "ext/date/php_date.c", 1413, ((void *)0), 0);
string = date_format(format, format_len, t, localtime);

case:26
_efree(((string)), "ext/date/php_date.c", 1654, ((void *)0), 0);
string = date_format(format, format_len, t, localtime);

case:27
_efree(((string)), "ext/date/php_date.c", 2536, ((void *)0), 0);
string = date_format(format, format_len, t, localtime);

case:28
_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
string = date_format(format, format_len, t, localtime);

case:29
date_ce_period->get_iterator = date_object_period_get_iterator;
string = date_format(format, format_len, t, localtime);

case:30
date_ce_period->iterator_funcs.funcs = &date_period_it_funcs;
string = date_format(format, format_len, t, localtime);

case:31
date_object_handlers_date.clone_obj = date_object_clone_date;
string = date_format(format, format_len, t, localtime);

case:32
date_object_handlers_date.compare_objects = date_object_compare_date;
string = date_format(format, format_len, t, localtime);

case:33
date_object_handlers_date.get_properties = date_object_get_properties;
string = date_format(format, format_len, t, localtime);

case:34
date_object_handlers_interval.clone_obj = date_object_clone_interval;
string = date_format(format, format_len, t, localtime);

case:35
date_object_handlers_interval.get_properties = date_object_get_properties_interval;
string = date_format(format, format_len, t, localtime);

case:36
date_object_handlers_interval.get_property_ptr_ptr = ((void *)0);
string = date_format(format, format_len, t, localtime);

case:37
date_object_handlers_interval.read_property = date_interval_read_property;
string = date_format(format, format_len, t, localtime);

case:38
date_object_handlers_interval.write_property = date_interval_write_property;
string = date_format(format, format_len, t, localtime);

case:39
date_object_handlers_period.clone_obj = date_object_clone_period;
string = date_format(format, format_len, t, localtime);

case:40
date_object_handlers_timezone.clone_obj = date_object_clone_timezone;
string = date_format(format, format_len, t, localtime);

case:41
date_register_classes();
string = date_format(format, format_len, t, localtime);

case:42
exit(1);
string = date_format(format, format_len, t, localtime);

case:43
if (!(date_globals.tzcache)) {
    ((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
    _zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
}
string = date_format(format, format_len, t, localtime);

case:44
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
    (date_globals.last_errors) = ((void *)0);
}
string = date_format(format, format_len, t, localtime);

case:45
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
}
string = date_format(format, format_len, t, localtime);

case:46
if ((date_globals.timezone) && (strlen((date_globals.timezone)) > 0)) {
    return (date_globals.timezone);
}
string = date_format(format, format_len, t, localtime);

case:47
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
    (date_globals.timezone) = ((void *)0);
}
string = date_format(format, format_len, t, localtime);

case:48
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
}
string = date_format(format, format_len, t, localtime);

case:49
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
}
string = date_format(format, format_len, t, localtime);

case:50
if ((date_globals.tzcache)) {
    zend_hash_destroy((date_globals.tzcache));
    _efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
    (date_globals.tzcache) = ((void *)0);
}
string = date_format(format, format_len, t, localtime);

case:51
if (localtime) {
    tzi = get_timezone_info();
    t->tz_info = tzi;
    t->zone_type = 3;
    timelib_unixtime2local(t, ts);
} else {
    tzi = ((void *)0);
    timelib_unixtime2gmt(t, ts);
}
string = date_format(format, format_len, t, localtime);

case:52
memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
string = date_format(format, format_len, t, localtime);

case:53
memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
string = date_format(format, format_len, t, localtime);

case:54
memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
string = date_format(format, format_len, t, localtime);

case:55
memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
string = date_format(format, format_len, t, localtime);

case:56
memset(t, 0, sizeof (*(t)));
string = date_format(format, format_len, t, localtime);

case:57
php_date_global_timezone_db = ((void *)0);
string = date_format(format, format_len, t, localtime);

case:58
php_date_global_timezone_db_enabled = 0;
string = date_format(format, format_len, t, localtime);

case:59
php_date_global_timezone_db_enabled = 1;
string = date_format(format, format_len, t, localtime);

case:60
php_error_docref0(((void *)0), (1 << 0L), "Timezone database is corrupt - this should *never* happen!");
string = date_format(format, format_len, t, localtime);

case:61
php_error_docref0(((void *)0), (1 << 13L), "The is_dst parameter is deprecated");
string = date_format(format, format_len, t, localtime);

case:62
php_error_docref0(((void *)0), (1 << 1L), "Can only do this for zones with ID for now");
string = date_format(format, format_len, t, localtime);

case:63
php_error_docref0(((void *)0), (1 << 1L), "Failed to parse interval (%s)", (format));
string = date_format(format, format_len, t, localtime);

case:64
php_error_docref0(((void *)0), (1 << 1L), "Failed to parse interval (%s)", (string));
string = date_format(format, format_len, t, localtime);

case:65
php_error_docref0(((void *)0), (1 << 1L), "It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm");
string = date_format(format, format_len, t, localtime);

case:66
php_error_docref0(((void *)0), (1 << 1L), "Only non-special relative time specifications are supported for subtraction");
string = date_format(format, format_len, t, localtime);

case:67
php_error_docref0(((void *)0), (1 << 1L), "The DateInterval object has not been correctly initialized by its constructor");
string = date_format(format, format_len, t, localtime);

case:68
php_error_docref0(((void *)0), (1 << 1L), "The DateTime object has not been correctly initialized by its constructor");
string = date_format(format, format_len, t, localtime);

case:69
php_error_docref0(((void *)0), (1 << 1L), "The DateTimeZone object has not been correctly initialized by its constructor");
string = date_format(format, format_len, t, localtime);

case:70
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain a start date.", (format));
string = date_format(format, format_len, t, localtime);

case:71
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain a start date.", (string));
string = date_format(format, format_len, t, localtime);

case:72
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an end date or a recurrence count.", (format));
string = date_format(format, format_len, t, localtime);

case:73
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an end date or a recurrence count.", (string));
string = date_format(format, format_len, t, localtime);

case:74
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an interval.", (format));
string = date_format(format, format_len, t, localtime);

case:75
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an interval.", (string));
string = date_format(format, format_len, t, localtime);

case:76
php_error_docref0(((void *)0), (1 << 1L), "This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.");
string = date_format(format, format_len, t, localtime);

case:77
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad format (%s)", (format));
string = date_format(format, format_len, t, localtime);

case:78
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad format (%s)", (string));
string = date_format(format, format_len, t, localtime);

case:79
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad timezone (%s)", (format));
string = date_format(format, format_len, t, localtime);

case:80
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad timezone (%s)", (string));
string = date_format(format, format_len, t, localtime);

case:81
php_error_docref0(((void *)0), (1 << 1L), "Unrecognized date format token.");
string = date_format(format, format_len, t, localtime);

case:82
php_error_docref0(((void *)0), (1 << 1L), "Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE");
string = date_format(format, format_len, t, localtime);

case:83
php_error_docref0(((void *)0), (1 << 1L), "idate format is one char");
string = date_format(format, format_len, t, localtime);

case:84
php_error_docref0(((void *)0), (1 << 3L), "A two-letter ISO 3166-1 compatible country code is expected");
string = date_format(format, format_len, t, localtime);

case:85
php_error_docref0(((void *)0), (1 << 3L), "Timezone ID '%s' is invalid", (format));
string = date_format(format, format_len, t, localtime);

case:86
php_error_docref0(((void *)0), (1 << 3L), "Timezone ID '%s' is invalid", (string));
string = date_format(format, format_len, t, localtime);

case:87
php_info_print_table_end();
string = date_format(format, format_len, t, localtime);

case:88
php_info_print_table_row(2, "Timezone Database", php_date_global_timezone_db_enabled ? "external" : "internal");
string = date_format(format, format_len, t, localtime);

case:89
php_info_print_table_row(2, "date/time support", "enabled");
string = date_format(format, format_len, t, localtime);

case:90
php_info_print_table_start();
string = date_format(format, format_len, t, localtime);

case:91
string = date_format((format), format_len, t, localtime);

case:92
string = date_format((format), format_len, t, localtime);
string = date_format(format, format_len, t, localtime);

case:93
string = date_format((string), format_len, t, localtime);

case:94
string = date_format((string), format_len, t, localtime);
string = date_format(format, format_len, t, localtime);

case:95
string = date_format(format, format_len, (t), localtime);

case:96
string = date_format(format, format_len, (t), localtime);
string = date_format(format, format_len, t, localtime);

case:97
string = date_format(format, format_len, t, localtime);
string = date_format(format, format_len, t, localtime);

case:98
t = timelib_time_ctor();
string = date_format(format, format_len, t, localtime);

case:99
t->tz_info = (tzi);
string = date_format(format, format_len, t, localtime);

case:100
t->tz_info = tzi;
string = date_format(format, format_len, t, localtime);

case:101
t->zone_type = 3;
string = date_format(format, format_len, t, localtime);

case:102
timelib_error_container_dtor((date_globals.last_errors));
string = date_format(format, format_len, t, localtime);

case:103
timelib_time_dtor((t));
string = date_format(format, format_len, t, localtime);

case:104
timelib_time_dtor(t);
string = date_format(format, format_len, t, localtime);

case:105
timelib_unixtime2gmt((t), (timelib_sll)time(((void *)0)));
string = date_format(format, format_len, t, localtime);

case:106
timelib_unixtime2gmt((t), ts);
string = date_format(format, format_len, t, localtime);

case:107
timelib_unixtime2gmt(t, ts);
string = date_format(format, format_len, t, localtime);

case:108
timelib_unixtime2local((t), (timelib_sll)time(((void *)0)));
string = date_format(format, format_len, t, localtime);

case:109
timelib_unixtime2local((t), ts);
string = date_format(format, format_len, t, localtime);

case:110
timelib_unixtime2local(t, ts);
string = date_format(format, format_len, t, localtime);

case:111
timelib_update_from_sse((t));
string = date_format(format, format_len, t, localtime);

case:112
timelib_update_ts((t), ((void *)0));
string = date_format(format, format_len, t, localtime);

case:113
tzi = ((void *)0);
string = date_format(format, format_len, t, localtime);

case:114
tzi = get_timezone_info();
string = date_format(format, format_len, t, localtime);

case:115
zend_class_implements(date_ce_period, 1, zend_ce_traversable);
string = date_format(format, format_len, t, localtime);

case:116
zend_declare_class_constant_long(date_ce_period, "EXCLUDE_START_DATE", sizeof ("EXCLUDE_START_DATE") - 1, 1);
string = date_format(format, format_len, t, localtime);

case:117
zend_declare_class_constant_long(date_ce_timezone, "AFRICA", sizeof ("AFRICA") - 1, 1);
string = date_format(format, format_len, t, localtime);

case:118
zend_declare_class_constant_long(date_ce_timezone, "ALL", sizeof ("ALL") - 1, 2047);
string = date_format(format, format_len, t, localtime);

case:119
zend_declare_class_constant_long(date_ce_timezone, "ALL_WITH_BC", sizeof ("ALL_WITH_BC") - 1, 4095);
string = date_format(format, format_len, t, localtime);

case:120
zend_declare_class_constant_long(date_ce_timezone, "AMERICA", sizeof ("AMERICA") - 1, 2);
string = date_format(format, format_len, t, localtime);

case:121
zend_declare_class_constant_long(date_ce_timezone, "ANTARCTICA", sizeof ("ANTARCTICA") - 1, 4);
string = date_format(format, format_len, t, localtime);

case:122
zend_declare_class_constant_long(date_ce_timezone, "ARCTIC", sizeof ("ARCTIC") - 1, 8);
string = date_format(format, format_len, t, localtime);

case:123
zend_declare_class_constant_long(date_ce_timezone, "ASIA", sizeof ("ASIA") - 1, 16);
string = date_format(format, format_len, t, localtime);

case:124
zend_declare_class_constant_long(date_ce_timezone, "ATLANTIC", sizeof ("ATLANTIC") - 1, 32);
string = date_format(format, format_len, t, localtime);

case:125
zend_declare_class_constant_long(date_ce_timezone, "AUSTRALIA", sizeof ("AUSTRALIA") - 1, 64);
string = date_format(format, format_len, t, localtime);

case:126
zend_declare_class_constant_long(date_ce_timezone, "EUROPE", sizeof ("EUROPE") - 1, 128);
string = date_format(format, format_len, t, localtime);

case:127
zend_declare_class_constant_long(date_ce_timezone, "INDIAN", sizeof ("INDIAN") - 1, 256);
string = date_format(format, format_len, t, localtime);

case:128
zend_declare_class_constant_long(date_ce_timezone, "PACIFIC", sizeof ("PACIFIC") - 1, 512);
string = date_format(format, format_len, t, localtime);

case:129
zend_declare_class_constant_long(date_ce_timezone, "PER_COUNTRY", sizeof ("PER_COUNTRY") - 1, 4096);
string = date_format(format, format_len, t, localtime);

case:130
zend_declare_class_constant_long(date_ce_timezone, "UTC", sizeof ("UTC") - 1, 1024);
string = date_format(format, format_len, t, localtime);

case:131
zend_declare_class_constant_stringl(date_ce_date, "ATOM", sizeof ("ATOM") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
string = date_format(format, format_len, t, localtime);

case:132
zend_declare_class_constant_stringl(date_ce_date, "COOKIE", sizeof ("COOKIE") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
string = date_format(format, format_len, t, localtime);

case:133
zend_declare_class_constant_stringl(date_ce_date, "ISO8601", sizeof ("ISO8601") - 1, "Y-m-d\\TH:i:sO", sizeof ("Y-m-d\\TH:i:sO") - 1);
string = date_format(format, format_len, t, localtime);

case:134
zend_declare_class_constant_stringl(date_ce_date, "RFC1036", sizeof ("RFC1036") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
string = date_format(format, format_len, t, localtime);

case:135
zend_declare_class_constant_stringl(date_ce_date, "RFC1123", sizeof ("RFC1123") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
string = date_format(format, format_len, t, localtime);

case:136
zend_declare_class_constant_stringl(date_ce_date, "RFC2822", sizeof ("RFC2822") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
string = date_format(format, format_len, t, localtime);

case:137
zend_declare_class_constant_stringl(date_ce_date, "RFC3339", sizeof ("RFC3339") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
string = date_format(format, format_len, t, localtime);

case:138
zend_declare_class_constant_stringl(date_ce_date, "RFC822", sizeof ("RFC822") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
string = date_format(format, format_len, t, localtime);

case:139
zend_declare_class_constant_stringl(date_ce_date, "RFC850", sizeof ("RFC850") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
string = date_format(format, format_len, t, localtime);

case:140
zend_declare_class_constant_stringl(date_ce_date, "RSS", sizeof ("RSS") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
string = date_format(format, format_len, t, localtime);

case:141
zend_declare_class_constant_stringl(date_ce_date, "W3C", sizeof ("W3C") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
string = date_format(format, format_len, t, localtime);

case:142
zend_error((1 << 0L), "An iterator cannot be used with foreach by reference");
string = date_format(format, format_len, t, localtime);

case:143
zend_error((1 << 3L), "A non well formed numeric value encountered");
string = date_format(format, format_len, t, localtime);

case:144
zend_hash_destroy((date_globals.tzcache));
string = date_format(format, format_len, t, localtime);

switch:8
case:1
((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
timelib_time_dtor(t);

case:2
(date_globals.last_errors) = ((void *)0);
timelib_time_dtor(t);

case:3
(date_globals.timezone) = ((void *)0);
timelib_time_dtor(t);

case:4
(date_globals.timezone) = _estrndup((zone), (zone_len), "ext/date/php_date.c", 3945, ((void *)0), 0);
timelib_time_dtor(t);

case:5
(date_globals.tzcache) = ((void *)0);
timelib_time_dtor(t);

case:6
(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16));
timelib_time_dtor(t);

case:7
(format) = date_format(format, format_len, t, localtime);
timelib_time_dtor(t);

case:8
(format)++;
timelib_time_dtor(t);

case:9
(string) = date_format(format, format_len, t, localtime);
timelib_time_dtor(t);

case:10
(string)++;
timelib_time_dtor(t);

case:11
(t) = timelib_time_ctor();
timelib_time_dtor(t);

case:12
(t)->tz_info = tzi;
timelib_time_dtor(t);

case:13
(t)->zone_type = 3;
timelib_time_dtor(t);

case:14
(tzi) = ((void *)0);
timelib_time_dtor(t);

case:15
(tzi) = get_timezone_info();
timelib_time_dtor(t);

case:16
_efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
timelib_time_dtor(t);

case:17
_efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
timelib_time_dtor(t);

case:18
_efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
timelib_time_dtor(t);

case:19
_efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
timelib_time_dtor(t);

case:20
_efree(((format)), "ext/date/php_date.c", 1413, ((void *)0), 0);
timelib_time_dtor(t);

case:21
_efree(((format)), "ext/date/php_date.c", 1654, ((void *)0), 0);
timelib_time_dtor(t);

case:22
_efree(((format)), "ext/date/php_date.c", 2536, ((void *)0), 0);
timelib_time_dtor(t);

case:23
_efree(((string)), "ext/date/php_date.c", 1413, ((void *)0), 0);
timelib_time_dtor(t);

case:24
_efree(((string)), "ext/date/php_date.c", 1654, ((void *)0), 0);
timelib_time_dtor(t);

case:25
_efree(((string)), "ext/date/php_date.c", 2536, ((void *)0), 0);
timelib_time_dtor(t);

case:26
_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
timelib_time_dtor(t);

case:27
date_ce_period->get_iterator = date_object_period_get_iterator;
timelib_time_dtor(t);

case:28
date_ce_period->iterator_funcs.funcs = &date_period_it_funcs;
timelib_time_dtor(t);

case:29
date_object_handlers_date.clone_obj = date_object_clone_date;
timelib_time_dtor(t);

case:30
date_object_handlers_date.compare_objects = date_object_compare_date;
timelib_time_dtor(t);

case:31
date_object_handlers_date.get_properties = date_object_get_properties;
timelib_time_dtor(t);

case:32
date_object_handlers_interval.clone_obj = date_object_clone_interval;
timelib_time_dtor(t);

case:33
date_object_handlers_interval.get_properties = date_object_get_properties_interval;
timelib_time_dtor(t);

case:34
date_object_handlers_interval.get_property_ptr_ptr = ((void *)0);
timelib_time_dtor(t);

case:35
date_object_handlers_interval.read_property = date_interval_read_property;
timelib_time_dtor(t);

case:36
date_object_handlers_interval.write_property = date_interval_write_property;
timelib_time_dtor(t);

case:37
date_object_handlers_period.clone_obj = date_object_clone_period;
timelib_time_dtor(t);

case:38
date_object_handlers_timezone.clone_obj = date_object_clone_timezone;
timelib_time_dtor(t);

case:39
date_register_classes();
timelib_time_dtor(t);

case:40
exit(1);
timelib_time_dtor(t);

case:41
if (!(date_globals.tzcache)) {
    ((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
    _zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
}
timelib_time_dtor(t);

case:42
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
    (date_globals.last_errors) = ((void *)0);
}
timelib_time_dtor(t);

case:43
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
}
timelib_time_dtor(t);

case:44
if ((date_globals.timezone) && (strlen((date_globals.timezone)) > 0)) {
    return (date_globals.timezone);
}
timelib_time_dtor(t);

case:45
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
    (date_globals.timezone) = ((void *)0);
}
timelib_time_dtor(t);

case:46
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
}
timelib_time_dtor(t);

case:47
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
}
timelib_time_dtor(t);

case:48
if ((date_globals.tzcache)) {
    zend_hash_destroy((date_globals.tzcache));
    _efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
    (date_globals.tzcache) = ((void *)0);
}
timelib_time_dtor(t);

case:49
if (localtime) {
    tzi = get_timezone_info();
    t->tz_info = tzi;
    t->zone_type = 3;
    timelib_unixtime2local(t, ts);
} else {
    tzi = ((void *)0);
    timelib_unixtime2gmt(t, ts);
}
timelib_time_dtor(t);

case:50
memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
timelib_time_dtor(t);

case:51
memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
timelib_time_dtor(t);

case:52
memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
timelib_time_dtor(t);

case:53
memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
timelib_time_dtor(t);

case:54
memset(t, 0, sizeof (*(t)));
timelib_time_dtor(t);

case:55
php_date_global_timezone_db = ((void *)0);
timelib_time_dtor(t);

case:56
php_date_global_timezone_db_enabled = 0;
timelib_time_dtor(t);

case:57
php_date_global_timezone_db_enabled = 1;
timelib_time_dtor(t);

case:58
php_error_docref0(((void *)0), (1 << 0L), "Timezone database is corrupt - this should *never* happen!");
timelib_time_dtor(t);

case:59
php_error_docref0(((void *)0), (1 << 13L), "The is_dst parameter is deprecated");
timelib_time_dtor(t);

case:60
php_error_docref0(((void *)0), (1 << 1L), "Can only do this for zones with ID for now");
timelib_time_dtor(t);

case:61
php_error_docref0(((void *)0), (1 << 1L), "Failed to parse interval (%s)", (format));
timelib_time_dtor(t);

case:62
php_error_docref0(((void *)0), (1 << 1L), "Failed to parse interval (%s)", (string));
timelib_time_dtor(t);

case:63
php_error_docref0(((void *)0), (1 << 1L), "It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm");
timelib_time_dtor(t);

case:64
php_error_docref0(((void *)0), (1 << 1L), "Only non-special relative time specifications are supported for subtraction");
timelib_time_dtor(t);

case:65
php_error_docref0(((void *)0), (1 << 1L), "The DateInterval object has not been correctly initialized by its constructor");
timelib_time_dtor(t);

case:66
php_error_docref0(((void *)0), (1 << 1L), "The DateTime object has not been correctly initialized by its constructor");
timelib_time_dtor(t);

case:67
php_error_docref0(((void *)0), (1 << 1L), "The DateTimeZone object has not been correctly initialized by its constructor");
timelib_time_dtor(t);

case:68
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain a start date.", (format));
timelib_time_dtor(t);

case:69
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain a start date.", (string));
timelib_time_dtor(t);

case:70
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an end date or a recurrence count.", (format));
timelib_time_dtor(t);

case:71
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an end date or a recurrence count.", (string));
timelib_time_dtor(t);

case:72
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an interval.", (format));
timelib_time_dtor(t);

case:73
php_error_docref0(((void *)0), (1 << 1L), "The ISO interval '%s' did not contain an interval.", (string));
timelib_time_dtor(t);

case:74
php_error_docref0(((void *)0), (1 << 1L), "This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.");
timelib_time_dtor(t);

case:75
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad format (%s)", (format));
timelib_time_dtor(t);

case:76
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad format (%s)", (string));
timelib_time_dtor(t);

case:77
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad timezone (%s)", (format));
timelib_time_dtor(t);

case:78
php_error_docref0(((void *)0), (1 << 1L), "Unknown or bad timezone (%s)", (string));
timelib_time_dtor(t);

case:79
php_error_docref0(((void *)0), (1 << 1L), "Unrecognized date format token.");
timelib_time_dtor(t);

case:80
php_error_docref0(((void *)0), (1 << 1L), "Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE");
timelib_time_dtor(t);

case:81
php_error_docref0(((void *)0), (1 << 1L), "idate format is one char");
timelib_time_dtor(t);

case:82
php_error_docref0(((void *)0), (1 << 3L), "A two-letter ISO 3166-1 compatible country code is expected");
timelib_time_dtor(t);

case:83
php_error_docref0(((void *)0), (1 << 3L), "Timezone ID '%s' is invalid", (format));
timelib_time_dtor(t);

case:84
php_error_docref0(((void *)0), (1 << 3L), "Timezone ID '%s' is invalid", (string));
timelib_time_dtor(t);

case:85
php_info_print_table_end();
timelib_time_dtor(t);

case:86
php_info_print_table_row(2, "Timezone Database", php_date_global_timezone_db_enabled ? "external" : "internal");
timelib_time_dtor(t);

case:87
php_info_print_table_row(2, "date/time support", "enabled");
timelib_time_dtor(t);

case:88
php_info_print_table_start();
timelib_time_dtor(t);

case:89
string = date_format((format), format_len, t, localtime);
timelib_time_dtor(t);

case:90
string = date_format((string), format_len, t, localtime);
timelib_time_dtor(t);

case:91
string = date_format(format, format_len, (t), localtime);
timelib_time_dtor(t);

case:92
string = date_format(format, format_len, t, localtime);
timelib_time_dtor(t);

case:93
t = timelib_time_ctor();
timelib_time_dtor(t);

case:94
t->tz_info = (tzi);
timelib_time_dtor(t);

case:95
t->tz_info = tzi;
timelib_time_dtor(t);

case:96
t->zone_type = 3;
timelib_time_dtor(t);

case:97
timelib_error_container_dtor((date_globals.last_errors));
timelib_time_dtor(t);

case:98
timelib_get_current_offset(t);

case:99
timelib_time_clone(t);

case:100
timelib_time_dtor((t));

case:101
timelib_time_dtor((t));
timelib_time_dtor(t);

case:102
timelib_time_dtor(t);
timelib_time_dtor(t);

case:103
timelib_unixtime2gmt((t), (timelib_sll)time(((void *)0)));
timelib_time_dtor(t);

case:104
timelib_unixtime2gmt((t), ts);
timelib_time_dtor(t);

case:105
timelib_unixtime2gmt(t, ts);
timelib_time_dtor(t);

case:106
timelib_unixtime2local((t), (timelib_sll)time(((void *)0)));
timelib_time_dtor(t);

case:107
timelib_unixtime2local((t), ts);
timelib_time_dtor(t);

case:108
timelib_unixtime2local(t, ts);
timelib_time_dtor(t);

case:109
timelib_update_from_sse((t));
timelib_time_dtor(t);

case:110
timelib_update_from_sse(t);

case:111
timelib_update_ts((t), ((void *)0));
timelib_time_dtor(t);

case:112
tzi = ((void *)0);
timelib_time_dtor(t);

case:113
tzi = get_timezone_info();
timelib_time_dtor(t);

case:114
zend_class_implements(date_ce_period, 1, zend_ce_traversable);
timelib_time_dtor(t);

case:115
zend_declare_class_constant_long(date_ce_period, "EXCLUDE_START_DATE", sizeof ("EXCLUDE_START_DATE") - 1, 1);
timelib_time_dtor(t);

case:116
zend_declare_class_constant_long(date_ce_timezone, "AFRICA", sizeof ("AFRICA") - 1, 1);
timelib_time_dtor(t);

case:117
zend_declare_class_constant_long(date_ce_timezone, "ALL", sizeof ("ALL") - 1, 2047);
timelib_time_dtor(t);

case:118
zend_declare_class_constant_long(date_ce_timezone, "ALL_WITH_BC", sizeof ("ALL_WITH_BC") - 1, 4095);
timelib_time_dtor(t);

case:119
zend_declare_class_constant_long(date_ce_timezone, "AMERICA", sizeof ("AMERICA") - 1, 2);
timelib_time_dtor(t);

case:120
zend_declare_class_constant_long(date_ce_timezone, "ANTARCTICA", sizeof ("ANTARCTICA") - 1, 4);
timelib_time_dtor(t);

case:121
zend_declare_class_constant_long(date_ce_timezone, "ARCTIC", sizeof ("ARCTIC") - 1, 8);
timelib_time_dtor(t);

case:122
zend_declare_class_constant_long(date_ce_timezone, "ASIA", sizeof ("ASIA") - 1, 16);
timelib_time_dtor(t);

case:123
zend_declare_class_constant_long(date_ce_timezone, "ATLANTIC", sizeof ("ATLANTIC") - 1, 32);
timelib_time_dtor(t);

case:124
zend_declare_class_constant_long(date_ce_timezone, "AUSTRALIA", sizeof ("AUSTRALIA") - 1, 64);
timelib_time_dtor(t);

case:125
zend_declare_class_constant_long(date_ce_timezone, "EUROPE", sizeof ("EUROPE") - 1, 128);
timelib_time_dtor(t);

case:126
zend_declare_class_constant_long(date_ce_timezone, "INDIAN", sizeof ("INDIAN") - 1, 256);
timelib_time_dtor(t);

case:127
zend_declare_class_constant_long(date_ce_timezone, "PACIFIC", sizeof ("PACIFIC") - 1, 512);
timelib_time_dtor(t);

case:128
zend_declare_class_constant_long(date_ce_timezone, "PER_COUNTRY", sizeof ("PER_COUNTRY") - 1, 4096);
timelib_time_dtor(t);

case:129
zend_declare_class_constant_long(date_ce_timezone, "UTC", sizeof ("UTC") - 1, 1024);
timelib_time_dtor(t);

case:130
zend_declare_class_constant_stringl(date_ce_date, "ATOM", sizeof ("ATOM") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
timelib_time_dtor(t);

case:131
zend_declare_class_constant_stringl(date_ce_date, "COOKIE", sizeof ("COOKIE") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
timelib_time_dtor(t);

case:132
zend_declare_class_constant_stringl(date_ce_date, "ISO8601", sizeof ("ISO8601") - 1, "Y-m-d\\TH:i:sO", sizeof ("Y-m-d\\TH:i:sO") - 1);
timelib_time_dtor(t);

case:133
zend_declare_class_constant_stringl(date_ce_date, "RFC1036", sizeof ("RFC1036") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
timelib_time_dtor(t);

case:134
zend_declare_class_constant_stringl(date_ce_date, "RFC1123", sizeof ("RFC1123") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
timelib_time_dtor(t);

case:135
zend_declare_class_constant_stringl(date_ce_date, "RFC2822", sizeof ("RFC2822") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
timelib_time_dtor(t);

case:136
zend_declare_class_constant_stringl(date_ce_date, "RFC3339", sizeof ("RFC3339") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
timelib_time_dtor(t);

case:137
zend_declare_class_constant_stringl(date_ce_date, "RFC822", sizeof ("RFC822") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
timelib_time_dtor(t);

case:138
zend_declare_class_constant_stringl(date_ce_date, "RFC850", sizeof ("RFC850") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
timelib_time_dtor(t);

case:139
zend_declare_class_constant_stringl(date_ce_date, "RSS", sizeof ("RSS") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
timelib_time_dtor(t);

case:140
zend_declare_class_constant_stringl(date_ce_date, "W3C", sizeof ("W3C") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
timelib_time_dtor(t);

case:141
zend_error((1 << 0L), "An iterator cannot be used with foreach by reference");
timelib_time_dtor(t);

case:142
zend_error((1 << 3L), "A non well formed numeric value encountered");
timelib_time_dtor(t);

case:143
zend_hash_destroy((date_globals.tzcache));
timelib_time_dtor(t);

switch:9
case:1
((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
t = timelib_time_ctor();

case:2
(date_globals.last_errors) = ((void *)0);
t = timelib_time_ctor();

case:3
(date_globals.timezone) = ((void *)0);
t = timelib_time_ctor();

case:4
(date_globals.timezone) = _estrndup((zone), (zone_len), "ext/date/php_date.c", 3945, ((void *)0), 0);
t = timelib_time_ctor();

case:5
(date_globals.tzcache) = ((void *)0);
t = timelib_time_ctor();

case:6
(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16));
t = timelib_time_ctor();

case:7
(offset) = timelib_get_time_zone_info(t->sse, t->tz_info);
t = timelib_time_ctor();

case:8
(offset) = timelib_time_offset_ctor();
t = timelib_time_ctor();

case:9
(offset)->abbr = malloc(9);
t = timelib_time_ctor();

case:10
(offset)->abbr = strdup(t->tz_abbr);
t = timelib_time_ctor();

case:11
(offset)->is_dst = t->dst;
t = timelib_time_ctor();

case:12
(offset)->leap_secs = 0;
t = timelib_time_ctor();

case:13
(offset)->offset = (t->z - (t->dst * 60)) * -60;
t = timelib_time_ctor();

case:14
(t) = timelib_time_ctor();

case:15
(t) = timelib_time_ctor();
t = timelib_time_ctor();

case:16
(t)->tz_info = tzi;
t = timelib_time_ctor();

case:17
(t)->zone_type = 3;
t = timelib_time_ctor();

case:18
(tzi) = ((void *)0);
t = timelib_time_ctor();

case:19
(tzi) = get_timezone_info();
t = timelib_time_ctor();

case:20
_efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
t = timelib_time_ctor();

case:21
_efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
t = timelib_time_ctor();

case:22
_efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
t = timelib_time_ctor();

case:23
_efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
t = timelib_time_ctor();

case:24
_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
t = timelib_time_ctor();

case:25
ap_php_snprintf((offset)->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
t = timelib_time_ctor();

case:26
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? (((offset)->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
t = timelib_time_ctor();

case:27
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs((offset)->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
t = timelib_time_ctor();

case:28
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs(((offset)->offset % 3600) / 60) : 0);
t = timelib_time_ctor();

case:29
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
t = timelib_time_ctor();

case:30
date_ce_period->get_iterator = date_object_period_get_iterator;
t = timelib_time_ctor();

case:31
date_ce_period->iterator_funcs.funcs = &date_period_it_funcs;
t = timelib_time_ctor();

case:32
date_object_handlers_date.clone_obj = date_object_clone_date;
t = timelib_time_ctor();

case:33
date_object_handlers_date.compare_objects = date_object_compare_date;
t = timelib_time_ctor();

case:34
date_object_handlers_date.get_properties = date_object_get_properties;
t = timelib_time_ctor();

case:35
date_object_handlers_interval.clone_obj = date_object_clone_interval;
t = timelib_time_ctor();

case:36
date_object_handlers_interval.get_properties = date_object_get_properties_interval;
t = timelib_time_ctor();

case:37
date_object_handlers_interval.get_property_ptr_ptr = ((void *)0);
t = timelib_time_ctor();

case:38
date_object_handlers_interval.read_property = date_interval_read_property;
t = timelib_time_ctor();

case:39
date_object_handlers_interval.write_property = date_interval_write_property;
t = timelib_time_ctor();

case:40
date_object_handlers_period.clone_obj = date_object_clone_period;
t = timelib_time_ctor();

case:41
date_object_handlers_timezone.clone_obj = date_object_clone_timezone;
t = timelib_time_ctor();

case:42
date_register_classes();
t = timelib_time_ctor();

case:43
exit(1);
t = timelib_time_ctor();

case:44
if (!(date_globals.tzcache)) {
    ((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
    _zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
}
t = timelib_time_ctor();

case:45
if (!localtime) {
    timelib_time_offset_dtor(offset);
}
t = timelib_time_ctor();

case:46
if (!localtime) {
    tzi = get_timezone_info();
    t->tz_info = tzi;
    t->zone_type = 3;
    timelib_unixtime2local(t, ts);
} else {
    tzi = ((void *)0);
    timelib_unixtime2gmt(t, ts);
}
t = timelib_time_ctor();

case:47
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
    (date_globals.last_errors) = ((void *)0);
}
t = timelib_time_ctor();

case:48
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
}
t = timelib_time_ctor();

case:49
if ((date_globals.timezone) && (strlen((date_globals.timezone)) > 0)) {
    return (date_globals.timezone);
}
t = timelib_time_ctor();

case:50
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
    (date_globals.timezone) = ((void *)0);
}
t = timelib_time_ctor();

case:51
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
}
t = timelib_time_ctor();

case:52
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
}
t = timelib_time_ctor();

case:53
if ((date_globals.tzcache)) {
    zend_hash_destroy((date_globals.tzcache));
    _efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
    (date_globals.tzcache) = ((void *)0);
}
t = timelib_time_ctor();

case:54
if (t->zone_type == 1) {
    offset = timelib_time_offset_ctor();
    offset->offset = (t->z - (t->dst * 60)) * -60;
    offset->leap_secs = 0;
    offset->is_dst = t->dst;
    offset->abbr = malloc(9);
    ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
} else {
    offset = timelib_get_time_zone_info(t->sse, t->tz_info);
}
t = timelib_time_ctor();

case:55
memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
t = timelib_time_ctor();

case:56
memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
t = timelib_time_ctor();

case:57
memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
t = timelib_time_ctor();

case:58
memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
t = timelib_time_ctor();

case:59
memset(t, 0, sizeof (*(t)));
t = timelib_time_ctor();

case:60
offset = timelib_get_time_zone_info((t)->sse, t->tz_info);
t = timelib_time_ctor();

case:61
offset = timelib_get_time_zone_info(t->sse, (t)->tz_info);
t = timelib_time_ctor();

case:62
offset = timelib_get_time_zone_info(t->sse, t->tz_info);
t = timelib_time_ctor();

case:63
offset = timelib_time_offset_ctor();
t = timelib_time_ctor();

case:64
offset->abbr = malloc(9);
t = timelib_time_ctor();

case:65
offset->abbr = strdup((t)->tz_abbr);
t = timelib_time_ctor();

case:66
offset->abbr = strdup(t->tz_abbr);
t = timelib_time_ctor();

case:67
offset->is_dst = (t)->dst;
t = timelib_time_ctor();

case:68
offset->is_dst = t->dst;
t = timelib_time_ctor();

case:69
offset->leap_secs = 0;
t = timelib_time_ctor();

case:70
offset->offset = ((t)->z - (t->dst * 60)) * -60;
t = timelib_time_ctor();

case:71
offset->offset = (t->z - ((t)->dst * 60)) * -60;
t = timelib_time_ctor();

case:72
offset->offset = (t->z - (t->dst * 60)) * -60;
t = timelib_time_ctor();

case:73
php_date_global_timezone_db = ((void *)0);
t = timelib_time_ctor();

case:74
php_date_global_timezone_db_enabled = 0;
t = timelib_time_ctor();

case:75
php_date_global_timezone_db_enabled = 1;
t = timelib_time_ctor();

case:76
php_error_docref0(((void *)0), (1 << 0L), "Timezone database is corrupt - this should *never* happen!");
t = timelib_time_ctor();

case:77
php_error_docref0(((void *)0), (1 << 13L), "The is_dst parameter is deprecated");
t = timelib_time_ctor();

case:78
php_error_docref0(((void *)0), (1 << 1L), "Can only do this for zones with ID for now");
t = timelib_time_ctor();

case:79
php_error_docref0(((void *)0), (1 << 1L), "It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm");
t = timelib_time_ctor();

case:80
php_error_docref0(((void *)0), (1 << 1L), "Only non-special relative time specifications are supported for subtraction");
t = timelib_time_ctor();

case:81
php_error_docref0(((void *)0), (1 << 1L), "The DateInterval object has not been correctly initialized by its constructor");
t = timelib_time_ctor();

case:82
php_error_docref0(((void *)0), (1 << 1L), "The DateTime object has not been correctly initialized by its constructor");
t = timelib_time_ctor();

case:83
php_error_docref0(((void *)0), (1 << 1L), "The DateTimeZone object has not been correctly initialized by its constructor");
t = timelib_time_ctor();

case:84
php_error_docref0(((void *)0), (1 << 1L), "This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.");
t = timelib_time_ctor();

case:85
php_error_docref0(((void *)0), (1 << 1L), "Unrecognized date format token.");
t = timelib_time_ctor();

case:86
php_error_docref0(((void *)0), (1 << 1L), "Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE");
t = timelib_time_ctor();

case:87
php_error_docref0(((void *)0), (1 << 1L), "idate format is one char");
t = timelib_time_ctor();

case:88
php_error_docref0(((void *)0), (1 << 3L), "A two-letter ISO 3166-1 compatible country code is expected");
t = timelib_time_ctor();

case:89
php_info_print_table_end();
t = timelib_time_ctor();

case:90
php_info_print_table_row(2, "Timezone Database", php_date_global_timezone_db_enabled ? "external" : "internal");
t = timelib_time_ctor();

case:91
php_info_print_table_row(2, "date/time support", "enabled");
t = timelib_time_ctor();

case:92
php_info_print_table_start();
t = timelib_time_ctor();

case:93
retval = retval % 1000;
t = timelib_time_ctor();

case:94
t = timelib_time_ctor();
t = timelib_time_ctor();

case:95
t->tz_info = (tzi);
t = timelib_time_ctor();

case:96
t->tz_info = tzi;
t = timelib_time_ctor();

case:97
t->zone_type = 3;
t = timelib_time_ctor();

case:98
timelib_error_container_dtor((date_globals.last_errors));
t = timelib_time_ctor();

case:99
timelib_isoweek_from_date((t)->y, t->m, t->d, &isoweek, &isoyear);
t = timelib_time_ctor();

case:100
timelib_isoweek_from_date(t->y, (t)->m, t->d, &isoweek, &isoyear);
t = timelib_time_ctor();

case:101
timelib_isoweek_from_date(t->y, t->m, (t)->d, &isoweek, &isoyear);
t = timelib_time_ctor();

case:102
timelib_isoweek_from_date(t->y, t->m, t->d, &isoweek, &isoyear);
t = timelib_time_ctor();

case:103
timelib_time_dtor((t));
t = timelib_time_ctor();

case:104
timelib_time_dtor(t);
t = timelib_time_ctor();

case:105
timelib_time_offset_dtor((offset));
t = timelib_time_ctor();

case:106
timelib_time_offset_dtor(offset);
t = timelib_time_ctor();

case:107
timelib_unixtime2gmt((t), (timelib_sll)time(((void *)0)));
t = timelib_time_ctor();

case:108
timelib_unixtime2gmt((t), ts);
t = timelib_time_ctor();

case:109
timelib_unixtime2gmt(t, ts);
t = timelib_time_ctor();

case:110
timelib_unixtime2local((t), (timelib_sll)time(((void *)0)));
t = timelib_time_ctor();

case:111
timelib_unixtime2local((t), ts);
t = timelib_time_ctor();

case:112
timelib_unixtime2local(t, ts);
t = timelib_time_ctor();

case:113
timelib_update_from_sse((t));
t = timelib_time_ctor();

case:114
timelib_update_ts((t), ((void *)0));
t = timelib_time_ctor();

case:115
tzi = ((void *)0);
t = timelib_time_ctor();

case:116
tzi = get_timezone_info();
t = timelib_time_ctor();

case:117
zend_class_implements(date_ce_period, 1, zend_ce_traversable);
t = timelib_time_ctor();

case:118
zend_declare_class_constant_long(date_ce_period, "EXCLUDE_START_DATE", sizeof ("EXCLUDE_START_DATE") - 1, 1);
t = timelib_time_ctor();

case:119
zend_declare_class_constant_long(date_ce_timezone, "AFRICA", sizeof ("AFRICA") - 1, 1);
t = timelib_time_ctor();

case:120
zend_declare_class_constant_long(date_ce_timezone, "ALL", sizeof ("ALL") - 1, 2047);
t = timelib_time_ctor();

case:121
zend_declare_class_constant_long(date_ce_timezone, "ALL_WITH_BC", sizeof ("ALL_WITH_BC") - 1, 4095);
t = timelib_time_ctor();

case:122
zend_declare_class_constant_long(date_ce_timezone, "AMERICA", sizeof ("AMERICA") - 1, 2);
t = timelib_time_ctor();

case:123
zend_declare_class_constant_long(date_ce_timezone, "ANTARCTICA", sizeof ("ANTARCTICA") - 1, 4);
t = timelib_time_ctor();

case:124
zend_declare_class_constant_long(date_ce_timezone, "ARCTIC", sizeof ("ARCTIC") - 1, 8);
t = timelib_time_ctor();

case:125
zend_declare_class_constant_long(date_ce_timezone, "ASIA", sizeof ("ASIA") - 1, 16);
t = timelib_time_ctor();

case:126
zend_declare_class_constant_long(date_ce_timezone, "ATLANTIC", sizeof ("ATLANTIC") - 1, 32);
t = timelib_time_ctor();

case:127
zend_declare_class_constant_long(date_ce_timezone, "AUSTRALIA", sizeof ("AUSTRALIA") - 1, 64);
t = timelib_time_ctor();

case:128
zend_declare_class_constant_long(date_ce_timezone, "EUROPE", sizeof ("EUROPE") - 1, 128);
t = timelib_time_ctor();

case:129
zend_declare_class_constant_long(date_ce_timezone, "INDIAN", sizeof ("INDIAN") - 1, 256);
t = timelib_time_ctor();

case:130
zend_declare_class_constant_long(date_ce_timezone, "PACIFIC", sizeof ("PACIFIC") - 1, 512);
t = timelib_time_ctor();

case:131
zend_declare_class_constant_long(date_ce_timezone, "PER_COUNTRY", sizeof ("PER_COUNTRY") - 1, 4096);
t = timelib_time_ctor();

case:132
zend_declare_class_constant_long(date_ce_timezone, "UTC", sizeof ("UTC") - 1, 1024);
t = timelib_time_ctor();

case:133
zend_declare_class_constant_stringl(date_ce_date, "ATOM", sizeof ("ATOM") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
t = timelib_time_ctor();

case:134
zend_declare_class_constant_stringl(date_ce_date, "COOKIE", sizeof ("COOKIE") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
t = timelib_time_ctor();

case:135
zend_declare_class_constant_stringl(date_ce_date, "ISO8601", sizeof ("ISO8601") - 1, "Y-m-d\\TH:i:sO", sizeof ("Y-m-d\\TH:i:sO") - 1);
t = timelib_time_ctor();

case:136
zend_declare_class_constant_stringl(date_ce_date, "RFC1036", sizeof ("RFC1036") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
t = timelib_time_ctor();

case:137
zend_declare_class_constant_stringl(date_ce_date, "RFC1123", sizeof ("RFC1123") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
t = timelib_time_ctor();

case:138
zend_declare_class_constant_stringl(date_ce_date, "RFC2822", sizeof ("RFC2822") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
t = timelib_time_ctor();

case:139
zend_declare_class_constant_stringl(date_ce_date, "RFC3339", sizeof ("RFC3339") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
t = timelib_time_ctor();

case:140
zend_declare_class_constant_stringl(date_ce_date, "RFC822", sizeof ("RFC822") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
t = timelib_time_ctor();

case:141
zend_declare_class_constant_stringl(date_ce_date, "RFC850", sizeof ("RFC850") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
t = timelib_time_ctor();

case:142
zend_declare_class_constant_stringl(date_ce_date, "RSS", sizeof ("RSS") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
t = timelib_time_ctor();

case:143
zend_declare_class_constant_stringl(date_ce_date, "W3C", sizeof ("W3C") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
t = timelib_time_ctor();

case:144
zend_error((1 << 0L), "An iterator cannot be used with foreach by reference");
t = timelib_time_ctor();

case:145
zend_error((1 << 3L), "A non well formed numeric value encountered");
t = timelib_time_ctor();

case:146
zend_hash_destroy((date_globals.tzcache));
t = timelib_time_ctor();

switch:10
case:1
((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:2
(date_globals.last_errors) = ((void *)0);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:3
(date_globals.timezone) = ((void *)0);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:4
(date_globals.timezone) = _estrndup((zone), (zone_len), "ext/date/php_date.c", 3945, ((void *)0), 0);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:5
(date_globals.tzcache) = ((void *)0);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:6
(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16));
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:7
(offset) = timelib_get_time_zone_info(t->sse, t->tz_info);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:8
(offset) = timelib_time_offset_ctor();
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:9
(offset)->abbr = malloc(9);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:10
(offset)->abbr = strdup(t->tz_abbr);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:11
(offset)->is_dst = t->dst;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:12
(offset)->leap_secs = 0;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:13
(offset)->offset = (t->z - (t->dst * 60)) * -60;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:14
(t) = timelib_time_ctor();
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:15
(t)->tz_info = tzi;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:16
(t)->zone_type = 3;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:17
(tzi) = ((void *)0);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:18
(tzi) = get_timezone_info();
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:19
_efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:20
_efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:21
_efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:22
_efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:23
_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:24
ap_php_snprintf((offset)->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:25
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? (((offset)->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:26
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs((offset)->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:27
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs(((offset)->offset % 3600) / 60) : 0);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:28
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:29
date_ce_period->get_iterator = date_object_period_get_iterator;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:30
date_ce_period->iterator_funcs.funcs = &date_period_it_funcs;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:31
date_object_handlers_date.clone_obj = date_object_clone_date;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:32
date_object_handlers_date.compare_objects = date_object_compare_date;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:33
date_object_handlers_date.get_properties = date_object_get_properties;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:34
date_object_handlers_interval.clone_obj = date_object_clone_interval;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:35
date_object_handlers_interval.get_properties = date_object_get_properties_interval;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:36
date_object_handlers_interval.get_property_ptr_ptr = ((void *)0);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:37
date_object_handlers_interval.read_property = date_interval_read_property;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:38
date_object_handlers_interval.write_property = date_interval_write_property;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:39
date_object_handlers_period.clone_obj = date_object_clone_period;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:40
date_object_handlers_timezone.clone_obj = date_object_clone_timezone;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:41
date_register_classes();
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:42
exit(1);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:43
if (!(date_globals.tzcache)) {
    ((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
    _zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
}
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:44
if (!localtime) {
    timelib_time_offset_dtor(offset);
}
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:45
if (!localtime) {
    tzi = get_timezone_info();
    t->tz_info = tzi;
    t->zone_type = 3;
    timelib_unixtime2local(t, ts);
} else {
    tzi = ((void *)0);
    timelib_unixtime2gmt(t, ts);
}
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:46
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
    (date_globals.last_errors) = ((void *)0);
}
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:47
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
}
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:48
if ((date_globals.timezone) && (strlen((date_globals.timezone)) > 0)) {
    return (date_globals.timezone);
}
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:49
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
    (date_globals.timezone) = ((void *)0);
}
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:50
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
}
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:51
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
}
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:52
if ((date_globals.tzcache)) {
    zend_hash_destroy((date_globals.tzcache));
    _efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
    (date_globals.tzcache) = ((void *)0);
}
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:53
if (t->zone_type == 1) {
    offset = timelib_time_offset_ctor();
    offset->offset = (t->z - (t->dst * 60)) * -60;
    offset->leap_secs = 0;
    offset->is_dst = t->dst;
    offset->abbr = malloc(9);
    ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
} else {
    offset = timelib_get_time_zone_info(t->sse, t->tz_info);
}
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:54
memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:55
memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:56
memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:57
memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:58
memset(t, 0, sizeof (*(t)));
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:59
offset = timelib_get_time_zone_info((t)->sse, t->tz_info);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:60
offset = timelib_get_time_zone_info(t->sse, (t)->tz_info);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:61
offset = timelib_get_time_zone_info(t->sse, t->tz_info);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:62
offset = timelib_time_offset_ctor();
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:63
offset->abbr = malloc(9);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:64
offset->abbr = strdup((t)->tz_abbr);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:65
offset->abbr = strdup(t->tz_abbr);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:66
offset->is_dst = (t)->dst;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:67
offset->is_dst = t->dst;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:68
offset->leap_secs = 0;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:69
offset->offset = ((t)->z - (t->dst * 60)) * -60;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:70
offset->offset = (t->z - ((t)->dst * 60)) * -60;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:71
offset->offset = (t->z - (t->dst * 60)) * -60;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:72
php_date_global_timezone_db = ((void *)0);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:73
php_date_global_timezone_db_enabled = 0;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:74
php_date_global_timezone_db_enabled = 1;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:75
php_error_docref0(((void *)0), (1 << 0L), "Timezone database is corrupt - this should *never* happen!");
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:76
php_error_docref0(((void *)0), (1 << 13L), "The is_dst parameter is deprecated");
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:77
php_error_docref0(((void *)0), (1 << 1L), "Can only do this for zones with ID for now");
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:78
php_error_docref0(((void *)0), (1 << 1L), "It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm");
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:79
php_error_docref0(((void *)0), (1 << 1L), "Only non-special relative time specifications are supported for subtraction");
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:80
php_error_docref0(((void *)0), (1 << 1L), "The DateInterval object has not been correctly initialized by its constructor");
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:81
php_error_docref0(((void *)0), (1 << 1L), "The DateTime object has not been correctly initialized by its constructor");
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:82
php_error_docref0(((void *)0), (1 << 1L), "The DateTimeZone object has not been correctly initialized by its constructor");
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:83
php_error_docref0(((void *)0), (1 << 1L), "This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.");
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:84
php_error_docref0(((void *)0), (1 << 1L), "Unrecognized date format token.");
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:85
php_error_docref0(((void *)0), (1 << 1L), "Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE");
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:86
php_error_docref0(((void *)0), (1 << 1L), "idate format is one char");
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:87
php_error_docref0(((void *)0), (1 << 3L), "A two-letter ISO 3166-1 compatible country code is expected");
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:88
php_info_print_table_end();
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:89
php_info_print_table_row(2, "Timezone Database", php_date_global_timezone_db_enabled ? "external" : "internal");
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:90
php_info_print_table_row(2, "date/time support", "enabled");
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:91
php_info_print_table_start();
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:92
retval = retval % 1000;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:93
t = timelib_time_ctor();
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:94
t->tz_info = (tzi);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:95
t->tz_info = tzi;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:96
t->zone_type = 3;
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:97
timelib_error_container_dtor((date_globals.last_errors));
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:98
timelib_isoweek_from_date((t)->y, t->m, t->d, &isoweek, &isoyear);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:99
timelib_isoweek_from_date(t->y, (t)->m, t->d, &isoweek, &isoyear);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:100
timelib_isoweek_from_date(t->y, t->m, (t)->d, &isoweek, &isoyear);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:101
timelib_isoweek_from_date(t->y, t->m, t->d, &isoweek, &isoyear);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:102
timelib_time_dtor((t));
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:103
timelib_time_dtor(t);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:104
timelib_time_offset_dtor((offset));
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:105
timelib_time_offset_dtor(offset);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:106
timelib_unixtime2gmt((t), (timelib_sll)time(((void *)0)));
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:107
timelib_unixtime2gmt((t), ts);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:108
timelib_unixtime2gmt(t, ts);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:109
timelib_unixtime2local((t), (timelib_sll)time(((void *)0)));
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:110
timelib_unixtime2local((t), ts);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:111
timelib_unixtime2local(t, ts);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:112
timelib_update_from_sse((t));
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:113
timelib_update_ts((t), ((void *)0));
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:114
tzi = ((void *)0);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:115
tzi = get_timezone_info();
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:116
zend_class_implements(date_ce_period, 1, zend_ce_traversable);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:117
zend_declare_class_constant_long(date_ce_period, "EXCLUDE_START_DATE", sizeof ("EXCLUDE_START_DATE") - 1, 1);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:118
zend_declare_class_constant_long(date_ce_timezone, "AFRICA", sizeof ("AFRICA") - 1, 1);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:119
zend_declare_class_constant_long(date_ce_timezone, "ALL", sizeof ("ALL") - 1, 2047);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:120
zend_declare_class_constant_long(date_ce_timezone, "ALL_WITH_BC", sizeof ("ALL_WITH_BC") - 1, 4095);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:121
zend_declare_class_constant_long(date_ce_timezone, "AMERICA", sizeof ("AMERICA") - 1, 2);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:122
zend_declare_class_constant_long(date_ce_timezone, "ANTARCTICA", sizeof ("ANTARCTICA") - 1, 4);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:123
zend_declare_class_constant_long(date_ce_timezone, "ARCTIC", sizeof ("ARCTIC") - 1, 8);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:124
zend_declare_class_constant_long(date_ce_timezone, "ASIA", sizeof ("ASIA") - 1, 16);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:125
zend_declare_class_constant_long(date_ce_timezone, "ATLANTIC", sizeof ("ATLANTIC") - 1, 32);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:126
zend_declare_class_constant_long(date_ce_timezone, "AUSTRALIA", sizeof ("AUSTRALIA") - 1, 64);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:127
zend_declare_class_constant_long(date_ce_timezone, "EUROPE", sizeof ("EUROPE") - 1, 128);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:128
zend_declare_class_constant_long(date_ce_timezone, "INDIAN", sizeof ("INDIAN") - 1, 256);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:129
zend_declare_class_constant_long(date_ce_timezone, "PACIFIC", sizeof ("PACIFIC") - 1, 512);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:130
zend_declare_class_constant_long(date_ce_timezone, "PER_COUNTRY", sizeof ("PER_COUNTRY") - 1, 4096);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:131
zend_declare_class_constant_long(date_ce_timezone, "UTC", sizeof ("UTC") - 1, 1024);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:132
zend_declare_class_constant_stringl(date_ce_date, "ATOM", sizeof ("ATOM") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:133
zend_declare_class_constant_stringl(date_ce_date, "COOKIE", sizeof ("COOKIE") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:134
zend_declare_class_constant_stringl(date_ce_date, "ISO8601", sizeof ("ISO8601") - 1, "Y-m-d\\TH:i:sO", sizeof ("Y-m-d\\TH:i:sO") - 1);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:135
zend_declare_class_constant_stringl(date_ce_date, "RFC1036", sizeof ("RFC1036") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:136
zend_declare_class_constant_stringl(date_ce_date, "RFC1123", sizeof ("RFC1123") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:137
zend_declare_class_constant_stringl(date_ce_date, "RFC2822", sizeof ("RFC2822") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:138
zend_declare_class_constant_stringl(date_ce_date, "RFC3339", sizeof ("RFC3339") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:139
zend_declare_class_constant_stringl(date_ce_date, "RFC822", sizeof ("RFC822") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:140
zend_declare_class_constant_stringl(date_ce_date, "RFC850", sizeof ("RFC850") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:141
zend_declare_class_constant_stringl(date_ce_date, "RSS", sizeof ("RSS") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:142
zend_declare_class_constant_stringl(date_ce_date, "W3C", sizeof ("W3C") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:143
zend_error((1 << 0L), "An iterator cannot be used with foreach by reference");
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:144
zend_error((1 << 3L), "A non well formed numeric value encountered");
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

case:145
zend_hash_destroy((date_globals.tzcache));
if (!localtime) {
		tzi = get_timezone_info(TSRMLS_C);
		t->tz_info = tzi;
		t->zone_type = TIMELIB_ZONETYPE_ID;
		timelib_unixtime2local(t, ts);
	} else {
		tzi = NULL;
		timelib_unixtime2gmt(t, ts);
	}

switch:11
case:1
((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:2
(date_globals.last_errors) = ((void *)0);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:3
(date_globals.timezone) = ((void *)0);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:4
(date_globals.timezone) = _estrndup((zone), (zone_len), "ext/date/php_date.c", 3945, ((void *)0), 0);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:5
(date_globals.tzcache) = ((void *)0);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:6
(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16));
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:7
(offset) = timelib_get_time_zone_info(t->sse, t->tz_info);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:8
(offset) = timelib_time_offset_ctor();
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:9
(offset)->abbr = malloc(9);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:10
(offset)->abbr = strdup(t->tz_abbr);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:11
(offset)->is_dst = t->dst;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:12
(offset)->leap_secs = 0;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:13
(offset)->offset = (t->z - (t->dst * 60)) * -60;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:14
(t) = timelib_time_ctor();
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:15
(t)->tz_info = tzi;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:16
(t)->zone_type = 3;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:17
(tzi) = ((void *)0);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:18
(tzi) = get_timezone_info();
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:19
_efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:20
_efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:21
_efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:22
_efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:23
_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:24
ap_php_snprintf((offset)->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:25
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? (((offset)->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:26
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs((offset)->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:27
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs(((offset)->offset % 3600) / 60) : 0);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:28
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:29
date_ce_period->get_iterator = date_object_period_get_iterator;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:30
date_ce_period->iterator_funcs.funcs = &date_period_it_funcs;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:31
date_object_handlers_date.clone_obj = date_object_clone_date;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:32
date_object_handlers_date.compare_objects = date_object_compare_date;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:33
date_object_handlers_date.get_properties = date_object_get_properties;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:34
date_object_handlers_interval.clone_obj = date_object_clone_interval;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:35
date_object_handlers_interval.get_properties = date_object_get_properties_interval;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:36
date_object_handlers_interval.get_property_ptr_ptr = ((void *)0);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:37
date_object_handlers_interval.read_property = date_interval_read_property;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:38
date_object_handlers_interval.write_property = date_interval_write_property;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:39
date_object_handlers_period.clone_obj = date_object_clone_period;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:40
date_object_handlers_timezone.clone_obj = date_object_clone_timezone;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:41
date_register_classes();
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:42
exit(1);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:43
if (!(date_globals.tzcache)) {
    ((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
    _zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
}
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:44
if (!localtime) {
    timelib_time_offset_dtor(offset);
}
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:45
if (!localtime) {
    tzi = get_timezone_info();
    t->tz_info = tzi;
    t->zone_type = 3;
    timelib_unixtime2local(t, ts);
} else {
    tzi = ((void *)0);
    timelib_unixtime2gmt(t, ts);
}
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:46
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
    (date_globals.last_errors) = ((void *)0);
}
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:47
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
}
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:48
if ((date_globals.timezone) && (strlen((date_globals.timezone)) > 0)) {
    return (date_globals.timezone);
}
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:49
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
    (date_globals.timezone) = ((void *)0);
}
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:50
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
}
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:51
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
}
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:52
if ((date_globals.tzcache)) {
    zend_hash_destroy((date_globals.tzcache));
    _efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
    (date_globals.tzcache) = ((void *)0);
}
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:53
if (t->zone_type == 1) {
    offset = timelib_time_offset_ctor();
    offset->offset = (t->z - (t->dst * 60)) * -60;
    offset->leap_secs = 0;
    offset->is_dst = t->dst;
    offset->abbr = malloc(9);
    ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
} else {
    offset = timelib_get_time_zone_info(t->sse, t->tz_info);
}
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:54
memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:55
memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:56
memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:57
memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:58
memset(offset, 0, sizeof (*(offset)));
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:59
memset(t, 0, sizeof (*(t)));
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:60
offset = timelib_get_time_zone_info((t)->sse, t->tz_info);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:61
offset = timelib_get_time_zone_info(t->sse, (t)->tz_info);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:62
offset = timelib_get_time_zone_info(t->sse, t->tz_info);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:63
offset = timelib_time_offset_ctor();
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:64
offset->abbr = malloc(9);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:65
offset->abbr = strdup((t)->tz_abbr);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:66
offset->abbr = strdup(t->tz_abbr);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:67
offset->is_dst = (t)->dst;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:68
offset->is_dst = t->dst;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:69
offset->leap_secs = 0;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:70
offset->offset = ((t)->z - (t->dst * 60)) * -60;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:71
offset->offset = (t->z - ((t)->dst * 60)) * -60;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:72
offset->offset = (t->z - (t->dst * 60)) * -60;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:73
php_date_global_timezone_db = ((void *)0);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:74
php_date_global_timezone_db_enabled = 0;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:75
php_date_global_timezone_db_enabled = 1;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:76
php_error_docref0(((void *)0), (1 << 0L), "Timezone database is corrupt - this should *never* happen!");
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:77
php_error_docref0(((void *)0), (1 << 13L), "The is_dst parameter is deprecated");
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:78
php_error_docref0(((void *)0), (1 << 1L), "Can only do this for zones with ID for now");
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:79
php_error_docref0(((void *)0), (1 << 1L), "It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm");
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:80
php_error_docref0(((void *)0), (1 << 1L), "Only non-special relative time specifications are supported for subtraction");
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:81
php_error_docref0(((void *)0), (1 << 1L), "The DateInterval object has not been correctly initialized by its constructor");
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:82
php_error_docref0(((void *)0), (1 << 1L), "The DateTime object has not been correctly initialized by its constructor");
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:83
php_error_docref0(((void *)0), (1 << 1L), "The DateTimeZone object has not been correctly initialized by its constructor");
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:84
php_error_docref0(((void *)0), (1 << 1L), "This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.");
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:85
php_error_docref0(((void *)0), (1 << 1L), "Unrecognized date format token.");
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:86
php_error_docref0(((void *)0), (1 << 1L), "Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE");
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:87
php_error_docref0(((void *)0), (1 << 1L), "idate format is one char");
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:88
php_error_docref0(((void *)0), (1 << 3L), "A two-letter ISO 3166-1 compatible country code is expected");
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:89
php_info_print_table_end();
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:90
php_info_print_table_row(2, "Timezone Database", php_date_global_timezone_db_enabled ? "external" : "internal");
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:91
php_info_print_table_row(2, "date/time support", "enabled");
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:92
php_info_print_table_start();
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:93
retval = retval % 1000;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:94
t = timelib_time_ctor();
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:95
t->tz_info = (tzi);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:96
t->tz_info = tzi;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:97
t->zone_type = 3;
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:98
timelib_error_container_dtor((date_globals.last_errors));
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:99
timelib_isoweek_from_date((t)->y, t->m, t->d, &isoweek, &isoyear);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:100
timelib_isoweek_from_date(t->y, (t)->m, t->d, &isoweek, &isoyear);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:101
timelib_isoweek_from_date(t->y, t->m, (t)->d, &isoweek, &isoyear);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:102
timelib_isoweek_from_date(t->y, t->m, t->d, &isoweek, &isoyear);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:103
timelib_time_dtor((t));
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:104
timelib_time_dtor(t);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:105
timelib_time_offset_dtor((offset));
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:106
timelib_time_offset_dtor(offset);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:107
timelib_unixtime2gmt((t), (timelib_sll)time(((void *)0)));
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:108
timelib_unixtime2gmt((t), ts);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:109
timelib_unixtime2gmt(t, ts);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:110
timelib_unixtime2local((t), (timelib_sll)time(((void *)0)));
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:111
timelib_unixtime2local((t), ts);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:112
timelib_unixtime2local(t, ts);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:113
timelib_update_from_sse((t));
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:114
timelib_update_ts((t), ((void *)0));
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:115
tzi = ((void *)0);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:116
tzi = get_timezone_info();
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:117
zend_class_implements(date_ce_period, 1, zend_ce_traversable);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:118
zend_declare_class_constant_long(date_ce_period, "EXCLUDE_START_DATE", sizeof ("EXCLUDE_START_DATE") - 1, 1);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:119
zend_declare_class_constant_long(date_ce_timezone, "AFRICA", sizeof ("AFRICA") - 1, 1);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:120
zend_declare_class_constant_long(date_ce_timezone, "ALL", sizeof ("ALL") - 1, 2047);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:121
zend_declare_class_constant_long(date_ce_timezone, "ALL_WITH_BC", sizeof ("ALL_WITH_BC") - 1, 4095);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:122
zend_declare_class_constant_long(date_ce_timezone, "AMERICA", sizeof ("AMERICA") - 1, 2);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:123
zend_declare_class_constant_long(date_ce_timezone, "ANTARCTICA", sizeof ("ANTARCTICA") - 1, 4);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:124
zend_declare_class_constant_long(date_ce_timezone, "ARCTIC", sizeof ("ARCTIC") - 1, 8);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:125
zend_declare_class_constant_long(date_ce_timezone, "ASIA", sizeof ("ASIA") - 1, 16);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:126
zend_declare_class_constant_long(date_ce_timezone, "ATLANTIC", sizeof ("ATLANTIC") - 1, 32);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:127
zend_declare_class_constant_long(date_ce_timezone, "AUSTRALIA", sizeof ("AUSTRALIA") - 1, 64);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:128
zend_declare_class_constant_long(date_ce_timezone, "EUROPE", sizeof ("EUROPE") - 1, 128);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:129
zend_declare_class_constant_long(date_ce_timezone, "INDIAN", sizeof ("INDIAN") - 1, 256);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:130
zend_declare_class_constant_long(date_ce_timezone, "PACIFIC", sizeof ("PACIFIC") - 1, 512);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:131
zend_declare_class_constant_long(date_ce_timezone, "PER_COUNTRY", sizeof ("PER_COUNTRY") - 1, 4096);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:132
zend_declare_class_constant_long(date_ce_timezone, "UTC", sizeof ("UTC") - 1, 1024);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:133
zend_declare_class_constant_stringl(date_ce_date, "ATOM", sizeof ("ATOM") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:134
zend_declare_class_constant_stringl(date_ce_date, "COOKIE", sizeof ("COOKIE") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:135
zend_declare_class_constant_stringl(date_ce_date, "ISO8601", sizeof ("ISO8601") - 1, "Y-m-d\\TH:i:sO", sizeof ("Y-m-d\\TH:i:sO") - 1);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:136
zend_declare_class_constant_stringl(date_ce_date, "RFC1036", sizeof ("RFC1036") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:137
zend_declare_class_constant_stringl(date_ce_date, "RFC1123", sizeof ("RFC1123") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:138
zend_declare_class_constant_stringl(date_ce_date, "RFC2822", sizeof ("RFC2822") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:139
zend_declare_class_constant_stringl(date_ce_date, "RFC3339", sizeof ("RFC3339") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:140
zend_declare_class_constant_stringl(date_ce_date, "RFC822", sizeof ("RFC822") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:141
zend_declare_class_constant_stringl(date_ce_date, "RFC850", sizeof ("RFC850") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:142
zend_declare_class_constant_stringl(date_ce_date, "RSS", sizeof ("RSS") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:143
zend_declare_class_constant_stringl(date_ce_date, "W3C", sizeof ("W3C") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:144
zend_error((1 << 0L), "An iterator cannot be used with foreach by reference");
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:145
zend_error((1 << 3L), "A non well formed numeric value encountered");
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

case:146
zend_hash_destroy((date_globals.tzcache));
switch (format) {
		/* day */
		case 'd': case 'j': retval = (int) t->d; break;

		case 'w': retval = (int) timelib_day_of_week(t->y, t->m, t->d); break;
		case 'z': retval = (int) timelib_day_of_year(t->y, t->m, t->d); break;

		/* week */
		case 'W': retval = (int) isoweek; break; /* iso weeknr */

		/* month */
		case 'm': case 'n': retval = (int) t->m; break;
		case 't': retval = (int) timelib_days_in_month(t->y, t->m); break;

		/* year */
		case 'L': retval = (int) timelib_is_leap((int) t->y); break;
		case 'y': retval = (int) (t->y % 100); break;
		case 'Y': retval = (int) t->y; break;

		/* Swatch Beat a.k.a. Internet Time */
		case 'B':
			retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);			
			while (retval < 0) {
				retval += 1000;
			}
			retval = retval % 1000;
			break;

		/* time */
		case 'g': case 'h': retval = (int) ((t->h % 12) ? (int) t->h % 12 : 12); break;
		case 'H': case 'G': retval = (int) t->h; break;
		case 'i': retval = (int) t->i; break;
		case 's': retval = (int) t->s; break;

		/* timezone */
		case 'I': retval = (int) (!localtime ? offset->is_dst : 0); break;
		case 'Z': retval = (int) (!localtime ? offset->offset : 0); break;

		case 'U': retval = (int) t->sse; break;
	}

switch:12
case:1
((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:2
(date_globals.last_errors) = ((void *)0);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:3
(date_globals.timezone) = ((void *)0);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:4
(date_globals.timezone) = _estrndup((zone), (zone_len), "ext/date/php_date.c", 3945, ((void *)0), 0);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:5
(date_globals.tzcache) = ((void *)0);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:6
(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16));
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:7
(offset) = timelib_get_time_zone_info(t->sse, t->tz_info);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:8
(offset) = timelib_time_offset_ctor();
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:9
(offset)->abbr = malloc(9);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:10
(offset)->abbr = strdup(t->tz_abbr);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:11
(offset)->is_dst = t->dst;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:12
(offset)->leap_secs = 0;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:13
(offset)->offset = (t->z - (t->dst * 60)) * -60;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:14
(t) = timelib_time_ctor();
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:15
(t)->tz_info = tzi;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:16
(t)->zone_type = 3;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:17
(tzi) = ((void *)0);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:18
(tzi) = get_timezone_info();
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:19
_efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:20
_efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:21
_efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:22
_efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:23
_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:24
ap_php_snprintf((offset)->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:25
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? (((offset)->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:26
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs((offset)->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:27
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs(((offset)->offset % 3600) / 60) : 0);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:28
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:29
date_ce_period->get_iterator = date_object_period_get_iterator;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:30
date_ce_period->iterator_funcs.funcs = &date_period_it_funcs;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:31
date_object_handlers_date.clone_obj = date_object_clone_date;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:32
date_object_handlers_date.compare_objects = date_object_compare_date;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:33
date_object_handlers_date.get_properties = date_object_get_properties;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:34
date_object_handlers_interval.clone_obj = date_object_clone_interval;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:35
date_object_handlers_interval.get_properties = date_object_get_properties_interval;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:36
date_object_handlers_interval.get_property_ptr_ptr = ((void *)0);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:37
date_object_handlers_interval.read_property = date_interval_read_property;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:38
date_object_handlers_interval.write_property = date_interval_write_property;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:39
date_object_handlers_period.clone_obj = date_object_clone_period;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:40
date_object_handlers_timezone.clone_obj = date_object_clone_timezone;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:41
date_register_classes();
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:42
exit(1);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:43
if (!(date_globals.tzcache)) {
    ((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
    _zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
}
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:44
if (!localtime) {
    timelib_time_offset_dtor(offset);
}
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:45
if (!localtime) {
    tzi = get_timezone_info();
    t->tz_info = tzi;
    t->zone_type = 3;
    timelib_unixtime2local(t, ts);
} else {
    tzi = ((void *)0);
    timelib_unixtime2gmt(t, ts);
}
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:46
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
    (date_globals.last_errors) = ((void *)0);
}
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:47
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
}
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:48
if ((date_globals.timezone) && (strlen((date_globals.timezone)) > 0)) {
    return (date_globals.timezone);
}
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:49
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
    (date_globals.timezone) = ((void *)0);
}
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:50
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
}
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:51
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
}
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:52
if ((date_globals.tzcache)) {
    zend_hash_destroy((date_globals.tzcache));
    _efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
    (date_globals.tzcache) = ((void *)0);
}
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:53
if (t->zone_type == 1) {
    offset = timelib_time_offset_ctor();
    offset->offset = (t->z - (t->dst * 60)) * -60;
    offset->leap_secs = 0;
    offset->is_dst = t->dst;
    offset->abbr = malloc(9);
    ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
} else {
    offset = timelib_get_time_zone_info(t->sse, t->tz_info);
}
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:54
memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:55
memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:56
memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:57
memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:58
memset(offset, 0, sizeof (*(offset)));
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:59
offset = timelib_get_time_zone_info((t)->sse, t->tz_info);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:60
offset = timelib_get_time_zone_info(t->sse, (t)->tz_info);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:61
offset = timelib_get_time_zone_info(t->sse, t->tz_info);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:62
offset = timelib_time_offset_ctor();
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:63
offset->abbr = malloc(9);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:64
offset->abbr = strdup((t)->tz_abbr);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:65
offset->abbr = strdup(t->tz_abbr);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:66
offset->is_dst = (t)->dst;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:67
offset->is_dst = t->dst;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:68
offset->leap_secs = 0;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:69
offset->offset = ((t)->z - (t->dst * 60)) * -60;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:70
offset->offset = (t->z - ((t)->dst * 60)) * -60;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:71
offset->offset = (t->z - (t->dst * 60)) * -60;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:72
php_date_global_timezone_db = ((void *)0);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:73
php_date_global_timezone_db_enabled = 0;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:74
php_date_global_timezone_db_enabled = 1;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:75
php_error_docref0(((void *)0), (1 << 0L), "Timezone database is corrupt - this should *never* happen!");
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:76
php_error_docref0(((void *)0), (1 << 13L), "The is_dst parameter is deprecated");
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:77
php_error_docref0(((void *)0), (1 << 1L), "Can only do this for zones with ID for now");
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:78
php_error_docref0(((void *)0), (1 << 1L), "It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm");
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:79
php_error_docref0(((void *)0), (1 << 1L), "Only non-special relative time specifications are supported for subtraction");
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:80
php_error_docref0(((void *)0), (1 << 1L), "The DateInterval object has not been correctly initialized by its constructor");
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:81
php_error_docref0(((void *)0), (1 << 1L), "The DateTime object has not been correctly initialized by its constructor");
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:82
php_error_docref0(((void *)0), (1 << 1L), "The DateTimeZone object has not been correctly initialized by its constructor");
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:83
php_error_docref0(((void *)0), (1 << 1L), "This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.");
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:84
php_error_docref0(((void *)0), (1 << 1L), "Unrecognized date format token.");
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:85
php_error_docref0(((void *)0), (1 << 1L), "Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE");
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:86
php_error_docref0(((void *)0), (1 << 1L), "idate format is one char");
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:87
php_error_docref0(((void *)0), (1 << 3L), "A two-letter ISO 3166-1 compatible country code is expected");
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:88
php_info_print_table_end();
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:89
php_info_print_table_row(2, "Timezone Database", php_date_global_timezone_db_enabled ? "external" : "internal");
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:90
php_info_print_table_row(2, "date/time support", "enabled");
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:91
php_info_print_table_start();
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:92
retval = retval % 1000;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:93
t = timelib_time_ctor();
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:94
t->tz_info = (tzi);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:95
t->tz_info = tzi;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:96
t->zone_type = 3;
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:97
timelib_error_container_dtor((date_globals.last_errors));
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:98
timelib_isoweek_from_date((t)->y, t->m, t->d, &isoweek, &isoyear);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:99
timelib_isoweek_from_date(t->y, (t)->m, t->d, &isoweek, &isoyear);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:100
timelib_isoweek_from_date(t->y, t->m, (t)->d, &isoweek, &isoyear);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:101
timelib_isoweek_from_date(t->y, t->m, t->d, &isoweek, &isoyear);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:102
timelib_time_dtor((t));
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:103
timelib_time_dtor(t);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:104
timelib_time_offset_dtor((offset));
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:105
timelib_time_offset_dtor(offset);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:106
timelib_unixtime2gmt((t), (timelib_sll)time(((void *)0)));
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:107
timelib_unixtime2gmt((t), ts);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:108
timelib_unixtime2gmt(t, ts);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:109
timelib_unixtime2local((t), (timelib_sll)time(((void *)0)));
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:110
timelib_unixtime2local((t), ts);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:111
timelib_unixtime2local(t, ts);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:112
timelib_update_from_sse((t));
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:113
timelib_update_ts((t), ((void *)0));
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:114
tzi = ((void *)0);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:115
tzi = get_timezone_info();
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:116
zend_class_implements(date_ce_period, 1, zend_ce_traversable);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:117
zend_declare_class_constant_long(date_ce_period, "EXCLUDE_START_DATE", sizeof ("EXCLUDE_START_DATE") - 1, 1);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:118
zend_declare_class_constant_long(date_ce_timezone, "AFRICA", sizeof ("AFRICA") - 1, 1);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:119
zend_declare_class_constant_long(date_ce_timezone, "ALL", sizeof ("ALL") - 1, 2047);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:120
zend_declare_class_constant_long(date_ce_timezone, "ALL_WITH_BC", sizeof ("ALL_WITH_BC") - 1, 4095);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:121
zend_declare_class_constant_long(date_ce_timezone, "AMERICA", sizeof ("AMERICA") - 1, 2);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:122
zend_declare_class_constant_long(date_ce_timezone, "ANTARCTICA", sizeof ("ANTARCTICA") - 1, 4);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:123
zend_declare_class_constant_long(date_ce_timezone, "ARCTIC", sizeof ("ARCTIC") - 1, 8);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:124
zend_declare_class_constant_long(date_ce_timezone, "ASIA", sizeof ("ASIA") - 1, 16);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:125
zend_declare_class_constant_long(date_ce_timezone, "ATLANTIC", sizeof ("ATLANTIC") - 1, 32);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:126
zend_declare_class_constant_long(date_ce_timezone, "AUSTRALIA", sizeof ("AUSTRALIA") - 1, 64);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:127
zend_declare_class_constant_long(date_ce_timezone, "EUROPE", sizeof ("EUROPE") - 1, 128);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:128
zend_declare_class_constant_long(date_ce_timezone, "INDIAN", sizeof ("INDIAN") - 1, 256);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:129
zend_declare_class_constant_long(date_ce_timezone, "PACIFIC", sizeof ("PACIFIC") - 1, 512);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:130
zend_declare_class_constant_long(date_ce_timezone, "PER_COUNTRY", sizeof ("PER_COUNTRY") - 1, 4096);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:131
zend_declare_class_constant_long(date_ce_timezone, "UTC", sizeof ("UTC") - 1, 1024);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:132
zend_declare_class_constant_stringl(date_ce_date, "ATOM", sizeof ("ATOM") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:133
zend_declare_class_constant_stringl(date_ce_date, "COOKIE", sizeof ("COOKIE") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:134
zend_declare_class_constant_stringl(date_ce_date, "ISO8601", sizeof ("ISO8601") - 1, "Y-m-d\\TH:i:sO", sizeof ("Y-m-d\\TH:i:sO") - 1);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:135
zend_declare_class_constant_stringl(date_ce_date, "RFC1036", sizeof ("RFC1036") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:136
zend_declare_class_constant_stringl(date_ce_date, "RFC1123", sizeof ("RFC1123") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:137
zend_declare_class_constant_stringl(date_ce_date, "RFC2822", sizeof ("RFC2822") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:138
zend_declare_class_constant_stringl(date_ce_date, "RFC3339", sizeof ("RFC3339") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:139
zend_declare_class_constant_stringl(date_ce_date, "RFC822", sizeof ("RFC822") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:140
zend_declare_class_constant_stringl(date_ce_date, "RFC850", sizeof ("RFC850") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:141
zend_declare_class_constant_stringl(date_ce_date, "RSS", sizeof ("RSS") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:142
zend_declare_class_constant_stringl(date_ce_date, "W3C", sizeof ("W3C") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:143
zend_error((1 << 0L), "An iterator cannot be used with foreach by reference");
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:144
zend_error((1 << 3L), "A non well formed numeric value encountered");
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

case:145
zend_hash_destroy((date_globals.tzcache));
if (!localtime) {
		timelib_time_offset_dtor(offset);
	}

switch:13
case:1
((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
timelib_time_dtor(t);

case:2
(date_globals.last_errors) = ((void *)0);
timelib_time_dtor(t);

case:3
(date_globals.timezone) = ((void *)0);
timelib_time_dtor(t);

case:4
(date_globals.timezone) = _estrndup((zone), (zone_len), "ext/date/php_date.c", 3945, ((void *)0), 0);
timelib_time_dtor(t);

case:5
(date_globals.tzcache) = ((void *)0);
timelib_time_dtor(t);

case:6
(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16));
timelib_time_dtor(t);

case:7
(offset) = timelib_get_time_zone_info(t->sse, t->tz_info);
timelib_time_dtor(t);

case:8
(offset) = timelib_time_offset_ctor();
timelib_time_dtor(t);

case:9
(offset)->abbr = malloc(9);
timelib_time_dtor(t);

case:10
(offset)->abbr = strdup(t->tz_abbr);
timelib_time_dtor(t);

case:11
(offset)->is_dst = t->dst;
timelib_time_dtor(t);

case:12
(offset)->leap_secs = 0;
timelib_time_dtor(t);

case:13
(offset)->offset = (t->z - (t->dst * 60)) * -60;
timelib_time_dtor(t);

case:14
(t) = timelib_time_ctor();
timelib_time_dtor(t);

case:15
(t)->tz_info = tzi;
timelib_time_dtor(t);

case:16
(t)->zone_type = 3;
timelib_time_dtor(t);

case:17
(tzi) = ((void *)0);
timelib_time_dtor(t);

case:18
(tzi) = get_timezone_info();
timelib_time_dtor(t);

case:19
_efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
timelib_time_dtor(t);

case:20
_efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
timelib_time_dtor(t);

case:21
_efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
timelib_time_dtor(t);

case:22
_efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
timelib_time_dtor(t);

case:23
_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
timelib_time_dtor(t);

case:24
ap_php_snprintf((offset)->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
timelib_time_dtor(t);

case:25
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? (((offset)->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
timelib_time_dtor(t);

case:26
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs((offset)->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
timelib_time_dtor(t);

case:27
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs(((offset)->offset % 3600) / 60) : 0);
timelib_time_dtor(t);

case:28
ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
timelib_time_dtor(t);

case:29
date_ce_period->get_iterator = date_object_period_get_iterator;
timelib_time_dtor(t);

case:30
date_ce_period->iterator_funcs.funcs = &date_period_it_funcs;
timelib_time_dtor(t);

case:31
date_object_handlers_date.clone_obj = date_object_clone_date;
timelib_time_dtor(t);

case:32
date_object_handlers_date.compare_objects = date_object_compare_date;
timelib_time_dtor(t);

case:33
date_object_handlers_date.get_properties = date_object_get_properties;
timelib_time_dtor(t);

case:34
date_object_handlers_interval.clone_obj = date_object_clone_interval;
timelib_time_dtor(t);

case:35
date_object_handlers_interval.get_properties = date_object_get_properties_interval;
timelib_time_dtor(t);

case:36
date_object_handlers_interval.get_property_ptr_ptr = ((void *)0);
timelib_time_dtor(t);

case:37
date_object_handlers_interval.read_property = date_interval_read_property;
timelib_time_dtor(t);

case:38
date_object_handlers_interval.write_property = date_interval_write_property;
timelib_time_dtor(t);

case:39
date_object_handlers_period.clone_obj = date_object_clone_period;
timelib_time_dtor(t);

case:40
date_object_handlers_timezone.clone_obj = date_object_clone_timezone;
timelib_time_dtor(t);

case:41
date_register_classes();
timelib_time_dtor(t);

case:42
exit(1);
timelib_time_dtor(t);

case:43
if (!(date_globals.tzcache)) {
    ((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)), "ext/date/php_date.c", 822, ((void *)0), 0);
    _zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0), "ext/date/php_date.c", 823);
}
timelib_time_dtor(t);

case:44
if (!localtime) {
    timelib_time_offset_dtor(offset);
}
timelib_time_dtor(t);

case:45
if (!localtime) {
    tzi = get_timezone_info();
    t->tz_info = tzi;
    t->zone_type = 3;
    timelib_unixtime2local(t, ts);
} else {
    tzi = ((void *)0);
    timelib_unixtime2gmt(t, ts);
}
timelib_time_dtor(t);

case:46
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
    (date_globals.last_errors) = ((void *)0);
}
timelib_time_dtor(t);

case:47
if ((date_globals.last_errors)) {
    timelib_error_container_dtor((date_globals.last_errors));
}
timelib_time_dtor(t);

case:48
if ((date_globals.timezone) && (strlen((date_globals.timezone)) > 0)) {
    return (date_globals.timezone);
}
timelib_time_dtor(t);

case:49
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 3942, ((void *)0), 0);
    (date_globals.timezone) = ((void *)0);
}
timelib_time_dtor(t);

case:50
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 614, ((void *)0), 0);
}
timelib_time_dtor(t);

case:51
if ((date_globals.timezone)) {
    _efree(((date_globals.timezone)), "ext/date/php_date.c", 628, ((void *)0), 0);
}
timelib_time_dtor(t);

case:52
if ((date_globals.tzcache)) {
    zend_hash_destroy((date_globals.tzcache));
    _efree(((date_globals.tzcache)), "ext/date/php_date.c", 633, ((void *)0), 0);
    (date_globals.tzcache) = ((void *)0);
}
timelib_time_dtor(t);

case:53
if (t->zone_type == 1) {
    offset = timelib_time_offset_ctor();
    offset->offset = (t->z - (t->dst * 60)) * -60;
    offset->leap_secs = 0;
    offset->is_dst = t->dst;
    offset->abbr = malloc(9);
    ap_php_snprintf(offset->abbr, 9, "GMT%c%02d%02d", !localtime ? ((offset->offset < 0) ? '-' : '+') : '+', !localtime ? abs(offset->offset / 3600) : 0, !localtime ? abs((offset->offset % 3600) / 60) : 0);
} else {
    offset = timelib_get_time_zone_info(t->sse, t->tz_info);
}
timelib_time_dtor(t);

case:54
memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
timelib_time_dtor(t);

case:55
memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
timelib_time_dtor(t);

case:56
memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
timelib_time_dtor(t);

case:57
memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
timelib_time_dtor(t);

case:58
memset(t, 0, sizeof (*(t)));
timelib_time_dtor(t);

case:59
offset = timelib_get_time_zone_info((t)->sse, t->tz_info);
timelib_time_dtor(t);

case:60
offset = timelib_get_time_zone_info(t->sse, (t)->tz_info);
timelib_time_dtor(t);

case:61
offset = timelib_get_time_zone_info(t->sse, t->tz_info);
timelib_time_dtor(t);

case:62
offset = timelib_time_offset_ctor();
timelib_time_dtor(t);

case:63
offset->abbr = malloc(9);
timelib_time_dtor(t);

case:64
offset->abbr = strdup((t)->tz_abbr);
timelib_time_dtor(t);

case:65
offset->abbr = strdup(t->tz_abbr);
timelib_time_dtor(t);

case:66
offset->is_dst = (t)->dst;
timelib_time_dtor(t);

case:67
offset->is_dst = t->dst;
timelib_time_dtor(t);

case:68
offset->leap_secs = 0;
timelib_time_dtor(t);

case:69
offset->offset = ((t)->z - (t->dst * 60)) * -60;
timelib_time_dtor(t);

case:70
offset->offset = (t->z - ((t)->dst * 60)) * -60;
timelib_time_dtor(t);

case:71
offset->offset = (t->z - (t->dst * 60)) * -60;
timelib_time_dtor(t);

case:72
php_date_global_timezone_db = ((void *)0);
timelib_time_dtor(t);

case:73
php_date_global_timezone_db_enabled = 0;
timelib_time_dtor(t);

case:74
php_date_global_timezone_db_enabled = 1;
timelib_time_dtor(t);

case:75
php_error_docref0(((void *)0), (1 << 0L), "Timezone database is corrupt - this should *never* happen!");
timelib_time_dtor(t);

case:76
php_error_docref0(((void *)0), (1 << 13L), "The is_dst parameter is deprecated");
timelib_time_dtor(t);

case:77
php_error_docref0(((void *)0), (1 << 1L), "Can only do this for zones with ID for now");
timelib_time_dtor(t);

case:78
php_error_docref0(((void *)0), (1 << 1L), "It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm");
timelib_time_dtor(t);

case:79
php_error_docref0(((void *)0), (1 << 1L), "Only non-special relative time specifications are supported for subtraction");
timelib_time_dtor(t);

case:80
php_error_docref0(((void *)0), (1 << 1L), "The DateInterval object has not been correctly initialized by its constructor");
timelib_time_dtor(t);

case:81
php_error_docref0(((void *)0), (1 << 1L), "The DateTime object has not been correctly initialized by its constructor");
timelib_time_dtor(t);

case:82
php_error_docref0(((void *)0), (1 << 1L), "The DateTimeZone object has not been correctly initialized by its constructor");
timelib_time_dtor(t);

case:83
php_error_docref0(((void *)0), (1 << 1L), "This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.");
timelib_time_dtor(t);

case:84
php_error_docref0(((void *)0), (1 << 1L), "Unrecognized date format token.");
timelib_time_dtor(t);

case:85
php_error_docref0(((void *)0), (1 << 1L), "Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE");
timelib_time_dtor(t);

case:86
php_error_docref0(((void *)0), (1 << 1L), "idate format is one char");
timelib_time_dtor(t);

case:87
php_error_docref0(((void *)0), (1 << 3L), "A two-letter ISO 3166-1 compatible country code is expected");
timelib_time_dtor(t);

case:88
php_info_print_table_end();
timelib_time_dtor(t);

case:89
php_info_print_table_row(2, "Timezone Database", php_date_global_timezone_db_enabled ? "external" : "internal");
timelib_time_dtor(t);

case:90
php_info_print_table_row(2, "date/time support", "enabled");
timelib_time_dtor(t);

case:91
php_info_print_table_start();
timelib_time_dtor(t);

case:92
retval = retval % 1000;
timelib_time_dtor(t);

case:93
t = timelib_time_ctor();
timelib_time_dtor(t);

case:94
t->tz_info = (tzi);
timelib_time_dtor(t);

case:95
t->tz_info = tzi;
timelib_time_dtor(t);

case:96
t->zone_type = 3;
timelib_time_dtor(t);

case:97
timelib_error_container_dtor((date_globals.last_errors));
timelib_time_dtor(t);

case:98
timelib_get_current_offset(t);

case:99
timelib_isoweek_from_date((t)->y, t->m, t->d, &isoweek, &isoyear);
timelib_time_dtor(t);

case:100
timelib_isoweek_from_date(t->y, (t)->m, t->d, &isoweek, &isoyear);
timelib_time_dtor(t);

case:101
timelib_isoweek_from_date(t->y, t->m, (t)->d, &isoweek, &isoyear);
timelib_time_dtor(t);

case:102
timelib_isoweek_from_date(t->y, t->m, t->d, &isoweek, &isoyear);
timelib_time_dtor(t);

case:103
timelib_time_clone(t);

case:104
timelib_time_dtor((t));

case:105
timelib_time_dtor((t));
timelib_time_dtor(t);

case:106
timelib_time_dtor(t);
timelib_time_dtor(t);

case:107
timelib_time_offset_dtor((offset));
timelib_time_dtor(t);

case:108
timelib_time_offset_dtor(offset);
timelib_time_dtor(t);

case:109
timelib_unixtime2gmt((t), (timelib_sll)time(((void *)0)));
timelib_time_dtor(t);

case:110
timelib_unixtime2gmt((t), ts);
timelib_time_dtor(t);

case:111
timelib_unixtime2gmt(t, ts);
timelib_time_dtor(t);

case:112
timelib_unixtime2local((t), (timelib_sll)time(((void *)0)));
timelib_time_dtor(t);

case:113
timelib_unixtime2local((t), ts);
timelib_time_dtor(t);

case:114
timelib_unixtime2local(t, ts);
timelib_time_dtor(t);

case:115
timelib_update_from_sse((t));
timelib_time_dtor(t);

case:116
timelib_update_from_sse(t);

case:117
timelib_update_ts((t), ((void *)0));
timelib_time_dtor(t);

case:118
tzi = ((void *)0);
timelib_time_dtor(t);

case:119
tzi = get_timezone_info();
timelib_time_dtor(t);

case:120
zend_class_implements(date_ce_period, 1, zend_ce_traversable);
timelib_time_dtor(t);

case:121
zend_declare_class_constant_long(date_ce_period, "EXCLUDE_START_DATE", sizeof ("EXCLUDE_START_DATE") - 1, 1);
timelib_time_dtor(t);

case:122
zend_declare_class_constant_long(date_ce_timezone, "AFRICA", sizeof ("AFRICA") - 1, 1);
timelib_time_dtor(t);

case:123
zend_declare_class_constant_long(date_ce_timezone, "ALL", sizeof ("ALL") - 1, 2047);
timelib_time_dtor(t);

case:124
zend_declare_class_constant_long(date_ce_timezone, "ALL_WITH_BC", sizeof ("ALL_WITH_BC") - 1, 4095);
timelib_time_dtor(t);

case:125
zend_declare_class_constant_long(date_ce_timezone, "AMERICA", sizeof ("AMERICA") - 1, 2);
timelib_time_dtor(t);

case:126
zend_declare_class_constant_long(date_ce_timezone, "ANTARCTICA", sizeof ("ANTARCTICA") - 1, 4);
timelib_time_dtor(t);

case:127
zend_declare_class_constant_long(date_ce_timezone, "ARCTIC", sizeof ("ARCTIC") - 1, 8);
timelib_time_dtor(t);

case:128
zend_declare_class_constant_long(date_ce_timezone, "ASIA", sizeof ("ASIA") - 1, 16);
timelib_time_dtor(t);

case:129
zend_declare_class_constant_long(date_ce_timezone, "ATLANTIC", sizeof ("ATLANTIC") - 1, 32);
timelib_time_dtor(t);

case:130
zend_declare_class_constant_long(date_ce_timezone, "AUSTRALIA", sizeof ("AUSTRALIA") - 1, 64);
timelib_time_dtor(t);

case:131
zend_declare_class_constant_long(date_ce_timezone, "EUROPE", sizeof ("EUROPE") - 1, 128);
timelib_time_dtor(t);

case:132
zend_declare_class_constant_long(date_ce_timezone, "INDIAN", sizeof ("INDIAN") - 1, 256);
timelib_time_dtor(t);

case:133
zend_declare_class_constant_long(date_ce_timezone, "PACIFIC", sizeof ("PACIFIC") - 1, 512);
timelib_time_dtor(t);

case:134
zend_declare_class_constant_long(date_ce_timezone, "PER_COUNTRY", sizeof ("PER_COUNTRY") - 1, 4096);
timelib_time_dtor(t);

case:135
zend_declare_class_constant_long(date_ce_timezone, "UTC", sizeof ("UTC") - 1, 1024);
timelib_time_dtor(t);

case:136
zend_declare_class_constant_stringl(date_ce_date, "ATOM", sizeof ("ATOM") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
timelib_time_dtor(t);

case:137
zend_declare_class_constant_stringl(date_ce_date, "COOKIE", sizeof ("COOKIE") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
timelib_time_dtor(t);

case:138
zend_declare_class_constant_stringl(date_ce_date, "ISO8601", sizeof ("ISO8601") - 1, "Y-m-d\\TH:i:sO", sizeof ("Y-m-d\\TH:i:sO") - 1);
timelib_time_dtor(t);

case:139
zend_declare_class_constant_stringl(date_ce_date, "RFC1036", sizeof ("RFC1036") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
timelib_time_dtor(t);

case:140
zend_declare_class_constant_stringl(date_ce_date, "RFC1123", sizeof ("RFC1123") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
timelib_time_dtor(t);

case:141
zend_declare_class_constant_stringl(date_ce_date, "RFC2822", sizeof ("RFC2822") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
timelib_time_dtor(t);

case:142
zend_declare_class_constant_stringl(date_ce_date, "RFC3339", sizeof ("RFC3339") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
timelib_time_dtor(t);

case:143
zend_declare_class_constant_stringl(date_ce_date, "RFC822", sizeof ("RFC822") - 1, "D, d M y H:i:s O", sizeof ("D, d M y H:i:s O") - 1);
timelib_time_dtor(t);

case:144
zend_declare_class_constant_stringl(date_ce_date, "RFC850", sizeof ("RFC850") - 1, "l, d-M-y H:i:s T", sizeof ("l, d-M-y H:i:s T") - 1);
timelib_time_dtor(t);

case:145
zend_declare_class_constant_stringl(date_ce_date, "RSS", sizeof ("RSS") - 1, "D, d M Y H:i:s O", sizeof ("D, d M Y H:i:s O") - 1);
timelib_time_dtor(t);

case:146
zend_declare_class_constant_stringl(date_ce_date, "W3C", sizeof ("W3C") - 1, "Y-m-d\\TH:i:sP", sizeof ("Y-m-d\\TH:i:sP") - 1);
timelib_time_dtor(t);

case:147
zend_error((1 << 0L), "An iterator cannot be used with foreach by reference");
timelib_time_dtor(t);

case:148
zend_error((1 << 3L), "A non well formed numeric value encountered");
timelib_time_dtor(t);

case:149
zend_hash_destroy((date_globals.tzcache));
timelib_time_dtor(t);


