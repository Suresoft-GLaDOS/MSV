Initialize the program!
Generating repair candidates!
Processing bresenham.cpp
Total 433 different repair schemas!!!!
Total 991 different repair candidate templates for scoring!!!
Total 625 different partial repair candidate templates!!
BasicTester pointer: 0x559ccb8e5f80
StringConstTester pointer: 0x559ccb3d9960
CondTester pointer: 0x559ccb4fee60
Generating Candidates...
Candidates size: 433
Generating Codes...
[4] Preprocess the following candidate with CondTester:
433 Candidates
Generating patches with CondTester...
test
Generating patches...
top: if (y0 < y1)
       
mid: ystep = 1;

bottom:      else
       ystep = -1;

before:                                                                                 switch(__choose("__ID2"))
                                                                                {
                                                                                case 0: {
                                                                                ystep = 1;
                                                                                
                                                                                break;
                                                                                }
                                                                                #ifdef COMPILE_34
                                                                                case 1: {
                                                                                a = x0;
                                                                                ystep = 1;
                                                                                
                                                                                break;
                                                                                }
                                                                            #endif
                                                                            #ifdef COMPILE_35
                                                                            case 2: {
                                                                            a = x1;
                                                                            ystep = 1;
                                                                            
                                                                            break;
                                                                            }
                                                                        #endif
                                                                        #ifdef COMPILE_36
                                                                        case 3: {
                                                                        a = y0;
                                                                        ystep = 1;
                                                                        
                                                                        break;
                                                                        }
                                                                    #endif
                                                                    #ifdef COMPILE_37
                                                                    case 4: {
                                                                    error = error + deltaerr;
                                                                    ystep = 1;
                                                                    
                                                                    break;
                                                                    }
                                                                #endif
                                                                #ifdef COMPILE_38
                                                                case 5: {
                                                                error = error - 1;
                                                                ystep = 1;
                                                                
                                                                break;
                                                                }
                                                            #endif
                                                            #ifdef COMPILE_39
                                                            case 6: {
                                                            if (!__is_neg(9, x1, 8, y1, 8, x0, 8, y0, 8, steep, 8, a, 8, deltax, 8, deltay, 8, ystep, 8))
                                                                ystep = 1;
                                                            
                                                            break;
                                                            }
                                                        #endif
                                                        #ifdef COMPILE_40
                                                        case 7: {
                                                        if (__is_neg(9, x1, 8, y1, 8, x0, 8, y0, 8, steep, 8, a, 8, deltax, 8, deltay, 8, ystep, 8))
                                                            return;
                                                        ystep = 1;
                                                        
                                                        break;
                                                        }
                                                    #endif
                                                    #ifdef COMPILE_41
                                                    case 8: {
                                                    if (steep) {
                                                        a = x0;
                                                        x0 = y0;
                                                        y0 = a;
                                                        a = x1;
                                                        x1 = y1;
                                                        y1 = a;
                                                    }
                                                    ystep = 1;
                                                    
                                                    break;
                                                    }
                                                #endif
                                                #ifdef COMPILE_42
                                                case 9: {
                                                if (x0 > x1) {
                                                    a = x0;
                                                    x0 = x1;
                                                    x1 = a;
                                                    a = y0;
                                                    y0 = y1;
                                                    y1 = a;
                                                }
                                                ystep = 1;
                                                
                                                break;
                                                }
                                            #endif
                                            #ifdef COMPILE_43
                                            case 10: {
                                            if (y0 < y1)
                                                ystep = 1;
                                            else
                                                ystep = -1;
                                            ystep = 1;
                                            
                                            break;
                                            }
                                        #endif
                                        #ifdef COMPILE_44
                                        case 11: {
                                        throw;
                                        ystep = 1;
                                        
                                        break;
                                        }
                                    #endif
                                    #ifdef COMPILE_45
                                    case 12: {
                                    x0 = x1;
                                    ystep = 1;
                                    
                                    break;
                                    }
                                #endif
                                #ifdef COMPILE_46
                                case 13: {
                                x0 = y0;
                                ystep = 1;
                                
                                break;
                                }
                            #endif
                            #ifdef COMPILE_47
                            case 14: {
                            x1 = a;
                            ystep = 1;
                            
                            break;
                            }
                        #endif
                        #ifdef COMPILE_48
                        case 15: {
                        x1 = y1;
                        ystep = 1;
                        
                        break;
                        }
                    #endif
                    #ifdef COMPILE_49
                    case 16: {
                    y0 = a;
                    ystep = 1;
                    
                    break;
                    }
                #endif
                #ifdef COMPILE_50
                case 17: {
                y0 = y1;
                ystep = 1;
                
                break;
                }
            #endif
            #ifdef COMPILE_51
            case 18: {
            y1 = a;
            ystep = 1;
            
            break;
            }
        #endif
        #ifdef COMPILE_52
        case 19: {
        ystep = -1;
        ystep = 1;
        
        break;
        }
    #endif
    #ifdef COMPILE_53
    case 20: {
    ystep = 1;
    ystep = 1;
    
    break;
    }
#endif
}

big: if (y0 < y1)
    ystep = 1;
else
    ystep = -1;

top: if (steep){
	   var.first=y;
	   var.second=x;
	   line.push_back(var);}
	 else{
	   var.first=x;
	   var.second=y;
	   
mid: line.push_back(var);
bottom: }

before: switch(__choose("__ID6"))
{
case 0: {
line.push_back(var);

break;
}
#ifdef COMPILE_132
case 1: {
a = x0;
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_133
case 2: {
a = x1;
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_134
case 3: {
a = y0;
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_135
case 4: {
error = error + deltaerr;
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_136
case 5: {
error = error - 1;
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_137
case 6: {
if (!__is_neg(13, x1, 8, y1, 8, x0, 8, y0, 8, steep, 8, a, 8, deltax, 8, deltay, 8, ystep, 8, y, 8, x, 8, var.first, 8, var.second, 8))
    line.push_back(var);

break;
}
#endif
#ifdef COMPILE_138
case 7: {
if (__is_neg(13, x1, 8, y1, 8, x0, 8, y0, 8, steep, 8, a, 8, deltax, 8, deltay, 8, ystep, 8, y, 8, x, 8, var.first, 8, var.second, 8))
    break;
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_139
case 8: {
if (__is_neg(13, x1, 8, y1, 8, x0, 8, y0, 8, steep, 8, a, 8, deltax, 8, deltay, 8, ystep, 8, y, 8, x, 8, var.first, 8, var.second, 8))
    return;
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_140
case 9: {
if (error >= 0.5) {
    y += ystep;
    error = error - 1;
}
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_141
case 10: {
if (steep) {
    a = x0;
    x0 = y0;
    y0 = a;
    a = x1;
    x1 = y1;
    y1 = a;
}
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_142
case 11: {
if (steep) {
    var.first = y;
    var.second = x;
    line.push_back(var);
} else {
    var.first = x;
    var.second = y;
    line.push_back(var);
}
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_143
case 12: {
if (x0 > x1) {
    a = x0;
    x0 = x1;
    x1 = a;
    a = y0;
    y0 = y1;
    y1 = a;
}
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_144
case 13: {
if (y0 < y1)
    ystep = 1;
else
    ystep = -1;
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_145
case 14: {
line.push_back(var);
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_146
case 15: {
throw;
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_147
case 16: {
var.first = x;
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_148
case 17: {
var.first = y;
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_149
case 18: {
var.second = x;
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_150
case 19: {
var.second = y;
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_151
case 20: {
x0 = x1;
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_152
case 21: {
x0 = y0;
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_153
case 22: {
x1 = a;
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_154
case 23: {
x1 = y1;
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_155
case 24: {
y0 = a;
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_156
case 25: {
y0 = y1;
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_157
case 26: {
y1 = a;
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_158
case 27: {
ystep = -1;
line.push_back(var);

break;
}
#endif
#ifdef COMPILE_159
case 28: {
ystep = 1;
line.push_back(var);

break;
}
#endif
}

big: if (steep) {
    var.first = y;
    var.second = x;
    line.push_back(var);
} else {
    var.first = x;
    var.second = y;
    line.push_back(var);
}

top: for (int x = x0;x < x1;x++)
       {
	 if (steep){
	   var.first=y;
	   var.second=x;
	   line.push_back(var);}
	 else{
	   var.first=x;
	   var.second=y;
	   line.push_back(var);}
	 error = error + deltaerr;
	 
mid: if (error >= 0.5)
	   {
	     y += ystep;
	     error = error - 1;
	   }

bottom:        }

before: switch(__choose("__ID9"))
{
case 0: {
if (error >= 0.5) {
    y += ystep;
    error = error - 1;
}

break;
}
#ifdef COMPILE_219
case 1: {
a = x0;
if (error >= 0.5) {
    y += ystep;
    error = error - 1;
}

break;
}
#endif
#ifdef COMPILE_220
case 2: {
a = x1;
if (error >= 0.5) {
    y += ystep;
    error = error - 1;
}

break;
}
#endif
#ifdef COMPILE_221
case 3: {
a = y0;
if (error >= 0.5) {
    y += ystep;
    error = error - 1;
}

break;
}
#endif
#ifdef COMPILE_222
case 4: {
error = error + deltaerr;
if (error >= 0.5) {
    y += ystep;
    error = error - 1;
}

break;
}
#endif
#ifdef COMPILE_223
case 5: {
error = error - 1;
if (error >= 0.5) {
    y += ystep;
    error = error - 1;
}

break;
}
#endif
#ifdef COMPILE_224
case 6: {
if (!__is_neg(11, x1, 8, y1, 8, x0, 8, y0, 8, steep, 8, a, 8, deltax, 8, deltay, 8, ystep, 8, y, 8, x, 8))
    if (error >= 0.5) {
        y += ystep;
        error = error - 1;
    }

break;
}
#endif
#ifdef COMPILE_225
case 7: {
if ((error >= 0.5) && !__is_neg(11, x1, 8, y1, 8, x0, 8, y0, 8, steep, 8, a, 8, deltax, 8, deltay, 8, ystep, 8, y, 8, x, 8)) {
    y += ystep;
    error = error - 1;
}

break;
}
#endif
#ifdef COMPILE_226
case 8: {
if ((error >= 0.5) || __is_neg(11, x1, 8, y1, 8, x0, 8, y0, 8, steep, 8, a, 8, deltax, 8, deltay, 8, ystep, 8, y, 8, x, 8)) {
    y += ystep;
    error = error - 1;
}

break;
}
#endif
#ifdef COMPILE_227
case 9: {
if (__is_neg(11, x1, 8, y1, 8, x0, 8, y0, 8, steep, 8, a, 8, deltax, 8, deltay, 8, ystep, 8, y, 8, x, 8))
    break;
if (error >= 0.5) {
    y += ystep;
    error = error - 1;
}

break;
}
#endif
#ifdef COMPILE_228
case 10: {
if (__is_neg(11, x1, 8, y1, 8, x0, 8, y0, 8, steep, 8, a, 8, deltax, 8, deltay, 8, ystep, 8, y, 8, x, 8))
    return;
if (error >= 0.5) {
    y += ystep;
    error = error - 1;
}

break;
}
#endif
#ifdef COMPILE_229
case 11: {
if (error >= 0.5) {
    y += ystep;
    error = error - 1;
}
if (error >= 0.5) {
    y += ystep;
    error = error - 1;
}

break;
}
#endif
#ifdef COMPILE_230
case 12: {
if (steep) {
    a = x0;
    x0 = y0;
    y0 = a;
    a = x1;
