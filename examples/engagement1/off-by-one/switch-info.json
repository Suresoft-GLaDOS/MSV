{
	"switch_num":	17,
	"case_num":	[9, 26, 15, 25, 35, 25, 3, 1, 25, 45, 1, 15, 40, 15, 33, 15, 1],
	"switch_cluster":	[[1, 4, 7, 9, 10, 12, 14, 16], [6], [0, 2, 3, 5, 8, 11, 13, 15], []],
	"priority":	[{
			"file":	"prog.c",
			"line":	5,
			"primary_score":	999998,
			"second_score":	252
		}, {
			"file":	"prog.c",
			"line":	6,
			"primary_score":	999998,
			"second_score":	251
		}, {
			"file":	"prog.c",
			"line":	7,
			"primary_score":	999998,
			"second_score":	250
		}, {
			"file":	"prog.c",
			"line":	8,
			"primary_score":	999998,
			"second_score":	249
		}, {
			"file":	"prog.c",
			"line":	10,
			"primary_score":	999998,
			"second_score":	248
		}, {
			"file":	"prog.c",
			"line":	11,
			"primary_score":	999998,
			"second_score":	7
		}, {
			"file":	"prog.c",
			"line":	12,
			"primary_score":	999998,
			"second_score":	6
		}, {
			"file":	"prog.c",
			"line":	13,
			"primary_score":	999998,
			"second_score":	5
		}, {
			"file":	"prog.c",
			"line":	17,
			"primary_score":	999998,
			"second_score":	4
		}, {
			"file":	"prog.c",
			"line":	19,
			"primary_score":	999998,
			"second_score":	3
		}, {
			"file":	"prog.c",
			"line":	20,
			"primary_score":	999998,
			"second_score":	2
		}, {
			"file":	"prog.c",
			"line":	21,
			"primary_score":	999998,
			"second_score":	1
		}],
	"mutation_info":	[{
			"file":	"prog.c",
			"functions":	[]
		}],
	"rules":	[{
			"file_name":	"prog.c",
			"lines":	[{
					"line":	5,
					"switches":	[]
				}, {
					"line":	6,
					"switches":	[]
				}, {
					"line":	7,
					"switches":	[{
							"switch":	0,
							"types":	[[], [], [], [], [6, 7, 8, 9], [], [], [], [], [4, 5], [1, 2, 3], [], [], [], [], [], [], []],
							"begin_line":	8,
							"begin_column":	3,
							"end_line":	8,
							"end_column":	3,
							"patch_codes":	["fclose((fin))", "fin = (fin)", "fin = fopen((argv)[1], \"r\")", "fclose(fin)", "fin = fopen(argv[1], \"r\")", "if (__is_neg(\"\", \"L8\", 3, &(argv), sizeof (argv), &(fin), sizeof (fin), &(argc), sizeof (argc)))\n    return -1;\n", "if (__is_neg(\"\", \"L8\", 3, &(argv), sizeof (argv), &(fin), sizeof (fin), &(argc), sizeof (argc)))\n    return 0;\n", "if (__is_neg(\"\", \"L8\", 3, &(argv), sizeof (argv), &(fin), sizeof (fin), &(argc), sizeof (argc)))\n    return 1;\n", "if (__is_neg(\"\", \"L8\", 3, &(argv), sizeof (argv), &(fin), sizeof (fin), &(argc), sizeof (argc)))\n    return 60;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	2,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	3,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	4,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	5,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	6,
									"scores":	[-6.36957829428582, -7.67704967648582, -7.7933807892858216]
								}, {
									"case":	7,
									"scores":	[-4.10679649428582, -5.41426787648582, -5.53059898928582]
								}, {
									"case":	8,
									"scores":	[-6.36957829428582, -7.67704967648582, -7.7933807892858216]
								}, {
									"case":	9,
									"scores":	[-6.36957829428582, -7.67704967648582, -7.7933807892858216]
								}]
						}, {
							"switch":	1,
							"types":	[[], [], [1], [], [], [], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [], [2, 3], [], [], [], [], [], [], [], [], []],
							"begin_line":	8,
							"begin_column":	5,
							"end_line":	8,
							"end_column":	30,
							"patch_codes":	["if (!__is_neg(\"\", \"L8\", 3, &(argv), sizeof (argv), &(fin), sizeof (fin), &(argc), sizeof (argc)))\n    fin = fopen(argv[1], \"r\");\n", "fin = fopen(argv[1], \"r\")", "fin = popen(argv[1], \"r\")", "fin = (fin)", "fin = fopen((&argc)[1], \"r\")", "fin = fopen((&argv)[1], \"r\")", "fin = fopen((&filename)[1], \"r\")", "fin = fopen((&fin)[1], \"r\")", "fin = fopen((argv)[1], \"r\")", "fin = fopen(argv[(0 * argc)], \"r\")", "fin = fopen(argv[(0)], \"r\")", "fin = fopen(argv[(argc != 0)], \"r\")", "fin = fopen(argv[(argc + 0)], \"r\")", "fin = fopen(argv[(argc - 0)], \"r\")", "fin = fopen(argv[(argc == 0)], \"r\")", "fin = fopen(argv[(argv != 0)], \"r\")", "fin = fopen(argv[(argv == 0)], \"r\")", "fin = fopen(argv[(filename != 0)], \"r\")", "fin = fopen(argv[(filename == 0)], \"r\")", "fin = fopen(argv[(fin != 0)], \"r\")", "fin = fopen(argv[(fin == 0)], \"r\")", "fin = fopen(argv[1], (&argc))", "fin = fopen(argv[1], (&argv))", "fin = fopen(argv[1], (&filename))", "fin = fopen(argv[1], (&fin))", "fin = fopen(argv[1], (0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.44878114428582, -4.6859447442858215, -4.09895517128582]
								}, {
									"case":	2,
									"scores":	[-4.09384737128582]
								}, {
									"case":	3,
									"scores":	[-4.09384737128582]
								}, {
									"case":	4,
									"scores":	[-4.09384737128582]
								}, {
									"case":	5,
									"scores":	[-4.09384737128582]
								}, {
									"case":	6,
									"scores":	[-4.09384737128582]
								}, {
									"case":	7,
									"scores":	[-4.09384737128582]
								}, {
									"case":	8,
									"scores":	[-4.09384737128582]
								}, {
									"case":	9,
									"scores":	[-4.09384737128582]
								}, {
									"case":	10,
									"scores":	[-4.09384737128582]
								}, {
									"case":	11,
									"scores":	[-4.09384737128582]
								}, {
									"case":	12,
									"scores":	[-4.09384737128582]
								}, {
									"case":	13,
									"scores":	[-4.09384737128582]
								}, {
									"case":	14,
									"scores":	[-4.09384737128582]
								}, {
									"case":	15,
									"scores":	[-4.09384737128582]
								}, {
									"case":	16,
									"scores":	[-4.09384737128582]
								}, {
									"case":	17,
									"scores":	[-4.09384737128582]
								}, {
									"case":	18,
									"scores":	[-4.09384737128582]
								}, {
									"case":	19,
									"scores":	[-4.09384737128582]
								}, {
									"case":	20,
									"scores":	[-4.09384737128582]
								}, {
									"case":	21,
									"scores":	[-4.09384737128582]
								}, {
									"case":	22,
									"scores":	[-4.09384737128582]
								}, {
									"case":	23,
									"scores":	[-4.09384737128582]
								}, {
									"case":	24,
									"scores":	[-4.09384737128582]
								}, {
									"case":	25,
									"scores":	[-4.09384737128582]
								}, {
									"case":	26,
									"scores":	[-4.09384737128582]
								}]
						}]
				}, {
					"line":	8,
					"switches":	[]
				}, {
					"line":	11,
					"switches":	[]
				}, {
					"line":	12,
					"switches":	[{
							"switch":	3,
							"types":	[[], [], [], [], [21, 22, 23, 24, 25], [], [], [], [], [15, 16, 17, 18, 19, 20], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [], [], [], [], [], [], []],
							"begin_line":	13,
							"begin_column":	0,
							"end_line":	13,
							"end_column":	0,
							"patch_codes":	["c = (-1)", "c = (0)", "c = (1)", "c = (60)", "c = (c)", "c = _IO_getc((fin))", "fclose((fin))", "filename[i] = (-1)", "filename[i] = (0)", "filename[i] = (1)", "filename[i] = (60)", "filename[i] = (c)", "fin = (fin)", "fin = fopen((argv)[1], \"r\")", "c = _IO_getc(fin)", "fclose(fin)", "filename[i] = '\\x00'", "filename[i] = c", "fin = fopen(argv[1], \"r\")", "printf(\"%d\\n\", i)", "if (__is_neg(\"\", \"L13\", 5, &(fin), sizeof (fin), &(c), sizeof (c), &(i), sizeof (i), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    break;\n", "if (__is_neg(\"\", \"L13\", 5, &(fin), sizeof (fin), &(c), sizeof (c), &(i), sizeof (i), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return -1;\n", "if (__is_neg(\"\", \"L13\", 5, &(fin), sizeof (fin), &(c), sizeof (c), &(i), sizeof (i), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return 0;\n", "if (__is_neg(\"\", \"L13\", 5, &(fin), sizeof (fin), &(c), sizeof (c), &(i), sizeof (i), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return 1;\n", "if (__is_neg(\"\", \"L13\", 5, &(fin), sizeof (fin), &(c), sizeof (c), &(i), sizeof (i), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return 60;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.013036542015743]
								}, {
									"case":	2,
									"scores":	[-4.013036542015743]
								}, {
									"case":	3,
									"scores":	[-4.013036542015743]
								}, {
									"case":	4,
									"scores":	[-4.013036542015743]
								}, {
									"case":	5,
									"scores":	[-4.013036542015743]
								}, {
									"case":	6,
									"scores":	[-4.013036542015743]
								}, {
									"case":	7,
									"scores":	[-4.013036542015743]
								}, {
									"case":	8,
									"scores":	[-4.013036542015743]
								}, {
									"case":	9,
									"scores":	[-4.013036542015743]
								}, {
									"case":	10,
									"scores":	[-4.013036542015743]
								}, {
									"case":	11,
									"scores":	[-4.013036542015743]
								}, {
									"case":	12,
									"scores":	[-4.013036542015743]
								}, {
									"case":	13,
									"scores":	[-4.013036542015743]
								}, {
									"case":	14,
									"scores":	[-4.013036542015743]
								}, {
									"case":	15,
									"scores":	[-4.013036542015743]
								}, {
									"case":	16,
									"scores":	[-4.013036542015743]
								}, {
									"case":	17,
									"scores":	[-4.013036542015743]
								}, {
									"case":	18,
									"scores":	[-4.013036542015743]
								}, {
									"case":	19,
									"scores":	[-4.013036542015743]
								}, {
									"case":	20,
									"scores":	[-4.013036542015743]
								}, {
									"case":	21,
									"scores":	[-6.5038843692157426, -4.2218052520157432, -5.8073213250157432, -6.1622661820157427, -6.0728434820157426]
								}, {
									"case":	22,
									"scores":	[-6.5844952520157429, -8.8665743692157442, -8.1700113250157429, -8.52495618201574, -8.43553348201574]
								}, {
									"case":	23,
									"scores":	[-4.321713452015743, -6.6037925692157424, -5.9072295250157429, -6.2621743820157425, -6.1727516820157424]
								}, {
									"case":	24,
									"scores":	[-6.5844952520157429, -8.8665743692157442, -8.1700113250157429, -8.52495618201574, -8.43553348201574]
								}, {
									"case":	25,
									"scores":	[-6.5844952520157429, -8.8665743692157442, -8.1700113250157429, -8.52495618201574, -8.43553348201574]
								}]
						}, {
							"switch":	4,
							"types":	[[], [], [1], [], [], [], [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [], [], [], [], [], [], [], [], []],
							"begin_line":	13,
							"begin_column":	2,
							"end_line":	13,
							"end_column":	7,
							"patch_codes":	["if (!__is_neg(\"\", \"L13\", 5, &(fin), sizeof (fin), &(c), sizeof (c), &(i), sizeof (i), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    c = _IO_getc(fin);\n", "c = _IO_feof(fin)", "c = _IO_ferror(fin)", "c = _IO_ftrylockfile(fin)", "c = _IO_peekc_locked(fin)", "c = __uflow(fin)", "c = __underflow(fin)", "c = fclose(fin)", "c = feof(fin)", "c = feof_unlocked(fin)", "c = ferror(fin)", "c = ferror_unlocked(fin)", "c = fflush(fin)", "c = fflush_unlocked(fin)", "c = fgetc(fin)", "c = fgetc_unlocked(fin)", "c = fileno(fin)", "c = fileno_unlocked(fin)", "c = ftrylockfile(fin)", "c = getc(fin)", "c = getc_unlocked(fin)", "c = getw(fin)", "c = pclose(fin)", "c = (-1)", "c = (0)", "c = (1)", "c = (60)", "c = (c)", "c = _IO_getc((&argc))", "c = _IO_getc((&argv))", "c = _IO_getc((&c))", "c = _IO_getc((&filename))", "c = _IO_getc((&fin))", "c = _IO_getc((&i))", "c = _IO_getc((fin))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.4423803950157428, -3.4263148950157429, -3.9076090950157427, -5.418103522015743, -4.9811385220157431]
								}, {
									"case":	2,
									"scores":	[-4.013036542015743]
								}, {
									"case":	3,
									"scores":	[-4.013036542015743]
								}, {
									"case":	4,
									"scores":	[-4.013036542015743]
								}, {
									"case":	5,
									"scores":	[-4.013036542015743]
								}, {
									"case":	6,
									"scores":	[-4.013036542015743]
								}, {
									"case":	7,
									"scores":	[-4.013036542015743]
								}, {
									"case":	8,
									"scores":	[-4.013036542015743]
								}, {
									"case":	9,
									"scores":	[-4.013036542015743]
								}, {
									"case":	10,
									"scores":	[-4.013036542015743]
								}, {
									"case":	11,
									"scores":	[-4.013036542015743]
								}, {
									"case":	12,
									"scores":	[-4.013036542015743]
								}, {
									"case":	13,
									"scores":	[-4.013036542015743]
								}, {
									"case":	14,
									"scores":	[-4.013036542015743]
								}, {
									"case":	15,
									"scores":	[-4.013036542015743]
								}, {
									"case":	16,
									"scores":	[-4.013036542015743]
								}, {
									"case":	17,
									"scores":	[-4.013036542015743]
								}, {
									"case":	18,
									"scores":	[-4.013036542015743]
								}, {
									"case":	19,
									"scores":	[-4.013036542015743]
								}, {
									"case":	20,
									"scores":	[-4.013036542015743]
								}, {
									"case":	21,
									"scores":	[-4.013036542015743]
								}, {
									"case":	22,
									"scores":	[-4.013036542015743]
								}, {
									"case":	23,
									"scores":	[-4.013036542015743]
								}, {
									"case":	24,
									"scores":	[-4.013036542015743]
								}, {
									"case":	25,
									"scores":	[-4.013036542015743]
								}, {
									"case":	26,
									"scores":	[-4.013036542015743]
								}, {
									"case":	27,
									"scores":	[-4.013036542015743]
								}, {
									"case":	28,
									"scores":	[-4.013036542015743]
								}, {
									"case":	29,
									"scores":	[-4.013036542015743]
								}, {
									"case":	30,
									"scores":	[-4.013036542015743]
								}, {
									"case":	31,
									"scores":	[-4.013036542015743]
								}, {
									"case":	32,
									"scores":	[-4.013036542015743]
								}, {
									"case":	33,
									"scores":	[-4.013036542015743]
								}, {
									"case":	34,
									"scores":	[-4.013036542015743]
								}, {
									"case":	35,
									"scores":	[-4.013036542015743]
								}]
						}]
				}, {
					"line":	13,
					"switches":	[{
							"switch":	5,
							"types":	[[], [], [], [], [21, 22, 23, 24, 25], [], [], [], [], [15, 16, 17, 18, 19, 20], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [], [], [], [], [], [], []],
							"begin_line":	14,
							"begin_column":	7,
							"end_line":	14,
							"end_column":	7,
							"patch_codes":	["c = (-1)", "c = (0)", "c = (1)", "c = (60)", "c = (c)", "c = _IO_getc((fin))", "fclose((fin))", "filename[i] = (-1)", "filename[i] = (0)", "filename[i] = (1)", "filename[i] = (60)", "filename[i] = (c)", "fin = (fin)", "fin = fopen((argv)[1], \"r\")", "c = _IO_getc(fin)", "fclose(fin)", "filename[i] = '\\x00'", "filename[i] = c", "fin = fopen(argv[1], \"r\")", "printf(\"%d\\n\", i)", "if (__is_neg(\"\", \"L14\", 5, &(c), sizeof (c), &(fin), sizeof (fin), &(i), sizeof (i), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    break;\n", "if (__is_neg(\"\", \"L14\", 5, &(c), sizeof (c), &(fin), sizeof (fin), &(i), sizeof (i), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return -1;\n", "if (__is_neg(\"\", \"L14\", 5, &(c), sizeof (c), &(fin), sizeof (fin), &(i), sizeof (i), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return 0;\n", "if (__is_neg(\"\", \"L14\", 5, &(c), sizeof (c), &(fin), sizeof (fin), &(i), sizeof (i), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return 1;\n", "if (__is_neg(\"\", \"L14\", 5, &(c), sizeof (c), &(fin), sizeof (fin), &(i), sizeof (i), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return 60;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	2,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	3,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	4,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	5,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	6,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	7,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	8,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	9,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	10,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	11,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	12,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	13,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	14,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	15,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	16,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	17,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	18,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	19,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	20,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	21,
									"scores":	[-4.5355262446982243, -6.8935148043982242, -5.9963231020982235, -7.1619063746982246, -7.0724836746982245]
								}, {
									"case":	22,
									"scores":	[-6.898216244698224, -9.2562048043982248, -8.3590131020982241, -9.5245963746982252, -9.4351736746982251]
								}, {
									"case":	23,
									"scores":	[-4.6354344446982241, -6.993423004398224, -6.0962313020982233, -7.2618145746982243, -7.1723918746982243]
								}, {
									"case":	24,
									"scores":	[-6.898216244698224, -9.2562048043982248, -8.3590131020982241, -9.5245963746982252, -9.4351736746982251]
								}, {
									"case":	25,
									"scores":	[-6.898216244698224, -9.2562048043982248, -8.3590131020982241, -9.5245963746982252, -9.4351736746982251]
								}]
						}, {
							"switch":	6,
							"types":	[[3], [1], [], [], [], [], [], [], [], [], [], [], [2], [], [], [], [], []],
							"begin_line":	14,
							"begin_column":	9,
							"end_line":	17,
							"end_column":	9,
							"patch_codes":	["if ((c == (-1)) || __is_neg(\"\", \"L14\", 5, &(c), sizeof (c), &(fin), sizeof (fin), &(i), sizeof (i), &(argv), sizeof (argv), &(argc), sizeof (argc))) {\n    filename[i] = '\\x00';\n    break;\n}\n", "if (__is_neg(\"\", \"L14\", 5, &(c), sizeof (c), &(fin), sizeof (fin), &(i), sizeof (i), &(argv), sizeof (argv), &(argc), sizeof (argc))) {\n    filename[i] = '\\x00';\n    break;\n}\n", "if ((c == (-1)) && !__is_neg(\"\", \"L14\", 5, &(c), sizeof (c), &(fin), sizeof (fin), &(i), sizeof (i), &(argv), sizeof (argv), &(argc), sizeof (argc))) {\n    filename[i] = '\\x00';\n    break;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-0.16817539842814666, -4.3216006981281456, -2.8964501514281462, -4.4069445784281456, -3.9699795784281458]
								}, {
									"case":	2,
									"scores":	[-0.48184371422814509, -4.6352690139281467, -3.2101184672281455, -4.7206128942281458, -4.283647894228146]
								}, {
									"case":	3,
									"scores":	[-0.16817539842814666, -4.3216006981281456, -2.8964501514281462, -4.4069445784281456, -3.9699795784281458]
								}]
						}, {
							"switch":	7,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	14,
							"begin_column":	9,
							"end_line":	17,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L14\", 5, &(c), sizeof (c), &(fin), sizeof (fin), &(i), sizeof (i), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    if (c == (-1)) {\n        filename[i] = '\\x00';\n        break;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.3588981546982244, -5.5123234543982242, -4.0871729076982239, -5.5976673346982242, -5.1607023346982235]
								}]
						}]
				}, {
					"line":	17,
					"switches":	[{
							"switch":	8,
							"types":	[[], [], [], [], [21, 22, 23, 24, 25], [], [], [], [], [15, 16, 17, 18, 19, 20], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [], [], [], [], [], [], []],
							"begin_line":	18,
							"begin_column":	7,
							"end_line":	18,
							"end_column":	7,
							"patch_codes":	["c = (-1)", "c = (0)", "c = (1)", "c = (60)", "c = (c)", "c = _IO_getc((fin))", "fclose((fin))", "filename[i] = (-1)", "filename[i] = (0)", "filename[i] = (1)", "filename[i] = (60)", "filename[i] = (c)", "fin = (fin)", "fin = fopen((argv)[1], \"r\")", "c = _IO_getc(fin)", "fclose(fin)", "filename[i] = '\\x00'", "filename[i] = c", "fin = fopen(argv[1], \"r\")", "printf(\"%d\\n\", i)", "if (__is_neg(\"\", \"L18\", 5, &(i), sizeof (i), &(c), sizeof (c), &(fin), sizeof (fin), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    break;\n", "if (__is_neg(\"\", \"L18\", 5, &(i), sizeof (i), &(c), sizeof (c), &(fin), sizeof (fin), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return -1;\n", "if (__is_neg(\"\", \"L18\", 5, &(i), sizeof (i), &(c), sizeof (c), &(fin), sizeof (fin), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return 0;\n", "if (__is_neg(\"\", \"L18\", 5, &(i), sizeof (i), &(c), sizeof (c), &(fin), sizeof (fin), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return 1;\n", "if (__is_neg(\"\", \"L18\", 5, &(i), sizeof (i), &(c), sizeof (c), &(fin), sizeof (fin), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return 60;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	2,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	3,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	4,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	5,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	6,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	7,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	8,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	9,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	10,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	11,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	12,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	13,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	14,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	15,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	16,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	17,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	18,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	19,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	20,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	21,
									"scores":	[-4.8802279837807045, -2.7795199155807042, -5.9174321970807044, -6.1858237673807039, -6.0964010673807039]
								}, {
									"case":	22,
									"scores":	[-7.2429179837807052, -5.1422099155807048, -8.2801221970807042, -8.5485137673807046, -8.4590910673807045]
								}, {
									"case":	23,
									"scores":	[-4.9801361837807043, -2.8794281155807044, -6.0173403970807042, -6.2857319673807037, -6.1963092673807036]
								}, {
									"case":	24,
									"scores":	[-7.2429179837807052, -5.1422099155807048, -8.2801221970807042, -8.5485137673807046, -8.4590910673807045]
								}, {
									"case":	25,
									"scores":	[-7.2429179837807052, -5.1422099155807048, -8.2801221970807042, -8.5485137673807046, -8.4590910673807045]
								}]
						}, {
							"switch":	9,
							"types":	[[], [], [1], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	18,
							"begin_column":	9,
							"end_line":	18,
							"end_column":	23,
							"patch_codes":	["if (!__is_neg(\"\", \"L18\", 5, &(i), sizeof (i), &(c), sizeof (c), &(fin), sizeof (fin), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    filename[i] = c;\n", "filename[i] = (-1)", "filename[i] = (0 * argc)", "filename[i] = (0 * c)", "filename[i] = (0 * i)", "filename[i] = (0)", "filename[i] = (1)", "filename[i] = (60)", "filename[i] = (argc != 0)", "filename[i] = (argc != c)", "filename[i] = (argc != i)", "filename[i] = (argc * c)", "filename[i] = (argc * i)", "filename[i] = (argc + 0)", "filename[i] = (argc + c)", "filename[i] = (argc + i)", "filename[i] = (argc - 0)", "filename[i] = (argc - c)", "filename[i] = (argc - i)", "filename[i] = (argc == 0)", "filename[i] = (argc == c)", "filename[i] = (argc == i)", "filename[i] = (argv != 0)", "filename[i] = (argv == 0)", "filename[i] = (c != 0)", "filename[i] = (c * argc)", "filename[i] = (c * i)", "filename[i] = (c + 0)", "filename[i] = (c - 0)", "filename[i] = (c == 0)", "filename[i] = (c)", "filename[i] = (filename != 0)", "filename[i] = (filename == 0)", "filename[i] = (fin != 0)", "filename[i] = (fin == 0)", "filename[i] = (i != 0)", "filename[i] = (i != c)", "filename[i] = (i * argc)", "filename[i] = (i * c)", "filename[i] = (i + 0)", "filename[i] = (i + c)", "filename[i] = (i - 0)", "filename[i] = (i - c)", "filename[i] = (i == 0)", "filename[i] = (i == c)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.4061087003807042, -3.6125237233807046, -5.3942957470807045, -5.4796396273807044, -5.0426746273807046]
								}, {
									"case":	2,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	3,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	4,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	5,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	6,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	7,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	8,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	9,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	10,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	11,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	12,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	13,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	14,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	15,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	16,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	17,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	18,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	19,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	20,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	21,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	22,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	23,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	24,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	25,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	26,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	27,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	28,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	29,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	30,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	31,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	32,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	33,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	34,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	35,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	36,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	37,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	38,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	39,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	40,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	41,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	42,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	43,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	44,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	45,
									"scores":	[-3.9726311273807045]
								}]
						}]
				}, {
					"line":	10,
					"switches":	[{
							"switch":	2,
							"types":	[[], [], [], [], [12, 13, 14, 15], [], [], [], [], [8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7], [], [], [], [], [], [], []],
							"begin_line":	11,
							"begin_column":	3,
							"end_line":	11,
							"end_column":	3,
							"patch_codes":	["fclose((fin))", "filename[i] = (-1)", "filename[i] = (0)", "filename[i] = (1)", "filename[i] = (60)", "fin = (fin)", "fin = fopen((argv)[1], \"r\")", "fclose(fin)", "filename[i] = '\\x00'", "fin = fopen(argv[1], \"r\")", "printf(\"%d\\n\", i)", "if (__is_neg(\"\", \"L11\", 4, &(i), sizeof (i), &(fin), sizeof (fin), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return -1;\n", "if (__is_neg(\"\", \"L11\", 4, &(i), sizeof (i), &(fin), sizeof (fin), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return 0;\n", "if (__is_neg(\"\", \"L11\", 4, &(i), sizeof (i), &(fin), sizeof (fin), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return 1;\n", "if (__is_neg(\"\", \"L11\", 4, &(i), sizeof (i), &(fin), sizeof (fin), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return 60;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.053441956650782]
								}, {
									"case":	2,
									"scores":	[-4.053441956650782]
								}, {
									"case":	3,
									"scores":	[-4.053441956650782]
								}, {
									"case":	4,
									"scores":	[-4.053441956650782]
								}, {
									"case":	5,
									"scores":	[-4.053441956650782]
								}, {
									"case":	6,
									"scores":	[-4.053441956650782]
								}, {
									"case":	7,
									"scores":	[-4.053441956650782]
								}, {
									"case":	8,
									"scores":	[-4.053441956650782]
								}, {
									"case":	9,
									"scores":	[-4.053441956650782]
								}, {
									"case":	10,
									"scores":	[-4.053441956650782]
								}, {
									"case":	11,
									"scores":	[-4.053441956650782]
								}, {
									"case":	12,
									"scores":	[-7.554296080750782, -4.33819252865078, -8.72588425865078, -8.46411575865078]
								}, {
									"case":	13,
									"scores":	[-5.291514280750782, -2.0754107286507812, -6.4631024586507815, -6.2013339586507819]
								}, {
									"case":	14,
									"scores":	[-7.554296080750782, -4.33819252865078, -8.72588425865078, -8.46411575865078]
								}, {
									"case":	15,
									"scores":	[-7.554296080750782, -4.33819252865078, -8.72588425865078, -8.46411575865078]
								}]
						}, {
							"switch":	10,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	11,
							"begin_column":	5,
							"end_line":	19,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L11\", 4, &(i), sizeof (i), &(fin), sizeof (fin), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    for (i = 0; i <= 60; i++) {\n        char c;\n        c = _IO_getc(fin);\n        if (c == (-1)) {\n            filename[i] = '\\x00';\n            break;\n        }\n        filename[i] = c;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.8000306626507818, -3.5479504766507826, -5.3500907066507821, -4.7097692566507821]
								}]
						}]
				}, {
					"line":	19,
					"switches":	[{
							"switch":	11,
							"types":	[[], [], [], [], [12, 13, 14, 15], [], [], [], [], [8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7], [], [], [], [], [], [], []],
							"begin_line":	20,
							"begin_column":	3,
							"end_line":	20,
							"end_column":	3,
							"patch_codes":	["fclose((fin))", "filename[i] = (-1)", "filename[i] = (0)", "filename[i] = (1)", "filename[i] = (60)", "fin = (fin)", "fin = fopen((argv)[1], \"r\")", "fclose(fin)", "filename[i] = '\\x00'", "fin = fopen(argv[1], \"r\")", "printf(\"%d\\n\", i)", "if (__is_neg(\"\", \"L20\", 4, &(fin), sizeof (fin), &(i), sizeof (i), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return -1;\n", "if (__is_neg(\"\", \"L20\", 4, &(fin), sizeof (fin), &(i), sizeof (i), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return 0;\n", "if (__is_neg(\"\", \"L20\", 4, &(fin), sizeof (fin), &(i), sizeof (i), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return 1;\n", "if (__is_neg(\"\", \"L20\", 4, &(fin), sizeof (fin), &(i), sizeof (i), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return 60;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.952428420063185]
								}, {
									"case":	2,
									"scores":	[-3.952428420063185]
								}, {
									"case":	3,
									"scores":	[-3.952428420063185]
								}, {
									"case":	4,
									"scores":	[-3.952428420063185]
								}, {
									"case":	5,
									"scores":	[-3.952428420063185]
								}, {
									"case":	6,
									"scores":	[-3.952428420063185]
								}, {
									"case":	7,
									"scores":	[-3.952428420063185]
								}, {
									"case":	8,
									"scores":	[-3.952428420063185]
								}, {
									"case":	9,
									"scores":	[-3.952428420063185]
								}, {
									"case":	10,
									"scores":	[-3.952428420063185]
								}, {
									"case":	11,
									"scores":	[-3.952428420063185]
								}, {
									"case":	12,
									"scores":	[-5.4074047097631848, -7.4054919210631844, -8.7392028800631838, -8.4774343800631851]
								}, {
									"case":	13,
									"scores":	[-3.1446229097631848, -5.1427101210631845, -6.4764210800631847, -6.2146525800631842]
								}, {
									"case":	14,
									"scores":	[-5.4074047097631848, -7.4054919210631844, -8.7392028800631838, -8.4774343800631851]
								}, {
									"case":	15,
									"scores":	[-5.4074047097631848, -7.4054919210631844, -8.7392028800631838, -8.4774343800631851]
								}]
						}, {
							"switch":	12,
							"types":	[[], [], [1], [], [], [], [35, 36, 37, 38, 39, 40], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [], [], [], [], [], [], [], [], []],
							"begin_line":	20,
							"begin_column":	5,
							"end_line":	20,
							"end_column":	15,
							"patch_codes":	["if (!__is_neg(\"\", \"L20\", 4, &(fin), sizeof (fin), &(i), sizeof (i), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    fclose(fin);\n", "_IO_feof(fin)", "_IO_ferror(fin)", "_IO_flockfile(fin)", "_IO_free_backup_area(fin)", "_IO_ftrylockfile(fin)", "_IO_funlockfile(fin)", "_IO_getc(fin)", "_IO_peekc_locked(fin)", "__uflow(fin)", "__underflow(fin)", "clearerr(fin)", "clearerr_unlocked(fin)", "feof(fin)", "feof_unlocked(fin)", "ferror(fin)", "ferror_unlocked(fin)", "fflush(fin)", "fflush_unlocked(fin)", "fgetc(fin)", "fgetc_unlocked(fin)", "fileno(fin)", "fileno_unlocked(fin)", "flockfile(fin)", "ftell(fin)", "ftello(fin)", "ftrylockfile(fin)", "funlockfile(fin)", "getc(fin)", "getc_unlocked(fin)", "getw(fin)", "pclose(fin)", "rewind(fin)", "setlinebuf(fin)", "fclose((&argc))", "fclose((&argv))", "fclose((&filename))", "fclose((&fin))", "fclose((&i))", "fclose((fin))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.4261965867631856, -4.1572359850631848, -4.8775696700631848, -4.2372482200631847]
								}, {
									"case":	2,
									"scores":	[-3.952428420063185]
								}, {
									"case":	3,
									"scores":	[-3.952428420063185]
								}, {
									"case":	4,
									"scores":	[-3.952428420063185]
								}, {
									"case":	5,
									"scores":	[-3.952428420063185]
								}, {
									"case":	6,
									"scores":	[-3.952428420063185]
								}, {
									"case":	7,
									"scores":	[-3.952428420063185]
								}, {
									"case":	8,
									"scores":	[-3.952428420063185]
								}, {
									"case":	9,
									"scores":	[-3.952428420063185]
								}, {
									"case":	10,
									"scores":	[-3.952428420063185]
								}, {
									"case":	11,
									"scores":	[-3.952428420063185]
								}, {
									"case":	12,
									"scores":	[-3.952428420063185]
								}, {
									"case":	13,
									"scores":	[-3.952428420063185]
								}, {
									"case":	14,
									"scores":	[-3.952428420063185]
								}, {
									"case":	15,
									"scores":	[-3.952428420063185]
								}, {
									"case":	16,
									"scores":	[-3.952428420063185]
								}, {
									"case":	17,
									"scores":	[-3.952428420063185]
								}, {
									"case":	18,
									"scores":	[-3.952428420063185]
								}, {
									"case":	19,
									"scores":	[-3.952428420063185]
								}, {
									"case":	20,
									"scores":	[-3.952428420063185]
								}, {
									"case":	21,
									"scores":	[-3.952428420063185]
								}, {
									"case":	22,
									"scores":	[-3.952428420063185]
								}, {
									"case":	23,
									"scores":	[-3.952428420063185]
								}, {
									"case":	24,
									"scores":	[-3.952428420063185]
								}, {
									"case":	25,
									"scores":	[-3.952428420063185]
								}, {
									"case":	26,
									"scores":	[-3.952428420063185]
								}, {
									"case":	27,
									"scores":	[-3.952428420063185]
								}, {
									"case":	28,
									"scores":	[-3.952428420063185]
								}, {
									"case":	29,
									"scores":	[-3.952428420063185]
								}, {
									"case":	30,
									"scores":	[-3.952428420063185]
								}, {
									"case":	31,
									"scores":	[-3.952428420063185]
								}, {
									"case":	32,
									"scores":	[-3.952428420063185]
								}, {
									"case":	33,
									"scores":	[-3.952428420063185]
								}, {
									"case":	34,
									"scores":	[-3.952428420063185]
								}, {
									"case":	35,
									"scores":	[-3.952428420063185]
								}, {
									"case":	36,
									"scores":	[-3.952428420063185]
								}, {
									"case":	37,
									"scores":	[-3.952428420063185]
								}, {
									"case":	38,
									"scores":	[-3.952428420063185]
								}, {
									"case":	39,
									"scores":	[-3.952428420063185]
								}, {
									"case":	40,
									"scores":	[-3.952428420063185]
								}]
						}]
				}, {
					"line":	20,
					"switches":	[{
							"switch":	13,
							"types":	[[], [], [], [], [12, 13, 14, 15], [], [], [], [], [8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7], [], [], [], [], [], [], []],
							"begin_line":	21,
							"begin_column":	3,
							"end_line":	21,
							"end_column":	3,
							"patch_codes":	["fclose((fin))", "filename[i] = (-1)", "filename[i] = (0)", "filename[i] = (1)", "filename[i] = (60)", "fin = (fin)", "fin = fopen((argv)[1], \"r\")", "fclose(fin)", "filename[i] = '\\x00'", "fin = fopen(argv[1], \"r\")", "printf(\"%d\\n\", i)", "if (__is_neg(\"\", \"L21\", 4, &(i), sizeof (i), &(fin), sizeof (fin), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return -1;\n", "if (__is_neg(\"\", \"L21\", 4, &(i), sizeof (i), &(fin), sizeof (fin), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return 0;\n", "if (__is_neg(\"\", \"L21\", 4, &(i), sizeof (i), &(fin), sizeof (fin), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return 1;\n", "if (__is_neg(\"\", \"L21\", 4, &(i), sizeof (i), &(fin), sizeof (fin), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return 60;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	2,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	3,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	4,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	5,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	6,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	7,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	8,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	9,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	10,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	11,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	12,
									"scores":	[-5.9836064137456653, -8.0242278024456652, -8.2926193727456656, -8.2031966727456656]
								}, {
									"case":	13,
									"scores":	[-3.7208246137456658, -5.7614460024456653, -6.0298375727456648, -5.9404148727456647]
								}, {
									"case":	14,
									"scores":	[-5.9836064137456653, -8.0242278024456652, -8.2926193727456656, -8.2031966727456656]
								}, {
									"case":	15,
									"scores":	[-5.9836064137456653, -8.0242278024456652, -8.2926193727456656, -8.2031966727456656]
								}]
						}, {
							"switch":	14,
							"types":	[[], [], [1], [], [], [], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [], [2, 3], [], [], [], [], [], [], [], [], []],
							"begin_line":	21,
							"begin_column":	5,
							"end_line":	21,
							"end_column":	21,
							"patch_codes":	["if (!__is_neg(\"\", \"L21\", 4, &(i), sizeof (i), &(fin), sizeof (fin), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    printf(\"%d\\n\", i);\n", "__overflow(\"%d\\n\", i)", "printf(\"%d\\n\", i)", "printf(\"%d\\n\", (0 * argc))", "printf(\"%d\\n\", (0 * i))", "printf(\"%d\\n\", (argc != 0))", "printf(\"%d\\n\", (argc != i))", "printf(\"%d\\n\", (argc * i))", "printf(\"%d\\n\", (argc + 0))", "printf(\"%d\\n\", (argc + i))", "printf(\"%d\\n\", (argc - 0))", "printf(\"%d\\n\", (argc - i))", "printf(\"%d\\n\", (argc == 0))", "printf(\"%d\\n\", (argc == i))", "printf(\"%d\\n\", (argc))", "printf(\"%d\\n\", (argv != 0))", "printf(\"%d\\n\", (argv == 0))", "printf(\"%d\\n\", (filename != 0))", "printf(\"%d\\n\", (filename == 0))", "printf(\"%d\\n\", (fin != 0))", "printf(\"%d\\n\", (fin == 0))", "printf(\"%d\\n\", (i != 0))", "printf(\"%d\\n\", (i * argc))", "printf(\"%d\\n\", (i + 0))", "printf(\"%d\\n\", (i - 0))", "printf(\"%d\\n\", (i == 0))", "printf(\"%d\\n\", (i))", "printf((&argc), i)", "printf((&argv), i)", "printf((&filename), i)", "printf((&fin), i)", "printf((&i), i)", "printf((0), i)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.637234080745666, -4.1591656354456656, -4.2445095157456656, -3.8075445157456653]
								}, {
									"case":	2,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	3,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	4,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	5,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	6,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	7,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	8,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	9,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	10,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	11,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	12,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	13,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	14,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	15,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	16,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	17,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	18,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	19,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	20,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	21,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	22,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	23,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	24,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	25,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	26,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	27,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	28,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	29,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	30,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	31,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	32,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	33,
									"scores":	[-3.9322257127456655]
								}]
						}]
				}, {
					"line":	21,
					"switches":	[{
							"switch":	15,
							"types":	[[], [], [], [], [12, 13, 14, 15], [], [], [], [], [8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7], [], [], [], [], [], [], []],
							"begin_line":	22,
							"begin_column":	3,
							"end_line":	22,
							"end_column":	3,
							"patch_codes":	["fclose((fin))", "filename[i] = (-1)", "filename[i] = (0)", "filename[i] = (1)", "filename[i] = (60)", "fin = (fin)", "fin = fopen((argv)[1], \"r\")", "fclose(fin)", "filename[i] = '\\x00'", "fin = fopen(argv[1], \"r\")", "printf(\"%d\\n\", i)", "if (__is_neg(\"\", \"L22\", 4, &(i), sizeof (i), &(fin), sizeof (fin), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return -1;\n", "if (__is_neg(\"\", \"L22\", 4, &(i), sizeof (i), &(fin), sizeof (fin), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return 0;\n", "if (__is_neg(\"\", \"L22\", 4, &(i), sizeof (i), &(fin), sizeof (fin), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return 1;\n", "if (__is_neg(\"\", \"L22\", 4, &(i), sizeof (i), &(fin), sizeof (fin), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return 60;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.912023005428146]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-6.7587230651281462, -7.6097046841281468, -7.8780962544281454, -7.7886735544281454]
								}, {
									"case":	13,
									"scores":	[-4.4959412651281454, -5.346922884128146, -5.6153144544281455, -5.5258917544281463]
								}, {
									"case":	14,
									"scores":	[-6.7587230651281462, -7.6097046841281468, -7.8780962544281454, -7.7886735544281454]
								}, {
									"case":	15,
									"scores":	[-6.7587230651281462, -7.6097046841281468, -7.8780962544281454, -7.7886735544281454]
								}]
						}, {
							"switch":	16,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	22,
							"begin_column":	5,
							"end_line":	22,
							"end_column":	12,
							"patch_codes":	["if (!__is_neg(\"\", \"L22\", 4, &(i), sizeof (i), &(fin), sizeof (fin), &(argv), sizeof (argv), &(argc), sizeof (argc)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.7138017931281455, -4.5830624281281462, -4.6684063084281462, -4.2314413084281455]
								}]
						}]
				}]
		}],
	"sizes":	[{
			"switch":	0,
			"case":	6,
			"size":	3
		}, {
			"switch":	0,
			"case":	7,
			"size":	3
		}, {
			"switch":	0,
			"case":	8,
			"size":	3
		}, {
			"switch":	0,
			"case":	9,
			"size":	3
		}, {
			"switch":	1,
			"case":	1,
			"size":	3
		}, {
			"switch":	2,
			"case":	12,
			"size":	4
		}, {
			"switch":	2,
			"case":	13,
			"size":	4
		}, {
			"switch":	2,
			"case":	14,
			"size":	4
		}, {
			"switch":	2,
			"case":	15,
			"size":	4
		}, {
			"switch":	3,
			"case":	21,
			"size":	5
		}, {
			"switch":	3,
			"case":	22,
			"size":	5
		}, {
			"switch":	3,
			"case":	23,
			"size":	5
		}, {
			"switch":	3,
			"case":	24,
			"size":	5
		}, {
			"switch":	3,
			"case":	25,
			"size":	5
		}, {
			"switch":	4,
			"case":	1,
			"size":	5
		}, {
			"switch":	5,
			"case":	21,
			"size":	5
		}, {
			"switch":	5,
			"case":	22,
			"size":	5
		}, {
			"switch":	5,
			"case":	23,
			"size":	5
		}, {
			"switch":	5,
			"case":	24,
			"size":	5
		}, {
			"switch":	5,
			"case":	25,
			"size":	5
		}, {
			"switch":	6,
			"case":	1,
			"size":	5
		}, {
			"switch":	6,
			"case":	2,
			"size":	5
		}, {
			"switch":	6,
			"case":	3,
			"size":	5
		}, {
			"switch":	7,
			"case":	1,
			"size":	5
		}, {
			"switch":	8,
			"case":	21,
			"size":	5
		}, {
			"switch":	8,
			"case":	22,
			"size":	5
		}, {
			"switch":	8,
			"case":	23,
			"size":	5
		}, {
			"switch":	8,
			"case":	24,
			"size":	5
		}, {
			"switch":	8,
			"case":	25,
			"size":	5
		}, {
			"switch":	9,
			"case":	1,
			"size":	5
		}, {
			"switch":	10,
			"case":	1,
			"size":	4
		}, {
			"switch":	11,
			"case":	12,
			"size":	4
		}, {
			"switch":	11,
			"case":	13,
			"size":	4
		}, {
			"switch":	11,
			"case":	14,
			"size":	4
		}, {
			"switch":	11,
			"case":	15,
			"size":	4
		}, {
			"switch":	12,
			"case":	1,
			"size":	4
		}, {
			"switch":	13,
			"case":	12,
			"size":	4
		}, {
			"switch":	13,
			"case":	13,
			"size":	4
		}, {
			"switch":	13,
			"case":	14,
			"size":	4
		}, {
			"switch":	13,
			"case":	15,
			"size":	4
		}, {
			"switch":	14,
			"case":	1,
			"size":	4
		}, {
			"switch":	15,
			"case":	12,
			"size":	4
		}, {
			"switch":	15,
			"case":	13,
			"size":	4
		}, {
			"switch":	15,
			"case":	14,
			"size":	4
		}, {
			"switch":	15,
			"case":	15,
			"size":	4
		}, {
			"switch":	16,
			"case":	1,
			"size":	4
		}],
	"func_locations":	[{
			"file":	"prog.c",
			"functions":	[{
					"function":	"main",
					"begin":	5,
					"end":	23
				}]
		}]
}
