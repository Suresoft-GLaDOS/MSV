{
	"switch_num":	57,
	"case_num":	[311, 5, 2, 311, 3, 329, 5, 328, 103, 2, 329, 3, 2, 329, 19, 328, 3, 1, 2, 311, 2279, 313, 8, 384, 260, 384, 260, 383, 6, 383, 1, 1, 313, 6, 337, 337, 257, 338, 23, 338, 23, 337, 3, 337, 3, 337, 4, 1, 337, 338, 27, 1, 2, 2, 2, 2, 311],
	"switch_cluster":	[[2, 8, 9, 12, 14, 17, 18, 20, 24, 26, 30, 31, 36, 38, 40, 47, 50, 51, 52, 53, 54, 55], [1, 4, 6, 11, 16, 22, 28, 33, 42, 44, 46], [0, 3, 5, 7, 10, 13, 15, 19, 21, 23, 25, 27, 29, 32, 34, 35, 37, 39, 41, 43, 45, 48, 49, 56], []],
	"priority":	[{
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	428,
			"primary_score":	999649,
			"second_score":	3110
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	429,
			"primary_score":	999649,
			"second_score":	3108
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	479,
			"primary_score":	999649,
			"second_score":	3111
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	485,
			"primary_score":	999649,
			"second_score":	2
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	575,
			"primary_score":	999649,
			"second_score":	443613
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	576,
			"primary_score":	999649,
			"second_score":	443612
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	578,
			"primary_score":	999649,
			"second_score":	443611
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	579,
			"primary_score":	999649,
			"second_score":	443408
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	580,
			"primary_score":	999649,
			"second_score":	443407
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	583,
			"primary_score":	999649,
			"second_score":	443406
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	590,
			"primary_score":	999649,
			"second_score":	3107
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	592,
			"primary_score":	999649,
			"second_score":	3106
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	593,
			"primary_score":	999649,
			"second_score":	6
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	594,
			"primary_score":	999649,
			"second_score":	5
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	595,
			"primary_score":	999649,
			"second_score":	469
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	596,
			"primary_score":	999649,
			"second_score":	468
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	597,
			"primary_score":	999649,
			"second_score":	467
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	599,
			"primary_score":	999649,
			"second_score":	4
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	601,
			"primary_score":	999649,
			"second_score":	3
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	632,
			"primary_score":	999649,
			"second_score":	443621
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	633,
			"primary_score":	999649,
			"second_score":	443620
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	635,
			"primary_score":	999649,
			"second_score":	443619
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	641,
			"primary_score":	999649,
			"second_score":	443618
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	642,
			"primary_score":	999649,
			"second_score":	443617
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	643,
			"primary_score":	999649,
			"second_score":	443616
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	645,
			"primary_score":	999649,
			"second_score":	443615
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	652,
			"primary_score":	999649,
			"second_score":	443614
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	654,
			"primary_score":	999649,
			"second_score":	443405
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	655,
			"primary_score":	999649,
			"second_score":	443404
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	656,
			"primary_score":	999649,
			"second_score":	443403
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	657,
			"primary_score":	999649,
			"second_score":	443402
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	658,
			"primary_score":	999649,
			"second_score":	443401
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	663,
			"primary_score":	999649,
			"second_score":	443400
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	664,
			"primary_score":	999649,
			"second_score":	443399
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	671,
			"primary_score":	999649,
			"second_score":	443398
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	672,
			"primary_score":	999649,
			"second_score":	443397
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	673,
			"primary_score":	999649,
			"second_score":	443396
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	674,
			"primary_score":	999649,
			"second_score":	443395
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	675,
			"primary_score":	999649,
			"second_score":	443394
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	692,
			"primary_score":	999649,
			"second_score":	122068
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	697,
			"primary_score":	999649,
			"second_score":	122067
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	699,
			"primary_score":	999649,
			"second_score":	122066
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	812,
			"primary_score":	999649,
			"second_score":	122065
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	816,
			"primary_score":	999649,
			"second_score":	122064
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	819,
			"primary_score":	999649,
			"second_score":	122063
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	820,
			"primary_score":	999649,
			"second_score":	122062
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1075,
			"primary_score":	999649,
			"second_score":	444687
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1079,
			"primary_score":	999649,
			"second_score":	443628
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1080,
			"primary_score":	999649,
			"second_score":	443627
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1099,
			"primary_score":	999649,
			"second_score":	443626
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1103,
			"primary_score":	999649,
			"second_score":	443625
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1104,
			"primary_score":	999649,
			"second_score":	443624
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1108,
			"primary_score":	999649,
			"second_score":	443623
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1110,
			"primary_score":	999649,
			"second_score":	443622
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1113,
			"primary_score":	999649,
			"second_score":	443393
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1114,
			"primary_score":	999649,
			"second_score":	443391
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1259,
			"primary_score":	999649,
			"second_score":	443390
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1264,
			"primary_score":	999649,
			"second_score":	443389
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1267,
			"primary_score":	999649,
			"second_score":	443388
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1273,
			"primary_score":	999649,
			"second_score":	443387
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1278,
			"primary_score":	999649,
			"second_score":	443386
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1303,
			"primary_score":	999649,
			"second_score":	443385
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1304,
			"primary_score":	999649,
			"second_score":	443384
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1305,
			"primary_score":	999649,
			"second_score":	443383
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1311,
			"primary_score":	999649,
			"second_score":	443382
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1313,
			"primary_score":	999649,
			"second_score":	443381
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1314,
			"primary_score":	999649,
			"second_score":	443380
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1320,
			"primary_score":	999649,
			"second_score":	443379
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1897,
			"primary_score":	999649,
			"second_score":	122284
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1898,
			"primary_score":	999649,
			"second_score":	122283
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1901,
			"primary_score":	999649,
			"second_score":	122282
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1902,
			"primary_score":	999649,
			"second_score":	122281
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1903,
			"primary_score":	999649,
			"second_score":	122280
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1904,
			"primary_score":	999649,
			"second_score":	122279
		}, {
			"file":	"Zend/zend.c",
			"line":	227,
			"primary_score":	999649,
			"second_score":	125646
		}, {
			"file":	"Zend/zend.c",
			"line":	228,
			"primary_score":	999649,
			"second_score":	125645
		}, {
			"file":	"Zend/zend.c",
			"line":	229,
			"primary_score":	999649,
			"second_score":	125644
		}, {
			"file":	"Zend/zend.c",
			"line":	231,
			"primary_score":	999876,
			"second_score":	126120
		}, {
			"file":	"Zend/zend.c",
			"line":	289,
			"primary_score":	999983,
			"second_score":	126119
		}, {
			"file":	"Zend/zend.c",
			"line":	290,
			"primary_score":	999983,
			"second_score":	126116
		}, {
			"file":	"Zend/zend.c",
			"line":	291,
			"primary_score":	999983,
			"second_score":	125748
		}, {
			"file":	"Zend/zend.c",
			"line":	294,
			"primary_score":	999881,
			"second_score":	126438
		}, {
			"file":	"Zend/zend.c",
			"line":	295,
			"primary_score":	999881,
			"second_score":	126435
		}, {
			"file":	"Zend/zend.c",
			"line":	296,
			"primary_score":	999881,
			"second_score":	126301
		}, {
			"file":	"Zend/zend.c",
			"line":	298,
			"primary_score":	999876,
			"second_score":	125747
		}, {
			"file":	"Zend/zend.c",
			"line":	299,
			"primary_score":	999876,
			"second_score":	125746
		}, {
			"file":	"Zend/zend.c",
			"line":	305,
			"primary_score":	999649,
			"second_score":	125650
		}, {
			"file":	"Zend/zend.c",
			"line":	311,
			"primary_score":	999649,
			"second_score":	125649
		}, {
			"file":	"Zend/zend.c",
			"line":	312,
			"primary_score":	999649,
			"second_score":	125648
		}, {
			"file":	"Zend/zend.c",
			"line":	314,
			"primary_score":	999649,
			"second_score":	125647
		}, {
			"file":	"Zend/zend.c",
			"line":	315,
			"primary_score":	999649,
			"second_score":	125643
		}, {
			"file":	"Zend/zend.c",
			"line":	316,
			"primary_score":	999992,
			"second_score":	125744
		}, {
			"file":	"Zend/zend.c",
			"line":	318,
			"primary_score":	999649,
			"second_score":	125642
		}, {
			"file":	"Zend/zend.c",
			"line":	319,
			"primary_score":	999649,
			"second_score":	120035
		}, {
			"file":	"Zend/zend.c",
			"line":	322,
			"primary_score":	999649,
			"second_score":	120034
		}, {
			"file":	"Zend/zend.c",
			"line":	324,
			"primary_score":	999649,
			"second_score":	125641
		}, {
			"file":	"Zend/zend.c",
			"line":	325,
			"primary_score":	999649,
			"second_score":	125590
		}, {
			"file":	"Zend/zend.c",
			"line":	326,
			"primary_score":	999993,
			"second_score":	125690
		}, {
			"file":	"Zend/zend.c",
			"line":	328,
			"primary_score":	999649,
			"second_score":	125589
		}, {
			"file":	"Zend/zend.c",
			"line":	797,
			"primary_score":	999649,
			"second_score":	103790
		}, {
			"file":	"Zend/zend.c",
			"line":	798,
			"primary_score":	999649,
			"second_score":	103782
		}, {
			"file":	"Zend/zend.c",
			"line":	800,
			"primary_score":	999649,
			"second_score":	47460
		}, {
			"file":	"Zend/zend.c",
			"line":	801,
			"primary_score":	999649,
			"second_score":	47441
		}, {
			"file":	"Zend/zend.c",
			"line":	803,
			"primary_score":	999649,
			"second_score":	14825
		}, {
			"file":	"Zend/zend.c",
			"line":	804,
			"primary_score":	999649,
			"second_score":	14762
		}, {
			"file":	"Zend/zend.c",
			"line":	806,
			"primary_score":	999649,
			"second_score":	14761
		}, {
			"file":	"Zend/zend.c",
			"line":	807,
			"primary_score":	999649,
			"second_score":	14753
		}, {
			"file":	"Zend/zend.c",
			"line":	809,
			"primary_score":	999649,
			"second_score":	14752
		}, {
			"file":	"Zend/zend.c",
			"line":	810,
			"primary_score":	999649,
			"second_score":	14751
		}, {
			"file":	"Zend/zend.c",
			"line":	812,
			"primary_score":	999649,
			"second_score":	14750
		}, {
			"file":	"Zend/zend.c",
			"line":	813,
			"primary_score":	999649,
			"second_score":	6293
		}, {
			"file":	"Zend/zend.c",
			"line":	814,
			"primary_score":	999649,
			"second_score":	6292
		}, {
			"file":	"Zend/zend.c",
			"line":	822,
			"primary_score":	999649,
			"second_score":	6224
		}, {
			"file":	"Zend/zend.c",
			"line":	824,
			"primary_score":	999649,
			"second_score":	6124
		}, {
			"file":	"Zend/zend.c",
			"line":	898,
			"primary_score":	999649,
			"second_score":	119641
		}, {
			"file":	"Zend/zend.c",
			"line":	899,
			"primary_score":	999649,
			"second_score":	119635
		}, {
			"file":	"Zend/zend.c",
			"line":	900,
			"primary_score":	999649,
			"second_score":	119542
		}, {
			"file":	"Zend/zend.c",
			"line":	907,
			"primary_score":	999649,
			"second_score":	118714
		}, {
			"file":	"Zend/zend.c",
			"line":	908,
			"primary_score":	999649,
			"second_score":	118713
		}, {
			"file":	"Zend/zend.c",
			"line":	910,
			"primary_score":	999649,
			"second_score":	118712
		}, {
			"file":	"Zend/zend.c",
			"line":	911,
			"primary_score":	999649,
			"second_score":	118706
		}, {
			"file":	"Zend/zend.c",
			"line":	912,
			"primary_score":	999649,
			"second_score":	118696
		}, {
			"file":	"Zend/zend.c",
			"line":	915,
			"primary_score":	999649,
			"second_score":	118694
		}, {
			"file":	"Zend/zend.c",
			"line":	917,
			"primary_score":	999649,
			"second_score":	113910
		}, {
			"file":	"Zend/zend.c",
			"line":	918,
			"primary_score":	999649,
			"second_score":	113904
		}, {
			"file":	"Zend/zend.c",
			"line":	919,
			"primary_score":	999649,
			"second_score":	113754
		}, {
			"file":	"Zend/zend.c",
			"line":	921,
			"primary_score":	999649,
			"second_score":	113752
		}, {
			"file":	"Zend/zend.c",
			"line":	924,
			"primary_score":	999649,
			"second_score":	113725
		}, {
			"file":	"Zend/zend.c",
			"line":	925,
			"primary_score":	999649,
			"second_score":	113724
		}, {
			"file":	"Zend/zend.c",
			"line":	943,
			"primary_score":	999649,
			"second_score":	113720
		}, {
			"file":	"Zend/zend.c",
			"line":	944,
			"primary_score":	999649,
			"second_score":	113714
		}, {
			"file":	"Zend/zend.c",
			"line":	945,
			"primary_score":	999649,
			"second_score":	113711
		}, {
			"file":	"Zend/zend.c",
			"line":	1192,
			"primary_score":	999649,
			"second_score":	442859
		}, {
			"file":	"Zend/zend.c",
			"line":	1193,
			"primary_score":	999649,
			"second_score":	442858
		}, {
			"file":	"Zend/zend.c",
			"line":	1194,
			"primary_score":	999649,
			"second_score":	442857
		}, {
			"file":	"Zend/zend.c",
			"line":	1195,
			"primary_score":	999649,
			"second_score":	442856
		}, {
			"file":	"Zend/zend.c",
			"line":	1196,
			"primary_score":	999649,
			"second_score":	442855
		}, {
			"file":	"Zend/zend.c",
			"line":	1198,
			"primary_score":	999649,
			"second_score":	442854
		}, {
			"file":	"Zend/zend.c",
			"line":	1199,
			"primary_score":	999649,
			"second_score":	442853
		}, {
			"file":	"Zend/zend.c",
			"line":	1200,
			"primary_score":	999649,
			"second_score":	119689
		}, {
			"file":	"Zend/zend.c",
			"line":	1201,
			"primary_score":	999649,
			"second_score":	119688
		}, {
			"file":	"Zend/zend.c",
			"line":	1202,
			"primary_score":	999649,
			"second_score":	119687
		}, {
			"file":	"Zend/zend.c",
			"line":	1204,
			"primary_score":	999649,
			"second_score":	442847
		}, {
			"file":	"Zend/zend.c",
			"line":	1205,
			"primary_score":	999649,
			"second_score":	427073
		}, {
			"file":	"Zend/zend.c",
			"line":	1206,
			"primary_score":	999649,
			"second_score":	427072
		}, {
			"file":	"Zend/zend.c",
			"line":	1207,
			"primary_score":	999649,
			"second_score":	427071
		}, {
			"file":	"Zend/zend.c",
			"line":	1209,
			"primary_score":	999649,
			"second_score":	426949
		}, {
			"file":	"Zend/zend.c",
			"line":	1210,
			"primary_score":	999649,
			"second_score":	426870
		}, {
			"file":	"Zend/zend.c",
			"line":	1211,
			"primary_score":	999649,
			"second_score":	426869
		}, {
			"file":	"Zend/zend.c",
			"line":	1212,
			"primary_score":	999649,
			"second_score":	426868
		}, {
			"file":	"Zend/zend.c",
			"line":	1213,
			"primary_score":	999649,
			"second_score":	119980
		}, {
			"file":	"Zend/zend.c",
			"line":	1214,
			"primary_score":	999649,
			"second_score":	119978
		}, {
			"file":	"Zend/zend.c",
			"line":	1239,
			"primary_score":	999649,
			"second_score":	119977
		}, {
			"file":	"Zend/zend.c",
			"line":	1240,
			"primary_score":	999649,
			"second_score":	119708
		}, {
			"file":	"Zend/zend.c",
			"line":	1248,
			"primary_score":	999649,
			"second_score":	119686
		}, {
			"file":	"Zend/zend.c",
			"line":	1249,
			"primary_score":	999649,
			"second_score":	119685
		}, {
			"file":	"Zend/zend.c",
			"line":	1250,
			"primary_score":	999649,
			"second_score":	119684
		}, {
			"file":	"Zend/zend.c",
			"line":	1252,
			"primary_score":	999649,
			"second_score":	119683
		}, {
			"file":	"Zend/zend.c",
			"line":	1282,
			"primary_score":	999649,
			"second_score":	113822
		}, {
			"file":	"Zend/zend.h",
			"line":	379,
			"primary_score":	999649,
			"second_score":	15301
		}, {
			"file":	"Zend/zend.h",
			"line":	383,
			"primary_score":	999649,
			"second_score":	252498
		}, {
			"file":	"Zend/zend.h",
			"line":	387,
			"primary_score":	999649,
			"second_score":	126498
		}, {
			"file":	"Zend/zend.h",
			"line":	391,
			"primary_score":	999649,
			"second_score":	15303
		}, {
			"file":	"Zend/zend.h",
			"line":	395,
			"primary_score":	999649,
			"second_score":	126501
		}, {
			"file":	"Zend/zend.h",
			"line":	399,
			"primary_score":	999649,
			"second_score":	427596
		}, {
			"file":	"Zend/zend.h",
			"line":	403,
			"primary_score":	999649,
			"second_score":	17660
		}, {
			"file":	"Zend/zend_API.c",
			"line":	307,
			"primary_score":	999649,
			"second_score":	264533
		}, {
			"file":	"Zend/zend_API.c",
			"line":	308,
			"primary_score":	999649,
			"second_score":	264532
		}, {
			"file":	"Zend/zend_API.c",
			"line":	309,
			"primary_score":	999649,
			"second_score":	264531
		}, {
			"file":	"Zend/zend_API.c",
			"line":	312,
			"primary_score":	999649,
			"second_score":	264530
		}, {
			"file":	"Zend/zend_API.c",
			"line":	313,
			"primary_score":	999649,
			"second_score":	264521
		}, {
			"file":	"Zend/zend_API.c",
			"line":	314,
			"primary_score":	999973,
			"second_score":	264526
		}, {
			"file":	"Zend/zend_API.c",
			"line":	315,
			"primary_score":	999649,
			"second_score":	264520
		}, {
			"file":	"Zend/zend_API.c",
			"line":	320,
			"primary_score":	999649,
			"second_score":	264519
		}, {
			"file":	"Zend/zend_API.c",
			"line":	322,
			"primary_score":	999967,
			"second_score":	264522
		}, {
			"file":	"Zend/zend_API.c",
			"line":	325,
			"primary_score":	999649,
			"second_score":	264518
		}, {
			"file":	"Zend/zend_API.c",
			"line":	416,
			"primary_score":	999649,
			"second_score":	121427
		}, {
			"file":	"Zend/zend_API.c",
			"line":	417,
			"primary_score":	999649,
			"second_score":	121426
		}, {
			"file":	"Zend/zend_API.c",
			"line":	418,
			"primary_score":	999649,
			"second_score":	121425
		}, {
			"file":	"Zend/zend_API.c",
			"line":	431,
			"primary_score":	999649,
			"second_score":	122346
		}, {
			"file":	"Zend/zend_API.c",
			"line":	432,
			"primary_score":	999649,
			"second_score":	121423
		}, {
			"file":	"Zend/zend_API.c",
			"line":	438,
			"primary_score":	999649,
			"second_score":	121421
		}, {
			"file":	"Zend/zend_API.c",
			"line":	439,
			"primary_score":	999649,
			"second_score":	121420
		}, {
			"file":	"Zend/zend_API.c",
			"line":	440,
			"primary_score":	999649,
			"second_score":	121419
		}, {
			"file":	"Zend/zend_API.c",
			"line":	453,
			"primary_score":	999649,
			"second_score":	121418
		}, {
			"file":	"Zend/zend_API.c",
			"line":	632,
			"primary_score":	999901,
			"second_score":	264517
		}, {
			"file":	"Zend/zend_API.c",
			"line":	633,
			"primary_score":	999901,
			"second_score":	264516
		}, {
			"file":	"Zend/zend_API.c",
			"line":	636,
			"primary_score":	999901,
			"second_score":	264515
		}, {
			"file":	"Zend/zend_API.c",
			"line":	639,
			"primary_score":	999901,
			"second_score":	264514
		}, {
			"file":	"Zend/zend_API.c",
			"line":	643,
			"primary_score":	999649,
			"second_score":	123171
		}, {
			"file":	"Zend/zend_API.c",
			"line":	644,
			"primary_score":	999649,
			"second_score":	123170
		}, {
			"file":	"Zend/zend_API.c",
			"line":	647,
			"primary_score":	999649,
			"second_score":	123169
		}, {
			"file":	"Zend/zend_API.c",
			"line":	650,
			"primary_score":	999649,
			"second_score":	123168
		}, {
			"file":	"Zend/zend_API.c",
			"line":	656,
			"primary_score":	999649,
			"second_score":	264513
		}, {
			"file":	"Zend/zend_API.c",
			"line":	658,
			"primary_score":	999649,
			"second_score":	264512
		}, {
			"file":	"Zend/zend_API.c",
			"line":	664,
			"primary_score":	999649,
			"second_score":	264536
		}, {
			"file":	"Zend/zend_API.c",
			"line":	665,
			"primary_score":	999649,
			"second_score":	264535
		}, {
			"file":	"Zend/zend_API.c",
			"line":	667,
			"primary_score":	999649,
			"second_score":	264534
		}, {
			"file":	"Zend/zend_API.c",
			"line":	668,
			"primary_score":	999649,
			"second_score":	264511
		}, {
			"file":	"Zend/zend_API.c",
			"line":	688,
			"primary_score":	999649,
			"second_score":	264510
		}, {
			"file":	"Zend/zend_API.c",
			"line":	694,
			"primary_score":	999649,
			"second_score":	264646
		}, {
			"file":	"Zend/zend_API.c",
			"line":	695,
			"primary_score":	999649,
			"second_score":	264645
		}, {
			"file":	"Zend/zend_API.c",
			"line":	696,
			"primary_score":	999649,
			"second_score":	264644
		}, {
			"file":	"Zend/zend_API.c",
			"line":	697,
			"primary_score":	999649,
			"second_score":	264643
		}, {
			"file":	"Zend/zend_API.c",
			"line":	698,
			"primary_score":	999649,
			"second_score":	264642
		}, {
			"file":	"Zend/zend_API.c",
			"line":	699,
			"primary_score":	999649,
			"second_score":	264641
		}, {
			"file":	"Zend/zend_API.c",
			"line":	700,
			"primary_score":	999649,
			"second_score":	264640
		}, {
			"file":	"Zend/zend_API.c",
			"line":	701,
			"primary_score":	999649,
			"second_score":	264639
		}, {
			"file":	"Zend/zend_API.c",
			"line":	702,
			"primary_score":	999649,
			"second_score":	264638
		}, {
			"file":	"Zend/zend_API.c",
			"line":	703,
			"primary_score":	999649,
			"second_score":	264637
		}, {
			"file":	"Zend/zend_API.c",
			"line":	704,
			"primary_score":	999649,
			"second_score":	264636
		}, {
			"file":	"Zend/zend_API.c",
			"line":	706,
			"primary_score":	999649,
			"second_score":	264635
		}, {
			"file":	"Zend/zend_API.c",
			"line":	707,
			"primary_score":	999649,
			"second_score":	264618
		}, {
			"file":	"Zend/zend_API.c",
			"line":	708,
			"primary_score":	999649,
			"second_score":	264617
		}, {
			"file":	"Zend/zend_API.c",
			"line":	718,
			"primary_score":	999649,
			"second_score":	264619
		}, {
			"file":	"Zend/zend_API.c",
			"line":	722,
			"primary_score":	999649,
			"second_score":	264622
		}, {
			"file":	"Zend/zend_API.c",
			"line":	764,
			"primary_score":	999649,
			"second_score":	264616
		}, {
			"file":	"Zend/zend_API.c",
			"line":	765,
			"primary_score":	999649,
			"second_score":	120831
		}, {
			"file":	"Zend/zend_API.c",
			"line":	768,
			"primary_score":	999649,
			"second_score":	264615
		}, {
			"file":	"Zend/zend_API.c",
			"line":	774,
			"primary_score":	999649,
			"second_score":	264614
		}, {
			"file":	"Zend/zend_API.c",
			"line":	790,
			"primary_score":	999649,
			"second_score":	264613
		}, {
			"file":	"Zend/zend_API.c",
			"line":	792,
			"primary_score":	999649,
			"second_score":	264611
		}, {
			"file":	"Zend/zend_API.c",
			"line":	798,
			"primary_score":	999649,
			"second_score":	264610
		}, {
			"file":	"Zend/zend_API.c",
			"line":	799,
			"primary_score":	999649,
			"second_score":	264609
		}, {
			"file":	"Zend/zend_API.c",
			"line":	800,
			"primary_score":	999649,
			"second_score":	264542
		}, {
			"file":	"Zend/zend_API.c",
			"line":	801,
			"primary_score":	999649,
			"second_score":	264541
		}, {
			"file":	"Zend/zend_API.c",
			"line":	804,
			"primary_score":	999649,
			"second_score":	264540
		}, {
			"file":	"Zend/zend_API.c",
			"line":	834,
			"primary_score":	999649,
			"second_score":	264539
		}, {
			"file":	"Zend/zend_API.c",
			"line":	836,
			"primary_score":	999649,
			"second_score":	264537
		}, {
			"file":	"Zend/zend_API.c",
			"line":	844,
			"primary_score":	999649,
			"second_score":	264509
		}, {
			"file":	"Zend/zend_API.c",
			"line":	847,
			"primary_score":	999649,
			"second_score":	264508
		}, {
			"file":	"Zend/zend_API.c",
			"line":	881,
			"primary_score":	999649,
			"second_score":	264654
		}, {
			"file":	"Zend/zend_API.c",
			"line":	882,
			"primary_score":	999649,
			"second_score":	264653
		}, {
			"file":	"Zend/zend_API.c",
			"line":	884,
			"primary_score":	999649,
			"second_score":	264652
		}, {
			"file":	"Zend/zend_API.c",
			"line":	886,
			"primary_score":	999649,
			"second_score":	264648
		}, {
			"file":	"Zend/zend_API.c",
			"line":	887,
			"primary_score":	999649,
			"second_score":	264647
		}, {
			"file":	"Zend/zend_API.c",
			"line":	888,
			"primary_score":	999649,
			"second_score":	264507
		}, {
			"file":	"Zend/zend_API.c",
			"line":	890,
			"primary_score":	999649,
			"second_score":	264506
		}, {
			"file":	"Zend/zend_API.c",
			"line":	973,
			"primary_score":	999649,
			"second_score":	264497
		}, {
			"file":	"Zend/zend_API.c",
			"line":	975,
			"primary_score":	999649,
			"second_score":	264475
		}, {
			"file":	"Zend/zend_API.c",
			"line":	976,
			"primary_score":	999649,
			"second_score":	264457
		}, {
			"file":	"Zend/zend_API.c",
			"line":	977,
			"primary_score":	999649,
			"second_score":	264456
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1357,
			"primary_score":	999999,
			"second_score":	252807
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1359,
			"primary_score":	999999,
			"second_score":	252806
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1360,
			"primary_score":	999999,
			"second_score":	252696
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1362,
			"primary_score":	999999,
			"second_score":	252691
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1368,
			"primary_score":	999649,
			"second_score":	123911
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1370,
			"primary_score":	999649,
			"second_score":	123910
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1371,
			"primary_score":	999649,
			"second_score":	123800
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1373,
			"primary_score":	999649,
			"second_score":	123685
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1779,
			"primary_score":	999649,
			"second_score":	103781
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1780,
			"primary_score":	999649,
			"second_score":	103780
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1781,
			"primary_score":	999649,
			"second_score":	103779
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2171,
			"primary_score":	999649,
			"second_score":	50405
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2172,
			"primary_score":	999649,
			"second_score":	50404
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2173,
			"primary_score":	999649,
			"second_score":	50403
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2175,
			"primary_score":	999649,
			"second_score":	50402
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2176,
			"primary_score":	999649,
			"second_score":	50401
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2178,
			"primary_score":	999649,
			"second_score":	50400
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2179,
			"primary_score":	999649,
			"second_score":	47521
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2185,
			"primary_score":	999649,
			"second_score":	47520
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2186,
			"primary_score":	999649,
			"second_score":	47472
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2187,
			"primary_score":	999649,
			"second_score":	47471
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2229,
			"primary_score":	999649,
			"second_score":	50412
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2231,
			"primary_score":	999649,
			"second_score":	50411
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2237,
			"primary_score":	999649,
			"second_score":	50410
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2241,
			"primary_score":	999649,
			"second_score":	53652
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2245,
			"primary_score":	999649,
			"second_score":	50409
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2249,
			"primary_score":	999649,
			"second_score":	52969
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2250,
			"primary_score":	999649,
			"second_score":	54037
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2255,
			"primary_score":	999649,
			"second_score":	50408
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2256,
			"primary_score":	999649,
			"second_score":	50407
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2257,
			"primary_score":	999649,
			"second_score":	50406
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2262,
			"primary_score":	999649,
			"second_score":	47470
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2301,
			"primary_score":	999649,
			"second_score":	119505
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2303,
			"primary_score":	999649,
			"second_score":	119504
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2304,
			"primary_score":	999649,
			"second_score":	119498
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2307,
			"primary_score":	999649,
			"second_score":	119497
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2309,
			"primary_score":	999649,
			"second_score":	119496
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2310,
			"primary_score":	999649,
			"second_score":	118914
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2312,
			"primary_score":	999649,
			"second_score":	118913
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2313,
			"primary_score":	999649,
			"second_score":	118907
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2316,
			"primary_score":	999649,
			"second_score":	118906
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2322,
			"primary_score":	999649,
			"second_score":	114930
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2324,
			"primary_score":	999649,
			"second_score":	114929
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2348,
			"primary_score":	999649,
			"second_score":	113702
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2352,
			"primary_score":	999649,
			"second_score":	113701
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2354,
			"primary_score":	999649,
			"second_score":	113700
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	144,
			"primary_score":	999649,
			"second_score":	3194
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	297,
			"primary_score":	999649,
			"second_score":	3197
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	673,
			"primary_score":	999649,
			"second_score":	113224
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	675,
			"primary_score":	999649,
			"second_score":	113223
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	676,
			"primary_score":	999649,
			"second_score":	113222
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	699,
			"primary_score":	999649,
			"second_score":	113282
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	701,
			"primary_score":	999649,
			"second_score":	113281
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	702,
			"primary_score":	999649,
			"second_score":	113280
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	725,
			"primary_score":	999649,
			"second_score":	113231
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	726,
			"primary_score":	999649,
			"second_score":	113230
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	728,
			"primary_score":	999649,
			"second_score":	113229
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	730,
			"primary_score":	999649,
			"second_score":	113228
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	731,
			"primary_score":	999649,
			"second_score":	113227
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	732,
			"primary_score":	999649,
			"second_score":	113226
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	734,
			"primary_score":	999649,
			"second_score":	113225
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	735,
			"primary_score":	999649,
			"second_score":	113221
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	736,
			"primary_score":	999649,
			"second_score":	113220
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	737,
			"primary_score":	999649,
			"second_score":	113219
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	738,
			"primary_score":	999649,
			"second_score":	113218
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	739,
			"primary_score":	999649,
			"second_score":	113217
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	740,
			"primary_score":	999649,
			"second_score":	113216
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	741,
			"primary_score":	999649,
			"second_score":	113215
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	743,
			"primary_score":	999649,
			"second_score":	117037
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	745,
			"primary_score":	999649,
			"second_score":	117036
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	746,
			"primary_score":	999649,
			"second_score":	117035
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	748,
			"primary_score":	999649,
			"second_score":	117034
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	749,
			"primary_score":	999649,
			"second_score":	117033
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	750,
			"primary_score":	999649,
			"second_score":	117032
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	751,
			"primary_score":	999649,
			"second_score":	117031
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	752,
			"primary_score":	999649,
			"second_score":	117030
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	753,
			"primary_score":	999649,
			"second_score":	117029
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	754,
			"primary_score":	999649,
			"second_score":	117028
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	768,
			"primary_score":	999649,
			"second_score":	422852
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	770,
			"primary_score":	999649,
			"second_score":	422851
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	772,
			"primary_score":	999649,
			"second_score":	422850
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	773,
			"primary_score":	999649,
			"second_score":	422849
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	774,
			"primary_score":	999649,
			"second_score":	422848
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	776,
			"primary_score":	999649,
			"second_score":	422847
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	778,
			"primary_score":	999649,
			"second_score":	422846
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	779,
			"primary_score":	999649,
			"second_score":	422845
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	780,
			"primary_score":	999649,
			"second_score":	422844
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	786,
			"primary_score":	999649,
			"second_score":	113268
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	787,
			"primary_score":	999649,
			"second_score":	113267
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	789,
			"primary_score":	999649,
			"second_score":	113266
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	791,
			"primary_score":	999649,
			"second_score":	113265
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	792,
			"primary_score":	999649,
			"second_score":	113264
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	795,
			"primary_score":	999649,
			"second_score":	113263
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	800,
			"primary_score":	999649,
			"second_score":	113262
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	801,
			"primary_score":	999649,
			"second_score":	113261
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	802,
			"primary_score":	999649,
			"second_score":	113260
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	803,
			"primary_score":	999649,
			"second_score":	113259
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	805,
			"primary_score":	999649,
			"second_score":	113255
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	806,
			"primary_score":	999649,
			"second_score":	113253
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	807,
			"primary_score":	999649,
			"second_score":	113252
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	808,
			"primary_score":	999649,
			"second_score":	113251
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	833,
			"primary_score":	999649,
			"second_score":	397128
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	838,
			"primary_score":	999649,
			"second_score":	397127
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	839,
			"primary_score":	999649,
			"second_score":	397126
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	841,
			"primary_score":	999649,
			"second_score":	397125
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	842,
			"primary_score":	999649,
			"second_score":	397124
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	843,
			"primary_score":	999649,
			"second_score":	397123
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	845,
			"primary_score":	999649,
			"second_score":	397122
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	846,
			"primary_score":	999649,
			"second_score":	397121
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	890,
			"primary_score":	999649,
			"second_score":	113606
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	891,
			"primary_score":	999649,
			"second_score":	113605
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	893,
			"primary_score":	999649,
			"second_score":	113604
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	894,
			"primary_score":	999649,
			"second_score":	113603
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	896,
			"primary_score":	999649,
			"second_score":	113602
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	897,
			"primary_score":	999649,
			"second_score":	113601
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	904,
			"primary_score":	999649,
			"second_score":	113600
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	905,
			"primary_score":	999649,
			"second_score":	113599
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	906,
			"primary_score":	999649,
			"second_score":	113346
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	907,
			"primary_score":	999649,
			"second_score":	113345
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	908,
			"primary_score":	999649,
			"second_score":	113344
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	909,
			"primary_score":	999649,
			"second_score":	113343
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	911,
			"primary_score":	999649,
			"second_score":	113342
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	912,
			"primary_score":	999649,
			"second_score":	113341
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1599,
			"primary_score":	999649,
			"second_score":	3212
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1600,
			"primary_score":	999649,
			"second_score":	3211
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1601,
			"primary_score":	999649,
			"second_score":	3210
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1602,
			"primary_score":	999649,
			"second_score":	3209
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1604,
			"primary_score":	999649,
			"second_score":	3208
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1608,
			"primary_score":	999649,
			"second_score":	3207
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1614,
			"primary_score":	999649,
			"second_score":	3206
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1669,
			"primary_score":	999649,
			"second_score":	3205
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1670,
			"primary_score":	999649,
			"second_score":	3204
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1671,
			"primary_score":	999649,
			"second_score":	3203
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1672,
			"primary_score":	999649,
			"second_score":	3202
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1673,
			"primary_score":	999649,
			"second_score":	3201
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1674,
			"primary_score":	999649,
			"second_score":	3200
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1675,
			"primary_score":	999649,
			"second_score":	3199
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1676,
			"primary_score":	999649,
			"second_score":	3198
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1678,
			"primary_score":	999649,
			"second_score":	3196
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1679,
			"primary_score":	999649,
			"second_score":	3195
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1680,
			"primary_score":	999649,
			"second_score":	3193
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1681,
			"primary_score":	999649,
			"second_score":	3192
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1684,
			"primary_score":	999649,
			"second_score":	113612
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1686,
			"primary_score":	999649,
			"second_score":	113611
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1687,
			"primary_score":	999649,
			"second_score":	113610
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1692,
			"primary_score":	999649,
			"second_score":	113609
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1705,
			"primary_score":	999649,
			"second_score":	113608
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1709,
			"primary_score":	999649,
			"second_score":	113607
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1710,
			"primary_score":	999649,
			"second_score":	113340
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1711,
			"primary_score":	999649,
			"second_score":	113339
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1712,
			"primary_score":	999649,
			"second_score":	113338
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1717,
			"primary_score":	999649,
			"second_score":	113337
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1718,
			"primary_score":	999649,
			"second_score":	113336
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1719,
			"primary_score":	999649,
			"second_score":	113335
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1721,
			"primary_score":	999649,
			"second_score":	113334
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1722,
			"primary_score":	999649,
			"second_score":	113333
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1724,
			"primary_score":	999649,
			"second_score":	113332
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1725,
			"primary_score":	999649,
			"second_score":	113331
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1726,
			"primary_score":	999649,
			"second_score":	113327
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1727,
			"primary_score":	999649,
			"second_score":	113321
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1729,
			"primary_score":	999649,
			"second_score":	113303
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1730,
			"primary_score":	999649,
			"second_score":	113302
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1732,
			"primary_score":	999649,
			"second_score":	113207
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1802,
			"primary_score":	999649,
			"second_score":	113292
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1803,
			"primary_score":	999649,
			"second_score":	113291
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1804,
			"primary_score":	999649,
			"second_score":	113287
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1805,
			"primary_score":	999649,
			"second_score":	113286
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1807,
			"primary_score":	999649,
			"second_score":	113285
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1811,
			"primary_score":	999649,
			"second_score":	113284
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1813,
			"primary_score":	999649,
			"second_score":	257051
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1814,
			"primary_score":	999649,
			"second_score":	257050
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1815,
			"primary_score":	999649,
			"second_score":	257049
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1817,
			"primary_score":	999649,
			"second_score":	257048
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1818,
			"primary_score":	999649,
			"second_score":	257047
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1819,
			"primary_score":	999649,
			"second_score":	257046
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1820,
			"primary_score":	999649,
			"second_score":	257045
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1821,
			"primary_score":	999993,
			"second_score":	257044
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1864,
			"primary_score":	999649,
			"second_score":	113283
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1865,
			"primary_score":	999649,
			"second_score":	113279
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1870,
			"primary_score":	999649,
			"second_score":	113278
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1875,
			"primary_score":	999649,
			"second_score":	113301
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1876,
			"primary_score":	999649,
			"second_score":	113300
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1877,
			"primary_score":	999649,
			"second_score":	113299
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1878,
			"primary_score":	999649,
			"second_score":	113298
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1879,
			"primary_score":	999649,
			"second_score":	113297
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1880,
			"primary_score":	999649,
			"second_score":	113296
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1881,
			"primary_score":	999649,
			"second_score":	113295
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1883,
			"primary_score":	999649,
			"second_score":	113294
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1884,
			"primary_score":	999649,
			"second_score":	125772
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1885,
			"primary_score":	999649,
			"second_score":	125771
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1887,
			"primary_score":	999649,
			"second_score":	125770
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1891,
			"primary_score":	999649,
			"second_score":	125769
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1897,
			"primary_score":	999649,
			"second_score":	125768
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1898,
			"primary_score":	999649,
			"second_score":	125767
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1899,
			"primary_score":	999649,
			"second_score":	125766
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1900,
			"primary_score":	999649,
			"second_score":	125765
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1901,
			"primary_score":	999649,
			"second_score":	125764
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1902,
			"primary_score":	999649,
			"second_score":	125763
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1909,
			"primary_score":	999649,
			"second_score":	252789
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1910,
			"primary_score":	999649,
			"second_score":	252788
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1912,
			"primary_score":	999649,
			"second_score":	397144
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1913,
			"primary_score":	999649,
			"second_score":	397140
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1917,
			"primary_score":	999649,
			"second_score":	397139
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1925,
			"primary_score":	999649,
			"second_score":	113293
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1927,
			"primary_score":	999649,
			"second_score":	113277
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1944,
			"primary_score":	999649,
			"second_score":	113276
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2005,
			"primary_score":	999649,
			"second_score":	113275
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2007,
			"primary_score":	999649,
			"second_score":	113274
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2008,
			"primary_score":	999649,
			"second_score":	113273
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2009,
			"primary_score":	999649,
			"second_score":	113272
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2010,
			"primary_score":	999649,
			"second_score":	113271
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2011,
			"primary_score":	999649,
			"second_score":	113269
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2013,
			"primary_score":	999649,
			"second_score":	113250
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2016,
			"primary_score":	999649,
			"second_score":	113249
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2018,
			"primary_score":	999649,
			"second_score":	113248
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2019,
			"primary_score":	999649,
			"second_score":	257013
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2020,
			"primary_score":	999649,
			"second_score":	257012
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2022,
			"primary_score":	999649,
			"second_score":	113247
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2025,
			"primary_score":	999649,
			"second_score":	113246
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2026,
			"primary_score":	999649,
			"second_score":	113240
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2027,
			"primary_score":	999649,
			"second_score":	113239
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2030,
			"primary_score":	999649,
			"second_score":	113233
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2031,
			"primary_score":	999649,
			"second_score":	113232
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2037,
			"primary_score":	999649,
			"second_score":	113214
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2039,
			"primary_score":	999649,
			"second_score":	113213
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2040,
			"primary_score":	999649,
			"second_score":	113212
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2041,
			"primary_score":	999649,
			"second_score":	113211
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2044,
			"primary_score":	999649,
			"second_score":	113210
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2046,
			"primary_score":	999649,
			"second_score":	113208
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2052,
			"primary_score":	999649,
			"second_score":	113666
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2053,
			"primary_score":	999649,
			"second_score":	113665
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2054,
			"primary_score":	999649,
			"second_score":	113664
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2056,
			"primary_score":	999649,
			"second_score":	113663
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2060,
			"primary_score":	999649,
			"second_score":	113662
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2061,
			"primary_score":	999649,
			"second_score":	113661
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2062,
			"primary_score":	999649,
			"second_score":	113660
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2069,
			"primary_score":	999649,
			"second_score":	113659
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2070,
			"primary_score":	999649,
			"second_score":	113658
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2071,
			"primary_score":	999649,
			"second_score":	113657
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2073,
			"primary_score":	999649,
			"second_score":	113656
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2074,
			"primary_score":	999649,
			"second_score":	113655
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2075,
			"primary_score":	999649,
			"second_score":	113654
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2076,
			"primary_score":	999649,
			"second_score":	113653
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2082,
			"primary_score":	999649,
			"second_score":	113652
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2086,
			"primary_score":	999649,
			"second_score":	113974
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2088,
			"primary_score":	999649,
			"second_score":	113972
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2090,
			"primary_score":	999649,
			"second_score":	113971
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2091,
			"primary_score":	999649,
			"second_score":	113970
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2095,
			"primary_score":	999649,
			"second_score":	113969
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2096,
			"primary_score":	999649,
			"second_score":	113968
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2097,
			"primary_score":	999649,
			"second_score":	113967
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2098,
			"primary_score":	999649,
			"second_score":	113948
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2100,
			"primary_score":	999649,
			"second_score":	113947
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2104,
			"primary_score":	999649,
			"second_score":	113946
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2105,
			"primary_score":	999649,
			"second_score":	113940
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2107,
			"primary_score":	999649,
			"second_score":	113922
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2112,
			"primary_score":	999649,
			"second_score":	125787
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2113,
			"primary_score":	999649,
			"second_score":	125786
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2114,
			"primary_score":	999649,
			"second_score":	125785
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2115,
			"primary_score":	999649,
			"second_score":	125784
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2116,
			"primary_score":	999649,
			"second_score":	125783
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2118,
			"primary_score":	999649,
			"second_score":	125782
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2119,
			"primary_score":	999649,
			"second_score":	125781
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2121,
			"primary_score":	999649,
			"second_score":	257080
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2122,
			"primary_score":	999649,
			"second_score":	257079
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2123,
			"primary_score":	999649,
			"second_score":	257078
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2124,
			"primary_score":	999649,
			"second_score":	257077
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2126,
			"primary_score":	999649,
			"second_score":	257076
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2130,
			"primary_score":	999649,
			"second_score":	257075
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2131,
			"primary_score":	999649,
			"second_score":	427440
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2133,
			"primary_score":	999649,
			"second_score":	427439
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2134,
			"primary_score":	999649,
			"second_score":	427438
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2136,
			"primary_score":	999649,
			"second_score":	427437
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2137,
			"primary_score":	999649,
			"second_score":	427435
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2138,
			"primary_score":	999649,
			"second_score":	427434
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2139,
			"primary_score":	999649,
			"second_score":	126108
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2140,
			"primary_score":	999649,
			"second_score":	126107
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2144,
			"primary_score":	999649,
			"second_score":	427433
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2145,
			"primary_score":	999649,
			"second_score":	427427
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2147,
			"primary_score":	999649,
			"second_score":	427426
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2150,
			"primary_score":	999649,
			"second_score":	427420
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2151,
			"primary_score":	999649,
			"second_score":	427405
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2152,
			"primary_score":	999649,
			"second_score":	427404
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2154,
			"primary_score":	999649,
			"second_score":	427402
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2155,
			"primary_score":	999649,
			"second_score":	427401
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2159,
			"primary_score":	999649,
			"second_score":	257074
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2160,
			"primary_score":	999649,
			"second_score":	260595
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2162,
			"primary_score":	999649,
			"second_score":	260594
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2163,
			"primary_score":	999649,
			"second_score":	260593
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2164,
			"primary_score":	999649,
			"second_score":	260592
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2170,
			"primary_score":	999649,
			"second_score":	260591
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2171,
			"primary_score":	999649,
			"second_score":	260590
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2172,
			"primary_score":	999649,
			"second_score":	260589
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2173,
			"primary_score":	999649,
			"second_score":	260588
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2175,
			"primary_score":	999649,
			"second_score":	260587
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2180,
			"primary_score":	999649,
			"second_score":	260586
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2183,
			"primary_score":	999649,
			"second_score":	260585
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2185,
			"primary_score":	999649,
			"second_score":	260584
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2186,
			"primary_score":	999649,
			"second_score":	260583
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2188,
			"primary_score":	999649,
			"second_score":	260582
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2189,
			"primary_score":	999649,
			"second_score":	260581
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2190,
			"primary_score":	999649,
			"second_score":	260580
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2197,
			"primary_score":	999649,
			"second_score":	260579
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2202,
			"primary_score":	999649,
			"second_score":	257073
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2204,
			"primary_score":	999649,
			"second_score":	257072
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2205,
			"primary_score":	999649,
			"second_score":	122573
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2206,
			"primary_score":	999649,
			"second_score":	122572
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2207,
			"primary_score":	999649,
			"second_score":	122570
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2208,
			"primary_score":	999649,
			"second_score":	122569
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2209,
			"primary_score":	999649,
			"second_score":	122568
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2211,
			"primary_score":	999649,
			"second_score":	122567
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2212,
			"primary_score":	999649,
			"second_score":	122565
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2214,
			"primary_score":	999649,
			"second_score":	122546
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2218,
			"primary_score":	999649,
			"second_score":	122545
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2221,
			"primary_score":	999649,
			"second_score":	122544
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2222,
			"primary_score":	999649,
			"second_score":	122538
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2223,
			"primary_score":	999649,
			"second_score":	122537
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2226,
			"primary_score":	999649,
			"second_score":	122531
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2230,
			"primary_score":	999649,
			"second_score":	122530
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2233,
			"primary_score":	999649,
			"second_score":	122512
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2234,
			"primary_score":	999649,
			"second_score":	122511
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2235,
			"primary_score":	999649,
			"second_score":	122510
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2236,
			"primary_score":	999649,
			"second_score":	122509
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2238,
			"primary_score":	999649,
			"second_score":	122508
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2239,
			"primary_score":	999649,
			"second_score":	122506
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2246,
			"primary_score":	999649,
			"second_score":	257071
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2344,
			"primary_score":	999649,
			"second_score":	257070
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2348,
			"primary_score":	999649,
			"second_score":	257000
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2350,
			"primary_score":	999649,
			"second_score":	256999
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2351,
			"primary_score":	999649,
			"second_score":	256983
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2408,
			"primary_score":	999649,
			"second_score":	252679
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2410,
			"primary_score":	999649,
			"second_score":	252678
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2413,
			"primary_score":	999649,
			"second_score":	252677
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2418,
			"primary_score":	999649,
			"second_score":	113669
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2420,
			"primary_score":	999649,
			"second_score":	113668
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2424,
			"primary_score":	999649,
			"second_score":	113667
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2429,
			"primary_score":	999649,
			"second_score":	125790
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2431,
			"primary_score":	999649,
			"second_score":	125789
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2434,
			"primary_score":	999649,
			"second_score":	125788
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2469,
			"primary_score":	999649,
			"second_score":	264239
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2470,
			"primary_score":	999649,
			"second_score":	264238
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2472,
			"primary_score":	999649,
			"second_score":	264237
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2478,
			"primary_score":	999649,
			"second_score":	264236
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2482,
			"primary_score":	999649,
			"second_score":	264235
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2517,
			"primary_score":	999649,
			"second_score":	264240
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2527,
			"primary_score":	999649,
			"second_score":	121894
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2538,
			"primary_score":	999649,
			"second_score":	264242
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2540,
			"primary_score":	999649,
			"second_score":	264241
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2541,
			"primary_score":	999649,
			"second_score":	264213
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2544,
			"primary_score":	999649,
			"second_score":	264212
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2545,
			"primary_score":	999649,
			"second_score":	264211
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2564,
			"primary_score":	999649,
			"second_score":	428431
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2566,
			"primary_score":	999649,
			"second_score":	428430
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2567,
			"primary_score":	999649,
			"second_score":	428408
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2570,
			"primary_score":	999649,
			"second_score":	428407
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2571,
			"primary_score":	999649,
			"second_score":	428406
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2572,
			"primary_score":	999649,
			"second_score":	428405
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2625,
			"primary_score":	999649,
			"second_score":	3213
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	346,
			"primary_score":	999649,
			"second_score":	124475
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1335,
			"primary_score":	999649,
			"second_score":	121481
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1336,
			"primary_score":	999649,
			"second_score":	121480
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1337,
			"primary_score":	999649,
			"second_score":	121479
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1338,
			"primary_score":	999649,
			"second_score":	121478
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1339,
			"primary_score":	999649,
			"second_score":	121477
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1341,
			"primary_score":	999649,
			"second_score":	121476
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1345,
			"primary_score":	999649,
			"second_score":	121409
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1348,
			"primary_score":	999649,
			"second_score":	121233
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1349,
			"primary_score":	999649,
			"second_score":	121232
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1354,
			"primary_score":	999649,
			"second_score":	121231
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1356,
			"primary_score":	999649,
			"second_score":	121191
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1362,
			"primary_score":	999649,
			"second_score":	121172
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1367,
			"primary_score":	999649,
			"second_score":	121171
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1891,
			"primary_score":	999649,
			"second_score":	123913
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1892,
			"primary_score":	999649,
			"second_score":	123912
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1893,
			"primary_score":	999649,
			"second_score":	123537
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1921,
			"primary_score":	999649,
			"second_score":	133335
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1923,
			"primary_score":	999649,
			"second_score":	133334
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1927,
			"primary_score":	999649,
			"second_score":	133296
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1929,
			"primary_score":	999649,
			"second_score":	133194
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1932,
			"primary_score":	999649,
			"second_score":	133193
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	131,
			"primary_score":	999649,
			"second_score":	18924
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	171,
			"primary_score":	999649,
			"second_score":	441649
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	172,
			"primary_score":	999649,
			"second_score":	441648
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	173,
			"primary_score":	999649,
			"second_score":	441647
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	174,
			"primary_score":	999649,
			"second_score":	441646
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	175,
			"primary_score":	999649,
			"second_score":	441645
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	176,
			"primary_score":	999649,
			"second_score":	441644
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	208,
			"primary_score":	999649,
			"second_score":	426934
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	210,
			"primary_score":	999649,
			"second_score":	426933
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	229,
			"primary_score":	999649,
			"second_score":	113903
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	230,
			"primary_score":	999649,
			"second_score":	113878
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	231,
			"primary_score":	999649,
			"second_score":	113853
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	232,
			"primary_score":	999649,
			"second_score":	113849
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	233,
			"primary_score":	999649,
			"second_score":	113844
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	234,
			"primary_score":	999649,
			"second_score":	113840
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	235,
			"primary_score":	999649,
			"second_score":	113836
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	236,
			"primary_score":	999649,
			"second_score":	113832
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	237,
			"primary_score":	999649,
			"second_score":	113762
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	238,
			"primary_score":	999649,
			"second_score":	113758
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	245,
			"primary_score":	999649,
			"second_score":	442506
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	246,
			"primary_score":	999649,
			"second_score":	442505
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	248,
			"primary_score":	999649,
			"second_score":	442504
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	252,
			"primary_score":	999649,
			"second_score":	442387
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	253,
			"primary_score":	999649,
			"second_score":	442277
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	254,
			"primary_score":	999649,
			"second_score":	441903
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	255,
			"primary_score":	999649,
			"second_score":	441902
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	262,
			"primary_score":	999649,
			"second_score":	427089
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	269,
			"primary_score":	999649,
			"second_score":	441675
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	283,
			"primary_score":	999649,
			"second_score":	397065
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	290,
			"primary_score":	999649,
			"second_score":	430602
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	296,
			"primary_score":	999682,
			"second_score":	429083
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	297,
			"primary_score":	999682,
			"second_score":	429082
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	299,
			"primary_score":	999682,
			"second_score":	429075
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	300,
			"primary_score":	999685,
			"second_score":	429072
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	304,
			"primary_score":	999689,
			"second_score":	429071
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	305,
			"primary_score":	999689,
			"second_score":	429050
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	307,
			"primary_score":	999730,
			"second_score":	429073
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	309,
			"primary_score":	999682,
			"second_score":	437711
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	310,
			"primary_score":	999682,
			"second_score":	437710
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	311,
			"primary_score":	999682,
			"second_score":	437709
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	312,
			"primary_score":	999682,
			"second_score":	438432
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	313,
			"primary_score":	999682,
			"second_score":	438431
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	315,
			"primary_score":	999682,
			"second_score":	437708
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	316,
			"primary_score":	999682,
			"second_score":	437640
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	317,
			"primary_score":	999682,
			"second_score":	437639
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	318,
			"primary_score":	999682,
			"second_score":	437638
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	335,
			"primary_score":	999649,
			"second_score":	427604
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	336,
			"primary_score":	999649,
			"second_score":	427603
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	337,
			"primary_score":	999649,
			"second_score":	427602
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	338,
			"primary_score":	999649,
			"second_score":	440426
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	339,
			"primary_score":	999649,
			"second_score":	440425
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	341,
			"primary_score":	999649,
			"second_score":	427601
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	342,
			"primary_score":	999649,
			"second_score":	428304
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	343,
			"primary_score":	999649,
			"second_score":	428303
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	345,
			"primary_score":	999649,
			"second_score":	428302
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	348,
			"primary_score":	999649,
			"second_score":	427600
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	349,
			"primary_score":	999649,
			"second_score":	427599
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	350,
			"primary_score":	999649,
			"second_score":	427597
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	351,
			"primary_score":	999649,
			"second_score":	427595
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	352,
			"primary_score":	999649,
			"second_score":	427594
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	353,
			"primary_score":	999649,
			"second_score":	427593
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	546,
			"primary_score":	999649,
			"second_score":	431896
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	548,
			"primary_score":	999649,
			"second_score":	431895
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	632,
			"primary_score":	999682,
			"second_score":	429111
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	633,
			"primary_score":	999682,
			"second_score":	429110
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	634,
			"primary_score":	999682,
			"second_score":	429109
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	636,
			"primary_score":	999682,
			"second_score":	429108
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	637,
			"primary_score":	999682,
			"second_score":	429107
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	640,
			"primary_score":	999682,
			"second_score":	429106
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	645,
			"primary_score":	999682,
			"second_score":	429085
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	646,
			"primary_score":	999682,
			"second_score":	429084
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	647,
			"primary_score":	999682,
			"second_score":	429049
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	648,
			"primary_score":	999682,
			"second_score":	429048
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	649,
			"primary_score":	999682,
			"second_score":	429047
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	685,
			"primary_score":	999682,
			"second_score":	429112
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	841,
			"primary_score":	999649,
			"second_score":	428323
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	843,
			"primary_score":	999649,
			"second_score":	428313
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	844,
			"primary_score":	999649,
			"second_score":	428312
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	845,
			"primary_score":	999649,
			"second_score":	428256
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	897,
			"primary_score":	999684,
			"second_score":	430668
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	898,
			"primary_score":	999684,
			"second_score":	430667
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	900,
			"primary_score":	999684,
			"second_score":	430666
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	927,
			"primary_score":	999684,
			"second_score":	430665
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	929,
			"primary_score":	999684,
			"second_score":	430627
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	930,
			"primary_score":	999684,
			"second_score":	430625
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	932,
			"primary_score":	999684,
			"second_score":	430615
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	933,
			"primary_score":	999684,
			"second_score":	430614
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	989,
			"primary_score":	999684,
			"second_score":	430613
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	990,
			"primary_score":	999684,
			"second_score":	430612
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	991,
			"primary_score":	999684,
			"second_score":	430608
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	992,
			"primary_score":	999684,
			"second_score":	430604
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	993,
			"primary_score":	999684,
			"second_score":	430603
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	994,
			"primary_score":	999684,
			"second_score":	430601
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1040,
			"primary_score":	999865,
			"second_score":	430587
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1041,
			"primary_score":	999865,
			"second_score":	430586
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1043,
			"primary_score":	999865,
			"second_score":	430585
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1044,
			"primary_score":	999865,
			"second_score":	430584
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1045,
			"primary_score":	999865,
			"second_score":	430583
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1046,
			"primary_score":	999865,
			"second_score":	430546
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1047,
			"primary_score":	999865,
			"second_score":	430544
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1053,
			"primary_score":	999865,
			"second_score":	427908
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1059,
			"primary_score":	999865,
			"second_score":	427907
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1060,
			"primary_score":	999865,
			"second_score":	427906
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1061,
			"primary_score":	999865,
			"second_score":	427904
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1251,
			"primary_score":	999683,
			"second_score":	430860
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1253,
			"primary_score":	999683,
			"second_score":	430859
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1256,
			"primary_score":	999683,
			"second_score":	430858
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1264,
			"primary_score":	999649,
			"second_score":	429147
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1266,
			"primary_score":	999649,
			"second_score":	429146
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1267,
			"primary_score":	999649,
			"second_score":	429139
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1273,
			"primary_score":	999649,
			"second_score":	428902
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1274,
			"primary_score":	999649,
			"second_score":	428901
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1275,
			"primary_score":	999649,
			"second_score":	428900
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1276,
			"primary_score":	999649,
			"second_score":	428899
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1277,
			"primary_score":	999649,
			"second_score":	428898
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1279,
			"primary_score":	999649,
			"second_score":	428897
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1281,
			"primary_score":	999649,
			"second_score":	428893
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1285,
			"primary_score":	999649,
			"second_score":	428892
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1362,
			"primary_score":	999649,
			"second_score":	428891
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1363,
			"primary_score":	999649,
			"second_score":	428887
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1421,
			"primary_score":	999652,
			"second_score":	430595
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1427,
			"primary_score":	999652,
			"second_score":	430594
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1428,
			"primary_score":	999653,
			"second_score":	430593
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1430,
			"primary_score":	999653,
			"second_score":	430592
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1433,
			"primary_score":	999653,
			"second_score":	430591
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1435,
			"primary_score":	999653,
			"second_score":	430590
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1446,
			"primary_score":	999653,
			"second_score":	430589
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1917,
			"primary_score":	999649,
			"second_score":	433691
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1918,
			"primary_score":	999649,
			"second_score":	433690
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1919,
			"primary_score":	999649,
			"second_score":	433689
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1921,
			"primary_score":	999649,
			"second_score":	433688
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1923,
			"primary_score":	999649,
			"second_score":	433679
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1933,
			"primary_score":	999649,
			"second_score":	433678
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1934,
			"primary_score":	999649,
			"second_score":	433614
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1941,
			"primary_score":	999649,
			"second_score":	433592
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1942,
			"primary_score":	999649,
			"second_score":	433573
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1944,
			"primary_score":	999649,
			"second_score":	433572
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1945,
			"primary_score":	999649,
			"second_score":	433546
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1946,
			"primary_score":	999649,
			"second_score":	433542
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2047,
			"primary_score":	999649,
			"second_score":	428507
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2048,
			"primary_score":	999649,
			"second_score":	428506
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2049,
			"primary_score":	999649,
			"second_score":	428505
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2050,
			"primary_score":	999649,
			"second_score":	428504
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2052,
			"primary_score":	999649,
			"second_score":	428503
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2059,
			"primary_score":	999649,
			"second_score":	428502
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2063,
			"primary_score":	999649,
			"second_score":	428501
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2083,
			"primary_score":	999649,
			"second_score":	428500
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2315,
			"primary_score":	999649,
			"second_score":	427130
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2319,
			"primary_score":	999649,
			"second_score":	427129
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2414,
			"primary_score":	999649,
			"second_score":	432234
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2416,
			"primary_score":	999649,
			"second_score":	432233
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2423,
			"primary_score":	999649,
			"second_score":	432232
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2424,
			"primary_score":	999649,
			"second_score":	432222
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2425,
			"primary_score":	999649,
			"second_score":	432221
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2426,
			"primary_score":	999649,
			"second_score":	432220
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2427,
			"primary_score":	999649,
			"second_score":	432158
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2428,
			"primary_score":	999649,
			"second_score":	432155
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2435,
			"primary_score":	999649,
			"second_score":	432153
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2436,
			"primary_score":	999649,
			"second_score":	432151
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2437,
			"primary_score":	999649,
			"second_score":	432150
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2438,
			"primary_score":	999649,
			"second_score":	432145
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2440,
			"primary_score":	999649,
			"second_score":	432144
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2441,
			"primary_score":	999649,
			"second_score":	432122
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2447,
			"primary_score":	999649,
			"second_score":	432357
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2448,
			"primary_score":	999649,
			"second_score":	432356
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2449,
			"primary_score":	999649,
			"second_score":	432355
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2450,
			"primary_score":	999649,
			"second_score":	432354
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2451,
			"primary_score":	999649,
			"second_score":	432353
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2453,
			"primary_score":	999649,
			"second_score":	432352
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2454,
			"primary_score":	999649,
			"second_score":	432348
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2456,
			"primary_score":	999649,
			"second_score":	432347
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2471,
			"primary_score":	999649,
			"second_score":	432346
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2472,
			"primary_score":	999649,
			"second_score":	432345
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2485,
			"primary_score":	999649,
			"second_score":	432344
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2491,
			"primary_score":	999649,
			"second_score":	432343
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2493,
			"primary_score":	999649,
			"second_score":	135104
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2494,
			"primary_score":	999649,
			"second_score":	135103
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2495,
			"primary_score":	999649,
			"second_score":	432342
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2499,
			"primary_score":	999649,
			"second_score":	432341
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2512,
			"primary_score":	999649,
			"second_score":	432340
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2513,
			"primary_score":	999649,
			"second_score":	135100
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2516,
			"primary_score":	999649,
			"second_score":	135062
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2530,
			"primary_score":	999649,
			"second_score":	432339
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2532,
			"primary_score":	999649,
			"second_score":	432329
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2533,
			"primary_score":	999649,
			"second_score":	135050
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2534,
			"primary_score":	999649,
			"second_score":	135049
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2539,
			"primary_score":	999649,
			"second_score":	432328
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2540,
			"primary_score":	999649,
			"second_score":	432327
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2545,
			"primary_score":	999649,
			"second_score":	432326
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2546,
			"primary_score":	999649,
			"second_score":	432325
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2547,
			"primary_score":	999649,
			"second_score":	432309
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2548,
			"primary_score":	999649,
			"second_score":	432308
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2572,
			"primary_score":	999828,
			"second_score":	427898
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2575,
			"primary_score":	999828,
			"second_score":	427897
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2579,
			"primary_score":	999892,
			"second_score":	427896
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2581,
			"primary_score":	999892,
			"second_score":	427886
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2582,
			"primary_score":	999892,
			"second_score":	427885
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2583,
			"primary_score":	999892,
			"second_score":	427882
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2584,
			"primary_score":	999892,
			"second_score":	427881
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2586,
			"primary_score":	999892,
			"second_score":	427880
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2595,
			"primary_score":	999892,
			"second_score":	427879
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2601,
			"primary_score":	999649,
			"second_score":	427636
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2602,
			"primary_score":	999649,
			"second_score":	427635
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2604,
			"primary_score":	999649,
			"second_score":	427634
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2612,
			"primary_score":	999649,
			"second_score":	427633
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2618,
			"primary_score":	999649,
			"second_score":	427631
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2619,
			"primary_score":	999649,
			"second_score":	427627
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2622,
			"primary_score":	999649,
			"second_score":	427623
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2623,
			"primary_score":	999649,
			"second_score":	427621
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2628,
			"primary_score":	999649,
			"second_score":	427620
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2630,
			"primary_score":	999649,
			"second_score":	427610
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2632,
			"primary_score":	999649,
			"second_score":	427609
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2633,
			"primary_score":	999649,
			"second_score":	427608
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2635,
			"primary_score":	999649,
			"second_score":	427592
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2639,
			"primary_score":	999649,
			"second_score":	119921
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2640,
			"primary_score":	999649,
			"second_score":	119920
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2643,
			"primary_score":	999649,
			"second_score":	427591
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5070,
			"primary_score":	999649,
			"second_score":	428497
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5072,
			"primary_score":	999649,
			"second_score":	428496
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5085,
			"primary_score":	999649,
			"second_score":	428495
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5097,
			"primary_score":	999649,
			"second_score":	428469
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5100,
			"primary_score":	999649,
			"second_score":	428468
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5105,
			"primary_score":	999649,
			"second_score":	428467
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5113,
			"primary_score":	999649,
			"second_score":	428498
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5115,
			"primary_score":	999649,
			"second_score":	428466
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5116,
			"primary_score":	999649,
			"second_score":	428465
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5117,
			"primary_score":	999649,
			"second_score":	428439
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5118,
			"primary_score":	999649,
			"second_score":	428438
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5119,
			"primary_score":	999649,
			"second_score":	428437
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5120,
			"primary_score":	999649,
			"second_score":	428403
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5121,
			"primary_score":	999649,
			"second_score":	428400
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5129,
			"primary_score":	999649,
			"second_score":	428515
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5130,
			"primary_score":	999649,
			"second_score":	428514
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5131,
			"primary_score":	999649,
			"second_score":	428513
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5132,
			"primary_score":	999649,
			"second_score":	428512
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5133,
			"primary_score":	999649,
			"second_score":	428511
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5135,
			"primary_score":	999649,
			"second_score":	428510
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5182,
			"primary_score":	999649,
			"second_score":	428509
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5203,
			"primary_score":	999649,
			"second_score":	428508
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5205,
			"primary_score":	999649,
			"second_score":	428499
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5206,
			"primary_score":	999649,
			"second_score":	428399
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5766,
			"primary_score":	999892,
			"second_score":	431902
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5767,
			"primary_score":	999892,
			"second_score":	431901
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5768,
			"primary_score":	999892,
			"second_score":	431900
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5769,
			"primary_score":	999892,
			"second_score":	431899
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5771,
			"primary_score":	999892,
			"second_score":	431898
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5772,
			"primary_score":	999892,
			"second_score":	431897
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5773,
			"primary_score":	1000000,
			"second_score":	431894
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5778,
			"primary_score":	999892,
			"second_score":	431893
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5779,
			"primary_score":	999892,
			"second_score":	431891
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5780,
			"primary_score":	999892,
			"second_score":	431853
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5794,
			"primary_score":	999892,
			"second_score":	431852
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5796,
			"primary_score":	999892,
			"second_score":	431850
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5799,
			"primary_score":	999892,
			"second_score":	431840
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5800,
			"primary_score":	999892,
			"second_score":	431839
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5801,
			"primary_score":	999892,
			"second_score":	431838
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5802,
			"primary_score":	999892,
			"second_score":	431836
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5803,
			"primary_score":	999892,
			"second_score":	431832
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5804,
			"primary_score":	999892,
			"second_score":	431831
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5806,
			"primary_score":	999892,
			"second_score":	431830
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5807,
			"primary_score":	999892,
			"second_score":	431827
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5810,
			"primary_score":	999892,
			"second_score":	431826
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5812,
			"primary_score":	999892,
			"second_score":	431825
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5815,
			"primary_score":	999892,
			"second_score":	431799
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5817,
			"primary_score":	999892,
			"second_score":	431797
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5818,
			"primary_score":	999892,
			"second_score":	431787
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5819,
			"primary_score":	999892,
			"second_score":	431786
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5820,
			"primary_score":	999892,
			"second_score":	431785
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5821,
			"primary_score":	999892,
			"second_score":	431783
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5822,
			"primary_score":	999892,
			"second_score":	431780
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5823,
			"primary_score":	999892,
			"second_score":	431779
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5825,
			"primary_score":	999892,
			"second_score":	431778
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5826,
			"primary_score":	999892,
			"second_score":	431768
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5827,
			"primary_score":	999892,
			"second_score":	431767
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5828,
			"primary_score":	999892,
			"second_score":	431766
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5829,
			"primary_score":	999892,
			"second_score":	431765
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5835,
			"primary_score":	999892,
			"second_score":	430789
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5836,
			"primary_score":	999892,
			"second_score":	430788
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5837,
			"primary_score":	999892,
			"second_score":	430787
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5839,
			"primary_score":	999892,
			"second_score":	430786
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5840,
			"primary_score":	999892,
			"second_score":	430785
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5841,
			"primary_score":	999966,
			"second_score":	430784
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5844,
			"primary_score":	999966,
			"second_score":	430783
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5845,
			"primary_score":	999966,
			"second_score":	430782
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5846,
			"primary_score":	999966,
			"second_score":	430781
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5849,
			"primary_score":	999966,
			"second_score":	430780
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5852,
			"primary_score":	999892,
			"second_score":	430779
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5856,
			"primary_score":	999892,
			"second_score":	430778
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5865,
			"primary_score":	999892,
			"second_score":	430777
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5866,
			"primary_score":	999892,
			"second_score":	430776
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5867,
			"primary_score":	999892,
			"second_score":	430775
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5870,
			"primary_score":	999892,
			"second_score":	430774
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5871,
			"primary_score":	999892,
			"second_score":	430773
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5883,
			"primary_score":	999892,
			"second_score":	430772
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5884,
			"primary_score":	999892,
			"second_score":	430768
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5887,
			"primary_score":	999892,
			"second_score":	430767
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5889,
			"primary_score":	999892,
			"second_score":	430762
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5894,
			"primary_score":	999892,
			"second_score":	430761
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5895,
			"primary_score":	999892,
			"second_score":	430688
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5898,
			"primary_score":	999892,
			"second_score":	430680
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5899,
			"primary_score":	999966,
			"second_score":	430679
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5901,
			"primary_score":	999966,
			"second_score":	430678
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5902,
			"primary_score":	999966,
			"second_score":	430677
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5903,
			"primary_score":	999966,
			"second_score":	430676
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5904,
			"primary_score":	999966,
			"second_score":	430674
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5906,
			"primary_score":	999966,
			"second_score":	430669
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5907,
			"primary_score":	999966,
			"second_score":	430596
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5910,
			"primary_score":	999892,
			"second_score":	430588
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5911,
			"primary_score":	999892,
			"second_score":	430543
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5917,
			"primary_score":	999892,
			"second_score":	427928
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5918,
			"primary_score":	999892,
			"second_score":	427927
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5920,
			"primary_score":	999892,
			"second_score":	427917
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5921,
			"primary_score":	999892,
			"second_score":	427916
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5922,
			"primary_score":	999892,
			"second_score":	427915
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5923,
			"primary_score":	999892,
			"second_score":	427914
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5925,
			"primary_score":	999892,
			"second_score":	427913
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5926,
			"primary_score":	999892,
			"second_score":	427911
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5928,
			"primary_score":	999892,
			"second_score":	427909
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5930,
			"primary_score":	999892,
			"second_score":	427903
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5931,
			"primary_score":	999892,
			"second_score":	427899
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5932,
			"primary_score":	999892,
			"second_score":	427878
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5934,
			"primary_score":	999892,
			"second_score":	427856
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6095,
			"primary_score":	999649,
			"second_score":	130253
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6096,
			"primary_score":	999649,
			"second_score":	130251
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6098,
			"primary_score":	999649,
			"second_score":	130250
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6100,
			"primary_score":	999649,
			"second_score":	130240
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6101,
			"primary_score":	999649,
			"second_score":	130239
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6102,
			"primary_score":	999649,
			"second_score":	130235
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6103,
			"primary_score":	999649,
			"second_score":	130234
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6104,
			"primary_score":	999649,
			"second_score":	130233
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6106,
			"primary_score":	999649,
			"second_score":	130228
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6112,
			"primary_score":	999649,
			"second_score":	127426
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6114,
			"primary_score":	999649,
			"second_score":	127416
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6116,
			"primary_score":	999649,
			"second_score":	127414
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6117,
			"primary_score":	999649,
			"second_score":	127413
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6118,
			"primary_score":	999649,
			"second_score":	127412
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6119,
			"primary_score":	999649,
			"second_score":	127410
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6120,
			"primary_score":	999649,
			"second_score":	127406
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6122,
			"primary_score":	999649,
			"second_score":	127405
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6123,
			"primary_score":	999649,
			"second_score":	127400
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6125,
			"primary_score":	999649,
			"second_score":	127398
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6126,
			"primary_score":	999649,
			"second_score":	127388
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6127,
			"primary_score":	999649,
			"second_score":	127387
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6128,
			"primary_score":	999649,
			"second_score":	127386
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6134,
			"primary_score":	999649,
			"second_score":	126996
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6136,
			"primary_score":	999649,
			"second_score":	126986
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6137,
			"primary_score":	999649,
			"second_score":	126985
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6138,
			"primary_score":	999649,
			"second_score":	126981
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6139,
			"primary_score":	999649,
			"second_score":	126883
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6141,
			"primary_score":	999649,
			"second_score":	126882
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6143,
			"primary_score":	999649,
			"second_score":	126880
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6145,
			"primary_score":	999649,
			"second_score":	126875
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6151,
			"primary_score":	999649,
			"second_score":	430303
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6153,
			"primary_score":	999649,
			"second_score":	430302
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6154,
			"primary_score":	999649,
			"second_score":	430301
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6167,
			"primary_score":	999649,
			"second_score":	433545
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6169,
			"primary_score":	999649,
			"second_score":	433544
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6170,
			"primary_score":	999649,
			"second_score":	433543
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6183,
			"primary_score":	999649,
			"second_score":	432120
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6185,
			"primary_score":	999649,
			"second_score":	432119
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6186,
			"primary_score":	999649,
			"second_score":	432118
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6199,
			"primary_score":	999649,
			"second_score":	427831
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6212,
			"primary_score":	999649,
			"second_score":	429105
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6214,
			"primary_score":	999649,
			"second_score":	429104
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6220,
			"primary_score":	999682,
			"second_score":	429086
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6258,
			"primary_score":	999649,
			"second_score":	427763
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6260,
			"primary_score":	999649,
			"second_score":	427762
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6265,
			"primary_score":	999649,
			"second_score":	427761
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6267,
			"primary_score":	999649,
			"second_score":	427724
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6268,
			"primary_score":	999649,
			"second_score":	427701
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6279,
			"primary_score":	999649,
			"second_score":	134388
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6282,
			"primary_score":	999649,
			"second_score":	134387
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6283,
			"primary_score":	999649,
			"second_score":	134386
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6292,
			"primary_score":	999649,
			"second_score":	427700
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6293,
			"primary_score":	999649,
			"second_score":	427697
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6294,
			"primary_score":	999649,
			"second_score":	427696
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6609,
			"primary_score":	999649,
			"second_score":	427807
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6617,
			"primary_score":	999649,
			"second_score":	427679
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6618,
			"primary_score":	999649,
			"second_score":	427678
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6623,
			"primary_score":	999649,
			"second_score":	427677
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6633,
			"primary_score":	999649,
			"second_score":	427681
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6634,
			"primary_score":	999649,
			"second_score":	427680
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	32,
			"primary_score":	999649,
			"second_score":	6303
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	33,
			"primary_score":	999649,
			"second_score":	114318
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	35,
			"primary_score":	999649,
			"second_score":	6302
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	60,
			"primary_score":	999649,
			"second_score":	114101
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	171,
			"primary_score":	999649,
			"second_score":	114832
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	174,
			"primary_score":	999649,
			"second_score":	114831
		}, {
			"file":	"Zend/zend_exceptions.c",
			"line":	73,
			"primary_score":	999649,
			"second_score":	119979
		}, {
			"file":	"Zend/zend_exceptions.c",
			"line":	541,
			"primary_score":	999831,
			"second_score":	126113
		}, {
			"file":	"Zend/zend_exceptions.c",
			"line":	542,
			"primary_score":	999831,
			"second_score":	126112
		}, {
			"file":	"Zend/zend_exceptions.c",
			"line":	544,
			"primary_score":	999831,
			"second_score":	126111
		}, {
			"file":	"Zend/zend_exceptions.c",
			"line":	545,
			"primary_score":	999831,
			"second_score":	126110
		}, {
			"file":	"Zend/zend_exceptions.c",
			"line":	546,
			"primary_score":	999831,
			"second_score":	125750
		}, {
			"file":	"Zend/zend_exceptions.c",
			"line":	547,
			"primary_score":	999831,
			"second_score":	125749
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	71,
			"primary_score":	999649,
			"second_score":	126530
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	72,
			"primary_score":	999649,
			"second_score":	252499
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	73,
			"primary_score":	999649,
			"second_score":	252497
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	74,
			"primary_score":	999649,
			"second_score":	252495
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	77,
			"primary_score":	999825,
			"second_score":	126528
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	78,
			"primary_score":	999825,
			"second_score":	126527
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	81,
			"primary_score":	999825,
			"second_score":	126525
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	177,
			"primary_score":	999649,
			"second_score":	126480
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	182,
			"primary_score":	999649,
			"second_score":	126532
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	184,
			"primary_score":	999649,
			"second_score":	126531
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	185,
			"primary_score":	999649,
			"second_score":	126523
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	273,
			"primary_score":	999683,
			"second_score":	397678
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	275,
			"primary_score":	999683,
			"second_score":	397677
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	279,
			"primary_score":	999687,
			"second_score":	397676
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	280,
			"primary_score":	999687,
			"second_score":	397667
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	281,
			"primary_score":	999687,
			"second_score":	397665
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	283,
			"primary_score":	999683,
			"second_score":	397518
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	298,
			"primary_score":	999701,
			"second_score":	126131
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	300,
			"primary_score":	999701,
			"second_score":	126130
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	303,
			"primary_score":	999704,
			"second_score":	126129
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	439,
			"primary_score":	999683,
			"second_score":	126478
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	441,
			"primary_score":	999683,
			"second_score":	126477
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	442,
			"primary_score":	999683,
			"second_score":	397679
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	444,
			"primary_score":	999782,
			"second_score":	126476
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	602,
			"primary_score":	999649,
			"second_score":	264669
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	603,
			"primary_score":	999649,
			"second_score":	264668
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	604,
			"primary_score":	999649,
			"second_score":	264667
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	606,
			"primary_score":	999649,
			"second_score":	264666
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	611,
			"primary_score":	999649,
			"second_score":	264665
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	613,
			"primary_score":	999649,
			"second_score":	264664
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	629,
			"primary_score":	999649,
			"second_score":	264663
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	638,
			"primary_score":	999649,
			"second_score":	264662
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	799,
			"primary_score":	999715,
			"second_score":	126471
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	800,
			"primary_score":	999715,
			"second_score":	126470
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	802,
			"primary_score":	999715,
			"second_score":	126469
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	808,
			"primary_score":	999715,
			"second_score":	126468
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	811,
			"primary_score":	999717,
			"second_score":	397507
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	812,
			"primary_score":	999717,
			"second_score":	397505
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	813,
			"primary_score":	999717,
			"second_score":	397503
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	814,
			"primary_score":	999717,
			"second_score":	397479
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	815,
			"primary_score":	999717,
			"second_score":	397471
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	816,
			"primary_score":	999717,
			"second_score":	397470
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	818,
			"primary_score":	999949,
			"second_score":	126466
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	820,
			"primary_score":	999996,
			"second_score":	126465
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	826,
			"primary_score":	999949,
			"second_score":	126462
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	868,
			"primary_score":	999823,
			"second_score":	126513
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	869,
			"primary_score":	999823,
			"second_score":	126512
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	871,
			"primary_score":	999823,
			"second_score":	126511
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	877,
			"primary_score":	999823,
			"second_score":	126510
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	878,
			"primary_score":	999823,
			"second_score":	126508
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	879,
			"primary_score":	999957,
			"second_score":	252331
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	881,
			"primary_score":	999957,
			"second_score":	252330
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	882,
			"primary_score":	999957,
			"second_score":	252328
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	883,
			"primary_score":	999957,
			"second_score":	252326
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	884,
			"primary_score":	999957,
			"second_score":	252325
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	885,
			"primary_score":	999957,
			"second_score":	252324
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	886,
			"primary_score":	999957,
			"second_score":	252322
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	887,
			"primary_score":	999957,
			"second_score":	252319
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	891,
			"primary_score":	999957,
			"second_score":	252300
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	896,
			"primary_score":	999824,
			"second_score":	126506
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	897,
			"primary_score":	999824,
			"second_score":	126504
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	898,
			"primary_score":	999824,
			"second_score":	126502
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	905,
			"primary_score":	999824,
			"second_score":	126500
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	906,
			"primary_score":	999824,
			"second_score":	126499
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	907,
			"primary_score":	999824,
			"second_score":	126497
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	908,
			"primary_score":	999824,
			"second_score":	126495
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	82,
			"primary_score":	999649,
			"second_score":	125546
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	83,
			"primary_score":	999649,
			"second_score":	125544
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	85,
			"primary_score":	999649,
			"second_score":	125543
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	86,
			"primary_score":	999649,
			"second_score":	125542
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	87,
			"primary_score":	999649,
			"second_score":	125529
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	88,
			"primary_score":	999649,
			"second_score":	120084
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	91,
			"primary_score":	999649,
			"second_score":	252461
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	93,
			"primary_score":	999649,
			"second_score":	252460
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	94,
			"primary_score":	999649,
			"second_score":	252458
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	97,
			"primary_score":	999649,
			"second_score":	252456
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	103,
			"primary_score":	999649,
			"second_score":	121094
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	105,
			"primary_score":	999649,
			"second_score":	121093
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	113,
			"primary_score":	999649,
			"second_score":	121092
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	155,
			"primary_score":	999649,
			"second_score":	121091
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	199,
			"primary_score":	999649,
			"second_score":	114927
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	201,
			"primary_score":	999649,
			"second_score":	114926
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	202,
			"primary_score":	999649,
			"second_score":	114925
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	203,
			"primary_score":	999649,
			"second_score":	114924
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	204,
			"primary_score":	999649,
			"second_score":	114879
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	217,
			"primary_score":	999649,
			"second_score":	264538
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	222,
			"primary_score":	999649,
			"second_score":	264784
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	223,
			"primary_score":	999649,
			"second_score":	264782
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	245,
			"primary_score":	999649,
			"second_score":	426861
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	247,
			"primary_score":	999649,
			"second_score":	426860
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	250,
			"primary_score":	999649,
			"second_score":	426859
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	265,
			"primary_score":	999649,
			"second_score":	426858
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	267,
			"primary_score":	999649,
			"second_score":	426856
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	268,
			"primary_score":	999649,
			"second_score":	426855
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	269,
			"primary_score":	999649,
			"second_score":	426854
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	274,
			"primary_score":	999649,
			"second_score":	252520
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	280,
			"primary_score":	999649,
			"second_score":	252519
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	286,
			"primary_score":	999649,
			"second_score":	119988
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	293,
			"primary_score":	999649,
			"second_score":	119987
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	297,
			"primary_score":	999649,
			"second_score":	119986
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	305,
			"primary_score":	999649,
			"second_score":	264734
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	327,
			"primary_score":	999649,
			"second_score":	264733
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	328,
			"primary_score":	999649,
			"second_score":	264732
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	333,
			"primary_score":	999649,
			"second_score":	252617
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	334,
			"primary_score":	999649,
			"second_score":	252616
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	336,
			"primary_score":	999649,
			"second_score":	252615
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	337,
			"primary_score":	999649,
			"second_score":	252552
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	338,
			"primary_score":	999649,
			"second_score":	252551
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	339,
			"primary_score":	999649,
			"second_score":	252550
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	341,
			"primary_score":	999649,
			"second_score":	252521
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	367,
			"primary_score":	999649,
			"second_score":	264744
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	369,
			"primary_score":	999649,
			"second_score":	264743
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	371,
			"primary_score":	999649,
			"second_score":	264738
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	372,
			"primary_score":	999649,
			"second_score":	264737
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	373,
			"primary_score":	999649,
			"second_score":	264736
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	107,
			"primary_score":	999649,
			"second_score":	114866
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	119,
			"primary_score":	999649,
			"second_score":	114850
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	203,
			"primary_score":	999649,
			"second_score":	119558
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	206,
			"primary_score":	999649,
			"second_score":	119557
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	213,
			"primary_score":	999649,
			"second_score":	119634
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	214,
			"primary_score":	999649,
			"second_score":	119628
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	215,
			"primary_score":	999649,
			"second_score":	119627
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	216,
			"primary_score":	999649,
			"second_score":	119626
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	217,
			"primary_score":	999649,
			"second_score":	119623
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	219,
			"primary_score":	999649,
			"second_score":	119547
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	223,
			"primary_score":	999649,
			"second_score":	119544
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	229,
			"primary_score":	999649,
			"second_score":	118693
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	246,
			"primary_score":	999649,
			"second_score":	118687
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	247,
			"primary_score":	999649,
			"second_score":	118684
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	248,
			"primary_score":	999649,
			"second_score":	115012
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	250,
			"primary_score":	999649,
			"second_score":	115010
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	251,
			"primary_score":	999649,
			"second_score":	115004
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	254,
			"primary_score":	999649,
			"second_score":	115003
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	261,
			"primary_score":	999649,
			"second_score":	115002
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	268,
			"primary_score":	999649,
			"second_score":	115001
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	269,
			"primary_score":	999649,
			"second_score":	114997
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	270,
			"primary_score":	999649,
			"second_score":	114992
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	271,
			"primary_score":	999649,
			"second_score":	114983
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	272,
			"primary_score":	999649,
			"second_score":	114974
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	274,
			"primary_score":	999649,
			"second_score":	114972
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	284,
			"primary_score":	999649,
			"second_score":	114966
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	288,
			"primary_score":	999649,
			"second_score":	114965
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	289,
			"primary_score":	999649,
			"second_score":	114948
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	290,
			"primary_score":	999649,
			"second_score":	114931
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	293,
			"primary_score":	999649,
			"second_score":	114928
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	295,
			"primary_score":	999649,
			"second_score":	114878
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	298,
			"primary_score":	999649,
			"second_score":	114875
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	302,
			"primary_score":	999649,
			"second_score":	114874
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	303,
			"primary_score":	999649,
			"second_score":	114858
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	306,
			"primary_score":	999649,
			"second_score":	114842
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	311,
			"primary_score":	999649,
			"second_score":	114841
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	313,
			"primary_score":	999649,
			"second_score":	114839
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	314,
			"primary_score":	999649,
			"second_score":	114833
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	315,
			"primary_score":	999649,
			"second_score":	114093
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	317,
			"primary_score":	999649,
			"second_score":	114091
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	322,
			"primary_score":	999649,
			"second_score":	114085
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	324,
			"primary_score":	999649,
			"second_score":	114016
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	325,
			"primary_score":	999649,
			"second_score":	113995
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	326,
			"primary_score":	999649,
			"second_score":	113991
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	327,
			"primary_score":	999649,
			"second_score":	113989
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	328,
			"primary_score":	999649,
			"second_score":	113987
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	329,
			"primary_score":	999649,
			"second_score":	113919
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	333,
			"primary_score":	999649,
			"second_score":	113918
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	335,
			"primary_score":	999649,
			"second_score":	113916
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	337,
			"primary_score":	999649,
			"second_score":	113911
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	397,
			"primary_score":	999649,
			"second_score":	397061
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	398,
			"primary_score":	999649,
			"second_score":	397060
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	407,
			"primary_score":	999649,
			"second_score":	397058
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	411,
			"primary_score":	999649,
			"second_score":	397057
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	412,
			"primary_score":	999649,
			"second_score":	397056
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	421,
			"primary_score":	999649,
			"second_score":	397063
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	430,
			"primary_score":	999649,
			"second_score":	115128
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	431,
			"primary_score":	999649,
			"second_score":	115126
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	432,
			"primary_score":	999649,
			"second_score":	115124
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	434,
			"primary_score":	999649,
			"second_score":	115123
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	435,
			"primary_score":	999649,
			"second_score":	115122
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	436,
			"primary_score":	999649,
			"second_score":	115109
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	437,
			"primary_score":	999649,
			"second_score":	115075
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	440,
			"primary_score":	999649,
			"second_score":	115882
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	442,
			"primary_score":	999649,
			"second_score":	115881
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	443,
			"primary_score":	999649,
			"second_score":	115879
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	446,
			"primary_score":	999649,
			"second_score":	115877
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	456,
			"primary_score":	999649,
			"second_score":	15304
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	457,
			"primary_score":	999649,
			"second_score":	15302
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	458,
			"primary_score":	999649,
			"second_score":	15300
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	459,
			"primary_score":	999649,
			"second_score":	15298
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	460,
			"primary_score":	999649,
			"second_score":	17663
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	461,
			"primary_score":	999649,
			"second_score":	17661
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1155,
			"primary_score":	999649,
			"second_score":	122168
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1156,
			"primary_score":	999649,
			"second_score":	122167
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1157,
			"primary_score":	999649,
			"second_score":	122166
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1158,
			"primary_score":	999649,
			"second_score":	122165
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1159,
			"primary_score":	999649,
			"second_score":	122164
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1161,
			"primary_score":	999649,
			"second_score":	122163
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1169,
			"primary_score":	999649,
			"second_score":	122162
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1170,
			"primary_score":	999649,
			"second_score":	122161
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1172,
			"primary_score":	999649,
			"second_score":	122160
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1176,
			"primary_score":	999649,
			"second_score":	122159
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1177,
			"primary_score":	999649,
			"second_score":	122158
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1178,
			"primary_score":	999649,
			"second_score":	122157
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1179,
			"primary_score":	999649,
			"second_score":	119670
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1181,
			"primary_score":	999649,
			"second_score":	119669
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1182,
			"primary_score":	999649,
			"second_score":	119668
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1183,
			"primary_score":	999649,
			"second_score":	119667
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1184,
			"primary_score":	999649,
			"second_score":	119666
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1185,
			"primary_score":	999649,
			"second_score":	119665
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1187,
			"primary_score":	999649,
			"second_score":	119664
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1188,
			"primary_score":	999649,
			"second_score":	119663
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1189,
			"primary_score":	999649,
			"second_score":	119662
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1190,
			"primary_score":	999649,
			"second_score":	119661
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1193,
			"primary_score":	999649,
			"second_score":	119660
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1195,
			"primary_score":	999649,
			"second_score":	119659
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1197,
			"primary_score":	999649,
			"second_score":	119291
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1198,
			"primary_score":	999649,
			"second_score":	119290
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1199,
			"primary_score":	999649,
			"second_score":	119289
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1202,
			"primary_score":	999649,
			"second_score":	119288
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1210,
			"primary_score":	999649,
			"second_score":	119257
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1211,
			"primary_score":	999649,
			"second_score":	119256
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1212,
			"primary_score":	999649,
			"second_score":	119255
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1213,
			"primary_score":	999649,
			"second_score":	119254
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1214,
			"primary_score":	999649,
			"second_score":	119165
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1215,
			"primary_score":	999649,
			"second_score":	119146
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1216,
			"primary_score":	999649,
			"second_score":	119145
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1220,
			"primary_score":	999649,
			"second_score":	119144
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1223,
			"primary_score":	999649,
			"second_score":	119143
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1235,
			"primary_score":	999649,
			"second_score":	122170
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1237,
			"primary_score":	999649,
			"second_score":	122169
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1238,
			"primary_score":	999649,
			"second_score":	119142
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1242,
			"primary_score":	999649,
			"second_score":	119141
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1248,
			"primary_score":	999649,
			"second_score":	122171
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1510,
			"primary_score":	999649,
			"second_score":	103809
		}, {
			"file":	"Zend/zend_extensions.c",
			"line":	182,
			"primary_score":	999649,
			"second_score":	14760
		}, {
			"file":	"Zend/zend_extensions.c",
			"line":	183,
			"primary_score":	999649,
			"second_score":	14757
		}, {
			"file":	"Zend/zend_float.c",
			"line":	44,
			"primary_score":	999649,
			"second_score":	113915
		}, {
			"file":	"Zend/zend_float.c",
			"line":	45,
			"primary_score":	999649,
			"second_score":	113914
		}, {
			"file":	"Zend/zend_float.c",
			"line":	48,
			"primary_score":	999649,
			"second_score":	113912
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	35,
			"primary_score":	999649,
			"second_score":	3139
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	36,
			"primary_score":	999649,
			"second_score":	3138
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	37,
			"primary_score":	999649,
			"second_score":	3137
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	84,
			"primary_score":	999649,
			"second_score":	3140
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	132,
			"primary_score":	999649,
			"second_score":	115914
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	142,
			"primary_score":	999649,
			"second_score":	115913
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	147,
			"primary_score":	999649,
			"second_score":	115912
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	149,
			"primary_score":	999649,
			"second_score":	115911
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	150,
			"primary_score":	999649,
			"second_score":	118736
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	152,
			"primary_score":	999649,
			"second_score":	118735
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	153,
			"primary_score":	999649,
			"second_score":	118734
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	155,
			"primary_score":	999649,
			"second_score":	118733
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	156,
			"primary_score":	999649,
			"second_score":	118871
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	157,
			"primary_score":	999649,
			"second_score":	118732
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	158,
			"primary_score":	999649,
			"second_score":	118731
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	159,
			"primary_score":	999649,
			"second_score":	118730
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	176,
			"primary_score":	999649,
			"second_score":	118729
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	177,
			"primary_score":	999649,
			"second_score":	118728
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	178,
			"primary_score":	999649,
			"second_score":	118727
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	179,
			"primary_score":	999649,
			"second_score":	118726
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	181,
			"primary_score":	999649,
			"second_score":	118725
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	183,
			"primary_score":	999649,
			"second_score":	118724
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	184,
			"primary_score":	999649,
			"second_score":	118723
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	186,
			"primary_score":	999649,
			"second_score":	118722
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	187,
			"primary_score":	999649,
			"second_score":	118721
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	188,
			"primary_score":	999649,
			"second_score":	118720
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	251,
			"primary_score":	999649,
			"second_score":	115120
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	253,
			"primary_score":	999649,
			"second_score":	115119
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	264,
			"primary_score":	999649,
			"second_score":	115118
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	265,
			"primary_score":	999649,
			"second_score":	115117
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	266,
			"primary_score":	999649,
			"second_score":	115111
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	653,
			"primary_score":	999649,
			"second_score":	113723
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	655,
			"primary_score":	999649,
			"second_score":	113722
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	728,
			"primary_score":	999649,
			"second_score":	113721
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	182,
			"primary_score":	999649,
			"second_score":	115876
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	183,
			"primary_score":	999649,
			"second_score":	115915
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	189,
			"primary_score":	999649,
			"second_score":	115116
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	190,
			"primary_score":	999649,
			"second_score":	115115
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	191,
			"primary_score":	999649,
			"second_score":	115114
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	192,
			"primary_score":	999649,
			"second_score":	115113
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	193,
			"primary_score":	999649,
			"second_score":	115112
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	150,
			"primary_score":	999649,
			"second_score":	264474
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	152,
			"primary_score":	999649,
			"second_score":	264473
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	154,
			"primary_score":	999649,
			"second_score":	264472
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	158,
			"primary_score":	999649,
			"second_score":	264471
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	161,
			"primary_score":	999649,
			"second_score":	264470
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	164,
			"primary_score":	999649,
			"second_score":	264469
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	165,
			"primary_score":	999649,
			"second_score":	264468
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	166,
			"primary_score":	999649,
			"second_score":	264467
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	167,
			"primary_score":	999649,
			"second_score":	264466
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	168,
			"primary_score":	999649,
			"second_score":	264465
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	169,
			"primary_score":	999649,
			"second_score":	264464
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	170,
			"primary_score":	999649,
			"second_score":	264463
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	171,
			"primary_score":	999649,
			"second_score":	264462
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	172,
			"primary_score":	999649,
			"second_score":	264461
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	173,
			"primary_score":	999649,
			"second_score":	264460
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	174,
			"primary_score":	999649,
			"second_score":	264459
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	175,
			"primary_score":	999649,
			"second_score":	264458
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	197,
			"primary_score":	999649,
			"second_score":	427070
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	198,
			"primary_score":	999649,
			"second_score":	427069
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	199,
			"primary_score":	999649,
			"second_score":	427068
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	201,
			"primary_score":	999649,
			"second_score":	427067
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	203,
			"primary_score":	999649,
			"second_score":	427066
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	210,
			"primary_score":	999649,
			"second_score":	442269
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	212,
			"primary_score":	999649,
			"second_score":	427063
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	213,
			"primary_score":	999649,
			"second_score":	426955
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	215,
			"primary_score":	999649,
			"second_score":	426954
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	216,
			"primary_score":	999649,
			"second_score":	426953
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	217,
			"primary_score":	999649,
			"second_score":	426952
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	219,
			"primary_score":	999649,
			"second_score":	426951
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	220,
			"primary_score":	999649,
			"second_score":	426950
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	233,
			"primary_score":	999651,
			"second_score":	451539
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	243,
			"primary_score":	999649,
			"second_score":	442042
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	250,
			"primary_score":	999649,
			"second_score":	442041
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	251,
			"primary_score":	999649,
			"second_score":	441937
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	254,
			"primary_score":	999649,
			"second_score":	441936
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	255,
			"primary_score":	999649,
			"second_score":	441935
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	257,
			"primary_score":	999649,
			"second_score":	441934
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	258,
			"primary_score":	999649,
			"second_score":	443025
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	259,
			"primary_score":	999649,
			"second_score":	441928
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	260,
			"primary_score":	999649,
			"second_score":	441927
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	261,
			"primary_score":	999649,
			"second_score":	441923
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	262,
			"primary_score":	999649,
			"second_score":	441922
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	265,
			"primary_score":	999649,
			"second_score":	441921
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	266,
			"primary_score":	999649,
			"second_score":	441919
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	267,
			"primary_score":	999649,
			"second_score":	441910
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	268,
			"primary_score":	999649,
			"second_score":	441909
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	270,
			"primary_score":	999649,
			"second_score":	441907
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	271,
			"primary_score":	999649,
			"second_score":	441906
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	272,
			"primary_score":	999649,
			"second_score":	441904
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	277,
			"primary_score":	999649,
			"second_score":	397664
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	278,
			"primary_score":	999649,
			"second_score":	397663
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	280,
			"primary_score":	999649,
			"second_score":	397662
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	282,
			"primary_score":	999649,
			"second_score":	397661
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	286,
			"primary_score":	999649,
			"second_score":	397660
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	287,
			"primary_score":	999649,
			"second_score":	397658
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	289,
			"primary_score":	999649,
			"second_score":	397657
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	290,
			"primary_score":	999649,
			"second_score":	397656
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	291,
			"primary_score":	999649,
			"second_score":	397862
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	314,
			"primary_score":	999649,
			"second_score":	397861
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	317,
			"primary_score":	999649,
			"second_score":	397655
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	318,
			"primary_score":	999649,
			"second_score":	397654
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	319,
			"primary_score":	999649,
			"second_score":	397550
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	322,
			"primary_score":	999649,
			"second_score":	397549
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	332,
			"primary_score":	999649,
			"second_score":	397548
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	333,
			"primary_score":	999649,
			"second_score":	397547
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	334,
			"primary_score":	999649,
			"second_score":	397542
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	336,
			"primary_score":	999649,
			"second_score":	397743
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	338,
			"primary_score":	999649,
			"second_score":	397537
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	339,
			"primary_score":	999649,
			"second_score":	397536
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	342,
			"primary_score":	999649,
			"second_score":	397535
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	343,
			"primary_score":	999649,
			"second_score":	397533
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	344,
			"primary_score":	999649,
			"second_score":	397532
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	345,
			"primary_score":	999649,
			"second_score":	397524
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	347,
			"primary_score":	999649,
			"second_score":	397522
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	348,
			"primary_score":	999649,
			"second_score":	397521
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	349,
			"primary_score":	999649,
			"second_score":	397519
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	363,
			"primary_score":	999649,
			"second_score":	252690
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	364,
			"primary_score":	999649,
			"second_score":	252689
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	366,
			"primary_score":	999649,
			"second_score":	252688
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	367,
			"primary_score":	999649,
			"second_score":	264244
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	369,
			"primary_score":	999649,
			"second_score":	252685
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	370,
			"primary_score":	999649,
			"second_score":	252684
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	372,
			"primary_score":	999649,
			"second_score":	252683
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	374,
			"primary_score":	999649,
			"second_score":	252682
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	375,
			"primary_score":	999649,
			"second_score":	252681
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	376,
			"primary_score":	999649,
			"second_score":	257150
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	401,
			"primary_score":	999649,
			"second_score":	257149
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	403,
			"primary_score":	999649,
			"second_score":	252680
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	404,
			"primary_score":	999649,
			"second_score":	252658
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	407,
			"primary_score":	999649,
			"second_score":	252657
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	408,
			"primary_score":	999649,
			"second_score":	252656
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	409,
			"primary_score":	999649,
			"second_score":	252655
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	410,
			"primary_score":	999649,
			"second_score":	252654
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	411,
			"primary_score":	999649,
			"second_score":	252649
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	415,
			"primary_score":	999649,
			"second_score":	257113
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	417,
			"primary_score":	999649,
			"second_score":	252644
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	418,
			"primary_score":	999649,
			"second_score":	252642
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	419,
			"primary_score":	999649,
			"second_score":	264161
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	420,
			"primary_score":	999649,
			"second_score":	252633
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	422,
			"primary_score":	999649,
			"second_score":	252631
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	423,
			"primary_score":	999649,
			"second_score":	252630
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	425,
			"primary_score":	999649,
			"second_score":	252629
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	426,
			"primary_score":	999649,
			"second_score":	257094
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	427,
			"primary_score":	999649,
			"second_score":	252626
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	433,
			"primary_score":	999649,
			"second_score":	257093
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	435,
			"primary_score":	999649,
			"second_score":	257092
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	437,
			"primary_score":	999649,
			"second_score":	257091
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	438,
			"primary_score":	999649,
			"second_score":	257090
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	439,
			"primary_score":	999649,
			"second_score":	256982
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	440,
			"primary_score":	999649,
			"second_score":	256981
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	441,
			"primary_score":	999649,
			"second_score":	256979
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	442,
			"primary_score":	999649,
			"second_score":	256978
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	443,
			"primary_score":	999649,
			"second_score":	256977
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	444,
			"primary_score":	999649,
			"second_score":	256976
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	445,
			"primary_score":	999649,
			"second_score":	256512
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	446,
			"primary_score":	999649,
			"second_score":	256510
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	455,
			"primary_score":	999649,
			"second_score":	256975
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	456,
			"primary_score":	999649,
			"second_score":	256974
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	458,
			"primary_score":	999649,
			"second_score":	256973
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	459,
			"primary_score":	999649,
			"second_score":	256972
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	463,
			"primary_score":	999649,
			"second_score":	256971
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	464,
			"primary_score":	999649,
			"second_score":	256970
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	465,
			"primary_score":	999649,
			"second_score":	256969
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	466,
			"primary_score":	999649,
			"second_score":	256520
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	467,
			"primary_score":	999649,
			"second_score":	256519
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	468,
			"primary_score":	999649,
			"second_score":	256515
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	469,
			"primary_score":	999649,
			"second_score":	256514
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	471,
			"primary_score":	999649,
			"second_score":	256513
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	476,
			"primary_score":	999649,
			"second_score":	47519
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	477,
			"primary_score":	999649,
			"second_score":	47518
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	479,
			"primary_score":	999649,
			"second_score":	47517
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	481,
			"primary_score":	999649,
			"second_score":	47516
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	482,
			"primary_score":	999649,
			"second_score":	47515
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	484,
			"primary_score":	999649,
			"second_score":	47499
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	486,
			"primary_score":	999649,
			"second_score":	47498
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	487,
			"primary_score":	999649,
			"second_score":	47497
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	488,
			"primary_score":	999649,
			"second_score":	47496
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	492,
			"primary_score":	999649,
			"second_score":	47495
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	493,
			"primary_score":	999649,
			"second_score":	47493
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	494,
			"primary_score":	999649,
			"second_score":	47492
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	496,
			"primary_score":	999649,
			"second_score":	47543
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	498,
			"primary_score":	999649,
			"second_score":	47491
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	499,
			"primary_score":	999649,
			"second_score":	51870
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	501,
			"primary_score":	999649,
			"second_score":	47490
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	502,
			"primary_score":	999649,
			"second_score":	50457
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	505,
			"primary_score":	999649,
			"second_score":	47489
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	507,
			"primary_score":	999649,
			"second_score":	47488
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	508,
			"primary_score":	999649,
			"second_score":	47487
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	510,
			"primary_score":	999649,
			"second_score":	62289
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	512,
			"primary_score":	999649,
			"second_score":	47486
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	513,
			"primary_score":	999649,
			"second_score":	47485
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	515,
			"primary_score":	999649,
			"second_score":	47484
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	516,
			"primary_score":	999649,
			"second_score":	47483
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	518,
			"primary_score":	999649,
			"second_score":	47479
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	519,
			"primary_score":	999649,
			"second_score":	47478
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	521,
			"primary_score":	999649,
			"second_score":	47477
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	522,
			"primary_score":	999649,
			"second_score":	47476
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	523,
			"primary_score":	999649,
			"second_score":	47474
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	524,
			"primary_score":	999649,
			"second_score":	47473
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	526,
			"primary_score":	999649,
			"second_score":	47548
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	534,
			"primary_score":	999649,
			"second_score":	3133
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	536,
			"primary_score":	999649,
			"second_score":	3132
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	538,
			"primary_score":	999649,
			"second_score":	3131
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	540,
			"primary_score":	999649,
			"second_score":	3130
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	541,
			"primary_score":	999649,
			"second_score":	3129
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	542,
			"primary_score":	999649,
			"second_score":	3122
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	543,
			"primary_score":	999649,
			"second_score":	3121
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	544,
			"primary_score":	999649,
			"second_score":	3120
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	545,
			"primary_score":	999649,
			"second_score":	3257
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	547,
			"primary_score":	999649,
			"second_score":	3119
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	548,
			"primary_score":	999649,
			"second_score":	3118
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	550,
			"primary_score":	999649,
			"second_score":	3117
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	552,
			"primary_score":	999649,
			"second_score":	3116
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	553,
			"primary_score":	999649,
			"second_score":	3115
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	556,
			"primary_score":	999649,
			"second_score":	3114
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	599,
			"primary_score":	999649,
			"second_score":	3611
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	601,
			"primary_score":	999649,
			"second_score":	3610
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	602,
			"primary_score":	999649,
			"second_score":	3608
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	603,
			"primary_score":	999649,
			"second_score":	3924
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	605,
			"primary_score":	999649,
			"second_score":	3607
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	607,
			"primary_score":	999649,
			"second_score":	3606
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	608,
			"primary_score":	999649,
			"second_score":	3605
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	610,
			"primary_score":	999649,
			"second_score":	3604
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	611,
			"primary_score":	999649,
			"second_score":	53064
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	616,
			"primary_score":	999649,
			"second_score":	3603
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	617,
			"primary_score":	999649,
			"second_score":	53006
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	620,
			"primary_score":	999649,
			"second_score":	3602
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	622,
			"primary_score":	999649,
			"second_score":	3601
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	623,
			"primary_score":	999649,
			"second_score":	3600
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	625,
			"primary_score":	999649,
			"second_score":	50420
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	627,
			"primary_score":	999649,
			"second_score":	3599
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	628,
			"primary_score":	999649,
			"second_score":	3598
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	630,
			"primary_score":	999649,
			"second_score":	3597
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	631,
			"primary_score":	999649,
			"second_score":	3596
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	633,
			"primary_score":	999649,
			"second_score":	3594
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	634,
			"primary_score":	999649,
			"second_score":	50413
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	636,
			"primary_score":	999649,
			"second_score":	3593
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	637,
			"primary_score":	999649,
			"second_score":	3592
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	639,
			"primary_score":	999649,
			"second_score":	3591
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	640,
			"primary_score":	999649,
			"second_score":	3590
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	642,
			"primary_score":	999649,
			"second_score":	3589
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	665,
			"primary_score":	999649,
			"second_score":	103778
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	667,
			"primary_score":	999649,
			"second_score":	103777
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	669,
			"primary_score":	999649,
			"second_score":	103776
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	670,
			"primary_score":	999649,
			"second_score":	103775
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	671,
			"primary_score":	999649,
			"second_score":	50432
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	672,
			"primary_score":	999649,
			"second_score":	47464
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	675,
			"primary_score":	999649,
			"second_score":	47463
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	676,
			"primary_score":	999649,
			"second_score":	47462
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	679,
			"primary_score":	999649,
			"second_score":	47461
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	693,
			"primary_score":	999649,
			"second_score":	119449
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	695,
			"primary_score":	999649,
			"second_score":	119448
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	697,
			"primary_score":	999649,
			"second_score":	119447
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	698,
			"primary_score":	999649,
			"second_score":	119445
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	699,
			"primary_score":	999649,
			"second_score":	119444
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	711,
			"primary_score":	999649,
			"second_score":	119443
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	717,
			"primary_score":	999649,
			"second_score":	6024
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	719,
			"primary_score":	999649,
			"second_score":	6023
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	721,
			"primary_score":	999649,
			"second_score":	6022
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	722,
			"primary_score":	999649,
			"second_score":	6020
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	723,
			"primary_score":	999649,
			"second_score":	6019
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	724,
			"primary_score":	999649,
			"second_score":	3575
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	726,
			"primary_score":	999649,
			"second_score":	3572
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	727,
			"primary_score":	999649,
			"second_score":	3612
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	729,
			"primary_score":	999649,
			"second_score":	3571
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	731,
			"primary_score":	999649,
			"second_score":	3570
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	735,
			"primary_score":	999649,
			"second_score":	3569
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	775,
			"primary_score":	999649,
			"second_score":	114830
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	777,
			"primary_score":	999649,
			"second_score":	114829
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	779,
			"primary_score":	999649,
			"second_score":	119619
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	780,
			"primary_score":	999649,
			"second_score":	114826
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	781,
			"primary_score":	999649,
			"second_score":	114825
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	782,
			"primary_score":	999649,
			"second_score":	114102
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	784,
			"primary_score":	999649,
			"second_score":	114100
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	785,
			"primary_score":	999649,
			"second_score":	114099
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	786,
			"primary_score":	999649,
			"second_score":	114098
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	787,
			"primary_score":	999649,
			"second_score":	114339
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	789,
			"primary_score":	999649,
			"second_score":	114097
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	790,
			"primary_score":	999649,
			"second_score":	114096
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	793,
			"primary_score":	999649,
			"second_score":	119551
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	898,
			"primary_score":	999649,
			"second_score":	97885
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	899,
			"primary_score":	999649,
			"second_score":	97884
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	900,
			"primary_score":	999649,
			"second_score":	97883
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	902,
			"primary_score":	999649,
			"second_score":	97882
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	904,
			"primary_score":	999649,
			"second_score":	97881
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	905,
			"primary_score":	999649,
			"second_score":	97867
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	907,
			"primary_score":	999649,
			"second_score":	97866
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	908,
			"primary_score":	999649,
			"second_score":	97865
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	909,
			"primary_score":	999649,
			"second_score":	97862
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	911,
			"primary_score":	999649,
			"second_score":	97861
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	912,
			"primary_score":	999649,
			"second_score":	97860
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	914,
			"primary_score":	999649,
			"second_score":	97863
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	916,
			"primary_score":	999649,
			"second_score":	429087
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	922,
			"primary_score":	999649,
			"second_score":	264766
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	923,
			"primary_score":	999649,
			"second_score":	264765
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	925,
			"primary_score":	999649,
			"second_score":	264764
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	929,
			"primary_score":	999649,
			"second_score":	264763
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	931,
			"primary_score":	999649,
			"second_score":	264762
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	933,
			"primary_score":	999649,
			"second_score":	264761
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	934,
			"primary_score":	999649,
			"second_score":	264760
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	935,
			"primary_score":	999649,
			"second_score":	264759
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	937,
			"primary_score":	999649,
			"second_score":	264758
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	938,
			"primary_score":	999649,
			"second_score":	264757
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	940,
			"primary_score":	999649,
			"second_score":	397876
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	942,
			"primary_score":	999649,
			"second_score":	397668
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	948,
			"primary_score":	999649,
			"second_score":	64847
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	949,
			"primary_score":	999649,
			"second_score":	64846
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	950,
			"primary_score":	999649,
			"second_score":	64845
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	952,
			"primary_score":	999649,
			"second_score":	64844
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	954,
			"primary_score":	999649,
			"second_score":	64843
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	955,
			"primary_score":	999649,
			"second_score":	64834
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	957,
			"primary_score":	999649,
			"second_score":	64833
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	958,
			"primary_score":	999649,
			"second_score":	64832
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	959,
			"primary_score":	999649,
			"second_score":	64831
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	961,
			"primary_score":	999649,
			"second_score":	64830
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	997,
			"primary_score":	999649,
			"second_score":	114274
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	998,
			"primary_score":	999649,
			"second_score":	114273
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1000,
			"primary_score":	999649,
			"second_score":	114272
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1002,
			"primary_score":	999649,
			"second_score":	114271
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1004,
			"primary_score":	999649,
			"second_score":	114270
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1005,
			"primary_score":	999649,
			"second_score":	114269
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1006,
			"primary_score":	999649,
			"second_score":	114268
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1007,
			"primary_score":	999649,
			"second_score":	114267
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1008,
			"primary_score":	999649,
			"second_score":	114266
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1038,
			"primary_score":	999649,
			"second_score":	119549
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1040,
			"primary_score":	999649,
			"second_score":	119548
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1046,
			"primary_score":	999892,
			"second_score":	126561
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1047,
			"primary_score":	999892,
			"second_score":	126560
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1048,
			"primary_score":	999892,
			"second_score":	127570
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1049,
			"primary_score":	999892,
			"second_score":	127569
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1051,
			"primary_score":	999892,
			"second_score":	126559
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1052,
			"primary_score":	999892,
			"second_score":	126558
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1058,
			"primary_score":	999892,
			"second_score":	125563
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1059,
			"primary_score":	999892,
			"second_score":	125562
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1060,
			"primary_score":	999892,
			"second_score":	126586
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1074,
			"primary_score":	999892,
			"second_score":	125561
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1079,
			"primary_score":	999649,
			"second_score":	252481
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1081,
			"primary_score":	999649,
			"second_score":	252480
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1084,
			"primary_score":	999649,
			"second_score":	252479
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1104,
			"primary_score":	999649,
			"second_score":	178772
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1106,
			"primary_score":	999649,
			"second_score":	178771
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1108,
			"primary_score":	999649,
			"second_score":	178770
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1109,
			"primary_score":	999649,
			"second_score":	178769
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1110,
			"primary_score":	999649,
			"second_score":	178768
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1132,
			"primary_score":	999878,
			"second_score":	126575
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1134,
			"primary_score":	999878,
			"second_score":	126574
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1136,
			"primary_score":	999878,
			"second_score":	126573
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1138,
			"primary_score":	999878,
			"second_score":	126572
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1139,
			"primary_score":	999878,
			"second_score":	126571
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1150,
			"primary_score":	999928,
			"second_score":	126570
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1151,
			"primary_score":	999928,
			"second_score":	126569
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1160,
			"primary_score":	999892,
			"second_score":	252476
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1162,
			"primary_score":	999892,
			"second_score":	252475
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1164,
			"primary_score":	999892,
			"second_score":	252474
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1166,
			"primary_score":	999892,
			"second_score":	252473
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1167,
			"primary_score":	999892,
			"second_score":	252472
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1170,
			"primary_score":	999940,
			"second_score":	252471
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1179,
			"primary_score":	999649,
			"second_score":	178767
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1181,
			"primary_score":	999649,
			"second_score":	178766
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1183,
			"primary_score":	999649,
			"second_score":	178765
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1185,
			"primary_score":	999649,
			"second_score":	178764
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1186,
			"primary_score":	999649,
			"second_score":	178775
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1187,
			"primary_score":	999649,
			"second_score":	178774
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1189,
			"primary_score":	999649,
			"second_score":	178763
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	263,
			"primary_score":	999649,
			"second_score":	47514
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	266,
			"primary_score":	999649,
			"second_score":	47513
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	267,
			"primary_score":	999649,
			"second_score":	47512
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	268,
			"primary_score":	999649,
			"second_score":	47511
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	269,
			"primary_score":	999649,
			"second_score":	47510
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	270,
			"primary_score":	999649,
			"second_score":	47509
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	271,
			"primary_score":	999649,
			"second_score":	47508
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	272,
			"primary_score":	999649,
			"second_score":	47507
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	273,
			"primary_score":	999649,
			"second_score":	47506
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	274,
			"primary_score":	999649,
			"second_score":	47505
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	276,
			"primary_score":	999649,
			"second_score":	47504
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	278,
			"primary_score":	999649,
			"second_score":	48963
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	279,
			"primary_score":	999649,
			"second_score":	47718
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	280,
			"primary_score":	999649,
			"second_score":	47717
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	281,
			"primary_score":	999649,
			"second_score":	47716
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	282,
			"primary_score":	999649,
			"second_score":	47503
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	283,
			"primary_score":	999649,
			"second_score":	47502
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	287,
			"primary_score":	999649,
			"second_score":	47500
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	39,
			"primary_score":	999649,
			"second_score":	3574
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	40,
			"primary_score":	999649,
			"second_score":	3614
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	42,
			"primary_score":	999649,
			"second_score":	3573
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	105,
			"primary_score":	999649,
			"second_score":	3243
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	106,
			"primary_score":	999649,
			"second_score":	3216
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	107,
			"primary_score":	999649,
			"second_score":	3215
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	121,
			"primary_score":	999649,
			"second_score":	113713
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	127,
			"primary_score":	999649,
			"second_score":	113712
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	226,
			"primary_score":	999649,
			"second_score":	6025
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	384,
			"primary_score":	999649,
			"second_score":	97888
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	385,
			"primary_score":	999649,
			"second_score":	97887
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	387,
			"primary_score":	999649,
			"second_score":	97886
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	388,
			"primary_score":	999649,
			"second_score":	97859
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	392,
			"primary_score":	999649,
			"second_score":	97858
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	395,
			"primary_score":	999649,
			"second_score":	97857
		}, {
			"file":	"Zend/zend_iterators.c",
			"line":	81,
			"primary_score":	999892,
			"second_score":	125566
		}, {
			"file":	"Zend/zend_iterators.c",
			"line":	94,
			"primary_score":	999892,
			"second_score":	125565
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3151,
			"primary_score":	999649,
			"second_score":	427645
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3153,
			"primary_score":	999649,
			"second_score":	427644
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3155,
			"primary_score":	999649,
			"second_score":	427643
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3157,
			"primary_score":	999649,
			"second_score":	427642
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3214,
			"primary_score":	999649,
			"second_score":	441642
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3217,
			"primary_score":	999649,
			"second_score":	441641
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3220,
			"primary_score":	999649,
			"second_score":	441640
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3222,
			"primary_score":	999649,
			"second_score":	441639
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3223,
			"primary_score":	999649,
			"second_score":	441638
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3224,
			"primary_score":	999649,
			"second_score":	441637
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3226,
			"primary_score":	999649,
			"second_score":	441636
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3228,
			"primary_score":	999649,
			"second_score":	441635
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3231,
			"primary_score":	999649,
			"second_score":	441634
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3232,
			"primary_score":	999649,
			"second_score":	441633
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3233,
			"primary_score":	999649,
			"second_score":	441632
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3245,
			"primary_score":	999649,
			"second_score":	441631
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3246,
			"primary_score":	999649,
			"second_score":	441630
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3247,
			"primary_score":	999649,
			"second_score":	441629
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3250,
			"primary_score":	999649,
			"second_score":	441628
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3251,
			"primary_score":	999649,
			"second_score":	441627
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3252,
			"primary_score":	999649,
			"second_score":	441626
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3258,
			"primary_score":	999649,
			"second_score":	441625
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3262,
			"primary_score":	999649,
			"second_score":	441624
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3267,
			"primary_score":	999649,
			"second_score":	441623
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3269,
			"primary_score":	999649,
			"second_score":	441622
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3271,
			"primary_score":	999649,
			"second_score":	441621
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3272,
			"primary_score":	999649,
			"second_score":	441620
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3273,
			"primary_score":	999649,
			"second_score":	441619
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3274,
			"primary_score":	999649,
			"second_score":	441618
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3281,
			"primary_score":	999649,
			"second_score":	441617
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3282,
			"primary_score":	999649,
			"second_score":	441616
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3284,
			"primary_score":	999649,
			"second_score":	441615
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3294,
			"primary_score":	999649,
			"second_score":	427665
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3297,
			"primary_score":	999649,
			"second_score":	427664
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3362,
			"primary_score":	999649,
			"second_score":	427663
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3364,
			"primary_score":	999649,
			"second_score":	427662
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3376,
			"primary_score":	999649,
			"second_score":	427661
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3377,
			"primary_score":	999649,
			"second_score":	427790
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3382,
			"primary_score":	999649,
			"second_score":	427660
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3384,
			"primary_score":	999649,
			"second_score":	427765
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3385,
			"primary_score":	999649,
			"second_score":	427764
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3388,
			"primary_score":	999649,
			"second_score":	427659
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3390,
			"primary_score":	999649,
			"second_score":	427658
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3391,
			"primary_score":	999649,
			"second_score":	427657
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3395,
			"primary_score":	999649,
			"second_score":	428020
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3396,
			"primary_score":	999649,
			"second_score":	428019
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3401,
			"primary_score":	999649,
			"second_score":	427656
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3402,
			"primary_score":	999649,
			"second_score":	427655
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3403,
			"primary_score":	999649,
			"second_score":	428330
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3404,
			"primary_score":	999649,
			"second_score":	427654
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3405,
			"primary_score":	999649,
			"second_score":	427653
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3407,
			"primary_score":	999649,
			"second_score":	427688
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3409,
			"primary_score":	999649,
			"second_score":	427687
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3410,
			"primary_score":	999649,
			"second_score":	427686
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3413,
			"primary_score":	999649,
			"second_score":	427652
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3414,
			"primary_score":	999649,
			"second_score":	427651
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3418,
			"primary_score":	999649,
			"second_score":	428013
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3422,
			"primary_score":	999649,
			"second_score":	428012
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3425,
			"primary_score":	999649,
			"second_score":	428011
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3426,
			"primary_score":	999649,
			"second_score":	428010
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3428,
			"primary_score":	999649,
			"second_score":	428009
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3429,
			"primary_score":	999649,
			"second_score":	428008
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3431,
			"primary_score":	999649,
			"second_score":	428007
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3439,
			"primary_score":	999649,
			"second_score":	427789
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3441,
			"primary_score":	999649,
			"second_score":	427788
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3459,
			"primary_score":	999649,
			"second_score":	427685
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3462,
			"primary_score":	999649,
			"second_score":	427684
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3463,
			"primary_score":	999649,
			"second_score":	427683
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3467,
			"primary_score":	999649,
			"second_score":	427682
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3468,
			"primary_score":	999649,
			"second_score":	427676
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3472,
			"primary_score":	999649,
			"second_score":	434054
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3473,
			"primary_score":	999649,
			"second_score":	434050
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3477,
			"primary_score":	999649,
			"second_score":	427784
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3478,
			"primary_score":	999649,
			"second_score":	427782
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3482,
			"primary_score":	999649,
			"second_score":	428578
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3483,
			"primary_score":	999649,
			"second_score":	428577
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3492,
			"primary_score":	999649,
			"second_score":	427808
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3493,
			"primary_score":	999649,
			"second_score":	427806
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3577,
			"primary_score":	999802,
			"second_score":	430304
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3578,
			"primary_score":	999802,
			"second_score":	430300
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3582,
			"primary_score":	999802,
			"second_score":	428146
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3583,
			"primary_score":	999802,
			"second_score":	428144
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3592,
			"primary_score":	999649,
			"second_score":	427832
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3593,
			"primary_score":	999649,
			"second_score":	427830
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3737,
			"primary_score":	999892,
			"second_score":	431903
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3738,
			"primary_score":	999892,
			"second_score":	431764
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3742,
			"primary_score":	999892,
			"second_score":	430790
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3743,
			"primary_score":	999892,
			"second_score":	430541
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3747,
			"primary_score":	999892,
			"second_score":	427929
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3748,
			"primary_score":	999892,
			"second_score":	427854
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3957,
			"primary_score":	999966,
			"second_score":	430834
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3958,
			"primary_score":	999966,
			"second_score":	430833
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3962,
			"primary_score":	999892,
			"second_score":	430861
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3963,
			"primary_score":	999892,
			"second_score":	430856
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4142,
			"primary_score":	999649,
			"second_score":	432279
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4143,
			"primary_score":	999649,
			"second_score":	432278
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4147,
			"primary_score":	999649,
			"second_score":	135652
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4148,
			"primary_score":	999649,
			"second_score":	135651
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4152,
			"primary_score":	999649,
			"second_score":	433218
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4153,
			"primary_score":	999649,
			"second_score":	433099
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4157,
			"primary_score":	999649,
			"second_score":	133411
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4158,
			"primary_score":	999649,
			"second_score":	133329
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4167,
			"primary_score":	999649,
			"second_score":	432359
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4168,
			"primary_score":	999649,
			"second_score":	432307
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4172,
			"primary_score":	999649,
			"second_score":	135123
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4173,
			"primary_score":	999649,
			"second_score":	135041
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4412,
			"primary_score":	999649,
			"second_score":	428324
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4413,
			"primary_score":	999649,
			"second_score":	428255
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4417,
			"primary_score":	999649,
			"second_score":	429766
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4418,
			"primary_score":	999649,
			"second_score":	429749
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4732,
			"primary_score":	999649,
			"second_score":	126807
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4733,
			"primary_score":	999649,
			"second_score":	126806
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4737,
			"primary_score":	999649,
			"second_score":	130254
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4738,
			"primary_score":	999649,
			"second_score":	130226
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4742,
			"primary_score":	999649,
			"second_score":	127427
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4743,
			"primary_score":	999649,
			"second_score":	127385
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4747,
			"primary_score":	999649,
			"second_score":	126997
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4748,
			"primary_score":	999649,
			"second_score":	126873
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4827,
			"primary_score":	999649,
			"second_score":	428376
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4828,
			"primary_score":	999649,
			"second_score":	428375
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4892,
			"primary_score":	999649,
			"second_score":	433692
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4893,
			"primary_score":	999649,
			"second_score":	433541
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4897,
			"primary_score":	999649,
			"second_score":	432235
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4898,
			"primary_score":	999649,
			"second_score":	432117
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5082,
			"primary_score":	999724,
			"second_score":	440147
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5083,
			"primary_score":	999724,
			"second_score":	440146
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5087,
			"primary_score":	999889,
			"second_score":	432469
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5088,
			"primary_score":	999889,
			"second_score":	432468
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5092,
			"primary_score":	999649,
			"second_score":	429551
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5093,
			"primary_score":	999649,
			"second_score":	429550
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5197,
			"primary_score":	999649,
			"second_score":	428516
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5198,
			"primary_score":	999649,
			"second_score":	428398
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5212,
			"primary_score":	999649,
			"second_score":	429528
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5213,
			"primary_score":	999649,
			"second_score":	429527
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5257,
			"primary_score":	999649,
			"second_score":	428842
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5258,
			"primary_score":	999649,
			"second_score":	428841
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5262,
			"primary_score":	999649,
			"second_score":	428353
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5263,
			"primary_score":	999649,
			"second_score":	428352
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5267,
			"primary_score":	999649,
			"second_score":	428903
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5268,
			"primary_score":	999649,
			"second_score":	428864
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5299,
			"primary_score":	999649,
			"second_score":	428932
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5300,
			"primary_score":	999649,
			"second_score":	428931
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5399,
			"primary_score":	999682,
			"second_score":	428961
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5400,
			"primary_score":	999682,
			"second_score":	428960
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5409,
			"primary_score":	999649,
			"second_score":	432012
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5410,
			"primary_score":	999649,
			"second_score":	431975
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5414,
			"primary_score":	999682,
			"second_score":	428985
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5415,
			"primary_score":	999682,
			"second_score":	428983
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5439,
			"primary_score":	999682,
			"second_score":	429148
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5440,
			"primary_score":	999682,
			"second_score":	429046
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5444,
			"primary_score":	999682,
			"second_score":	429171
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5445,
			"primary_score":	999682,
			"second_score":	429170
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5717,
			"primary_score":	999649,
			"second_score":	427675
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5719,
			"primary_score":	999649,
			"second_score":	427674
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5720,
			"primary_score":	999649,
			"second_score":	427673
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5721,
			"primary_score":	999649,
			"second_score":	427672
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5723,
			"primary_score":	999649,
			"second_score":	427671
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5730,
			"primary_score":	999649,
			"second_score":	427670
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5732,
			"primary_score":	999649,
			"second_score":	427669
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5733,
			"primary_score":	999649,
			"second_score":	427668
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5734,
			"primary_score":	999649,
			"second_score":	427821
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5736,
			"primary_score":	999649,
			"second_score":	427667
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5738,
			"primary_score":	999649,
			"second_score":	427666
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5882,
			"primary_score":	999649,
			"second_score":	427650
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5907,
			"primary_score":	999649,
			"second_score":	427649
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5908,
			"primary_score":	999649,
			"second_score":	427648
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5909,
			"primary_score":	999649,
			"second_score":	427647
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5911,
			"primary_score":	999649,
			"second_score":	427646
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5913,
			"primary_score":	999649,
			"second_score":	427641
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5916,
			"primary_score":	999649,
			"second_score":	427640
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5920,
			"primary_score":	999649,
			"second_score":	427639
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5923,
			"primary_score":	999649,
			"second_score":	427638
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	154,
			"primary_score":	999797,
			"second_score":	430497
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	155,
			"primary_score":	999797,
			"second_score":	430471
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	162,
			"primary_score":	999797,
			"second_score":	428056
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	163,
			"primary_score":	999797,
			"second_score":	428055
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	164,
			"primary_score":	999797,
			"second_score":	428051
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	165,
			"primary_score":	999797,
			"second_score":	428050
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	170,
			"primary_score":	999649,
			"second_score":	442513
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	171,
			"primary_score":	999649,
			"second_score":	442512
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	172,
			"primary_score":	999649,
			"second_score":	442511
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	173,
			"primary_score":	999649,
			"second_score":	121790
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	188,
			"primary_score":	999649,
			"second_score":	118705
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	192,
			"primary_score":	999649,
			"second_score":	118704
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	193,
			"primary_score":	999649,
			"second_score":	118700
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	198,
			"primary_score":	999649,
			"second_score":	442713
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	199,
			"primary_score":	999649,
			"second_score":	442712
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	200,
			"primary_score":	999649,
			"second_score":	442711
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	201,
			"primary_score":	999649,
			"second_score":	442710
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	202,
			"primary_score":	999649,
			"second_score":	442709
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	203,
			"primary_score":	999649,
			"second_score":	442708
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	205,
			"primary_score":	999649,
			"second_score":	442707
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	206,
			"primary_score":	999649,
			"second_score":	442706
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	208,
			"primary_score":	999649,
			"second_score":	442701
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	209,
			"primary_score":	999649,
			"second_score":	442700
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	210,
			"primary_score":	999649,
			"second_score":	442699
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	211,
			"primary_score":	999649,
			"second_score":	442697
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	213,
			"primary_score":	999649,
			"second_score":	442696
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	214,
			"primary_score":	999649,
			"second_score":	442695
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	215,
			"primary_score":	999649,
			"second_score":	442694
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	216,
			"primary_score":	999649,
			"second_score":	442693
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	217,
			"primary_score":	999649,
			"second_score":	442692
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	218,
			"primary_score":	999649,
			"second_score":	442691
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	219,
			"primary_score":	999649,
			"second_score":	442690
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	224,
			"primary_score":	999649,
			"second_score":	427125
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	225,
			"primary_score":	999649,
			"second_score":	427124
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	226,
			"primary_score":	999649,
			"second_score":	427123
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	227,
			"primary_score":	999649,
			"second_score":	427122
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	228,
			"primary_score":	999649,
			"second_score":	427121
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	229,
			"primary_score":	999649,
			"second_score":	427120
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	231,
			"primary_score":	999649,
			"second_score":	427119
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	232,
			"primary_score":	999649,
			"second_score":	427094
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	234,
			"primary_score":	999649,
			"second_score":	427093
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	235,
			"primary_score":	999649,
			"second_score":	427092
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	236,
			"primary_score":	999649,
			"second_score":	427091
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	237,
			"primary_score":	999649,
			"second_score":	427090
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	239,
			"primary_score":	999649,
			"second_score":	427088
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	243,
			"primary_score":	999649,
			"second_score":	427087
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	244,
			"primary_score":	999649,
			"second_score":	427086
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	245,
			"primary_score":	999649,
			"second_score":	427085
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	246,
			"primary_score":	999649,
			"second_score":	427084
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	247,
			"primary_score":	999649,
			"second_score":	427083
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	248,
			"primary_score":	999649,
			"second_score":	427082
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	249,
			"primary_score":	999649,
			"second_score":	427081
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	251,
			"primary_score":	999649,
			"second_score":	427080
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	260,
			"primary_score":	999649,
			"second_score":	426948
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	262,
			"primary_score":	999649,
			"second_score":	426872
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	263,
			"primary_score":	999649,
			"second_score":	426871
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	472,
			"primary_score":	999649,
			"second_score":	442687
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	473,
			"primary_score":	999649,
			"second_score":	442686
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	476,
			"primary_score":	999649,
			"second_score":	442685
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	482,
			"primary_score":	999649,
			"second_score":	442684
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	486,
			"primary_score":	999649,
			"second_score":	442640
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	487,
			"primary_score":	999649,
			"second_score":	442528
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	488,
			"primary_score":	999649,
			"second_score":	442527
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	489,
			"primary_score":	999649,
			"second_score":	442522
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	490,
			"primary_score":	999649,
			"second_score":	442521
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	491,
			"primary_score":	999649,
			"second_score":	442520
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	495,
			"primary_score":	999649,
			"second_score":	442519
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	496,
			"primary_score":	999649,
			"second_score":	442518
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	498,
			"primary_score":	999649,
			"second_score":	442517
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	499,
			"primary_score":	999649,
			"second_score":	442516
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	515,
			"primary_score":	999649,
			"second_score":	442515
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	516,
			"primary_score":	999649,
			"second_score":	442514
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	521,
			"primary_score":	999649,
			"second_score":	442510
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	523,
			"primary_score":	999649,
			"second_score":	442509
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	524,
			"primary_score":	999649,
			"second_score":	442508
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	529,
			"primary_score":	999649,
			"second_score":	442507
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	531,
			"primary_score":	999649,
			"second_score":	441901
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	532,
			"primary_score":	999649,
			"second_score":	441900
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	533,
			"primary_score":	999649,
			"second_score":	441899
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	538,
			"primary_score":	999649,
			"second_score":	441898
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	539,
			"primary_score":	999649,
			"second_score":	441897
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	546,
			"primary_score":	999649,
			"second_score":	442832
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	547,
			"primary_score":	999649,
			"second_score":	442831
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	548,
			"primary_score":	999649,
			"second_score":	442727
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	549,
			"primary_score":	999649,
			"second_score":	442726
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	550,
			"primary_score":	999649,
			"second_score":	442725
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	551,
			"primary_score":	999649,
			"second_score":	442724
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	552,
			"primary_score":	999649,
			"second_score":	442723
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	553,
			"primary_score":	999649,
			"second_score":	442722
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	555,
			"primary_score":	999649,
			"second_score":	442721
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	556,
			"primary_score":	999649,
			"second_score":	442720
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	557,
			"primary_score":	999649,
			"second_score":	442719
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	558,
			"primary_score":	999649,
			"second_score":	442718
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	559,
			"primary_score":	999649,
			"second_score":	442716
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	561,
			"primary_score":	999649,
			"second_score":	442714
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	563,
			"primary_score":	999649,
			"second_score":	442689
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	565,
			"primary_score":	999649,
			"second_score":	442688
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	574,
			"primary_score":	999649,
			"second_score":	441896
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	575,
			"primary_score":	999649,
			"second_score":	441652
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	576,
			"primary_score":	999649,
			"second_score":	441651
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	577,
			"primary_score":	999649,
			"second_score":	441650
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	578,
			"primary_score":	999649,
			"second_score":	441643
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	579,
			"primary_score":	999649,
			"second_score":	427637
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	580,
			"primary_score":	999649,
			"second_score":	427590
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	581,
			"primary_score":	999649,
			"second_score":	427589
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	584,
			"primary_score":	999649,
			"second_score":	427588
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	587,
			"primary_score":	999649,
			"second_score":	427587
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	588,
			"primary_score":	999649,
			"second_score":	427586
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	589,
			"primary_score":	999649,
			"second_score":	427585
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	590,
			"primary_score":	999649,
			"second_score":	427584
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	591,
			"primary_score":	999649,
			"second_score":	427131
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	597,
			"primary_score":	999649,
			"second_score":	427126
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	598,
			"primary_score":	999649,
			"second_score":	427079
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	645,
			"primary_score":	999649,
			"second_score":	121898
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	646,
			"primary_score":	999649,
			"second_score":	121897
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	649,
			"primary_score":	999649,
			"second_score":	121896
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	654,
			"primary_score":	999649,
			"second_score":	121895
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	657,
			"primary_score":	999649,
			"second_score":	121800
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	659,
			"primary_score":	999649,
			"second_score":	121799
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	660,
			"primary_score":	999649,
			"second_score":	121798
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	662,
			"primary_score":	999649,
			"second_score":	121797
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	663,
			"primary_score":	999649,
			"second_score":	121796
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	665,
			"primary_score":	999649,
			"second_score":	121795
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	682,
			"primary_score":	999649,
			"second_score":	121794
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	684,
			"primary_score":	999649,
			"second_score":	121789
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	685,
			"primary_score":	999649,
			"second_score":	121353
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	686,
			"primary_score":	999649,
			"second_score":	121352
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	687,
			"primary_score":	999649,
			"second_score":	121351
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	715,
			"primary_score":	999649,
			"second_score":	122156
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	716,
			"primary_score":	999649,
			"second_score":	122155
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	717,
			"primary_score":	999649,
			"second_score":	122051
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	718,
			"primary_score":	999649,
			"second_score":	122050
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	719,
			"primary_score":	999649,
			"second_score":	122049
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	720,
			"primary_score":	999649,
			"second_score":	122048
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	721,
			"primary_score":	999649,
			"second_score":	122047
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	723,
			"primary_score":	999649,
			"second_score":	122046
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	728,
			"primary_score":	999649,
			"second_score":	122045
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	730,
			"primary_score":	999649,
			"second_score":	122044
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	731,
			"primary_score":	999649,
			"second_score":	122043
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	732,
			"primary_score":	999649,
			"second_score":	121927
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	733,
			"primary_score":	999649,
			"second_score":	121925
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	735,
			"primary_score":	999649,
			"second_score":	121924
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	736,
			"primary_score":	999649,
			"second_score":	121899
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	740,
			"primary_score":	999649,
			"second_score":	121350
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	742,
			"primary_score":	999649,
			"second_score":	121349
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	743,
			"primary_score":	999649,
			"second_score":	121348
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	744,
			"primary_score":	999649,
			"second_score":	121104
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	745,
			"primary_score":	999649,
			"second_score":	121103
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	746,
			"primary_score":	999649,
			"second_score":	121102
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	747,
			"primary_score":	999649,
			"second_score":	121095
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	748,
			"primary_score":	999649,
			"second_score":	121094
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	750,
			"primary_score":	999649,
			"second_score":	119952
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	755,
			"primary_score":	999649,
			"second_score":	119951
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	760,
			"primary_score":	999649,
			"second_score":	119950
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	761,
			"primary_score":	999649,
			"second_score":	119902
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	762,
			"primary_score":	999649,
			"second_score":	119901
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	763,
			"primary_score":	999649,
			"second_score":	119730
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	764,
			"primary_score":	999649,
			"second_score":	119725
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	767,
			"primary_score":	999649,
			"second_score":	119724
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	768,
			"primary_score":	999649,
			"second_score":	119698
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	769,
			"primary_score":	999649,
			"second_score":	119672
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	770,
			"primary_score":	999649,
			"second_score":	119671
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	867,
			"primary_score":	999649,
			"second_score":	432992
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	868,
			"primary_score":	999649,
			"second_score":	432991
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	870,
			"primary_score":	999649,
			"second_score":	432990
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	873,
			"primary_score":	999649,
			"second_score":	432956
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	874,
			"primary_score":	999649,
			"second_score":	432955
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	875,
			"primary_score":	999649,
			"second_score":	432954
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	876,
			"primary_score":	999649,
			"second_score":	432945
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	877,
			"primary_score":	999649,
			"second_score":	129808
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	878,
			"primary_score":	999649,
			"second_score":	129807
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	883,
			"primary_score":	999649,
			"second_score":	129806
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	886,
			"primary_score":	999649,
			"second_score":	129805
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	887,
			"primary_score":	999649,
			"second_score":	129804
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	958,
			"primary_score":	999649,
			"second_score":	432944
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	961,
			"primary_score":	999649,
			"second_score":	432943
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	962,
			"primary_score":	999649,
			"second_score":	132679
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	964,
			"primary_score":	999649,
			"second_score":	432942
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	966,
			"primary_score":	999649,
			"second_score":	432941
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	967,
			"primary_score":	999649,
			"second_score":	432940
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	979,
			"primary_score":	999649,
			"second_score":	427723
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	982,
			"primary_score":	999649,
			"second_score":	427722
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	987,
			"primary_score":	999649,
			"second_score":	427721
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	988,
			"primary_score":	999649,
			"second_score":	427720
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	989,
			"primary_score":	999649,
			"second_score":	427719
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	990,
			"primary_score":	999649,
			"second_score":	427718
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	991,
			"primary_score":	999649,
			"second_score":	427717
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	992,
			"primary_score":	999649,
			"second_score":	427716
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1008,
			"primary_score":	999649,
			"second_score":	441577
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1015,
			"primary_score":	999649,
			"second_score":	441576
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1016,
			"primary_score":	999649,
			"second_score":	441575
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1029,
			"primary_score":	999649,
			"second_score":	441574
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1064,
			"primary_score":	999649,
			"second_score":	441573
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1065,
			"primary_score":	999649,
			"second_score":	441572
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1066,
			"primary_score":	999649,
			"second_score":	441569
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1067,
			"primary_score":	999649,
			"second_score":	441568
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1068,
			"primary_score":	999649,
			"second_score":	441567
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1069,
			"primary_score":	999649,
			"second_score":	441566
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1070,
			"primary_score":	999649,
			"second_score":	441565
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1071,
			"primary_score":	999649,
			"second_score":	441564
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1072,
			"primary_score":	999649,
			"second_score":	441563
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1073,
			"primary_score":	999649,
			"second_score":	441562
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1083,
			"primary_score":	999649,
			"second_score":	134210
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1085,
			"primary_score":	999649,
			"second_score":	134209
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1086,
			"primary_score":	999649,
			"second_score":	134208
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1087,
			"primary_score":	999649,
			"second_score":	134207
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1147,
			"primary_score":	999649,
			"second_score":	134212
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1148,
			"primary_score":	999649,
			"second_score":	134211
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1151,
			"primary_score":	999649,
			"second_score":	441560
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1152,
			"primary_score":	999649,
			"second_score":	441559
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1153,
			"primary_score":	999649,
			"second_score":	441558
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1156,
			"primary_score":	999649,
			"second_score":	441557
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1157,
			"primary_score":	999649,
			"second_score":	441556
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1456,
			"primary_score":	999649,
			"second_score":	441554
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1457,
			"primary_score":	999649,
			"second_score":	441553
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1458,
			"primary_score":	999649,
			"second_score":	441552
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1459,
			"primary_score":	999649,
			"second_score":	441551
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1461,
			"primary_score":	999649,
			"second_score":	441550
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1462,
			"primary_score":	999649,
			"second_score":	441549
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1463,
			"primary_score":	999649,
			"second_score":	441548
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1464,
			"primary_score":	999649,
			"second_score":	441547
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1466,
			"primary_score":	999649,
			"second_score":	441546
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1467,
			"primary_score":	999649,
			"second_score":	441545
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1468,
			"primary_score":	999652,
			"second_score":	441544
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1469,
			"primary_score":	999652,
			"second_score":	441543
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1471,
			"primary_score":	999649,
			"second_score":	143475
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1472,
			"primary_score":	999649,
			"second_score":	143474
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1474,
			"primary_score":	999649,
			"second_score":	441542
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1476,
			"primary_score":	999649,
			"second_score":	441541
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1477,
			"primary_score":	999649,
			"second_score":	441540
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1479,
			"primary_score":	999649,
			"second_score":	441539
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1481,
			"primary_score":	999649,
			"second_score":	441538
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1482,
			"primary_score":	999649,
			"second_score":	441537
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1483,
			"primary_score":	999649,
			"second_score":	441536
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1484,
			"primary_score":	999649,
			"second_score":	441535
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1485,
			"primary_score":	999650,
			"second_score":	441532
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1486,
			"primary_score":	999649,
			"second_score":	441530
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1487,
			"primary_score":	999649,
			"second_score":	441529
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2210,
			"primary_score":	999649,
			"second_score":	427715
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2244,
			"primary_score":	999649,
			"second_score":	427714
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2245,
			"primary_score":	999649,
			"second_score":	427713
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2246,
			"primary_score":	999649,
			"second_score":	427710
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2247,
			"primary_score":	999649,
			"second_score":	427709
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2248,
			"primary_score":	999649,
			"second_score":	427708
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2366,
			"primary_score":	999649,
			"second_score":	430338
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2367,
			"primary_score":	999649,
			"second_score":	430337
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2368,
			"primary_score":	999649,
			"second_score":	430336
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2385,
			"primary_score":	999649,
			"second_score":	428645
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2387,
			"primary_score":	999649,
			"second_score":	428644
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2388,
			"primary_score":	999649,
			"second_score":	428643
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2389,
			"primary_score":	999649,
			"second_score":	428612
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2390,
			"primary_score":	999649,
			"second_score":	428611
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2417,
			"primary_score":	999649,
			"second_score":	434104
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2418,
			"primary_score":	999649,
			"second_score":	434103
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2429,
			"primary_score":	999649,
			"second_score":	434102
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2434,
			"primary_score":	999649,
			"second_score":	434101
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2435,
			"primary_score":	999850,
			"second_score":	434100
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2436,
			"primary_score":	999850,
			"second_score":	434099
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2438,
			"primary_score":	999649,
			"second_score":	132132
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2467,
			"primary_score":	999649,
			"second_score":	433879
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2468,
			"primary_score":	999649,
			"second_score":	433878
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2469,
			"primary_score":	999649,
			"second_score":	433877
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2470,
			"primary_score":	999992,
			"second_score":	433876
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2519,
			"primary_score":	999695,
			"second_score":	432042
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2520,
			"primary_score":	999695,
			"second_score":	432041
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2531,
			"primary_score":	999695,
			"second_score":	432040
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2536,
			"primary_score":	999695,
			"second_score":	432039
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2537,
			"primary_score":	999695,
			"second_score":	432038
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2538,
			"primary_score":	999889,
			"second_score":	432037
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2544,
			"primary_score":	999649,
			"second_score":	130386
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2545,
			"primary_score":	999649,
			"second_score":	130385
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2555,
			"primary_score":	999649,
			"second_score":	130384
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2559,
			"primary_score":	999649,
			"second_score":	130383
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2604,
			"primary_score":	999649,
			"second_score":	136472
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2605,
			"primary_score":	999649,
			"second_score":	136471
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2610,
			"primary_score":	999649,
			"second_score":	136470
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2611,
			"primary_score":	999649,
			"second_score":	136469
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2620,
			"primary_score":	999649,
			"second_score":	428700
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2621,
			"primary_score":	999649,
			"second_score":	428699
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2622,
			"primary_score":	999649,
			"second_score":	428698
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2623,
			"primary_score":	999649,
			"second_score":	428697
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2626,
			"primary_score":	999649,
			"second_score":	129074
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2627,
			"primary_score":	999649,
			"second_score":	129073
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2645,
			"primary_score":	999649,
			"second_score":	428536
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2647,
			"primary_score":	999649,
			"second_score":	428535
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2648,
			"primary_score":	999649,
			"second_score":	428534
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2653,
			"primary_score":	999649,
			"second_score":	427743
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2654,
			"primary_score":	999649,
			"second_score":	427742
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2655,
			"primary_score":	999649,
			"second_score":	427741
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2658,
			"primary_score":	999649,
			"second_score":	427737
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2660,
			"primary_score":	999649,
			"second_score":	427736
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2661,
			"primary_score":	999649,
			"second_score":	427735
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2662,
			"primary_score":	999649,
			"second_score":	427734
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2663,
			"primary_score":	999649,
			"second_score":	427733
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2664,
			"primary_score":	999650,
			"second_score":	427728
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2665,
			"primary_score":	999649,
			"second_score":	427726
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2670,
			"primary_score":	999649,
			"second_score":	127649
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2671,
			"primary_score":	999649,
			"second_score":	127648
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2672,
			"primary_score":	999649,
			"second_score":	127647
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2713,
			"primary_score":	999649,
			"second_score":	433734
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2714,
			"primary_score":	999649,
			"second_score":	433733
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2715,
			"primary_score":	999649,
			"second_score":	433732
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2716,
			"primary_score":	999649,
			"second_score":	433731
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2717,
			"primary_score":	999649,
			"second_score":	433730
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2722,
			"primary_score":	999649,
			"second_score":	433729
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2738,
			"primary_score":	999649,
			"second_score":	433951
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2739,
			"primary_score":	999649,
			"second_score":	132208
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2744,
			"primary_score":	999649,
			"second_score":	132207
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2745,
			"primary_score":	999649,
			"second_score":	132206
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2746,
			"primary_score":	999649,
			"second_score":	132205
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2749,
			"primary_score":	999649,
			"second_score":	433950
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2750,
			"primary_score":	999649,
			"second_score":	135126
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2751,
			"primary_score":	999649,
			"second_score":	135125
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2754,
			"primary_score":	999938,
			"second_score":	433949
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2755,
			"primary_score":	999964,
			"second_score":	433948
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2756,
			"primary_score":	999981,
			"second_score":	433947
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2787,
			"primary_score":	999680,
			"second_score":	431409
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2788,
			"primary_score":	999680,
			"second_score":	431408
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2789,
			"primary_score":	999801,
			"second_score":	431407
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2790,
			"primary_score":	999815,
			"second_score":	431405
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2873,
			"primary_score":	999902,
			"second_score":	432576
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2874,
			"primary_score":	999902,
			"second_score":	432575
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2875,
			"primary_score":	999936,
			"second_score":	432573
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2910,
			"primary_score":	999681,
			"second_score":	429253
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2911,
			"primary_score":	999681,
			"second_score":	429252
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2917,
			"primary_score":	999681,
			"second_score":	429251
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2918,
			"primary_score":	999681,
			"second_score":	429250
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2924,
			"primary_score":	999649,
			"second_score":	428538
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2925,
			"primary_score":	999649,
			"second_score":	428537
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2928,
			"primary_score":	999649,
			"second_score":	134403
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2929,
			"primary_score":	999649,
			"second_score":	134402
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2930,
			"primary_score":	999649,
			"second_score":	130659
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2933,
			"primary_score":	999798,
			"second_score":	430502
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2934,
			"primary_score":	999798,
			"second_score":	430501
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2935,
			"primary_score":	999798,
			"second_score":	430500
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2937,
			"primary_score":	999798,
			"second_score":	430499
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2938,
			"primary_score":	999798,
			"second_score":	430498
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2939,
			"primary_score":	999798,
			"second_score":	430470
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2944,
			"primary_score":	999798,
			"second_score":	428068
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2945,
			"primary_score":	999798,
			"second_score":	428067
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2946,
			"primary_score":	999798,
			"second_score":	428066
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2948,
			"primary_score":	999798,
			"second_score":	428065
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2949,
			"primary_score":	999798,
			"second_score":	428064
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2950,
			"primary_score":	999798,
			"second_score":	428060
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2951,
			"primary_score":	999798,
			"second_score":	428057
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2953,
			"primary_score":	999798,
			"second_score":	428028
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2977,
			"primary_score":	999724,
			"second_score":	440185
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2979,
			"primary_score":	999724,
			"second_score":	440184
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2980,
			"primary_score":	999724,
			"second_score":	440183
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2981,
			"primary_score":	999724,
			"second_score":	440182
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2996,
			"primary_score":	999724,
			"second_score":	440181
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2997,
			"primary_score":	999724,
			"second_score":	440180
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3002,
			"primary_score":	999731,
			"second_score":	440213
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3003,
			"primary_score":	999731,
			"second_score":	440212
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3004,
			"primary_score":	999731,
			"second_score":	440211
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3005,
			"primary_score":	999740,
			"second_score":	440210
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3006,
			"primary_score":	999743,
			"second_score":	440209
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3007,
			"primary_score":	999825,
			"second_score":	440208
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3019,
			"primary_score":	999649,
			"second_score":	139491
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3020,
			"primary_score":	999649,
			"second_score":	139490
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3064,
			"primary_score":	999649,
			"second_score":	429653
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3065,
			"primary_score":	999649,
			"second_score":	429652
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3067,
			"primary_score":	999649,
			"second_score":	429651
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3069,
			"primary_score":	999649,
			"second_score":	429650
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3070,
			"primary_score":	999649,
			"second_score":	429649
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3071,
			"primary_score":	999649,
			"second_score":	429648
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3072,
			"primary_score":	999649,
			"second_score":	429647
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3074,
			"primary_score":	999649,
			"second_score":	429646
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3075,
			"primary_score":	999649,
			"second_score":	429636
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3076,
			"primary_score":	999649,
			"second_score":	429635
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3077,
			"primary_score":	999649,
			"second_score":	429634
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3078,
			"primary_score":	999649,
			"second_score":	429633
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3080,
			"primary_score":	999649,
			"second_score":	429632
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3081,
			"primary_score":	999649,
			"second_score":	429637
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3094,
			"primary_score":	999649,
			"second_score":	429631
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3095,
			"primary_score":	999649,
			"second_score":	429603
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3096,
			"primary_score":	999649,
			"second_score":	429602
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3099,
			"primary_score":	999649,
			"second_score":	429601
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3100,
			"primary_score":	999649,
			"second_score":	429600
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3101,
			"primary_score":	999649,
			"second_score":	429599
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3102,
			"primary_score":	999649,
			"second_score":	429590
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3117,
			"primary_score":	999649,
			"second_score":	429589
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3120,
			"primary_score":	999649,
			"second_score":	429588
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3123,
			"primary_score":	999649,
			"second_score":	429587
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3125,
			"primary_score":	999649,
			"second_score":	429586
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3127,
			"primary_score":	999649,
			"second_score":	429585
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3134,
			"primary_score":	999649,
			"second_score":	429584
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3139,
			"primary_score":	999649,
			"second_score":	433003
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3140,
			"primary_score":	999649,
			"second_score":	433002
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3142,
			"primary_score":	999649,
			"second_score":	433001
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3144,
			"primary_score":	999649,
			"second_score":	433000
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3145,
			"primary_score":	999649,
			"second_score":	432999
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3147,
			"primary_score":	999649,
			"second_score":	432998
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3148,
			"primary_score":	999649,
			"second_score":	432994
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3151,
			"primary_score":	999649,
			"second_score":	432993
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3152,
			"primary_score":	999649,
			"second_score":	432939
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3165,
			"primary_score":	999649,
			"second_score":	129852
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3168,
			"primary_score":	999649,
			"second_score":	129851
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3198,
			"primary_score":	999649,
			"second_score":	427707
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3199,
			"primary_score":	999649,
			"second_score":	427706
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3200,
			"primary_score":	999649,
			"second_score":	427705
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3202,
			"primary_score":	999649,
			"second_score":	427704
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3203,
			"primary_score":	999649,
			"second_score":	427703
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3204,
			"primary_score":	999649,
			"second_score":	427702
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3213,
			"primary_score":	999649,
			"second_score":	428653
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3214,
			"primary_score":	999649,
			"second_score":	428652
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3215,
			"primary_score":	999649,
			"second_score":	428649
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3216,
			"primary_score":	999649,
			"second_score":	428648
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3218,
			"primary_score":	999649,
			"second_score":	428647
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3219,
			"primary_score":	999649,
			"second_score":	428654
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3221,
			"primary_score":	999649,
			"second_score":	428646
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3236,
			"primary_score":	999889,
			"second_score":	432562
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3238,
			"primary_score":	999889,
			"second_score":	432561
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3239,
			"primary_score":	999889,
			"second_score":	432560
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3240,
			"primary_score":	999889,
			"second_score":	432503
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3241,
			"primary_score":	999889,
			"second_score":	432502
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3246,
			"primary_score":	999825,
			"second_score":	440196
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3247,
			"primary_score":	999825,
			"second_score":	440195
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3248,
			"primary_score":	999825,
			"second_score":	440194
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3249,
			"primary_score":	999825,
			"second_score":	440191
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3250,
			"primary_score":	999825,
			"second_score":	440190
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3251,
			"primary_score":	999825,
			"second_score":	440189
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3252,
			"primary_score":	999856,
			"second_score":	440188
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3253,
			"primary_score":	999873,
			"second_score":	440186
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3254,
			"primary_score":	999906,
			"second_score":	440197
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3274,
			"primary_score":	999649,
			"second_score":	433936
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3275,
			"primary_score":	999649,
			"second_score":	433935
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3276,
			"primary_score":	999649,
			"second_score":	433934
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3277,
			"primary_score":	999649,
			"second_score":	433933
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3280,
			"primary_score":	999649,
			"second_score":	433932
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3352,
			"primary_score":	999649,
			"second_score":	134400
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3353,
			"primary_score":	999649,
			"second_score":	134399
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3354,
			"primary_score":	999649,
			"second_score":	134398
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3355,
			"primary_score":	999649,
			"second_score":	134397
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3357,
			"primary_score":	999649,
			"second_score":	134396
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3359,
			"primary_score":	999649,
			"second_score":	134395
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3360,
			"primary_score":	999649,
			"second_score":	134394
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3361,
			"primary_score":	999649,
			"second_score":	134393
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3362,
			"primary_score":	999649,
			"second_score":	134392
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3363,
			"primary_score":	999649,
			"second_score":	134391
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3364,
			"primary_score":	999649,
			"second_score":	134390
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3378,
			"primary_score":	999681,
			"second_score":	429248
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3379,
			"primary_score":	999681,
			"second_score":	429247
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3380,
			"primary_score":	999681,
			"second_score":	429244
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3381,
			"primary_score":	999681,
			"second_score":	429243
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3382,
			"primary_score":	999681,
			"second_score":	429242
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3383,
			"primary_score":	999681,
			"second_score":	429241
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3384,
			"primary_score":	999682,
			"second_score":	429240
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3397,
			"primary_score":	999682,
			"second_score":	429239
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3399,
			"primary_score":	999681,
			"second_score":	429238
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3401,
			"primary_score":	999681,
			"second_score":	429237
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3402,
			"primary_score":	999681,
			"second_score":	429236
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3403,
			"primary_score":	999681,
			"second_score":	429205
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3404,
			"primary_score":	999681,
			"second_score":	429204
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3518,
			"primary_score":	999936,
			"second_score":	432572
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3519,
			"primary_score":	999936,
			"second_score":	432571
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3520,
			"primary_score":	999936,
			"second_score":	432570
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3521,
			"primary_score":	999936,
			"second_score":	432567
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3522,
			"primary_score":	999936,
			"second_score":	432566
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3523,
			"primary_score":	999936,
			"second_score":	432565
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3524,
			"primary_score":	999940,
			"second_score":	432563
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4209,
			"primary_score":	999815,
			"second_score":	431404
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4210,
			"primary_score":	999815,
			"second_score":	431403
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4211,
			"primary_score":	999815,
			"second_score":	431402
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4213,
			"primary_score":	999815,
			"second_score":	431401
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4214,
			"primary_score":	999815,
			"second_score":	431400
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4758,
			"primary_score":	999649,
			"second_score":	433946
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4791,
			"primary_score":	999649,
			"second_score":	433945
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4792,
			"primary_score":	999649,
			"second_score":	132202
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4797,
			"primary_score":	999649,
			"second_score":	132201
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4801,
			"primary_score":	999649,
			"second_score":	132200
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4802,
			"primary_score":	999649,
			"second_score":	132199
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4803,
			"primary_score":	999649,
			"second_score":	132198
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4807,
			"primary_score":	999912,
			"second_score":	433944
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4816,
			"primary_score":	999953,
			"second_score":	433943
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4817,
			"primary_score":	999991,
			"second_score":	433941
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4877,
			"primary_score":	999991,
			"second_score":	433940
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4878,
			"primary_score":	999991,
			"second_score":	433939
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4879,
			"primary_score":	999991,
			"second_score":	433938
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4880,
			"primary_score":	999996,
			"second_score":	433937
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4889,
			"primary_score":	999649,
			"second_score":	132197
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4890,
			"primary_score":	999649,
			"second_score":	132196
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4891,
			"primary_score":	999649,
			"second_score":	132195
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4892,
			"primary_score":	999649,
			"second_score":	132194
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5495,
			"primary_score":	999659,
			"second_score":	430382
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5496,
			"primary_score":	999659,
			"second_score":	430381
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5497,
			"primary_score":	999659,
			"second_score":	430378
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5498,
			"primary_score":	999659,
			"second_score":	430377
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5500,
			"primary_score":	999649,
			"second_score":	427740
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5501,
			"primary_score":	999998,
			"second_score":	427738
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5505,
			"primary_score":	999649,
			"second_score":	428101
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5506,
			"primary_score":	999799,
			"second_score":	430383
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5507,
			"primary_score":	999649,
			"second_score":	428099
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6064,
			"primary_score":	999649,
			"second_score":	130381
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6065,
			"primary_score":	999649,
			"second_score":	130380
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6070,
			"primary_score":	999649,
			"second_score":	130379
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6074,
			"primary_score":	999649,
			"second_score":	130378
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6119,
			"primary_score":	999649,
			"second_score":	130376
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6120,
			"primary_score":	999649,
			"second_score":	130375
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6121,
			"primary_score":	999649,
			"second_score":	130374
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6273,
			"primary_score":	999889,
			"second_score":	432035
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6274,
			"primary_score":	999889,
			"second_score":	432034
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6277,
			"primary_score":	999892,
			"second_score":	432033
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6278,
			"primary_score":	999892,
			"second_score":	432032
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6280,
			"primary_score":	999892,
			"second_score":	432031
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6281,
			"primary_score":	999892,
			"second_score":	432030
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6861,
			"primary_score":	999649,
			"second_score":	135283
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6862,
			"primary_score":	999649,
			"second_score":	135282
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6872,
			"primary_score":	999649,
			"second_score":	135281
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6873,
			"primary_score":	999649,
			"second_score":	135280
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6895,
			"primary_score":	999649,
			"second_score":	135278
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6896,
			"primary_score":	999649,
			"second_score":	135277
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6897,
			"primary_score":	999649,
			"second_score":	135276
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7008,
			"primary_score":	999649,
			"second_score":	135274
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7009,
			"primary_score":	999649,
			"second_score":	135273
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7010,
			"primary_score":	999649,
			"second_score":	135272
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7011,
			"primary_score":	999649,
			"second_score":	135271
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7392,
			"primary_score":	999850,
			"second_score":	434098
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7393,
			"primary_score":	999850,
			"second_score":	434097
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7394,
			"primary_score":	999863,
			"second_score":	434095
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7398,
			"primary_score":	999649,
			"second_score":	132130
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7399,
			"primary_score":	999649,
			"second_score":	132129
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7400,
			"primary_score":	999649,
			"second_score":	132128
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7401,
			"primary_score":	999649,
			"second_score":	132127
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7403,
			"primary_score":	999649,
			"second_score":	132126
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7404,
			"primary_score":	999649,
			"second_score":	132125
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7405,
			"primary_score":	999649,
			"second_score":	132124
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7406,
			"primary_score":	999649,
			"second_score":	132123
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7408,
			"primary_score":	999649,
			"second_score":	132122
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7409,
			"primary_score":	999649,
			"second_score":	132121
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7410,
			"primary_score":	999649,
			"second_score":	132120
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7411,
			"primary_score":	999649,
			"second_score":	132119
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7413,
			"primary_score":	999649,
			"second_score":	132118
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7414,
			"primary_score":	999649,
			"second_score":	132117
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7415,
			"primary_score":	999649,
			"second_score":	132116
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7416,
			"primary_score":	999649,
			"second_score":	132115
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7418,
			"primary_score":	999649,
			"second_score":	132114
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7419,
			"primary_score":	999649,
			"second_score":	132113
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7420,
			"primary_score":	999649,
			"second_score":	132112
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7421,
			"primary_score":	999649,
			"second_score":	132111
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7423,
			"primary_score":	999649,
			"second_score":	132110
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7424,
			"primary_score":	999649,
			"second_score":	132109
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7425,
			"primary_score":	999649,
			"second_score":	132108
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7426,
			"primary_score":	999649,
			"second_score":	132107
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7428,
			"primary_score":	999649,
			"second_score":	132106
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7429,
			"primary_score":	999649,
			"second_score":	132105
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7430,
			"primary_score":	999649,
			"second_score":	132104
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7441,
			"primary_score":	999863,
			"second_score":	434094
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7442,
			"primary_score":	999863,
			"second_score":	434093
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7451,
			"primary_score":	999890,
			"second_score":	434092
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7454,
			"primary_score":	999892,
			"second_score":	434091
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7469,
			"primary_score":	999892,
			"second_score":	434089
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7470,
			"primary_score":	999892,
			"second_score":	434088
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7471,
			"primary_score":	999892,
			"second_score":	434087
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7472,
			"primary_score":	999892,
			"second_score":	434086
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7474,
			"primary_score":	999892,
			"second_score":	434085
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7475,
			"primary_score":	999892,
			"second_score":	434084
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7476,
			"primary_score":	999892,
			"second_score":	434083
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7477,
			"primary_score":	999892,
			"second_score":	434082
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7479,
			"primary_score":	999892,
			"second_score":	434081
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7480,
			"primary_score":	999892,
			"second_score":	434080
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7481,
			"primary_score":	999892,
			"second_score":	434079
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7482,
			"primary_score":	999892,
			"second_score":	434078
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7484,
			"primary_score":	999892,
			"second_score":	434077
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7485,
			"primary_score":	999892,
			"second_score":	434076
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7488,
			"primary_score":	999892,
			"second_score":	434075
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7489,
			"primary_score":	999892,
			"second_score":	434074
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7491,
			"primary_score":	999892,
			"second_score":	434073
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7492,
			"primary_score":	999892,
			"second_score":	434072
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7677,
			"primary_score":	999649,
			"second_score":	430335
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7678,
			"primary_score":	999649,
			"second_score":	430334
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7679,
			"primary_score":	999649,
			"second_score":	430333
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8085,
			"primary_score":	999649,
			"second_score":	430331
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8086,
			"primary_score":	999649,
			"second_score":	430330
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8087,
			"primary_score":	999649,
			"second_score":	430329
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8088,
			"primary_score":	999649,
			"second_score":	430328
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8090,
			"primary_score":	999649,
			"second_score":	430327
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8091,
			"primary_score":	999649,
			"second_score":	430326
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8094,
			"primary_score":	999649,
			"second_score":	430325
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8095,
			"primary_score":	999649,
			"second_score":	430324
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8097,
			"primary_score":	999649,
			"second_score":	430323
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8098,
			"primary_score":	999649,
			"second_score":	430322
		}, {
			"file":	"Zend/zend_list.c",
			"line":	52,
			"primary_score":	999649,
			"second_score":	114312
		}, {
			"file":	"Zend/zend_list.c",
			"line":	54,
			"primary_score":	999649,
			"second_score":	114311
		}, {
			"file":	"Zend/zend_list.c",
			"line":	56,
			"primary_score":	999649,
			"second_score":	114301
		}, {
			"file":	"Zend/zend_list.c",
			"line":	57,
			"primary_score":	999649,
			"second_score":	114300
		}, {
			"file":	"Zend/zend_list.c",
			"line":	170,
			"primary_score":	999649,
			"second_score":	114278
		}, {
			"file":	"Zend/zend_list.c",
			"line":	171,
			"primary_score":	999649,
			"second_score":	114277
		}, {
			"file":	"Zend/zend_list.c",
			"line":	172,
			"primary_score":	999649,
			"second_score":	114276
		}, {
			"file":	"Zend/zend_list.c",
			"line":	174,
			"primary_score":	999649,
			"second_score":	114275
		}, {
			"file":	"Zend/zend_list.c",
			"line":	175,
			"primary_score":	999649,
			"second_score":	114265
		}, {
			"file":	"Zend/zend_list.c",
			"line":	183,
			"primary_score":	999649,
			"second_score":	114264
		}, {
			"file":	"Zend/zend_list.c",
			"line":	185,
			"primary_score":	999649,
			"second_score":	114156
		}, {
			"file":	"Zend/zend_list.c",
			"line":	239,
			"primary_score":	999649,
			"second_score":	103789
		}, {
			"file":	"Zend/zend_list.c",
			"line":	347,
			"primary_score":	999649,
			"second_score":	6223
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	28,
			"primary_score":	999649,
			"second_score":	429145
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	29,
			"primary_score":	999649,
			"second_score":	429144
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	30,
			"primary_score":	999649,
			"second_score":	429143
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	31,
			"primary_score":	999649,
			"second_score":	429142
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	32,
			"primary_score":	999649,
			"second_score":	429141
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	33,
			"primary_score":	999649,
			"second_score":	429140
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	39,
			"primary_score":	999649,
			"second_score":	442639
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	41,
			"primary_score":	999649,
			"second_score":	442535
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	42,
			"primary_score":	999649,
			"second_score":	442534
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	43,
			"primary_score":	999649,
			"second_score":	442533
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	46,
			"primary_score":	999649,
			"second_score":	442532
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	48,
			"primary_score":	999649,
			"second_score":	442531
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	49,
			"primary_score":	999649,
			"second_score":	442530
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	51,
			"primary_score":	999649,
			"second_score":	442529
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	93,
			"primary_score":	999649,
			"second_score":	426947
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	94,
			"primary_score":	999649,
			"second_score":	426946
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	96,
			"primary_score":	999649,
			"second_score":	426945
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	97,
			"primary_score":	999649,
			"second_score":	426944
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	98,
			"primary_score":	999649,
			"second_score":	426943
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	99,
			"primary_score":	999649,
			"second_score":	426940
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	100,
			"primary_score":	999649,
			"second_score":	426873
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	109,
			"primary_score":	999649,
			"second_score":	3144
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	111,
			"primary_score":	999649,
			"second_score":	3143
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	120,
			"primary_score":	999649,
			"second_score":	3142
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	126,
			"primary_score":	999649,
			"second_score":	119663
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	127,
			"primary_score":	999649,
			"second_score":	119659
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	190,
			"primary_score":	999649,
			"second_score":	14759
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	192,
			"primary_score":	999649,
			"second_score":	14758
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	233,
			"primary_score":	999649,
			"second_score":	119711
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	235,
			"primary_score":	999649,
			"second_score":	119710
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	275,
			"primary_score":	999649,
			"second_score":	442526
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	277,
			"primary_score":	999649,
			"second_score":	442525
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	278,
			"primary_score":	999649,
			"second_score":	442524
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	279,
			"primary_score":	999649,
			"second_score":	442523
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	41,
			"primary_score":	999649,
			"second_score":	113986
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	42,
			"primary_score":	999649,
			"second_score":	113920
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	47,
			"primary_score":	999649,
			"second_score":	119546
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	49,
			"primary_score":	999649,
			"second_score":	119545
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	82,
			"primary_score":	999649,
			"second_score":	114877
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	84,
			"primary_score":	999649,
			"second_score":	114876
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	48,
			"primary_score":	999649,
			"second_score":	441785
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	53,
			"primary_score":	999649,
			"second_score":	441895
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	55,
			"primary_score":	999649,
			"second_score":	441894
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	62,
			"primary_score":	999649,
			"second_score":	441893
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	63,
			"primary_score":	999649,
			"second_score":	441789
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	64,
			"primary_score":	999649,
			"second_score":	441788
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	65,
			"primary_score":	999649,
			"second_score":	441787
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	66,
			"primary_score":	999649,
			"second_score":	441786
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	68,
			"primary_score":	999649,
			"second_score":	441680
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	69,
			"primary_score":	999649,
			"second_score":	441679
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	71,
			"primary_score":	999649,
			"second_score":	441678
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	73,
			"primary_score":	999649,
			"second_score":	441677
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	74,
			"primary_score":	999649,
			"second_score":	441676
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	75,
			"primary_score":	999649,
			"second_score":	441674
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	76,
			"primary_score":	999649,
			"second_score":	441673
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	78,
			"primary_score":	999649,
			"second_score":	441672
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	79,
			"primary_score":	999649,
			"second_score":	441671
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	80,
			"primary_score":	999649,
			"second_score":	441670
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	82,
			"primary_score":	999649,
			"second_score":	441669
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	84,
			"primary_score":	999649,
			"second_score":	441668
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	85,
			"primary_score":	999649,
			"second_score":	441667
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	86,
			"primary_score":	999649,
			"second_score":	441666
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	88,
			"primary_score":	999649,
			"second_score":	441665
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	89,
			"primary_score":	999649,
			"second_score":	441664
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	91,
			"primary_score":	999649,
			"second_score":	441663
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	93,
			"primary_score":	999649,
			"second_score":	441662
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	95,
			"primary_score":	999649,
			"second_score":	441661
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	97,
			"primary_score":	999649,
			"second_score":	441660
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	98,
			"primary_score":	999649,
			"second_score":	441659
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	100,
			"primary_score":	999649,
			"second_score":	441658
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	101,
			"primary_score":	999649,
			"second_score":	441657
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	103,
			"primary_score":	999649,
			"second_score":	441656
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	105,
			"primary_score":	999649,
			"second_score":	441655
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	110,
			"primary_score":	999649,
			"second_score":	14848
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	122,
			"primary_score":	999649,
			"second_score":	14850
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	124,
			"primary_score":	999649,
			"second_score":	14849
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	136,
			"primary_score":	999649,
			"second_score":	114957
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	140,
			"primary_score":	999649,
			"second_score":	114956
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	197,
			"primary_score":	999649,
			"second_score":	114940
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	201,
			"primary_score":	999649,
			"second_score":	114939
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	266,
			"primary_score":	999649,
			"second_score":	15283
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	268,
			"primary_score":	999649,
			"second_score":	15282
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	271,
			"primary_score":	999649,
			"second_score":	15281
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	312,
			"primary_score":	999649,
			"second_score":	19063
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	314,
			"primary_score":	999649,
			"second_score":	19062
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	315,
			"primary_score":	999649,
			"second_score":	18999
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	316,
			"primary_score":	999649,
			"second_score":	18998
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	319,
			"primary_score":	999649,
			"second_score":	18990
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	321,
			"primary_score":	999649,
			"second_score":	15280
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	329,
			"primary_score":	999649,
			"second_score":	15279
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	330,
			"primary_score":	999649,
			"second_score":	15271
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	333,
			"primary_score":	999649,
			"second_score":	15270
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	334,
			"primary_score":	999649,
			"second_score":	14841
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	335,
			"primary_score":	999649,
			"second_score":	14833
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	336,
			"primary_score":	999649,
			"second_score":	16337
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	338,
			"primary_score":	999649,
			"second_score":	14832
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	339,
			"primary_score":	999649,
			"second_score":	14831
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	350,
			"primary_score":	999649,
			"second_score":	119976
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	351,
			"primary_score":	999649,
			"second_score":	119975
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	352,
			"primary_score":	999649,
			"second_score":	119974
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	354,
			"primary_score":	999649,
			"second_score":	119973
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	359,
			"primary_score":	999649,
			"second_score":	119972
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	360,
			"primary_score":	999649,
			"second_score":	119971
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	363,
			"primary_score":	999649,
			"second_score":	119952
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	367,
			"primary_score":	999649,
			"second_score":	119951
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	369,
			"primary_score":	999649,
			"second_score":	119932
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	370,
			"primary_score":	999683,
			"second_score":	119920
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	371,
			"primary_score":	999683,
			"second_score":	119919
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	372,
			"primary_score":	999683,
			"second_score":	119915
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	373,
			"primary_score":	999683,
			"second_score":	119914
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	375,
			"primary_score":	999683,
			"second_score":	119912
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	378,
			"primary_score":	999649,
			"second_score":	119931
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	379,
			"primary_score":	999649,
			"second_score":	119930
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	380,
			"primary_score":	999649,
			"second_score":	119929
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	381,
			"primary_score":	999649,
			"second_score":	119810
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	382,
			"primary_score":	999649,
			"second_score":	119807
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	384,
			"primary_score":	999649,
			"second_score":	119806
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	386,
			"primary_score":	999649,
			"second_score":	119787
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	388,
			"primary_score":	999649,
			"second_score":	119736
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	391,
			"primary_score":	999649,
			"second_score":	119735
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	394,
			"primary_score":	999649,
			"second_score":	119734
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	395,
			"primary_score":	999865,
			"second_score":	119733
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	397,
			"primary_score":	999649,
			"second_score":	119714
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	400,
			"primary_score":	999649,
			"second_score":	119713
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	401,
			"primary_score":	999649,
			"second_score":	119712
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	403,
			"primary_score":	999649,
			"second_score":	119709
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	416,
			"primary_score":	999649,
			"second_score":	427614
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	417,
			"primary_score":	999649,
			"second_score":	427613
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	418,
			"primary_score":	999649,
			"second_score":	427612
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	423,
			"primary_score":	999649,
			"second_score":	427619
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	424,
			"primary_score":	999649,
			"second_score":	427618
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	426,
			"primary_score":	999649,
			"second_score":	427617
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	437,
			"primary_score":	999649,
			"second_score":	427616
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	439,
			"primary_score":	999649,
			"second_score":	427615
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	441,
			"primary_score":	999649,
			"second_score":	427611
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	446,
			"primary_score":	999649,
			"second_score":	427622
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	451,
			"primary_score":	999865,
			"second_score":	430582
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	452,
			"primary_score":	999865,
			"second_score":	430581
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	453,
			"primary_score":	999865,
			"second_score":	430547
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	488,
			"primary_score":	999649,
			"second_score":	427583
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	490,
			"primary_score":	999649,
			"second_score":	427582
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	493,
			"primary_score":	999649,
			"second_score":	427581
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	496,
			"primary_score":	999649,
			"second_score":	427580
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	497,
			"primary_score":	999649,
			"second_score":	427579
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	500,
			"primary_score":	999649,
			"second_score":	427576
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	501,
			"primary_score":	999682,
			"second_score":	427575
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	502,
			"primary_score":	999682,
			"second_score":	427519
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	504,
			"primary_score":	999649,
			"second_score":	427518
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	505,
			"primary_score":	999649,
			"second_score":	427517
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	506,
			"primary_score":	999649,
			"second_score":	427458
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	508,
			"primary_score":	999649,
			"second_score":	427457
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	509,
			"primary_score":	999649,
			"second_score":	427456
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	510,
			"primary_score":	999649,
			"second_score":	427400
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	513,
			"primary_score":	999649,
			"second_score":	427399
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	514,
			"primary_score":	999649,
			"second_score":	427398
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	515,
			"primary_score":	999649,
			"second_score":	427397
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	516,
			"primary_score":	999649,
			"second_score":	427142
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	517,
			"primary_score":	999649,
			"second_score":	427141
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	519,
			"primary_score":	999649,
			"second_score":	427140
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	522,
			"primary_score":	999649,
			"second_score":	427139
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	530,
			"primary_score":	999649,
			"second_score":	427156
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	537,
			"primary_score":	999649,
			"second_score":	125852
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	539,
			"primary_score":	999649,
			"second_score":	427138
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	540,
			"primary_score":	999649,
			"second_score":	427134
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	543,
			"primary_score":	999649,
			"second_score":	427133
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	544,
			"primary_score":	999649,
			"second_score":	427132
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	397,
			"primary_score":	999977,
			"second_score":	264340
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	399,
			"primary_score":	999977,
			"second_score":	264339
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	412,
			"primary_score":	999977,
			"second_score":	426122
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	417,
			"primary_score":	999996,
			"second_score":	264338
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	419,
			"primary_score":	999996,
			"second_score":	264337
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	420,
			"primary_score":	999996,
			"second_score":	264295
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	422,
			"primary_score":	999996,
			"second_score":	264293
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	450,
			"primary_score":	999977,
			"second_score":	264292
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	543,
			"primary_score":	999649,
			"second_score":	126433
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	544,
			"primary_score":	999649,
			"second_score":	126432
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	546,
			"primary_score":	999649,
			"second_score":	126431
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	558,
			"primary_score":	999649,
			"second_score":	120384
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	559,
			"primary_score":	999649,
			"second_score":	120356
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	561,
			"primary_score":	999649,
			"second_score":	120355
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	573,
			"primary_score":	999844,
			"second_score":	126430
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	574,
			"primary_score":	999844,
			"second_score":	126304
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	608,
			"primary_score":	999649,
			"second_score":	126303
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1892,
			"primary_score":	999649,
			"second_score":	433655
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1893,
			"primary_score":	999649,
			"second_score":	433654
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1894,
			"primary_score":	999649,
			"second_score":	433653
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1896,
			"primary_score":	999649,
			"second_score":	433652
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1897,
			"primary_score":	999649,
			"second_score":	433623
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1899,
			"primary_score":	999649,
			"second_score":	433616
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1901,
			"primary_score":	999649,
			"second_score":	433615
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1907,
			"primary_score":	999649,
			"second_score":	433677
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	2101,
			"primary_score":	999983,
			"second_score":	126115
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	2103,
			"primary_score":	999983,
			"second_score":	126114
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	104,
			"primary_score":	999959,
			"second_score":	264421
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	105,
			"primary_score":	999959,
			"second_score":	264420
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	106,
			"primary_score":	999959,
			"second_score":	264419
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	107,
			"primary_score":	999959,
			"second_score":	264418
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	109,
			"primary_score":	999959,
			"second_score":	264417
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	115,
			"primary_score":	999961,
			"second_score":	264416
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	119,
			"primary_score":	999961,
			"second_score":	264415
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	121,
			"primary_score":	999961,
			"second_score":	264414
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	125,
			"primary_score":	999961,
			"second_score":	264413
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	128,
			"primary_score":	999990,
			"second_score":	264412
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	134,
			"primary_score":	999990,
			"second_score":	264411
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	141,
			"primary_score":	999990,
			"second_score":	264410
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	142,
			"primary_score":	999990,
			"second_score":	264403
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	144,
			"primary_score":	999990,
			"second_score":	264404
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	145,
			"primary_score":	999990,
			"second_score":	264402
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	146,
			"primary_score":	999990,
			"second_score":	264401
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	148,
			"primary_score":	999990,
			"second_score":	264400
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	160,
			"primary_score":	999990,
			"second_score":	264399
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	163,
			"primary_score":	999990,
			"second_score":	264398
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	164,
			"primary_score":	999990,
			"second_score":	264397
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	190,
			"primary_score":	999990,
			"second_score":	264396
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	199,
			"primary_score":	999990,
			"second_score":	264395
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	200,
			"primary_score":	999990,
			"second_score":	264394
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	212,
			"primary_score":	999990,
			"second_score":	264393
		}, {
			"file":	"Zend/zend_operators.h",
			"line":	216,
			"primary_score":	999990,
			"second_score":	264392
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	78,
			"primary_score":	999649,
			"second_score":	113988
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	79,
			"primary_score":	999649,
			"second_score":	114014
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	86,
			"primary_score":	999649,
			"second_score":	114981
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	88,
			"primary_score":	999649,
			"second_score":	114980
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	96,
			"primary_score":	999649,
			"second_score":	114982
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	97,
			"primary_score":	999649,
			"second_score":	114979
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	98,
			"primary_score":	999649,
			"second_score":	114978
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	100,
			"primary_score":	999649,
			"second_score":	114977
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	104,
			"primary_score":	999649,
			"second_score":	114976
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	105,
			"primary_score":	999649,
			"second_score":	114975
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	62,
			"primary_score":	999649,
			"second_score":	426577
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	64,
			"primary_score":	999649,
			"second_score":	264772
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	65,
			"primary_score":	999649,
			"second_score":	264771
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	66,
			"primary_score":	999649,
			"second_score":	264770
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	67,
			"primary_score":	999649,
			"second_score":	264769
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	87,
			"primary_score":	999649,
			"second_score":	264742
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	88,
			"primary_score":	999649,
			"second_score":	264741
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	89,
			"primary_score":	999649,
			"second_score":	264740
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	90,
			"primary_score":	999649,
			"second_score":	264739
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	27,
			"primary_score":	999649,
			"second_score":	114996
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	28,
			"primary_score":	999649,
			"second_score":	114995
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	29,
			"primary_score":	999649,
			"second_score":	114994
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	30,
			"primary_score":	999649,
			"second_score":	114993
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	50,
			"primary_score":	999649,
			"second_score":	427902
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	51,
			"primary_score":	999649,
			"second_score":	427901
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	52,
			"primary_score":	999649,
			"second_score":	427900
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	62,
			"primary_score":	999649,
			"second_score":	427877
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	63,
			"primary_score":	999649,
			"second_score":	427876
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	65,
			"primary_score":	999649,
			"second_score":	427857
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	83,
			"primary_score":	999649,
			"second_score":	427128
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	84,
			"primary_score":	999649,
			"second_score":	427127
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	86,
			"primary_score":	999798,
			"second_score":	428058
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	93,
			"primary_score":	999649,
			"second_score":	113757
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	95,
			"primary_score":	999649,
			"second_score":	113756
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	103,
			"primary_score":	999649,
			"second_score":	113755
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	121,
			"primary_score":	999649,
			"second_score":	427626
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	123,
			"primary_score":	999649,
			"second_score":	427625
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	130,
			"primary_score":	999649,
			"second_score":	427624
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	46,
			"primary_score":	999649,
			"second_score":	426920
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	47,
			"primary_score":	999649,
			"second_score":	426919
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	67,
			"primary_score":	999649,
			"second_score":	426929
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	68,
			"primary_score":	999649,
			"second_score":	426928
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	74,
			"primary_score":	999649,
			"second_score":	426927
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	75,
			"primary_score":	999649,
			"second_score":	426926
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	76,
			"primary_score":	999649,
			"second_score":	426925
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	77,
			"primary_score":	999649,
			"second_score":	426924
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	78,
			"primary_score":	999649,
			"second_score":	426923
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	83,
			"primary_score":	999649,
			"second_score":	426930
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	84,
			"primary_score":	999649,
			"second_score":	426922
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	85,
			"primary_score":	999649,
			"second_score":	426921
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	90,
			"primary_score":	999649,
			"second_score":	442669
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	95,
			"primary_score":	999649,
			"second_score":	442671
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	97,
			"primary_score":	999649,
			"second_score":	442670
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	100,
			"primary_score":	999649,
			"second_score":	442668
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	103,
			"primary_score":	999649,
			"second_score":	442667
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	105,
			"primary_score":	999649,
			"second_score":	442665
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	109,
			"primary_score":	999649,
			"second_score":	442664
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	169,
			"primary_score":	999649,
			"second_score":	442683
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	170,
			"primary_score":	999649,
			"second_score":	442682
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	172,
			"primary_score":	999649,
			"second_score":	442681
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	178,
			"primary_score":	999649,
			"second_score":	442680
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	187,
			"primary_score":	999649,
			"second_score":	442679
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	188,
			"primary_score":	999649,
			"second_score":	442678
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	189,
			"primary_score":	999649,
			"second_score":	442677
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	190,
			"primary_score":	999649,
			"second_score":	442676
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	191,
			"primary_score":	999649,
			"second_score":	442675
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	192,
			"primary_score":	999649,
			"second_score":	442674
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	194,
			"primary_score":	999649,
			"second_score":	442673
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	208,
			"primary_score":	999649,
			"second_score":	442672
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	209,
			"primary_score":	999649,
			"second_score":	442663
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	213,
			"primary_score":	999649,
			"second_score":	442662
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	214,
			"primary_score":	999649,
			"second_score":	442661
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	216,
			"primary_score":	999649,
			"second_score":	442660
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	218,
			"primary_score":	999649,
			"second_score":	442659
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	222,
			"primary_score":	999649,
			"second_score":	442658
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	223,
			"primary_score":	999649,
			"second_score":	442657
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	224,
			"primary_score":	999649,
			"second_score":	442656
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	225,
			"primary_score":	999649,
			"second_score":	442655
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	227,
			"primary_score":	999649,
			"second_score":	442654
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	228,
			"primary_score":	999649,
			"second_score":	442653
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	229,
			"primary_score":	999649,
			"second_score":	442652
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	231,
			"primary_score":	999649,
			"second_score":	442651
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	232,
			"primary_score":	999649,
			"second_score":	442650
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	234,
			"primary_score":	999649,
			"second_score":	442649
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	275,
			"primary_score":	999649,
			"second_score":	442648
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	276,
			"primary_score":	999649,
			"second_score":	442647
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	277,
			"primary_score":	999649,
			"second_score":	442646
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	278,
			"primary_score":	999649,
			"second_score":	442645
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	279,
			"primary_score":	999649,
			"second_score":	442644
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	281,
			"primary_score":	999649,
			"second_score":	442643
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	282,
			"primary_score":	999649,
			"second_score":	442642
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	284,
			"primary_score":	999649,
			"second_score":	442641
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	289,
			"primary_score":	999649,
			"second_score":	426932
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	299,
			"primary_score":	999649,
			"second_score":	426931
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	301,
			"primary_score":	999649,
			"second_score":	426918
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	302,
			"primary_score":	999649,
			"second_score":	426917
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	309,
			"primary_score":	999649,
			"second_score":	426916
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	310,
			"primary_score":	999649,
			"second_score":	426915
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	311,
			"primary_score":	999649,
			"second_score":	426896
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	313,
			"primary_score":	999649,
			"second_score":	426895
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	322,
			"primary_score":	999649,
			"second_score":	426942
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	325,
			"primary_score":	999649,
			"second_score":	426941
		}, {
			"file":	"Zend/zend_string.c",
			"line":	77,
			"primary_score":	999649,
			"second_score":	6123
		}, {
			"file":	"Zend/zend_string.c",
			"line":	78,
			"primary_score":	999649,
			"second_score":	6122
		}, {
			"file":	"Zend/zend_string.c",
			"line":	85,
			"primary_score":	999649,
			"second_score":	428301
		}, {
			"file":	"Zend/zend_string.c",
			"line":	86,
			"primary_score":	999649,
			"second_score":	428300
		}, {
			"file":	"Zend/zend_string.c",
			"line":	87,
			"primary_score":	999649,
			"second_score":	428299
		}, {
			"file":	"Zend/zend_string.c",
			"line":	89,
			"primary_score":	999649,
			"second_score":	428298
		}, {
			"file":	"Zend/zend_string.c",
			"line":	93,
			"primary_score":	999649,
			"second_score":	428297
		}, {
			"file":	"Zend/zend_string.c",
			"line":	94,
			"primary_score":	999649,
			"second_score":	428290
		}, {
			"file":	"Zend/zend_string.c",
			"line":	95,
			"primary_score":	999649,
			"second_score":	428289
		}, {
			"file":	"Zend/zend_string.c",
			"line":	96,
			"primary_score":	999649,
			"second_score":	428288
		}, {
			"file":	"Zend/zend_string.c",
			"line":	97,
			"primary_score":	999649,
			"second_score":	428287
		}, {
			"file":	"Zend/zend_string.c",
			"line":	98,
			"primary_score":	999649,
			"second_score":	428286
		}, {
			"file":	"Zend/zend_string.c",
			"line":	99,
			"primary_score":	999649,
			"second_score":	428285
		}, {
			"file":	"Zend/zend_string.c",
			"line":	100,
			"primary_score":	999649,
			"second_score":	428284
		}, {
			"file":	"Zend/zend_string.c",
			"line":	102,
			"primary_score":	999649,
			"second_score":	428265
		}, {
			"file":	"Zend/zend_string.c",
			"line":	105,
			"primary_score":	999649,
			"second_score":	432190
		}, {
			"file":	"Zend/zend_string.c",
			"line":	108,
			"primary_score":	999649,
			"second_score":	432729
		}, {
			"file":	"Zend/zend_string.c",
			"line":	114,
			"primary_score":	999649,
			"second_score":	432728
		}, {
			"file":	"Zend/zend_string.c",
			"line":	115,
			"primary_score":	999649,
			"second_score":	432727
		}, {
			"file":	"Zend/zend_string.c",
			"line":	121,
			"primary_score":	999649,
			"second_score":	432726
		}, {
			"file":	"Zend/zend_string.c",
			"line":	122,
			"primary_score":	999649,
			"second_score":	432725
		}, {
			"file":	"Zend/zend_string.c",
			"line":	123,
			"primary_score":	999649,
			"second_score":	432724
		}, {
			"file":	"Zend/zend_string.c",
			"line":	124,
			"primary_score":	999649,
			"second_score":	432723
		}, {
			"file":	"Zend/zend_string.c",
			"line":	126,
			"primary_score":	999649,
			"second_score":	432704
		}, {
			"file":	"Zend/zend_string.c",
			"line":	127,
			"primary_score":	999649,
			"second_score":	432703
		}, {
			"file":	"Zend/zend_string.c",
			"line":	128,
			"primary_score":	999649,
			"second_score":	432702
		}, {
			"file":	"Zend/zend_string.c",
			"line":	129,
			"primary_score":	999649,
			"second_score":	432701
		}, {
			"file":	"Zend/zend_string.c",
			"line":	131,
			"primary_score":	999649,
			"second_score":	432700
		}, {
			"file":	"Zend/zend_string.c",
			"line":	132,
			"primary_score":	999649,
			"second_score":	432699
		}, {
			"file":	"Zend/zend_string.c",
			"line":	133,
			"primary_score":	999649,
			"second_score":	432698
		}, {
			"file":	"Zend/zend_string.c",
			"line":	134,
			"primary_score":	999649,
			"second_score":	432697
		}, {
			"file":	"Zend/zend_string.c",
			"line":	137,
			"primary_score":	999649,
			"second_score":	432696
		}, {
			"file":	"Zend/zend_string.c",
			"line":	139,
			"primary_score":	999649,
			"second_score":	432694
		}, {
			"file":	"Zend/zend_string.c",
			"line":	140,
			"primary_score":	999649,
			"second_score":	432693
		}, {
			"file":	"Zend/zend_string.c",
			"line":	141,
			"primary_score":	999649,
			"second_score":	432692
		}, {
			"file":	"Zend/zend_string.c",
			"line":	142,
			"primary_score":	999649,
			"second_score":	432691
		}, {
			"file":	"Zend/zend_string.c",
			"line":	143,
			"primary_score":	999649,
			"second_score":	432690
		}, {
			"file":	"Zend/zend_string.c",
			"line":	145,
			"primary_score":	999649,
			"second_score":	432689
		}, {
			"file":	"Zend/zend_string.c",
			"line":	149,
			"primary_score":	999649,
			"second_score":	432688
		}, {
			"file":	"Zend/zend_string.c",
			"line":	151,
			"primary_score":	999649,
			"second_score":	432687
		}, {
			"file":	"Zend/zend_string.c",
			"line":	153,
			"primary_score":	999649,
			"second_score":	432685
		}, {
			"file":	"Zend/zend_string.c",
			"line":	155,
			"primary_score":	999649,
			"second_score":	432684
		}, {
			"file":	"Zend/zend_string.c",
			"line":	174,
			"primary_score":	999649,
			"second_score":	432683
		}, {
			"file":	"Zend/zend_string.c",
			"line":	188,
			"primary_score":	999649,
			"second_score":	113203
		}, {
			"file":	"Zend/zend_string.c",
			"line":	189,
			"primary_score":	999649,
			"second_score":	113202
		}, {
			"file":	"Zend/zend_string.c",
			"line":	192,
			"primary_score":	999649,
			"second_score":	113201
		}, {
			"file":	"Zend/zend_string.c",
			"line":	199,
			"primary_score":	999649,
			"second_score":	113200
		}, {
			"file":	"Zend/zend_string.c",
			"line":	200,
			"primary_score":	999649,
			"second_score":	103821
		}, {
			"file":	"Zend/zend_string.c",
			"line":	201,
			"primary_score":	999649,
			"second_score":	103820
		}, {
			"file":	"Zend/zend_string.c",
			"line":	202,
			"primary_score":	999649,
			"second_score":	110377
		}, {
			"file":	"Zend/zend_string.c",
			"line":	203,
			"primary_score":	999649,
			"second_score":	110376
		}, {
			"file":	"Zend/zend_string.c",
			"line":	204,
			"primary_score":	999649,
			"second_score":	110375
		}, {
			"file":	"Zend/zend_string.c",
			"line":	208,
			"primary_score":	999649,
			"second_score":	110374
		}, {
			"file":	"Zend/zend_string.c",
			"line":	209,
			"primary_score":	999649,
			"second_score":	109376
		}, {
			"file":	"Zend/zend_string.c",
			"line":	211,
			"primary_score":	999649,
			"second_score":	110373
		}, {
			"file":	"Zend/zend_string.c",
			"line":	213,
			"primary_score":	999649,
			"second_score":	110372
		}, {
			"file":	"Zend/zend_string.c",
			"line":	215,
			"primary_score":	999649,
			"second_score":	103819
		}, {
			"file":	"Zend/zend_string.c",
			"line":	216,
			"primary_score":	999649,
			"second_score":	103818
		}, {
			"file":	"Zend/zend_string.c",
			"line":	218,
			"primary_score":	999649,
			"second_score":	103817
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	459,
			"primary_score":	999649,
			"second_score":	6291
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	467,
			"primary_score":	999649,
			"second_score":	6225
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	473,
			"primary_score":	999940,
			"second_score":	125949
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	474,
			"primary_score":	999940,
			"second_score":	125948
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	476,
			"primary_score":	999940,
			"second_score":	125947
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	480,
			"primary_score":	999940,
			"second_score":	125946
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	481,
			"primary_score":	999940,
			"second_score":	125945
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	482,
			"primary_score":	999949,
			"second_score":	125944
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	484,
			"primary_score":	999940,
			"second_score":	317289
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	485,
			"primary_score":	999940,
			"second_score":	317288
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	486,
			"primary_score":	999940,
			"second_score":	317287
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	490,
			"primary_score":	999940,
			"second_score":	317286
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	491,
			"primary_score":	999940,
			"second_score":	317285
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	493,
			"primary_score":	999940,
			"second_score":	125943
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	494,
			"primary_score":	999940,
			"second_score":	125942
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	495,
			"primary_score":	999940,
			"second_score":	125941
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	500,
			"primary_score":	999940,
			"second_score":	125814
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	501,
			"primary_score":	999940,
			"second_score":	125813
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	502,
			"primary_score":	999940,
			"second_score":	125812
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	503,
			"primary_score":	999940,
			"second_score":	125811
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	504,
			"primary_score":	999940,
			"second_score":	125810
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	515,
			"primary_score":	999944,
			"second_score":	125953
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	517,
			"primary_score":	999944,
			"second_score":	125952
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	518,
			"primary_score":	999944,
			"second_score":	125951
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	523,
			"primary_score":	999944,
			"second_score":	125950
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	524,
			"primary_score":	999944,
			"second_score":	125940
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	525,
			"primary_score":	999944,
			"second_score":	125939
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	545,
			"primary_score":	999993,
			"second_score":	129044
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	546,
			"primary_score":	999993,
			"second_score":	129043
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	548,
			"primary_score":	999993,
			"second_score":	129042
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	550,
			"primary_score":	999993,
			"second_score":	129041
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	552,
			"primary_score":	999993,
			"second_score":	129040
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	553,
			"primary_score":	999993,
			"second_score":	129039
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	554,
			"primary_score":	999993,
			"second_score":	129038
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	555,
			"primary_score":	999993,
			"second_score":	129037
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	557,
			"primary_score":	999993,
			"second_score":	129031
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	558,
			"primary_score":	999993,
			"second_score":	129030
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	559,
			"primary_score":	999993,
			"second_score":	129029
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	560,
			"primary_score":	999993,
			"second_score":	129028
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	561,
			"primary_score":	999993,
			"second_score":	129027
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	569,
			"primary_score":	999993,
			"second_score":	129026
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	579,
			"primary_score":	999993,
			"second_score":	129025
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	584,
			"primary_score":	999995,
			"second_score":	130131
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	586,
			"primary_score":	999995,
			"second_score":	130130
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	587,
			"primary_score":	999998,
			"second_score":	130129
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	588,
			"primary_score":	999998,
			"second_score":	130128
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	590,
			"primary_score":	999995,
			"second_score":	130127
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	591,
			"primary_score":	999999,
			"second_score":	130126
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	592,
			"primary_score":	999999,
			"second_score":	130125
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	594,
			"primary_score":	999995,
			"second_score":	130124
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	595,
			"primary_score":	999995,
			"second_score":	130123
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	596,
			"primary_score":	999995,
			"second_score":	130122
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	598,
			"primary_score":	999995,
			"second_score":	130121
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	602,
			"primary_score":	999995,
			"second_score":	130120
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	603,
			"primary_score":	999998,
			"second_score":	130119
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	604,
			"primary_score":	999998,
			"second_score":	130118
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	608,
			"primary_score":	999995,
			"second_score":	130117
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	613,
			"primary_score":	999941,
			"second_score":	126007
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	614,
			"primary_score":	999941,
			"second_score":	126006
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	616,
			"primary_score":	999941,
			"second_score":	126005
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	617,
			"primary_score":	999961,
			"second_score":	127018
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	620,
			"primary_score":	999972,
			"second_score":	127017
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	621,
			"primary_score":	999972,
			"second_score":	127016
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	622,
			"primary_score":	999972,
			"second_score":	127015
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	624,
			"primary_score":	999992,
			"second_score":	128027
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	625,
			"primary_score":	999992,
			"second_score":	128026
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	627,
			"primary_score":	999957,
			"second_score":	126004
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	628,
			"primary_score":	999957,
			"second_score":	126003
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	632,
			"primary_score":	999957,
			"second_score":	126002
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	633,
			"primary_score":	999989,
			"second_score":	251812
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	634,
			"primary_score":	999989,
			"second_score":	251811
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	636,
			"primary_score":	999957,
			"second_score":	126001
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	637,
			"primary_score":	999974,
			"second_score":	132613
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	638,
			"primary_score":	999974,
			"second_score":	132612
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	640,
			"primary_score":	999957,
			"second_score":	126000
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	641,
			"primary_score":	999966,
			"second_score":	125999
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	642,
			"primary_score":	999966,
			"second_score":	125998
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	644,
			"primary_score":	999957,
			"second_score":	125997
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	645,
			"primary_score":	999969,
			"second_score":	125996
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	646,
			"primary_score":	999969,
			"second_score":	125995
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	647,
			"primary_score":	999969,
			"second_score":	125994
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	651,
			"primary_score":	999957,
			"second_score":	125993
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	652,
			"primary_score":	999957,
			"second_score":	125992
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	657,
			"primary_score":	999993,
			"second_score":	130173
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	659,
			"primary_score":	999993,
			"second_score":	130172
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	660,
			"primary_score":	999993,
			"second_score":	130162
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	661,
			"primary_score":	999993,
			"second_score":	130161
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	662,
			"primary_score":	999993,
			"second_score":	130160
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	784,
			"primary_score":	999994,
			"second_score":	130157
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	785,
			"primary_score":	999994,
			"second_score":	130156
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	786,
			"primary_score":	999994,
			"second_score":	130155
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	788,
			"primary_score":	999994,
			"second_score":	130154
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	789,
			"primary_score":	999994,
			"second_score":	130153
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	790,
			"primary_score":	999994,
			"second_score":	130152
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	793,
			"primary_score":	999994,
			"second_score":	130136
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	794,
			"primary_score":	999999,
			"second_score":	130135
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	795,
			"primary_score":	999999,
			"second_score":	130134
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	826,
			"primary_score":	999993,
			"second_score":	128966
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	827,
			"primary_score":	999993,
			"second_score":	128965
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	828,
			"primary_score":	999993,
			"second_score":	128964
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	831,
			"primary_score":	999993,
			"second_score":	128963
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	835,
			"primary_score":	999993,
			"second_score":	128962
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	836,
			"primary_score":	999993,
			"second_score":	128961
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	837,
			"primary_score":	999993,
			"second_score":	128960
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	838,
			"primary_score":	999994,
			"second_score":	130060
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	840,
			"primary_score":	999993,
			"second_score":	128959
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	841,
			"primary_score":	999993,
			"second_score":	128949
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	842,
			"primary_score":	999993,
			"second_score":	128948
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	843,
			"primary_score":	999994,
			"second_score":	130047
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	845,
			"primary_score":	999993,
			"second_score":	128947
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	846,
			"primary_score":	999993,
			"second_score":	128946
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	848,
			"primary_score":	999993,
			"second_score":	128945
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	849,
			"primary_score":	999993,
			"second_score":	128944
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	850,
			"primary_score":	999993,
			"second_score":	128943
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	851,
			"primary_score":	999993,
			"second_score":	128942
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	852,
			"primary_score":	999993,
			"second_score":	128939
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	853,
			"primary_score":	999993,
			"second_score":	128938
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	856,
			"primary_score":	999993,
			"second_score":	128937
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	877,
			"primary_score":	999993,
			"second_score":	128936
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	878,
			"primary_score":	999993,
			"second_score":	128935
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	879,
			"primary_score":	999993,
			"second_score":	128929
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	884,
			"primary_score":	999993,
			"second_score":	128927
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	885,
			"primary_score":	999993,
			"second_score":	128926
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	887,
			"primary_score":	999993,
			"second_score":	128925
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	888,
			"primary_score":	999993,
			"second_score":	128924
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	895,
			"primary_score":	999993,
			"second_score":	128923
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	897,
			"primary_score":	999993,
			"second_score":	128922
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	898,
			"primary_score":	999993,
			"second_score":	128921
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	899,
			"primary_score":	999993,
			"second_score":	128920
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	900,
			"primary_score":	999993,
			"second_score":	128919
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	901,
			"primary_score":	999993,
			"second_score":	128918
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	902,
			"primary_score":	999993,
			"second_score":	128917
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	903,
			"primary_score":	999993,
			"second_score":	128916
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1093,
			"primary_score":	999941,
			"second_score":	126029
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1094,
			"primary_score":	999941,
			"second_score":	126028
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1095,
			"primary_score":	999941,
			"second_score":	126027
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1096,
			"primary_score":	999941,
			"second_score":	126026
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1101,
			"primary_score":	999941,
			"second_score":	126025
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1111,
			"primary_score":	999941,
			"second_score":	126024
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1115,
			"primary_score":	999941,
			"second_score":	126014
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1117,
			"primary_score":	999941,
			"second_score":	126013
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1118,
			"primary_score":	999941,
			"second_score":	126012
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1125,
			"primary_score":	999941,
			"second_score":	126011
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1126,
			"primary_score":	999941,
			"second_score":	126010
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1129,
			"primary_score":	999941,
			"second_score":	126009
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1130,
			"primary_score":	999951,
			"second_score":	126008
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1131,
			"primary_score":	999956,
			"second_score":	125991
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1132,
			"primary_score":	999956,
			"second_score":	125990
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1136,
			"primary_score":	999951,
			"second_score":	125989
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1142,
			"primary_score":	999963,
			"second_score":	251819
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1143,
			"primary_score":	999963,
			"second_score":	251798
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1144,
			"primary_score":	999963,
			"second_score":	251797
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1145,
			"primary_score":	999963,
			"second_score":	251796
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1190,
			"primary_score":	999941,
			"second_score":	125988
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1196,
			"primary_score":	999941,
			"second_score":	125987
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1197,
			"primary_score":	999941,
			"second_score":	125986
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1209,
			"primary_score":	999941,
			"second_score":	125985
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1279,
			"primary_score":	999999,
			"second_score":	129023
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1280,
			"primary_score":	999999,
			"second_score":	129022
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1281,
			"primary_score":	999999,
			"second_score":	129021
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1282,
			"primary_score":	999999,
			"second_score":	129020
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1284,
			"primary_score":	999999,
			"second_score":	129019
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1285,
			"primary_score":	999999,
			"second_score":	129018
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1288,
			"primary_score":	999999,
			"second_score":	129017
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1293,
			"primary_score":	999999,
			"second_score":	129016
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1295,
			"primary_score":	999999,
			"second_score":	129015
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1296,
			"primary_score":	999999,
			"second_score":	129014
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1297,
			"primary_score":	999999,
			"second_score":	129013
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1298,
			"primary_score":	999999,
			"second_score":	129012
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1299,
			"primary_score":	999999,
			"second_score":	129011
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1304,
			"primary_score":	999999,
			"second_score":	129010
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1305,
			"primary_score":	999999,
			"second_score":	129009
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1306,
			"primary_score":	999999,
			"second_score":	129008
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1307,
			"primary_score":	999999,
			"second_score":	129007
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1309,
			"primary_score":	999999,
			"second_score":	128995
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1310,
			"primary_score":	999999,
			"second_score":	128994
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1311,
			"primary_score":	999999,
			"second_score":	128993
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1312,
			"primary_score":	999999,
			"second_score":	128992
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1313,
			"primary_score":	999999,
			"second_score":	128991
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1314,
			"primary_score":	999999,
			"second_score":	128990
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1315,
			"primary_score":	999999,
			"second_score":	128989
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1316,
			"primary_score":	999999,
			"second_score":	128988
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1317,
			"primary_score":	999999,
			"second_score":	128987
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1318,
			"primary_score":	999999,
			"second_score":	128986
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1319,
			"primary_score":	999999,
			"second_score":	128985
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1330,
			"primary_score":	999999,
			"second_score":	128984
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1337,
			"primary_score":	999999,
			"second_score":	128983
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1374,
			"primary_score":	999999,
			"second_score":	128970
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1379,
			"primary_score":	999649,
			"second_score":	6290
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1380,
			"primary_score":	999649,
			"second_score":	6289
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1382,
			"primary_score":	999649,
			"second_score":	6288
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1383,
			"primary_score":	999649,
			"second_score":	6287
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1384,
			"primary_score":	999649,
			"second_score":	6229
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1385,
			"primary_score":	999649,
			"second_score":	6228
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1386,
			"primary_score":	999940,
			"second_score":	6268
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1387,
			"primary_score":	999940,
			"second_score":	6267
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1389,
			"primary_score":	999649,
			"second_score":	6227
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1391,
			"primary_score":	999649,
			"second_score":	6226
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1398,
			"primary_score":	999944,
			"second_score":	125817
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1399,
			"primary_score":	999944,
			"second_score":	125816
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1400,
			"primary_score":	999944,
			"second_score":	125815
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1473,
			"primary_score":	999944,
			"second_score":	126043
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1476,
			"primary_score":	999944,
			"second_score":	126042
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1478,
			"primary_score":	999944,
			"second_score":	126041
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1479,
			"primary_score":	999944,
			"second_score":	126040
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1481,
			"primary_score":	999944,
			"second_score":	126039
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1482,
			"primary_score":	999944,
			"second_score":	126038
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1483,
			"primary_score":	999944,
			"second_score":	126037
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1484,
			"primary_score":	999944,
			"second_score":	126036
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1486,
			"primary_score":	999944,
			"second_score":	126035
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1488,
			"primary_score":	999944,
			"second_score":	126034
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1494,
			"primary_score":	999946,
			"second_score":	126033
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1498,
			"primary_score":	999944,
			"second_score":	126032
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1515,
			"primary_score":	999944,
			"second_score":	126031
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1520,
			"primary_score":	999945,
			"second_score":	126030
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1524,
			"primary_score":	999945,
			"second_score":	125984
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1526,
			"primary_score":	999945,
			"second_score":	125983
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1527,
			"primary_score":	999945,
			"second_score":	125982
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1528,
			"primary_score":	999945,
			"second_score":	125981
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1556,
			"primary_score":	999945,
			"second_score":	125980
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1562,
			"primary_score":	999945,
			"second_score":	125979
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1576,
			"primary_score":	999945,
			"second_score":	125978
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1577,
			"primary_score":	999945,
			"second_score":	125977
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1578,
			"primary_score":	999945,
			"second_score":	125976
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1580,
			"primary_score":	999945,
			"second_score":	125975
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1581,
			"primary_score":	999945,
			"second_score":	125974
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1582,
			"primary_score":	999947,
			"second_score":	125973
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1583,
			"primary_score":	1000000,
			"second_score":	125972
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1584,
			"primary_score":	999947,
			"second_score":	125971
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1586,
			"primary_score":	999945,
			"second_score":	125970
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1587,
			"primary_score":	999945,
			"second_score":	125969
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1588,
			"primary_score":	999945,
			"second_score":	125968
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1589,
			"primary_score":	999945,
			"second_score":	125967
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1592,
			"primary_score":	999976,
			"second_score":	251776
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1593,
			"primary_score":	999976,
			"second_score":	251775
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1595,
			"primary_score":	999945,
			"second_score":	125966
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1596,
			"primary_score":	999947,
			"second_score":	125965
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1597,
			"primary_score":	999947,
			"second_score":	125964
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1598,
			"primary_score":	999947,
			"second_score":	125963
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1605,
			"primary_score":	999945,
			"second_score":	125962
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1607,
			"primary_score":	999945,
			"second_score":	125961
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1608,
			"primary_score":	999945,
			"second_score":	125960
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1612,
			"primary_score":	999945,
			"second_score":	125959
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1613,
			"primary_score":	999945,
			"second_score":	125958
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1623,
			"primary_score":	999945,
			"second_score":	125957
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1626,
			"primary_score":	999945,
			"second_score":	125956
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1627,
			"primary_score":	999945,
			"second_score":	125955
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1638,
			"primary_score":	999945,
			"second_score":	125954
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1640,
			"primary_score":	999945,
			"second_score":	125938
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1644,
			"primary_score":	999945,
			"second_score":	125937
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1645,
			"primary_score":	999945,
			"second_score":	125936
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1646,
			"primary_score":	999945,
			"second_score":	125935
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1647,
			"primary_score":	999945,
			"second_score":	125934
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1648,
			"primary_score":	999945,
			"second_score":	125933
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1649,
			"primary_score":	999945,
			"second_score":	125932
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1650,
			"primary_score":	999967,
			"second_score":	125931
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1651,
			"primary_score":	999967,
			"second_score":	125930
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1652,
			"primary_score":	999967,
			"second_score":	125929
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1658,
			"primary_score":	999967,
			"second_score":	125928
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1663,
			"primary_score":	999967,
			"second_score":	125927
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1673,
			"primary_score":	999945,
			"second_score":	125926
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1681,
			"primary_score":	999945,
			"second_score":	125925
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1682,
			"primary_score":	999945,
			"second_score":	125924
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1683,
			"primary_score":	999945,
			"second_score":	125923
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1693,
			"primary_score":	999945,
			"second_score":	125922
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1715,
			"primary_score":	999945,
			"second_score":	125921
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1716,
			"primary_score":	999945,
			"second_score":	125920
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1717,
			"primary_score":	999945,
			"second_score":	125867
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1718,
			"primary_score":	999945,
			"second_score":	125866
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1719,
			"primary_score":	999945,
			"second_score":	125865
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1720,
			"primary_score":	999945,
			"second_score":	125864
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1721,
			"primary_score":	999945,
			"second_score":	125863
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1722,
			"primary_score":	999966,
			"second_score":	174572
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1723,
			"primary_score":	999950,
			"second_score":	125862
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1724,
			"primary_score":	999950,
			"second_score":	125861
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1725,
			"primary_score":	999950,
			"second_score":	125860
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1726,
			"primary_score":	999950,
			"second_score":	125859
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1728,
			"primary_score":	999999,
			"second_score":	130186
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1734,
			"primary_score":	999999,
			"second_score":	130185
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1736,
			"primary_score":	999999,
			"second_score":	130184
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1737,
			"primary_score":	999999,
			"second_score":	130183
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1738,
			"primary_score":	999999,
			"second_score":	130182
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1743,
			"primary_score":	999999,
			"second_score":	130181
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1773,
			"primary_score":	999966,
			"second_score":	174571
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1775,
			"primary_score":	999966,
			"second_score":	174570
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1780,
			"primary_score":	999966,
			"second_score":	174569
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1783,
			"primary_score":	999999,
			"second_score":	130180
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1784,
			"primary_score":	999999,
			"second_score":	130179
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1785,
			"primary_score":	999999,
			"second_score":	130178
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1786,
			"primary_score":	999999,
			"second_score":	130177
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1816,
			"primary_score":	999999,
			"second_score":	130176
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1822,
			"primary_score":	999999,
			"second_score":	130175
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1837,
			"primary_score":	999999,
			"second_score":	130174
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1838,
			"primary_score":	999999,
			"second_score":	130159
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1839,
			"primary_score":	1000000,
			"second_score":	130158
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1842,
			"primary_score":	999999,
			"second_score":	130133
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1865,
			"primary_score":	999999,
			"second_score":	130132
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1866,
			"primary_score":	999999,
			"second_score":	130116
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1871,
			"primary_score":	999999,
			"second_score":	130115
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1872,
			"primary_score":	999999,
			"second_score":	130114
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1873,
			"primary_score":	999999,
			"second_score":	130113
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1874,
			"primary_score":	999999,
			"second_score":	130112
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1875,
			"primary_score":	999999,
			"second_score":	130111
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1883,
			"primary_score":	999999,
			"second_score":	130110
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1884,
			"primary_score":	999999,
			"second_score":	130109
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1885,
			"primary_score":	999999,
			"second_score":	130069
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1886,
			"primary_score":	999999,
			"second_score":	130068
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1887,
			"primary_score":	999999,
			"second_score":	130029
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1896,
			"primary_score":	999999,
			"second_score":	130028
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1908,
			"primary_score":	999999,
			"second_score":	130027
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1979,
			"primary_score":	999999,
			"second_score":	130026
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1980,
			"primary_score":	999999,
			"second_score":	129024
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1981,
			"primary_score":	999999,
			"second_score":	128969
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1982,
			"primary_score":	999999,
			"second_score":	128968
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1983,
			"primary_score":	999999,
			"second_score":	129045
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1988,
			"primary_score":	999999,
			"second_score":	128967
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1989,
			"primary_score":	999999,
			"second_score":	128928
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1990,
			"primary_score":	999999,
			"second_score":	128915
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1991,
			"primary_score":	999999,
			"second_score":	151800
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1998,
			"primary_score":	999999,
			"second_score":	151799
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2001,
			"primary_score":	1000000,
			"second_score":	128914
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2002,
			"primary_score":	1000000,
			"second_score":	128913
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2004,
			"primary_score":	999999,
			"second_score":	128912
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2006,
			"primary_score":	999999,
			"second_score":	128906
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2011,
			"primary_score":	999999,
			"second_score":	128905
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2014,
			"primary_score":	999945,
			"second_score":	125858
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2019,
			"primary_score":	999945,
			"second_score":	125857
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2021,
			"primary_score":	999945,
			"second_score":	125856
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2023,
			"primary_score":	999945,
			"second_score":	125850
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2027,
			"primary_score":	999945,
			"second_score":	125849
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2028,
			"primary_score":	999945,
			"second_score":	125848
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2029,
			"primary_score":	999945,
			"second_score":	125847
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2031,
			"primary_score":	999945,
			"second_score":	125846
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2036,
			"primary_score":	999649,
			"second_score":	408403
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2038,
			"primary_score":	999649,
			"second_score":	408402
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2039,
			"primary_score":	999649,
			"second_score":	408401
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2040,
			"primary_score":	999649,
			"second_score":	408400
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2041,
			"primary_score":	999649,
			"second_score":	408399
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2042,
			"primary_score":	999649,
			"second_score":	408398
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2043,
			"primary_score":	999649,
			"second_score":	408397
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2044,
			"primary_score":	999649,
			"second_score":	408396
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2046,
			"primary_score":	999649,
			"second_score":	408395
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2048,
			"primary_score":	999649,
			"second_score":	408394
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2049,
			"primary_score":	999649,
			"second_score":	408393
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2052,
			"primary_score":	999649,
			"second_score":	408392
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2055,
			"primary_score":	999649,
			"second_score":	408391
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2058,
			"primary_score":	999649,
			"second_score":	408390
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2062,
			"primary_score":	999649,
			"second_score":	408389
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2067,
			"primary_score":	999649,
			"second_score":	408388
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2073,
			"primary_score":	999649,
			"second_score":	408387
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2074,
			"primary_score":	999649,
			"second_score":	408386
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2075,
			"primary_score":	999649,
			"second_score":	408385
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2077,
			"primary_score":	999649,
			"second_score":	408384
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2080,
			"primary_score":	999649,
			"second_score":	408383
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2081,
			"primary_score":	999649,
			"second_score":	408382
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2082,
			"primary_score":	999889,
			"second_score":	432538
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2083,
			"primary_score":	999889,
			"second_score":	432537
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2084,
			"primary_score":	999928,
			"second_score":	432536
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2086,
			"primary_score":	999928,
			"second_score":	432535
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2087,
			"primary_score":	999930,
			"second_score":	432534
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2088,
			"primary_score":	999930,
			"second_score":	432533
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2089,
			"primary_score":	999930,
			"second_score":	432532
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2090,
			"primary_score":	999930,
			"second_score":	432531
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2097,
			"primary_score":	999890,
			"second_score":	432530
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2098,
			"primary_score":	999896,
			"second_score":	432529
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2099,
			"primary_score":	999896,
			"second_score":	432528
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2104,
			"primary_score":	999896,
			"second_score":	432527
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2105,
			"primary_score":	999896,
			"second_score":	432526
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2108,
			"primary_score":	999896,
			"second_score":	432525
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2112,
			"primary_score":	999649,
			"second_score":	408381
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2114,
			"primary_score":	999649,
			"second_score":	408380
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2151,
			"primary_score":	999649,
			"second_score":	408379
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2156,
			"primary_score":	999649,
			"second_score":	408378
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2163,
			"primary_score":	999649,
			"second_score":	408377
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2164,
			"primary_score":	999930,
			"second_score":	432519
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2165,
			"primary_score":	999649,
			"second_score":	408376
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2166,
			"primary_score":	999649,
			"second_score":	408375
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2167,
			"primary_score":	999649,
			"second_score":	408374
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2169,
			"primary_score":	999649,
			"second_score":	408373
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2170,
			"primary_score":	999649,
			"second_score":	408372
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2175,
			"primary_score":	999649,
			"second_score":	408371
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2176,
			"primary_score":	999649,
			"second_score":	408370
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2177,
			"primary_score":	999896,
			"second_score":	432512
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2214,
			"primary_score":	999898,
			"second_score":	432511
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2215,
			"primary_score":	999898,
			"second_score":	432510
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2217,
			"primary_score":	999898,
			"second_score":	432509
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2568,
			"primary_score":	999649,
			"second_score":	408369
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2570,
			"primary_score":	999649,
			"second_score":	408368
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2571,
			"primary_score":	999649,
			"second_score":	408367
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2576,
			"primary_score":	999649,
			"second_score":	408366
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	2578,
			"primary_score":	999649,
			"second_score":	408365
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	32,
			"primary_score":	999649,
			"second_score":	114315
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	37,
			"primary_score":	999649,
			"second_score":	115634
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	38,
			"primary_score":	999649,
			"second_score":	115613
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	41,
			"primary_score":	999649,
			"second_score":	115105
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	43,
			"primary_score":	999649,
			"second_score":	115104
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	44,
			"primary_score":	999649,
			"second_score":	115103
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	45,
			"primary_score":	999649,
			"second_score":	115095
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	48,
			"primary_score":	999649,
			"second_score":	115076
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	58,
			"primary_score":	999649,
			"second_score":	114314
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	61,
			"primary_score":	999649,
			"second_score":	114313
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	63,
			"primary_score":	999649,
			"second_score":	114112
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	77,
			"primary_score":	999649,
			"second_score":	15299
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	81,
			"primary_score":	999649,
			"second_score":	19040
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	82,
			"primary_score":	999649,
			"second_score":	19037
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	107,
			"primary_score":	999649,
			"second_score":	264840
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	121,
			"primary_score":	999649,
			"second_score":	264839
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	122,
			"primary_score":	999649,
			"second_score":	428432
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	124,
			"primary_score":	999649,
			"second_score":	264838
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	153,
			"primary_score":	999649,
			"second_score":	125651
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	32,
			"primary_score":	999649,
			"second_score":	114317
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	33,
			"primary_score":	999649,
			"second_score":	115743
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	35,
			"primary_score":	999649,
			"second_score":	114316
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	42,
			"primary_score":	999649,
			"second_score":	133550
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	43,
			"primary_score":	999649,
			"second_score":	126117
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	45,
			"primary_score":	999649,
			"second_score":	264841
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	345,
			"primary_score":	999649,
			"second_score":	426867
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	346,
			"primary_score":	999649,
			"second_score":	426866
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	347,
			"primary_score":	999649,
			"second_score":	426865
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	350,
			"primary_score":	999649,
			"second_score":	426864
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	354,
			"primary_score":	999649,
			"second_score":	426863
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	356,
			"primary_score":	999649,
			"second_score":	426862
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	363,
			"primary_score":	999649,
			"second_score":	426853
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	364,
			"primary_score":	999649,
			"second_score":	426852
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	365,
			"primary_score":	999649,
			"second_score":	426851
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	366,
			"primary_score":	999649,
			"second_score":	426850
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	367,
			"primary_score":	999649,
			"second_score":	426849
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	368,
			"primary_score":	999649,
			"second_score":	426848
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	369,
			"primary_score":	999649,
			"second_score":	426847
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	370,
			"primary_score":	999649,
			"second_score":	426846
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	371,
			"primary_score":	999649,
			"second_score":	426845
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	372,
			"primary_score":	999649,
			"second_score":	426844
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	373,
			"primary_score":	999649,
			"second_score":	426843
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	374,
			"primary_score":	999649,
			"second_score":	426842
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	375,
			"primary_score":	999649,
			"second_score":	426841
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	377,
			"primary_score":	999649,
			"second_score":	426840
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	379,
			"primary_score":	999649,
			"second_score":	426839
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	380,
			"primary_score":	999649,
			"second_score":	426838
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	383,
			"primary_score":	999649,
			"second_score":	426805
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	395,
			"primary_score":	999649,
			"second_score":	426804
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	396,
			"primary_score":	999649,
			"second_score":	426803
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	397,
			"primary_score":	999649,
			"second_score":	426802
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	399,
			"primary_score":	999649,
			"second_score":	426801
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	400,
			"primary_score":	999649,
			"second_score":	426800
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	402,
			"primary_score":	999649,
			"second_score":	426799
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	403,
			"primary_score":	999649,
			"second_score":	120004
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	410,
			"primary_score":	999649,
			"second_score":	120003
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	411,
			"primary_score":	999649,
			"second_score":	119982
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	414,
			"primary_score":	999649,
			"second_score":	119981
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	431,
			"primary_score":	999649,
			"second_score":	125583
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	436,
			"primary_score":	999649,
			"second_score":	125582
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	437,
			"primary_score":	999649,
			"second_score":	125581
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	458,
			"primary_score":	999649,
			"second_score":	119995
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	459,
			"primary_score":	999649,
			"second_score":	119994
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	461,
			"primary_score":	999649,
			"second_score":	119993
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	462,
			"primary_score":	999649,
			"second_score":	119992
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	463,
			"primary_score":	999649,
			"second_score":	119991
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	474,
			"primary_score":	999649,
			"second_score":	119990
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	476,
			"primary_score":	999649,
			"second_score":	119989
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	478,
			"primary_score":	999649,
			"second_score":	119985
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	481,
			"primary_score":	999649,
			"second_score":	119984
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	566,
			"primary_score":	999649,
			"second_score":	119983
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	571,
			"primary_score":	999649,
			"second_score":	264752
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	572,
			"primary_score":	999649,
			"second_score":	264751
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	573,
			"primary_score":	999649,
			"second_score":	264750
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	575,
			"primary_score":	999649,
			"second_score":	264749
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	576,
			"primary_score":	999649,
			"second_score":	264748
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	589,
			"primary_score":	999649,
			"second_score":	264747
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	603,
			"primary_score":	999649,
			"second_score":	264746
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	613,
			"primary_score":	999649,
			"second_score":	264745
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	614,
			"primary_score":	999649,
			"second_score":	264735
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	615,
			"primary_score":	999649,
			"second_score":	264731
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	617,
			"primary_score":	999649,
			"second_score":	264730
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	618,
			"primary_score":	999649,
			"second_score":	264729
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	620,
			"primary_score":	999649,
			"second_score":	264728
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	621,
			"primary_score":	999649,
			"second_score":	264700
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	622,
			"primary_score":	999649,
			"second_score":	264697
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	623,
			"primary_score":	999649,
			"second_score":	264696
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	625,
			"primary_score":	999649,
			"second_score":	264695
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	626,
			"primary_score":	999649,
			"second_score":	264694
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	627,
			"primary_score":	999649,
			"second_score":	264693
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	628,
			"primary_score":	999649,
			"second_score":	264692
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	630,
			"primary_score":	999649,
			"second_score":	264691
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	631,
			"primary_score":	999649,
			"second_score":	264670
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	632,
			"primary_score":	999649,
			"second_score":	264661
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	636,
			"primary_score":	999649,
			"second_score":	264660
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	638,
			"primary_score":	999649,
			"second_score":	264659
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	643,
			"primary_score":	999649,
			"second_score":	252624
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	709,
			"primary_score":	999649,
			"second_score":	252623
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	710,
			"primary_score":	999649,
			"second_score":	252622
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	712,
			"primary_score":	999649,
			"second_score":	252621
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	729,
			"primary_score":	999649,
			"second_score":	252620
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	730,
			"primary_score":	999649,
			"second_score":	252619
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	732,
			"primary_score":	999649,
			"second_score":	252618
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	734,
			"primary_score":	999649,
			"second_score":	252518
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	742,
			"primary_score":	999649,
			"second_score":	252517
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1731,
			"primary_score":	999649,
			"second_score":	125658
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1733,
			"primary_score":	999649,
			"second_score":	125657
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1734,
			"primary_score":	999649,
			"second_score":	125656
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1736,
			"primary_score":	999649,
			"second_score":	125655
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1737,
			"primary_score":	999649,
			"second_score":	125654
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1739,
			"primary_score":	999649,
			"second_score":	125653
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1746,
			"primary_score":	999649,
			"second_score":	125652
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1749,
			"primary_score":	999649,
			"second_score":	125588
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1750,
			"primary_score":	999649,
			"second_score":	125587
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1919,
			"primary_score":	999649,
			"second_score":	264776
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1921,
			"primary_score":	999649,
			"second_score":	264775
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1923,
			"primary_score":	999649,
			"second_score":	264774
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1925,
			"primary_score":	999649,
			"second_score":	264768
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1927,
			"primary_score":	999649,
			"second_score":	264767
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1931,
			"primary_score":	999649,
			"second_score":	264756
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1933,
			"primary_score":	999649,
			"second_score":	264754
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1935,
			"primary_score":	999649,
			"second_score":	264753
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1940,
			"primary_score":	999649,
			"second_score":	120002
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1941,
			"primary_score":	999649,
			"second_score":	120001
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1944,
			"primary_score":	999649,
			"second_score":	120000
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1945,
			"primary_score":	999649,
			"second_score":	119999
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1947,
			"primary_score":	999649,
			"second_score":	119998
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1948,
			"primary_score":	999649,
			"second_score":	119997
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1951,
			"primary_score":	999649,
			"second_score":	119346
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1952,
			"primary_score":	999649,
			"second_score":	119345
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1954,
			"primary_score":	999649,
			"second_score":	119344
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1956,
			"primary_score":	999649,
			"second_score":	119343
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1957,
			"primary_score":	999649,
			"second_score":	119319
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1958,
			"primary_score":	999649,
			"second_score":	119311
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1959,
			"primary_score":	999649,
			"second_score":	119308
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1978,
			"primary_score":	999649,
			"second_score":	119996
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2077,
			"primary_score":	999649,
			"second_score":	264828
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2079,
			"primary_score":	999649,
			"second_score":	264827
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2080,
			"primary_score":	999649,
			"second_score":	264826
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2084,
			"primary_score":	999649,
			"second_score":	264825
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2085,
			"primary_score":	999649,
			"second_score":	264824
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2086,
			"primary_score":	999649,
			"second_score":	264823
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2089,
			"primary_score":	999649,
			"second_score":	264822
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2091,
			"primary_score":	999649,
			"second_score":	264821
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2092,
			"primary_score":	999649,
			"second_score":	264797
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2093,
			"primary_score":	999649,
			"second_score":	264789
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2094,
			"primary_score":	999649,
			"second_score":	264788
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2096,
			"primary_score":	999649,
			"second_score":	264785
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2099,
			"primary_score":	999649,
			"second_score":	264781
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2100,
			"primary_score":	999649,
			"second_score":	264780
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6005,
			"primary_score":	999649,
			"second_score":	120054
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6006,
			"primary_score":	999649,
			"second_score":	120053
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6007,
			"primary_score":	999649,
			"second_score":	120052
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6008,
			"primary_score":	999649,
			"second_score":	120051
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6010,
			"primary_score":	999649,
			"second_score":	120050
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6011,
			"primary_score":	999649,
			"second_score":	120049
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6013,
			"primary_score":	999649,
			"second_score":	120047
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6020,
			"primary_score":	999649,
			"second_score":	120046
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6023,
			"primary_score":	999649,
			"second_score":	120033
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6024,
			"primary_score":	999649,
			"second_score":	120007
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6025,
			"primary_score":	999649,
			"second_score":	120006
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10190,
			"primary_score":	999649,
			"second_score":	121851
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10191,
			"primary_score":	999649,
			"second_score":	121850
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10192,
			"primary_score":	999649,
			"second_score":	121849
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10193,
			"primary_score":	999649,
			"second_score":	121848
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10195,
			"primary_score":	999649,
			"second_score":	121847
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10196,
			"primary_score":	999649,
			"second_score":	121846
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10198,
			"primary_score":	999649,
			"second_score":	121835
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10205,
			"primary_score":	999649,
			"second_score":	121834
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10208,
			"primary_score":	999649,
			"second_score":	121770
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10209,
			"primary_score":	999649,
			"second_score":	121716
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10210,
			"primary_score":	999649,
			"second_score":	121715
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10223,
			"primary_score":	999649,
			"second_score":	121112
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10224,
			"primary_score":	999649,
			"second_score":	121111
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10225,
			"primary_score":	999649,
			"second_score":	121110
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10226,
			"primary_score":	999649,
			"second_score":	121109
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10228,
			"primary_score":	999649,
			"second_score":	121108
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10229,
			"primary_score":	999649,
			"second_score":	121107
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10231,
			"primary_score":	999649,
			"second_score":	121096
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10234,
			"primary_score":	999649,
			"second_score":	121095
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10235,
			"primary_score":	999649,
			"second_score":	121090
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10236,
			"primary_score":	999649,
			"second_score":	121059
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10240,
			"primary_score":	999649,
			"second_score":	121058
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10248,
			"primary_score":	999649,
			"second_score":	121057
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10531,
			"primary_score":	999649,
			"second_score":	123506
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10532,
			"primary_score":	999649,
			"second_score":	123505
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10533,
			"primary_score":	999649,
			"second_score":	123504
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10534,
			"primary_score":	999649,
			"second_score":	123503
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10536,
			"primary_score":	999649,
			"second_score":	123492
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10540,
			"primary_score":	999649,
			"second_score":	123491
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10549,
			"primary_score":	999649,
			"second_score":	123489
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10550,
			"primary_score":	999649,
			"second_score":	123487
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10551,
			"primary_score":	999649,
			"second_score":	123483
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10553,
			"primary_score":	999649,
			"second_score":	123449
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10554,
			"primary_score":	999649,
			"second_score":	123448
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10559,
			"primary_score":	999649,
			"second_score":	123513
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10560,
			"primary_score":	999649,
			"second_score":	123512
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10561,
			"primary_score":	999649,
			"second_score":	123511
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10563,
			"primary_score":	999649,
			"second_score":	123510
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10564,
			"primary_score":	999649,
			"second_score":	123509
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10565,
			"primary_score":	999649,
			"second_score":	123508
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10566,
			"primary_score":	999649,
			"second_score":	123507
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10673,
			"primary_score":	999892,
			"second_score":	125549
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10675,
			"primary_score":	999892,
			"second_score":	125548
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10676,
			"primary_score":	999892,
			"second_score":	125547
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10677,
			"primary_score":	999892,
			"second_score":	119996
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10678,
			"primary_score":	999892,
			"second_score":	119995
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10942,
			"primary_score":	1000000,
			"second_score":	252513
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10943,
			"primary_score":	1000000,
			"second_score":	252512
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10944,
			"primary_score":	1000000,
			"second_score":	252511
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10945,
			"primary_score":	1000000,
			"second_score":	252510
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10946,
			"primary_score":	1000000,
			"second_score":	252509
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10947,
			"primary_score":	1000000,
			"second_score":	252508
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10948,
			"primary_score":	1000000,
			"second_score":	252507
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10950,
			"primary_score":	1000000,
			"second_score":	252506
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10952,
			"primary_score":	1000000,
			"second_score":	252505
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10981,
			"primary_score":	1000000,
			"second_score":	252504
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10982,
			"primary_score":	1000000,
			"second_score":	252493
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10994,
			"primary_score":	1000000,
			"second_score":	252492
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10999,
			"primary_score":	1000000,
			"second_score":	252491
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11010,
			"primary_score":	1000000,
			"second_score":	252488
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11014,
			"primary_score":	1000000,
			"second_score":	252486
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11029,
			"primary_score":	1000000,
			"second_score":	252485
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11031,
			"primary_score":	1000000,
			"second_score":	252484
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11048,
			"primary_score":	1000000,
			"second_score":	252483
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11049,
			"primary_score":	1000000,
			"second_score":	252482
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11050,
			"primary_score":	1000000,
			"second_score":	252478
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11067,
			"primary_score":	1000000,
			"second_score":	252477
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11068,
			"primary_score":	1000000,
			"second_score":	252470
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11074,
			"primary_score":	1000000,
			"second_score":	252465
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11075,
			"primary_score":	1000000,
			"second_score":	252433
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11078,
			"primary_score":	1000000,
			"second_score":	252432
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11079,
			"primary_score":	1000000,
			"second_score":	252431
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11085,
			"primary_score":	999892,
			"second_score":	125578
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11087,
			"primary_score":	999892,
			"second_score":	125577
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11088,
			"primary_score":	999892,
			"second_score":	125576
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11089,
			"primary_score":	999892,
			"second_score":	125575
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11090,
			"primary_score":	999892,
			"second_score":	125574
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11091,
			"primary_score":	999892,
			"second_score":	125573
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11092,
			"primary_score":	999892,
			"second_score":	125572
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11093,
			"primary_score":	999892,
			"second_score":	125571
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11094,
			"primary_score":	999892,
			"second_score":	125570
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11095,
			"primary_score":	999892,
			"second_score":	125569
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11097,
			"primary_score":	999892,
			"second_score":	125568
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11099,
			"primary_score":	999892,
			"second_score":	125567
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11134,
			"primary_score":	999892,
			"second_score":	125564
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11135,
			"primary_score":	999892,
			"second_score":	125560
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11137,
			"primary_score":	999892,
			"second_score":	125554
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11139,
			"primary_score":	999892,
			"second_score":	126577
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11140,
			"primary_score":	999966,
			"second_score":	126576
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11142,
			"primary_score":	999892,
			"second_score":	126568
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11143,
			"primary_score":	999892,
			"second_score":	126562
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11144,
			"primary_score":	999892,
			"second_score":	126557
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11190,
			"primary_score":	999892,
			"second_score":	126556
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11196,
			"primary_score":	999892,
			"second_score":	126555
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11197,
			"primary_score":	999892,
			"second_score":	126553
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11200,
			"primary_score":	999892,
			"second_score":	126549
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11201,
			"primary_score":	999966,
			"second_score":	126548
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11203,
			"primary_score":	999966,
			"second_score":	126547
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11211,
			"primary_score":	999997,
			"second_score":	126546
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11212,
			"primary_score":	999997,
			"second_score":	126545
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11220,
			"primary_score":	999892,
			"second_score":	126544
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11221,
			"primary_score":	999892,
			"second_score":	126543
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11222,
			"primary_score":	999892,
			"second_score":	126542
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11273,
			"primary_score":	999649,
			"second_score":	120171
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11274,
			"primary_score":	999649,
			"second_score":	120170
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11275,
			"primary_score":	999649,
			"second_score":	120169
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11277,
			"primary_score":	999649,
			"second_score":	120168
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11278,
			"primary_score":	999649,
			"second_score":	120167
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11280,
			"primary_score":	999649,
			"second_score":	120156
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11281,
			"primary_score":	999649,
			"second_score":	120153
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11282,
			"primary_score":	999649,
			"second_score":	120152
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11284,
			"primary_score":	999649,
			"second_score":	120118
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11285,
			"primary_score":	999649,
			"second_score":	120064
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11286,
			"primary_score":	999649,
			"second_score":	120063
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	25895,
			"primary_score":	999996,
			"second_score":	126136
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	25897,
			"primary_score":	999996,
			"second_score":	126135
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	25898,
			"primary_score":	999996,
			"second_score":	126134
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	25900,
			"primary_score":	999996,
			"second_score":	126133
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	25901,
			"primary_score":	999996,
			"second_score":	126132
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	25903,
			"primary_score":	999996,
			"second_score":	126128
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	25910,
			"primary_score":	999996,
			"second_score":	126127
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	25913,
			"primary_score":	999996,
			"second_score":	125663
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	25914,
			"primary_score":	999996,
			"second_score":	125662
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30179,
			"primary_score":	999715,
			"second_score":	126486
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30180,
			"primary_score":	999715,
			"second_score":	126485
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30181,
			"primary_score":	999715,
			"second_score":	126484
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30182,
			"primary_score":	999715,
			"second_score":	126483
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30184,
			"primary_score":	999715,
			"second_score":	126482
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30185,
			"primary_score":	999715,
			"second_score":	126481
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30186,
			"primary_score":	999715,
			"second_score":	126479
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30188,
			"primary_score":	999715,
			"second_score":	126475
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30202,
			"primary_score":	999715,
			"second_score":	126474
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30211,
			"primary_score":	999715,
			"second_score":	126473
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30212,
			"primary_score":	999715,
			"second_score":	126472
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30218,
			"primary_score":	999715,
			"second_score":	126461
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30226,
			"primary_score":	999715,
			"second_score":	126460
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30227,
			"primary_score":	999715,
			"second_score":	126459
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32112,
			"primary_score":	999835,
			"second_score":	126538
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32113,
			"primary_score":	999835,
			"second_score":	126537
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32114,
			"primary_score":	999835,
			"second_score":	126536
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32115,
			"primary_score":	999835,
			"second_score":	126535
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32117,
			"primary_score":	999835,
			"second_score":	126534
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32118,
			"primary_score":	999835,
			"second_score":	126533
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32119,
			"primary_score":	999835,
			"second_score":	126522
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32121,
			"primary_score":	999835,
			"second_score":	126518
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32135,
			"primary_score":	999835,
			"second_score":	126517
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32144,
			"primary_score":	999835,
			"second_score":	126516
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32146,
			"primary_score":	999835,
			"second_score":	126515
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32149,
			"primary_score":	999835,
			"second_score":	126514
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32151,
			"primary_score":	999835,
			"second_score":	126494
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32158,
			"primary_score":	999835,
			"second_score":	126493
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32160,
			"primary_score":	999835,
			"second_score":	126491
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32161,
			"primary_score":	999835,
			"second_score":	126490
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	39418,
			"primary_score":	999649,
			"second_score":	427136
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	39437,
			"primary_score":	999649,
			"second_score":	427135
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	39442,
			"primary_score":	999649,
			"second_score":	427137
		}, {
			"file":	"ext/date/php_date.c",
			"line":	626,
			"primary_score":	999649,
			"second_score":	118912
		}, {
			"file":	"ext/date/php_date.c",
			"line":	629,
			"primary_score":	999649,
			"second_score":	118911
		}, {
			"file":	"ext/date/php_date.c",
			"line":	630,
			"primary_score":	999649,
			"second_score":	118910
		}, {
			"file":	"ext/date/php_date.c",
			"line":	635,
			"primary_score":	999649,
			"second_score":	118909
		}, {
			"file":	"ext/date/php_date.c",
			"line":	640,
			"primary_score":	999649,
			"second_score":	118908
		}, {
			"file":	"ext/date/php_date.c",
			"line":	789,
			"primary_score":	999649,
			"second_score":	53651
		}, {
			"file":	"ext/date/php_date.c",
			"line":	791,
			"primary_score":	999649,
			"second_score":	52972
		}, {
			"file":	"ext/date/php_date.c",
			"line":	795,
			"primary_score":	999649,
			"second_score":	52971
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	910,
			"primary_score":	999649,
			"second_score":	58715
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	911,
			"primary_score":	999649,
			"second_score":	58700
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	912,
			"primary_score":	999649,
			"second_score":	58685
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	913,
			"primary_score":	999649,
			"second_score":	58670
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	914,
			"primary_score":	999649,
			"second_score":	58451
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	915,
			"primary_score":	999649,
			"second_score":	58346
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	916,
			"primary_score":	999649,
			"second_score":	58289
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	917,
			"primary_score":	999649,
			"second_score":	58274
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	918,
			"primary_score":	999649,
			"second_score":	58259
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	919,
			"primary_score":	999649,
			"second_score":	58142
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	920,
			"primary_score":	999649,
			"second_score":	58007
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	921,
			"primary_score":	999649,
			"second_score":	57890
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	922,
			"primary_score":	999649,
			"second_score":	57767
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	923,
			"primary_score":	999649,
			"second_score":	57746
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	924,
			"primary_score":	999649,
			"second_score":	57701
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	925,
			"primary_score":	999649,
			"second_score":	57662
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	926,
			"primary_score":	999649,
			"second_score":	57521
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	927,
			"primary_score":	999649,
			"second_score":	57404
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	928,
			"primary_score":	999649,
			"second_score":	57263
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	930,
			"primary_score":	999649,
			"second_score":	57146
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	932,
			"primary_score":	999649,
			"second_score":	57131
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	939,
			"primary_score":	999649,
			"second_score":	56978
		}, {
			"file":	"ext/ereg/ereg.c",
			"line":	230,
			"primary_score":	999649,
			"second_score":	54036
		}, {
			"file":	"ext/filter/filter.c",
			"line":	287,
			"primary_score":	999649,
			"second_score":	60123
		}, {
			"file":	"ext/filter/filter.c",
			"line":	289,
			"primary_score":	999649,
			"second_score":	59482
		}, {
			"file":	"ext/filter/filter.c",
			"line":	303,
			"primary_score":	999649,
			"second_score":	119405
		}, {
			"file":	"ext/filter/filter.c",
			"line":	304,
			"primary_score":	999649,
			"second_score":	119404
		}, {
			"file":	"ext/filter/filter.c",
			"line":	305,
			"primary_score":	999649,
			"second_score":	119403
		}, {
			"file":	"ext/filter/filter.c",
			"line":	306,
			"primary_score":	999649,
			"second_score":	119402
		}, {
			"file":	"ext/filter/filter.c",
			"line":	307,
			"primary_score":	999649,
			"second_score":	118934
		}, {
			"file":	"ext/filter/filter.c",
			"line":	308,
			"primary_score":	999649,
			"second_score":	118933
		}, {
			"file":	"ext/filter/filter.c",
			"line":	309,
			"primary_score":	999649,
			"second_score":	118932
		}, {
			"file":	"ext/hash/hash.c",
			"line":	889,
			"primary_score":	999649,
			"second_score":	61002
		}, {
			"file":	"ext/hash/hash.c",
			"line":	891,
			"primary_score":	999649,
			"second_score":	60723
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	289,
			"primary_score":	999649,
			"second_score":	62329
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	290,
			"primary_score":	999649,
			"second_score":	62278
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	291,
			"primary_score":	999649,
			"second_score":	61595
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	2852,
			"primary_score":	999649,
			"second_score":	62328
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	2856,
			"primary_score":	999649,
			"second_score":	62279
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	581,
			"primary_score":	999649,
			"second_score":	54480
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	583,
			"primary_score":	999649,
			"second_score":	54479
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	585,
			"primary_score":	999649,
			"second_score":	54478
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	586,
			"primary_score":	999649,
			"second_score":	54477
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	587,
			"primary_score":	999649,
			"second_score":	54458
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	683,
			"primary_score":	999649,
			"second_score":	54482
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	690,
			"primary_score":	999649,
			"second_score":	54481
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	692,
			"primary_score":	999649,
			"second_score":	54457
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	699,
			"primary_score":	999649,
			"second_score":	118928
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	700,
			"primary_score":	999649,
			"second_score":	118927
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	701,
			"primary_score":	999649,
			"second_score":	118926
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	703,
			"primary_score":	999649,
			"second_score":	118925
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	704,
			"primary_score":	999649,
			"second_score":	118924
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	707,
			"primary_score":	999649,
			"second_score":	118923
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	711,
			"primary_score":	999649,
			"second_score":	118922
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	712,
			"primary_score":	999649,
			"second_score":	118918
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	717,
			"primary_score":	999649,
			"second_score":	118917
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	719,
			"primary_score":	999649,
			"second_score":	118916
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	113,
			"primary_score":	999649,
			"second_score":	55002
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	163,
			"primary_score":	999649,
			"second_score":	55630
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	165,
			"primary_score":	999649,
			"second_score":	55006
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	199,
			"primary_score":	999649,
			"second_score":	64848
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	203,
			"primary_score":	999649,
			"second_score":	64829
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	389,
			"primary_score":	999649,
			"second_score":	64749
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	390,
			"primary_score":	999649,
			"second_score":	64740
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	391,
			"primary_score":	999649,
			"second_score":	63400
		}, {
			"file":	"ext/pdo/pdo_sqlstate.c",
			"line":	309,
			"primary_score":	999649,
			"second_score":	64739
		}, {
			"file":	"ext/pdo_sqlite/pdo_sqlite.c",
			"line":	87,
			"primary_score":	999649,
			"second_score":	64849
		}, {
			"file":	"ext/pdo_sqlite/pdo_sqlite.c",
			"line":	88,
			"primary_score":	999649,
			"second_score":	64791
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1102,
			"primary_score":	999649,
			"second_score":	99178
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1104,
			"primary_score":	999649,
			"second_score":	99177
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1105,
			"primary_score":	999649,
			"second_score":	99152
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1106,
			"primary_score":	999649,
			"second_score":	99115
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1107,
			"primary_score":	999649,
			"second_score":	99088
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1108,
			"primary_score":	999649,
			"second_score":	99062
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1109,
			"primary_score":	999649,
			"second_score":	99035
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1110,
			"primary_score":	999649,
			"second_score":	99004
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1111,
			"primary_score":	999649,
			"second_score":	98975
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1112,
			"primary_score":	999649,
			"second_score":	98946
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1113,
			"primary_score":	999649,
			"second_score":	98918
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1114,
			"primary_score":	999649,
			"second_score":	98889
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1115,
			"primary_score":	999649,
			"second_score":	98860
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1116,
			"primary_score":	999649,
			"second_score":	98831
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1117,
			"primary_score":	999649,
			"second_score":	98802
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1118,
			"primary_score":	999649,
			"second_score":	98773
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1119,
			"primary_score":	999649,
			"second_score":	98745
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1120,
			"primary_score":	999649,
			"second_score":	98714
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1121,
			"primary_score":	999649,
			"second_score":	98683
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1122,
			"primary_score":	999649,
			"second_score":	98650
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1123,
			"primary_score":	999649,
			"second_score":	98625
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1124,
			"primary_score":	999649,
			"second_score":	98601
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1125,
			"primary_score":	999649,
			"second_score":	98571
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3332,
			"primary_score":	999649,
			"second_score":	442846
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3333,
			"primary_score":	999649,
			"second_score":	442845
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3334,
			"primary_score":	999649,
			"second_score":	442844
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3335,
			"primary_score":	999649,
			"second_score":	442843
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3337,
			"primary_score":	999649,
			"second_score":	442842
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3340,
			"primary_score":	999649,
			"second_score":	442841
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3389,
			"primary_score":	999649,
			"second_score":	442840
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3390,
			"primary_score":	999649,
			"second_score":	442834
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3391,
			"primary_score":	999649,
			"second_score":	442833
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3394,
			"primary_score":	999649,
			"second_score":	427078
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3396,
			"primary_score":	999649,
			"second_score":	427076
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3400,
			"primary_score":	999649,
			"second_score":	427075
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3404,
			"primary_score":	999649,
			"second_score":	427074
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3527,
			"primary_score":	999649,
			"second_score":	98563
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3557,
			"primary_score":	999649,
			"second_score":	99216
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3559,
			"primary_score":	999649,
			"second_score":	99179
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3561,
			"primary_score":	999649,
			"second_score":	98570
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3562,
			"primary_score":	999649,
			"second_score":	98569
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3570,
			"primary_score":	999649,
			"second_score":	98568
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3575,
			"primary_score":	999649,
			"second_score":	98567
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3617,
			"primary_score":	999649,
			"second_score":	119493
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3619,
			"primary_score":	999649,
			"second_score":	119492
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3621,
			"primary_score":	999649,
			"second_score":	119491
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3657,
			"primary_score":	999649,
			"second_score":	119490
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3658,
			"primary_score":	999649,
			"second_score":	119489
		}, {
			"file":	"ext/session/session.c",
			"line":	93,
			"primary_score":	999649,
			"second_score":	119426
		}, {
			"file":	"ext/session/session.c",
			"line":	98,
			"primary_score":	999649,
			"second_score":	119425
		}, {
			"file":	"ext/session/session.c",
			"line":	103,
			"primary_score":	999649,
			"second_score":	119424
		}, {
			"file":	"ext/session/session.c",
			"line":	1441,
			"primary_score":	999649,
			"second_score":	119428
		}, {
			"file":	"ext/session/session.c",
			"line":	1958,
			"primary_score":	999649,
			"second_score":	119430
		}, {
			"file":	"ext/session/session.c",
			"line":	1960,
			"primary_score":	999649,
			"second_score":	119429
		}, {
			"file":	"ext/session/session.c",
			"line":	1961,
			"primary_score":	999649,
			"second_score":	119427
		}, {
			"file":	"ext/session/session.c",
			"line":	1964,
			"primary_score":	999649,
			"second_score":	119423
		}, {
			"file":	"ext/session/session.c",
			"line":	1965,
			"primary_score":	999649,
			"second_score":	119417
		}, {
			"file":	"ext/session/session.c",
			"line":	1971,
			"primary_score":	999649,
			"second_score":	119416
		}, {
			"file":	"ext/session/session.c",
			"line":	2013,
			"primary_score":	999649,
			"second_score":	67308
		}, {
			"file":	"ext/session/session.c",
			"line":	2019,
			"primary_score":	999649,
			"second_score":	65876
		}, {
			"file":	"ext/session/session.c",
			"line":	2020,
			"primary_score":	999649,
			"second_score":	65875
		}, {
			"file":	"ext/session/session.c",
			"line":	2022,
			"primary_score":	999649,
			"second_score":	65874
		}, {
			"file":	"ext/simplexml/simplexml.c",
			"line":	2600,
			"primary_score":	999649,
			"second_score":	98275
		}, {
			"file":	"ext/simplexml/simplexml.c",
			"line":	2601,
			"primary_score":	999649,
			"second_score":	98274
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	1018,
			"primary_score":	999649,
			"second_score":	119412
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	1023,
			"primary_score":	999649,
			"second_score":	119411
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	1028,
			"primary_score":	999649,
			"second_score":	119410
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	1031,
			"primary_score":	999649,
			"second_score":	119409
		}, {
			"file":	"ext/sqlite3/sqlite3.c",
			"line":	2140,
			"primary_score":	999649,
			"second_score":	56274
		}, {
			"file":	"ext/sqlite3/sqlite3.c",
			"line":	2142,
			"primary_score":	999649,
			"second_score":	55665
		}, {
			"file":	"ext/standard/array.c",
			"line":	138,
			"primary_score":	999649,
			"second_score":	97853
		}, {
			"file":	"ext/standard/array.c",
			"line":	1617,
			"primary_score":	999995,
			"second_score":	264658
		}, {
			"file":	"ext/standard/array.c",
			"line":	1618,
			"primary_score":	999995,
			"second_score":	264657
		}, {
			"file":	"ext/standard/array.c",
			"line":	1619,
			"primary_score":	999995,
			"second_score":	264656
		}, {
			"file":	"ext/standard/array.c",
			"line":	1621,
			"primary_score":	999995,
			"second_score":	264655
		}, {
			"file":	"ext/standard/array.c",
			"line":	1625,
			"primary_score":	999995,
			"second_score":	264505
		}, {
			"file":	"ext/standard/array.c",
			"line":	1626,
			"primary_score":	999998,
			"second_score":	264504
		}, {
			"file":	"ext/standard/array.c",
			"line":	1629,
			"primary_score":	1000000,
			"second_score":	264503
		}, {
			"file":	"ext/standard/array.c",
			"line":	1632,
			"primary_score":	999998,
			"second_score":	264502
		}, {
			"file":	"ext/standard/array.c",
			"line":	1633,
			"primary_score":	999998,
			"second_score":	264500
		}, {
			"file":	"ext/standard/array.c",
			"line":	1636,
			"primary_score":	999998,
			"second_score":	264499
		}, {
			"file":	"ext/standard/array.c",
			"line":	1642,
			"primary_score":	999995,
			"second_score":	264498
		}, {
			"file":	"ext/standard/array.c",
			"line":	1645,
			"primary_score":	999995,
			"second_score":	264455
		}, {
			"file":	"ext/standard/array.c",
			"line":	1646,
			"primary_score":	999998,
			"second_score":	264454
		}, {
			"file":	"ext/standard/array.c",
			"line":	1647,
			"primary_score":	999998,
			"second_score":	264453
		}, {
			"file":	"ext/standard/array.c",
			"line":	1648,
			"primary_score":	999998,
			"second_score":	264452
		}, {
			"file":	"ext/standard/array.c",
			"line":	1650,
			"primary_score":	999998,
			"second_score":	264451
		}, {
			"file":	"ext/standard/array.c",
			"line":	1651,
			"primary_score":	999998,
			"second_score":	264422
		}, {
			"file":	"ext/standard/array.c",
			"line":	1653,
			"primary_score":	999998,
			"second_score":	264391
		}, {
			"file":	"ext/standard/array.c",
			"line":	1654,
			"primary_score":	1000000,
			"second_score":	264390
		}, {
			"file":	"ext/standard/array.c",
			"line":	1694,
			"primary_score":	999995,
			"second_score":	426132
		}, {
			"file":	"ext/standard/array.c",
			"line":	1695,
			"primary_score":	999999,
			"second_score":	426131
		}, {
			"file":	"ext/standard/array.c",
			"line":	1696,
			"primary_score":	999999,
			"second_score":	426130
		}, {
			"file":	"ext/standard/array.c",
			"line":	1698,
			"primary_score":	999999,
			"second_score":	264341
		}, {
			"file":	"ext/standard/array.c",
			"line":	1699,
			"primary_score":	999999,
			"second_score":	264291
		}, {
			"file":	"ext/standard/array.c",
			"line":	1700,
			"primary_score":	999999,
			"second_score":	264290
		}, {
			"file":	"ext/standard/array.c",
			"line":	1702,
			"primary_score":	999999,
			"second_score":	264289
		}, {
			"file":	"ext/standard/array.c",
			"line":	1710,
			"primary_score":	999999,
			"second_score":	264288
		}, {
			"file":	"ext/standard/array.c",
			"line":	1711,
			"primary_score":	999999,
			"second_score":	264287
		}, {
			"file":	"ext/standard/array.c",
			"line":	1715,
			"primary_score":	999999,
			"second_score":	264286
		}, {
			"file":	"ext/standard/array.c",
			"line":	1716,
			"primary_score":	999999,
			"second_score":	252808
		}, {
			"file":	"ext/standard/array.c",
			"line":	1751,
			"primary_score":	999995,
			"second_score":	252625
		}, {
			"file":	"ext/standard/assert.c",
			"line":	114,
			"primary_score":	999649,
			"second_score":	97851
		}, {
			"file":	"ext/standard/assert.c",
			"line":	118,
			"primary_score":	999649,
			"second_score":	97850
		}, {
			"file":	"ext/standard/assert.c",
			"line":	124,
			"primary_score":	999649,
			"second_score":	119464
		}, {
			"file":	"ext/standard/assert.c",
			"line":	129,
			"primary_score":	999649,
			"second_score":	119463
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3470,
			"primary_score":	999649,
			"second_score":	98047
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3471,
			"primary_score":	999649,
			"second_score":	98046
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3472,
			"primary_score":	999649,
			"second_score":	98007
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3645,
			"primary_score":	999649,
			"second_score":	98051
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3653,
			"primary_score":	999649,
			"second_score":	98048
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3659,
			"primary_score":	999649,
			"second_score":	98006
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3661,
			"primary_score":	999649,
			"second_score":	97965
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3662,
			"primary_score":	999649,
			"second_score":	97927
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3665,
			"primary_score":	999649,
			"second_score":	97890
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3666,
			"primary_score":	999649,
			"second_score":	97854
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3667,
			"primary_score":	999649,
			"second_score":	97852
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3668,
			"primary_score":	999649,
			"second_score":	97849
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3669,
			"primary_score":	999649,
			"second_score":	96772
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3670,
			"primary_score":	999649,
			"second_score":	96769
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3675,
			"primary_score":	999649,
			"second_score":	96447
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3678,
			"primary_score":	999649,
			"second_score":	96444
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3726,
			"primary_score":	999649,
			"second_score":	119485
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3729,
			"primary_score":	999649,
			"second_score":	119484
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3730,
			"primary_score":	999649,
			"second_score":	119483
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3732,
			"primary_score":	999649,
			"second_score":	119482
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3735,
			"primary_score":	999649,
			"second_score":	119474
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3741,
			"primary_score":	999649,
			"second_score":	119473
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3746,
			"primary_score":	999649,
			"second_score":	119472
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3747,
			"primary_score":	999649,
			"second_score":	119470
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3752,
			"primary_score":	999649,
			"second_score":	119469
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3758,
			"primary_score":	999649,
			"second_score":	119465
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3759,
			"primary_score":	999649,
			"second_score":	119462
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3760,
			"primary_score":	999649,
			"second_score":	119451
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3765,
			"primary_score":	999649,
			"second_score":	119440
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3771,
			"primary_score":	999649,
			"second_score":	119439
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3773,
			"primary_score":	999649,
			"second_score":	119436
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3774,
			"primary_score":	999649,
			"second_score":	119435
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3775,
			"primary_score":	999649,
			"second_score":	119434
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4526,
			"primary_score":	999649,
			"second_score":	122707
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4527,
			"primary_score":	999649,
			"second_score":	122706
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4528,
			"primary_score":	999649,
			"second_score":	122705
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4530,
			"primary_score":	999649,
			"second_score":	122704
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4534,
			"primary_score":	999649,
			"second_score":	122637
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4536,
			"primary_score":	999649,
			"second_score":	122606
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4545,
			"primary_score":	999649,
			"second_score":	122605
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5006,
			"primary_score":	999649,
			"second_score":	119651
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5018,
			"primary_score":	999649,
			"second_score":	118903
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5024,
			"primary_score":	999649,
			"second_score":	118902
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	234,
			"primary_score":	999649,
			"second_score":	97889
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	235,
			"primary_score":	999649,
			"second_score":	97856
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	238,
			"primary_score":	999649,
			"second_score":	97855
		}, {
			"file":	"ext/standard/crypt.c",
			"line":	130,
			"primary_score":	999649,
			"second_score":	96446
		}, {
			"file":	"ext/standard/crypt.c",
			"line":	133,
			"primary_score":	999649,
			"second_score":	96445
		}, {
			"file":	"ext/standard/file.c",
			"line":	318,
			"primary_score":	999649,
			"second_score":	96771
		}, {
			"file":	"ext/standard/file.c",
			"line":	320,
			"primary_score":	999649,
			"second_score":	96770
		}, {
			"file":	"ext/standard/file.c",
			"line":	2342,
			"primary_score":	999649,
			"second_score":	122401
		}, {
			"file":	"ext/standard/file.c",
			"line":	2343,
			"primary_score":	999649,
			"second_score":	122400
		}, {
			"file":	"ext/standard/file.c",
			"line":	2344,
			"primary_score":	999649,
			"second_score":	122399
		}, {
			"file":	"ext/standard/file.c",
			"line":	2346,
			"primary_score":	999649,
			"second_score":	122398
		}, {
			"file":	"ext/standard/file.c",
			"line":	2350,
			"primary_score":	999649,
			"second_score":	122288
		}, {
			"file":	"ext/standard/file.c",
			"line":	2351,
			"primary_score":	999649,
			"second_score":	122043
		}, {
			"file":	"ext/standard/file.c",
			"line":	2360,
			"primary_score":	999649,
			"second_score":	122039
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	110,
			"primary_score":	999649,
			"second_score":	119468
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	114,
			"primary_score":	999649,
			"second_score":	119467
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	118,
			"primary_score":	999649,
			"second_score":	119466
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2148,
			"primary_score":	999649,
			"second_score":	96768
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2150,
			"primary_score":	999649,
			"second_score":	96767
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2151,
			"primary_score":	999649,
			"second_score":	96488
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2153,
			"primary_score":	999649,
			"second_score":	96448
		}, {
			"file":	"ext/standard/head.c",
			"line":	68,
			"primary_score":	999649,
			"second_score":	397205
		}, {
			"file":	"ext/standard/head.c",
			"line":	71,
			"primary_score":	999649,
			"second_score":	397067
		}, {
			"file":	"ext/standard/info.c",
			"line":	527,
			"primary_score":	999649,
			"second_score":	123923
		}, {
			"file":	"ext/standard/info.c",
			"line":	528,
			"primary_score":	999649,
			"second_score":	123922
		}, {
			"file":	"ext/standard/info.c",
			"line":	577,
			"primary_score":	999649,
			"second_score":	123921
		}, {
			"file":	"ext/standard/info.c",
			"line":	578,
			"primary_score":	999649,
			"second_score":	123920
		}, {
			"file":	"ext/standard/info.c",
			"line":	605,
			"primary_score":	999649,
			"second_score":	123919
		}, {
			"file":	"ext/standard/info.c",
			"line":	607,
			"primary_score":	999649,
			"second_score":	123918
		}, {
			"file":	"ext/standard/info.c",
			"line":	609,
			"primary_score":	999649,
			"second_score":	123917
		}, {
			"file":	"ext/standard/info.c",
			"line":	611,
			"primary_score":	999649,
			"second_score":	123916
		}, {
			"file":	"ext/standard/info.c",
			"line":	613,
			"primary_score":	999649,
			"second_score":	123915
		}, {
			"file":	"ext/standard/info.c",
			"line":	616,
			"primary_score":	999649,
			"second_score":	123914
		}, {
			"file":	"ext/standard/info.c",
			"line":	619,
			"primary_score":	999649,
			"second_score":	123213
		}, {
			"file":	"ext/standard/info.c",
			"line":	627,
			"primary_score":	999649,
			"second_score":	123212
		}, {
			"file":	"ext/standard/info.c",
			"line":	1153,
			"primary_score":	999649,
			"second_score":	124872
		}, {
			"file":	"ext/standard/info.c",
			"line":	1154,
			"primary_score":	999649,
			"second_score":	124871
		}, {
			"file":	"ext/standard/info.c",
			"line":	1156,
			"primary_score":	999649,
			"second_score":	124870
		}, {
			"file":	"ext/standard/info.c",
			"line":	1160,
			"primary_score":	999649,
			"second_score":	124832
		}, {
			"file":	"ext/standard/info.c",
			"line":	1161,
			"primary_score":	999649,
			"second_score":	124831
		}, {
			"file":	"ext/standard/info.c",
			"line":	1280,
			"primary_score":	999649,
			"second_score":	123966
		}, {
			"file":	"ext/standard/info.c",
			"line":	1281,
			"primary_score":	999649,
			"second_score":	123965
		}, {
			"file":	"ext/standard/info.c",
			"line":	1283,
			"primary_score":	999649,
			"second_score":	123964
		}, {
			"file":	"ext/standard/info.c",
			"line":	1286,
			"primary_score":	999649,
			"second_score":	123926
		}, {
			"file":	"ext/standard/info.c",
			"line":	1295,
			"primary_score":	999649,
			"second_score":	120853
		}, {
			"file":	"ext/standard/info.c",
			"line":	1299,
			"primary_score":	999649,
			"second_score":	120820
		}, {
			"file":	"ext/standard/info.c",
			"line":	1302,
			"primary_score":	999649,
			"second_score":	120819
		}, {
			"file":	"ext/standard/string.c",
			"line":	1058,
			"primary_score":	999649,
			"second_score":	123151
		}, {
			"file":	"ext/standard/string.c",
			"line":	1059,
			"primary_score":	999649,
			"second_score":	123150
		}, {
			"file":	"ext/standard/string.c",
			"line":	1060,
			"primary_score":	999649,
			"second_score":	123149
		}, {
			"file":	"ext/standard/string.c",
			"line":	1061,
			"primary_score":	999649,
			"second_score":	123148
		}, {
			"file":	"ext/standard/string.c",
			"line":	1062,
			"primary_score":	999649,
			"second_score":	123147
		}, {
			"file":	"ext/standard/string.c",
			"line":	1063,
			"primary_score":	999649,
			"second_score":	123146
		}, {
			"file":	"ext/standard/string.c",
			"line":	1065,
			"primary_score":	999649,
			"second_score":	123145
		}, {
			"file":	"ext/standard/string.c",
			"line":	1067,
			"primary_score":	999649,
			"second_score":	123142
		}, {
			"file":	"ext/standard/string.c",
			"line":	1071,
			"primary_score":	999649,
			"second_score":	123141
		}, {
			"file":	"ext/standard/string.c",
			"line":	1073,
			"primary_score":	999649,
			"second_score":	123137
		}, {
			"file":	"ext/standard/string.c",
			"line":	1074,
			"primary_score":	999649,
			"second_score":	122128
		}, {
			"file":	"ext/standard/string.c",
			"line":	1076,
			"primary_score":	999649,
			"second_score":	123125
		}, {
			"file":	"ext/standard/string.c",
			"line":	1077,
			"primary_score":	999649,
			"second_score":	122119
		}, {
			"file":	"ext/standard/string.c",
			"line":	1124,
			"primary_score":	999649,
			"second_score":	122118
		}, {
			"file":	"ext/standard/string.c",
			"line":	1125,
			"primary_score":	999649,
			"second_score":	122149
		}, {
			"file":	"ext/standard/string.c",
			"line":	1127,
			"primary_score":	999649,
			"second_score":	122117
		}, {
			"file":	"ext/standard/string.c",
			"line":	1129,
			"primary_score":	999649,
			"second_score":	122106
		}, {
			"file":	"ext/standard/string.c",
			"line":	1131,
			"primary_score":	999649,
			"second_score":	122103
		}, {
			"file":	"ext/standard/string.c",
			"line":	1132,
			"primary_score":	999649,
			"second_score":	122102
		}, {
			"file":	"ext/standard/string.c",
			"line":	1144,
			"primary_score":	999649,
			"second_score":	123252
		}, {
			"file":	"ext/standard/string.c",
			"line":	1146,
			"primary_score":	999649,
			"second_score":	123251
		}, {
			"file":	"ext/standard/string.c",
			"line":	1150,
			"primary_score":	999649,
			"second_score":	123159
		}, {
			"file":	"ext/standard/string.c",
			"line":	1163,
			"primary_score":	999649,
			"second_score":	123158
		}, {
			"file":	"ext/standard/string.c",
			"line":	1167,
			"primary_score":	999649,
			"second_score":	123157
		}, {
			"file":	"ext/standard/string.c",
			"line":	1168,
			"primary_score":	999649,
			"second_score":	123156
		}, {
			"file":	"ext/standard/string.c",
			"line":	1169,
			"primary_score":	999649,
			"second_score":	123155
		}, {
			"file":	"ext/standard/string.c",
			"line":	1170,
			"primary_score":	999649,
			"second_score":	123153
		}, {
			"file":	"ext/standard/string.c",
			"line":	1177,
			"primary_score":	999649,
			"second_score":	123152
		}, {
			"file":	"ext/standard/string.c",
			"line":	1179,
			"primary_score":	999649,
			"second_score":	122093
		}, {
			"file":	"ext/standard/string.c",
			"line":	3536,
			"primary_score":	999649,
			"second_score":	120399
		}, {
			"file":	"ext/standard/string.c",
			"line":	3539,
			"primary_score":	999649,
			"second_score":	120398
		}, {
			"file":	"ext/standard/string.c",
			"line":	3540,
			"primary_score":	999649,
			"second_score":	120397
		}, {
			"file":	"ext/standard/string.c",
			"line":	3543,
			"primary_score":	999649,
			"second_score":	120396
		}, {
			"file":	"ext/standard/string.c",
			"line":	3544,
			"primary_score":	999649,
			"second_score":	120351
		}, {
			"file":	"ext/standard/string.c",
			"line":	3545,
			"primary_score":	999649,
			"second_score":	120350
		}, {
			"file":	"ext/standard/string.c",
			"line":	3546,
			"primary_score":	999649,
			"second_score":	120349
		}, {
			"file":	"ext/standard/string.c",
			"line":	3547,
			"primary_score":	999649,
			"second_score":	120315
		}, {
			"file":	"ext/standard/string.c",
			"line":	3647,
			"primary_score":	999649,
			"second_score":	120544
		}, {
			"file":	"ext/standard/string.c",
			"line":	3648,
			"primary_score":	999649,
			"second_score":	120543
		}, {
			"file":	"ext/standard/string.c",
			"line":	3649,
			"primary_score":	999649,
			"second_score":	120542
		}, {
			"file":	"ext/standard/string.c",
			"line":	3650,
			"primary_score":	999649,
			"second_score":	120541
		}, {
			"file":	"ext/standard/string.c",
			"line":	3651,
			"primary_score":	999649,
			"second_score":	120540
		}, {
			"file":	"ext/standard/string.c",
			"line":	3652,
			"primary_score":	999649,
			"second_score":	120539
		}, {
			"file":	"ext/standard/string.c",
			"line":	3653,
			"primary_score":	999649,
			"second_score":	120538
		}, {
			"file":	"ext/standard/string.c",
			"line":	3655,
			"primary_score":	999649,
			"second_score":	120537
		}, {
			"file":	"ext/standard/string.c",
			"line":	3659,
			"primary_score":	999649,
			"second_score":	120415
		}, {
			"file":	"ext/standard/string.c",
			"line":	3660,
			"primary_score":	999649,
			"second_score":	120412
		}, {
			"file":	"ext/standard/string.c",
			"line":	3661,
			"primary_score":	999649,
			"second_score":	120409
		}, {
			"file":	"ext/standard/string.c",
			"line":	3664,
			"primary_score":	999649,
			"second_score":	120406
		}, {
			"file":	"ext/standard/string.c",
			"line":	3665,
			"primary_score":	999649,
			"second_score":	120405
		}, {
			"file":	"ext/standard/string.c",
			"line":	3666,
			"primary_score":	999649,
			"second_score":	120403
		}, {
			"file":	"ext/standard/string.c",
			"line":	3672,
			"primary_score":	999649,
			"second_score":	120401
		}, {
			"file":	"ext/standard/string.c",
			"line":	3703,
			"primary_score":	999649,
			"second_score":	120400
		}, {
			"file":	"ext/standard/string.c",
			"line":	3705,
			"primary_score":	999649,
			"second_score":	120314
		}, {
			"file":	"ext/standard/string.c",
			"line":	3716,
			"primary_score":	999649,
			"second_score":	120545
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	121,
			"primary_score":	999649,
			"second_score":	98050
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	125,
			"primary_score":	999649,
			"second_score":	98049
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1083,
			"primary_score":	999649,
			"second_score":	97848
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1085,
			"primary_score":	999649,
			"second_score":	96773
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1097,
			"primary_score":	999649,
			"second_score":	119461
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1102,
			"primary_score":	999649,
			"second_score":	119460
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1103,
			"primary_score":	999649,
			"second_score":	119456
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1105,
			"primary_score":	999649,
			"second_score":	119452
		}, {
			"file":	"ext/standard/user_filters.c",
			"line":	129,
			"primary_score":	999649,
			"second_score":	119438
		}, {
			"file":	"ext/standard/user_filters.c",
			"line":	135,
			"primary_score":	999649,
			"second_score":	119437
		}, {
			"file":	"ext/xmlreader/php_xmlreader.c",
			"line":	1378,
			"primary_score":	999649,
			"second_score":	101061
		}, {
			"file":	"ext/xmlreader/php_xmlreader.c",
			"line":	1379,
			"primary_score":	999649,
			"second_score":	100968
		}, {
			"file":	"ext/xmlwriter/php_xmlwriter.c",
			"line":	1972,
			"primary_score":	999649,
			"second_score":	103751
		}, {
			"file":	"main/SAPI.c",
			"line":	69,
			"primary_score":	999649,
			"second_score":	3134
		}, {
			"file":	"main/SAPI.c",
			"line":	104,
			"primary_score":	999649,
			"second_score":	3135
		}, {
			"file":	"main/SAPI.c",
			"line":	107,
			"primary_score":	999649,
			"second_score":	3113
		}, {
			"file":	"main/SAPI.c",
			"line":	109,
			"primary_score":	999649,
			"second_score":	3112
		}, {
			"file":	"main/SAPI.c",
			"line":	119,
			"primary_score":	999649,
			"second_score":	397097
		}, {
			"file":	"main/SAPI.c",
			"line":	286,
			"primary_score":	999649,
			"second_score":	397197
		}, {
			"file":	"main/SAPI.c",
			"line":	287,
			"primary_score":	999649,
			"second_score":	397196
		}, {
			"file":	"main/SAPI.c",
			"line":	289,
			"primary_score":	999649,
			"second_score":	397195
		}, {
			"file":	"main/SAPI.c",
			"line":	290,
			"primary_score":	999649,
			"second_score":	397194
		}, {
			"file":	"main/SAPI.c",
			"line":	291,
			"primary_score":	999649,
			"second_score":	397193
		}, {
			"file":	"main/SAPI.c",
			"line":	296,
			"primary_score":	999649,
			"second_score":	397192
		}, {
			"file":	"main/SAPI.c",
			"line":	297,
			"primary_score":	999649,
			"second_score":	397191
		}, {
			"file":	"main/SAPI.c",
			"line":	298,
			"primary_score":	999649,
			"second_score":	397190
		}, {
			"file":	"main/SAPI.c",
			"line":	304,
			"primary_score":	999649,
			"second_score":	397189
		}, {
			"file":	"main/SAPI.c",
			"line":	316,
			"primary_score":	999649,
			"second_score":	397188
		}, {
			"file":	"main/SAPI.c",
			"line":	317,
			"primary_score":	999649,
			"second_score":	397187
		}, {
			"file":	"main/SAPI.c",
			"line":	318,
			"primary_score":	999649,
			"second_score":	397165
		}, {
			"file":	"main/SAPI.c",
			"line":	320,
			"primary_score":	999649,
			"second_score":	397164
		}, {
			"file":	"main/SAPI.c",
			"line":	482,
			"primary_score":	999649,
			"second_score":	113649
		}, {
			"file":	"main/SAPI.c",
			"line":	490,
			"primary_score":	999649,
			"second_score":	113690
		}, {
			"file":	"main/SAPI.c",
			"line":	491,
			"primary_score":	999649,
			"second_score":	113686
		}, {
			"file":	"main/SAPI.c",
			"line":	494,
			"primary_score":	999649,
			"second_score":	113685
		}, {
			"file":	"main/SAPI.c",
			"line":	496,
			"primary_score":	999649,
			"second_score":	113684
		}, {
			"file":	"main/SAPI.c",
			"line":	507,
			"primary_score":	999649,
			"second_score":	113683
		}, {
			"file":	"main/SAPI.c",
			"line":	510,
			"primary_score":	999649,
			"second_score":	113682
		}, {
			"file":	"main/SAPI.c",
			"line":	513,
			"primary_score":	999649,
			"second_score":	113681
		}, {
			"file":	"main/SAPI.c",
			"line":	516,
			"primary_score":	999649,
			"second_score":	113680
		}, {
			"file":	"main/SAPI.c",
			"line":	519,
			"primary_score":	999649,
			"second_score":	113679
		}, {
			"file":	"main/SAPI.c",
			"line":	522,
			"primary_score":	999649,
			"second_score":	113678
		}, {
			"file":	"main/SAPI.c",
			"line":	525,
			"primary_score":	999649,
			"second_score":	113677
		}, {
			"file":	"main/SAPI.c",
			"line":	526,
			"primary_score":	999649,
			"second_score":	113676
		}, {
			"file":	"main/SAPI.c",
			"line":	528,
			"primary_score":	999649,
			"second_score":	113672
		}, {
			"file":	"main/SAPI.c",
			"line":	531,
			"primary_score":	999649,
			"second_score":	113671
		}, {
			"file":	"main/SAPI.c",
			"line":	532,
			"primary_score":	999649,
			"second_score":	113670
		}, {
			"file":	"main/SAPI.c",
			"line":	533,
			"primary_score":	999649,
			"second_score":	113651
		}, {
			"file":	"main/SAPI.c",
			"line":	535,
			"primary_score":	999649,
			"second_score":	113650
		}, {
			"file":	"main/SAPI.c",
			"line":	536,
			"primary_score":	999649,
			"second_score":	113648
		}, {
			"file":	"main/SAPI.c",
			"line":	537,
			"primary_score":	999649,
			"second_score":	113647
		}, {
			"file":	"main/SAPI.c",
			"line":	538,
			"primary_score":	999649,
			"second_score":	113646
		}, {
			"file":	"main/SAPI.c",
			"line":	539,
			"primary_score":	999649,
			"second_score":	113645
		}, {
			"file":	"main/SAPI.c",
			"line":	608,
			"primary_score":	999649,
			"second_score":	397100
		}, {
			"file":	"main/SAPI.c",
			"line":	623,
			"primary_score":	999649,
			"second_score":	397098
		}, {
			"file":	"main/SAPI.c",
			"line":	812,
			"primary_score":	999649,
			"second_score":	119513
		}, {
			"file":	"main/SAPI.c",
			"line":	813,
			"primary_score":	999649,
			"second_score":	119512
		}, {
			"file":	"main/SAPI.c",
			"line":	815,
			"primary_score":	999649,
			"second_score":	119511
		}, {
			"file":	"main/SAPI.c",
			"line":	816,
			"primary_score":	999649,
			"second_score":	119510
		}, {
			"file":	"main/SAPI.c",
			"line":	822,
			"primary_score":	999649,
			"second_score":	397201
		}, {
			"file":	"main/SAPI.c",
			"line":	823,
			"primary_score":	999649,
			"second_score":	397200
		}, {
			"file":	"main/SAPI.c",
			"line":	824,
			"primary_score":	999649,
			"second_score":	397199
		}, {
			"file":	"main/SAPI.c",
			"line":	826,
			"primary_score":	999649,
			"second_score":	397198
		}, {
			"file":	"main/SAPI.c",
			"line":	827,
			"primary_score":	999649,
			"second_score":	397163
		}, {
			"file":	"main/SAPI.c",
			"line":	828,
			"primary_score":	999649,
			"second_score":	397162
		}, {
			"file":	"main/SAPI.c",
			"line":	829,
			"primary_score":	999649,
			"second_score":	397103
		}, {
			"file":	"main/SAPI.c",
			"line":	830,
			"primary_score":	999649,
			"second_score":	397102
		}, {
			"file":	"main/SAPI.c",
			"line":	831,
			"primary_score":	999649,
			"second_score":	397101
		}, {
			"file":	"main/SAPI.c",
			"line":	832,
			"primary_score":	999649,
			"second_score":	397078
		}, {
			"file":	"main/SAPI.c",
			"line":	835,
			"primary_score":	999649,
			"second_score":	397077
		}, {
			"file":	"main/SAPI.c",
			"line":	840,
			"primary_score":	999649,
			"second_score":	397076
		}, {
			"file":	"main/SAPI.c",
			"line":	842,
			"primary_score":	999649,
			"second_score":	397075
		}, {
			"file":	"main/SAPI.c",
			"line":	843,
			"primary_score":	999649,
			"second_score":	397074
		}, {
			"file":	"main/SAPI.c",
			"line":	848,
			"primary_score":	999649,
			"second_score":	397072
		}, {
			"file":	"main/SAPI.c",
			"line":	851,
			"primary_score":	999649,
			"second_score":	397071
		}, {
			"file":	"main/SAPI.c",
			"line":	882,
			"primary_score":	999649,
			"second_score":	397070
		}, {
			"file":	"main/SAPI.c",
			"line":	884,
			"primary_score":	999649,
			"second_score":	397068
		}, {
			"file":	"main/SAPI.c",
			"line":	953,
			"primary_score":	999649,
			"second_score":	103795
		}, {
			"file":	"main/SAPI.c",
			"line":	954,
			"primary_score":	999649,
			"second_score":	103794
		}, {
			"file":	"main/SAPI.c",
			"line":	955,
			"primary_score":	999649,
			"second_score":	103792
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	793,
			"primary_score":	999649,
			"second_score":	443378
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	794,
			"primary_score":	999649,
			"second_score":	443377
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	795,
			"primary_score":	999649,
			"second_score":	443376
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	796,
			"primary_score":	999649,
			"second_score":	443375
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	800,
			"primary_score":	999649,
			"second_score":	443374
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	802,
			"primary_score":	999649,
			"second_score":	443373
		}, {
			"file":	"main/getopt.c",
			"line":	70,
			"primary_score":	999649,
			"second_score":	175028
		}, {
			"file":	"main/getopt.c",
			"line":	174,
			"primary_score":	999649,
			"second_score":	149141
		}, {
			"file":	"main/getopt.c",
			"line":	175,
			"primary_score":	999649,
			"second_score":	149140
		}, {
			"file":	"main/getopt.c",
			"line":	177,
			"primary_score":	999649,
			"second_score":	149139
		}, {
			"file":	"main/getopt.c",
			"line":	178,
			"primary_score":	999649,
			"second_score":	149138
		}, {
			"file":	"main/getopt.c",
			"line":	185,
			"primary_score":	999649,
			"second_score":	149137
		}, {
			"file":	"main/main.c",
			"line":	1601,
			"primary_score":	999649,
			"second_score":	119670
		}, {
			"file":	"main/main.c",
			"line":	1602,
			"primary_score":	999649,
			"second_score":	119669
		}, {
			"file":	"main/main.c",
			"line":	1604,
			"primary_score":	999649,
			"second_score":	119668
		}, {
			"file":	"main/main.c",
			"line":	1609,
			"primary_score":	999649,
			"second_score":	119667
		}, {
			"file":	"main/main.c",
			"line":	1610,
			"primary_score":	999649,
			"second_score":	119666
		}, {
			"file":	"main/main.c",
			"line":	1612,
			"primary_score":	999649,
			"second_score":	119665
		}, {
			"file":	"main/main.c",
			"line":	1615,
			"primary_score":	999649,
			"second_score":	119658
		}, {
			"file":	"main/main.c",
			"line":	1616,
			"primary_score":	999649,
			"second_score":	119652
		}, {
			"file":	"main/main.c",
			"line":	1617,
			"primary_score":	999649,
			"second_score":	119650
		}, {
			"file":	"main/main.c",
			"line":	1620,
			"primary_score":	999649,
			"second_score":	119648
		}, {
			"file":	"main/main.c",
			"line":	1621,
			"primary_score":	999649,
			"second_score":	119642
		}, {
			"file":	"main/main.c",
			"line":	1622,
			"primary_score":	999649,
			"second_score":	119540
		}, {
			"file":	"main/main.c",
			"line":	1625,
			"primary_score":	999649,
			"second_score":	119538
		}, {
			"file":	"main/main.c",
			"line":	1626,
			"primary_score":	999649,
			"second_score":	119532
		}, {
			"file":	"main/main.c",
			"line":	1628,
			"primary_score":	999649,
			"second_score":	119531
		}, {
			"file":	"main/main.c",
			"line":	1634,
			"primary_score":	999649,
			"second_score":	119530
		}, {
			"file":	"main/main.c",
			"line":	1637,
			"primary_score":	999649,
			"second_score":	119529
		}, {
			"file":	"main/main.c",
			"line":	1639,
			"primary_score":	999649,
			"second_score":	119527
		}, {
			"file":	"main/main.c",
			"line":	1640,
			"primary_score":	999649,
			"second_score":	119522
		}, {
			"file":	"main/main.c",
			"line":	1643,
			"primary_score":	999649,
			"second_score":	119520
		}, {
			"file":	"main/main.c",
			"line":	1644,
			"primary_score":	999649,
			"second_score":	119514
		}, {
			"file":	"main/main.c",
			"line":	1645,
			"primary_score":	999649,
			"second_score":	119509
		}, {
			"file":	"main/main.c",
			"line":	1648,
			"primary_score":	999649,
			"second_score":	119507
		}, {
			"file":	"main/main.c",
			"line":	1649,
			"primary_score":	999649,
			"second_score":	119506
		}, {
			"file":	"main/main.c",
			"line":	1650,
			"primary_score":	999649,
			"second_score":	118904
		}, {
			"file":	"main/main.c",
			"line":	1654,
			"primary_score":	999649,
			"second_score":	118901
		}, {
			"file":	"main/main.c",
			"line":	1655,
			"primary_score":	999649,
			"second_score":	118895
		}, {
			"file":	"main/main.c",
			"line":	1657,
			"primary_score":	999649,
			"second_score":	118894
		}, {
			"file":	"main/main.c",
			"line":	1658,
			"primary_score":	999649,
			"second_score":	118754
		}, {
			"file":	"main/main.c",
			"line":	1659,
			"primary_score":	999649,
			"second_score":	118753
		}, {
			"file":	"main/main.c",
			"line":	1662,
			"primary_score":	999649,
			"second_score":	118719
		}, {
			"file":	"main/main.c",
			"line":	1665,
			"primary_score":	999649,
			"second_score":	118717
		}, {
			"file":	"main/main.c",
			"line":	1669,
			"primary_score":	999649,
			"second_score":	118716
		}, {
			"file":	"main/main.c",
			"line":	1675,
			"primary_score":	999649,
			"second_score":	118715
		}, {
			"file":	"main/main.c",
			"line":	1678,
			"primary_score":	999649,
			"second_score":	113709
		}, {
			"file":	"main/main.c",
			"line":	1679,
			"primary_score":	999649,
			"second_score":	113703
		}, {
			"file":	"main/main.c",
			"line":	1680,
			"primary_score":	999649,
			"second_score":	113699
		}, {
			"file":	"main/main.c",
			"line":	1683,
			"primary_score":	999649,
			"second_score":	113697
		}, {
			"file":	"main/main.c",
			"line":	1684,
			"primary_score":	999649,
			"second_score":	113691
		}, {
			"file":	"main/main.c",
			"line":	1685,
			"primary_score":	999649,
			"second_score":	113644
		}, {
			"file":	"main/main.c",
			"line":	1688,
			"primary_score":	999649,
			"second_score":	113642
		}, {
			"file":	"main/main.c",
			"line":	1689,
			"primary_score":	999649,
			"second_score":	113636
		}, {
			"file":	"main/main.c",
			"line":	1690,
			"primary_score":	999649,
			"second_score":	113633
		}, {
			"file":	"main/main.c",
			"line":	1693,
			"primary_score":	999649,
			"second_score":	113631
		}, {
			"file":	"main/main.c",
			"line":	1694,
			"primary_score":	999649,
			"second_score":	113625
		}, {
			"file":	"main/main.c",
			"line":	1695,
			"primary_score":	999649,
			"second_score":	113206
		}, {
			"file":	"main/main.c",
			"line":	1696,
			"primary_score":	999649,
			"second_score":	113204
		}, {
			"file":	"main/main.c",
			"line":	1699,
			"primary_score":	999649,
			"second_score":	103816
		}, {
			"file":	"main/main.c",
			"line":	1700,
			"primary_score":	999649,
			"second_score":	103810
		}, {
			"file":	"main/main.c",
			"line":	1701,
			"primary_score":	999649,
			"second_score":	103808
		}, {
			"file":	"main/main.c",
			"line":	1734,
			"primary_score":	999649,
			"second_score":	125640
		}, {
			"file":	"main/main.c",
			"line":	1735,
			"primary_score":	999649,
			"second_score":	125639
		}, {
			"file":	"main/main.c",
			"line":	1755,
			"primary_score":	999649,
			"second_score":	3150
		}, {
			"file":	"main/main.c",
			"line":	1758,
			"primary_score":	999649,
			"second_score":	3149
		}, {
			"file":	"main/main.c",
			"line":	1761,
			"primary_score":	999649,
			"second_score":	3148
		}, {
			"file":	"main/main.c",
			"line":	1764,
			"primary_score":	999649,
			"second_score":	3147
		}, {
			"file":	"main/main.c",
			"line":	1768,
			"primary_score":	999649,
			"second_score":	3146
		}, {
			"file":	"main/main.c",
			"line":	2200,
			"primary_score":	999649,
			"second_score":	103799
		}, {
			"file":	"main/main.c",
			"line":	2202,
			"primary_score":	999649,
			"second_score":	103798
		}, {
			"file":	"main/main.c",
			"line":	2204,
			"primary_score":	999649,
			"second_score":	103797
		}, {
			"file":	"main/main.c",
			"line":	2217,
			"primary_score":	999649,
			"second_score":	103796
		}, {
			"file":	"main/main.c",
			"line":	2219,
			"primary_score":	999649,
			"second_score":	103791
		}, {
			"file":	"main/main.c",
			"line":	2222,
			"primary_score":	999649,
			"second_score":	6121
		}, {
			"file":	"main/main.c",
			"line":	2224,
			"primary_score":	999649,
			"second_score":	6055
		}, {
			"file":	"main/main.c",
			"line":	2225,
			"primary_score":	999649,
			"second_score":	6026
		}, {
			"file":	"main/main.c",
			"line":	2228,
			"primary_score":	999649,
			"second_score":	3567
		}, {
			"file":	"main/main.c",
			"line":	2231,
			"primary_score":	999649,
			"second_score":	3244
		}, {
			"file":	"main/main.c",
			"line":	2232,
			"primary_score":	999649,
			"second_score":	3214
		}, {
			"file":	"main/main.c",
			"line":	2237,
			"primary_score":	999649,
			"second_score":	3191
		}, {
			"file":	"main/main.c",
			"line":	2238,
			"primary_score":	999649,
			"second_score":	3154
		}, {
			"file":	"main/main.c",
			"line":	2240,
			"primary_score":	999649,
			"second_score":	3152
		}, {
			"file":	"main/main.c",
			"line":	2243,
			"primary_score":	999649,
			"second_score":	3151
		}, {
			"file":	"main/main.c",
			"line":	2244,
			"primary_score":	999649,
			"second_score":	3141
		}, {
			"file":	"main/main.c",
			"line":	2315,
			"primary_score":	999649,
			"second_score":	443372
		}, {
			"file":	"main/main.c",
			"line":	2316,
			"primary_score":	999649,
			"second_score":	443371
		}, {
			"file":	"main/main.c",
			"line":	2317,
			"primary_score":	999649,
			"second_score":	442893
		}, {
			"file":	"main/main.c",
			"line":	2321,
			"primary_score":	999649,
			"second_score":	442865
		}, {
			"file":	"main/main.c",
			"line":	2328,
			"primary_score":	999649,
			"second_score":	442864
		}, {
			"file":	"main/main.c",
			"line":	2331,
			"primary_score":	999649,
			"second_score":	442863
		}, {
			"file":	"main/main.c",
			"line":	2338,
			"primary_score":	999649,
			"second_score":	442862
		}, {
			"file":	"main/main.c",
			"line":	2340,
			"primary_score":	999649,
			"second_score":	442861
		}, {
			"file":	"main/main.c",
			"line":	2346,
			"primary_score":	999649,
			"second_score":	442860
		}, {
			"file":	"main/main.c",
			"line":	2348,
			"primary_score":	999649,
			"second_score":	119682
		}, {
			"file":	"main/main.c",
			"line":	2356,
			"primary_score":	999649,
			"second_score":	119680
		}, {
			"file":	"main/main.c",
			"line":	2359,
			"primary_score":	999649,
			"second_score":	119679
		}, {
			"file":	"main/main.c",
			"line":	2361,
			"primary_score":	999649,
			"second_score":	119677
		}, {
			"file":	"main/output.c",
			"line":	103,
			"primary_score":	999649,
			"second_score":	3190
		}, {
			"file":	"main/output.c",
			"line":	104,
			"primary_score":	999649,
			"second_score":	3176
		}, {
			"file":	"main/output.c",
			"line":	105,
			"primary_score":	999649,
			"second_score":	3162
		}, {
			"file":	"main/output.c",
			"line":	129,
			"primary_score":	999649,
			"second_score":	119526
		}, {
			"file":	"main/output.c",
			"line":	131,
			"primary_score":	999649,
			"second_score":	119525
		}, {
			"file":	"main/output.c",
			"line":	132,
			"primary_score":	999649,
			"second_score":	119524
		}, {
			"file":	"main/output.c",
			"line":	135,
			"primary_score":	999649,
			"second_score":	119523
		}, {
			"file":	"main/output.c",
			"line":	198,
			"primary_score":	999649,
			"second_score":	125638
		}, {
			"file":	"main/output.c",
			"line":	201,
			"primary_score":	999649,
			"second_score":	125637
		}, {
			"file":	"main/output.c",
			"line":	202,
			"primary_score":	999649,
			"second_score":	125591
		}, {
			"file":	"main/output.c",
			"line":	281,
			"primary_score":	999649,
			"second_score":	119528
		}, {
			"file":	"main/output.c",
			"line":	697,
			"primary_score":	999649,
			"second_score":	125632
		}, {
			"file":	"main/output.c",
			"line":	703,
			"primary_score":	999649,
			"second_score":	125631
		}, {
			"file":	"main/output.c",
			"line":	711,
			"primary_score":	999649,
			"second_score":	125629
		}, {
			"file":	"main/output.c",
			"line":	715,
			"primary_score":	999649,
			"second_score":	125628
		}, {
			"file":	"main/output.c",
			"line":	716,
			"primary_score":	999649,
			"second_score":	125627
		}, {
			"file":	"main/output.c",
			"line":	717,
			"primary_score":	999649,
			"second_score":	125626
		}, {
			"file":	"main/output.c",
			"line":	719,
			"primary_score":	999649,
			"second_score":	125625
		}, {
			"file":	"main/output.c",
			"line":	785,
			"primary_score":	999649,
			"second_score":	125593
		}, {
			"file":	"main/output.c",
			"line":	789,
			"primary_score":	999649,
			"second_score":	125592
		}, {
			"file":	"main/output.c",
			"line":	975,
			"primary_score":	999649,
			"second_score":	125636
		}, {
			"file":	"main/output.c",
			"line":	976,
			"primary_score":	999649,
			"second_score":	125635
		}, {
			"file":	"main/output.c",
			"line":	977,
			"primary_score":	999649,
			"second_score":	125634
		}, {
			"file":	"main/output.c",
			"line":	979,
			"primary_score":	999649,
			"second_score":	125633
		}, {
			"file":	"main/output.c",
			"line":	983,
			"primary_score":	999649,
			"second_score":	125630
		}, {
			"file":	"main/output.c",
			"line":	990,
			"primary_score":	999649,
			"second_score":	125624
		}, {
			"file":	"main/output.c",
			"line":	1002,
			"primary_score":	999649,
			"second_score":	125623
		}, {
			"file":	"main/output.c",
			"line":	1003,
			"primary_score":	999649,
			"second_score":	125622
		}, {
			"file":	"main/output.c",
			"line":	1006,
			"primary_score":	999649,
			"second_score":	125621
		}, {
			"file":	"main/output.c",
			"line":	1010,
			"primary_score":	999649,
			"second_score":	125620
		}, {
			"file":	"main/output.c",
			"line":	1011,
			"primary_score":	999649,
			"second_score":	397066
		}, {
			"file":	"main/output.c",
			"line":	1014,
			"primary_score":	999649,
			"second_score":	397064
		}, {
			"file":	"main/output.c",
			"line":	1015,
			"primary_score":	999649,
			"second_score":	397062
		}, {
			"file":	"main/output.c",
			"line":	1016,
			"primary_score":	999649,
			"second_score":	397059
		}, {
			"file":	"main/output.c",
			"line":	1022,
			"primary_score":	999649,
			"second_score":	125619
		}, {
			"file":	"main/output.c",
			"line":	1023,
			"primary_score":	999649,
			"second_score":	125601
		}, {
			"file":	"main/output.c",
			"line":	1024,
			"primary_score":	999649,
			"second_score":	125600
		}, {
			"file":	"main/output.c",
			"line":	1026,
			"primary_score":	999649,
			"second_score":	125595
		}, {
			"file":	"main/output.c",
			"line":	1028,
			"primary_score":	999649,
			"second_score":	125594
		}, {
			"file":	"main/php_ini.c",
			"line":	194,
			"primary_score":	999649,
			"second_score":	3256
		}, {
			"file":	"main/php_ini.c",
			"line":	197,
			"primary_score":	999649,
			"second_score":	3255
		}, {
			"file":	"main/php_ini.c",
			"line":	198,
			"primary_score":	999649,
			"second_score":	3254
		}, {
			"file":	"main/php_ini.c",
			"line":	729,
			"primary_score":	999649,
			"second_score":	3566
		}, {
			"file":	"main/php_ini.c",
			"line":	730,
			"primary_score":	999649,
			"second_score":	3247
		}, {
			"file":	"main/php_ini.c",
			"line":	734,
			"primary_score":	999649,
			"second_score":	3246
		}, {
			"file":	"main/php_ini.c",
			"line":	738,
			"primary_score":	999649,
			"second_score":	3245
		}, {
			"file":	"main/php_logos.c",
			"line":	67,
			"primary_score":	999649,
			"second_score":	6054
		}, {
			"file":	"main/php_logos.c",
			"line":	68,
			"primary_score":	999649,
			"second_score":	6027
		}, {
			"file":	"main/php_open_temporary_file.c",
			"line":	183,
			"primary_score":	999649,
			"second_score":	3153
		}, {
			"file":	"main/php_ticks.c",
			"line":	32,
			"primary_score":	999649,
			"second_score":	119664
		}, {
			"file":	"main/php_ticks.c",
			"line":	37,
			"primary_score":	999649,
			"second_score":	3145
		}, {
			"file":	"main/snprintf.c",
			"line":	139,
			"primary_score":	999944,
			"second_score":	126046
		}, {
			"file":	"main/snprintf.c",
			"line":	140,
			"primary_score":	999944,
			"second_score":	126045
		}, {
			"file":	"main/snprintf.c",
			"line":	142,
			"primary_score":	999944,
			"second_score":	126044
		}, {
			"file":	"main/snprintf.c",
			"line":	143,
			"primary_score":	999944,
			"second_score":	125845
		}, {
			"file":	"main/snprintf.c",
			"line":	153,
			"primary_score":	999944,
			"second_score":	125844
		}, {
			"file":	"main/snprintf.c",
			"line":	154,
			"primary_score":	999944,
			"second_score":	125843
		}, {
			"file":	"main/snprintf.c",
			"line":	158,
			"primary_score":	999944,
			"second_score":	125842
		}, {
			"file":	"main/snprintf.c",
			"line":	195,
			"primary_score":	999944,
			"second_score":	125841
		}, {
			"file":	"main/snprintf.c",
			"line":	209,
			"primary_score":	999944,
			"second_score":	125840
		}, {
			"file":	"main/snprintf.c",
			"line":	210,
			"primary_score":	999946,
			"second_score":	125837
		}, {
			"file":	"main/snprintf.c",
			"line":	211,
			"primary_score":	999946,
			"second_score":	125836
		}, {
			"file":	"main/snprintf.c",
			"line":	213,
			"primary_score":	999981,
			"second_score":	251644
		}, {
			"file":	"main/snprintf.c",
			"line":	216,
			"primary_score":	999944,
			"second_score":	125835
		}, {
			"file":	"main/snprintf.c",
			"line":	217,
			"primary_score":	999949,
			"second_score":	125834
		}, {
			"file":	"main/snprintf.c",
			"line":	220,
			"primary_score":	999949,
			"second_score":	125833
		}, {
			"file":	"main/snprintf.c",
			"line":	221,
			"primary_score":	999949,
			"second_score":	125832
		}, {
			"file":	"main/snprintf.c",
			"line":	222,
			"primary_score":	999949,
			"second_score":	125820
		}, {
			"file":	"main/snprintf.c",
			"line":	225,
			"primary_score":	999944,
			"second_score":	125819
		}, {
			"file":	"main/snprintf.c",
			"line":	227,
			"primary_score":	999944,
			"second_score":	125818
		}, {
			"file":	"main/snprintf.c",
			"line":	228,
			"primary_score":	999944,
			"second_score":	125809
		}, {
			"file":	"main/snprintf.c",
			"line":	317,
			"primary_score":	999678,
			"second_score":	126383
		}, {
			"file":	"main/snprintf.c",
			"line":	318,
			"primary_score":	999678,
			"second_score":	126382
		}, {
			"file":	"main/snprintf.c",
			"line":	320,
			"primary_score":	999678,
			"second_score":	126381
		}, {
			"file":	"main/snprintf.c",
			"line":	324,
			"primary_score":	999678,
			"second_score":	126380
		}, {
			"file":	"main/snprintf.c",
			"line":	335,
			"primary_score":	999678,
			"second_score":	126379
		}, {
			"file":	"main/snprintf.c",
			"line":	339,
			"primary_score":	999679,
			"second_score":	126378
		}, {
			"file":	"main/snprintf.c",
			"line":	346,
			"primary_score":	999678,
			"second_score":	126377
		}, {
			"file":	"main/snprintf.c",
			"line":	347,
			"primary_score":	999678,
			"second_score":	126370
		}, {
			"file":	"main/snprintf.c",
			"line":	349,
			"primary_score":	999678,
			"second_score":	126369
		}, {
			"file":	"main/snprintf.c",
			"line":	350,
			"primary_score":	999678,
			"second_score":	126368
		}, {
			"file":	"main/snprintf.c",
			"line":	354,
			"primary_score":	999678,
			"second_score":	126367
		}, {
			"file":	"main/snprintf.c",
			"line":	355,
			"primary_score":	999678,
			"second_score":	126366
		}, {
			"file":	"main/spprintf.c",
			"line":	254,
			"primary_score":	999827,
			"second_score":	126076
		}, {
			"file":	"main/spprintf.c",
			"line":	255,
			"primary_score":	999827,
			"second_score":	126075
		}, {
			"file":	"main/spprintf.c",
			"line":	257,
			"primary_score":	999827,
			"second_score":	126074
		}, {
			"file":	"main/spprintf.c",
			"line":	259,
			"primary_score":	999827,
			"second_score":	126073
		}, {
			"file":	"main/spprintf.c",
			"line":	261,
			"primary_score":	999827,
			"second_score":	126072
		}, {
			"file":	"main/spprintf.c",
			"line":	263,
			"primary_score":	999827,
			"second_score":	126071
		}, {
			"file":	"main/spprintf.c",
			"line":	266,
			"primary_score":	999827,
			"second_score":	126070
		}, {
			"file":	"main/spprintf.c",
			"line":	272,
			"primary_score":	999827,
			"second_score":	126069
		}, {
			"file":	"main/spprintf.c",
			"line":	275,
			"primary_score":	999827,
			"second_score":	126068
		}, {
			"file":	"main/spprintf.c",
			"line":	284,
			"primary_score":	999944,
			"second_score":	126067
		}, {
			"file":	"main/spprintf.c",
			"line":	289,
			"primary_score":	999827,
			"second_score":	126066
		}, {
			"file":	"main/spprintf.c",
			"line":	290,
			"primary_score":	999944,
			"second_score":	126065
		}, {
			"file":	"main/spprintf.c",
			"line":	291,
			"primary_score":	999944,
			"second_score":	126064
		}, {
			"file":	"main/spprintf.c",
			"line":	292,
			"primary_score":	999944,
			"second_score":	126063
		}, {
			"file":	"main/spprintf.c",
			"line":	294,
			"primary_score":	999944,
			"second_score":	126062
		}, {
			"file":	"main/spprintf.c",
			"line":	295,
			"primary_score":	999944,
			"second_score":	126061
		}, {
			"file":	"main/spprintf.c",
			"line":	296,
			"primary_score":	999944,
			"second_score":	126060
		}, {
			"file":	"main/spprintf.c",
			"line":	297,
			"primary_score":	999944,
			"second_score":	126059
		}, {
			"file":	"main/spprintf.c",
			"line":	302,
			"primary_score":	999944,
			"second_score":	126058
		}, {
			"file":	"main/spprintf.c",
			"line":	340,
			"primary_score":	999741,
			"second_score":	126390
		}, {
			"file":	"main/spprintf.c",
			"line":	345,
			"primary_score":	999741,
			"second_score":	126389
		}, {
			"file":	"main/spprintf.c",
			"line":	346,
			"primary_score":	999741,
			"second_score":	126388
		}, {
			"file":	"main/spprintf.c",
			"line":	441,
			"primary_score":	999678,
			"second_score":	126386
		}, {
			"file":	"main/spprintf.c",
			"line":	449,
			"primary_score":	999741,
			"second_score":	126385
		}, {
			"file":	"main/spprintf.c",
			"line":	474,
			"primary_score":	999678,
			"second_score":	126384
		}, {
			"file":	"main/spprintf.c",
			"line":	476,
			"primary_score":	999678,
			"second_score":	126365
		}, {
			"file":	"main/spprintf.c",
			"line":	478,
			"primary_score":	999678,
			"second_score":	126363
		}, {
			"file":	"main/spprintf.c",
			"line":	479,
			"primary_score":	999678,
			"second_score":	126362
		}, {
			"file":	"main/spprintf.c",
			"line":	481,
			"primary_score":	999679,
			"second_score":	126361
		}, {
			"file":	"main/spprintf.c",
			"line":	483,
			"primary_score":	999679,
			"second_score":	126360
		}, {
			"file":	"main/spprintf.c",
			"line":	486,
			"primary_score":	999678,
			"second_score":	126359
		}, {
			"file":	"main/spprintf.c",
			"line":	637,
			"primary_score":	999944,
			"second_score":	126054
		}, {
			"file":	"main/spprintf.c",
			"line":	642,
			"primary_score":	999944,
			"second_score":	126053
		}, {
			"file":	"main/spprintf.c",
			"line":	646,
			"primary_score":	999944,
			"second_score":	126052
		}, {
			"file":	"main/spprintf.c",
			"line":	657,
			"primary_score":	999944,
			"second_score":	126051
		}, {
			"file":	"main/spprintf.c",
			"line":	659,
			"primary_score":	999944,
			"second_score":	126050
		}, {
			"file":	"main/spprintf.c",
			"line":	665,
			"primary_score":	999944,
			"second_score":	126049
		}, {
			"file":	"main/spprintf.c",
			"line":	666,
			"primary_score":	999944,
			"second_score":	126048
		}, {
			"file":	"main/spprintf.c",
			"line":	669,
			"primary_score":	999944,
			"second_score":	126047
		}, {
			"file":	"main/spprintf.c",
			"line":	670,
			"primary_score":	999944,
			"second_score":	125808
		}, {
			"file":	"main/spprintf.c",
			"line":	672,
			"primary_score":	999946,
			"second_score":	125807
		}, {
			"file":	"main/spprintf.c",
			"line":	674,
			"primary_score":	999946,
			"second_score":	125806
		}, {
			"file":	"main/spprintf.c",
			"line":	677,
			"primary_score":	999944,
			"second_score":	125805
		}, {
			"file":	"main/spprintf.c",
			"line":	679,
			"primary_score":	999944,
			"second_score":	125804
		}, {
			"file":	"main/spprintf.c",
			"line":	681,
			"primary_score":	999944,
			"second_score":	125803
		}, {
			"file":	"main/spprintf.c",
			"line":	775,
			"primary_score":	999663,
			"second_score":	125794
		}, {
			"file":	"main/streams/filter.c",
			"line":	37,
			"primary_score":	999649,
			"second_score":	6095
		}, {
			"file":	"main/streams/filter.c",
			"line":	54,
			"primary_score":	999649,
			"second_score":	62327
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	287,
			"primary_score":	999649,
			"second_score":	148608
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	371,
			"primary_score":	999649,
			"second_score":	114237
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	372,
			"primary_score":	999649,
			"second_score":	114236
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	374,
			"primary_score":	999649,
			"second_score":	114235
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	377,
			"primary_score":	999649,
			"second_score":	114234
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	392,
			"primary_score":	999649,
			"second_score":	114233
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	393,
			"primary_score":	999649,
			"second_score":	114232
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	394,
			"primary_score":	999649,
			"second_score":	114231
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	404,
			"primary_score":	999649,
			"second_score":	114230
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	405,
			"primary_score":	999649,
			"second_score":	114229
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	413,
			"primary_score":	999649,
			"second_score":	114228
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	425,
			"primary_score":	999649,
			"second_score":	114227
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	427,
			"primary_score":	999649,
			"second_score":	114208
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	432,
			"primary_score":	999649,
			"second_score":	114247
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	434,
			"primary_score":	999649,
			"second_score":	114246
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	441,
			"primary_score":	999649,
			"second_score":	114245
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	442,
			"primary_score":	999649,
			"second_score":	114244
		}, {
			"file":	"main/streams/streams.c",
			"line":	104,
			"primary_score":	999649,
			"second_score":	119450
		}, {
			"file":	"main/streams/streams.c",
			"line":	105,
			"primary_score":	999649,
			"second_score":	119441
		}, {
			"file":	"main/streams/streams.c",
			"line":	333,
			"primary_score":	999649,
			"second_score":	114261
		}, {
			"file":	"main/streams/streams.c",
			"line":	334,
			"primary_score":	999649,
			"second_score":	114260
		}, {
			"file":	"main/streams/streams.c",
			"line":	335,
			"primary_score":	999649,
			"second_score":	114259
		}, {
			"file":	"main/streams/streams.c",
			"line":	336,
			"primary_score":	999649,
			"second_score":	114258
		}, {
			"file":	"main/streams/streams.c",
			"line":	338,
			"primary_score":	999649,
			"second_score":	114257
		}, {
			"file":	"main/streams/streams.c",
			"line":	351,
			"primary_score":	999649,
			"second_score":	114256
		}, {
			"file":	"main/streams/streams.c",
			"line":	360,
			"primary_score":	999649,
			"second_score":	114255
		}, {
			"file":	"main/streams/streams.c",
			"line":	364,
			"primary_score":	999649,
			"second_score":	114254
		}, {
			"file":	"main/streams/streams.c",
			"line":	382,
			"primary_score":	999649,
			"second_score":	114253
		}, {
			"file":	"main/streams/streams.c",
			"line":	402,
			"primary_score":	999649,
			"second_score":	114252
		}, {
			"file":	"main/streams/streams.c",
			"line":	405,
			"primary_score":	999649,
			"second_score":	114242
		}, {
			"file":	"main/streams/streams.c",
			"line":	415,
			"primary_score":	999649,
			"second_score":	114241
		}, {
			"file":	"main/streams/streams.c",
			"line":	419,
			"primary_score":	999649,
			"second_score":	114240
		}, {
			"file":	"main/streams/streams.c",
			"line":	420,
			"primary_score":	999649,
			"second_score":	114239
		}, {
			"file":	"main/streams/streams.c",
			"line":	432,
			"primary_score":	999649,
			"second_score":	114238
		}, {
			"file":	"main/streams/streams.c",
			"line":	433,
			"primary_score":	999649,
			"second_score":	114207
		}, {
			"file":	"main/streams/streams.c",
			"line":	436,
			"primary_score":	999649,
			"second_score":	114206
		}, {
			"file":	"main/streams/streams.c",
			"line":	443,
			"primary_score":	999649,
			"second_score":	114205
		}, {
			"file":	"main/streams/streams.c",
			"line":	444,
			"primary_score":	999649,
			"second_score":	114204
		}, {
			"file":	"main/streams/streams.c",
			"line":	447,
			"primary_score":	999649,
			"second_score":	114203
		}, {
			"file":	"main/streams/streams.c",
			"line":	451,
			"primary_score":	999649,
			"second_score":	114202
		}, {
			"file":	"main/streams/streams.c",
			"line":	456,
			"primary_score":	999649,
			"second_score":	114201
		}, {
			"file":	"main/streams/streams.c",
			"line":	461,
			"primary_score":	999649,
			"second_score":	114200
		}, {
			"file":	"main/streams/streams.c",
			"line":	466,
			"primary_score":	999649,
			"second_score":	114199
		}, {
			"file":	"main/streams/streams.c",
			"line":	498,
			"primary_score":	999649,
			"second_score":	114198
		}, {
			"file":	"main/streams/streams.c",
			"line":	499,
			"primary_score":	999649,
			"second_score":	114197
		}, {
			"file":	"main/streams/streams.c",
			"line":	500,
			"primary_score":	999649,
			"second_score":	114178
		}, {
			"file":	"main/streams/streams.c",
			"line":	503,
			"primary_score":	999649,
			"second_score":	114177
		}, {
			"file":	"main/streams/streams.c",
			"line":	507,
			"primary_score":	999649,
			"second_score":	114158
		}, {
			"file":	"main/streams/streams.c",
			"line":	511,
			"primary_score":	999649,
			"second_score":	114157
		}, {
			"file":	"main/streams/streams.c",
			"line":	1123,
			"primary_score":	999649,
			"second_score":	114251
		}, {
			"file":	"main/streams/streams.c",
			"line":	1125,
			"primary_score":	999649,
			"second_score":	114250
		}, {
			"file":	"main/streams/streams.c",
			"line":	1129,
			"primary_score":	999649,
			"second_score":	114249
		}, {
			"file":	"main/streams/streams.c",
			"line":	1130,
			"primary_score":	999649,
			"second_score":	114248
		}, {
			"file":	"main/streams/streams.c",
			"line":	1133,
			"primary_score":	999649,
			"second_score":	114243
		}, {
			"file":	"main/streams/streams.c",
			"line":	1507,
			"primary_score":	999649,
			"second_score":	114263
		}, {
			"file":	"main/streams/streams.c",
			"line":	1509,
			"primary_score":	999649,
			"second_score":	114262
		}, {
			"file":	"main/streams/streams.c",
			"line":	1520,
			"primary_score":	999649,
			"second_score":	113635
		}, {
			"file":	"main/streams/streams.c",
			"line":	1526,
			"primary_score":	999649,
			"second_score":	113634
		}, {
			"file":	"main/streams/streams.c",
			"line":	1562,
			"primary_score":	999649,
			"second_score":	6120
		}, {
			"file":	"main/streams/streams.c",
			"line":	1563,
			"primary_score":	999649,
			"second_score":	6096
		}, {
			"file":	"main/streams/streams.c",
			"line":	1564,
			"primary_score":	999649,
			"second_score":	6086
		}, {
			"file":	"main/streams/streams.c",
			"line":	1565,
			"primary_score":	999649,
			"second_score":	6056
		}, {
			"file":	"main/streams/streams.c",
			"line":	1601,
			"primary_score":	999649,
			"second_score":	97926
		}, {
			"file":	"main/streams/transports.c",
			"line":	29,
			"primary_score":	999649,
			"second_score":	6085
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	255,
			"primary_score":	999649,
			"second_score":	125611
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	260,
			"primary_score":	999649,
			"second_score":	125610
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	269,
			"primary_score":	999649,
			"second_score":	125609
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	270,
			"primary_score":	999649,
			"second_score":	125608
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	273,
			"primary_score":	999649,
			"second_score":	125607
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	277,
			"primary_score":	999649,
			"second_score":	125606
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	287,
			"primary_score":	999649,
			"second_score":	125618
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	288,
			"primary_score":	999649,
			"second_score":	125617
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	289,
			"primary_score":	999649,
			"second_score":	125616
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	291,
			"primary_score":	999649,
			"second_score":	125615
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	295,
			"primary_score":	999649,
			"second_score":	125614
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	303,
			"primary_score":	999649,
			"second_score":	125613
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	305,
			"primary_score":	999649,
			"second_score":	125612
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	306,
			"primary_score":	999649,
			"second_score":	125605
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	312,
			"primary_score":	999649,
			"second_score":	125604
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	313,
			"primary_score":	999649,
			"second_score":	125603
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	316,
			"primary_score":	999649,
			"second_score":	125602
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	325,
			"primary_score":	999649,
			"second_score":	103793
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	378,
			"primary_score":	999649,
			"second_score":	113675
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	379,
			"primary_score":	999649,
			"second_score":	113674
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	383,
			"primary_score":	999649,
			"second_score":	113673
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	395,
			"primary_score":	999649,
			"second_score":	397099
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	403,
			"primary_score":	999649,
			"second_score":	397073
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	916,
			"primary_score":	999651,
			"second_score":	473206
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	920,
			"primary_score":	999651,
			"second_score":	473205
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	921,
			"primary_score":	999651,
			"second_score":	473204
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	950,
			"primary_score":	999649,
			"second_score":	149056
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	954,
			"primary_score":	999649,
			"second_score":	149055
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	955,
			"primary_score":	999649,
			"second_score":	149054
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	956,
			"primary_score":	999649,
			"second_score":	149053
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1075,
			"primary_score":	999649,
			"second_score":	175023
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1077,
			"primary_score":	999649,
			"second_score":	175017
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1078,
			"primary_score":	999649,
			"second_score":	175016
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1090,
			"primary_score":	999649,
			"second_score":	149042
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1091,
			"primary_score":	999649,
			"second_score":	149041
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1137,
			"primary_score":	999649,
			"second_score":	119676
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1140,
			"primary_score":	999649,
			"second_score":	119675
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1177,
			"primary_score":	999649,
			"second_score":	122172
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1180,
			"primary_score":	999649,
			"second_score":	119140
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1319,
			"primary_score":	999649,
			"second_score":	119674
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1321,
			"primary_score":	999649,
			"second_score":	119672
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1323,
			"primary_score":	999649,
			"second_score":	119671
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1325,
			"primary_score":	999649,
			"second_score":	103806
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1326,
			"primary_score":	999649,
			"second_score":	103805
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1328,
			"primary_score":	999649,
			"second_score":	103804
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1332,
			"primary_score":	999649,
			"second_score":	103803
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1333,
			"primary_score":	999649,
			"second_score":	103802
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1336,
			"primary_score":	999649,
			"second_score":	103801
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1337,
			"primary_score":	999649,
			"second_score":	103800
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1339,
			"primary_score":	999649,
			"second_score":	3136
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1344,
			"primary_score":	999649,
			"second_score":	1
		}],
	"mutation_info":	[{
			"file":	"ext/standard/array.c",
			"functions":	[]
		}],
	"rules":	[{
			"file_name":	"ext/standard/array.c",
			"lines":	[{
					"line":	1617,
					"switches":	[]
				}, {
					"line":	1618,
					"switches":	[]
				}, {
					"line":	1619,
					"switches":	[]
				}, {
					"line":	1621,
					"switches":	[{
							"switch":	0,
							"types":	[[], [], [], [], [308, 309, 310, 311], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [], [], [], [265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307], [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], [], [], [], [], [], []],
							"begin_line":	1622,
							"begin_column":	0,
							"end_line":	1622,
							"end_column":	0,
							"patch_codes":	["memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_null(*(return_value_ptr))", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (step)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "is_step_double = 1", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1622\", 7, &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(err), sizeof (err)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1622\", 7, &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(err), sizeof (err)))\n    goto err;\n", "if (__is_neg(\"\", \"L1622\", 7, &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(err), sizeof (err)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1622\", 7, &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(err), sizeof (err)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	2,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	3,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	4,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	5,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	6,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	7,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	8,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	9,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	10,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	11,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	12,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	13,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	14,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	15,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	16,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	17,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	18,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	19,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	20,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	21,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	22,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	23,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	24,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	25,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	26,
									"scores":	[-7.6899292738042861]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	166,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	167,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	168,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	169,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	170,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	171,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	172,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	173,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	174,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	175,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	176,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	177,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	178,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	179,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	180,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	181,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	182,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	183,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	184,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	185,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	186,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	187,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	188,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	189,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	190,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	191,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	192,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	193,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	194,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	195,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	196,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	197,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	198,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	199,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	200,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	201,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	202,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	203,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	204,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	205,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	206,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	207,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	208,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	209,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	210,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	211,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	212,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	213,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	214,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	215,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	216,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	217,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	218,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	219,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	220,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	221,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	222,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	223,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	224,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	225,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	226,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	227,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	228,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	229,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	230,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	231,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	232,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	233,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	234,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	235,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	236,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	237,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	238,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	239,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	240,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	241,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	242,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	243,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	244,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	245,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	246,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	247,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	248,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	249,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	250,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	251,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	252,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	253,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	254,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	255,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	256,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	257,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	258,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	259,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	260,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	261,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	262,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	263,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	264,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	265,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	266,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	267,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	268,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	269,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	270,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	271,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	272,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	273,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	274,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	275,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	276,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	277,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	278,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	279,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	280,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	281,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	282,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	283,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	284,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	285,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	286,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	287,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	288,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	289,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	290,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	291,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	292,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	293,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	294,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	295,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	296,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	297,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	298,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	299,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	300,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	301,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	302,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	303,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	304,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	305,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	306,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	307,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	308,
									"scores":	[-9.9713366622042869, -11.470732841904287, -11.471043384904286, -11.602695475004285, -11.218366198004286, -10.887524224204286, -10.887524224204286]
								}, {
									"case":	309,
									"scores":	[-9.9713366622042869, -11.470732841904287, -11.471043384904286, -11.602695475004285, -11.218366198004286, -10.887524224204286, -10.887524224204286]
								}, {
									"case":	310,
									"scores":	[-9.9713366622042869, -11.470732841904287, -11.471043384904286, -11.602695475004285, -11.218366198004286, -10.887524224204286, -10.887524224204286]
								}, {
									"case":	311,
									"scores":	[-9.9723366622042864, -11.471732841904286, -11.472043384904286, -11.603695475004287, -11.219366198004286, -10.888524224204286, -10.888524224204286]
								}]
						}, {
							"switch":	1,
							"types":	[[5], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4], []],
							"begin_line":	1622,
							"begin_column":	2,
							"end_line":	1624,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L1622\", 7, &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(err), sizeof (err))) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((zend_parse_parameters((ht), \"z/z/|z/\", &zlow, &zhigh, &zstep) == -1) || __is_neg(\"\", \"L1622\", 7, &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(err), sizeof (err))) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if (dprintf((ht), \"z/z/|z/\", &zlow, &zhigh, &zstep) == -1) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if (zend_get_parameters_ex((ht), \"z/z/|z/\", &zlow, &zhigh, &zstep) == -1) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((zend_parse_parameters((ht), \"z/z/|z/\", &zlow, &zhigh, &zstep) == -1) && !__is_neg(\"\", \"L1622\", 7, &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(err), sizeof (err))) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.8066382794281459, -3.9801325383281454, -3.9794827763281457, -2.8801917494281462, -4.3111371884281455, -3.9989700444281455, -3.2222415234281456]
								}, {
									"case":	2,
									"scores":	[-2.6893460133281462, -3.8628402722281461, -3.862190510228146, -2.7628994833281451, -4.1938449223281467, -3.8816777783281466, -3.1049492573281468]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-2.6893460133281462, -3.8628402722281461, -3.862190510228146, -2.7628994833281451, -4.1938449223281467, -3.8816777783281466, -3.1049492573281468]
								}]
						}, {
							"switch":	2,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1622,
							"begin_column":	2,
							"end_line":	1624,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L1622\", 7, &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(err), sizeof (err)))\n    if (zend_parse_parameters((ht), \"z/z/|z/\", &zlow, &zhigh, &zstep) == -1) {\n        {\n            do {\n                zval *__z = (return_value);\n                (*__z).value.lval = ((0) != 0);\n                (*__z).type = 3;\n            } while (0);\n            return;\n        }\n        ;\n    }\n", "if (!__is_neg(\"\", \"L1622\", 7, &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(err), sizeof (err)) && (zend_parse_parameters((ht), \"z/z/|z/\", &zlow, &zhigh, &zstep) == -1)) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.4165445338042861, -9.5900387927042861, -9.5893890307042859, -8.4900980038042864, -9.9210434428042866, -9.6088762988042866, -8.8321477778042858]
								}, {
									"case":	2,
									"scores":	[-7.3530986997042866, -8.5265929586042866, -8.5259431966042865, -7.4266521697042851, -8.8575976087042854, -8.5454304647042854, -7.7687019437042864]
								}]
						}]
				}, {
					"line":	1629,
					"switches":	[{
							"switch":	7,
							"types":	[[], [], [], [], [325, 326, 327, 328], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [], [], [], [282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324], [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281], [], [], [], [], [], []],
							"begin_line":	1630,
							"begin_column":	2,
							"end_line":	1630,
							"end_column":	2,
							"patch_codes":	["memset(&(**&zstep).is_ref__gc, 0, sizeof (*(&(**&zstep).is_ref__gc)))", "memset(&(**&zstep).refcount__gc, 0, sizeof (*(&(**&zstep).refcount__gc)))", "memset(&(**&zstep).type, 0, sizeof (*(&(**&zstep).type)))", "memset(&(**&zstep).value, 0, sizeof (*(&(**&zstep).value)))", "memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset(&(*zstep).is_ref__gc, 0, sizeof (*(&(*zstep).is_ref__gc)))", "memset(&(*zstep).refcount__gc, 0, sizeof (*(&(*zstep).refcount__gc)))", "memset(&(*zstep).type, 0, sizeof (*(&(*zstep).type)))", "memset(&(*zstep).value, 0, sizeof (*(&(*zstep).value)))", "memset(&(*zstep).value.dval, 0, sizeof (*(&(*zstep).value.dval)))", "memset(&(*zstep).value.ht, 0, sizeof (*(&(*zstep).value.ht)))", "memset(&(*zstep).value.lval, 0, sizeof (*(&(*zstep).value.lval)))", "memset(&(*zstep).value.obj, 0, sizeof (*(&(*zstep).value.obj)))", "memset(&(*zstep).value.str, 0, sizeof (*(&(*zstep).value.str)))", "memset(&(*zstep).value.str.len, 0, sizeof (*(&(*zstep).value.str.len)))", "memset(&(*zstep).value.str.val, 0, sizeof (*(&(*zstep).value.str.val)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "memset((*zstep).value.ht, 0, sizeof (*((*zstep).value.ht)))", "memset((*zstep).value.str.val, 0, sizeof (*((*zstep).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_null(*(return_value_ptr))", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (step)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "is_step_double = 1", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1630\", 7, &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1630\", 7, &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err)))\n    goto err;\n", "if (__is_neg(\"\", \"L1630\", 7, &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1630\", 7, &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	2,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	3,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	4,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	5,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	6,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	7,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	8,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	9,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	10,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	11,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	12,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	13,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	14,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	15,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	16,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	17,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	18,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	19,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	20,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	21,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	22,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	23,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	24,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	25,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	26,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	27,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	28,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	29,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	30,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	31,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	32,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	33,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	34,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	35,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	36,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	37,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	38,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	39,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	40,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	41,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	42,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	43,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	44,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	45,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	46,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	47,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	48,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	49,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	50,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	51,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	52,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	53,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	54,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	55,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	56,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	57,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	58,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	59,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	60,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	61,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	62,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	63,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	64,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	65,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	66,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	67,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	68,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	69,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	70,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	71,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	72,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	73,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	74,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	75,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	76,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	77,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	78,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	79,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	80,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	81,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	82,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	83,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	84,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	85,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	86,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	87,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	88,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	89,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	90,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	91,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	92,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	93,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	94,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	95,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	96,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	97,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	98,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	99,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	100,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	101,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	102,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	103,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	104,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	105,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	106,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	107,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	108,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	109,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	110,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	111,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	112,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	113,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	114,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	115,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	116,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	117,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	118,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	119,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	120,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	121,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	122,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	123,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	124,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	125,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	126,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	127,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	128,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	129,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	130,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	131,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	132,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	133,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	134,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	135,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	136,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	137,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	138,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	139,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	140,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	141,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	142,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	143,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	144,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	145,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	146,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	147,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	148,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	149,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	150,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	151,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	152,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	153,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	154,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	155,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	156,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	157,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	158,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	159,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	160,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	161,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	162,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	163,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	164,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	165,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	166,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	167,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	168,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	169,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	170,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	171,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	172,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	173,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	174,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	175,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	176,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	177,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	178,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	179,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	180,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	181,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	182,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	183,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	184,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	185,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	186,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	187,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	188,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	189,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	190,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	191,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	192,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	193,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	194,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	195,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	196,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	197,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	198,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	199,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	200,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	201,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	202,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	203,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	204,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	205,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	206,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	207,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	208,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	209,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	210,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	211,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	212,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	213,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	214,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	215,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	216,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	217,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	218,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	219,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	220,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	221,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	222,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	223,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	224,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	225,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	226,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	227,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	228,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	229,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	230,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	231,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	232,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	233,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	234,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	235,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	236,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	237,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	238,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	239,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	240,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	241,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	242,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	243,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	244,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	245,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	246,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	247,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	248,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	249,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	250,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	251,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	252,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	253,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	254,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	255,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	256,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	257,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	258,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	259,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	260,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	261,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	262,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	263,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	264,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	265,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	266,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	267,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	268,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	269,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	270,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	271,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	272,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	273,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	274,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	275,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	276,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	277,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	278,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	279,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	280,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	281,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	282,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	283,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	284,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	285,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	286,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	287,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	288,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	289,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	290,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	291,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	292,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	293,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	294,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	295,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	296,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	297,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	298,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	299,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	300,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	301,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	302,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	303,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	304,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	305,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	306,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	307,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	308,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	309,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	310,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	311,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	312,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	313,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	314,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	315,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	316,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	317,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	318,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	319,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	320,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	321,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	322,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	323,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	324,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	325,
									"scores":	[-6.0374907672238072, -6.5472788640238075, -6.5843792640238075, -6.3383403502238069, -6.5472788640238075, -6.5472788640238075, -6.301239950223807]
								}, {
									"case":	326,
									"scores":	[-6.0374907672238072, -6.5472788640238075, -6.5843792640238075, -6.3383403502238069, -6.5472788640238075, -6.5472788640238075, -6.301239950223807]
								}, {
									"case":	327,
									"scores":	[-6.0374907672238072, -6.5472788640238075, -6.5843792640238075, -6.3383403502238069, -6.5472788640238075, -6.5472788640238075, -6.301239950223807]
								}, {
									"case":	328,
									"scores":	[-6.0384907672238075, -6.5482788640238079, -6.5853792640238069, -6.3393403502238073, -6.5482788640238079, -6.5482788640238079, -6.3022399502238073]
								}]
						}, {
							"switch":	8,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1630,
							"begin_column":	4,
							"end_line":	1630,
							"end_column":	21,
							"patch_codes":	["if (!__is_neg(\"\", \"L1630\", 7, &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err)))\n    is_step_double = 1;\n", "{\n}\n", "is_step_double = (-1)", "is_step_double = (0 * err)", "is_step_double = (0 * ht)", "is_step_double = (0 * is_step_double)", "is_step_double = (0 * return_value_used)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err != 0)", "is_step_double = (err != is_step_double)", "is_step_double = (err * ht)", "is_step_double = (err * is_step_double)", "is_step_double = (err * return_value_used)", "is_step_double = (err + 0)", "is_step_double = (err + is_step_double)", "is_step_double = (err - 0)", "is_step_double = (err - is_step_double)", "is_step_double = (err == 0)", "is_step_double = (err == is_step_double)", "is_step_double = (err)", "is_step_double = (ht != 0)", "is_step_double = (ht != err)", "is_step_double = (ht != is_step_double)", "is_step_double = (ht != return_value_used)", "is_step_double = (ht * err)", "is_step_double = (ht * is_step_double)", "is_step_double = (ht * return_value_used)", "is_step_double = (ht + 0)", "is_step_double = (ht + err)", "is_step_double = (ht + is_step_double)", "is_step_double = (ht + return_value_used)", "is_step_double = (ht - 0)", "is_step_double = (ht - err)", "is_step_double = (ht - is_step_double)", "is_step_double = (ht - return_value_used)", "is_step_double = (ht == 0)", "is_step_double = (ht == err)", "is_step_double = (ht == is_step_double)", "is_step_double = (ht == return_value_used)", "is_step_double = (ht)", "is_step_double = (is_step_double != 0)", "is_step_double = (is_step_double * err)", "is_step_double = (is_step_double * ht)", "is_step_double = (is_step_double * return_value_used)", "is_step_double = (is_step_double + 0)", "is_step_double = (is_step_double - 0)", "is_step_double = (is_step_double == 0)", "is_step_double = (is_step_double)", "is_step_double = (return_value != 0)", "is_step_double = (return_value != this_ptr)", "is_step_double = (return_value != zhigh)", "is_step_double = (return_value != zlow)", "is_step_double = (return_value != zstep)", "is_step_double = (return_value == 0)", "is_step_double = (return_value == this_ptr)", "is_step_double = (return_value == zhigh)", "is_step_double = (return_value == zlow)", "is_step_double = (return_value == zstep)", "is_step_double = (return_value_ptr != 0)", "is_step_double = (return_value_ptr == 0)", "is_step_double = (return_value_used != 0)", "is_step_double = (return_value_used != err)", "is_step_double = (return_value_used != is_step_double)", "is_step_double = (return_value_used * err)", "is_step_double = (return_value_used * ht)", "is_step_double = (return_value_used * is_step_double)", "is_step_double = (return_value_used + 0)", "is_step_double = (return_value_used + err)", "is_step_double = (return_value_used + is_step_double)", "is_step_double = (return_value_used - 0)", "is_step_double = (return_value_used - err)", "is_step_double = (return_value_used - is_step_double)", "is_step_double = (return_value_used == 0)", "is_step_double = (return_value_used == err)", "is_step_double = (return_value_used == is_step_double)", "is_step_double = (return_value_used)", "is_step_double = (step != 0)", "is_step_double = (step == 0)", "is_step_double = (this_ptr != 0)", "is_step_double = (this_ptr != zhigh)", "is_step_double = (this_ptr != zlow)", "is_step_double = (this_ptr != zstep)", "is_step_double = (this_ptr == 0)", "is_step_double = (this_ptr == zhigh)", "is_step_double = (this_ptr == zlow)", "is_step_double = (this_ptr == zstep)", "is_step_double = (zhigh != 0)", "is_step_double = (zhigh != zstep)", "is_step_double = (zhigh == 0)", "is_step_double = (zhigh == zstep)", "is_step_double = (zlow != 0)", "is_step_double = (zlow != zhigh)", "is_step_double = (zlow != zstep)", "is_step_double = (zlow == 0)", "is_step_double = (zlow == zhigh)", "is_step_double = (zlow == zstep)", "is_step_double = (zstep != 0)", "is_step_double = (zstep == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7033319452238072, -5.6844915242238079, -5.9788423242238071, -5.2209542242238074, -5.6844915242238079, -5.6844915242238079, -4.9266034242238073]
								}, {
									"case":	2,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	3,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	4,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	5,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	6,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	7,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	8,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	9,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	10,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	11,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	12,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	13,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	14,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	15,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	16,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	17,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	18,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	19,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	20,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	21,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	22,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	23,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	24,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	25,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	26,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	27,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	28,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	29,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	30,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	31,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	32,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	33,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	34,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	35,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	36,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	37,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	38,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	39,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	40,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	41,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	42,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	43,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	44,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	45,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	46,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	47,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	48,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	49,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	50,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	51,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	52,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	53,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	54,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	55,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	56,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	57,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	58,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	59,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	60,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	61,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	62,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	63,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	64,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	65,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	66,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	67,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	68,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	69,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	70,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	71,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	72,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	73,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	74,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	75,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	76,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	77,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	78,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	79,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	80,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	81,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	82,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	83,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	84,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	85,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	86,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	87,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	88,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	89,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	90,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	91,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	92,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	93,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	94,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	95,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	96,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	97,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	98,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	99,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	100,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	101,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	102,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	103,
									"scores":	[-4.5989150542238075]
								}]
						}]
				}, {
					"line":	1626,
					"switches":	[{
							"switch":	5,
							"types":	[[], [], [], [], [326, 327, 328, 329], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [], [], [], [283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325], [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282], [], [], [], [], [], []],
							"begin_line":	1627,
							"begin_column":	1,
							"end_line":	1627,
							"end_column":	1,
							"patch_codes":	["memset(&(**&zstep).is_ref__gc, 0, sizeof (*(&(**&zstep).is_ref__gc)))", "memset(&(**&zstep).refcount__gc, 0, sizeof (*(&(**&zstep).refcount__gc)))", "memset(&(**&zstep).type, 0, sizeof (*(&(**&zstep).type)))", "memset(&(**&zstep).value, 0, sizeof (*(&(**&zstep).value)))", "memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset(&(*zstep), 0, sizeof (*(&(*zstep))))", "memset(&(*zstep).is_ref__gc, 0, sizeof (*(&(*zstep).is_ref__gc)))", "memset(&(*zstep).refcount__gc, 0, sizeof (*(&(*zstep).refcount__gc)))", "memset(&(*zstep).type, 0, sizeof (*(&(*zstep).type)))", "memset(&(*zstep).value, 0, sizeof (*(&(*zstep).value)))", "memset(&(*zstep).value.dval, 0, sizeof (*(&(*zstep).value.dval)))", "memset(&(*zstep).value.ht, 0, sizeof (*(&(*zstep).value.ht)))", "memset(&(*zstep).value.lval, 0, sizeof (*(&(*zstep).value.lval)))", "memset(&(*zstep).value.obj, 0, sizeof (*(&(*zstep).value.obj)))", "memset(&(*zstep).value.str, 0, sizeof (*(&(*zstep).value.str)))", "memset(&(*zstep).value.str.len, 0, sizeof (*(&(*zstep).value.str.len)))", "memset(&(*zstep).value.str.val, 0, sizeof (*(&(*zstep).value.str.val)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "memset((*zstep).value.ht, 0, sizeof (*((*zstep).value.ht)))", "memset((*zstep).value.str.val, 0, sizeof (*((*zstep).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_null(*(return_value_ptr))", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (step)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "is_step_double = 1", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1627\", 12, &(zstep), sizeof (zstep), &((*zstep).type), sizeof ((*zstep).type), &((*zstep).value.str.val), sizeof ((*zstep).value.str.val), &((*zstep).value.str.len), sizeof ((*zstep).value.str.len), &(is_step_double), sizeof (is_step_double), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &((*zstep).refcount__gc), sizeof ((*zstep).refcount__gc), &((*zstep).is_ref__gc), sizeof ((*zstep).is_ref__gc)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1627\", 12, &(zstep), sizeof (zstep), &((*zstep).type), sizeof ((*zstep).type), &((*zstep).value.str.val), sizeof ((*zstep).value.str.val), &((*zstep).value.str.len), sizeof ((*zstep).value.str.len), &(is_step_double), sizeof (is_step_double), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &((*zstep).refcount__gc), sizeof ((*zstep).refcount__gc), &((*zstep).is_ref__gc), sizeof ((*zstep).is_ref__gc)))\n    goto err;\n", "if (__is_neg(\"\", \"L1627\", 12, &(zstep), sizeof (zstep), &((*zstep).type), sizeof ((*zstep).type), &((*zstep).value.str.val), sizeof ((*zstep).value.str.val), &((*zstep).value.str.len), sizeof ((*zstep).value.str.len), &(is_step_double), sizeof (is_step_double), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &((*zstep).refcount__gc), sizeof ((*zstep).refcount__gc), &((*zstep).is_ref__gc), sizeof ((*zstep).is_ref__gc)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1627\", 12, &(zstep), sizeof (zstep), &((*zstep).type), sizeof ((*zstep).type), &((*zstep).value.str.val), sizeof ((*zstep).value.str.val), &((*zstep).value.str.len), sizeof ((*zstep).value.str.len), &(is_step_double), sizeof (is_step_double), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &((*zstep).refcount__gc), sizeof ((*zstep).refcount__gc), &((*zstep).is_ref__gc), sizeof ((*zstep).is_ref__gc)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	2,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	3,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	4,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	5,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	6,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	7,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	8,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	9,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	10,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	11,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	12,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	13,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	14,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	15,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	16,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	17,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	18,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	19,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	20,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	21,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	22,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	23,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	24,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	25,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	26,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	27,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	28,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	29,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	30,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	31,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	32,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	33,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	34,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	35,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	36,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	37,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	38,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	39,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	40,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	41,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	42,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	43,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	44,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	45,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	46,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	47,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	48,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	49,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	50,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	51,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	52,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	53,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	54,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	55,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	56,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	57,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	58,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	59,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	60,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	61,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	62,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	63,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	64,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	65,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	66,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	67,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	68,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	69,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	70,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	71,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	72,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	73,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	74,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	75,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	76,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	77,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	78,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	79,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	80,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	81,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	82,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	83,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	84,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	85,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	86,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	87,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	88,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	89,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	90,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	91,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	92,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	93,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	94,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	95,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	96,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	97,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	98,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	99,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	100,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	101,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	102,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	103,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	104,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	105,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	106,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	107,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	108,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	109,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	110,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	111,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	112,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	113,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	114,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	115,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	116,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	117,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	118,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	119,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	120,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	121,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	122,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	123,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	124,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	125,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	126,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	127,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	128,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	129,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	130,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	131,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	132,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	133,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	134,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	135,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	136,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	137,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	138,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	139,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	140,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	141,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	142,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	143,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	144,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	145,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	146,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	147,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	148,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	149,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	150,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	151,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	152,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	153,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	154,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	155,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	156,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	157,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	158,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	159,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	160,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	161,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	162,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	163,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	164,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	165,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	166,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	167,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	168,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	169,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	170,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	171,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	172,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	173,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	174,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	175,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	176,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	177,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	178,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	179,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	180,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	181,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	182,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	183,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	184,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	185,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	186,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	187,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	188,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	189,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	190,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	191,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	192,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	193,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	194,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	195,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	196,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	197,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	198,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	199,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	200,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	201,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	202,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	203,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	204,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	205,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	206,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	207,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	208,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	209,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	210,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	211,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	212,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	213,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	214,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	215,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	216,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	217,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	218,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	219,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	220,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	221,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	222,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	223,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	224,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	225,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	226,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	227,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	228,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	229,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	230,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	231,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	232,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	233,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	234,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	235,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	236,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	237,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	238,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	239,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	240,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	241,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	242,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	243,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	244,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	245,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	246,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	247,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	248,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	249,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	250,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	251,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	252,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	253,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	254,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	255,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	256,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	257,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	258,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	259,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	260,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	261,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	262,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	263,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	264,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	265,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	266,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	267,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	268,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	269,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	270,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	271,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	272,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	273,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	274,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	275,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	276,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	277,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	278,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	279,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	280,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	281,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	282,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	283,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	284,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	285,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	286,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	287,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	288,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	289,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	290,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	291,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	292,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	293,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	294,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	295,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	296,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	297,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	298,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	299,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	300,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	301,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	302,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	303,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	304,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	305,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	306,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	307,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	308,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	309,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	310,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	311,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	312,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	313,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	314,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	315,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	316,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	317,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	318,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	319,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	320,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	321,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	322,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	323,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	324,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	325,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	326,
									"scores":	[-11.031981708173586, -11.480863400373584, -10.869604928373585, -10.157780811373584, -10.436128423373583, -10.983016920173586, -10.736978006373585, -10.945916520173585, -10.945916520173585, -10.699877606373585, -11.514023780373584, -11.514023780373584]
								}, {
									"case":	327,
									"scores":	[-11.031981708173586, -11.480863400373584, -10.869604928373585, -10.157780811373584, -10.436128423373583, -10.983016920173586, -10.736978006373585, -10.945916520173585, -10.945916520173585, -10.699877606373585, -11.514023780373584, -11.514023780373584]
								}, {
									"case":	328,
									"scores":	[-11.031981708173586, -11.480863400373584, -10.869604928373585, -10.157780811373584, -10.436128423373583, -10.983016920173586, -10.736978006373585, -10.945916520173585, -10.945916520173585, -10.699877606373585, -11.514023780373584, -11.514023780373584]
								}, {
									"case":	329,
									"scores":	[-11.032981708173587, -11.481863400373584, -10.870604928373584, -10.158780811373585, -10.437128423373585, -10.984016920173586, -10.737978006373584, -10.946916520173584, -10.946916520173584, -10.700877606373584, -11.515023780373586, -11.515023780373586]
								}]
						}, {
							"switch":	6,
							"types":	[[5], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [3, 4]],
							"begin_line":	1627,
							"begin_column":	3,
							"end_line":	1631,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L1627\", 12, &(zstep), sizeof (zstep), &((*zstep).value.str.val), sizeof ((*zstep).value.str.val), &((*zstep).value.str.len), sizeof ((*zstep).value.str.len), &((*zstep).type), sizeof ((*zstep).type), &(is_step_double), sizeof (is_step_double), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &((*zstep).refcount__gc), sizeof ((*zstep).refcount__gc), &((*zstep).is_ref__gc), sizeof ((*zstep).is_ref__gc))) {\n    is_step_double = 1;\n}\n", "if (((*zstep).type == 2 || ((*zstep).type == 6 && is_numeric_string((*zstep).value.str.val, (*zstep).value.str.len, ((void *)0), ((void *)0), 0) == 2)) || __is_neg(\"\", \"L1627\", 12, &(zstep), sizeof (zstep), &((*zstep).value.str.val), sizeof ((*zstep).value.str.val), &((*zstep).value.str.len), sizeof ((*zstep).value.str.len), &((*zstep).type), sizeof ((*zstep).type), &(is_step_double), sizeof (is_step_double), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &((*zstep).refcount__gc), sizeof ((*zstep).refcount__gc), &((*zstep).is_ref__gc), sizeof ((*zstep).is_ref__gc))) {\n    is_step_double = 1;\n}\n", "if (((*zstep).type == 2 || (*zstep).type == 6) && is_numeric_string((*zstep).value.str.val, (*zstep).value.str.len, ((void *)0), ((void *)0), 0) == 2) {\n    is_step_double = 1;\n}\n", "if ((*zstep).type == 2) {\n    is_step_double = 1;\n}\n", "if (((*zstep).type == 2 || ((*zstep).type == 6 && is_numeric_string((*zstep).value.str.val, (*zstep).value.str.len, ((void *)0), ((void *)0), 0) == 2)) && !__is_neg(\"\", \"L1627\", 12, &(zstep), sizeof (zstep), &((*zstep).value.str.val), sizeof ((*zstep).value.str.val), &((*zstep).value.str.len), sizeof ((*zstep).value.str.len), &((*zstep).type), sizeof ((*zstep).type), &(is_step_double), sizeof (is_step_double), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &((*zstep).refcount__gc), sizeof ((*zstep).refcount__gc), &((*zstep).is_ref__gc), sizeof ((*zstep).is_ref__gc))) {\n    is_step_double = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.9814054974281454, -5.6076060374281465, -4.8163350074281466, -3.7277913374281466, -6.1036650484281454, -6.3791754274281463, -5.6212873274281456, -6.0848246274281461, -6.0848246274281461, -5.3269365274281455, -5.8517813374281458, -5.8517813374281458]
								}, {
									"case":	2,
									"scores":	[-0.060945363428145161, -0.68714590342814441, 0.10412512657185458, 1.1926687965718554, -1.1832049144281451, -1.4587152934281451, -0.70082719342814537, -1.164364493428145, -1.164364493428145, -0.40647639342814523, -0.93132120342814551, -0.93132120342814551]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-0.060945363428145161, -0.68714590342814441, 0.10412512657185458, 1.1926687965718554, -1.1832049144281451, -1.4587152934281451, -0.70082719342814537, -1.164364493428145, -1.164364493428145, -0.40647639342814523, -0.93132120342814551, -0.93132120342814551]
								}]
						}, {
							"switch":	9,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1627,
							"begin_column":	3,
							"end_line":	1631,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L1627\", 12, &(zstep), sizeof (zstep), &((*zstep).type), sizeof ((*zstep).type), &((*zstep).value.str.val), sizeof ((*zstep).value.str.val), &((*zstep).value.str.len), sizeof ((*zstep).value.str.len), &(is_step_double), sizeof (is_step_double), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &((*zstep).refcount__gc), sizeof ((*zstep).refcount__gc), &((*zstep).is_ref__gc), sizeof ((*zstep).is_ref__gc)))\n    if ((*zstep).type == 2 || ((*zstep).type == 6 && is_numeric_string((*zstep).value.str.val, (*zstep).value.str.len, ((void *)0), ((void *)0), 0) == 2)) {\n        is_step_double = 1;\n    }\n", "if (!__is_neg(\"\", \"L1627\", 12, &(zstep), sizeof (zstep), &((*zstep).type), sizeof ((*zstep).type), &((*zstep).value.str.val), sizeof ((*zstep).value.str.val), &((*zstep).value.str.len), sizeof ((*zstep).value.str.len), &(is_step_double), sizeof (is_step_double), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &((*zstep).refcount__gc), sizeof ((*zstep).refcount__gc), &((*zstep).is_ref__gc), sizeof ((*zstep).is_ref__gc)) && ((*zstep).type == 2 || ((*zstep).type == 6 && is_numeric_string((*zstep).value.str.val, (*zstep).value.str.len, ((void *)0), ((void *)0), 0) == 2))) {\n    is_step_double = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.2426544403735846, -6.9890402803735849, -8.8688549803735857, -8.0775839503735849, -9.3649139913735837, -9.6404243703735855, -8.8825362703735848, -9.3460735703735853, -9.3460735703735853, -8.5881854703735847, -9.1130302803735859, -9.1130302803735859]
								}, {
									"case":	2,
									"scores":	[-4.0674404583735839, -2.8138262983735842, -4.6936409983735841, -3.9023699683735842, -5.1897000093735839, -5.4652103883735856, -4.707322288373585, -5.1708595883735855, -5.1708595883735855, -4.4129714883735849, -4.9378162983735852, -4.9378162983735852]
								}]
						}]
				}, {
					"line":	1632,
					"switches":	[{
							"switch":	10,
							"types":	[[], [], [], [], [326, 327, 328, 329], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [], [], [], [283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325], [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282], [], [], [], [], [], []],
							"begin_line":	1633,
							"begin_column":	1,
							"end_line":	1633,
							"end_column":	1,
							"patch_codes":	["memset(&(**&zstep), 0, sizeof (*(&(**&zstep))))", "memset(&(**&zstep).is_ref__gc, 0, sizeof (*(&(**&zstep).is_ref__gc)))", "memset(&(**&zstep).refcount__gc, 0, sizeof (*(&(**&zstep).refcount__gc)))", "memset(&(**&zstep).type, 0, sizeof (*(&(**&zstep).type)))", "memset(&(**&zstep).value, 0, sizeof (*(&(**&zstep).value)))", "memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset(&(*zstep).is_ref__gc, 0, sizeof (*(&(*zstep).is_ref__gc)))", "memset(&(*zstep).refcount__gc, 0, sizeof (*(&(*zstep).refcount__gc)))", "memset(&(*zstep).type, 0, sizeof (*(&(*zstep).type)))", "memset(&(*zstep).value, 0, sizeof (*(&(*zstep).value)))", "memset(&(*zstep).value.dval, 0, sizeof (*(&(*zstep).value.dval)))", "memset(&(*zstep).value.ht, 0, sizeof (*(&(*zstep).value.ht)))", "memset(&(*zstep).value.lval, 0, sizeof (*(&(*zstep).value.lval)))", "memset(&(*zstep).value.obj, 0, sizeof (*(&(*zstep).value.obj)))", "memset(&(*zstep).value.str, 0, sizeof (*(&(*zstep).value.str)))", "memset(&(*zstep).value.str.len, 0, sizeof (*(&(*zstep).value.str.len)))", "memset(&(*zstep).value.str.val, 0, sizeof (*(&(*zstep).value.str.val)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "memset((*zstep).value.ht, 0, sizeof (*((*zstep).value.ht)))", "memset((*zstep).value.str.val, 0, sizeof (*((*zstep).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_null(*(return_value_ptr))", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (step)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "is_step_double = 1", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1633\", 13, &(zstep), sizeof (zstep), &((**&zstep).type), sizeof ((**&zstep).type), &(is_step_double), sizeof (is_step_double), &((*zstep).type), sizeof ((*zstep).type), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &((**&zstep).refcount__gc), sizeof ((**&zstep).refcount__gc), &((**&zstep).is_ref__gc), sizeof ((**&zstep).is_ref__gc), &((*zstep).refcount__gc), sizeof ((*zstep).refcount__gc), &((*zstep).is_ref__gc), sizeof ((*zstep).is_ref__gc)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1633\", 13, &(zstep), sizeof (zstep), &((**&zstep).type), sizeof ((**&zstep).type), &(is_step_double), sizeof (is_step_double), &((*zstep).type), sizeof ((*zstep).type), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &((**&zstep).refcount__gc), sizeof ((**&zstep).refcount__gc), &((**&zstep).is_ref__gc), sizeof ((**&zstep).is_ref__gc), &((*zstep).refcount__gc), sizeof ((*zstep).refcount__gc), &((*zstep).is_ref__gc), sizeof ((*zstep).is_ref__gc)))\n    goto err;\n", "if (__is_neg(\"\", \"L1633\", 13, &(zstep), sizeof (zstep), &((**&zstep).type), sizeof ((**&zstep).type), &(is_step_double), sizeof (is_step_double), &((*zstep).type), sizeof ((*zstep).type), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &((**&zstep).refcount__gc), sizeof ((**&zstep).refcount__gc), &((**&zstep).is_ref__gc), sizeof ((**&zstep).is_ref__gc), &((*zstep).refcount__gc), sizeof ((*zstep).refcount__gc), &((*zstep).is_ref__gc), sizeof ((*zstep).is_ref__gc)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1633\", 13, &(zstep), sizeof (zstep), &((**&zstep).type), sizeof ((**&zstep).type), &(is_step_double), sizeof (is_step_double), &((*zstep).type), sizeof ((*zstep).type), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &((**&zstep).refcount__gc), sizeof ((**&zstep).refcount__gc), &((**&zstep).is_ref__gc), sizeof ((**&zstep).is_ref__gc), &((*zstep).refcount__gc), sizeof ((*zstep).refcount__gc), &((*zstep).is_ref__gc), sizeof ((*zstep).is_ref__gc)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	2,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	3,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	4,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	5,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	6,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	7,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	8,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	9,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	10,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	11,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	12,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	13,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	14,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	15,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	16,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	17,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	18,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	19,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	20,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	21,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	22,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	23,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	24,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	25,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	26,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	27,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	28,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	29,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	30,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	31,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	32,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	33,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	34,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	35,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	36,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	37,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	38,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	39,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	40,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	41,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	42,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	43,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	44,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	45,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	46,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	47,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	48,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	49,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	50,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	51,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	52,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	53,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	54,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	55,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	56,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	57,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	58,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	59,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	60,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	61,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	62,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	63,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	64,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	65,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	66,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	67,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	68,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	69,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	70,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	71,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	72,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	73,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	74,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	75,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	76,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	77,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	78,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	79,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	80,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	81,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	82,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	83,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	84,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	85,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	86,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	87,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	88,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	89,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	90,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	91,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	92,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	93,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	94,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	95,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	96,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	97,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	98,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	99,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	100,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	101,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	102,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	103,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	104,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	105,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	106,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	107,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	108,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	109,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	110,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	111,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	112,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	113,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	114,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	115,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	116,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	117,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	118,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	119,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	120,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	121,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	122,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	123,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	124,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	125,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	126,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	127,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	128,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	129,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	130,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	131,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	132,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	133,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	134,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	135,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	136,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	137,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	138,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	139,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	140,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	141,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	142,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	143,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	144,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	145,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	146,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	147,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	148,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	149,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	150,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	151,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	152,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	153,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	154,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	155,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	156,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	157,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	158,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	159,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	160,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	161,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	162,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	163,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	164,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	165,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	166,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	167,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	168,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	169,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	170,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	171,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	172,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	173,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	174,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	175,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	176,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	177,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	178,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	179,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	180,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	181,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	182,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	183,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	184,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	185,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	186,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	187,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	188,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	189,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	190,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	191,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	192,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	193,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	194,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	195,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	196,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	197,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	198,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	199,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	200,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	201,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	202,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	203,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	204,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	205,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	206,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	207,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	208,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	209,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	210,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	211,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	212,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	213,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	214,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	215,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	216,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	217,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	218,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	219,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	220,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	221,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	222,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	223,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	224,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	225,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	226,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	227,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	228,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	229,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	230,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	231,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	232,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	233,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	234,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	235,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	236,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	237,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	238,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	239,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	240,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	241,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	242,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	243,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	244,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	245,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	246,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	247,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	248,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	249,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	250,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	251,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	252,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	253,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	254,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	255,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	256,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	257,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	258,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	259,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	260,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	261,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	262,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	263,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	264,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	265,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	266,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	267,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	268,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	269,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	270,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	271,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	272,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	273,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	274,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	275,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	276,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	277,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	278,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	279,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	280,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	281,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	282,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	283,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	284,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	285,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	286,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	287,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	288,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	289,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	290,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	291,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	292,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	293,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	294,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	295,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	296,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	297,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	298,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	299,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	300,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	301,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	302,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	303,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	304,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	305,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	306,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	307,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	308,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	309,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	310,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	311,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	312,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	313,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	314,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	315,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	316,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	317,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	318,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	319,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	320,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	321,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	322,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	323,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	324,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	325,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	326,
									"scores":	[-11.061896182856067, -11.878442093056066, -9.8467981340560655, -11.419798473056066, -11.380595612856066, -11.134556699056066, -11.343495212856066, -11.343495212856066, -11.097456299056066, -11.911602473056064, -11.911602473056064, -11.911602473056064, -11.911602473056064]
								}, {
									"case":	327,
									"scores":	[-11.061896182856067, -11.878442093056066, -9.8467981340560655, -11.419798473056066, -11.380595612856066, -11.134556699056066, -11.343495212856066, -11.343495212856066, -11.097456299056066, -11.911602473056064, -11.911602473056064, -11.911602473056064, -11.911602473056064]
								}, {
									"case":	328,
									"scores":	[-11.061896182856067, -11.878442093056066, -9.8467981340560655, -11.419798473056066, -11.380595612856066, -11.134556699056066, -11.343495212856066, -11.343495212856066, -11.097456299056066, -11.911602473056064, -11.911602473056064, -11.911602473056064, -11.911602473056064]
								}, {
									"case":	329,
									"scores":	[-11.062896182856067, -11.879442093056065, -9.847798134056065, -11.420798473056065, -11.381595612856067, -11.135556699056066, -11.344495212856067, -11.344495212856067, -11.098456299056066, -11.912602473056065, -11.912602473056065, -11.912602473056065, -11.912602473056065]
								}]
						}, {
							"switch":	11,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1633,
							"begin_column":	3,
							"end_line":	1633,
							"end_column":	30,
							"patch_codes":	["if (__is_neg(\"\", \"L1633\", 13, &(zstep), sizeof (zstep), &((**&zstep).type), sizeof ((**&zstep).type), &(is_step_double), sizeof (is_step_double), &((*zstep).type), sizeof ((*zstep).type), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &((**&zstep).refcount__gc), sizeof ((**&zstep).refcount__gc), &((**&zstep).is_ref__gc), sizeof ((**&zstep).is_ref__gc), &((*zstep).refcount__gc), sizeof ((*zstep).refcount__gc), &((*zstep).is_ref__gc), sizeof ((*zstep).is_ref__gc))) {\n    if (!zval_isref_p(*&zstep)) {\n        do {\n            if (zval_refcount_p(*((&zstep))) > 1) {\n                zval *new_zv;\n                zval_delref_p(*(&zstep));\n                do {\n                    (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                } while (0);\n                do {\n                    do {\n                        (new_zv)->value = (*(&zstep))->value;\n                        (*new_zv).type = (**(&zstep)).type;\n                    } while (0);\n                    zval_set_refcount_p(new_zv, 1);\n                    zval_unset_isref_p(new_zv);\n                } while (0);\n                *(&zstep) = new_zv;\n                _zval_copy_ctor((new_zv));\n            }\n        } while (0);\n    }\n    ;\n    convert_to_double(*&zstep);\n}\n", "if (((**&zstep).type != 2) || __is_neg(\"\", \"L1633\", 13, &(zstep), sizeof (zstep), &((**&zstep).type), sizeof ((**&zstep).type), &(is_step_double), sizeof (is_step_double), &((*zstep).type), sizeof ((*zstep).type), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &((**&zstep).refcount__gc), sizeof ((**&zstep).refcount__gc), &((**&zstep).is_ref__gc), sizeof ((**&zstep).is_ref__gc), &((*zstep).refcount__gc), sizeof ((*zstep).refcount__gc), &((*zstep).is_ref__gc), sizeof ((*zstep).is_ref__gc))) {\n    if (!zval_isref_p(*&zstep)) {\n        do {\n            if (zval_refcount_p(*((&zstep))) > 1) {\n                zval *new_zv;\n                zval_delref_p(*(&zstep));\n                do {\n                    (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                } while (0);\n                do {\n                    do {\n                        (new_zv)->value = (*(&zstep))->value;\n                        (*new_zv).type = (**(&zstep)).type;\n                    } while (0);\n                    zval_set_refcount_p(new_zv, 1);\n                    zval_unset_isref_p(new_zv);\n                } while (0);\n                *(&zstep) = new_zv;\n                _zval_copy_ctor((new_zv));\n            }\n        } while (0);\n    }\n    ;\n    convert_to_double(*&zstep);\n}\n", "if (((**&zstep).type != 2) && !__is_neg(\"\", \"L1633\", 13, &(zstep), sizeof (zstep), &((**&zstep).type), sizeof ((**&zstep).type), &(is_step_double), sizeof (is_step_double), &((*zstep).type), sizeof ((*zstep).type), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &((**&zstep).refcount__gc), sizeof ((**&zstep).refcount__gc), &((**&zstep).is_ref__gc), sizeof ((**&zstep).is_ref__gc), &((*zstep).refcount__gc), sizeof ((*zstep).refcount__gc), &((*zstep).is_ref__gc), sizeof ((*zstep).is_ref__gc))) {\n    if (!zval_isref_p(*&zstep)) {\n        do {\n            if (zval_refcount_p(*((&zstep))) > 1) {\n                zval *new_zv;\n                zval_delref_p(*(&zstep));\n                do {\n                    (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                } while (0);\n                do {\n                    do {\n                        (new_zv)->value = (*(&zstep))->value;\n                        (*new_zv).type = (**(&zstep)).type;\n                    } while (0);\n                    zval_set_refcount_p(new_zv, 1);\n                    zval_unset_isref_p(new_zv);\n                } while (0);\n                *(&zstep) = new_zv;\n                _zval_copy_ctor((new_zv));\n            }\n        } while (0);\n    }\n    ;\n    convert_to_double(*&zstep);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.4713290377281449, -2.3373897772281476, -3.9712871072281457, -4.0746239372281465, -4.9887738672281463, -4.2308857672281466, -4.6944230672281462, -4.6944230672281462, -3.9365349672281464, -4.4613797772281467, -4.4613797772281467, -4.4613797772281467, -4.4613797772281467]
								}, {
									"case":	2,
									"scores":	[-5.0324769206281461, -2.8985376601281452, -4.5324349901281451, -4.6357718201281459, -5.5499217501281457, -4.792033650128146, -5.2555709501281456, -5.2555709501281456, -4.4976828501281458, -5.0225276601281461, -5.0225276601281461, -5.0225276601281461, -5.0225276601281461]
								}, {
									"case":	3,
									"scores":	[-5.0324769206281461, -2.8985376601281452, -4.5324349901281451, -4.6357718201281459, -5.5499217501281457, -4.792033650128146, -5.2555709501281456, -5.2555709501281456, -4.4976828501281458, -5.0225276601281461, -5.0225276601281461, -5.0225276601281461, -5.0225276601281461]
								}]
						}, {
							"switch":	12,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1633,
							"begin_column":	3,
							"end_line":	1633,
							"end_column":	30,
							"patch_codes":	["if (!__is_neg(\"\", \"L1633\", 13, &(zstep), sizeof (zstep), &((**&zstep).type), sizeof ((**&zstep).type), &(is_step_double), sizeof (is_step_double), &((*zstep).type), sizeof ((*zstep).type), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &((**&zstep).refcount__gc), sizeof ((**&zstep).refcount__gc), &((**&zstep).is_ref__gc), sizeof ((**&zstep).is_ref__gc), &((*zstep).refcount__gc), sizeof ((*zstep).refcount__gc), &((*zstep).is_ref__gc), sizeof ((*zstep).is_ref__gc)))\n    if ((**&zstep).type != 2) {\n        if (!zval_isref_p(*&zstep)) {\n            do {\n                if (zval_refcount_p(*((&zstep))) > 1) {\n                    zval *new_zv;\n                    zval_delref_p(*(&zstep));\n                    do {\n                        (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                        ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                    } while (0);\n                    do {\n                        do {\n                            (new_zv)->value = (*(&zstep))->value;\n                            (*new_zv).type = (**(&zstep)).type;\n                        } while (0);\n                        zval_set_refcount_p(new_zv, 1);\n                        zval_unset_isref_p(new_zv);\n                    } while (0);\n                    *(&zstep) = new_zv;\n                    _zval_copy_ctor((new_zv));\n                }\n            } while (0);\n        }\n        ;\n        convert_to_double(*&zstep);\n    }\n", "if (!__is_neg(\"\", \"L1633\", 13, &(zstep), sizeof (zstep), &((**&zstep).type), sizeof ((**&zstep).type), &(is_step_double), sizeof (is_step_double), &((*zstep).type), sizeof ((*zstep).type), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &((**&zstep).refcount__gc), sizeof ((**&zstep).refcount__gc), &((**&zstep).is_ref__gc), sizeof ((**&zstep).is_ref__gc), &((*zstep).refcount__gc), sizeof ((*zstep).refcount__gc), &((*zstep).is_ref__gc), sizeof ((*zstep).is_ref__gc)) && ((**&zstep).type != 2)) {\n    if (!zval_isref_p(*&zstep)) {\n        do {\n            if (zval_refcount_p(*((&zstep))) > 1) {\n                zval *new_zv;\n                zval_delref_p(*(&zstep));\n                do {\n                    (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                } while (0);\n                do {\n                    do {\n                        (new_zv)->value = (*(&zstep))->value;\n                        (*new_zv).type = (**(&zstep)).type;\n                    } while (0);\n                    zval_set_refcount_p(new_zv, 1);\n                    zval_unset_isref_p(new_zv);\n                } while (0);\n                *(&zstep) = new_zv;\n                _zval_copy_ctor((new_zv));\n            }\n        } while (0);\n    }\n    ;\n    convert_to_double(*&zstep);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.2754232335560651, -7.1414839730560651, -8.775381303056065, -8.8787181330560649, -9.7928680630560656, -9.0349799630560668, -9.4985172630560655, -9.4985172630560655, -8.7406291630560666, -9.265473973056066, -9.265473973056066, -9.265473973056066, -9.265473973056066]
								}, {
									"case":	2,
									"scores":	[-9.1512466082560664, -7.0173073477560655, -8.6512046777560663, -8.7545415077560662, -9.6686914377560651, -8.9108033377560663, -9.3743406377560667, -9.3743406377560667, -8.6164525377560661, -9.1412973477560655, -9.1412973477560655, -9.1412973477560655, -9.1412973477560655]
								}]
						}]
				}, {
					"line":	1633,
					"switches":	[{
							"switch":	13,
							"types":	[[], [], [], [], [326, 327, 328, 329], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [], [], [], [283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325], [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282], [], [], [], [], [], []],
							"begin_line":	1634,
							"begin_column":	1,
							"end_line":	1634,
							"end_column":	1,
							"patch_codes":	["memset(&(**&zstep).is_ref__gc, 0, sizeof (*(&(**&zstep).is_ref__gc)))", "memset(&(**&zstep).refcount__gc, 0, sizeof (*(&(**&zstep).refcount__gc)))", "memset(&(**&zstep).type, 0, sizeof (*(&(**&zstep).type)))", "memset(&(**&zstep).value, 0, sizeof (*(&(**&zstep).value)))", "memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset(&(*zstep), 0, sizeof (*(&(*zstep))))", "memset(&(*zstep).is_ref__gc, 0, sizeof (*(&(*zstep).is_ref__gc)))", "memset(&(*zstep).refcount__gc, 0, sizeof (*(&(*zstep).refcount__gc)))", "memset(&(*zstep).type, 0, sizeof (*(&(*zstep).type)))", "memset(&(*zstep).value, 0, sizeof (*(&(*zstep).value)))", "memset(&(*zstep).value.dval, 0, sizeof (*(&(*zstep).value.dval)))", "memset(&(*zstep).value.ht, 0, sizeof (*(&(*zstep).value.ht)))", "memset(&(*zstep).value.lval, 0, sizeof (*(&(*zstep).value.lval)))", "memset(&(*zstep).value.obj, 0, sizeof (*(&(*zstep).value.obj)))", "memset(&(*zstep).value.str, 0, sizeof (*(&(*zstep).value.str)))", "memset(&(*zstep).value.str.len, 0, sizeof (*(&(*zstep).value.str.len)))", "memset(&(*zstep).value.str.val, 0, sizeof (*(&(*zstep).value.str.val)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "memset((*zstep).value.ht, 0, sizeof (*((*zstep).value.ht)))", "memset((*zstep).value.str.val, 0, sizeof (*((*zstep).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_null(*(return_value_ptr))", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (step)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "is_step_double = 1", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1634\", 13, &(zstep), sizeof (zstep), &((**&zstep).type), sizeof ((**&zstep).type), &(is_step_double), sizeof (is_step_double), &((*zstep).type), sizeof ((*zstep).type), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &((**&zstep).refcount__gc), sizeof ((**&zstep).refcount__gc), &((**&zstep).is_ref__gc), sizeof ((**&zstep).is_ref__gc), &((*zstep).refcount__gc), sizeof ((*zstep).refcount__gc), &((*zstep).is_ref__gc), sizeof ((*zstep).is_ref__gc)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1634\", 13, &(zstep), sizeof (zstep), &((**&zstep).type), sizeof ((**&zstep).type), &(is_step_double), sizeof (is_step_double), &((*zstep).type), sizeof ((*zstep).type), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &((**&zstep).refcount__gc), sizeof ((**&zstep).refcount__gc), &((**&zstep).is_ref__gc), sizeof ((**&zstep).is_ref__gc), &((*zstep).refcount__gc), sizeof ((*zstep).refcount__gc), &((*zstep).is_ref__gc), sizeof ((*zstep).is_ref__gc)))\n    goto err;\n", "if (__is_neg(\"\", \"L1634\", 13, &(zstep), sizeof (zstep), &((**&zstep).type), sizeof ((**&zstep).type), &(is_step_double), sizeof (is_step_double), &((*zstep).type), sizeof ((*zstep).type), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &((**&zstep).refcount__gc), sizeof ((**&zstep).refcount__gc), &((**&zstep).is_ref__gc), sizeof ((**&zstep).is_ref__gc), &((*zstep).refcount__gc), sizeof ((*zstep).refcount__gc), &((*zstep).is_ref__gc), sizeof ((*zstep).is_ref__gc)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1634\", 13, &(zstep), sizeof (zstep), &((**&zstep).type), sizeof ((**&zstep).type), &(is_step_double), sizeof (is_step_double), &((*zstep).type), sizeof ((*zstep).type), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &((**&zstep).refcount__gc), sizeof ((**&zstep).refcount__gc), &((**&zstep).is_ref__gc), sizeof ((**&zstep).is_ref__gc), &((*zstep).refcount__gc), sizeof ((*zstep).refcount__gc), &((*zstep).is_ref__gc), sizeof ((*zstep).is_ref__gc)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	2,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	3,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	4,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	5,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	6,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	7,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	8,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	9,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	10,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	11,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	12,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	13,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	14,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	15,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	16,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	17,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	18,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	19,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	20,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	21,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	22,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	23,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	24,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	25,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	26,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	27,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	28,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	29,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	30,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	31,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	32,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	33,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	34,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	35,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	36,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	37,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	38,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	39,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	40,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	41,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	42,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	43,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	44,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	45,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	46,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	47,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	48,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	49,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	50,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	51,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	52,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	53,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	54,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	55,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	56,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	57,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	58,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	59,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	60,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	61,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	62,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	63,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	64,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	65,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	66,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	67,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	68,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	69,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	70,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	71,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	72,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	73,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	74,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	75,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	76,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	77,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	78,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	79,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	80,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	81,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	82,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	83,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	84,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	85,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	86,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	87,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	88,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	89,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	90,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	91,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	92,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	93,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	94,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	95,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	96,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	97,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	98,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	99,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	100,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	101,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	102,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	103,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	104,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	105,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	106,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	107,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	108,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	109,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	110,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	111,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	112,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	113,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	114,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	115,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	116,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	117,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	118,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	119,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	120,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	121,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	122,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	123,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	124,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	125,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	126,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	127,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	128,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	129,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	130,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	131,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	132,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	133,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	134,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	135,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	136,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	137,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	138,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	139,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	140,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	141,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	142,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	143,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	144,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	145,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	146,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	147,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	148,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	149,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	150,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	151,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	152,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	153,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	154,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	155,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	156,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	157,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	158,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	159,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	160,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	161,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	162,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	163,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	164,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	165,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	166,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	167,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	168,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	169,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	170,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	171,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	172,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	173,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	174,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	175,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	176,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	177,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	178,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	179,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	180,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	181,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	182,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	183,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	184,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	185,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	186,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	187,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	188,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	189,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	190,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	191,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	192,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	193,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	194,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	195,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	196,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	197,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	198,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	199,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	200,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	201,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	202,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	203,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	204,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	205,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	206,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	207,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	208,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	209,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	210,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	211,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	212,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	213,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	214,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	215,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	216,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	217,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	218,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	219,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	220,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	221,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	222,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	223,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	224,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	225,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	226,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	227,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	228,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	229,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	230,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	231,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	232,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	233,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	234,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	235,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	236,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	237,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	238,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	239,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	240,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	241,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	242,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	243,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	244,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	245,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	246,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	247,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	248,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	249,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	250,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	251,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	252,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	253,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	254,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	255,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	256,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	257,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	258,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	259,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	260,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	261,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	262,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	263,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	264,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	265,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	266,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	267,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	268,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	269,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	270,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	271,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	272,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	273,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	274,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	275,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	276,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	277,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	278,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	279,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	280,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	281,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	282,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	283,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	284,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	285,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	286,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	287,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	288,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	289,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	290,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	291,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	292,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	293,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	294,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	295,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	296,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	297,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	298,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	299,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	300,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	301,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	302,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	303,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	304,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	305,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	306,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	307,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	308,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	309,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	310,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	311,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	312,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	313,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	314,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	315,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	316,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	317,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	318,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	319,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	320,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	321,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	322,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	323,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	324,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	325,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	326,
									"scores":	[-8.9587163582210252, -10.475990058421026, -8.9029897194210257, -10.475990058421026, -10.436787198221026, -10.190748284421026, -10.399686798221026, -10.399686798221026, -10.153647884421027, -10.967794058421028, -10.967794058421028, -10.967794058421028, -10.967794058421028]
								}, {
									"case":	327,
									"scores":	[-8.9587163582210252, -10.475990058421026, -8.9029897194210257, -10.475990058421026, -10.436787198221026, -10.190748284421026, -10.399686798221026, -10.399686798221026, -10.153647884421027, -10.967794058421028, -10.967794058421028, -10.967794058421028, -10.967794058421028]
								}, {
									"case":	328,
									"scores":	[-8.9587163582210252, -10.475990058421026, -8.9029897194210257, -10.475990058421026, -10.436787198221026, -10.190748284421026, -10.399686798221026, -10.399686798221026, -10.153647884421027, -10.967794058421028, -10.967794058421028, -10.967794058421028, -10.967794058421028]
								}, {
									"case":	329,
									"scores":	[-8.9597163582210264, -10.476990058421027, -8.9039897194210269, -10.476990058421027, -10.437787198221027, -10.191748284421028, -10.400686798221027, -10.400686798221027, -10.154647884421026, -10.968794058421027, -10.968794058421027, -10.968794058421027, -10.968794058421027]
								}]
						}, {
							"switch":	14,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1634,
							"begin_column":	3,
							"end_line":	1634,
							"end_column":	10,
							"patch_codes":	["if (!__is_neg(\"\", \"L1634\", 13, &(zstep), sizeof (zstep), &((**&zstep).type), sizeof ((**&zstep).type), &(is_step_double), sizeof (is_step_double), &((*zstep).type), sizeof ((*zstep).type), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &((**&zstep).refcount__gc), sizeof ((**&zstep).refcount__gc), &((**&zstep).is_ref__gc), sizeof ((**&zstep).is_ref__gc), &((*zstep).refcount__gc), sizeof ((*zstep).refcount__gc), &((*zstep).is_ref__gc), sizeof ((*zstep).is_ref__gc)))\n    step = (*zstep).value.dval;\n", "{\n}\n", "step = (*(&err)).value.dval", "step = (*(&ht)).value.dval", "step = (*(&is_step_double)).value.dval", "step = (*(&return_value)).value.dval", "step = (*(&return_value_ptr)).value.dval", "step = (*(&return_value_used)).value.dval", "step = (*(&step)).value.dval", "step = (*(&this_ptr)).value.dval", "step = (*(&zhigh)).value.dval", "step = (*(&zlow)).value.dval", "step = (*(&zstep)).value.dval", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (step)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.3361807929210263, -8.8997087184210262, -8.7963718884210262, -8.8997087184210262, -9.8138586484210268, -9.0559705484210262, -9.5195078484210267, -9.5195078484210267, -8.7616197484210261, -9.2864645584210272, -9.2864645584210272, -9.2864645584210272, -9.2864645584210272]
								}, {
									"case":	2,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	3,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	4,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	5,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	6,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	7,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	8,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	9,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	10,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	11,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	12,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	13,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	14,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	15,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	16,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	17,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	18,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	19,
									"scores":	[-6.9020236884210266]
								}]
						}]
				}, {
					"line":	1636,
					"switches":	[{
							"switch":	15,
							"types":	[[], [], [], [], [325, 326, 327, 328], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [], [], [], [282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324], [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281], [], [], [], [], [], []],
							"begin_line":	1637,
							"begin_column":	1,
							"end_line":	1637,
							"end_column":	1,
							"patch_codes":	["memset(&(**&zstep).is_ref__gc, 0, sizeof (*(&(**&zstep).is_ref__gc)))", "memset(&(**&zstep).refcount__gc, 0, sizeof (*(&(**&zstep).refcount__gc)))", "memset(&(**&zstep).type, 0, sizeof (*(&(**&zstep).type)))", "memset(&(**&zstep).value, 0, sizeof (*(&(**&zstep).value)))", "memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset(&(*zstep).is_ref__gc, 0, sizeof (*(&(*zstep).is_ref__gc)))", "memset(&(*zstep).refcount__gc, 0, sizeof (*(&(*zstep).refcount__gc)))", "memset(&(*zstep).type, 0, sizeof (*(&(*zstep).type)))", "memset(&(*zstep).value, 0, sizeof (*(&(*zstep).value)))", "memset(&(*zstep).value.dval, 0, sizeof (*(&(*zstep).value.dval)))", "memset(&(*zstep).value.ht, 0, sizeof (*(&(*zstep).value.ht)))", "memset(&(*zstep).value.lval, 0, sizeof (*(&(*zstep).value.lval)))", "memset(&(*zstep).value.obj, 0, sizeof (*(&(*zstep).value.obj)))", "memset(&(*zstep).value.str, 0, sizeof (*(&(*zstep).value.str)))", "memset(&(*zstep).value.str.len, 0, sizeof (*(&(*zstep).value.str.len)))", "memset(&(*zstep).value.str.val, 0, sizeof (*(&(*zstep).value.str.val)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "memset((*zstep).value.ht, 0, sizeof (*((*zstep).value.ht)))", "memset((*zstep).value.str.val, 0, sizeof (*((*zstep).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_null(*(return_value_ptr))", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (step)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "is_step_double = 1", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1637\", 7, &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(ht), sizeof (ht), &(err), sizeof (err)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1637\", 7, &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(ht), sizeof (ht), &(err), sizeof (err)))\n    goto err;\n", "if (__is_neg(\"\", \"L1637\", 7, &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(ht), sizeof (ht), &(err), sizeof (err)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1637\", 7, &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(ht), sizeof (ht), &(err), sizeof (err)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	2,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	3,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	4,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	5,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	6,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	7,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	8,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	9,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	10,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	11,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	12,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	13,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	14,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	15,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	16,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	17,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	18,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	19,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	20,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	21,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	22,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	23,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	24,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	25,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	26,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	27,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	28,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	29,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	30,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	31,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	32,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	33,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	34,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	35,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	36,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	37,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	38,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	39,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	40,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	41,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	42,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	43,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	44,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	45,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	46,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	47,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	48,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	49,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	50,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	51,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	52,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	53,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	54,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	55,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	56,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	57,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	58,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	59,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	60,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	61,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	62,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	63,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	64,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	65,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	66,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	67,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	68,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	69,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	70,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	71,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	72,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	73,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	74,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	75,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	76,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	77,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	78,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	79,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	80,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	81,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	82,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	83,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	84,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	85,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	86,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	87,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	88,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	89,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	90,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	91,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	92,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	93,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	94,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	95,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	96,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	97,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	98,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	99,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	100,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	101,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	102,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	103,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	104,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	105,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	106,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	107,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	108,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	109,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	110,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	111,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	112,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	113,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	114,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	115,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	116,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	117,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	118,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	119,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	120,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	121,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	122,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	123,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	124,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	125,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	126,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	127,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	128,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	129,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	130,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	131,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	132,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	133,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	134,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	135,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	136,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	137,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	138,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	139,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	140,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	141,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	142,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	143,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	144,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	145,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	146,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	147,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	148,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	149,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	150,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	151,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	152,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	153,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	154,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	155,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	156,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	157,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	158,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	159,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	160,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	161,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	162,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	163,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	164,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	165,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	166,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	167,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	168,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	169,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	170,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	171,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	172,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	173,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	174,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	175,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	176,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	177,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	178,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	179,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	180,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	181,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	182,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	183,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	184,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	185,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	186,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	187,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	188,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	189,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	190,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	191,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	192,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	193,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	194,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	195,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	196,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	197,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	198,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	199,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	200,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	201,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	202,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	203,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	204,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	205,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	206,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	207,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	208,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	209,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	210,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	211,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	212,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	213,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	214,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	215,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	216,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	217,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	218,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	219,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	220,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	221,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	222,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	223,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	224,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	225,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	226,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	227,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	228,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	229,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	230,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	231,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	232,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	233,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	234,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	235,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	236,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	237,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	238,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	239,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	240,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	241,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	242,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	243,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	244,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	245,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	246,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	247,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	248,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	249,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	250,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	251,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	252,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	253,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	254,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	255,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	256,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	257,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	258,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	259,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	260,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	261,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	262,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	263,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	264,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	265,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	266,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	267,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	268,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	269,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	270,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	271,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	272,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	273,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	274,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	275,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	276,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	277,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	278,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	279,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	280,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	281,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	282,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	283,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	284,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	285,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	286,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	287,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	288,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	289,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	290,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	291,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	292,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	293,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	294,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	295,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	296,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	297,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	298,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	299,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	300,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	301,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	302,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	303,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	304,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	305,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	306,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	307,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	308,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	309,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	310,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	311,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	312,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	313,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	314,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	315,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	316,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	317,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	318,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	319,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	320,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	321,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	322,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	323,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	324,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	325,
									"scores":	[-10.941155550903508, -11.224962190903508, -10.941822877103506, -11.187861790903508, -11.187861790903508, -10.978923277103506, -10.941822877103506]
								}, {
									"case":	326,
									"scores":	[-10.941155550903508, -11.224962190903508, -10.941822877103506, -11.187861790903508, -11.187861790903508, -10.978923277103506, -10.941822877103506]
								}, {
									"case":	327,
									"scores":	[-10.941155550903508, -11.224962190903508, -10.941822877103506, -11.187861790903508, -11.187861790903508, -10.978923277103506, -10.941822877103506]
								}, {
									"case":	328,
									"scores":	[-10.942155550903507, -11.225962190903507, -10.942822877103506, -11.188861790903507, -11.188861790903507, -10.979923277103506, -10.942822877103506]
								}]
						}, {
							"switch":	16,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1637,
							"begin_column":	3,
							"end_line":	1639,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L1637\", 7, &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(ht), sizeof (ht), &(err), sizeof (err))) {\n    step *= -1;\n}\n", "if ((step < 0.) || __is_neg(\"\", \"L1637\", 7, &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(ht), sizeof (ht), &(err), sizeof (err))) {\n    step *= -1;\n}\n", "if ((step < 0.) && !__is_neg(\"\", \"L1637\", 7, &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(ht), sizeof (ht), &(err), sizeof (err))) {\n    step *= -1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.498692143928146, -8.2830750094281456, -7.2308361094281448, -7.9887242094281454, -7.9887242094281454, -7.5251869094281449, -7.2308361094281448]
								}, {
									"case":	2,
									"scores":	[-5.1559296939281456, -5.9403125594281461, -4.8880736594281462, -5.6459617594281459, -5.6459617594281459, -5.1824244594281463, -4.8880736594281462]
								}, {
									"case":	3,
									"scores":	[-5.1559296939281456, -5.9403125594281461, -4.8880736594281462, -5.6459617594281459, -5.6459617594281459, -5.1824244594281463, -4.8880736594281462]
								}]
						}, {
							"switch":	17,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1637,
							"begin_column":	3,
							"end_line":	1639,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L1637\", 7, &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(ht), sizeof (ht), &(err), sizeof (err)))\n    if (step < 0.) {\n        step *= -1;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.66272638560351, -10.447109251103507, -9.3948703511035063, -10.152758451103507, -10.152758451103507, -9.6892211511035065, -9.3948703511035063]
								}]
						}]
				}, {
					"line":	1625,
					"switches":	[{
							"switch":	3,
							"types":	[[], [], [], [], [308, 309, 310, 311], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [], [], [], [265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307], [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], [], [], [], [], [], []],
							"begin_line":	1626,
							"begin_column":	0,
							"end_line":	1626,
							"end_column":	0,
							"patch_codes":	["memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_null(*(return_value_ptr))", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (step)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "is_step_double = 1", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1626\", 7, &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(err), sizeof (err)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1626\", 7, &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(err), sizeof (err)))\n    goto err;\n", "if (__is_neg(\"\", \"L1626\", 7, &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(err), sizeof (err)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1626\", 7, &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(err), sizeof (err)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	2,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	3,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	4,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	5,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	6,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	7,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	8,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	9,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	10,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	11,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	12,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	13,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	14,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	15,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	16,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	17,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	18,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	19,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	20,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	21,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	22,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	23,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	24,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	25,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	26,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	27,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	28,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	29,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	30,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	31,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	32,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	33,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	34,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	35,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	36,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	37,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	38,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	39,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	40,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	41,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	42,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	43,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	44,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	45,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	46,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	47,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	48,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	49,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	50,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	51,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	52,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	53,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	54,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	55,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	56,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	57,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	58,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	59,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	60,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	61,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	62,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	63,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	64,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	65,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	66,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	67,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	68,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	69,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	70,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	71,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	72,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	73,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	74,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	75,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	76,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	77,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	78,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	79,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	80,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	81,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	82,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	83,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	84,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	85,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	86,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	87,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	88,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	89,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	90,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	91,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	92,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	93,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	94,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	95,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	96,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	97,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	98,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	99,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	100,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	101,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	102,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	103,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	104,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	105,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	106,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	107,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	108,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	109,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	110,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	111,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	112,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	113,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	114,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	115,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	116,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	117,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	118,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	119,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	120,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	121,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	122,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	123,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	124,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	125,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	126,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	127,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	128,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	129,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	130,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	131,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	132,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	133,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	134,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	135,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	136,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	137,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	138,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	139,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	140,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	141,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	142,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	143,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	144,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	145,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	146,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	147,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	148,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	149,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	150,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	151,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	152,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	153,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	154,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	155,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	156,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	157,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	158,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	159,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	160,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	161,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	162,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	163,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	164,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	165,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	166,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	167,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	168,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	169,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	170,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	171,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	172,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	173,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	174,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	175,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	176,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	177,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	178,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	179,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	180,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	181,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	182,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	183,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	184,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	185,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	186,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	187,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	188,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	189,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	190,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	191,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	192,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	193,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	194,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	195,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	196,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	197,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	198,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	199,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	200,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	201,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	202,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	203,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	204,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	205,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	206,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	207,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	208,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	209,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	210,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	211,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	212,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	213,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	214,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	215,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	216,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	217,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	218,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	219,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	220,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	221,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	222,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	223,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	224,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	225,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	226,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	227,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	228,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	229,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	230,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	231,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	232,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	233,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	234,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	235,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	236,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	237,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	238,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	239,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	240,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	241,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	242,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	243,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	244,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	245,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	246,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	247,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	248,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	249,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	250,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	251,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	252,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	253,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	254,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	255,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	256,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	257,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	258,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	259,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	260,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	261,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	262,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	263,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	264,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	265,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	266,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	267,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	268,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	269,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	270,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	271,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	272,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	273,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	274,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	275,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	276,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	277,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	278,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	279,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	280,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	281,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	282,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	283,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	284,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	285,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	286,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	287,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	288,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	289,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	290,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	291,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	292,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	293,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	294,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	295,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	296,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	297,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	298,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	299,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	300,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	301,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	302,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	303,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	304,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	305,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	306,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	307,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	308,
									"scores":	[-10.224277207686766, -11.698965490686767, -11.327358003886767, -11.643336444586765, -11.643646987586767, -11.006394340886766, -11.368123516886765]
								}, {
									"case":	309,
									"scores":	[-10.224277207686766, -11.698965490686767, -11.327358003886767, -11.643336444586765, -11.643646987586767, -11.006394340886766, -11.368123516886765]
								}, {
									"case":	310,
									"scores":	[-10.224277207686766, -11.698965490686767, -11.327358003886767, -11.643336444586765, -11.643646987586767, -11.006394340886766, -11.368123516886765]
								}, {
									"case":	311,
									"scores":	[-10.225277207686766, -11.699965490686767, -11.328358003886766, -11.644336444586767, -11.644646987586766, -11.007394340886766, -11.369123516886766]
								}]
						}, {
							"switch":	4,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1626,
							"begin_column":	2,
							"end_line":	1640,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L1626\", 7, &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(err), sizeof (err))) {\n    if ((*zstep).type == 2 || ((*zstep).type == 6 && is_numeric_string((*zstep).value.str.val, (*zstep).value.str.len, ((void *)0), ((void *)0), 0) == 2)) {\n        is_step_double = 1;\n    }\n    if ((**&zstep).type != 2) {\n        if (!zval_isref_p(*&zstep)) {\n            do {\n                if (zval_refcount_p(*((&zstep))) > 1) {\n                    zval *new_zv;\n                    zval_delref_p(*(&zstep));\n                    do {\n                        (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                        ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                    } while (0);\n                    do {\n                        do {\n                            (new_zv)->value = (*(&zstep))->value;\n                            (*new_zv).type = (**(&zstep)).type;\n                        } while (0);\n                        zval_set_refcount_p(new_zv, 1);\n                        zval_unset_isref_p(new_zv);\n                    } while (0);\n                    *(&zstep) = new_zv;\n                    _zval_copy_ctor((new_zv));\n                }\n            } while (0);\n        }\n        ;\n        convert_to_double(*&zstep);\n    }\n    ;\n    step = (*zstep).value.dval;\n    if (step < 0.) {\n        step *= -1;\n    }\n}\n", "if ((zstep) || __is_neg(\"\", \"L1626\", 7, &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(err), sizeof (err))) {\n    if ((*zstep).type == 2 || ((*zstep).type == 6 && is_numeric_string((*zstep).value.str.val, (*zstep).value.str.len, ((void *)0), ((void *)0), 0) == 2)) {\n        is_step_double = 1;\n    }\n    if ((**&zstep).type != 2) {\n        if (!zval_isref_p(*&zstep)) {\n            do {\n                if (zval_refcount_p(*((&zstep))) > 1) {\n                    zval *new_zv;\n                    zval_delref_p(*(&zstep));\n                    do {\n                        (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                        ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                    } while (0);\n                    do {\n                        do {\n                            (new_zv)->value = (*(&zstep))->value;\n                            (*new_zv).type = (**(&zstep)).type;\n                        } while (0);\n                        zval_set_refcount_p(new_zv, 1);\n                        zval_unset_isref_p(new_zv);\n                    } while (0);\n                    *(&zstep) = new_zv;\n                    _zval_copy_ctor((new_zv));\n                }\n            } while (0);\n        }\n        ;\n        convert_to_double(*&zstep);\n    }\n    ;\n    step = (*zstep).value.dval;\n    if (step < 0.) {\n        step *= -1;\n    }\n}\n", "if ((zstep) && !__is_neg(\"\", \"L1626\", 7, &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(err), sizeof (err))) {\n    if ((*zstep).type == 2 || ((*zstep).type == 6 && is_numeric_string((*zstep).value.str.val, (*zstep).value.str.len, ((void *)0), ((void *)0), 0) == 2)) {\n        is_step_double = 1;\n    }\n    if ((**&zstep).type != 2) {\n        if (!zval_isref_p(*&zstep)) {\n            do {\n                if (zval_refcount_p(*((&zstep))) > 1) {\n                    zval *new_zv;\n                    zval_delref_p(*(&zstep));\n                    do {\n                        (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                        ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                    } while (0);\n                    do {\n                        do {\n                            (new_zv)->value = (*(&zstep))->value;\n                            (*new_zv).type = (**(&zstep)).type;\n                        } while (0);\n                        zval_set_refcount_p(new_zv, 1);\n                        zval_unset_isref_p(new_zv);\n                    } while (0);\n                    *(&zstep) = new_zv;\n                    _zval_copy_ctor((new_zv));\n                }\n            } while (0);\n        }\n        ;\n        convert_to_double(*&zstep);\n    }\n    ;\n    step = (*zstep).value.dval;\n    if (step < 0.) {\n        step *= -1;\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.5774855605281406, -3.5361952355281385, -3.54754977252814, -4.17800400942814, -4.17735424742814, -3.9409446475281418, -3.1607348705281417]
								}, {
									"case":	2,
									"scores":	[-3.0369748814281463, -4.995684556428146, -5.0070390934281459, -5.6374933303281463, -5.6368435683281461, -5.4004339684281462, -4.6202241914281457]
								}, {
									"case":	3,
									"scores":	[-3.0369748814281463, -4.995684556428146, -5.0070390934281459, -5.6374933303281463, -5.6368435683281461, -5.4004339684281462, -4.6202241914281457]
								}]
						}, {
							"switch":	18,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1626,
							"begin_column":	2,
							"end_line":	1640,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L1626\", 7, &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(err), sizeof (err)))\n    if (zstep) {\n        if ((*zstep).type == 2 || ((*zstep).type == 6 && is_numeric_string((*zstep).value.str.val, (*zstep).value.str.len, ((void *)0), ((void *)0), 0) == 2)) {\n            is_step_double = 1;\n        }\n        if ((**&zstep).type != 2) {\n            if (!zval_isref_p(*&zstep)) {\n                do {\n                    if (zval_refcount_p(*((&zstep))) > 1) {\n                        zval *new_zv;\n                        zval_delref_p(*(&zstep));\n                        do {\n                            (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                            ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                        } while (0);\n                        do {\n                            do {\n                                (new_zv)->value = (*(&zstep))->value;\n                                (*new_zv).type = (**(&zstep)).type;\n                            } while (0);\n                            zval_set_refcount_p(new_zv, 1);\n                            zval_unset_isref_p(new_zv);\n                        } while (0);\n                        *(&zstep) = new_zv;\n                        _zval_copy_ctor((new_zv));\n                    }\n                } while (0);\n            }\n            ;\n            convert_to_double(*&zstep);\n        }\n        ;\n        step = (*zstep).value.dval;\n        if (step < 0.) {\n            step *= -1;\n        }\n    }\n", "if (!__is_neg(\"\", \"L1626\", 7, &(zstep), sizeof (zstep), &(return_value), sizeof (return_value), &(ht), sizeof (ht), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(err), sizeof (err)) && (zstep)) {\n    if ((*zstep).type == 2 || ((*zstep).type == 6 && is_numeric_string((*zstep).value.str.val, (*zstep).value.str.len, ((void *)0), ((void *)0), 0) == 2)) {\n        is_step_double = 1;\n    }\n    if ((**&zstep).type != 2) {\n        if (!zval_isref_p(*&zstep)) {\n            do {\n                if (zval_refcount_p(*((&zstep))) > 1) {\n                    zval *new_zv;\n                    zval_delref_p(*(&zstep));\n                    do {\n                        (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                        ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                    } while (0);\n                    do {\n                        do {\n                            (new_zv)->value = (*(&zstep))->value;\n                            (*new_zv).type = (**(&zstep)).type;\n                        } while (0);\n                        zval_set_refcount_p(new_zv, 1);\n                        zval_unset_isref_p(new_zv);\n                    } while (0);\n                    *(&zstep) = new_zv;\n                    _zval_copy_ctor((new_zv));\n                }\n            } while (0);\n        }\n        ;\n        convert_to_double(*&zstep);\n    }\n    ;\n    step = (*zstep).value.dval;\n    if (step < 0.) {\n        step *= -1;\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.3705487604867663, -9.329258435486766, -9.3406129724867668, -9.9710672093867672, -9.9704174473867671, -9.7340078474867653, -8.9537980704867657]
								}, {
									"case":	2,
									"scores":	[-7.1736297604867669, -9.1323394354867666, -9.1436939724867656, -9.774148209386766, -9.7734984473867659, -9.5370888474867659, -8.7568790704867663]
								}]
						}]
				}, {
					"line":	1642,
					"switches":	[{
							"switch":	19,
							"types":	[[], [], [], [], [308, 309, 310, 311], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [], [], [], [265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307], [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], [], [], [], [], [], []],
							"begin_line":	1643,
							"begin_column":	0,
							"end_line":	1643,
							"end_column":	0,
							"patch_codes":	["memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_null(*(return_value_ptr))", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (step)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "is_step_double = 1", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1643\", 7, &(return_value), sizeof (return_value), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(zstep), sizeof (zstep), &(is_step_double), sizeof (is_step_double), &(ht), sizeof (ht), &(err), sizeof (err)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1643\", 7, &(return_value), sizeof (return_value), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(zstep), sizeof (zstep), &(is_step_double), sizeof (is_step_double), &(ht), sizeof (ht), &(err), sizeof (err)))\n    goto err;\n", "if (__is_neg(\"\", \"L1643\", 7, &(return_value), sizeof (return_value), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(zstep), sizeof (zstep), &(is_step_double), sizeof (is_step_double), &(ht), sizeof (ht), &(err), sizeof (err)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1643\", 7, &(return_value), sizeof (return_value), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(zstep), sizeof (zstep), &(is_step_double), sizeof (is_step_double), &(ht), sizeof (ht), &(err), sizeof (err)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	3,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	4,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	5,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	6,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	7,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	8,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	9,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	10,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	11,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	12,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	13,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	14,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	15,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	16,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	17,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	18,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	19,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	20,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	21,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	22,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	23,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	24,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	25,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	26,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	27,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	28,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	29,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	30,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	31,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	32,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	33,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	34,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	35,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	36,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	37,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	38,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	39,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	40,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	41,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	42,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	43,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	44,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	45,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	46,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	47,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	48,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	49,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	50,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	51,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	52,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	53,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	54,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	55,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	56,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	57,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	58,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	59,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	60,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	61,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	62,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	63,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	64,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	65,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	66,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	67,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	68,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	69,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	70,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	71,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	72,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	73,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	74,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	75,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	76,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	77,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	78,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	79,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	80,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	81,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	82,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	83,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	84,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	85,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	86,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	87,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	88,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	89,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	90,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	91,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	92,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	93,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	94,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	95,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	96,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	97,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	98,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	99,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	100,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	101,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	102,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	103,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	104,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	105,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	106,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	107,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	108,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	109,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	110,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	111,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	112,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	113,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	114,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	115,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	116,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	117,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	118,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	119,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	120,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	121,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	122,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	123,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	124,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	125,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	126,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	127,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	128,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	129,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	130,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	131,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	132,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	133,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	134,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	135,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	136,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	137,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	138,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	139,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	140,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	141,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	142,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	143,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	144,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	145,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	146,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	147,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	148,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	149,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	150,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	151,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	152,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	153,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	154,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	155,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	156,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	157,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	158,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	159,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	160,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	161,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	162,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	163,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	164,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	165,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	166,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	167,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	168,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	169,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	170,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	171,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	172,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	173,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	174,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	175,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	176,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	177,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	178,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	179,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	180,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	181,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	182,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	183,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	184,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	185,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	186,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	187,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	188,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	189,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	190,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	191,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	192,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	193,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	194,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	195,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	196,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	197,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	198,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	199,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	200,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	201,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	202,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	203,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	204,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	205,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	206,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	207,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	208,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	209,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	210,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	211,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	212,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	213,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	214,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	215,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	216,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	217,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	218,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	219,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	220,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	221,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	222,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	223,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	224,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	225,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	226,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	227,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	228,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	229,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	230,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	231,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	232,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	233,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	234,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	235,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	236,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	237,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	238,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	239,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	240,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	241,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	242,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	243,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	244,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	245,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	246,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	247,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	248,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	249,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	250,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	251,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	252,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	253,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	254,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	255,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	256,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	257,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	258,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	259,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	260,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	261,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	262,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	263,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	264,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	265,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	266,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	267,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	268,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	269,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	270,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	271,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	272,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	273,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	274,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	275,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	276,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	277,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	278,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	279,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	280,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	281,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	282,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	283,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	284,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	285,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	286,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	287,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	288,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	289,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	290,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	291,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	292,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	293,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	294,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	295,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	296,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	297,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	298,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	299,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	300,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	301,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	302,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	303,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	304,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	305,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	306,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	307,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	308,
									"scores":	[-9.9396159613692472, -10.884977537269247, -10.885288080269245, -10.511117290369246, -9.2611264515692469, -10.568999096569247, -10.609764609569247]
								}, {
									"case":	309,
									"scores":	[-9.9396159613692472, -10.884977537269247, -10.885288080269245, -10.511117290369246, -9.2611264515692469, -10.568999096569247, -10.609764609569247]
								}, {
									"case":	310,
									"scores":	[-9.9396159613692472, -10.884977537269247, -10.885288080269245, -10.511117290369246, -9.2611264515692469, -10.568999096569247, -10.609764609569247]
								}, {
									"case":	311,
									"scores":	[-9.9406159613692466, -10.885977537269246, -10.886288080269246, -10.512117290369247, -9.2621264515692463, -10.569999096569248, -10.610764609569246]
								}]
						}, {
							"switch":	20,
							"types":	[[], [], [1], [], [], [], [2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279], [], [1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790], [], [], [1791]],
							"begin_line":	1643,
							"begin_column":	2,
							"end_line":	1643,
							"end_column":	25,
							"patch_codes":	["if (!__is_neg(\"\", \"L1643\", 7, &(return_value), sizeof (return_value), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(zstep), sizeof (zstep), &(is_step_double), sizeof (is_step_double), &(ht), sizeof (ht), &(err), sizeof (err)))\n    _array_init((return_value), 0);\n", "_IO_padn((return_value), 0, -1)", "_IO_padn((return_value), 0, 0)", "_IO_padn((return_value), 0, 1)", "_IO_padn((return_value), 0, 2)", "_IO_padn((return_value), 0, 255)", "_IO_padn((return_value), 0, 3)", "_IO_padn((return_value), 0, 6)", "_IO_seekpos((return_value), 0, -1)", "_IO_seekpos((return_value), 0, 0)", "_IO_seekpos((return_value), 0, 1)", "_IO_seekpos((return_value), 0, 2)", "_IO_seekpos((return_value), 0, 255)", "_IO_seekpos((return_value), 0, 3)", "_IO_seekpos((return_value), 0, 6)", "_IO_seekpos((return_value), 0, err)", "_IO_seekpos((return_value), 0, ht)", "_IO_seekpos((return_value), 0, is_step_double)", "_IO_seekpos((return_value), 0, le_index_ptr)", "_IO_seekpos((return_value), 0, return_value_used)", "_IO_sgetn((return_value), 0, -1)", "_IO_sgetn((return_value), 0, 0)", "_IO_sgetn((return_value), 0, 1)", "_IO_sgetn((return_value), 0, 2)", "_IO_sgetn((return_value), 0, 255)", "_IO_sgetn((return_value), 0, 3)", "_IO_sgetn((return_value), 0, 6)", "_IO_vfprintf((return_value), 0, 0)", "__assert((return_value), 0, -1)", "__assert((return_value), 0, 0)", "__assert((return_value), 0, 1)", "__assert((return_value), 0, 2)", "__assert((return_value), 0, 255)", "__assert((return_value), 0, 3)", "__assert((return_value), 0, 6)", "__assert((return_value), 0, err)", "__assert((return_value), 0, ht)", "__assert((return_value), 0, is_step_double)", "__assert((return_value), 0, le_index_ptr)", "__assert((return_value), 0, return_value_used)", "__mbrlen((return_value), 0, 0)", "__stpncpy((return_value), 0, -1)", "__stpncpy((return_value), 0, 0)", "__stpncpy((return_value), 0, 1)", "__stpncpy((return_value), 0, 2)", "__stpncpy((return_value), 0, 255)", "__stpncpy((return_value), 0, 3)", "__stpncpy((return_value), 0, 6)", "__strtok_r((return_value), 0, 0)", "__trident_output((return_value), 0, -1)", "__trident_output((return_value), 0, 0)", "__trident_output((return_value), 0, 1)", "__trident_output((return_value), 0, 2)", "__trident_output((return_value), 0, 255)", "__trident_output((return_value), 0, 3)", "__trident_output((return_value), 0, 6)", "__trident_output((return_value), 0, err)", "__trident_output((return_value), 0, ht)", "__trident_output((return_value), 0, is_step_double)", "__trident_output((return_value), 0, le_index_ptr)", "__trident_output((return_value), 0, return_value_used)", "_erealloc((return_value), 0, -1)", "_erealloc((return_value), 0, 0)", "_erealloc((return_value), 0, 1)", "_erealloc((return_value), 0, 2)", "_erealloc((return_value), 0, 255)", "_erealloc((return_value), 0, 3)", "_erealloc((return_value), 0, 6)", "_erealloc((return_value), 0, err)", "_erealloc((return_value), 0, ht)", "_erealloc((return_value), 0, is_step_double)", "_erealloc((return_value), 0, le_index_ptr)", "_erealloc((return_value), 0, return_value_used)", "_object_and_properties_init((return_value), 0, 0)", "_php_glob_stream_get_path((return_value), 0, 0)", "_php_glob_stream_get_pattern((return_value), 0, 0)", "_php_stream_copy_to_stream((return_value), 0, -1)", "_php_stream_copy_to_stream((return_value), 0, 0)", "_php_stream_copy_to_stream((return_value), 0, 1)", "_php_stream_copy_to_stream((return_value), 0, 2)", "_php_stream_copy_to_stream((return_value), 0, 255)", "_php_stream_copy_to_stream((return_value), 0, 3)", "_php_stream_copy_to_stream((return_value), 0, 6)", "_php_stream_filter_alloc((return_value), 0, -1)", "_php_stream_filter_alloc((return_value), 0, 0)", "_php_stream_filter_alloc((return_value), 0, 1)", "_php_stream_filter_alloc((return_value), 0, 2)", "_php_stream_filter_alloc((return_value), 0, 255)", "_php_stream_filter_alloc((return_value), 0, 3)", "_php_stream_filter_alloc((return_value), 0, 6)", "_php_stream_filter_alloc((return_value), 0, err)", "_php_stream_filter_alloc((return_value), 0, ht)", "_php_stream_filter_alloc((return_value), 0, is_step_double)", "_php_stream_filter_alloc((return_value), 0, le_index_ptr)", "_php_stream_filter_alloc((return_value), 0, return_value_used)", "_php_stream_fopen_temporary_file((return_value), 0, 0)", "_php_stream_fopen_temporary_file((return_value), 0, environ)", "_php_stream_make_seekable((return_value), 0, -1)", "_php_stream_make_seekable((return_value), 0, 0)", "_php_stream_make_seekable((return_value), 0, 1)", "_php_stream_make_seekable((return_value), 0, 2)", "_php_stream_make_seekable((return_value), 0, 255)", "_php_stream_make_seekable((return_value), 0, 3)", "_php_stream_make_seekable((return_value), 0, 6)", "_php_stream_make_seekable((return_value), 0, err)", "_php_stream_make_seekable((return_value), 0, ht)", "_php_stream_make_seekable((return_value), 0, is_step_double)", "_php_stream_make_seekable((return_value), 0, le_index_ptr)", "_php_stream_make_seekable((return_value), 0, return_value_used)", "_php_stream_opendir((return_value), 0, 0)", "_php_stream_read((return_value), 0, -1)", "_php_stream_read((return_value), 0, 0)", "_php_stream_read((return_value), 0, 1)", "_php_stream_read((return_value), 0, 2)", "_php_stream_read((return_value), 0, 255)", "_php_stream_read((return_value), 0, 3)", "_php_stream_read((return_value), 0, 6)", "_php_stream_rmdir((return_value), 0, 0)", "_php_stream_seek((return_value), 0, -1)", "_php_stream_seek((return_value), 0, 0)", "_php_stream_seek((return_value), 0, 1)", "_php_stream_seek((return_value), 0, 2)", "_php_stream_seek((return_value), 0, 255)", "_php_stream_seek((return_value), 0, 3)", "_php_stream_seek((return_value), 0, 6)", "_php_stream_seek((return_value), 0, err)", "_php_stream_seek((return_value), 0, ht)", "_php_stream_seek((return_value), 0, is_step_double)", "_php_stream_seek((return_value), 0, le_index_ptr)", "_php_stream_seek((return_value), 0, return_value_used)", "_php_stream_write((return_value), 0, -1)", "_php_stream_write((return_value), 0, 0)", "_php_stream_write((return_value), 0, 1)", "_php_stream_write((return_value), 0, 2)", "_php_stream_write((return_value), 0, 255)", "_php_stream_write((return_value), 0, 3)", "_php_stream_write((return_value), 0, 6)", "_zend_mm_realloc((return_value), 0, -1)", "_zend_mm_realloc((return_value), 0, 0)", "_zend_mm_realloc((return_value), 0, 1)", "_zend_mm_realloc((return_value), 0, 2)", "_zend_mm_realloc((return_value), 0, 255)", "_zend_mm_realloc((return_value), 0, 3)", "_zend_mm_realloc((return_value), 0, 6)", "add_assoc_function((return_value), 0, 0)", "add_assoc_function((return_value), 0, php_if_crc32)", "add_assoc_function((return_value), 0, php_if_lstat)", "add_assoc_function((return_value), 0, php_if_stat)", "add_assoc_function((return_value), 0, php_inet_ntop)", "add_assoc_function((return_value), 0, php_inet_pton)", "add_assoc_function((return_value), 0, zend_std_call_user_call)", "add_assoc_function((return_value), 0, zif_addcslashes)", "add_assoc_function((return_value), 0, zif_addslashes)", "add_assoc_function((return_value), 0, zif_array_change_key_case)", "add_assoc_function((return_value), 0, zif_array_chunk)", "add_assoc_function((return_value), 0, zif_array_combine)", "add_assoc_function((return_value), 0, zif_array_count_values)", "add_assoc_function((return_value), 0, zif_array_diff)", "add_assoc_function((return_value), 0, zif_array_diff_assoc)", "add_assoc_function((return_value), 0, zif_array_diff_key)", "add_assoc_function((return_value), 0, zif_array_diff_uassoc)", "add_assoc_function((return_value), 0, zif_array_diff_ukey)", "add_assoc_function((return_value), 0, zif_array_fill)", "add_assoc_function((return_value), 0, zif_array_fill_keys)", "add_assoc_function((return_value), 0, zif_array_filter)", "add_assoc_function((return_value), 0, zif_array_flip)", "add_assoc_function((return_value), 0, zif_array_intersect)", "add_assoc_function((return_value), 0, zif_array_intersect_assoc)", "add_assoc_function((return_value), 0, zif_array_intersect_key)", "add_assoc_function((return_value), 0, zif_array_intersect_uassoc)", "add_assoc_function((return_value), 0, zif_array_intersect_ukey)", "add_assoc_function((return_value), 0, zif_array_key_exists)", "add_assoc_function((return_value), 0, zif_array_keys)", "add_assoc_function((return_value), 0, zif_array_map)", "add_assoc_function((return_value), 0, zif_array_merge)", "add_assoc_function((return_value), 0, zif_array_merge_recursive)", "add_assoc_function((return_value), 0, zif_array_multisort)", "add_assoc_function((return_value), 0, zif_array_pad)", "add_assoc_function((return_value), 0, zif_array_pop)", "add_assoc_function((return_value), 0, zif_array_product)", "add_assoc_function((return_value), 0, zif_array_push)", "add_assoc_function((return_value), 0, zif_array_rand)", "add_assoc_function((return_value), 0, zif_array_reduce)", "add_assoc_function((return_value), 0, zif_array_replace)", "add_assoc_function((return_value), 0, zif_array_replace_recursive)", "add_assoc_function((return_value), 0, zif_array_reverse)", "add_assoc_function((return_value), 0, zif_array_search)", "add_assoc_function((return_value), 0, zif_array_shift)", "add_assoc_function((return_value), 0, zif_array_slice)", "add_assoc_function((return_value), 0, zif_array_splice)", "add_assoc_function((return_value), 0, zif_array_sum)", "add_assoc_function((return_value), 0, zif_array_udiff)", "add_assoc_function((return_value), 0, zif_array_udiff_assoc)", "add_assoc_function((return_value), 0, zif_array_udiff_uassoc)", "add_assoc_function((return_value), 0, zif_array_uintersect)", "add_assoc_function((return_value), 0, zif_array_uintersect_assoc)", "add_assoc_function((return_value), 0, zif_array_uintersect_uassoc)", "add_assoc_function((return_value), 0, zif_array_unique)", "add_assoc_function((return_value), 0, zif_array_unshift)", "add_assoc_function((return_value), 0, zif_array_values)", "add_assoc_function((return_value), 0, zif_array_walk)", "add_assoc_function((return_value), 0, zif_array_walk_recursive)", "add_assoc_function((return_value), 0, zif_arsort)", "add_assoc_function((return_value), 0, zif_asort)", "add_assoc_function((return_value), 0, zif_basename)", "add_assoc_function((return_value), 0, zif_bin2hex)", "add_assoc_function((return_value), 0, zif_call_user_func)", "add_assoc_function((return_value), 0, zif_call_user_func_array)", "add_assoc_function((return_value), 0, zif_call_user_method)", "add_assoc_function((return_value), 0, zif_call_user_method_array)", "add_assoc_function((return_value), 0, zif_chgrp)", "add_assoc_function((return_value), 0, zif_chmod)", "add_assoc_function((return_value), 0, zif_chown)", "add_assoc_function((return_value), 0, zif_chr)", "add_assoc_function((return_value), 0, zif_chunk_split)", "add_assoc_function((return_value), 0, zif_class_implements)", "add_assoc_function((return_value), 0, zif_class_parents)", "add_assoc_function((return_value), 0, zif_clearstatcache)", "add_assoc_function((return_value), 0, zif_compact)", "add_assoc_function((return_value), 0, zif_connection_aborted)", "add_assoc_function((return_value), 0, zif_connection_status)", "add_assoc_function((return_value), 0, zif_constant)", "add_assoc_function((return_value), 0, zif_count)", "add_assoc_function((return_value), 0, zif_count_chars)", "add_assoc_function((return_value), 0, zif_current)", "add_assoc_function((return_value), 0, zif_dirname)", "add_assoc_function((return_value), 0, zif_disk_free_space)", "add_assoc_function((return_value), 0, zif_disk_total_space)", "add_assoc_function((return_value), 0, zif_display_disabled_class)", "add_assoc_function((return_value), 0, zif_display_disabled_function)", "add_assoc_function((return_value), 0, zif_end)", "add_assoc_function((return_value), 0, zif_error_get_last)", "add_assoc_function((return_value), 0, zif_error_log)", "add_assoc_function((return_value), 0, zif_explode)", "add_assoc_function((return_value), 0, zif_extract)", "add_assoc_function((return_value), 0, zif_file_exists)", "add_assoc_function((return_value), 0, zif_fileatime)", "add_assoc_function((return_value), 0, zif_filectime)", "add_assoc_function((return_value), 0, zif_filegroup)", "add_assoc_function((return_value), 0, zif_fileinode)", "add_assoc_function((return_value), 0, zif_filemtime)", "add_assoc_function((return_value), 0, zif_fileowner)", "add_assoc_function((return_value), 0, zif_fileperms)", "add_assoc_function((return_value), 0, zif_filesize)", "add_assoc_function((return_value), 0, zif_filetype)", "add_assoc_function((return_value), 0, zif_flush)", "add_assoc_function((return_value), 0, zif_forward_static_call)", "add_assoc_function((return_value), 0, zif_forward_static_call_array)", "add_assoc_function((return_value), 0, zif_fprintf)", "add_assoc_function((return_value), 0, zif_get_cfg_var)", "add_assoc_function((return_value), 0, zif_get_current_user)", "add_assoc_function((return_value), 0, zif_get_include_path)", "add_assoc_function((return_value), 0, zif_get_magic_quotes_gpc)", "add_assoc_function((return_value), 0, zif_get_magic_quotes_runtime)", "add_assoc_function((return_value), 0, zif_getenv)", "add_assoc_function((return_value), 0, zif_getopt)", "add_assoc_function((return_value), 0, zif_getprotobyname)", "add_assoc_function((return_value), 0, zif_getprotobynumber)", "add_assoc_function((return_value), 0, zif_getservbyname)", "add_assoc_function((return_value), 0, zif_getservbyport)", "add_assoc_function((return_value), 0, zif_header_register_callback)", "add_assoc_function((return_value), 0, zif_hebrev)", "add_assoc_function((return_value), 0, zif_hebrevc)", "add_assoc_function((return_value), 0, zif_highlight_file)", "add_assoc_function((return_value), 0, zif_highlight_string)", "add_assoc_function((return_value), 0, zif_ignore_user_abort)", "add_assoc_function((return_value), 0, zif_implode)", "add_assoc_function((return_value), 0, zif_in_array)", "add_assoc_function((return_value), 0, zif_ini_get)", "add_assoc_function((return_value), 0, zif_ini_get_all)", "add_assoc_function((return_value), 0, zif_ini_restore)", "add_assoc_function((return_value), 0, zif_ini_set)", "add_assoc_function((return_value), 0, zif_ip2long)", "add_assoc_function((return_value), 0, zif_is_dir)", "add_assoc_function((return_value), 0, zif_is_executable)", "add_assoc_function((return_value), 0, zif_is_file)", "add_assoc_function((return_value), 0, zif_is_link)", "add_assoc_function((return_value), 0, zif_is_readable)", "add_assoc_function((return_value), 0, zif_is_uploaded_file)", "add_assoc_function((return_value), 0, zif_is_writable)", "add_assoc_function((return_value), 0, zif_iterator_apply)", "add_assoc_function((return_value), 0, zif_iterator_count)", "add_assoc_function((return_value), 0, zif_iterator_to_array)", "add_assoc_function((return_value), 0, zif_key)", "add_assoc_function((return_value), 0, zif_krsort)", "add_assoc_function((return_value), 0, zif_ksort)", "add_assoc_function((return_value), 0, zif_lcfirst)", "add_assoc_function((return_value), 0, zif_lchgrp)", "add_assoc_function((return_value), 0, zif_lchown)", "add_assoc_function((return_value), 0, zif_levenshtein)", "add_assoc_function((return_value), 0, zif_localeconv)", "add_assoc_function((return_value), 0, zif_long2ip)", "add_assoc_function((return_value), 0, zif_ltrim)", "add_assoc_function((return_value), 0, zif_max)", "add_assoc_function((return_value), 0, zif_min)", "add_assoc_function((return_value), 0, zif_money_format)", "add_assoc_function((return_value), 0, zif_move_uploaded_file)", "add_assoc_function((return_value), 0, zif_natcasesort)", "add_assoc_function((return_value), 0, zif_natsort)", "add_assoc_function((return_value), 0, zif_next)", "add_assoc_function((return_value), 0, zif_nl2br)", "add_assoc_function((return_value), 0, zif_nl_langinfo)", "add_assoc_function((return_value), 0, zif_ob_clean)", "add_assoc_function((return_value), 0, zif_ob_end_clean)", "add_assoc_function((return_value), 0, zif_ob_end_flush)", "add_assoc_function((return_value), 0, zif_ob_flush)", "add_assoc_function((return_value), 0, zif_ob_get_clean)", "add_assoc_function((return_value), 0, zif_ob_get_contents)", "add_assoc_function((return_value), 0, zif_ob_get_flush)", "add_assoc_function((return_value), 0, zif_ob_get_length)", "add_assoc_function((return_value), 0, zif_ob_get_level)", "add_assoc_function((return_value), 0, zif_ob_get_status)", "add_assoc_function((return_value), 0, zif_ob_implicit_flush)", "add_assoc_function((return_value), 0, zif_ob_list_handlers)", "add_assoc_function((return_value), 0, zif_ob_start)", "add_assoc_function((return_value), 0, zif_ord)", "add_assoc_function((return_value), 0, zif_output_add_rewrite_var)", "add_assoc_function((return_value), 0, zif_output_reset_rewrite_vars)", "add_assoc_function((return_value), 0, zif_parse_ini_file)", "add_assoc_function((return_value), 0, zif_parse_ini_string)", "add_assoc_function((return_value), 0, zif_parse_str)", "add_assoc_function((return_value), 0, zif_pathinfo)", "add_assoc_function((return_value), 0, zif_php_strip_whitespace)", "add_assoc_function((return_value), 0, zif_prev)", "add_assoc_function((return_value), 0, zif_print_r)", "add_assoc_function((return_value), 0, zif_putenv)", "add_assoc_function((return_value), 0, zif_quotemeta)", "add_assoc_function((return_value), 0, zif_range)", "add_assoc_function((return_value), 0, zif_realpath_cache_get)", "add_assoc_function((return_value), 0, zif_realpath_cache_size)", "add_assoc_function((return_value), 0, zif_register_shutdown_function)", "add_assoc_function((return_value), 0, zif_register_tick_function)", "add_assoc_function((return_value), 0, zif_reset)", "add_assoc_function((return_value), 0, zif_restore_include_path)", "add_assoc_function((return_value), 0, zif_rsort)", "add_assoc_function((return_value), 0, zif_rtrim)", "add_assoc_function((return_value), 0, zif_set_include_path)", "add_assoc_function((return_value), 0, zif_set_magic_quotes_runtime)", "add_assoc_function((return_value), 0, zif_set_time_limit)", "add_assoc_function((return_value), 0, zif_setlocale)", "add_assoc_function((return_value), 0, zif_shuffle)", "add_assoc_function((return_value), 0, zif_similar_text)", "add_assoc_function((return_value), 0, zif_sleep)", "add_assoc_function((return_value), 0, zif_sort)", "add_assoc_function((return_value), 0, zif_soundex)", "add_assoc_function((return_value), 0, zif_spl_classes)", "add_assoc_function((return_value), 0, zif_str_getcsv)", "add_assoc_function((return_value), 0, zif_str_ireplace)", "add_assoc_function((return_value), 0, zif_str_pad)", "add_assoc_function((return_value), 0, zif_str_repeat)", "add_assoc_function((return_value), 0, zif_str_replace)", "add_assoc_function((return_value), 0, zif_str_rot13)", "add_assoc_function((return_value), 0, zif_str_shuffle)", "add_assoc_function((return_value), 0, zif_str_split)", "add_assoc_function((return_value), 0, zif_str_word_count)", "add_assoc_function((return_value), 0, zif_strcoll)", "add_assoc_function((return_value), 0, zif_strcspn)", "add_assoc_function((return_value), 0, zif_stream_bucket_append)", "add_assoc_function((return_value), 0, zif_stream_bucket_make_writeable)", "add_assoc_function((return_value), 0, zif_stream_bucket_new)", "add_assoc_function((return_value), 0, zif_stream_bucket_prepend)", "add_assoc_function((return_value), 0, zif_stream_filter_register)", "add_assoc_function((return_value), 0, zif_stream_get_filters)", "add_assoc_function((return_value), 0, zif_strip_tags)", "add_assoc_function((return_value), 0, zif_stripcslashes)", "add_assoc_function((return_value), 0, zif_stripos)", "add_assoc_function((return_value), 0, zif_stripslashes)", "add_assoc_function((return_value), 0, zif_stristr)", "add_assoc_function((return_value), 0, zif_strnatcasecmp)", "add_assoc_function((return_value), 0, zif_strnatcmp)", "add_assoc_function((return_value), 0, zif_strpbrk)", "add_assoc_function((return_value), 0, zif_strpos)", "add_assoc_function((return_value), 0, zif_strrchr)", "add_assoc_function((return_value), 0, zif_strrev)", "add_assoc_function((return_value), 0, zif_strripos)", "add_assoc_function((return_value), 0, zif_strrpos)", "add_assoc_function((return_value), 0, zif_strspn)", "add_assoc_function((return_value), 0, zif_strstr)", "add_assoc_function((return_value), 0, zif_strtok)", "add_assoc_function((return_value), 0, zif_strtolower)", "add_assoc_function((return_value), 0, zif_strtoupper)", "add_assoc_function((return_value), 0, zif_strtr)", "add_assoc_function((return_value), 0, zif_substr)", "add_assoc_function((return_value), 0, zif_substr_compare)", "add_assoc_function((return_value), 0, zif_substr_count)", "add_assoc_function((return_value), 0, zif_substr_replace)", "add_assoc_function((return_value), 0, zif_sys_getloadavg)", "add_assoc_function((return_value), 0, zif_time_nanosleep)", "add_assoc_function((return_value), 0, zif_time_sleep_until)", "add_assoc_function((return_value), 0, zif_touch)", "add_assoc_function((return_value), 0, zif_trim)", "add_assoc_function((return_value), 0, zif_uasort)", "add_assoc_function((return_value), 0, zif_ucfirst)", "add_assoc_function((return_value), 0, zif_ucwords)", "add_assoc_function((return_value), 0, zif_uksort)", "add_assoc_function((return_value), 0, zif_unregister_tick_function)", "add_assoc_function((return_value), 0, zif_user_printf)", "add_assoc_function((return_value), 0, zif_user_sprintf)", "add_assoc_function((return_value), 0, zif_usleep)", "add_assoc_function((return_value), 0, zif_usort)", "add_assoc_function((return_value), 0, zif_vfprintf)", "add_assoc_function((return_value), 0, zif_vprintf)", "add_assoc_function((return_value), 0, zif_vsprintf)", "add_assoc_function((return_value), 0, zif_wordwrap)", "add_assoc_null_ex((return_value), 0, -1)", "add_assoc_null_ex((return_value), 0, 0)", "add_assoc_null_ex((return_value), 0, 1)", "add_assoc_null_ex((return_value), 0, 2)", "add_assoc_null_ex((return_value), 0, 255)", "add_assoc_null_ex((return_value), 0, 3)", "add_assoc_null_ex((return_value), 0, 6)", "add_char_to_string((return_value), 0, 0)", "add_function((return_value), 0, 0)", "add_function((return_value), 0, return_value)", "add_function((return_value), 0, this_ptr)", "add_function((return_value), 0, zhigh)", "add_function((return_value), 0, zlow)", "add_function((return_value), 0, zstep)", "add_index_bool((return_value), 0, -1)", "add_index_bool((return_value), 0, 0)", "add_index_bool((return_value), 0, 1)", "add_index_bool((return_value), 0, 2)", "add_index_bool((return_value), 0, 255)", "add_index_bool((return_value), 0, 3)", "add_index_bool((return_value), 0, 6)", "add_index_bool((return_value), 0, err)", "add_index_bool((return_value), 0, ht)", "add_index_bool((return_value), 0, is_step_double)", "add_index_bool((return_value), 0, le_index_ptr)", "add_index_bool((return_value), 0, return_value_used)", "add_index_long((return_value), 0, -1)", "add_index_long((return_value), 0, 0)", "add_index_long((return_value), 0, 1)", "add_index_long((return_value), 0, 2)", "add_index_long((return_value), 0, 255)", "add_index_long((return_value), 0, 3)", "add_index_long((return_value), 0, 6)", "add_index_resource((return_value), 0, -1)", "add_index_resource((return_value), 0, 0)", "add_index_resource((return_value), 0, 1)", "add_index_resource((return_value), 0, 2)", "add_index_resource((return_value), 0, 255)", "add_index_resource((return_value), 0, 3)", "add_index_resource((return_value), 0, 6)", "add_index_resource((return_value), 0, err)", "add_index_resource((return_value), 0, ht)", "add_index_resource((return_value), 0, is_step_double)", "add_index_resource((return_value), 0, le_index_ptr)", "add_index_resource((return_value), 0, return_value_used)", "add_index_zval((return_value), 0, 0)", "add_index_zval((return_value), 0, return_value)", "add_index_zval((return_value), 0, this_ptr)", "add_index_zval((return_value), 0, zhigh)", "add_index_zval((return_value), 0, zlow)", "add_index_zval((return_value), 0, zstep)", "add_next_index_string((return_value), 0, -1)", "add_next_index_string((return_value), 0, 0)", "add_next_index_string((return_value), 0, 1)", "add_next_index_string((return_value), 0, 2)", "add_next_index_string((return_value), 0, 255)", "add_next_index_string((return_value), 0, 3)", "add_next_index_string((return_value), 0, 6)", "add_next_index_string((return_value), 0, err)", "add_next_index_string((return_value), 0, ht)", "add_next_index_string((return_value), 0, is_step_double)", "add_next_index_string((return_value), 0, le_index_ptr)", "add_next_index_string((return_value), 0, return_value_used)", "add_property_null_ex((return_value), 0, -1)", "add_property_null_ex((return_value), 0, 0)", "add_property_null_ex((return_value), 0, 1)", "add_property_null_ex((return_value), 0, 2)", "add_property_null_ex((return_value), 0, 255)", "add_property_null_ex((return_value), 0, 3)", "add_property_null_ex((return_value), 0, 6)", "add_string_to_string((return_value), 0, 0)", "ap_php_vasprintf((return_value), 0, 0)", "bcmp((return_value), 0, -1)", "bcmp((return_value), 0, 0)", "bcmp((return_value), 0, 1)", "bcmp((return_value), 0, 2)", "bcmp((return_value), 0, 255)", "bcmp((return_value), 0, 3)", "bcmp((return_value), 0, 6)", "bcopy((return_value), 0, -1)", "bcopy((return_value), 0, 0)", "bcopy((return_value), 0, 1)", "bcopy((return_value), 0, 2)", "bcopy((return_value), 0, 255)", "bcopy((return_value), 0, 3)", "bcopy((return_value), 0, 6)", "bitwise_and_function((return_value), 0, 0)", "bitwise_and_function((return_value), 0, return_value)", "bitwise_and_function((return_value), 0, this_ptr)", "bitwise_and_function((return_value), 0, zhigh)", "bitwise_and_function((return_value), 0, zlow)", "bitwise_and_function((return_value), 0, zstep)", "bitwise_or_function((return_value), 0, 0)", "bitwise_or_function((return_value), 0, return_value)", "bitwise_or_function((return_value), 0, this_ptr)", "bitwise_or_function((return_value), 0, zhigh)", "bitwise_or_function((return_value), 0, zlow)", "bitwise_or_function((return_value), 0, zstep)", "bitwise_xor_function((return_value), 0, 0)", "bitwise_xor_function((return_value), 0, return_value)", "bitwise_xor_function((return_value), 0, this_ptr)", "bitwise_xor_function((return_value), 0, zhigh)", "bitwise_xor_function((return_value), 0, zlow)", "bitwise_xor_function((return_value), 0, zstep)", "boolean_xor_function((return_value), 0, 0)", "boolean_xor_function((return_value), 0, return_value)", "boolean_xor_function((return_value), 0, this_ptr)", "boolean_xor_function((return_value), 0, zhigh)", "boolean_xor_function((return_value), 0, zlow)", "boolean_xor_function((return_value), 0, zstep)", "chown((return_value), 0, -1)", "chown((return_value), 0, 0)", "chown((return_value), 0, 1)", "chown((return_value), 0, 2)", "chown((return_value), 0, 255)", "chown((return_value), 0, 3)", "chown((return_value), 0, 6)", "compare_function((return_value), 0, 0)", "compare_function((return_value), 0, return_value)", "compare_function((return_value), 0, this_ptr)", "compare_function((return_value), 0, zhigh)", "compare_function((return_value), 0, zlow)", "compare_function((return_value), 0, zstep)", "concat_function((return_value), 0, 0)", "concat_function((return_value), 0, return_value)", "concat_function((return_value), 0, this_ptr)", "concat_function((return_value), 0, zhigh)", "concat_function((return_value), 0, zlow)", "concat_function((return_value), 0, zstep)", "div_function((return_value), 0, 0)", "div_function((return_value), 0, return_value)", "div_function((return_value), 0, this_ptr)", "div_function((return_value), 0, zhigh)", "div_function((return_value), 0, zlow)", "div_function((return_value), 0, zstep)", "erand48_r((return_value), 0, 0)", "execve((return_value), 0, 0)", "fetch_array_begin((return_value), 0, 0)", "fetch_array_dim((return_value), 0, 0)", "fetch_simple_variable((return_value), 0, -1)", "fetch_simple_variable((return_value), 0, 0)", "fetch_simple_variable((return_value), 0, 1)", "fetch_simple_variable((return_value), 0, 2)", "fetch_simple_variable((return_value), 0, 255)", "fetch_simple_variable((return_value), 0, 3)", "fetch_simple_variable((return_value), 0, 6)", "fetch_simple_variable((return_value), 0, err)", "fetch_simple_variable((return_value), 0, ht)", "fetch_simple_variable((return_value), 0, is_step_double)", "fetch_simple_variable((return_value), 0, le_index_ptr)", "fetch_simple_variable((return_value), 0, return_value_used)", "fetch_string_offset((return_value), 0, 0)", "fgets((return_value), 0, 0)", "fgetws((return_value), 0, 0)", "fmemopen((return_value), 0, 0)", "freopen((return_value), 0, 0)", "fseek((return_value), 0, -1)", "fseek((return_value), 0, 0)", "fseek((return_value), 0, 1)", "fseek((return_value), 0, 2)", "fseek((return_value), 0, 255)", "fseek((return_value), 0, 3)", "fseek((return_value), 0, 6)", "fseek((return_value), 0, err)", "fseek((return_value), 0, ht)", "fseek((return_value), 0, is_step_double)", "fseek((return_value), 0, le_index_ptr)", "fseek((return_value), 0, return_value_used)", "fseeko((return_value), 0, -1)", "fseeko((return_value), 0, 0)", "fseeko((return_value), 0, 1)", "fseeko((return_value), 0, 2)", "fseeko((return_value), 0, 255)", "fseeko((return_value), 0, 3)", "fseeko((return_value), 0, 6)", "fseeko((return_value), 0, err)", "fseeko((return_value), 0, ht)", "fseeko((return_value), 0, is_step_double)", "fseeko((return_value), 0, le_index_ptr)", "fseeko((return_value), 0, return_value_used)", "getline((return_value), 0, 0)", "getsubopt((return_value), 0, 0)", "highlight_string((return_value), 0, 0)", "init_op_array((return_value), 0, -1)", "init_op_array((return_value), 0, 0)", "init_op_array((return_value), 0, 1)", "init_op_array((return_value), 0, 2)", "init_op_array((return_value), 0, 255)", "init_op_array((return_value), 0, 3)", "init_op_array((return_value), 0, 6)", "init_op_array((return_value), 0, err)", "init_op_array((return_value), 0, ht)", "init_op_array((return_value), 0, is_step_double)", "init_op_array((return_value), 0, le_index_ptr)", "init_op_array((return_value), 0, return_value_used)", "instanceof_function_ex((return_value), 0, -1)", "instanceof_function_ex((return_value), 0, 0)", "instanceof_function_ex((return_value), 0, 1)", "instanceof_function_ex((return_value), 0, 2)", "instanceof_function_ex((return_value), 0, 255)", "instanceof_function_ex((return_value), 0, 3)", "instanceof_function_ex((return_value), 0, 6)", "is_equal_function((return_value), 0, 0)", "is_equal_function((return_value), 0, return_value)", "is_equal_function((return_value), 0, this_ptr)", "is_equal_function((return_value), 0, zhigh)", "is_equal_function((return_value), 0, zlow)", "is_equal_function((return_value), 0, zstep)", "is_identical_function((return_value), 0, 0)", "is_identical_function((return_value), 0, return_value)", "is_identical_function((return_value), 0, this_ptr)", "is_identical_function((return_value), 0, zhigh)", "is_identical_function((return_value), 0, zlow)", "is_identical_function((return_value), 0, zstep)", "is_not_equal_function((return_value), 0, 0)", "is_not_equal_function((return_value), 0, return_value)", "is_not_equal_function((return_value), 0, this_ptr)", "is_not_equal_function((return_value), 0, zhigh)", "is_not_equal_function((return_value), 0, zlow)", "is_not_equal_function((return_value), 0, zstep)", "is_not_identical_function((return_value), 0, 0)", "is_not_identical_function((return_value), 0, return_value)", "is_not_identical_function((return_value), 0, this_ptr)", "is_not_identical_function((return_value), 0, zhigh)", "is_not_identical_function((return_value), 0, zlow)", "is_not_identical_function((return_value), 0, zstep)", "is_smaller_function((return_value), 0, 0)", "is_smaller_function((return_value), 0, return_value)", "is_smaller_function((return_value), 0, this_ptr)", "is_smaller_function((return_value), 0, zhigh)", "is_smaller_function((return_value), 0, zlow)", "is_smaller_function((return_value), 0, zstep)", "is_smaller_or_equal_function((return_value), 0, 0)", "is_smaller_or_equal_function((return_value), 0, return_value)", "is_smaller_or_equal_function((return_value), 0, this_ptr)", "is_smaller_or_equal_function((return_value), 0, zhigh)", "is_smaller_or_equal_function((return_value), 0, zlow)", "is_smaller_or_equal_function((return_value), 0, zstep)", "jrand48_r((return_value), 0, 0)", "lchown((return_value), 0, -1)", "lchown((return_value), 0, 0)", "lchown((return_value), 0, 1)", "lchown((return_value), 0, 2)", "lchown((return_value), 0, 255)", "lchown((return_value), 0, 3)", "lchown((return_value), 0, 6)", "mbrlen((return_value), 0, 0)", "mbstowcs((return_value), 0, -1)", "mbstowcs((return_value), 0, 0)", "mbstowcs((return_value), 0, 1)", "mbstowcs((return_value), 0, 2)", "mbstowcs((return_value), 0, 255)", "mbstowcs((return_value), 0, 3)", "mbstowcs((return_value), 0, 6)", "mbtowc((return_value), 0, -1)", "mbtowc((return_value), 0, 0)", "mbtowc((return_value), 0, 1)", "mbtowc((return_value), 0, 2)", "mbtowc((return_value), 0, 255)", "mbtowc((return_value), 0, 3)", "mbtowc((return_value), 0, 6)", "memchr((return_value), 0, -1)", "memchr((return_value), 0, 0)", "memchr((return_value), 0, 1)", "memchr((return_value), 0, 2)", "memchr((return_value), 0, 255)", "memchr((return_value), 0, 3)", "memchr((return_value), 0, 6)", "memcmp((return_value), 0, -1)", "memcmp((return_value), 0, 0)", "memcmp((return_value), 0, 1)", "memcmp((return_value), 0, 2)", "memcmp((return_value), 0, 255)", "memcmp((return_value), 0, 3)", "memcmp((return_value), 0, 6)", "memcpy((return_value), 0, -1)", "memcpy((return_value), 0, 0)", "memcpy((return_value), 0, 1)", "memcpy((return_value), 0, 2)", "memcpy((return_value), 0, 255)", "memcpy((return_value), 0, 3)", "memcpy((return_value), 0, 6)", "memmove((return_value), 0, -1)", "memmove((return_value), 0, 0)", "memmove((return_value), 0, 1)", "memmove((return_value), 0, 2)", "memmove((return_value), 0, 255)", "memmove((return_value), 0, 3)", "memmove((return_value), 0, 6)", "memset((return_value), 0, -1)", "memset((return_value), 0, 0)", "memset((return_value), 0, 1)", "memset((return_value), 0, 2)", "memset((return_value), 0, 255)", "memset((return_value), 0, 3)", "memset((return_value), 0, 6)", "mknod((return_value), 0, -1)", "mknod((return_value), 0, 0)", "mknod((return_value), 0, 1)", "mknod((return_value), 0, 2)", "mknod((return_value), 0, 255)", "mknod((return_value), 0, 3)", "mknod((return_value), 0, 6)", "mod_function((return_value), 0, 0)", "mod_function((return_value), 0, return_value)", "mod_function((return_value), 0, this_ptr)", "mod_function((return_value), 0, zhigh)", "mod_function((return_value), 0, zlow)", "mod_function((return_value), 0, zstep)", "mul_function((return_value), 0, 0)", "mul_function((return_value), 0, return_value)", "mul_function((return_value), 0, this_ptr)", "mul_function((return_value), 0, zhigh)", "mul_function((return_value), 0, zlow)", "mul_function((return_value), 0, zstep)", "nrand48_r((return_value), 0, 0)", "numeric_compare_function((return_value), 0, 0)", "numeric_compare_function((return_value), 0, return_value)", "numeric_compare_function((return_value), 0, this_ptr)", "numeric_compare_function((return_value), 0, zhigh)", "numeric_compare_function((return_value), 0, zlow)", "numeric_compare_function((return_value), 0, zstep)", "pcre_get_compiled_regex((return_value), 0, 0)", "php_array_merge((return_value), 0, -1)", "php_array_merge((return_value), 0, 0)", "php_array_merge((return_value), 0, 1)", "php_array_merge((return_value), 0, 2)", "php_array_merge((return_value), 0, 255)", "php_array_merge((return_value), 0, 3)", "php_array_merge((return_value), 0, 6)", "php_array_merge((return_value), 0, err)", "php_array_merge((return_value), 0, ht)", "php_array_merge((return_value), 0, is_step_double)", "php_array_merge((return_value), 0, le_index_ptr)", "php_array_merge((return_value), 0, return_value_used)", "php_array_natural_general_compare((return_value), 0, -1)", "php_array_natural_general_compare((return_value), 0, 0)", "php_array_natural_general_compare((return_value), 0, 1)", "php_array_natural_general_compare((return_value), 0, 2)", "php_array_natural_general_compare((return_value), 0, 255)", "php_array_natural_general_compare((return_value), 0, 3)", "php_array_natural_general_compare((return_value), 0, 6)", "php_array_natural_general_compare((return_value), 0, err)", "php_array_natural_general_compare((return_value), 0, ht)", "php_array_natural_general_compare((return_value), 0, is_step_double)", "php_array_natural_general_compare((return_value), 0, le_index_ptr)", "php_array_natural_general_compare((return_value), 0, return_value_used)", "php_array_walk((return_value), 0, -1)", "php_array_walk((return_value), 0, 0)", "php_array_walk((return_value), 0, 1)", "php_array_walk((return_value), 0, 2)", "php_array_walk((return_value), 0, 255)", "php_array_walk((return_value), 0, 3)", "php_array_walk((return_value), 0, 6)", "php_array_walk((return_value), 0, err)", "php_array_walk((return_value), 0, ht)", "php_array_walk((return_value), 0, is_step_double)", "php_array_walk((return_value), 0, le_index_ptr)", "php_array_walk((return_value), 0, return_value_used)", "php_compact_var((return_value), 0, 0)", "php_compact_var((return_value), 0, return_value)", "php_compact_var((return_value), 0, this_ptr)", "php_compact_var((return_value), 0, zhigh)", "php_compact_var((return_value), 0, zlow)", "php_compact_var((return_value), 0, zstep)", "php_implode((return_value), 0, 0)", "php_implode((return_value), 0, return_value)", "php_implode((return_value), 0, this_ptr)", "php_implode((return_value), 0, zhigh)", "php_implode((return_value), 0, zlow)", "php_implode((return_value), 0, zstep)", "php_ini_activate_config((return_value), 0, -1)", "php_ini_activate_config((return_value), 0, 0)", "php_ini_activate_config((return_value), 0, 1)", "php_ini_activate_config((return_value), 0, 2)", "php_ini_activate_config((return_value), 0, 255)", "php_ini_activate_config((return_value), 0, 3)", "php_ini_activate_config((return_value), 0, 6)", "php_ini_activate_config((return_value), 0, err)", "php_ini_activate_config((return_value), 0, ht)", "php_ini_activate_config((return_value), 0, is_step_double)", "php_ini_activate_config((return_value), 0, le_index_ptr)", "php_ini_activate_config((return_value), 0, return_value_used)", "php_output_handler_alias_register((return_value), 0, 0)", "php_output_handler_conflict_register((return_value), 0, 0)", "php_output_handler_conflict_register((return_value), 0, mblen)", "php_output_handler_conflict_register((return_value), 0, php_output_handler_started)", "php_output_handler_conflict_register((return_value), 0, php_output_write)", "php_output_handler_conflict_register((return_value), 0, php_output_write_unbuffered)", "php_output_handler_conflict_register((return_value), 0, setdomainname)", "php_output_handler_conflict_register((return_value), 0, sethostname)", "php_output_handler_conflict_register((return_value), 0, zend_multibyte_set_script_encoding_by_string)", "php_output_handler_create_user((return_value), 0, -1)", "php_output_handler_create_user((return_value), 0, 0)", "php_output_handler_create_user((return_value), 0, 1)", "php_output_handler_create_user((return_value), 0, 2)", "php_output_handler_create_user((return_value), 0, 255)", "php_output_handler_create_user((return_value), 0, 3)", "php_output_handler_create_user((return_value), 0, 6)", "php_output_handler_create_user((return_value), 0, err)", "php_output_handler_create_user((return_value), 0, ht)", "php_output_handler_create_user((return_value), 0, is_step_double)", "php_output_handler_create_user((return_value), 0, le_index_ptr)", "php_output_handler_create_user((return_value), 0, return_value_used)", "php_output_handler_reverse_conflict_register((return_value), 0, 0)", "php_output_handler_reverse_conflict_register((return_value), 0, mblen)", "php_output_handler_reverse_conflict_register((return_value), 0, php_output_handler_started)", "php_output_handler_reverse_conflict_register((return_value), 0, php_output_write)", "php_output_handler_reverse_conflict_register((return_value), 0, php_output_write_unbuffered)", "php_output_handler_reverse_conflict_register((return_value), 0, setdomainname)", "php_output_handler_reverse_conflict_register((return_value), 0, sethostname)", "php_output_handler_reverse_conflict_register((return_value), 0, zend_multibyte_set_script_encoding_by_string)", "php_output_handler_set_context((return_value), 0, 0)", "php_output_handler_set_context((return_value), 0, _efree)", "php_output_handler_set_context((return_value), 0, free)", "php_output_handler_set_context((return_value), 0, list_entry_destructor)", "php_output_handler_set_context((return_value), 0, php_pcre_free)", "php_output_handler_set_context((return_value), 0, php_pcre_stack_free)", "php_output_handler_set_context((return_value), 0, plist_entry_destructor)", "php_output_handler_set_context((return_value), 0, zend_vm_stack_free)", "php_output_handler_set_context((return_value), 0, zend_vm_stack_free_int)", "php_output_handler_set_context((return_value), 0, zend_vm_stack_push)", "php_output_handler_set_context((return_value), 0, zend_vm_stack_push_nocheck)", "php_output_start_user((return_value), 0, -1)", "php_output_start_user((return_value), 0, 0)", "php_output_start_user((return_value), 0, 1)", "php_output_start_user((return_value), 0, 2)", "php_output_start_user((return_value), 0, 255)", "php_output_start_user((return_value), 0, 3)", "php_output_start_user((return_value), 0, 6)", "php_output_start_user((return_value), 0, err)", "php_output_start_user((return_value), 0, ht)", "php_output_start_user((return_value), 0, is_step_double)", "php_output_start_user((return_value), 0, le_index_ptr)", "php_output_start_user((return_value), 0, return_value_used)", "php_parse_user_ini_file((return_value), 0, 0)", "php_pcre_info((return_value), 0, 0)", "php_pcre_study((return_value), 0, 0)", "php_resolve_path((return_value), 0, 0)", "php_stream_context_get_link((return_value), 0, 0)", "php_stream_context_set_link((return_value), 0, 0)", "php_stream_filter_create((return_value), 0, -1)", "php_stream_filter_create((return_value), 0, 0)", "php_stream_filter_create((return_value), 0, 1)", "php_stream_filter_create((return_value), 0, 2)", "php_stream_filter_create((return_value), 0, 255)", "php_stream_filter_create((return_value), 0, 3)", "php_stream_filter_create((return_value), 0, 6)", "php_stream_filter_create((return_value), 0, err)", "php_stream_filter_create((return_value), 0, ht)", "php_stream_filter_create((return_value), 0, is_step_double)", "php_stream_filter_create((return_value), 0, le_index_ptr)", "php_stream_filter_create((return_value), 0, return_value_used)", "php_stream_locate_eol((return_value), 0, -1)", "php_stream_locate_eol((return_value), 0, 0)", "php_stream_locate_eol((return_value), 0, 1)", "php_stream_locate_eol((return_value), 0, 2)", "php_stream_locate_eol((return_value), 0, 255)", "php_stream_locate_eol((return_value), 0, 3)", "php_stream_locate_eol((return_value), 0, 6)", "php_stream_locate_url_wrapper((return_value), 0, -1)", "php_stream_locate_url_wrapper((return_value), 0, 0)", "php_stream_locate_url_wrapper((return_value), 0, 1)", "php_stream_locate_url_wrapper((return_value), 0, 2)", "php_stream_locate_url_wrapper((return_value), 0, 255)", "php_stream_locate_url_wrapper((return_value), 0, 3)", "php_stream_locate_url_wrapper((return_value), 0, 6)", "php_stream_locate_url_wrapper((return_value), 0, err)", "php_stream_locate_url_wrapper((return_value), 0, ht)", "php_stream_locate_url_wrapper((return_value), 0, is_step_double)", "php_stream_locate_url_wrapper((return_value), 0, le_index_ptr)", "php_stream_locate_url_wrapper((return_value), 0, return_value_used)", "php_stream_xport_crypto_setup((return_value), 0, 0)", "php_stream_xport_listen((return_value), 0, 0)", "php_stream_xport_listen((return_value), 0, environ)", "php_strlcat((return_value), 0, -1)", "php_strlcat((return_value), 0, 0)", "php_strlcat((return_value), 0, 1)", "php_strlcat((return_value), 0, 2)", "php_strlcat((return_value), 0, 255)", "php_strlcat((return_value), 0, 3)", "php_strlcat((return_value), 0, 6)", "php_strlcpy((return_value), 0, -1)", "php_strlcpy((return_value), 0, 0)", "php_strlcpy((return_value), 0, 1)", "php_strlcpy((return_value), 0, 2)", "php_strlcpy((return_value), 0, 255)", "php_strlcpy((return_value), 0, 3)", "php_strlcpy((return_value), 0, 6)", "posix_memalign((return_value), 0, -1)", "posix_memalign((return_value), 0, 0)", "posix_memalign((return_value), 0, 1)", "posix_memalign((return_value), 0, 2)", "posix_memalign((return_value), 0, 255)", "posix_memalign((return_value), 0, 3)", "posix_memalign((return_value), 0, 6)", "readdir_r((return_value), 0, 0)", "readlink((return_value), 0, -1)", "readlink((return_value), 0, 0)", "readlink((return_value), 0, 1)", "readlink((return_value), 0, 2)", "readlink((return_value), 0, 255)", "readlink((return_value), 0, 3)", "readlink((return_value), 0, 6)", "realpath_cache_lookup((return_value), 0, -1)", "realpath_cache_lookup((return_value), 0, 0)", "realpath_cache_lookup((return_value), 0, 1)", "realpath_cache_lookup((return_value), 0, 2)", "realpath_cache_lookup((return_value), 0, 255)", "realpath_cache_lookup((return_value), 0, 3)", "realpath_cache_lookup((return_value), 0, 6)", "setbuffer((return_value), 0, -1)", "setbuffer((return_value), 0, 0)", "setbuffer((return_value), 0, 1)", "setbuffer((return_value), 0, 2)", "setbuffer((return_value), 0, 255)", "setbuffer((return_value), 0, 3)", "setbuffer((return_value), 0, 6)", "setenv((return_value), 0, -1)", "setenv((return_value), 0, 0)", "setenv((return_value), 0, 1)", "setenv((return_value), 0, 2)", "setenv((return_value), 0, 255)", "setenv((return_value), 0, 3)", "setenv((return_value), 0, 6)", "setenv((return_value), 0, err)", "setenv((return_value), 0, ht)", "setenv((return_value), 0, is_step_double)", "setenv((return_value), 0, le_index_ptr)", "setenv((return_value), 0, return_value_used)", "shift_left_function((return_value), 0, 0)", "shift_left_function((return_value), 0, return_value)", "shift_left_function((return_value), 0, this_ptr)", "shift_left_function((return_value), 0, zhigh)", "shift_left_function((return_value), 0, zlow)", "shift_left_function((return_value), 0, zstep)", "shift_right_function((return_value), 0, 0)", "shift_right_function((return_value), 0, return_value)", "shift_right_function((return_value), 0, this_ptr)", "shift_right_function((return_value), 0, zhigh)", "shift_right_function((return_value), 0, zlow)", "shift_right_function((return_value), 0, zstep)", "sigtimedwait((return_value), 0, 0)", "spl_iterator_apply((return_value), 0, 0)", "stpncpy((return_value), 0, -1)", "stpncpy((return_value), 0, 0)", "stpncpy((return_value), 0, 1)", "stpncpy((return_value), 0, 2)", "stpncpy((return_value), 0, 255)", "stpncpy((return_value), 0, 3)", "stpncpy((return_value), 0, 6)", "strcasecmp_l((return_value), 0, 0)", "strcoll_l((return_value), 0, 0)", "string_compare_function((return_value), 0, 0)", "string_compare_function((return_value), 0, return_value)", "string_compare_function((return_value), 0, this_ptr)", "string_compare_function((return_value), 0, zhigh)", "string_compare_function((return_value), 0, zlow)", "string_compare_function((return_value), 0, zstep)", "string_locale_compare_function((return_value), 0, 0)", "string_locale_compare_function((return_value), 0, return_value)", "string_locale_compare_function((return_value), 0, this_ptr)", "string_locale_compare_function((return_value), 0, zhigh)", "string_locale_compare_function((return_value), 0, zlow)", "string_locale_compare_function((return_value), 0, zstep)", "strncasecmp((return_value), 0, -1)", "strncasecmp((return_value), 0, 0)", "strncasecmp((return_value), 0, 1)", "strncasecmp((return_value), 0, 2)", "strncasecmp((return_value), 0, 255)", "strncasecmp((return_value), 0, 3)", "strncasecmp((return_value), 0, 6)", "strncat((return_value), 0, -1)", "strncat((return_value), 0, 0)", "strncat((return_value), 0, 1)", "strncat((return_value), 0, 2)", "strncat((return_value), 0, 255)", "strncat((return_value), 0, 3)", "strncat((return_value), 0, 6)", "strncmp((return_value), 0, -1)", "strncmp((return_value), 0, 0)", "strncmp((return_value), 0, 1)", "strncmp((return_value), 0, 2)", "strncmp((return_value), 0, 255)", "strncmp((return_value), 0, 3)", "strncmp((return_value), 0, 6)", "strncpy((return_value), 0, -1)", "strncpy((return_value), 0, 0)", "strncpy((return_value), 0, 1)", "strncpy((return_value), 0, 2)", "strncpy((return_value), 0, 255)", "strncpy((return_value), 0, 3)", "strncpy((return_value), 0, 6)", "strtok_r((return_value), 0, 0)", "strtol((return_value), 0, -1)", "strtol((return_value), 0, 0)", "strtol((return_value), 0, 1)", "strtol((return_value), 0, 2)", "strtol((return_value), 0, 255)", "strtol((return_value), 0, 3)", "strtol((return_value), 0, 6)", "strtol((return_value), 0, err)", "strtol((return_value), 0, ht)", "strtol((return_value), 0, is_step_double)", "strtol((return_value), 0, le_index_ptr)", "strtol((return_value), 0, return_value_used)", "strtoll((return_value), 0, -1)", "strtoll((return_value), 0, 0)", "strtoll((return_value), 0, 1)", "strtoll((return_value), 0, 2)", "strtoll((return_value), 0, 255)", "strtoll((return_value), 0, 3)", "strtoll((return_value), 0, 6)", "strtoll((return_value), 0, err)", "strtoll((return_value), 0, ht)", "strtoll((return_value), 0, is_step_double)", "strtoll((return_value), 0, le_index_ptr)", "strtoll((return_value), 0, return_value_used)", "strtoq((return_value), 0, -1)", "strtoq((return_value), 0, 0)", "strtoq((return_value), 0, 1)", "strtoq((return_value), 0, 2)", "strtoq((return_value), 0, 255)", "strtoq((return_value), 0, 3)", "strtoq((return_value), 0, 6)", "strtoq((return_value), 0, err)", "strtoq((return_value), 0, ht)", "strtoq((return_value), 0, is_step_double)", "strtoq((return_value), 0, le_index_ptr)", "strtoq((return_value), 0, return_value_used)", "strtoul((return_value), 0, -1)", "strtoul((return_value), 0, 0)", "strtoul((return_value), 0, 1)", "strtoul((return_value), 0, 2)", "strtoul((return_value), 0, 255)", "strtoul((return_value), 0, 3)", "strtoul((return_value), 0, 6)", "strtoul((return_value), 0, err)", "strtoul((return_value), 0, ht)", "strtoul((return_value), 0, is_step_double)", "strtoul((return_value), 0, le_index_ptr)", "strtoul((return_value), 0, return_value_used)", "strtoull((return_value), 0, -1)", "strtoull((return_value), 0, 0)", "strtoull((return_value), 0, 1)", "strtoull((return_value), 0, 2)", "strtoull((return_value), 0, 255)", "strtoull((return_value), 0, 3)", "strtoull((return_value), 0, 6)", "strtoull((return_value), 0, err)", "strtoull((return_value), 0, ht)", "strtoull((return_value), 0, is_step_double)", "strtoull((return_value), 0, le_index_ptr)", "strtoull((return_value), 0, return_value_used)", "strtouq((return_value), 0, -1)", "strtouq((return_value), 0, 0)", "strtouq((return_value), 0, 1)", "strtouq((return_value), 0, 2)", "strtouq((return_value), 0, 255)", "strtouq((return_value), 0, 3)", "strtouq((return_value), 0, 6)", "strtouq((return_value), 0, err)", "strtouq((return_value), 0, ht)", "strtouq((return_value), 0, is_step_double)", "strtouq((return_value), 0, le_index_ptr)", "strtouq((return_value), 0, return_value_used)", "strxfrm((return_value), 0, -1)", "strxfrm((return_value), 0, 0)", "strxfrm((return_value), 0, 1)", "strxfrm((return_value), 0, 2)", "strxfrm((return_value), 0, 255)", "strxfrm((return_value), 0, 3)", "strxfrm((return_value), 0, 6)", "sub_function((return_value), 0, 0)", "sub_function((return_value), 0, return_value)", "sub_function((return_value), 0, this_ptr)", "sub_function((return_value), 0, zhigh)", "sub_function((return_value), 0, zlow)", "sub_function((return_value), 0, zstep)", "symlinkat((return_value), 0, 0)", "vfprintf((return_value), 0, 0)", "vfwprintf((return_value), 0, 0)", "virtual_filepath_ex((return_value), 0, 0)", "vsprintf((return_value), 0, 0)", "wcpncpy((return_value), 0, -1)", "wcpncpy((return_value), 0, 0)", "wcpncpy((return_value), 0, 1)", "wcpncpy((return_value), 0, 2)", "wcpncpy((return_value), 0, 255)", "wcpncpy((return_value), 0, 3)", "wcpncpy((return_value), 0, 6)", "wcrtomb((return_value), 0, 0)", "wcscasecmp_l((return_value), 0, 0)", "wcscoll_l((return_value), 0, 0)", "wcsncasecmp((return_value), 0, -1)", "wcsncasecmp((return_value), 0, 0)", "wcsncasecmp((return_value), 0, 1)", "wcsncasecmp((return_value), 0, 2)", "wcsncasecmp((return_value), 0, 255)", "wcsncasecmp((return_value), 0, 3)", "wcsncasecmp((return_value), 0, 6)", "wcsncat((return_value), 0, -1)", "wcsncat((return_value), 0, 0)", "wcsncat((return_value), 0, 1)", "wcsncat((return_value), 0, 2)", "wcsncat((return_value), 0, 255)", "wcsncat((return_value), 0, 3)", "wcsncat((return_value), 0, 6)", "wcsncmp((return_value), 0, -1)", "wcsncmp((return_value), 0, 0)", "wcsncmp((return_value), 0, 1)", "wcsncmp((return_value), 0, 2)", "wcsncmp((return_value), 0, 255)", "wcsncmp((return_value), 0, 3)", "wcsncmp((return_value), 0, 6)", "wcsncpy((return_value), 0, -1)", "wcsncpy((return_value), 0, 0)", "wcsncpy((return_value), 0, 1)", "wcsncpy((return_value), 0, 2)", "wcsncpy((return_value), 0, 255)", "wcsncpy((return_value), 0, 3)", "wcsncpy((return_value), 0, 6)", "wcstok((return_value), 0, 0)", "wcstol((return_value), 0, -1)", "wcstol((return_value), 0, 0)", "wcstol((return_value), 0, 1)", "wcstol((return_value), 0, 2)", "wcstol((return_value), 0, 255)", "wcstol((return_value), 0, 3)", "wcstol((return_value), 0, 6)", "wcstol((return_value), 0, err)", "wcstol((return_value), 0, ht)", "wcstol((return_value), 0, is_step_double)", "wcstol((return_value), 0, le_index_ptr)", "wcstol((return_value), 0, return_value_used)", "wcstoll((return_value), 0, -1)", "wcstoll((return_value), 0, 0)", "wcstoll((return_value), 0, 1)", "wcstoll((return_value), 0, 2)", "wcstoll((return_value), 0, 255)", "wcstoll((return_value), 0, 3)", "wcstoll((return_value), 0, 6)", "wcstoll((return_value), 0, err)", "wcstoll((return_value), 0, ht)", "wcstoll((return_value), 0, is_step_double)", "wcstoll((return_value), 0, le_index_ptr)", "wcstoll((return_value), 0, return_value_used)", "wcstombs((return_value), 0, -1)", "wcstombs((return_value), 0, 0)", "wcstombs((return_value), 0, 1)", "wcstombs((return_value), 0, 2)", "wcstombs((return_value), 0, 255)", "wcstombs((return_value), 0, 3)", "wcstombs((return_value), 0, 6)", "wcstoul((return_value), 0, -1)", "wcstoul((return_value), 0, 0)", "wcstoul((return_value), 0, 1)", "wcstoul((return_value), 0, 2)", "wcstoul((return_value), 0, 255)", "wcstoul((return_value), 0, 3)", "wcstoul((return_value), 0, 6)", "wcstoul((return_value), 0, err)", "wcstoul((return_value), 0, ht)", "wcstoul((return_value), 0, is_step_double)", "wcstoul((return_value), 0, le_index_ptr)", "wcstoul((return_value), 0, return_value_used)", "wcstoull((return_value), 0, -1)", "wcstoull((return_value), 0, 0)", "wcstoull((return_value), 0, 1)", "wcstoull((return_value), 0, 2)", "wcstoull((return_value), 0, 255)", "wcstoull((return_value), 0, 3)", "wcstoull((return_value), 0, 6)", "wcstoull((return_value), 0, err)", "wcstoull((return_value), 0, ht)", "wcstoull((return_value), 0, is_step_double)", "wcstoull((return_value), 0, le_index_ptr)", "wcstoull((return_value), 0, return_value_used)", "wcsxfrm((return_value), 0, -1)", "wcsxfrm((return_value), 0, 0)", "wcsxfrm((return_value), 0, 1)", "wcsxfrm((return_value), 0, 2)", "wcsxfrm((return_value), 0, 255)", "wcsxfrm((return_value), 0, 3)", "wcsxfrm((return_value), 0, 6)", "wmemchr((return_value), 0, -1)", "wmemchr((return_value), 0, 0)", "wmemchr((return_value), 0, 1)", "wmemchr((return_value), 0, 2)", "wmemchr((return_value), 0, 255)", "wmemchr((return_value), 0, 3)", "wmemchr((return_value), 0, 6)", "wmemcmp((return_value), 0, -1)", "wmemcmp((return_value), 0, 0)", "wmemcmp((return_value), 0, 1)", "wmemcmp((return_value), 0, 2)", "wmemcmp((return_value), 0, 255)", "wmemcmp((return_value), 0, 3)", "wmemcmp((return_value), 0, 6)", "wmemcpy((return_value), 0, -1)", "wmemcpy((return_value), 0, 0)", "wmemcpy((return_value), 0, 1)", "wmemcpy((return_value), 0, 2)", "wmemcpy((return_value), 0, 255)", "wmemcpy((return_value), 0, 3)", "wmemcpy((return_value), 0, 6)", "wmemmove((return_value), 0, -1)", "wmemmove((return_value), 0, 0)", "wmemmove((return_value), 0, 1)", "wmemmove((return_value), 0, 2)", "wmemmove((return_value), 0, 255)", "wmemmove((return_value), 0, 3)", "wmemmove((return_value), 0, 6)", "wmemset((return_value), 0, -1)", "wmemset((return_value), 0, 0)", "wmemset((return_value), 0, 1)", "wmemset((return_value), 0, 2)", "wmemset((return_value), 0, 255)", "wmemset((return_value), 0, 3)", "wmemset((return_value), 0, 6)", "zend_arg_types_stack_2_pop((return_value), 0, 0)", "zend_binary_zval_strncasecmp((return_value), 0, 0)", "zend_binary_zval_strncasecmp((return_value), 0, return_value)", "zend_binary_zval_strncasecmp((return_value), 0, this_ptr)", "zend_binary_zval_strncasecmp((return_value), 0, zhigh)", "zend_binary_zval_strncasecmp((return_value), 0, zlow)", "zend_binary_zval_strncasecmp((return_value), 0, zstep)", "zend_binary_zval_strncmp((return_value), 0, 0)", "zend_binary_zval_strncmp((return_value), 0, return_value)", "zend_binary_zval_strncmp((return_value), 0, this_ptr)", "zend_binary_zval_strncmp((return_value), 0, zhigh)", "zend_binary_zval_strncmp((return_value), 0, zlow)", "zend_binary_zval_strncmp((return_value), 0, zstep)", "zend_check_magic_method_implementation((return_value), 0, -1)", "zend_check_magic_method_implementation((return_value), 0, 0)", "zend_check_magic_method_implementation((return_value), 0, 1)", "zend_check_magic_method_implementation((return_value), 0, 2)", "zend_check_magic_method_implementation((return_value), 0, 255)", "zend_check_magic_method_implementation((return_value), 0, 3)", "zend_check_magic_method_implementation((return_value), 0, 6)", "zend_check_magic_method_implementation((return_value), 0, err)", "zend_check_magic_method_implementation((return_value), 0, ht)", "zend_check_magic_method_implementation((return_value), 0, is_step_double)", "zend_check_magic_method_implementation((return_value), 0, le_index_ptr)", "zend_check_magic_method_implementation((return_value), 0, return_value_used)", "zend_check_property_access((return_value), 0, -1)", "zend_check_property_access((return_value), 0, 0)", "zend_check_property_access((return_value), 0, 1)", "zend_check_property_access((return_value), 0, 2)", "zend_check_property_access((return_value), 0, 255)", "zend_check_property_access((return_value), 0, 3)", "zend_check_property_access((return_value), 0, 6)", "zend_check_property_access((return_value), 0, err)", "zend_check_property_access((return_value), 0, ht)", "zend_check_property_access((return_value), 0, is_step_double)", "zend_check_property_access((return_value), 0, le_index_ptr)", "zend_check_property_access((return_value), 0, return_value_used)", "zend_compare_arrays((return_value), 0, 0)", "zend_compare_arrays((return_value), 0, return_value)", "zend_compare_arrays((return_value), 0, this_ptr)", "zend_compare_arrays((return_value), 0, zhigh)", "zend_compare_arrays((return_value), 0, zlow)", "zend_compare_arrays((return_value), 0, zstep)", "zend_compare_objects((return_value), 0, 0)", "zend_compare_objects((return_value), 0, return_value)", "zend_compare_objects((return_value), 0, this_ptr)", "zend_compare_objects((return_value), 0, zhigh)", "zend_compare_objects((return_value), 0, zlow)", "zend_compare_objects((return_value), 0, zstep)", "zend_compare_symbol_tables((return_value), 0, 0)", "zend_declare_class_constant_null((return_value), 0, -1)", "zend_declare_class_constant_null((return_value), 0, 0)", "zend_declare_class_constant_null((return_value), 0, 1)", "zend_declare_class_constant_null((return_value), 0, 2)", "zend_declare_class_constant_null((return_value), 0, 255)", "zend_declare_class_constant_null((return_value), 0, 3)", "zend_declare_class_constant_null((return_value), 0, 6)", "zend_delete_global_variable_ex((return_value), 0, -1)", "zend_delete_global_variable_ex((return_value), 0, 0)", "zend_delete_global_variable_ex((return_value), 0, 1)", "zend_delete_global_variable_ex((return_value), 0, 2)", "zend_delete_global_variable_ex((return_value), 0, 255)", "zend_delete_global_variable_ex((return_value), 0, 3)", "zend_delete_global_variable_ex((return_value), 0, 6)", "zend_do_abstract_method((return_value), 0, 0)", "zend_do_add_static_array_element((return_value), 0, 0)", "zend_do_add_string((return_value), 0, 0)", "zend_do_add_variable((return_value), 0, 0)", "zend_do_assign((return_value), 0, 0)", "zend_do_assign_ref((return_value), 0, 0)", "zend_do_begin_class_declaration((return_value), 0, 0)", "zend_do_build_namespace_name((return_value), 0, 0)", "zend_do_case_before_statement((return_value), 0, 0)", "zend_do_cast((return_value), 0, -1)", "zend_do_cast((return_value), 0, 0)", "zend_do_cast((return_value), 0, 1)", "zend_do_cast((return_value), 0, 2)", "zend_do_cast((return_value), 0, 255)", "zend_do_cast((return_value), 0, 3)", "zend_do_cast((return_value), 0, 6)", "zend_do_cast((return_value), 0, err)", "zend_do_cast((return_value), 0, ht)", "zend_do_cast((return_value), 0, is_step_double)", "zend_do_cast((return_value), 0, le_index_ptr)", "zend_do_cast((return_value), 0, return_value_used)", "zend_do_declare_property((return_value), 0, -1)", "zend_do_declare_property((return_value), 0, 0)", "zend_do_declare_property((return_value), 0, 1)", "zend_do_declare_property((return_value), 0, 2)", "zend_do_declare_property((return_value), 0, 255)", "zend_do_declare_property((return_value), 0, 3)", "zend_do_declare_property((return_value), 0, 6)", "zend_do_do_while_end((return_value), 0, 0)", "zend_do_end_new_object((return_value), 0, 0)", "zend_do_end_variable_parse((return_value), 0, -1)", "zend_do_end_variable_parse((return_value), 0, 0)", "zend_do_end_variable_parse((return_value), 0, 1)", "zend_do_end_variable_parse((return_value), 0, 2)", "zend_do_end_variable_parse((return_value), 0, 255)", "zend_do_end_variable_parse((return_value), 0, 3)", "zend_do_end_variable_parse((return_value), 0, 6)", "zend_do_end_variable_parse((return_value), 0, err)", "zend_do_end_variable_parse((return_value), 0, ht)", "zend_do_end_variable_parse((return_value), 0, is_step_double)", "zend_do_end_variable_parse((return_value), 0, le_index_ptr)", "zend_do_end_variable_parse((return_value), 0, return_value_used)", "zend_do_fetch_global_variable((return_value), 0, -1)", "zend_do_fetch_global_variable((return_value), 0, 0)", "zend_do_fetch_global_variable((return_value), 0, 1)", "zend_do_fetch_global_variable((return_value), 0, 2)", "zend_do_fetch_global_variable((return_value), 0, 255)", "zend_do_fetch_global_variable((return_value), 0, 3)", "zend_do_fetch_global_variable((return_value), 0, 6)", "zend_do_fetch_global_variable((return_value), 0, err)", "zend_do_fetch_global_variable((return_value), 0, ht)", "zend_do_fetch_global_variable((return_value), 0, is_step_double)", "zend_do_fetch_global_variable((return_value), 0, le_index_ptr)", "zend_do_fetch_global_variable((return_value), 0, return_value_used)", "zend_do_fetch_property((return_value), 0, 0)", "zend_do_fetch_static_variable((return_value), 0, -1)", "zend_do_fetch_static_variable((return_value), 0, 0)", "zend_do_fetch_static_variable((return_value), 0, 1)", "zend_do_fetch_static_variable((return_value), 0, 2)", "zend_do_fetch_static_variable((return_value), 0, 255)", "zend_do_fetch_static_variable((return_value), 0, 3)", "zend_do_fetch_static_variable((return_value), 0, 6)", "zend_do_fetch_static_variable((return_value), 0, err)", "zend_do_fetch_static_variable((return_value), 0, ht)", "zend_do_fetch_static_variable((return_value), 0, is_step_double)", "zend_do_fetch_static_variable((return_value), 0, le_index_ptr)", "zend_do_fetch_static_variable((return_value), 0, return_value_used)", "zend_do_indirect_references((return_value), 0, 0)", "zend_do_jmp_set((return_value), 0, 0)", "zend_do_pass_param((return_value), 0, -1)", "zend_do_pass_param((return_value), 0, 0)", "zend_do_pass_param((return_value), 0, 1)", "zend_do_pass_param((return_value), 0, 2)", "zend_do_pass_param((return_value), 0, 255)", "zend_do_pass_param((return_value), 0, 3)", "zend_do_pass_param((return_value), 0, 6)", "zend_do_pass_param((return_value), 0, err)", "zend_do_pass_param((return_value), 0, ht)", "zend_do_pass_param((return_value), 0, is_step_double)", "zend_do_pass_param((return_value), 0, le_index_ptr)", "zend_do_pass_param((return_value), 0, return_value_used)", "zend_do_post_incdec((return_value), 0, -1)", "zend_do_post_incdec((return_value), 0, 0)", "zend_do_post_incdec((return_value), 0, 1)", "zend_do_post_incdec((return_value), 0, 2)", "zend_do_post_incdec((return_value), 0, 255)", "zend_do_post_incdec((return_value), 0, 3)", "zend_do_post_incdec((return_value), 0, 6)", "zend_do_pre_incdec((return_value), 0, -1)", "zend_do_pre_incdec((return_value), 0, 0)", "zend_do_pre_incdec((return_value), 0, 1)", "zend_do_pre_incdec((return_value), 0, 2)", "zend_do_pre_incdec((return_value), 0, 255)", "zend_do_pre_incdec((return_value), 0, 3)", "zend_do_pre_incdec((return_value), 0, 6)", "zend_do_qm_true((return_value), 0, 0)", "zend_do_use((return_value), 0, -1)", "zend_do_use((return_value), 0, 0)", "zend_do_use((return_value), 0, 1)", "zend_do_use((return_value), 0, 2)", "zend_do_use((return_value), 0, 255)", "zend_do_use((return_value), 0, 3)", "zend_do_use((return_value), 0, 6)", "zend_do_use((return_value), 0, err)", "zend_do_use((return_value), 0, ht)", "zend_do_use((return_value), 0, is_step_double)", "zend_do_use((return_value), 0, le_index_ptr)", "zend_do_use((return_value), 0, return_value_used)", "zend_eval_string((return_value), 0, 0)", "zend_fcall_info_argp((return_value), 0, 0)", "zend_fcall_info_args_restore((return_value), 0, 0)", "zend_fcall_info_args_save((return_value), 0, 0)", "zend_fcall_info_argv((return_value), 0, 0)", "zend_fetch_class((return_value), 0, -1)", "zend_fetch_class((return_value), 0, 0)", "zend_fetch_class((return_value), 0, 1)", "zend_fetch_class((return_value), 0, 2)", "zend_fetch_class((return_value), 0, 255)", "zend_fetch_class((return_value), 0, 3)", "zend_fetch_class((return_value), 0, 6)", "zend_fetch_class((return_value), 0, err)", "zend_fetch_class((return_value), 0, ht)", "zend_fetch_class((return_value), 0, is_step_double)", "zend_fetch_class((return_value), 0, le_index_ptr)", "zend_fetch_class((return_value), 0, return_value_used)", "zend_get_compiled_variable_name((return_value), 0, 0)", "zend_get_configuration_directive((return_value), 0, 0)", "zend_get_configuration_directive((return_value), 0, return_value)", "zend_get_configuration_directive((return_value), 0, this_ptr)", "zend_get_configuration_directive((return_value), 0, zhigh)", "zend_get_configuration_directive((return_value), 0, zlow)", "zend_get_configuration_directive((return_value), 0, zstep)", "zend_get_constant((return_value), 0, 0)", "zend_get_constant((return_value), 0, return_value)", "zend_get_constant((return_value), 0, this_ptr)", "zend_get_constant((return_value), 0, zhigh)", "zend_get_constant((return_value), 0, zlow)", "zend_get_constant((return_value), 0, zstep)", "zend_get_object_classname((return_value), 0, 0)", "zend_get_property_info((return_value), 0, -1)", "zend_get_property_info((return_value), 0, 0)", "zend_get_property_info((return_value), 0, 1)", "zend_get_property_info((return_value), 0, 2)", "zend_get_property_info((return_value), 0, 255)", "zend_get_property_info((return_value), 0, 3)", "zend_get_property_info((return_value), 0, 6)", "zend_get_property_info((return_value), 0, err)", "zend_get_property_info((return_value), 0, ht)", "zend_get_property_info((return_value), 0, is_step_double)", "zend_get_property_info((return_value), 0, le_index_ptr)", "zend_get_property_info((return_value), 0, return_value_used)", "zend_hash_add_empty_element((return_value), 0, -1)", "zend_hash_add_empty_element((return_value), 0, 0)", "zend_hash_add_empty_element((return_value), 0, 1)", "zend_hash_add_empty_element((return_value), 0, 2)", "zend_hash_add_empty_element((return_value), 0, 255)", "zend_hash_add_empty_element((return_value), 0, 3)", "zend_hash_add_empty_element((return_value), 0, 6)", "zend_hash_apply_with_argument((return_value), 0, 0)", "zend_hash_exists((return_value), 0, -1)", "zend_hash_exists((return_value), 0, 0)", "zend_hash_exists((return_value), 0, 1)", "zend_hash_exists((return_value), 0, 2)", "zend_hash_exists((return_value), 0, 255)", "zend_hash_exists((return_value), 0, 3)", "zend_hash_exists((return_value), 0, 6)", "zend_hash_get_current_data_ex((return_value), 0, 0)", "zend_hash_index_find((return_value), 0, 0)", "zend_ini_double((return_value), 0, -1)", "zend_ini_double((return_value), 0, 0)", "zend_ini_double((return_value), 0, 1)", "zend_ini_double((return_value), 0, 2)", "zend_ini_double((return_value), 0, 255)", "zend_ini_double((return_value), 0, 3)", "zend_ini_double((return_value), 0, 6)", "zend_ini_double((return_value), 0, err)", "zend_ini_double((return_value), 0, ht)", "zend_ini_double((return_value), 0, is_step_double)", "zend_ini_double((return_value), 0, le_index_ptr)", "zend_ini_double((return_value), 0, return_value_used)", "zend_ini_long((return_value), 0, -1)", "zend_ini_long((return_value), 0, 0)", "zend_ini_long((return_value), 0, 1)", "zend_ini_long((return_value), 0, 2)", "zend_ini_long((return_value), 0, 255)", "zend_ini_long((return_value), 0, 3)", "zend_ini_long((return_value), 0, 6)", "zend_ini_long((return_value), 0, err)", "zend_ini_long((return_value), 0, ht)", "zend_ini_long((return_value), 0, is_step_double)", "zend_ini_long((return_value), 0, le_index_ptr)", "zend_ini_long((return_value), 0, return_value_used)", "zend_ini_register_displayer((return_value), 0, 0)", "zend_ini_register_displayer((return_value), 0, display_link_numbers)", "zend_ini_register_displayer((return_value), 0, zend_ini_boolean_displayer_cb)", "zend_ini_register_displayer((return_value), 0, zend_ini_color_displayer_cb)", "zend_ini_string((return_value), 0, -1)", "zend_ini_string((return_value), 0, 0)", "zend_ini_string((return_value), 0, 1)", "zend_ini_string((return_value), 0, 2)", "zend_ini_string((return_value), 0, 255)", "zend_ini_string((return_value), 0, 3)", "zend_ini_string((return_value), 0, 6)", "zend_ini_string((return_value), 0, err)", "zend_ini_string((return_value), 0, ht)", "zend_ini_string((return_value), 0, is_step_double)", "zend_ini_string((return_value), 0, le_index_ptr)", "zend_ini_string((return_value), 0, return_value_used)", "zend_is_callable((return_value), 0, 0)", "zend_is_callable((return_value), 0, environ)", "zend_llist_apply_with_argument((return_value), 0, 0)", "zend_llist_del_element((return_value), 0, 0)", "zend_lookup_class((return_value), 0, 0)", "zend_make_printable_zval((return_value), 0, 0)", "zend_memrchr((return_value), 0, -1)", "zend_memrchr((return_value), 0, 0)", "zend_memrchr((return_value), 0, 1)", "zend_memrchr((return_value), 0, 2)", "zend_memrchr((return_value), 0, 255)", "zend_memrchr((return_value), 0, 3)", "zend_memrchr((return_value), 0, 6)", "zend_merge_properties((return_value), 0, -1)", "zend_merge_properties((return_value), 0, 0)", "zend_merge_properties((return_value), 0, 1)", "zend_merge_properties((return_value), 0, 2)", "zend_merge_properties((return_value), 0, 255)", "zend_merge_properties((return_value), 0, 3)", "zend_merge_properties((return_value), 0, 6)", "zend_merge_properties((return_value), 0, err)", "zend_merge_properties((return_value), 0, ht)", "zend_merge_properties((return_value), 0, is_step_double)", "zend_merge_properties((return_value), 0, le_index_ptr)", "zend_merge_properties((return_value), 0, return_value_used)", "zend_mm_shutdown((return_value), 0, -1)", "zend_mm_shutdown((return_value), 0, 0)", "zend_mm_shutdown((return_value), 0, 1)", "zend_mm_shutdown((return_value), 0, 2)", "zend_mm_shutdown((return_value), 0, 255)", "zend_mm_shutdown((return_value), 0, 3)", "zend_mm_shutdown((return_value), 0, 6)", "zend_mm_shutdown((return_value), 0, err)", "zend_mm_shutdown((return_value), 0, ht)", "zend_mm_shutdown((return_value), 0, is_step_double)", "zend_mm_shutdown((return_value), 0, le_index_ptr)", "zend_mm_shutdown((return_value), 0, return_value_used)", "zend_prepare_reference((return_value), 0, 0)", "zend_prepare_trait_precedence((return_value), 0, 0)", "zend_print_zval_ex((return_value), 0, -1)", "zend_print_zval_ex((return_value), 0, 0)", "zend_print_zval_ex((return_value), 0, 1)", "zend_print_zval_ex((return_value), 0, 2)", "zend_print_zval_ex((return_value), 0, 255)", "zend_print_zval_ex((return_value), 0, 3)", "zend_print_zval_ex((return_value), 0, 6)", "zend_print_zval_ex((return_value), 0, err)", "zend_print_zval_ex((return_value), 0, ht)", "zend_print_zval_ex((return_value), 0, is_step_double)", "zend_print_zval_ex((return_value), 0, le_index_ptr)", "zend_print_zval_ex((return_value), 0, return_value_used)", "zend_print_zval_r_ex((return_value), 0, -1)", "zend_print_zval_r_ex((return_value), 0, 0)", "zend_print_zval_r_ex((return_value), 0, 1)", "zend_print_zval_r_ex((return_value), 0, 2)", "zend_print_zval_r_ex((return_value), 0, 255)", "zend_print_zval_r_ex((return_value), 0, 3)", "zend_print_zval_r_ex((return_value), 0, 6)", "zend_print_zval_r_ex((return_value), 0, err)", "zend_print_zval_r_ex((return_value), 0, ht)", "zend_print_zval_r_ex((return_value), 0, is_step_double)", "zend_print_zval_r_ex((return_value), 0, le_index_ptr)", "zend_print_zval_r_ex((return_value), 0, return_value_used)", "zend_ptr_stack_2_pop((return_value), 0, 0)", "zend_ptr_stack_2_push((return_value), 0, 0)", "zend_ptr_stack_clean((return_value), 0, -1)", "zend_ptr_stack_clean((return_value), 0, 0)", "zend_ptr_stack_clean((return_value), 0, 1)", "zend_ptr_stack_clean((return_value), 0, 2)", "zend_ptr_stack_clean((return_value), 0, 255)", "zend_ptr_stack_clean((return_value), 0, 3)", "zend_ptr_stack_clean((return_value), 0, 6)", "zend_register_class_alias_ex((return_value), 0, 0)", "zend_register_class_alias_ex((return_value), 0, spl_ce_AppendIterator)", "zend_register_class_alias_ex((return_value), 0, spl_ce_ArrayIterator)", "zend_register_class_alias_ex((return_value), 0, spl_ce_ArrayObject)", "zend_register_class_alias_ex((return_value), 0, spl_ce_CachingIterator)", "zend_register_class_alias_ex((return_value), 0, spl_ce_Countable)", "zend_register_class_alias_ex((return_value), 0, spl_ce_EmptyIterator)", "zend_register_class_alias_ex((return_value), 0, spl_ce_FilterIterator)", "zend_register_class_alias_ex((return_value), 0, spl_ce_InfiniteIterator)", "zend_register_class_alias_ex((return_value), 0, spl_ce_IteratorIterator)", "zend_register_class_alias_ex((return_value), 0, spl_ce_LimitIterator)", "zend_register_class_alias_ex((return_value), 0, spl_ce_NoRewindIterator)", "zend_register_class_alias_ex((return_value), 0, spl_ce_OuterIterator)", "zend_register_class_alias_ex((return_value), 0, spl_ce_ParentIterator)", "zend_register_class_alias_ex((return_value), 0, spl_ce_RecursiveArrayIterator)", "zend_register_class_alias_ex((return_value), 0, spl_ce_RecursiveCachingIterator)", "zend_register_class_alias_ex((return_value), 0, spl_ce_RecursiveFilterIterator)", "zend_register_class_alias_ex((return_value), 0, spl_ce_RecursiveIterator)", "zend_register_class_alias_ex((return_value), 0, spl_ce_RecursiveIteratorIterator)", "zend_register_class_alias_ex((return_value), 0, spl_ce_RecursiveRegexIterator)", "zend_register_class_alias_ex((return_value), 0, spl_ce_RecursiveTreeIterator)", "zend_register_class_alias_ex((return_value), 0, spl_ce_RegexIterator)", "zend_register_class_alias_ex((return_value), 0, spl_ce_SeekableIterator)", "zend_register_class_alias_ex((return_value), 0, zend_ce_aggregate)", "zend_register_class_alias_ex((return_value), 0, zend_ce_arrayaccess)", "zend_register_class_alias_ex((return_value), 0, zend_ce_iterator)", "zend_register_class_alias_ex((return_value), 0, zend_ce_serializable)", "zend_register_class_alias_ex((return_value), 0, zend_ce_traversable)", "zend_register_class_alias_ex((return_value), 0, zend_standard_class_def)", "zend_register_internal_class_ex((return_value), 0, 0)", "zend_register_list_destructors((return_value), 0, -1)", "zend_register_list_destructors((return_value), 0, 0)", "zend_register_list_destructors((return_value), 0, 1)", "zend_register_list_destructors((return_value), 0, 2)", "zend_register_list_destructors((return_value), 0, 255)", "zend_register_list_destructors((return_value), 0, 3)", "zend_register_list_destructors((return_value), 0, 6)", "zend_register_list_destructors((return_value), 0, err)", "zend_register_list_destructors((return_value), 0, ht)", "zend_register_list_destructors((return_value), 0, is_step_double)", "zend_register_list_destructors((return_value), 0, le_index_ptr)", "zend_register_list_destructors((return_value), 0, return_value_used)", "zend_register_resource((return_value), 0, -1)", "zend_register_resource((return_value), 0, 0)", "zend_register_resource((return_value), 0, 1)", "zend_register_resource((return_value), 0, 2)", "zend_register_resource((return_value), 0, 255)", "zend_register_resource((return_value), 0, 3)", "zend_register_resource((return_value), 0, 6)", "zend_register_resource((return_value), 0, err)", "zend_register_resource((return_value), 0, ht)", "zend_register_resource((return_value), 0, is_step_double)", "zend_register_resource((return_value), 0, le_index_ptr)", "zend_register_resource((return_value), 0, return_value_used)", "zend_resolve_class_name((return_value), 0, -1)", "zend_resolve_class_name((return_value), 0, 0)", "zend_resolve_class_name((return_value), 0, 1)", "zend_resolve_class_name((return_value), 0, 2)", "zend_resolve_class_name((return_value), 0, 255)", "zend_resolve_class_name((return_value), 0, 3)", "zend_resolve_class_name((return_value), 0, 6)", "zend_resolve_class_name((return_value), 0, err)", "zend_resolve_class_name((return_value), 0, ht)", "zend_resolve_class_name((return_value), 0, is_step_double)", "zend_resolve_class_name((return_value), 0, le_index_ptr)", "zend_resolve_class_name((return_value), 0, return_value_used)", "zend_resolve_goto_label((return_value), 0, -1)", "zend_resolve_goto_label((return_value), 0, 0)", "zend_resolve_goto_label((return_value), 0, 1)", "zend_resolve_goto_label((return_value), 0, 2)", "zend_resolve_goto_label((return_value), 0, 255)", "zend_resolve_goto_label((return_value), 0, 3)", "zend_resolve_goto_label((return_value), 0, 6)", "zend_resolve_goto_label((return_value), 0, err)", "zend_resolve_goto_label((return_value), 0, ht)", "zend_resolve_goto_label((return_value), 0, is_step_double)", "zend_resolve_goto_label((return_value), 0, le_index_ptr)", "zend_resolve_goto_label((return_value), 0, return_value_used)", "zend_restore_ini_entry((return_value), 0, -1)", "zend_restore_ini_entry((return_value), 0, 0)", "zend_restore_ini_entry((return_value), 0, 1)", "zend_restore_ini_entry((return_value), 0, 2)", "zend_restore_ini_entry((return_value), 0, 255)", "zend_restore_ini_entry((return_value), 0, 3)", "zend_restore_ini_entry((return_value), 0, 6)", "zend_restore_ini_entry((return_value), 0, err)", "zend_restore_ini_entry((return_value), 0, ht)", "zend_restore_ini_entry((return_value), 0, is_step_double)", "zend_restore_ini_entry((return_value), 0, le_index_ptr)", "zend_restore_ini_entry((return_value), 0, return_value_used)", "zend_stack_apply((return_value), 0, 0)", "zend_stack_apply((return_value), 0, brk)", "zend_stack_apply((return_value), 0, dlclose)", "zend_stack_push((return_value), 0, -1)", "zend_stack_push((return_value), 0, 0)", "zend_stack_push((return_value), 0, 1)", "zend_stack_push((return_value), 0, 2)", "zend_stack_push((return_value), 0, 255)", "zend_stack_push((return_value), 0, 3)", "zend_stack_push((return_value), 0, 6)", "zend_stack_push((return_value), 0, err)", "zend_stack_push((return_value), 0, ht)", "zend_stack_push((return_value), 0, is_step_double)", "zend_stack_push((return_value), 0, le_index_ptr)", "zend_stack_push((return_value), 0, return_value_used)", "zend_std_cast_object_tostring((return_value), 0, -1)", "zend_std_cast_object_tostring((return_value), 0, 0)", "zend_std_cast_object_tostring((return_value), 0, 1)", "zend_std_cast_object_tostring((return_value), 0, 2)", "zend_std_cast_object_tostring((return_value), 0, 255)", "zend_std_cast_object_tostring((return_value), 0, 3)", "zend_std_cast_object_tostring((return_value), 0, 6)", "zend_std_cast_object_tostring((return_value), 0, err)", "zend_std_cast_object_tostring((return_value), 0, ht)", "zend_std_cast_object_tostring((return_value), 0, is_step_double)", "zend_std_cast_object_tostring((return_value), 0, le_index_ptr)", "zend_std_cast_object_tostring((return_value), 0, return_value_used)", "zend_str_tolower_copy((return_value), 0, -1)", "zend_str_tolower_copy((return_value), 0, 0)", "zend_str_tolower_copy((return_value), 0, 1)", "zend_str_tolower_copy((return_value), 0, 2)", "zend_str_tolower_copy((return_value), 0, 255)", "zend_str_tolower_copy((return_value), 0, 3)", "zend_str_tolower_copy((return_value), 0, 6)", "zend_stream_fixup((return_value), 0, 0)", "zend_symtable_del((return_value), 0, -1)", "zend_symtable_del((return_value), 0, 0)", "zend_symtable_del((return_value), 0, 1)", "zend_symtable_del((return_value), 0, 2)", "zend_symtable_del((return_value), 0, 255)", "zend_symtable_del((return_value), 0, 3)", "zend_symtable_del((return_value), 0, 6)", "zend_symtable_exists((return_value), 0, -1)", "zend_symtable_exists((return_value), 0, 0)", "zend_symtable_exists((return_value), 0, 1)", "zend_symtable_exists((return_value), 0, 2)", "zend_symtable_exists((return_value), 0, 255)", "zend_symtable_exists((return_value), 0, 3)", "zend_symtable_exists((return_value), 0, 6)", "zend_ts_get_hash_value((return_value), 0, -1)", "zend_ts_get_hash_value((return_value), 0, 0)", "zend_ts_get_hash_value((return_value), 0, 1)", "zend_ts_get_hash_value((return_value), 0, 2)", "zend_ts_get_hash_value((return_value), 0, 255)", "zend_ts_get_hash_value((return_value), 0, 3)", "zend_ts_get_hash_value((return_value), 0, 6)", "zend_ts_hash_add_empty_element((return_value), 0, -1)", "zend_ts_hash_add_empty_element((return_value), 0, 0)", "zend_ts_hash_add_empty_element((return_value), 0, 1)", "zend_ts_hash_add_empty_element((return_value), 0, 2)", "zend_ts_hash_add_empty_element((return_value), 0, 255)", "zend_ts_hash_add_empty_element((return_value), 0, 3)", "zend_ts_hash_add_empty_element((return_value), 0, 6)", "zend_ts_hash_apply_with_argument((return_value), 0, 0)", "zend_ts_hash_exists((return_value), 0, -1)", "zend_ts_hash_exists((return_value), 0, 0)", "zend_ts_hash_exists((return_value), 0, 1)", "zend_ts_hash_exists((return_value), 0, 2)", "zend_ts_hash_exists((return_value), 0, 255)", "zend_ts_hash_exists((return_value), 0, 3)", "zend_ts_hash_exists((return_value), 0, 6)", "zend_ts_hash_index_find((return_value), 0, 0)", "zend_unregister_functions((return_value), 0, 0)", "zend_update_static_property_null((return_value), 0, -1)", "zend_update_static_property_null((return_value), 0, 0)", "zend_update_static_property_null((return_value), 0, 1)", "zend_update_static_property_null((return_value), 0, 2)", "zend_update_static_property_null((return_value), 0, 255)", "zend_update_static_property_null((return_value), 0, 3)", "zend_update_static_property_null((return_value), 0, 6)", "zend_update_static_property_null((return_value), 0, err)", "zend_update_static_property_null((return_value), 0, ht)", "zend_update_static_property_null((return_value), 0, is_step_double)", "zend_update_static_property_null((return_value), 0, le_index_ptr)", "zend_update_static_property_null((return_value), 0, return_value_used)", "zend_user_it_get_new_iterator((return_value), 0, -1)", "zend_user_it_get_new_iterator((return_value), 0, 0)", "zend_user_it_get_new_iterator((return_value), 0, 1)", "zend_user_it_get_new_iterator((return_value), 0, 2)", "zend_user_it_get_new_iterator((return_value), 0, 255)", "zend_user_it_get_new_iterator((return_value), 0, 3)", "zend_user_it_get_new_iterator((return_value), 0, 6)", "zend_user_it_get_new_iterator((return_value), 0, err)", "zend_user_it_get_new_iterator((return_value), 0, ht)", "zend_user_it_get_new_iterator((return_value), 0, is_step_double)", "zend_user_it_get_new_iterator((return_value), 0, le_index_ptr)", "zend_user_it_get_new_iterator((return_value), 0, return_value_used)", "zendi_smart_strcmp((return_value), 0, 0)", "zendi_smart_strcmp((return_value), 0, return_value)", "zendi_smart_strcmp((return_value), 0, this_ptr)", "zendi_smart_strcmp((return_value), 0, zhigh)", "zendi_smart_strcmp((return_value), 0, zlow)", "zendi_smart_strcmp((return_value), 0, zstep)", "zval_update_constant_ex((return_value), 0, 0)", "zval_update_constant_ex((return_value), 0, spl_ce_AppendIterator)", "zval_update_constant_ex((return_value), 0, spl_ce_ArrayIterator)", "zval_update_constant_ex((return_value), 0, spl_ce_ArrayObject)", "zval_update_constant_ex((return_value), 0, spl_ce_CachingIterator)", "zval_update_constant_ex((return_value), 0, spl_ce_Countable)", "zval_update_constant_ex((return_value), 0, spl_ce_EmptyIterator)", "zval_update_constant_ex((return_value), 0, spl_ce_FilterIterator)", "zval_update_constant_ex((return_value), 0, spl_ce_InfiniteIterator)", "zval_update_constant_ex((return_value), 0, spl_ce_IteratorIterator)", "zval_update_constant_ex((return_value), 0, spl_ce_LimitIterator)", "zval_update_constant_ex((return_value), 0, spl_ce_NoRewindIterator)", "zval_update_constant_ex((return_value), 0, spl_ce_OuterIterator)", "zval_update_constant_ex((return_value), 0, spl_ce_ParentIterator)", "zval_update_constant_ex((return_value), 0, spl_ce_RecursiveArrayIterator)", "zval_update_constant_ex((return_value), 0, spl_ce_RecursiveCachingIterator)", "zval_update_constant_ex((return_value), 0, spl_ce_RecursiveFilterIterator)", "zval_update_constant_ex((return_value), 0, spl_ce_RecursiveIterator)", "zval_update_constant_ex((return_value), 0, spl_ce_RecursiveIteratorIterator)", "zval_update_constant_ex((return_value), 0, spl_ce_RecursiveRegexIterator)", "zval_update_constant_ex((return_value), 0, spl_ce_RecursiveTreeIterator)", "zval_update_constant_ex((return_value), 0, spl_ce_RegexIterator)", "zval_update_constant_ex((return_value), 0, spl_ce_SeekableIterator)", "zval_update_constant_ex((return_value), 0, zend_ce_aggregate)", "zval_update_constant_ex((return_value), 0, zend_ce_arrayaccess)", "zval_update_constant_ex((return_value), 0, zend_ce_iterator)", "zval_update_constant_ex((return_value), 0, zend_ce_serializable)", "zval_update_constant_ex((return_value), 0, zend_ce_traversable)", "zval_update_constant_ex((return_value), 0, zend_standard_class_def)", "{\n}\n", "Debug((return_value), 0)", "__cmsg_nxthdr((return_value), 0)", "__overflow((return_value), 0)", "__sigsetjmp((return_value), 0)", "__stat_file_close((return_value), 0)", "__stpcpy((return_value), 0)", "__zend_realloc((return_value), 0)", "_estrndup((return_value), 0)", "_longjmp((return_value), 0)", "_object_init_ex((return_value), 0)", "_php_glob_stream_get_count((return_value), 0)", "_php_stream_filter_append((return_value), 0)", "_php_stream_filter_flush((return_value), 0)", "_php_stream_filter_prepend((return_value), 0)", "_php_stream_flush((return_value), 0)", "_php_stream_fopen_from_file((return_value), 0)", "_php_stream_fopen_from_pipe((return_value), 0)", "_php_stream_free((return_value), 0)", "_php_stream_free_enclosed((return_value), 0)", "_php_stream_memory_get_buffer((return_value), 0)", "_php_stream_mmap_unmap_ex((return_value), 0)", "_php_stream_printf((return_value), 0)", "_php_stream_putc((return_value), 0)", "_php_stream_puts((return_value), 0)", "_php_stream_readdir((return_value), 0)", "_php_stream_stat((return_value), 0)", "_php_stream_truncate_set_size((return_value), 0)", "_zend_bailout((return_value), 0)", "_zend_mm_alloc((return_value), 0)", "_zend_mm_block_size((return_value), 0)", "_zend_mm_free((return_value), 0)", "access((return_value), 0)", "add_index_null((return_value), 0)", "add_next_index_bool((return_value), 0)", "add_next_index_long((return_value), 0)", "add_next_index_resource((return_value), 0)", "add_next_index_zval((return_value), 0)", "add_trait_alias((return_value), 0)", "adjtime((return_value), 0)", "alphasort((return_value), 0)", "ap_php_asprintf((return_value), 0)", "asctime_r((return_value), 0)", "bitwise_not_function((return_value), 0)", "boolean_not_function((return_value), 0)", "bzero((return_value), 0)", "cfg_get_double((return_value), 0)", "cfg_get_entry((return_value), 0)", "cfg_get_long((return_value), 0)", "cfg_get_string((return_value), 0)", "chmod((return_value), 0)", "compile_file((return_value), 0)", "compile_string((return_value), 0)", "convert_to_long_base((return_value), 0)", "ctime_r((return_value), 0)", "display_link_numbers((return_value), 0)", "dlopen((return_value), 0)", "dlsym((return_value), 0)", "drand48_r((return_value), 0)", "execl((return_value), 0)", "execle((return_value), 0)", "execlp((return_value), 0)", "execute_internal((return_value), 0)", "execv((return_value), 0)", "execvp((return_value), 0)", "expand_filepath((return_value), 0)", "explicit_bzero((return_value), 0)", "fgetpos((return_value), 0)", "fopen((return_value), 0)", "fprintf((return_value), 0)", "fputs((return_value), 0)", "fputws((return_value), 0)", "fsetpos((return_value), 0)", "fwide((return_value), 0)", "fwprintf((return_value), 0)", "getcwd((return_value), 0)", "getdomainname((return_value), 0)", "getentropy((return_value), 0)", "gethostname((return_value), 0)", "getloadavg((return_value), 0)", "getlogin_r((return_value), 0)", "gettimeofday((return_value), 0)", "gmtime_r((return_value), 0)", "highlight_file((return_value), 0)", "index((return_value), 0)", "init_trait_alias_list((return_value), 0)", "instanceof_function((return_value), 0)", "lchmod((return_value), 0)", "lcong48_r((return_value), 0)", "link((return_value), 0)", "localtime_r((return_value), 0)", "longjmp((return_value), 0)", "lrand48_r((return_value), 0)", "lstat((return_value), 0)", "lutimes((return_value), 0)", "mblen((return_value), 0)", "mkdir((return_value), 0)", "mkfifo((return_value), 0)", "mkstemps((return_value), 0)", "mrand48_r((return_value), 0)", "nanosleep((return_value), 0)", "object_properties_init((return_value), 0)", "on_exit((return_value), 0)", "open_memstream((return_value), 0)", "open_wmemstream((return_value), 0)", "pathconf((return_value), 0)", "pcre_get_compiled_regex_cache((return_value), 0)", "php_array_data_compare((return_value), 0)", "php_array_key_compare((return_value), 0)", "php_array_natural_case_compare((return_value), 0)", "php_array_natural_compare((return_value), 0)", "php_array_replace_recursive((return_value), 0)", "php_array_reverse_data_compare((return_value), 0)", "php_array_reverse_key_compare((return_value), 0)", "php_array_user_compare((return_value), 0)", "php_array_user_key_compare((return_value), 0)", "php_check_open_basedir_ex((return_value), 0)", "php_check_specific_open_basedir((return_value), 0)", "php_count_recursive((return_value), 0)", "php_dirname((return_value), 0)", "php_ini_activate_per_dir_config((return_value), 0)", "php_ini_activate_per_host_config((return_value), 0)", "php_multisort_compare((return_value), 0)", "php_output_handler_alias((return_value), 0)", "php_output_handler_started((return_value), 0)", "php_output_write((return_value), 0)", "php_output_write_unbuffered((return_value), 0)", "php_pcre_get_stringnumber((return_value), 0)", "php_pcre_refcount((return_value), 0)", "php_printf((return_value), 0)", "php_register_pre_request_shutdown((return_value), 0)", "php_register_url_stream_wrapper((return_value), 0)", "php_register_url_stream_wrapper_volatile((return_value), 0)", "php_spl_get_constructor_helper((return_value), 0)", "php_spl_object_hash((return_value), 0)", "php_sprintf((return_value), 0)", "php_stream_bucket_append((return_value), 0)", "php_stream_bucket_prepend((return_value), 0)", "php_stream_context_del_link((return_value), 0)", "php_stream_context_set((return_value), 0)", "php_stream_dirent_alphasort((return_value), 0)", "php_stream_dirent_alphasortr((return_value), 0)", "php_stream_encloses((return_value), 0)", "php_stream_filter_append_ex((return_value), 0)", "php_stream_filter_prepend_ex((return_value), 0)", "php_stream_filter_register_factory((return_value), 0)", "php_stream_filter_register_factory_volatile((return_value), 0)", "php_stream_filter_remove((return_value), 0)", "php_stream_from_persistent_id((return_value), 0)", "php_stream_xport_crypto_enable((return_value), 0)", "php_stream_xport_register((return_value), 0)", "php_stream_xport_shutdown((return_value), 0)", "php_stripcslashes((return_value), 0)", "php_stripslashes((return_value), 0)", "php_strtolower((return_value), 0)", "php_strtoupper((return_value), 0)", "php_valid_var_name((return_value), 0)", "php_write((return_value), 0)", "popen((return_value), 0)", "print_op_array((return_value), 0)", "printf((return_value), 0)", "psiginfo((return_value), 0)", "putpwent((return_value), 0)", "random_r((return_value), 0)", "realloc((return_value), 0)", "realpath((return_value), 0)", "realpath_cache_del((return_value), 0)", "rename((return_value), 0)", "rindex((return_value), 0)", "seed48_r((return_value), 0)", "seekdir((return_value), 0)", "setbuf((return_value), 0)", "setdomainname((return_value), 0)", "sethostname((return_value), 0)", "setstate_r((return_value), 0)", "settimeofday((return_value), 0)", "sigaddset((return_value), 0)", "sigaltstack((return_value), 0)", "sigdelset((return_value), 0)", "sigismember((return_value), 0)", "siglongjmp((return_value), 0)", "sigstack((return_value), 0)", "sigwait((return_value), 0)", "sigwaitinfo((return_value), 0)", "smart_str_print_long((return_value), 0)", "smart_str_print_unsigned((return_value), 0)", "spl_array_iterator_append((return_value), 0)", "spl_array_iterator_key((return_value), 0)", "sprintf((return_value), 0)", "stat((return_value), 0)", "stpcpy((return_value), 0)", "strcasecmp((return_value), 0)", "strcat((return_value), 0)", "strchr((return_value), 0)", "strcmp((return_value), 0)", "strcoll((return_value), 0)", "strcpy((return_value), 0)", "strcspn((return_value), 0)", "strndup((return_value), 0)", "strnlen((return_value), 0)", "strpbrk((return_value), 0)", "strrchr((return_value), 0)", "strsep((return_value), 0)", "strspn((return_value), 0)", "strstr((return_value), 0)", "strtod((return_value), 0)", "strtof((return_value), 0)", "strtok((return_value), 0)", "strtold((return_value), 0)", "symlink((return_value), 0)", "tempnam((return_value), 0)", "timer_gettime((return_value), 0)", "timespec_get((return_value), 0)", "truncate((return_value), 0)", "tsrm_realpath((return_value), 0)", "utime((return_value), 0)", "utimes((return_value), 0)", "virtual_access((return_value), 0)", "virtual_chdir_file((return_value), 0)", "virtual_chmod((return_value), 0)", "virtual_creat((return_value), 0)", "virtual_filepath((return_value), 0)", "virtual_fopen((return_value), 0)", "virtual_getcwd((return_value), 0)", "virtual_lstat((return_value), 0)", "virtual_mkdir((return_value), 0)", "virtual_open((return_value), 0)", "virtual_popen((return_value), 0)", "virtual_realpath((return_value), 0)", "virtual_rename((return_value), 0)", "virtual_stat((return_value), 0)", "virtual_utime((return_value), 0)", "vprintf((return_value), 0)", "vwprintf((return_value), 0)", "wcpcpy((return_value), 0)", "wcscasecmp((return_value), 0)", "wcscat((return_value), 0)", "wcschr((return_value), 0)", "wcscmp((return_value), 0)", "wcscoll((return_value), 0)", "wcscpy((return_value), 0)", "wcscspn((return_value), 0)", "wcsnlen((return_value), 0)", "wcspbrk((return_value), 0)", "wcsrchr((return_value), 0)", "wcsspn((return_value), 0)", "wcsstr((return_value), 0)", "wcstod((return_value), 0)", "wcstof((return_value), 0)", "wcstold((return_value), 0)", "wctomb((return_value), 0)", "wprintf((return_value), 0)", "zend_add_literal((return_value), 0)", "zend_add_to_list((return_value), 0)", "zend_atoi((return_value), 0)", "zend_atol((return_value), 0)", "zend_binary_zval_strcasecmp((return_value), 0)", "zend_binary_zval_strcmp((return_value), 0)", "zend_call_function((return_value), 0)", "zend_check_protected((return_value), 0)", "zend_class_implements((return_value), 0)", "zend_compare_file_handles((return_value), 0)", "zend_copy_constants((return_value), 0)", "zend_delete_global_variable((return_value), 0)", "zend_dirname((return_value), 0)", "zend_disable_class((return_value), 0)", "zend_disable_function((return_value), 0)", "zend_do_begin_class_member_function_call((return_value), 0)", "zend_do_begin_dynamic_function_call((return_value), 0)", "zend_do_begin_function_call((return_value), 0)", "zend_do_begin_namespace((return_value), 0)", "zend_do_begin_new_object((return_value), 0)", "zend_do_begin_qm_op((return_value), 0)", "zend_do_boolean_and_begin((return_value), 0)", "zend_do_boolean_or_begin((return_value), 0)", "zend_do_case_after_statement((return_value), 0)", "zend_do_clone((return_value), 0)", "zend_do_declare_class_constant((return_value), 0)", "zend_do_declare_constant((return_value), 0)", "zend_do_declare_stmt((return_value), 0)", "zend_do_default_before_statement((return_value), 0)", "zend_do_end_class_declaration((return_value), 0)", "zend_do_exit((return_value), 0)", "zend_do_fetch_class((return_value), 0)", "zend_do_fetch_lexical_variable((return_value), 0)", "zend_do_fetch_static_member((return_value), 0)", "zend_do_for_before_statement((return_value), 0)", "zend_do_for_cond((return_value), 0)", "zend_do_foreach_end((return_value), 0)", "zend_do_if_after_statement((return_value), 0)", "zend_do_if_cond((return_value), 0)", "zend_do_implement_interface((return_value), 0)", "zend_do_implement_trait((return_value), 0)", "zend_do_inherit_interfaces((return_value), 0)", "zend_do_inheritance((return_value), 0)", "zend_do_list_end((return_value), 0)", "zend_do_mark_last_catch((return_value), 0)", "zend_do_print((return_value), 0)", "zend_do_return((return_value), 0)", "zend_do_shell_exec((return_value), 0)", "zend_do_verify_access_types((return_value), 0)", "zend_do_while_cond((return_value), 0)", "zend_do_while_end((return_value), 0)", "zend_fcall_info_argn((return_value), 0)", "zend_fcall_info_args((return_value), 0)", "zend_fcall_info_args_clear((return_value), 0)", "zend_get_class_fetch_type((return_value), 0)", "zend_get_compiled_variable_value((return_value), 0)", "zend_get_hash_value((return_value), 0)", "zend_hash_apply((return_value), 0)", "zend_hash_func((return_value), 0)", "zend_hash_get_current_key_type_ex((return_value), 0)", "zend_hash_get_pointer((return_value), 0)", "zend_hash_index_exists((return_value), 0)", "zend_hash_internal_pointer_end_ex((return_value), 0)", "zend_hash_internal_pointer_reset_ex((return_value), 0)", "zend_hash_move_backwards_ex((return_value), 0)", "zend_hash_move_forward_ex((return_value), 0)", "zend_hash_reverse_apply((return_value), 0)", "zend_hash_set_pointer((return_value), 0)", "zend_hex_strtod((return_value), 0)", "zend_html_puts((return_value), 0)", "zend_ini_boolean_displayer_cb((return_value), 0)", "zend_ini_color_displayer_cb((return_value), 0)", "zend_init_list((return_value), 0)", "zend_initialize_class_data((return_value), 0)", "zend_inline_hash_func((return_value), 0)", "zend_is_auto_global((return_value), 0)", "zend_iterator_unwrap((return_value), 0)", "zend_list_insert((return_value), 0)", "zend_llist_add_element((return_value), 0)", "zend_llist_apply((return_value), 0)", "zend_llist_apply_with_del((return_value), 0)", "zend_llist_copy((return_value), 0)", "zend_llist_get_first_ex((return_value), 0)", "zend_llist_get_last_ex((return_value), 0)", "zend_llist_get_next_ex((return_value), 0)", "zend_llist_get_prev_ex((return_value), 0)", "zend_llist_prepend_element((return_value), 0)", "zend_llist_sort((return_value), 0)", "zend_make_callable((return_value), 0)", "zend_multibyte_set_script_encoding((return_value), 0)", "zend_multibyte_set_script_encoding_by_string((return_value), 0)", "zend_object_create_proxy((return_value), 0)", "zend_object_std_init((return_value), 0)", "zend_object_store_set_object((return_value), 0)", "zend_objects_destroy_object((return_value), 0)", "zend_objects_new((return_value), 0)", "zend_objects_store_init((return_value), 0)", "zend_oct_strtod((return_value), 0)", "zend_print_zval((return_value), 0)", "zend_print_zval_r((return_value), 0)", "zend_ptr_stack_apply((return_value), 0)", "zend_ptr_stack_init_ex((return_value), 0)", "zend_ptr_stack_n_pop((return_value), 0)", "zend_ptr_stack_n_push((return_value), 0)", "zend_ptr_stack_push((return_value), 0)", "zend_quick_get_constant((return_value), 0)", "zend_register_ini_entries((return_value), 0)", "zend_resolve_non_class_name((return_value), 0)", "zend_stack_top((return_value), 0)", "zend_startup((return_value), 0)", "zend_std_get_debug_info((return_value), 0)", "zend_str_tolower((return_value), 0)", "zend_str_tolower_dup((return_value), 0)", "zend_stream_open((return_value), 0)", "zend_string_to_double((return_value), 0)", "zend_strndup((return_value), 0)", "zend_strtod((return_value), 0)", "zend_ts_hash_apply((return_value), 0)", "zend_ts_hash_func((return_value), 0)", "zend_ts_hash_index_exists((return_value), 0)", "zend_ts_hash_reverse_apply((return_value), 0)", "zend_user_it_get_current_data((return_value), 0)", "zend_user_it_new_iterator((return_value), 0)", "zval_compare((return_value), 0)", "zval_set_isref_to_p((return_value), 0)", "zval_set_refcount_p((return_value), 0)", "zval_update_constant((return_value), 0)", "zval_update_constant_inline_change((return_value), 0)", "zval_update_constant_no_inline_change((return_value), 0)", "zval_user_compare((return_value), 0)", "_array_init(((&err)), 0)", "_array_init(((&ht)), 0)", "_array_init(((&is_step_double)), 0)", "_array_init(((&return_value)), 0)", "_array_init(((&return_value_ptr)), 0)", "_array_init(((&return_value_used)), 0)", "_array_init(((&step)), 0)", "_array_init(((&this_ptr)), 0)", "_array_init(((&zhigh)), 0)", "_array_init(((&zlow)), 0)", "_array_init(((&zstep)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_array_init((return_value), (0 * err))", "_array_init((return_value), (0 * ht))", "_array_init((return_value), (0 * is_step_double))", "_array_init((return_value), (0 * return_value_used))", "_array_init((return_value), (0))", "_array_init((return_value), (err != 0))", "_array_init((return_value), (err != is_step_double))", "_array_init((return_value), (err * ht))", "_array_init((return_value), (err * is_step_double))", "_array_init((return_value), (err * return_value_used))", "_array_init((return_value), (err + 0))", "_array_init((return_value), (err + is_step_double))", "_array_init((return_value), (err - 0))", "_array_init((return_value), (err - is_step_double))", "_array_init((return_value), (err == 0))", "_array_init((return_value), (err == is_step_double))", "_array_init((return_value), (ht != 0))", "_array_init((return_value), (ht != err))", "_array_init((return_value), (ht != is_step_double))", "_array_init((return_value), (ht != return_value_used))", "_array_init((return_value), (ht * err))", "_array_init((return_value), (ht * is_step_double))", "_array_init((return_value), (ht * return_value_used))", "_array_init((return_value), (ht + 0))", "_array_init((return_value), (ht + err))", "_array_init((return_value), (ht + is_step_double))", "_array_init((return_value), (ht + return_value_used))", "_array_init((return_value), (ht - 0))", "_array_init((return_value), (ht - err))", "_array_init((return_value), (ht - is_step_double))", "_array_init((return_value), (ht - return_value_used))", "_array_init((return_value), (ht == 0))", "_array_init((return_value), (ht == err))", "_array_init((return_value), (ht == is_step_double))", "_array_init((return_value), (ht == return_value_used))", "_array_init((return_value), (is_step_double != 0))", "_array_init((return_value), (is_step_double * err))", "_array_init((return_value), (is_step_double * ht))", "_array_init((return_value), (is_step_double * return_value_used))", "_array_init((return_value), (is_step_double + 0))", "_array_init((return_value), (is_step_double - 0))", "_array_init((return_value), (is_step_double == 0))", "_array_init((return_value), (return_value != 0))", "_array_init((return_value), (return_value != this_ptr))", "_array_init((return_value), (return_value != zhigh))", "_array_init((return_value), (return_value != zlow))", "_array_init((return_value), (return_value != zstep))", "_array_init((return_value), (return_value == 0))", "_array_init((return_value), (return_value == this_ptr))", "_array_init((return_value), (return_value == zhigh))", "_array_init((return_value), (return_value == zlow))", "_array_init((return_value), (return_value == zstep))", "_array_init((return_value), (return_value_ptr != 0))", "_array_init((return_value), (return_value_ptr == 0))", "_array_init((return_value), (return_value_used != 0))", "_array_init((return_value), (return_value_used != err))", "_array_init((return_value), (return_value_used != is_step_double))", "_array_init((return_value), (return_value_used * err))", "_array_init((return_value), (return_value_used * ht))", "_array_init((return_value), (return_value_used * is_step_double))", "_array_init((return_value), (return_value_used + 0))", "_array_init((return_value), (return_value_used + err))", "_array_init((return_value), (return_value_used + is_step_double))", "_array_init((return_value), (return_value_used - 0))", "_array_init((return_value), (return_value_used - err))", "_array_init((return_value), (return_value_used - is_step_double))", "_array_init((return_value), (return_value_used == 0))", "_array_init((return_value), (return_value_used == err))", "_array_init((return_value), (return_value_used == is_step_double))", "_array_init((return_value), (step != 0))", "_array_init((return_value), (step == 0))", "_array_init((return_value), (this_ptr != 0))", "_array_init((return_value), (this_ptr != zhigh))", "_array_init((return_value), (this_ptr != zlow))", "_array_init((return_value), (this_ptr != zstep))", "_array_init((return_value), (this_ptr == 0))", "_array_init((return_value), (this_ptr == zhigh))", "_array_init((return_value), (this_ptr == zlow))", "_array_init((return_value), (this_ptr == zstep))", "_array_init((return_value), (zhigh != 0))", "_array_init((return_value), (zhigh != zstep))", "_array_init((return_value), (zhigh == 0))", "_array_init((return_value), (zhigh == zstep))", "_array_init((return_value), (zlow != 0))", "_array_init((return_value), (zlow != zhigh))", "_array_init((return_value), (zlow != zstep))", "_array_init((return_value), (zlow == 0))", "_array_init((return_value), (zlow == zhigh))", "_array_init((return_value), (zlow == zstep))", "_array_init((return_value), (zstep != 0))", "_array_init((return_value), (zstep == 0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.1657317281692468, -8.7075724960692469, -8.7059124500692473, -9.0616086536692464, -8.8285047591692472, -9.17708626516925, -9.5669998841692472]
								}, {
									"case":	2,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	3,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	4,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	5,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	6,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	7,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	8,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	9,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	10,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	11,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	12,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	13,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	14,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	15,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	16,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	17,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	18,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	19,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	20,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	21,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	22,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	23,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	24,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	25,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	26,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	27,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	28,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	29,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	30,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	31,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	32,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	33,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	34,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	35,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	36,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	37,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	38,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	39,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	40,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	41,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	42,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	43,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	44,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	45,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	46,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	47,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	48,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	49,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	50,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	51,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	52,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	53,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	54,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	55,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	56,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	57,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	58,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	59,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	60,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	61,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	62,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	63,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	64,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	65,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	66,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	67,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	68,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	69,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	70,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	71,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	72,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	73,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	74,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	75,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	76,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	77,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	78,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	79,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	80,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	81,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	82,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	83,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	84,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	85,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	86,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	87,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	88,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	89,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	90,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	91,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	92,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	93,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	94,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	95,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	96,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	97,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	98,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	99,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	100,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	101,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	102,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	103,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	104,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	105,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	106,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	107,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	108,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	109,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	110,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	111,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	112,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	113,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	114,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	115,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	116,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	117,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	118,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	119,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	120,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	121,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	122,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	123,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	124,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	125,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	126,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	127,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	128,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	129,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	130,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	131,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	132,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	133,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	134,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	135,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	136,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	137,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	138,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	139,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	140,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	141,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	142,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	143,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	144,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	145,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	146,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	147,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	148,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	149,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	150,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	151,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	152,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	153,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	154,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	155,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	156,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	157,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	158,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	159,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	160,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	161,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	162,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	163,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	164,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	165,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	166,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	167,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	168,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	169,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	170,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	171,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	172,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	173,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	174,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	175,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	176,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	177,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	178,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	179,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	180,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	181,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	182,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	183,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	184,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	185,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	186,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	187,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	188,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	189,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	190,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	191,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	192,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	193,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	194,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	195,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	196,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	197,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	198,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	199,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	200,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	201,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	202,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	203,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	204,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	205,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	206,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	207,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	208,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	209,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	210,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	211,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	212,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	213,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	214,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	215,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	216,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	217,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	218,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	219,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	220,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	221,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	222,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	223,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	224,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	225,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	226,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	227,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	228,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	229,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	230,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	231,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	232,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	233,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	234,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	235,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	236,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	237,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	238,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	239,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	240,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	241,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	242,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	243,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	244,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	245,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	246,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	247,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	248,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	249,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	250,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	251,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	252,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	253,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	254,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	255,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	256,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	257,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	258,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	259,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	260,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	261,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	262,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	263,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	264,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	265,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	266,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	267,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	268,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	269,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	270,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	271,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	272,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	273,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	274,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	275,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	276,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	277,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	278,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	279,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	280,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	281,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	282,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	283,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	284,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	285,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	286,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	287,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	288,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	289,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	290,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	291,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	292,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	293,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	294,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	295,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	296,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	297,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	298,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	299,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	300,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	301,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	302,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	303,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	304,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	305,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	306,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	307,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	308,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	309,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	310,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	311,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	312,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	313,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	314,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	315,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	316,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	317,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	318,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	319,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	320,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	321,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	322,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	323,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	324,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	325,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	326,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	327,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	328,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	329,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	330,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	331,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	332,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	333,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	334,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	335,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	336,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	337,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	338,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	339,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	340,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	341,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	342,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	343,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	344,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	345,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	346,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	347,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	348,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	349,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	350,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	351,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	352,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	353,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	354,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	355,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	356,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	357,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	358,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	359,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	360,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	361,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	362,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	363,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	364,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	365,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	366,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	367,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	368,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	369,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	370,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	371,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	372,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	373,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	374,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	375,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	376,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	377,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	378,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	379,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	380,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	381,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	382,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	383,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	384,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	385,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	386,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	387,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	388,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	389,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	390,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	391,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	392,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	393,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	394,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	395,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	396,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	397,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	398,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	399,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	400,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	401,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	402,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	403,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	404,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	405,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	406,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	407,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	408,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	409,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	410,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	411,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	412,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	413,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	414,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	415,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	416,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	417,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	418,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	419,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	420,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	421,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	422,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	423,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	424,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	425,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	426,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	427,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	428,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	429,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	430,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	431,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	432,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	433,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	434,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	435,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	436,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	437,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	438,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	439,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	440,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	441,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	442,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	443,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	444,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	445,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	446,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	447,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	448,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	449,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	450,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	451,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	452,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	453,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	454,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	455,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	456,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	457,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	458,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	459,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	460,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	461,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	462,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	463,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	464,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	465,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	466,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	467,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	468,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	469,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	470,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	471,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	472,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	473,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	474,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	475,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	476,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	477,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	478,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	479,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	480,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	481,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	482,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	483,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	484,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	485,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	486,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	487,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	488,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	489,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	490,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	491,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	492,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	493,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	494,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	495,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	496,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	497,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	498,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	499,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	500,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	501,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	502,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	503,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	504,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	505,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	506,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	507,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	508,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	509,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	510,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	511,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	512,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	513,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	514,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	515,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	516,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	517,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	518,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	519,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	520,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	521,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	522,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	523,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	524,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	525,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	526,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	527,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	528,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	529,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	530,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	531,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	532,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	533,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	534,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	535,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	536,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	537,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	538,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	539,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	540,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	541,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	542,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	543,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	544,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	545,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	546,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	547,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	548,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	549,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	550,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	551,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	552,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	553,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	554,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	555,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	556,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	557,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	558,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	559,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	560,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	561,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	562,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	563,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	564,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	565,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	566,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	567,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	568,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	569,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	570,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	571,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	572,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	573,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	574,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	575,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	576,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	577,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	578,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	579,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	580,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	581,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	582,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	583,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	584,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	585,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	586,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	587,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	588,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	589,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	590,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	591,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	592,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	593,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	594,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	595,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	596,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	597,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	598,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	599,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	600,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	601,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	602,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	603,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	604,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	605,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	606,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	607,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	608,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	609,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	610,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	611,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	612,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	613,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	614,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	615,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	616,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	617,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	618,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	619,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	620,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	621,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	622,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	623,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	624,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	625,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	626,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	627,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	628,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	629,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	630,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	631,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	632,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	633,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	634,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	635,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	636,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	637,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	638,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	639,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	640,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	641,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	642,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	643,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	644,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	645,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	646,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	647,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	648,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	649,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	650,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	651,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	652,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	653,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	654,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	655,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	656,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	657,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	658,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	659,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	660,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	661,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	662,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	663,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	664,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	665,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	666,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	667,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	668,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	669,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	670,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	671,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	672,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	673,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	674,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	675,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	676,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	677,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	678,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	679,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	680,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	681,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	682,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	683,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	684,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	685,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	686,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	687,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	688,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	689,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	690,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	691,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	692,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	693,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	694,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	695,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	696,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	697,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	698,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	699,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	700,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	701,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	702,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	703,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	704,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	705,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	706,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	707,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	708,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	709,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	710,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	711,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	712,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	713,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	714,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	715,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	716,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	717,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	718,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	719,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	720,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	721,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	722,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	723,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	724,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	725,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	726,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	727,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	728,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	729,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	730,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	731,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	732,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	733,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	734,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	735,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	736,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	737,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	738,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	739,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	740,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	741,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	742,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	743,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	744,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	745,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	746,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	747,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	748,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	749,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	750,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	751,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	752,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	753,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	754,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	755,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	756,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	757,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	758,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	759,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	760,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	761,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	762,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	763,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	764,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	765,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	766,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	767,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	768,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	769,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	770,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	771,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	772,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	773,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	774,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	775,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	776,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	777,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	778,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	779,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	780,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	781,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	782,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	783,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	784,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	785,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	786,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	787,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	788,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	789,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	790,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	791,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	792,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	793,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	794,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	795,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	796,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	797,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	798,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	799,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	800,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	801,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	802,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	803,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	804,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	805,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	806,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	807,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	808,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	809,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	810,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	811,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	812,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	813,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	814,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	815,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	816,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	817,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	818,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	819,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	820,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	821,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	822,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	823,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	824,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	825,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	826,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	827,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	828,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	829,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	830,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	831,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	832,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	833,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	834,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	835,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	836,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	837,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	838,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	839,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	840,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	841,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	842,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	843,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	844,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	845,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	846,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	847,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	848,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	849,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	850,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	851,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	852,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	853,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	854,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	855,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	856,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	857,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	858,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	859,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	860,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	861,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	862,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	863,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	864,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	865,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	866,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	867,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	868,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	869,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	870,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	871,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	872,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	873,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	874,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	875,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	876,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	877,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	878,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	879,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	880,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	881,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	882,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	883,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	884,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	885,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	886,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	887,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	888,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	889,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	890,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	891,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	892,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	893,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	894,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	895,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	896,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	897,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	898,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	899,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	900,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	901,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	902,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	903,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	904,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	905,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	906,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	907,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	908,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	909,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	910,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	911,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	912,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	913,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	914,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	915,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	916,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	917,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	918,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	919,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	920,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	921,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	922,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	923,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	924,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	925,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	926,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	927,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	928,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	929,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	930,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	931,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	932,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	933,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	934,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	935,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	936,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	937,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	938,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	939,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	940,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	941,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	942,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	943,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	944,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	945,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	946,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	947,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	948,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	949,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	950,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	951,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	952,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	953,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	954,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	955,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	956,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	957,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	958,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	959,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	960,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	961,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	962,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	963,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	964,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	965,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	966,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	967,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	968,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	969,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	970,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	971,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	972,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	973,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	974,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	975,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	976,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	977,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	978,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	979,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	980,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	981,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	982,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	983,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	984,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	985,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	986,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	987,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	988,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	989,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	990,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	991,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	992,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	993,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	994,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	995,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	996,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	997,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	998,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	999,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1000,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1001,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1002,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1003,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1004,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1005,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1006,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1007,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1008,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1009,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1010,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1011,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1012,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1013,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1014,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1015,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1016,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1017,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1018,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1019,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1020,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1021,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1022,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1023,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1024,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1025,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1026,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1027,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1028,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1029,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1030,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1031,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1032,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1033,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1034,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1035,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1036,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1037,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1038,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1039,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1040,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1041,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1042,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1043,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1044,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1045,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1046,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1047,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1048,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1049,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1050,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1051,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1052,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1053,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1054,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1055,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1056,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1057,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1058,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1059,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1060,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1061,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1062,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1063,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1064,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1065,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1066,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1067,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1068,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1069,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1070,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1071,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1072,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1073,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1074,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1075,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1076,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1077,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1078,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1079,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1080,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1081,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1082,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1083,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1084,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1085,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1086,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1087,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1088,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1089,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1090,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1091,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1092,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1093,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1094,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1095,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1096,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1097,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1098,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1099,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1100,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1101,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1102,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1103,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1104,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1105,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1106,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1107,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1108,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1109,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1110,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1111,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1112,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1113,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1114,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1115,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1116,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1117,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1118,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1119,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1120,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1121,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1122,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1123,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1124,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1125,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1126,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1127,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1128,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1129,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1130,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1131,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1132,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1133,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1134,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1135,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1136,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1137,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1138,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1139,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1140,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1141,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1142,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1143,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1144,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1145,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1146,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1147,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1148,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1149,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1150,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1151,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1152,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1153,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1154,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1155,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1156,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1157,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1158,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1159,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1160,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1161,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1162,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1163,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1164,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1165,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1166,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1167,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1168,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1169,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1170,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1171,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1172,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1173,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1174,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1175,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1176,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1177,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1178,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1179,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1180,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1181,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1182,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1183,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1184,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1185,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1186,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1187,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1188,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1189,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1190,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1191,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1192,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1193,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1194,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1195,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1196,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1197,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1198,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1199,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1200,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1201,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1202,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1203,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1204,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1205,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1206,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1207,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1208,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1209,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1210,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1211,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1212,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1213,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1214,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1215,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1216,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1217,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1218,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1219,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1220,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1221,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1222,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1223,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1224,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1225,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1226,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1227,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1228,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1229,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1230,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1231,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1232,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1233,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1234,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1235,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1236,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1237,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1238,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1239,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1240,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1241,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1242,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1243,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1244,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1245,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1246,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1247,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1248,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1249,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1250,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1251,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1252,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1253,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1254,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1255,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1256,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1257,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1258,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1259,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1260,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1261,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1262,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1263,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1264,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1265,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1266,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1267,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1268,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1269,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1270,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1271,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1272,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1273,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1274,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1275,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1276,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1277,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1278,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1279,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1280,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1281,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1282,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1283,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1284,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1285,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1286,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1287,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1288,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1289,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1290,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1291,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1292,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1293,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1294,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1295,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1296,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1297,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1298,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1299,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1300,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1301,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1302,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1303,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1304,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1305,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1306,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1307,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1308,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1309,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1310,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1311,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1312,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1313,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1314,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1315,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1316,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1317,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1318,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1319,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1320,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1321,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1322,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1323,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1324,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1325,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1326,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1327,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1328,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1329,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1330,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1331,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1332,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1333,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1334,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1335,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1336,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1337,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1338,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1339,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1340,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1341,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1342,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1343,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1344,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1345,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1346,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1347,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1348,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1349,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1350,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1351,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1352,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1353,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1354,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1355,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1356,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1357,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1358,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1359,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1360,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1361,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1362,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1363,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1364,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1365,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1366,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1367,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1368,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1369,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1370,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1371,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1372,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1373,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1374,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1375,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1376,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1377,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1378,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1379,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1380,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1381,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1382,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1383,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1384,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1385,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1386,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1387,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1388,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1389,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1390,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1391,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1392,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1393,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1394,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1395,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1396,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1397,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1398,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1399,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1400,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1401,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1402,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1403,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1404,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1405,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1406,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1407,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1408,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1409,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1410,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1411,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1412,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1413,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1414,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1415,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1416,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1417,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1418,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1419,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1420,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1421,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1422,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1423,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1424,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1425,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1426,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1427,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1428,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1429,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1430,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1431,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1432,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1433,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1434,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1435,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1436,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1437,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1438,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1439,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1440,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1441,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1442,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1443,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1444,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1445,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1446,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1447,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1448,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1449,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1450,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1451,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1452,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1453,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1454,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1455,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1456,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1457,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1458,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1459,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1460,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1461,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1462,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1463,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1464,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1465,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1466,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1467,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1468,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1469,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1470,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1471,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1472,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1473,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1474,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1475,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1476,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1477,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1478,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1479,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1480,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1481,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1482,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1483,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1484,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1485,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1486,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1487,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1488,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1489,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1490,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1491,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1492,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1493,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1494,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1495,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1496,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1497,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1498,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1499,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1500,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1501,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1502,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1503,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1504,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1505,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1506,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1507,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1508,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1509,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1510,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1511,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1512,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1513,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1514,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1515,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1516,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1517,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1518,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1519,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1520,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1521,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1522,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1523,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1524,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1525,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1526,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1527,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1528,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1529,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1530,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1531,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1532,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1533,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1534,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1535,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1536,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1537,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1538,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1539,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1540,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1541,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1542,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1543,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1544,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1545,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1546,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1547,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1548,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1549,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1550,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1551,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1552,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1553,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1554,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1555,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1556,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1557,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1558,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1559,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1560,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1561,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1562,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1563,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1564,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1565,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1566,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1567,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1568,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1569,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1570,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1571,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1572,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1573,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1574,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1575,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1576,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1577,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1578,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1579,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1580,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1581,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1582,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1583,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1584,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1585,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1586,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1587,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1588,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1589,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1590,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1591,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1592,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1593,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1594,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1595,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1596,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1597,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1598,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1599,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1600,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1601,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1602,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1603,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1604,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1605,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1606,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1607,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1608,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1609,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1610,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1611,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1612,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1613,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1614,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1615,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1616,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1617,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1618,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1619,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1620,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1621,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1622,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1623,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1624,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1625,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1626,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1627,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1628,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1629,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1630,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1631,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1632,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1633,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1634,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1635,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1636,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1637,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1638,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1639,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1640,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1641,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1642,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1643,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1644,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1645,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1646,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1647,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1648,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1649,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1650,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1651,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1652,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1653,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1654,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1655,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1656,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1657,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1658,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1659,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1660,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1661,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1662,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1663,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1664,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1665,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1666,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1667,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1668,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1669,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1670,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1671,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1672,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1673,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1674,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1675,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1676,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1677,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1678,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1679,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1680,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1681,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1682,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1683,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1684,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1685,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1686,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1687,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1688,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1689,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1690,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1691,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1692,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1693,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1694,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1695,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1696,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1697,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1698,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1699,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1700,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1701,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1702,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1703,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1704,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1705,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1706,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1707,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1708,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1709,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1710,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1711,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1712,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1713,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1714,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1715,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1716,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1717,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1718,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1719,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1720,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1721,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1722,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1723,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1724,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1725,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1726,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1727,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1728,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1729,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1730,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1731,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1732,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1733,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1734,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1735,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1736,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1737,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1738,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1739,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1740,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1741,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1742,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1743,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1744,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1745,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1746,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1747,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1748,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1749,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1750,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1751,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1752,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1753,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1754,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1755,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1756,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1757,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1758,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1759,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1760,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1761,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1762,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1763,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1764,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1765,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1766,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1767,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1768,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1769,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1770,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1771,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1772,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1773,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1774,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1775,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1776,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1777,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1778,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1779,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1780,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1781,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1782,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1783,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1784,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1785,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1786,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1787,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1788,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1789,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1790,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1791,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1792,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1793,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1794,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1795,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1796,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1797,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1798,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1799,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1800,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1801,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1802,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1803,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1804,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1805,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1806,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1807,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1808,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1809,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1810,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1811,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1812,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1813,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1814,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1815,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1816,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1817,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1818,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1819,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1820,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1821,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1822,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1823,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1824,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1825,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1826,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1827,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1828,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1829,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1830,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1831,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1832,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1833,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1834,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1835,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1836,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1837,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1838,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1839,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1840,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1841,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1842,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1843,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1844,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1845,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1846,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1847,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1848,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1849,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1850,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1851,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1852,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1853,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1854,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1855,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1856,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1857,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1858,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1859,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1860,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1861,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1862,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1863,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1864,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1865,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1866,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1867,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1868,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1869,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1870,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1871,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1872,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1873,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1874,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1875,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1876,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1877,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1878,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1879,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1880,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1881,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1882,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1883,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1884,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1885,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1886,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1887,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1888,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1889,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1890,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1891,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1892,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1893,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1894,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1895,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1896,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1897,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1898,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1899,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1900,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1901,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1902,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1903,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1904,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1905,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1906,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1907,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1908,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1909,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1910,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1911,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1912,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1913,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1914,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1915,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1916,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1917,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1918,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1919,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1920,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1921,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1922,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1923,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1924,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1925,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1926,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1927,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1928,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1929,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1930,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1931,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1932,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1933,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1934,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1935,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1936,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1937,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1938,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1939,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1940,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1941,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1942,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1943,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1944,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1945,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1946,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1947,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1948,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1949,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1950,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1951,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1952,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1953,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1954,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1955,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1956,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1957,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1958,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1959,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1960,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1961,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1962,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1963,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1964,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1965,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1966,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1967,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1968,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1969,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1970,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1971,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1972,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1973,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1974,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1975,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1976,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1977,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1978,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1979,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1980,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1981,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1982,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1983,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1984,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1985,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1986,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1987,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1988,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1989,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1990,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1991,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1992,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1993,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1994,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1995,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1996,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1997,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1998,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	1999,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2000,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2001,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2002,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2003,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2004,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2005,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2006,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2007,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2008,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2009,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2010,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2011,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2012,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2013,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2014,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2015,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2016,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2017,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2018,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2019,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2020,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2021,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2022,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2023,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2024,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2025,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2026,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2027,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2028,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2029,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2030,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2031,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2032,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2033,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2034,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2035,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2036,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2037,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2038,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2039,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2040,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2041,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2042,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2043,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2044,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2045,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2046,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2047,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2048,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2049,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2050,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2051,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2052,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2053,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2054,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2055,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2056,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2057,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2058,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2059,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2060,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2061,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2062,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2063,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2064,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2065,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2066,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2067,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2068,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2069,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2070,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2071,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2072,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2073,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2074,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2075,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2076,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2077,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2078,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2079,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2080,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2081,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2082,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2083,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2084,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2085,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2086,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2087,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2088,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2089,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2090,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2091,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2092,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2093,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2094,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2095,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2096,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2097,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2098,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2099,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2100,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2101,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2102,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2103,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2104,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2105,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2106,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2107,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2108,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2109,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2110,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2111,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2112,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2113,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2114,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2115,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2116,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2117,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2118,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2119,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2120,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2121,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2122,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2123,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2124,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2125,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2126,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2127,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2128,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2129,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2130,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2131,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2132,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2133,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2134,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2135,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2136,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2137,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2138,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2139,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2140,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2141,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2142,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2143,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2144,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2145,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2146,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2147,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2148,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2149,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2150,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2151,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2152,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2153,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2154,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2155,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2156,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2157,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2158,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2159,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2160,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2161,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2162,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2163,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2164,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2165,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2166,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2167,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2168,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2169,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2170,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2171,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2172,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2173,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2174,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2175,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2176,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2177,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2178,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2179,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2180,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2181,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2182,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2183,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2184,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2185,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2186,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2187,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2188,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2189,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2190,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2191,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2192,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2193,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2194,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2195,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2196,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2197,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2198,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2199,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2200,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2201,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2202,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2203,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2204,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2205,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2206,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2207,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2208,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2209,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2210,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2211,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2212,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2213,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2214,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2215,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2216,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2217,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2218,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2219,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2220,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2221,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2222,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2223,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2224,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2225,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2226,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2227,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2228,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2229,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2230,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2231,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2232,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2233,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2234,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2235,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2236,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2237,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2238,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2239,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2240,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2241,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2242,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2243,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2244,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2245,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2246,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2247,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2248,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2249,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2250,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2251,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2252,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2253,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2254,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2255,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2256,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2257,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2258,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2259,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2260,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2261,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2262,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2263,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2264,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2265,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2266,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2267,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2268,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2269,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2270,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2271,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2272,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2273,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2274,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2275,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2276,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2277,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2278,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2279,
									"scores":	[-7.6495238591692472]
								}]
						}]
				}, {
					"line":	1646,
					"switches":	[]
				}, {
					"line":	1647,
					"switches":	[]
				}, {
					"line":	1648,
					"switches":	[]
				}, {
					"line":	1650,
					"switches":	[{
							"switch":	23,
							"types":	[[], [], [], [], [381, 382, 383, 384], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [], [], [], [333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380], [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], [], [], [], [], [], []],
							"begin_line":	1651,
							"begin_column":	1,
							"end_line":	1651,
							"end_column":	1,
							"patch_codes":	["memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow), 0, sizeof (*(&(*zlow))))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset(&(zhigh)->is_ref__gc, 0, sizeof (*(&(zhigh)->is_ref__gc)))", "memset(&(zhigh)->refcount__gc, 0, sizeof (*(&(zhigh)->refcount__gc)))", "memset(&(zhigh)->type, 0, sizeof (*(&(zhigh)->type)))", "memset(&(zhigh)->value, 0, sizeof (*(&(zhigh)->value)))", "memset(&(zlow)->is_ref__gc, 0, sizeof (*(&(zlow)->is_ref__gc)))", "memset(&(zlow)->refcount__gc, 0, sizeof (*(&(zlow)->refcount__gc)))", "memset(&(zlow)->type, 0, sizeof (*(&(zlow)->type)))", "memset(&(zlow)->value, 0, sizeof (*(&(zlow)->value)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_null(*(return_value_ptr))", "add_next_index_stringl((return_value), (const char *)low, 1, 1)", "add_next_index_stringl((this_ptr), (const char *)low, 1, 1)", "add_next_index_stringl((zhigh), (const char *)low, 1, 1)", "add_next_index_stringl((zlow), (const char *)low, 1, 1)", "add_next_index_stringl((zstep), (const char *)low, 1, 1)", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "err = (type1)", "err = (type2)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "high = (high)", "high = (low)", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "is_step_double = (type1)", "is_step_double = (type2)", "low = (high)", "low = (low)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (step)", "type1 = (-1)", "type1 = (0)", "type1 = (1)", "type1 = (2)", "type1 = (255)", "type1 = (3)", "type1 = (6)", "type1 = (err)", "type1 = (ht)", "type1 = (is_step_double)", "type1 = (return_value_used)", "type1 = (type1)", "type1 = (type2)", "type1 = is_numeric_string((*(return_value)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(this_ptr)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(zhigh)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(zlow)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(zstep)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(return_value)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(this_ptr)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(zhigh)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(zlow)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(zstep)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = (-1)", "type2 = (0)", "type2 = (1)", "type2 = (2)", "type2 = (255)", "type2 = (3)", "type2 = (6)", "type2 = (err)", "type2 = (ht)", "type2 = (is_step_double)", "type2 = (return_value_used)", "type2 = (type1)", "type2 = (type2)", "type2 = is_numeric_string((*(return_value)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(this_ptr)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(zhigh)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(zlow)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(zstep)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(return_value)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(this_ptr)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(zhigh)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(zlow)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(zstep)).value.str.len, ((void *)0), ((void *)0), 0)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "add_next_index_stringl(return_value, (const char *)low, 1, 1)", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "high = (unsigned char *)(*zhigh).value.str.val", "is_step_double = 1", "low = (unsigned char *)(*zlow).value.str.val", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1651\", 22, &(zlow), sizeof (zlow), &(type1), sizeof (type1), &((*zlow).value.str.val), sizeof ((*zlow).value.str.val), &((*zlow).value.str.len), sizeof ((*zlow).value.str.len), &(zhigh), sizeof (zhigh), &(type2), sizeof (type2), &((*zhigh).value.str.val), sizeof ((*zhigh).value.str.val), &((*zhigh).value.str.len), sizeof ((*zhigh).value.str.len), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(low), sizeof (low), &(high), sizeof (high), &(zstep), sizeof (zstep), &(lstep), sizeof (lstep), &(err), sizeof (err), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1651\", 22, &(zlow), sizeof (zlow), &(type1), sizeof (type1), &((*zlow).value.str.val), sizeof ((*zlow).value.str.val), &((*zlow).value.str.len), sizeof ((*zlow).value.str.len), &(zhigh), sizeof (zhigh), &(type2), sizeof (type2), &((*zhigh).value.str.val), sizeof ((*zhigh).value.str.val), &((*zhigh).value.str.len), sizeof ((*zhigh).value.str.len), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(low), sizeof (low), &(high), sizeof (high), &(zstep), sizeof (zstep), &(lstep), sizeof (lstep), &(err), sizeof (err), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    goto err;\n", "if (__is_neg(\"\", \"L1651\", 22, &(zlow), sizeof (zlow), &(type1), sizeof (type1), &((*zlow).value.str.val), sizeof ((*zlow).value.str.val), &((*zlow).value.str.len), sizeof ((*zlow).value.str.len), &(zhigh), sizeof (zhigh), &(type2), sizeof (type2), &((*zhigh).value.str.val), sizeof ((*zhigh).value.str.val), &((*zhigh).value.str.len), sizeof ((*zhigh).value.str.len), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(low), sizeof (low), &(high), sizeof (high), &(zstep), sizeof (zstep), &(lstep), sizeof (lstep), &(err), sizeof (err), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1651\", 22, &(zlow), sizeof (zlow), &(type1), sizeof (type1), &((*zlow).value.str.val), sizeof ((*zlow).value.str.val), &((*zlow).value.str.len), sizeof ((*zlow).value.str.len), &(zhigh), sizeof (zhigh), &(type2), sizeof (type2), &((*zhigh).value.str.val), sizeof ((*zhigh).value.str.val), &((*zhigh).value.str.len), sizeof ((*zhigh).value.str.len), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(low), sizeof (low), &(high), sizeof (high), &(zstep), sizeof (zstep), &(lstep), sizeof (lstep), &(err), sizeof (err), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.80101015183343]
								}, {
									"case":	2,
									"scores":	[-6.80101015183343]
								}, {
									"case":	3,
									"scores":	[-6.80101015183343]
								}, {
									"case":	4,
									"scores":	[-6.80101015183343]
								}, {
									"case":	5,
									"scores":	[-6.80101015183343]
								}, {
									"case":	6,
									"scores":	[-6.80101015183343]
								}, {
									"case":	7,
									"scores":	[-6.80101015183343]
								}, {
									"case":	8,
									"scores":	[-6.80101015183343]
								}, {
									"case":	9,
									"scores":	[-6.80101015183343]
								}, {
									"case":	10,
									"scores":	[-6.80101015183343]
								}, {
									"case":	11,
									"scores":	[-6.80101015183343]
								}, {
									"case":	12,
									"scores":	[-6.80101015183343]
								}, {
									"case":	13,
									"scores":	[-6.80101015183343]
								}, {
									"case":	14,
									"scores":	[-6.80101015183343]
								}, {
									"case":	15,
									"scores":	[-6.80101015183343]
								}, {
									"case":	16,
									"scores":	[-6.80101015183343]
								}, {
									"case":	17,
									"scores":	[-6.80101015183343]
								}, {
									"case":	18,
									"scores":	[-6.80101015183343]
								}, {
									"case":	19,
									"scores":	[-6.80101015183343]
								}, {
									"case":	20,
									"scores":	[-6.80101015183343]
								}, {
									"case":	21,
									"scores":	[-6.80101015183343]
								}, {
									"case":	22,
									"scores":	[-6.80101015183343]
								}, {
									"case":	23,
									"scores":	[-6.80101015183343]
								}, {
									"case":	24,
									"scores":	[-6.80101015183343]
								}, {
									"case":	25,
									"scores":	[-6.80101015183343]
								}, {
									"case":	26,
									"scores":	[-6.80101015183343]
								}, {
									"case":	27,
									"scores":	[-6.80101015183343]
								}, {
									"case":	28,
									"scores":	[-6.80101015183343]
								}, {
									"case":	29,
									"scores":	[-6.80101015183343]
								}, {
									"case":	30,
									"scores":	[-6.80101015183343]
								}, {
									"case":	31,
									"scores":	[-6.80101015183343]
								}, {
									"case":	32,
									"scores":	[-6.80101015183343]
								}, {
									"case":	33,
									"scores":	[-6.80101015183343]
								}, {
									"case":	34,
									"scores":	[-6.80101015183343]
								}, {
									"case":	35,
									"scores":	[-6.80101015183343]
								}, {
									"case":	36,
									"scores":	[-6.80101015183343]
								}, {
									"case":	37,
									"scores":	[-6.80101015183343]
								}, {
									"case":	38,
									"scores":	[-6.80101015183343]
								}, {
									"case":	39,
									"scores":	[-6.80101015183343]
								}, {
									"case":	40,
									"scores":	[-6.80101015183343]
								}, {
									"case":	41,
									"scores":	[-6.80101015183343]
								}, {
									"case":	42,
									"scores":	[-6.80101015183343]
								}, {
									"case":	43,
									"scores":	[-6.80101015183343]
								}, {
									"case":	44,
									"scores":	[-6.80101015183343]
								}, {
									"case":	45,
									"scores":	[-6.80101015183343]
								}, {
									"case":	46,
									"scores":	[-6.80101015183343]
								}, {
									"case":	47,
									"scores":	[-6.80101015183343]
								}, {
									"case":	48,
									"scores":	[-6.80101015183343]
								}, {
									"case":	49,
									"scores":	[-6.80101015183343]
								}, {
									"case":	50,
									"scores":	[-6.80101015183343]
								}, {
									"case":	51,
									"scores":	[-6.80101015183343]
								}, {
									"case":	52,
									"scores":	[-6.80101015183343]
								}, {
									"case":	53,
									"scores":	[-6.80101015183343]
								}, {
									"case":	54,
									"scores":	[-6.80101015183343]
								}, {
									"case":	55,
									"scores":	[-6.80101015183343]
								}, {
									"case":	56,
									"scores":	[-6.80101015183343]
								}, {
									"case":	57,
									"scores":	[-6.80101015183343]
								}, {
									"case":	58,
									"scores":	[-6.80101015183343]
								}, {
									"case":	59,
									"scores":	[-6.80101015183343]
								}, {
									"case":	60,
									"scores":	[-6.80101015183343]
								}, {
									"case":	61,
									"scores":	[-6.80101015183343]
								}, {
									"case":	62,
									"scores":	[-6.80101015183343]
								}, {
									"case":	63,
									"scores":	[-6.80101015183343]
								}, {
									"case":	64,
									"scores":	[-6.80101015183343]
								}, {
									"case":	65,
									"scores":	[-6.80101015183343]
								}, {
									"case":	66,
									"scores":	[-6.80101015183343]
								}, {
									"case":	67,
									"scores":	[-6.80101015183343]
								}, {
									"case":	68,
									"scores":	[-6.80101015183343]
								}, {
									"case":	69,
									"scores":	[-6.80101015183343]
								}, {
									"case":	70,
									"scores":	[-6.80101015183343]
								}, {
									"case":	71,
									"scores":	[-6.80101015183343]
								}, {
									"case":	72,
									"scores":	[-6.80101015183343]
								}, {
									"case":	73,
									"scores":	[-6.80101015183343]
								}, {
									"case":	74,
									"scores":	[-6.80101015183343]
								}, {
									"case":	75,
									"scores":	[-6.80101015183343]
								}, {
									"case":	76,
									"scores":	[-6.80101015183343]
								}, {
									"case":	77,
									"scores":	[-6.80101015183343]
								}, {
									"case":	78,
									"scores":	[-6.80101015183343]
								}, {
									"case":	79,
									"scores":	[-6.80101015183343]
								}, {
									"case":	80,
									"scores":	[-6.80101015183343]
								}, {
									"case":	81,
									"scores":	[-6.80101015183343]
								}, {
									"case":	82,
									"scores":	[-6.80101015183343]
								}, {
									"case":	83,
									"scores":	[-6.80101015183343]
								}, {
									"case":	84,
									"scores":	[-6.80101015183343]
								}, {
									"case":	85,
									"scores":	[-6.80101015183343]
								}, {
									"case":	86,
									"scores":	[-6.80101015183343]
								}, {
									"case":	87,
									"scores":	[-6.80101015183343]
								}, {
									"case":	88,
									"scores":	[-6.80101015183343]
								}, {
									"case":	89,
									"scores":	[-6.80101015183343]
								}, {
									"case":	90,
									"scores":	[-6.80101015183343]
								}, {
									"case":	91,
									"scores":	[-6.80101015183343]
								}, {
									"case":	92,
									"scores":	[-6.80101015183343]
								}, {
									"case":	93,
									"scores":	[-6.80101015183343]
								}, {
									"case":	94,
									"scores":	[-6.80101015183343]
								}, {
									"case":	95,
									"scores":	[-6.80101015183343]
								}, {
									"case":	96,
									"scores":	[-6.80101015183343]
								}, {
									"case":	97,
									"scores":	[-6.80101015183343]
								}, {
									"case":	98,
									"scores":	[-6.80101015183343]
								}, {
									"case":	99,
									"scores":	[-6.80101015183343]
								}, {
									"case":	100,
									"scores":	[-6.80101015183343]
								}, {
									"case":	101,
									"scores":	[-6.80101015183343]
								}, {
									"case":	102,
									"scores":	[-6.80101015183343]
								}, {
									"case":	103,
									"scores":	[-6.80101015183343]
								}, {
									"case":	104,
									"scores":	[-6.80101015183343]
								}, {
									"case":	105,
									"scores":	[-6.80101015183343]
								}, {
									"case":	106,
									"scores":	[-6.80101015183343]
								}, {
									"case":	107,
									"scores":	[-6.80101015183343]
								}, {
									"case":	108,
									"scores":	[-6.80101015183343]
								}, {
									"case":	109,
									"scores":	[-6.80101015183343]
								}, {
									"case":	110,
									"scores":	[-6.80101015183343]
								}, {
									"case":	111,
									"scores":	[-6.80101015183343]
								}, {
									"case":	112,
									"scores":	[-6.80101015183343]
								}, {
									"case":	113,
									"scores":	[-6.80101015183343]
								}, {
									"case":	114,
									"scores":	[-6.80101015183343]
								}, {
									"case":	115,
									"scores":	[-6.80101015183343]
								}, {
									"case":	116,
									"scores":	[-6.80101015183343]
								}, {
									"case":	117,
									"scores":	[-6.80101015183343]
								}, {
									"case":	118,
									"scores":	[-6.80101015183343]
								}, {
									"case":	119,
									"scores":	[-6.80101015183343]
								}, {
									"case":	120,
									"scores":	[-6.80101015183343]
								}, {
									"case":	121,
									"scores":	[-6.80101015183343]
								}, {
									"case":	122,
									"scores":	[-6.80101015183343]
								}, {
									"case":	123,
									"scores":	[-6.80101015183343]
								}, {
									"case":	124,
									"scores":	[-6.80101015183343]
								}, {
									"case":	125,
									"scores":	[-6.80101015183343]
								}, {
									"case":	126,
									"scores":	[-6.80101015183343]
								}, {
									"case":	127,
									"scores":	[-6.80101015183343]
								}, {
									"case":	128,
									"scores":	[-6.80101015183343]
								}, {
									"case":	129,
									"scores":	[-6.80101015183343]
								}, {
									"case":	130,
									"scores":	[-6.80101015183343]
								}, {
									"case":	131,
									"scores":	[-6.80101015183343]
								}, {
									"case":	132,
									"scores":	[-6.80101015183343]
								}, {
									"case":	133,
									"scores":	[-6.80101015183343]
								}, {
									"case":	134,
									"scores":	[-6.80101015183343]
								}, {
									"case":	135,
									"scores":	[-6.80101015183343]
								}, {
									"case":	136,
									"scores":	[-6.80101015183343]
								}, {
									"case":	137,
									"scores":	[-6.80101015183343]
								}, {
									"case":	138,
									"scores":	[-6.80101015183343]
								}, {
									"case":	139,
									"scores":	[-6.80101015183343]
								}, {
									"case":	140,
									"scores":	[-6.80101015183343]
								}, {
									"case":	141,
									"scores":	[-6.80101015183343]
								}, {
									"case":	142,
									"scores":	[-6.80101015183343]
								}, {
									"case":	143,
									"scores":	[-6.80101015183343]
								}, {
									"case":	144,
									"scores":	[-6.80101015183343]
								}, {
									"case":	145,
									"scores":	[-6.80101015183343]
								}, {
									"case":	146,
									"scores":	[-6.80101015183343]
								}, {
									"case":	147,
									"scores":	[-6.80101015183343]
								}, {
									"case":	148,
									"scores":	[-6.80101015183343]
								}, {
									"case":	149,
									"scores":	[-6.80101015183343]
								}, {
									"case":	150,
									"scores":	[-6.80101015183343]
								}, {
									"case":	151,
									"scores":	[-6.80101015183343]
								}, {
									"case":	152,
									"scores":	[-6.80101015183343]
								}, {
									"case":	153,
									"scores":	[-6.80101015183343]
								}, {
									"case":	154,
									"scores":	[-6.80101015183343]
								}, {
									"case":	155,
									"scores":	[-6.80101015183343]
								}, {
									"case":	156,
									"scores":	[-6.80101015183343]
								}, {
									"case":	157,
									"scores":	[-6.80101015183343]
								}, {
									"case":	158,
									"scores":	[-6.80101015183343]
								}, {
									"case":	159,
									"scores":	[-6.80101015183343]
								}, {
									"case":	160,
									"scores":	[-6.80101015183343]
								}, {
									"case":	161,
									"scores":	[-6.80101015183343]
								}, {
									"case":	162,
									"scores":	[-6.80101015183343]
								}, {
									"case":	163,
									"scores":	[-6.80101015183343]
								}, {
									"case":	164,
									"scores":	[-6.80101015183343]
								}, {
									"case":	165,
									"scores":	[-6.80101015183343]
								}, {
									"case":	166,
									"scores":	[-6.80101015183343]
								}, {
									"case":	167,
									"scores":	[-6.80101015183343]
								}, {
									"case":	168,
									"scores":	[-6.80101015183343]
								}, {
									"case":	169,
									"scores":	[-6.80101015183343]
								}, {
									"case":	170,
									"scores":	[-6.80101015183343]
								}, {
									"case":	171,
									"scores":	[-6.80101015183343]
								}, {
									"case":	172,
									"scores":	[-6.80101015183343]
								}, {
									"case":	173,
									"scores":	[-6.80101015183343]
								}, {
									"case":	174,
									"scores":	[-6.80101015183343]
								}, {
									"case":	175,
									"scores":	[-6.80101015183343]
								}, {
									"case":	176,
									"scores":	[-6.80101015183343]
								}, {
									"case":	177,
									"scores":	[-6.80101015183343]
								}, {
									"case":	178,
									"scores":	[-6.80101015183343]
								}, {
									"case":	179,
									"scores":	[-6.80101015183343]
								}, {
									"case":	180,
									"scores":	[-6.80101015183343]
								}, {
									"case":	181,
									"scores":	[-6.80101015183343]
								}, {
									"case":	182,
									"scores":	[-6.80101015183343]
								}, {
									"case":	183,
									"scores":	[-6.80101015183343]
								}, {
									"case":	184,
									"scores":	[-6.80101015183343]
								}, {
									"case":	185,
									"scores":	[-6.80101015183343]
								}, {
									"case":	186,
									"scores":	[-6.80101015183343]
								}, {
									"case":	187,
									"scores":	[-6.80101015183343]
								}, {
									"case":	188,
									"scores":	[-6.80101015183343]
								}, {
									"case":	189,
									"scores":	[-6.80101015183343]
								}, {
									"case":	190,
									"scores":	[-6.80101015183343]
								}, {
									"case":	191,
									"scores":	[-6.80101015183343]
								}, {
									"case":	192,
									"scores":	[-6.80101015183343]
								}, {
									"case":	193,
									"scores":	[-6.80101015183343]
								}, {
									"case":	194,
									"scores":	[-6.80101015183343]
								}, {
									"case":	195,
									"scores":	[-6.80101015183343]
								}, {
									"case":	196,
									"scores":	[-6.80101015183343]
								}, {
									"case":	197,
									"scores":	[-6.80101015183343]
								}, {
									"case":	198,
									"scores":	[-6.80101015183343]
								}, {
									"case":	199,
									"scores":	[-6.80101015183343]
								}, {
									"case":	200,
									"scores":	[-6.80101015183343]
								}, {
									"case":	201,
									"scores":	[-6.80101015183343]
								}, {
									"case":	202,
									"scores":	[-6.80101015183343]
								}, {
									"case":	203,
									"scores":	[-6.80101015183343]
								}, {
									"case":	204,
									"scores":	[-6.80101015183343]
								}, {
									"case":	205,
									"scores":	[-6.80101015183343]
								}, {
									"case":	206,
									"scores":	[-6.80101015183343]
								}, {
									"case":	207,
									"scores":	[-6.80101015183343]
								}, {
									"case":	208,
									"scores":	[-6.80101015183343]
								}, {
									"case":	209,
									"scores":	[-6.80101015183343]
								}, {
									"case":	210,
									"scores":	[-6.80101015183343]
								}, {
									"case":	211,
									"scores":	[-6.80101015183343]
								}, {
									"case":	212,
									"scores":	[-6.80101015183343]
								}, {
									"case":	213,
									"scores":	[-6.80101015183343]
								}, {
									"case":	214,
									"scores":	[-6.80101015183343]
								}, {
									"case":	215,
									"scores":	[-6.80101015183343]
								}, {
									"case":	216,
									"scores":	[-6.80101015183343]
								}, {
									"case":	217,
									"scores":	[-6.80101015183343]
								}, {
									"case":	218,
									"scores":	[-6.80101015183343]
								}, {
									"case":	219,
									"scores":	[-6.80101015183343]
								}, {
									"case":	220,
									"scores":	[-6.80101015183343]
								}, {
									"case":	221,
									"scores":	[-6.80101015183343]
								}, {
									"case":	222,
									"scores":	[-6.80101015183343]
								}, {
									"case":	223,
									"scores":	[-6.80101015183343]
								}, {
									"case":	224,
									"scores":	[-6.80101015183343]
								}, {
									"case":	225,
									"scores":	[-6.80101015183343]
								}, {
									"case":	226,
									"scores":	[-6.80101015183343]
								}, {
									"case":	227,
									"scores":	[-6.80101015183343]
								}, {
									"case":	228,
									"scores":	[-6.80101015183343]
								}, {
									"case":	229,
									"scores":	[-6.80101015183343]
								}, {
									"case":	230,
									"scores":	[-6.80101015183343]
								}, {
									"case":	231,
									"scores":	[-6.80101015183343]
								}, {
									"case":	232,
									"scores":	[-6.80101015183343]
								}, {
									"case":	233,
									"scores":	[-6.80101015183343]
								}, {
									"case":	234,
									"scores":	[-6.80101015183343]
								}, {
									"case":	235,
									"scores":	[-6.80101015183343]
								}, {
									"case":	236,
									"scores":	[-6.80101015183343]
								}, {
									"case":	237,
									"scores":	[-6.80101015183343]
								}, {
									"case":	238,
									"scores":	[-6.80101015183343]
								}, {
									"case":	239,
									"scores":	[-6.80101015183343]
								}, {
									"case":	240,
									"scores":	[-6.80101015183343]
								}, {
									"case":	241,
									"scores":	[-6.80101015183343]
								}, {
									"case":	242,
									"scores":	[-6.80101015183343]
								}, {
									"case":	243,
									"scores":	[-6.80101015183343]
								}, {
									"case":	244,
									"scores":	[-6.80101015183343]
								}, {
									"case":	245,
									"scores":	[-6.80101015183343]
								}, {
									"case":	246,
									"scores":	[-6.80101015183343]
								}, {
									"case":	247,
									"scores":	[-6.80101015183343]
								}, {
									"case":	248,
									"scores":	[-6.80101015183343]
								}, {
									"case":	249,
									"scores":	[-6.80101015183343]
								}, {
									"case":	250,
									"scores":	[-6.80101015183343]
								}, {
									"case":	251,
									"scores":	[-6.80101015183343]
								}, {
									"case":	252,
									"scores":	[-6.80101015183343]
								}, {
									"case":	253,
									"scores":	[-6.80101015183343]
								}, {
									"case":	254,
									"scores":	[-6.80101015183343]
								}, {
									"case":	255,
									"scores":	[-6.80101015183343]
								}, {
									"case":	256,
									"scores":	[-6.80101015183343]
								}, {
									"case":	257,
									"scores":	[-6.80101015183343]
								}, {
									"case":	258,
									"scores":	[-6.80101015183343]
								}, {
									"case":	259,
									"scores":	[-6.80101015183343]
								}, {
									"case":	260,
									"scores":	[-6.80101015183343]
								}, {
									"case":	261,
									"scores":	[-6.80101015183343]
								}, {
									"case":	262,
									"scores":	[-6.80101015183343]
								}, {
									"case":	263,
									"scores":	[-6.80101015183343]
								}, {
									"case":	264,
									"scores":	[-6.80101015183343]
								}, {
									"case":	265,
									"scores":	[-6.80101015183343]
								}, {
									"case":	266,
									"scores":	[-6.80101015183343]
								}, {
									"case":	267,
									"scores":	[-6.80101015183343]
								}, {
									"case":	268,
									"scores":	[-6.80101015183343]
								}, {
									"case":	269,
									"scores":	[-6.80101015183343]
								}, {
									"case":	270,
									"scores":	[-6.80101015183343]
								}, {
									"case":	271,
									"scores":	[-6.80101015183343]
								}, {
									"case":	272,
									"scores":	[-6.80101015183343]
								}, {
									"case":	273,
									"scores":	[-6.80101015183343]
								}, {
									"case":	274,
									"scores":	[-6.80101015183343]
								}, {
									"case":	275,
									"scores":	[-6.80101015183343]
								}, {
									"case":	276,
									"scores":	[-6.80101015183343]
								}, {
									"case":	277,
									"scores":	[-6.80101015183343]
								}, {
									"case":	278,
									"scores":	[-6.80101015183343]
								}, {
									"case":	279,
									"scores":	[-6.80101015183343]
								}, {
									"case":	280,
									"scores":	[-6.80101015183343]
								}, {
									"case":	281,
									"scores":	[-6.80101015183343]
								}, {
									"case":	282,
									"scores":	[-6.80101015183343]
								}, {
									"case":	283,
									"scores":	[-6.80101015183343]
								}, {
									"case":	284,
									"scores":	[-6.80101015183343]
								}, {
									"case":	285,
									"scores":	[-6.80101015183343]
								}, {
									"case":	286,
									"scores":	[-6.80101015183343]
								}, {
									"case":	287,
									"scores":	[-6.80101015183343]
								}, {
									"case":	288,
									"scores":	[-6.80101015183343]
								}, {
									"case":	289,
									"scores":	[-6.80101015183343]
								}, {
									"case":	290,
									"scores":	[-6.80101015183343]
								}, {
									"case":	291,
									"scores":	[-6.80101015183343]
								}, {
									"case":	292,
									"scores":	[-6.80101015183343]
								}, {
									"case":	293,
									"scores":	[-6.80101015183343]
								}, {
									"case":	294,
									"scores":	[-6.80101015183343]
								}, {
									"case":	295,
									"scores":	[-6.80101015183343]
								}, {
									"case":	296,
									"scores":	[-6.80101015183343]
								}, {
									"case":	297,
									"scores":	[-6.80101015183343]
								}, {
									"case":	298,
									"scores":	[-6.80101015183343]
								}, {
									"case":	299,
									"scores":	[-6.80101015183343]
								}, {
									"case":	300,
									"scores":	[-6.80101015183343]
								}, {
									"case":	301,
									"scores":	[-6.80101015183343]
								}, {
									"case":	302,
									"scores":	[-6.80101015183343]
								}, {
									"case":	303,
									"scores":	[-6.80101015183343]
								}, {
									"case":	304,
									"scores":	[-6.80101015183343]
								}, {
									"case":	305,
									"scores":	[-6.80101015183343]
								}, {
									"case":	306,
									"scores":	[-6.80101015183343]
								}, {
									"case":	307,
									"scores":	[-6.80101015183343]
								}, {
									"case":	308,
									"scores":	[-6.80101015183343]
								}, {
									"case":	309,
									"scores":	[-6.80101015183343]
								}, {
									"case":	310,
									"scores":	[-6.80101015183343]
								}, {
									"case":	311,
									"scores":	[-6.80101015183343]
								}, {
									"case":	312,
									"scores":	[-6.80101015183343]
								}, {
									"case":	313,
									"scores":	[-6.80101015183343]
								}, {
									"case":	314,
									"scores":	[-6.80101015183343]
								}, {
									"case":	315,
									"scores":	[-6.80101015183343]
								}, {
									"case":	316,
									"scores":	[-6.80101015183343]
								}, {
									"case":	317,
									"scores":	[-6.80101015183343]
								}, {
									"case":	318,
									"scores":	[-6.80101015183343]
								}, {
									"case":	319,
									"scores":	[-6.80101015183343]
								}, {
									"case":	320,
									"scores":	[-6.80101015183343]
								}, {
									"case":	321,
									"scores":	[-6.80101015183343]
								}, {
									"case":	322,
									"scores":	[-6.80101015183343]
								}, {
									"case":	323,
									"scores":	[-6.80101015183343]
								}, {
									"case":	324,
									"scores":	[-6.80101015183343]
								}, {
									"case":	325,
									"scores":	[-6.80101015183343]
								}, {
									"case":	326,
									"scores":	[-6.80101015183343]
								}, {
									"case":	327,
									"scores":	[-6.80101015183343]
								}, {
									"case":	328,
									"scores":	[-6.80101015183343]
								}, {
									"case":	329,
									"scores":	[-6.80101015183343]
								}, {
									"case":	330,
									"scores":	[-6.80101015183343]
								}, {
									"case":	331,
									"scores":	[-6.80101015183343]
								}, {
									"case":	332,
									"scores":	[-6.80101015183343]
								}, {
									"case":	333,
									"scores":	[-6.80101015183343]
								}, {
									"case":	334,
									"scores":	[-6.80101015183343]
								}, {
									"case":	335,
									"scores":	[-6.80101015183343]
								}, {
									"case":	336,
									"scores":	[-6.80101015183343]
								}, {
									"case":	337,
									"scores":	[-6.80101015183343]
								}, {
									"case":	338,
									"scores":	[-6.80101015183343]
								}, {
									"case":	339,
									"scores":	[-6.80101015183343]
								}, {
									"case":	340,
									"scores":	[-6.80101015183343]
								}, {
									"case":	341,
									"scores":	[-6.80101015183343]
								}, {
									"case":	342,
									"scores":	[-6.80101015183343]
								}, {
									"case":	343,
									"scores":	[-6.80101015183343]
								}, {
									"case":	344,
									"scores":	[-6.80101015183343]
								}, {
									"case":	345,
									"scores":	[-6.80101015183343]
								}, {
									"case":	346,
									"scores":	[-6.80101015183343]
								}, {
									"case":	347,
									"scores":	[-6.80101015183343]
								}, {
									"case":	348,
									"scores":	[-6.80101015183343]
								}, {
									"case":	349,
									"scores":	[-6.80101015183343]
								}, {
									"case":	350,
									"scores":	[-6.80101015183343]
								}, {
									"case":	351,
									"scores":	[-6.80101015183343]
								}, {
									"case":	352,
									"scores":	[-6.80101015183343]
								}, {
									"case":	353,
									"scores":	[-6.80101015183343]
								}, {
									"case":	354,
									"scores":	[-6.80101015183343]
								}, {
									"case":	355,
									"scores":	[-6.80101015183343]
								}, {
									"case":	356,
									"scores":	[-6.80101015183343]
								}, {
									"case":	357,
									"scores":	[-6.80101015183343]
								}, {
									"case":	358,
									"scores":	[-6.80101015183343]
								}, {
									"case":	359,
									"scores":	[-6.80101015183343]
								}, {
									"case":	360,
									"scores":	[-6.80101015183343]
								}, {
									"case":	361,
									"scores":	[-6.80101015183343]
								}, {
									"case":	362,
									"scores":	[-6.80101015183343]
								}, {
									"case":	363,
									"scores":	[-6.80101015183343]
								}, {
									"case":	364,
									"scores":	[-6.80101015183343]
								}, {
									"case":	365,
									"scores":	[-6.80101015183343]
								}, {
									"case":	366,
									"scores":	[-6.80101015183343]
								}, {
									"case":	367,
									"scores":	[-6.80101015183343]
								}, {
									"case":	368,
									"scores":	[-6.80101015183343]
								}, {
									"case":	369,
									"scores":	[-6.80101015183343]
								}, {
									"case":	370,
									"scores":	[-6.80101015183343]
								}, {
									"case":	371,
									"scores":	[-6.80101015183343]
								}, {
									"case":	372,
									"scores":	[-6.80101015183343]
								}, {
									"case":	373,
									"scores":	[-6.80101015183343]
								}, {
									"case":	374,
									"scores":	[-6.80101015183343]
								}, {
									"case":	375,
									"scores":	[-6.80101015183343]
								}, {
									"case":	376,
									"scores":	[-6.80101015183343]
								}, {
									"case":	377,
									"scores":	[-6.80101015183343]
								}, {
									"case":	378,
									"scores":	[-6.80101015183343]
								}, {
									"case":	379,
									"scores":	[-6.80101015183343]
								}, {
									"case":	380,
									"scores":	[-6.80101015183343]
								}, {
									"case":	381,
									"scores":	[-8.41980194953343, -9.62896418883343, -8.08811226983343, -7.3762881528334283, -10.481692861633428, -10.487592467833428, -10.262533891833428, -9.55070977483343, -9.63485294783343, -10.448999121833429, -10.448999121833429, -9.91799226163343, -9.84574206483343, -9.84574206483343, -9.88089186163343, -9.63485294783343, -9.63485294783343, -9.67195334783343, -10.448999121833429, -10.448999121833429, -10.448999121833429, -10.448999121833429]
								}, {
									"case":	382,
									"scores":	[-8.41980194953343, -9.62896418883343, -8.08811226983343, -7.3762881528334283, -10.481692861633428, -10.487592467833428, -10.262533891833428, -9.55070977483343, -9.63485294783343, -10.448999121833429, -10.448999121833429, -9.91799226163343, -9.84574206483343, -9.84574206483343, -9.88089186163343, -9.63485294783343, -9.63485294783343, -9.67195334783343, -10.448999121833429, -10.448999121833429, -10.448999121833429, -10.448999121833429]
								}, {
									"case":	383,
									"scores":	[-8.41980194953343, -9.62896418883343, -8.08811226983343, -7.3762881528334283, -10.481692861633428, -10.487592467833428, -10.262533891833428, -9.55070977483343, -9.63485294783343, -10.448999121833429, -10.448999121833429, -9.91799226163343, -9.84574206483343, -9.84574206483343, -9.88089186163343, -9.63485294783343, -9.63485294783343, -9.67195334783343, -10.448999121833429, -10.448999121833429, -10.448999121833429, -10.448999121833429]
								}, {
									"case":	384,
									"scores":	[-8.42080194953343, -9.62996418883343, -8.08911226983343, -7.37728815283343, -10.482692861633428, -10.488592467833428, -10.263533891833429, -9.55170977483343, -9.63585294783343, -10.449999121833429, -10.449999121833429, -9.91899226163343, -9.84674206483343, -9.84674206483343, -9.88189186163343, -9.63585294783343, -9.63585294783343, -9.67295334783343, -10.449999121833429, -10.449999121833429, -10.449999121833429, -10.449999121833429]
								}]
						}, {
							"switch":	24,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1651,
							"begin_column":	3,
							"end_line":	1651,
							"end_column":	78,
							"patch_codes":	["if (!__is_neg(\"\", \"L1651\", 22, &(zlow), sizeof (zlow), &(type1), sizeof (type1), &((*zlow).value.str.val), sizeof ((*zlow).value.str.val), &((*zlow).value.str.len), sizeof ((*zlow).value.str.len), &(zhigh), sizeof (zhigh), &(type2), sizeof (type2), &((*zhigh).value.str.val), sizeof ((*zhigh).value.str.val), &((*zhigh).value.str.len), sizeof ((*zhigh).value.str.len), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(low), sizeof (low), &(high), sizeof (high), &(zstep), sizeof (zstep), &(lstep), sizeof (lstep), &(err), sizeof (err), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0);\n", "{\n}\n", "type1 = (-1)", "type1 = (0)", "type1 = (1)", "type1 = (2)", "type1 = (255)", "type1 = (3)", "type1 = (6)", "type1 = (err)", "type1 = (ht)", "type1 = (is_step_double)", "type1 = (return_value_used)", "type1 = (type1)", "type1 = (type2)", "type1 = is_numeric_string((*(&err)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(&high)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(&ht)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(&is_step_double)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(&low)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(&lstep)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(&return_value)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(&return_value_ptr)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(&return_value_used)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(&step)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(&this_ptr)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(&type1)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(&type2)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(&zhigh)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(&zlow)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(&zstep)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(return_value)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(this_ptr)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(zhigh)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(zlow)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(zstep)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(&err)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(&high)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(&ht)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(&is_step_double)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(&low)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(&lstep)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(&return_value)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(&return_value_ptr)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(&return_value_used)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(&step)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(&this_ptr)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(&type1)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(&type2)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(&zhigh)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(&zlow)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(&zstep)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(return_value)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(this_ptr)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(zhigh)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(zlow)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(zstep)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (0 * err))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (0 * ht))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (0 * is_step_double))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (0 * lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (0 * return_value_used))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (0 * type1))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (0 * type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err != 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err != is_step_double))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err != lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err != type1))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err != type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err * ht))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err * is_step_double))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err * lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err * return_value_used))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err * type1))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err * type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err + 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err + is_step_double))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err + lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err + type1))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err + type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err - 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err - is_step_double))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err - lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err - type1))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err - type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err == 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err == is_step_double))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err == lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err == type1))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (err == type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (high != 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (high == 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht != 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht != err))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht != is_step_double))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht != lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht != return_value_used))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht != type1))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht != type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht * err))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht * is_step_double))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht * lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht * return_value_used))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht * type1))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht * type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht + 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht + err))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht + is_step_double))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht + lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht + return_value_used))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht + type1))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht + type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht - 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht - err))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht - is_step_double))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht - lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht - return_value_used))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht - type1))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht - type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht == 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht == err))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht == is_step_double))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht == lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht == return_value_used))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht == type1))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (ht == type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (is_step_double != 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (is_step_double != lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (is_step_double != type1))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (is_step_double != type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (is_step_double * err))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (is_step_double * ht))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (is_step_double * lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (is_step_double * return_value_used))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (is_step_double * type1))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (is_step_double * type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (is_step_double + 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (is_step_double + lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (is_step_double + type1))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (is_step_double + type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (is_step_double - 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (is_step_double - lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (is_step_double - type1))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (is_step_double - type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (is_step_double == 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (is_step_double == lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (is_step_double == type1))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (is_step_double == type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (low != 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (low != high))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (low == 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (low == high))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (lstep != 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (lstep * err))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (lstep * ht))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (lstep * is_step_double))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (lstep * return_value_used))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (lstep * type1))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (lstep * type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (lstep + 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (lstep - 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (lstep == 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value != 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value != this_ptr))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value != zhigh))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value != zlow))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value != zstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value == 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value == this_ptr))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value == zhigh))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value == zlow))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value == zstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_ptr != 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_ptr == 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used != 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used != err))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used != is_step_double))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used != lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used != type1))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used != type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used * err))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used * ht))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used * is_step_double))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used * lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used * type1))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used * type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used + 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used + err))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used + is_step_double))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used + lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used + type1))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used + type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used - 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used - err))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used - is_step_double))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used - lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used - type1))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used - type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used == 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used == err))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used == is_step_double))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used == lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used == type1))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (return_value_used == type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (step != 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (step == 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (this_ptr != 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (this_ptr != zhigh))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (this_ptr != zlow))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (this_ptr != zstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (this_ptr == 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (this_ptr == zhigh))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (this_ptr == zlow))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (this_ptr == zstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type1 != 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type1 != lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type1 != type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type1 * err))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type1 * ht))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type1 * is_step_double))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type1 * lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type1 * return_value_used))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type1 * type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type1 + 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type1 + lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type1 + type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type1 - 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type1 - lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type1 - type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type1 == 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type1 == lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type1 == type2))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type2 != 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type2 != lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type2 * err))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type2 * ht))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type2 * is_step_double))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type2 * lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type2 * return_value_used))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type2 * type1))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type2 + 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type2 + lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type2 - 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type2 - lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type2 == 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (type2 == lstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (zhigh != 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (zhigh != zstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (zhigh == 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (zhigh == zstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (zlow != 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (zlow != zhigh))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (zlow != zstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (zlow == 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (zlow == zhigh))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (zlow == zstep))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (zstep != 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), (zstep == 0))", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.9965721687334286, -7.81124033283343, -6.76384533183343, -5.97257430183343, -6.15769058183343, -7.67813375283343, -6.67824639083343, -5.88697536083343, -6.97808481183343, -7.50292962183343, -7.50292962183343, -8.03032371183343, -7.44734481183343, -7.44734481183343, -7.73597291183343, -6.97808481183343, -6.97808481183343, -7.27243561183343, -7.50292962183343, -7.50292962183343, -7.50292962183343, -7.50292962183343]
								}, {
									"case":	2,
									"scores":	[-6.80101015183343]
								}, {
									"case":	3,
									"scores":	[-6.80101015183343]
								}, {
									"case":	4,
									"scores":	[-6.80101015183343]
								}, {
									"case":	5,
									"scores":	[-6.80101015183343]
								}, {
									"case":	6,
									"scores":	[-6.80101015183343]
								}, {
									"case":	7,
									"scores":	[-6.80101015183343]
								}, {
									"case":	8,
									"scores":	[-6.80101015183343]
								}, {
									"case":	9,
									"scores":	[-6.80101015183343]
								}, {
									"case":	10,
									"scores":	[-6.80101015183343]
								}, {
									"case":	11,
									"scores":	[-6.80101015183343]
								}, {
									"case":	12,
									"scores":	[-6.80101015183343]
								}, {
									"case":	13,
									"scores":	[-6.80101015183343]
								}, {
									"case":	14,
									"scores":	[-6.80101015183343]
								}, {
									"case":	15,
									"scores":	[-6.80101015183343]
								}, {
									"case":	16,
									"scores":	[-6.80101015183343]
								}, {
									"case":	17,
									"scores":	[-6.80101015183343]
								}, {
									"case":	18,
									"scores":	[-6.80101015183343]
								}, {
									"case":	19,
									"scores":	[-6.80101015183343]
								}, {
									"case":	20,
									"scores":	[-6.80101015183343]
								}, {
									"case":	21,
									"scores":	[-6.80101015183343]
								}, {
									"case":	22,
									"scores":	[-6.80101015183343]
								}, {
									"case":	23,
									"scores":	[-6.80101015183343]
								}, {
									"case":	24,
									"scores":	[-6.80101015183343]
								}, {
									"case":	25,
									"scores":	[-6.80101015183343]
								}, {
									"case":	26,
									"scores":	[-6.80101015183343]
								}, {
									"case":	27,
									"scores":	[-6.80101015183343]
								}, {
									"case":	28,
									"scores":	[-6.80101015183343]
								}, {
									"case":	29,
									"scores":	[-6.80101015183343]
								}, {
									"case":	30,
									"scores":	[-6.80101015183343]
								}, {
									"case":	31,
									"scores":	[-6.80101015183343]
								}, {
									"case":	32,
									"scores":	[-6.80101015183343]
								}, {
									"case":	33,
									"scores":	[-6.80101015183343]
								}, {
									"case":	34,
									"scores":	[-6.80101015183343]
								}, {
									"case":	35,
									"scores":	[-6.80101015183343]
								}, {
									"case":	36,
									"scores":	[-6.80101015183343]
								}, {
									"case":	37,
									"scores":	[-6.80101015183343]
								}, {
									"case":	38,
									"scores":	[-6.80101015183343]
								}, {
									"case":	39,
									"scores":	[-6.80101015183343]
								}, {
									"case":	40,
									"scores":	[-6.80101015183343]
								}, {
									"case":	41,
									"scores":	[-6.80101015183343]
								}, {
									"case":	42,
									"scores":	[-6.80101015183343]
								}, {
									"case":	43,
									"scores":	[-6.80101015183343]
								}, {
									"case":	44,
									"scores":	[-6.80101015183343]
								}, {
									"case":	45,
									"scores":	[-6.80101015183343]
								}, {
									"case":	46,
									"scores":	[-6.80101015183343]
								}, {
									"case":	47,
									"scores":	[-6.80101015183343]
								}, {
									"case":	48,
									"scores":	[-6.80101015183343]
								}, {
									"case":	49,
									"scores":	[-6.80101015183343]
								}, {
									"case":	50,
									"scores":	[-6.80101015183343]
								}, {
									"case":	51,
									"scores":	[-6.80101015183343]
								}, {
									"case":	52,
									"scores":	[-6.80101015183343]
								}, {
									"case":	53,
									"scores":	[-6.80101015183343]
								}, {
									"case":	54,
									"scores":	[-6.80101015183343]
								}, {
									"case":	55,
									"scores":	[-6.80101015183343]
								}, {
									"case":	56,
									"scores":	[-6.80101015183343]
								}, {
									"case":	57,
									"scores":	[-6.80101015183343]
								}, {
									"case":	58,
									"scores":	[-6.80101015183343]
								}, {
									"case":	59,
									"scores":	[-6.80101015183343]
								}, {
									"case":	60,
									"scores":	[-6.80101015183343]
								}, {
									"case":	61,
									"scores":	[-6.80101015183343]
								}, {
									"case":	62,
									"scores":	[-6.80101015183343]
								}, {
									"case":	63,
									"scores":	[-6.80101015183343]
								}, {
									"case":	64,
									"scores":	[-6.80101015183343]
								}, {
									"case":	65,
									"scores":	[-6.80101015183343]
								}, {
									"case":	66,
									"scores":	[-6.80101015183343]
								}, {
									"case":	67,
									"scores":	[-6.80101015183343]
								}, {
									"case":	68,
									"scores":	[-6.80101015183343]
								}, {
									"case":	69,
									"scores":	[-6.80101015183343]
								}, {
									"case":	70,
									"scores":	[-6.80101015183343]
								}, {
									"case":	71,
									"scores":	[-6.80101015183343]
								}, {
									"case":	72,
									"scores":	[-6.80101015183343]
								}, {
									"case":	73,
									"scores":	[-6.80101015183343]
								}, {
									"case":	74,
									"scores":	[-6.80101015183343]
								}, {
									"case":	75,
									"scores":	[-6.80101015183343]
								}, {
									"case":	76,
									"scores":	[-6.80101015183343]
								}, {
									"case":	77,
									"scores":	[-6.80101015183343]
								}, {
									"case":	78,
									"scores":	[-6.80101015183343]
								}, {
									"case":	79,
									"scores":	[-6.80101015183343]
								}, {
									"case":	80,
									"scores":	[-6.80101015183343]
								}, {
									"case":	81,
									"scores":	[-6.80101015183343]
								}, {
									"case":	82,
									"scores":	[-6.80101015183343]
								}, {
									"case":	83,
									"scores":	[-6.80101015183343]
								}, {
									"case":	84,
									"scores":	[-6.80101015183343]
								}, {
									"case":	85,
									"scores":	[-6.80101015183343]
								}, {
									"case":	86,
									"scores":	[-6.80101015183343]
								}, {
									"case":	87,
									"scores":	[-6.80101015183343]
								}, {
									"case":	88,
									"scores":	[-6.80101015183343]
								}, {
									"case":	89,
									"scores":	[-6.80101015183343]
								}, {
									"case":	90,
									"scores":	[-6.80101015183343]
								}, {
									"case":	91,
									"scores":	[-6.80101015183343]
								}, {
									"case":	92,
									"scores":	[-6.80101015183343]
								}, {
									"case":	93,
									"scores":	[-6.80101015183343]
								}, {
									"case":	94,
									"scores":	[-6.80101015183343]
								}, {
									"case":	95,
									"scores":	[-6.80101015183343]
								}, {
									"case":	96,
									"scores":	[-6.80101015183343]
								}, {
									"case":	97,
									"scores":	[-6.80101015183343]
								}, {
									"case":	98,
									"scores":	[-6.80101015183343]
								}, {
									"case":	99,
									"scores":	[-6.80101015183343]
								}, {
									"case":	100,
									"scores":	[-6.80101015183343]
								}, {
									"case":	101,
									"scores":	[-6.80101015183343]
								}, {
									"case":	102,
									"scores":	[-6.80101015183343]
								}, {
									"case":	103,
									"scores":	[-6.80101015183343]
								}, {
									"case":	104,
									"scores":	[-6.80101015183343]
								}, {
									"case":	105,
									"scores":	[-6.80101015183343]
								}, {
									"case":	106,
									"scores":	[-6.80101015183343]
								}, {
									"case":	107,
									"scores":	[-6.80101015183343]
								}, {
									"case":	108,
									"scores":	[-6.80101015183343]
								}, {
									"case":	109,
									"scores":	[-6.80101015183343]
								}, {
									"case":	110,
									"scores":	[-6.80101015183343]
								}, {
									"case":	111,
									"scores":	[-6.80101015183343]
								}, {
									"case":	112,
									"scores":	[-6.80101015183343]
								}, {
									"case":	113,
									"scores":	[-6.80101015183343]
								}, {
									"case":	114,
									"scores":	[-6.80101015183343]
								}, {
									"case":	115,
									"scores":	[-6.80101015183343]
								}, {
									"case":	116,
									"scores":	[-6.80101015183343]
								}, {
									"case":	117,
									"scores":	[-6.80101015183343]
								}, {
									"case":	118,
									"scores":	[-6.80101015183343]
								}, {
									"case":	119,
									"scores":	[-6.80101015183343]
								}, {
									"case":	120,
									"scores":	[-6.80101015183343]
								}, {
									"case":	121,
									"scores":	[-6.80101015183343]
								}, {
									"case":	122,
									"scores":	[-6.80101015183343]
								}, {
									"case":	123,
									"scores":	[-6.80101015183343]
								}, {
									"case":	124,
									"scores":	[-6.80101015183343]
								}, {
									"case":	125,
									"scores":	[-6.80101015183343]
								}, {
									"case":	126,
									"scores":	[-6.80101015183343]
								}, {
									"case":	127,
									"scores":	[-6.80101015183343]
								}, {
									"case":	128,
									"scores":	[-6.80101015183343]
								}, {
									"case":	129,
									"scores":	[-6.80101015183343]
								}, {
									"case":	130,
									"scores":	[-6.80101015183343]
								}, {
									"case":	131,
									"scores":	[-6.80101015183343]
								}, {
									"case":	132,
									"scores":	[-6.80101015183343]
								}, {
									"case":	133,
									"scores":	[-6.80101015183343]
								}, {
									"case":	134,
									"scores":	[-6.80101015183343]
								}, {
									"case":	135,
									"scores":	[-6.80101015183343]
								}, {
									"case":	136,
									"scores":	[-6.80101015183343]
								}, {
									"case":	137,
									"scores":	[-6.80101015183343]
								}, {
									"case":	138,
									"scores":	[-6.80101015183343]
								}, {
									"case":	139,
									"scores":	[-6.80101015183343]
								}, {
									"case":	140,
									"scores":	[-6.80101015183343]
								}, {
									"case":	141,
									"scores":	[-6.80101015183343]
								}, {
									"case":	142,
									"scores":	[-6.80101015183343]
								}, {
									"case":	143,
									"scores":	[-6.80101015183343]
								}, {
									"case":	144,
									"scores":	[-6.80101015183343]
								}, {
									"case":	145,
									"scores":	[-6.80101015183343]
								}, {
									"case":	146,
									"scores":	[-6.80101015183343]
								}, {
									"case":	147,
									"scores":	[-6.80101015183343]
								}, {
									"case":	148,
									"scores":	[-6.80101015183343]
								}, {
									"case":	149,
									"scores":	[-6.80101015183343]
								}, {
									"case":	150,
									"scores":	[-6.80101015183343]
								}, {
									"case":	151,
									"scores":	[-6.80101015183343]
								}, {
									"case":	152,
									"scores":	[-6.80101015183343]
								}, {
									"case":	153,
									"scores":	[-6.80101015183343]
								}, {
									"case":	154,
									"scores":	[-6.80101015183343]
								}, {
									"case":	155,
									"scores":	[-6.80101015183343]
								}, {
									"case":	156,
									"scores":	[-6.80101015183343]
								}, {
									"case":	157,
									"scores":	[-6.80101015183343]
								}, {
									"case":	158,
									"scores":	[-6.80101015183343]
								}, {
									"case":	159,
									"scores":	[-6.80101015183343]
								}, {
									"case":	160,
									"scores":	[-6.80101015183343]
								}, {
									"case":	161,
									"scores":	[-6.80101015183343]
								}, {
									"case":	162,
									"scores":	[-6.80101015183343]
								}, {
									"case":	163,
									"scores":	[-6.80101015183343]
								}, {
									"case":	164,
									"scores":	[-6.80101015183343]
								}, {
									"case":	165,
									"scores":	[-6.80101015183343]
								}, {
									"case":	166,
									"scores":	[-6.80101015183343]
								}, {
									"case":	167,
									"scores":	[-6.80101015183343]
								}, {
									"case":	168,
									"scores":	[-6.80101015183343]
								}, {
									"case":	169,
									"scores":	[-6.80101015183343]
								}, {
									"case":	170,
									"scores":	[-6.80101015183343]
								}, {
									"case":	171,
									"scores":	[-6.80101015183343]
								}, {
									"case":	172,
									"scores":	[-6.80101015183343]
								}, {
									"case":	173,
									"scores":	[-6.80101015183343]
								}, {
									"case":	174,
									"scores":	[-6.80101015183343]
								}, {
									"case":	175,
									"scores":	[-6.80101015183343]
								}, {
									"case":	176,
									"scores":	[-6.80101015183343]
								}, {
									"case":	177,
									"scores":	[-6.80101015183343]
								}, {
									"case":	178,
									"scores":	[-6.80101015183343]
								}, {
									"case":	179,
									"scores":	[-6.80101015183343]
								}, {
									"case":	180,
									"scores":	[-6.80101015183343]
								}, {
									"case":	181,
									"scores":	[-6.80101015183343]
								}, {
									"case":	182,
									"scores":	[-6.80101015183343]
								}, {
									"case":	183,
									"scores":	[-6.80101015183343]
								}, {
									"case":	184,
									"scores":	[-6.80101015183343]
								}, {
									"case":	185,
									"scores":	[-6.80101015183343]
								}, {
									"case":	186,
									"scores":	[-6.80101015183343]
								}, {
									"case":	187,
									"scores":	[-6.80101015183343]
								}, {
									"case":	188,
									"scores":	[-6.80101015183343]
								}, {
									"case":	189,
									"scores":	[-6.80101015183343]
								}, {
									"case":	190,
									"scores":	[-6.80101015183343]
								}, {
									"case":	191,
									"scores":	[-6.80101015183343]
								}, {
									"case":	192,
									"scores":	[-6.80101015183343]
								}, {
									"case":	193,
									"scores":	[-6.80101015183343]
								}, {
									"case":	194,
									"scores":	[-6.80101015183343]
								}, {
									"case":	195,
									"scores":	[-6.80101015183343]
								}, {
									"case":	196,
									"scores":	[-6.80101015183343]
								}, {
									"case":	197,
									"scores":	[-6.80101015183343]
								}, {
									"case":	198,
									"scores":	[-6.80101015183343]
								}, {
									"case":	199,
									"scores":	[-6.80101015183343]
								}, {
									"case":	200,
									"scores":	[-6.80101015183343]
								}, {
									"case":	201,
									"scores":	[-6.80101015183343]
								}, {
									"case":	202,
									"scores":	[-6.80101015183343]
								}, {
									"case":	203,
									"scores":	[-6.80101015183343]
								}, {
									"case":	204,
									"scores":	[-6.80101015183343]
								}, {
									"case":	205,
									"scores":	[-6.80101015183343]
								}, {
									"case":	206,
									"scores":	[-6.80101015183343]
								}, {
									"case":	207,
									"scores":	[-6.80101015183343]
								}, {
									"case":	208,
									"scores":	[-6.80101015183343]
								}, {
									"case":	209,
									"scores":	[-6.80101015183343]
								}, {
									"case":	210,
									"scores":	[-6.80101015183343]
								}, {
									"case":	211,
									"scores":	[-6.80101015183343]
								}, {
									"case":	212,
									"scores":	[-6.80101015183343]
								}, {
									"case":	213,
									"scores":	[-6.80101015183343]
								}, {
									"case":	214,
									"scores":	[-6.80101015183343]
								}, {
									"case":	215,
									"scores":	[-6.80101015183343]
								}, {
									"case":	216,
									"scores":	[-6.80101015183343]
								}, {
									"case":	217,
									"scores":	[-6.80101015183343]
								}, {
									"case":	218,
									"scores":	[-6.80101015183343]
								}, {
									"case":	219,
									"scores":	[-6.80101015183343]
								}, {
									"case":	220,
									"scores":	[-6.80101015183343]
								}, {
									"case":	221,
									"scores":	[-6.80101015183343]
								}, {
									"case":	222,
									"scores":	[-6.80101015183343]
								}, {
									"case":	223,
									"scores":	[-6.80101015183343]
								}, {
									"case":	224,
									"scores":	[-6.80101015183343]
								}, {
									"case":	225,
									"scores":	[-6.80101015183343]
								}, {
									"case":	226,
									"scores":	[-6.80101015183343]
								}, {
									"case":	227,
									"scores":	[-6.80101015183343]
								}, {
									"case":	228,
									"scores":	[-6.80101015183343]
								}, {
									"case":	229,
									"scores":	[-6.80101015183343]
								}, {
									"case":	230,
									"scores":	[-6.80101015183343]
								}, {
									"case":	231,
									"scores":	[-6.80101015183343]
								}, {
									"case":	232,
									"scores":	[-6.80101015183343]
								}, {
									"case":	233,
									"scores":	[-6.80101015183343]
								}, {
									"case":	234,
									"scores":	[-6.80101015183343]
								}, {
									"case":	235,
									"scores":	[-6.80101015183343]
								}, {
									"case":	236,
									"scores":	[-6.80101015183343]
								}, {
									"case":	237,
									"scores":	[-6.80101015183343]
								}, {
									"case":	238,
									"scores":	[-6.80101015183343]
								}, {
									"case":	239,
									"scores":	[-6.80101015183343]
								}, {
									"case":	240,
									"scores":	[-6.80101015183343]
								}, {
									"case":	241,
									"scores":	[-6.80101015183343]
								}, {
									"case":	242,
									"scores":	[-6.80101015183343]
								}, {
									"case":	243,
									"scores":	[-6.80101015183343]
								}, {
									"case":	244,
									"scores":	[-6.80101015183343]
								}, {
									"case":	245,
									"scores":	[-6.80101015183343]
								}, {
									"case":	246,
									"scores":	[-6.80101015183343]
								}, {
									"case":	247,
									"scores":	[-6.80101015183343]
								}, {
									"case":	248,
									"scores":	[-6.80101015183343]
								}, {
									"case":	249,
									"scores":	[-6.80101015183343]
								}, {
									"case":	250,
									"scores":	[-6.80101015183343]
								}, {
									"case":	251,
									"scores":	[-6.80101015183343]
								}, {
									"case":	252,
									"scores":	[-6.80101015183343]
								}, {
									"case":	253,
									"scores":	[-6.80101015183343]
								}, {
									"case":	254,
									"scores":	[-6.80101015183343]
								}, {
									"case":	255,
									"scores":	[-6.80101015183343]
								}, {
									"case":	256,
									"scores":	[-6.80101015183343]
								}, {
									"case":	257,
									"scores":	[-6.80101015183343]
								}, {
									"case":	258,
									"scores":	[-6.80101015183343]
								}, {
									"case":	259,
									"scores":	[-6.80101015183343]
								}, {
									"case":	260,
									"scores":	[-6.80101015183343]
								}]
						}]
				}, {
					"line":	1651,
					"switches":	[{
							"switch":	25,
							"types":	[[], [], [], [], [381, 382, 383, 384], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [], [], [], [333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380], [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], [], [], [], [], [], []],
							"begin_line":	1652,
							"begin_column":	1,
							"end_line":	1652,
							"end_column":	1,
							"patch_codes":	["memset(&(*zhigh), 0, sizeof (*(&(*zhigh))))", "memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset(&(zhigh)->is_ref__gc, 0, sizeof (*(&(zhigh)->is_ref__gc)))", "memset(&(zhigh)->refcount__gc, 0, sizeof (*(&(zhigh)->refcount__gc)))", "memset(&(zhigh)->type, 0, sizeof (*(&(zhigh)->type)))", "memset(&(zhigh)->value, 0, sizeof (*(&(zhigh)->value)))", "memset(&(zlow)->is_ref__gc, 0, sizeof (*(&(zlow)->is_ref__gc)))", "memset(&(zlow)->refcount__gc, 0, sizeof (*(&(zlow)->refcount__gc)))", "memset(&(zlow)->type, 0, sizeof (*(&(zlow)->type)))", "memset(&(zlow)->value, 0, sizeof (*(&(zlow)->value)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_null(*(return_value_ptr))", "add_next_index_stringl((return_value), (const char *)low, 1, 1)", "add_next_index_stringl((this_ptr), (const char *)low, 1, 1)", "add_next_index_stringl((zhigh), (const char *)low, 1, 1)", "add_next_index_stringl((zlow), (const char *)low, 1, 1)", "add_next_index_stringl((zstep), (const char *)low, 1, 1)", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "err = (type1)", "err = (type2)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "high = (high)", "high = (low)", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "is_step_double = (type1)", "is_step_double = (type2)", "low = (high)", "low = (low)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (step)", "type1 = (-1)", "type1 = (0)", "type1 = (1)", "type1 = (2)", "type1 = (255)", "type1 = (3)", "type1 = (6)", "type1 = (err)", "type1 = (ht)", "type1 = (is_step_double)", "type1 = (return_value_used)", "type1 = (type1)", "type1 = (type2)", "type1 = is_numeric_string((*(return_value)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(this_ptr)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(zhigh)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(zlow)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(zstep)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(return_value)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(this_ptr)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(zhigh)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(zlow)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(zstep)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = (-1)", "type2 = (0)", "type2 = (1)", "type2 = (2)", "type2 = (255)", "type2 = (3)", "type2 = (6)", "type2 = (err)", "type2 = (ht)", "type2 = (is_step_double)", "type2 = (return_value_used)", "type2 = (type1)", "type2 = (type2)", "type2 = is_numeric_string((*(return_value)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(this_ptr)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(zhigh)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(zlow)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(zstep)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(return_value)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(this_ptr)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(zhigh)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(zlow)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(zstep)).value.str.len, ((void *)0), ((void *)0), 0)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "add_next_index_stringl(return_value, (const char *)low, 1, 1)", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "high = (unsigned char *)(*zhigh).value.str.val", "is_step_double = 1", "low = (unsigned char *)(*zlow).value.str.val", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1652\", 22, &(zhigh), sizeof (zhigh), &(type2), sizeof (type2), &((*zhigh).value.str.val), sizeof ((*zhigh).value.str.val), &((*zhigh).value.str.len), sizeof ((*zhigh).value.str.len), &(zlow), sizeof (zlow), &(type1), sizeof (type1), &((*zlow).value.str.val), sizeof ((*zlow).value.str.val), &((*zlow).value.str.len), sizeof ((*zlow).value.str.len), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(low), sizeof (low), &(high), sizeof (high), &(lstep), sizeof (lstep), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1652\", 22, &(zhigh), sizeof (zhigh), &(type2), sizeof (type2), &((*zhigh).value.str.val), sizeof ((*zhigh).value.str.val), &((*zhigh).value.str.len), sizeof ((*zhigh).value.str.len), &(zlow), sizeof (zlow), &(type1), sizeof (type1), &((*zlow).value.str.val), sizeof ((*zlow).value.str.val), &((*zlow).value.str.len), sizeof ((*zlow).value.str.len), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(low), sizeof (low), &(high), sizeof (high), &(lstep), sizeof (lstep), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    goto err;\n", "if (__is_neg(\"\", \"L1652\", 22, &(zhigh), sizeof (zhigh), &(type2), sizeof (type2), &((*zhigh).value.str.val), sizeof ((*zhigh).value.str.val), &((*zhigh).value.str.len), sizeof ((*zhigh).value.str.len), &(zlow), sizeof (zlow), &(type1), sizeof (type1), &((*zlow).value.str.val), sizeof ((*zlow).value.str.val), &((*zlow).value.str.len), sizeof ((*zlow).value.str.len), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(low), sizeof (low), &(high), sizeof (high), &(lstep), sizeof (lstep), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1652\", 22, &(zhigh), sizeof (zhigh), &(type2), sizeof (type2), &((*zhigh).value.str.val), sizeof ((*zhigh).value.str.val), &((*zhigh).value.str.len), sizeof ((*zhigh).value.str.len), &(zlow), sizeof (zlow), &(type1), sizeof (type1), &((*zlow).value.str.val), sizeof ((*zlow).value.str.val), &((*zlow).value.str.len), sizeof ((*zlow).value.str.len), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(low), sizeof (low), &(high), sizeof (high), &(lstep), sizeof (lstep), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.78080744451591]
								}, {
									"case":	2,
									"scores":	[-6.78080744451591]
								}, {
									"case":	3,
									"scores":	[-6.78080744451591]
								}, {
									"case":	4,
									"scores":	[-6.78080744451591]
								}, {
									"case":	5,
									"scores":	[-6.78080744451591]
								}, {
									"case":	6,
									"scores":	[-6.78080744451591]
								}, {
									"case":	7,
									"scores":	[-6.78080744451591]
								}, {
									"case":	8,
									"scores":	[-6.78080744451591]
								}, {
									"case":	9,
									"scores":	[-6.78080744451591]
								}, {
									"case":	10,
									"scores":	[-6.78080744451591]
								}, {
									"case":	11,
									"scores":	[-6.78080744451591]
								}, {
									"case":	12,
									"scores":	[-6.78080744451591]
								}, {
									"case":	13,
									"scores":	[-6.78080744451591]
								}, {
									"case":	14,
									"scores":	[-6.78080744451591]
								}, {
									"case":	15,
									"scores":	[-6.78080744451591]
								}, {
									"case":	16,
									"scores":	[-6.78080744451591]
								}, {
									"case":	17,
									"scores":	[-6.78080744451591]
								}, {
									"case":	18,
									"scores":	[-6.78080744451591]
								}, {
									"case":	19,
									"scores":	[-6.78080744451591]
								}, {
									"case":	20,
									"scores":	[-6.78080744451591]
								}, {
									"case":	21,
									"scores":	[-6.78080744451591]
								}, {
									"case":	22,
									"scores":	[-6.78080744451591]
								}, {
									"case":	23,
									"scores":	[-6.78080744451591]
								}, {
									"case":	24,
									"scores":	[-6.78080744451591]
								}, {
									"case":	25,
									"scores":	[-6.78080744451591]
								}, {
									"case":	26,
									"scores":	[-6.78080744451591]
								}, {
									"case":	27,
									"scores":	[-6.78080744451591]
								}, {
									"case":	28,
									"scores":	[-6.78080744451591]
								}, {
									"case":	29,
									"scores":	[-6.78080744451591]
								}, {
									"case":	30,
									"scores":	[-6.78080744451591]
								}, {
									"case":	31,
									"scores":	[-6.78080744451591]
								}, {
									"case":	32,
									"scores":	[-6.78080744451591]
								}, {
									"case":	33,
									"scores":	[-6.78080744451591]
								}, {
									"case":	34,
									"scores":	[-6.78080744451591]
								}, {
									"case":	35,
									"scores":	[-6.78080744451591]
								}, {
									"case":	36,
									"scores":	[-6.78080744451591]
								}, {
									"case":	37,
									"scores":	[-6.78080744451591]
								}, {
									"case":	38,
									"scores":	[-6.78080744451591]
								}, {
									"case":	39,
									"scores":	[-6.78080744451591]
								}, {
									"case":	40,
									"scores":	[-6.78080744451591]
								}, {
									"case":	41,
									"scores":	[-6.78080744451591]
								}, {
									"case":	42,
									"scores":	[-6.78080744451591]
								}, {
									"case":	43,
									"scores":	[-6.78080744451591]
								}, {
									"case":	44,
									"scores":	[-6.78080744451591]
								}, {
									"case":	45,
									"scores":	[-6.78080744451591]
								}, {
									"case":	46,
									"scores":	[-6.78080744451591]
								}, {
									"case":	47,
									"scores":	[-6.78080744451591]
								}, {
									"case":	48,
									"scores":	[-6.78080744451591]
								}, {
									"case":	49,
									"scores":	[-6.78080744451591]
								}, {
									"case":	50,
									"scores":	[-6.78080744451591]
								}, {
									"case":	51,
									"scores":	[-6.78080744451591]
								}, {
									"case":	52,
									"scores":	[-6.78080744451591]
								}, {
									"case":	53,
									"scores":	[-6.78080744451591]
								}, {
									"case":	54,
									"scores":	[-6.78080744451591]
								}, {
									"case":	55,
									"scores":	[-6.78080744451591]
								}, {
									"case":	56,
									"scores":	[-6.78080744451591]
								}, {
									"case":	57,
									"scores":	[-6.78080744451591]
								}, {
									"case":	58,
									"scores":	[-6.78080744451591]
								}, {
									"case":	59,
									"scores":	[-6.78080744451591]
								}, {
									"case":	60,
									"scores":	[-6.78080744451591]
								}, {
									"case":	61,
									"scores":	[-6.78080744451591]
								}, {
									"case":	62,
									"scores":	[-6.78080744451591]
								}, {
									"case":	63,
									"scores":	[-6.78080744451591]
								}, {
									"case":	64,
									"scores":	[-6.78080744451591]
								}, {
									"case":	65,
									"scores":	[-6.78080744451591]
								}, {
									"case":	66,
									"scores":	[-6.78080744451591]
								}, {
									"case":	67,
									"scores":	[-6.78080744451591]
								}, {
									"case":	68,
									"scores":	[-6.78080744451591]
								}, {
									"case":	69,
									"scores":	[-6.78080744451591]
								}, {
									"case":	70,
									"scores":	[-6.78080744451591]
								}, {
									"case":	71,
									"scores":	[-6.78080744451591]
								}, {
									"case":	72,
									"scores":	[-6.78080744451591]
								}, {
									"case":	73,
									"scores":	[-6.78080744451591]
								}, {
									"case":	74,
									"scores":	[-6.78080744451591]
								}, {
									"case":	75,
									"scores":	[-6.78080744451591]
								}, {
									"case":	76,
									"scores":	[-6.78080744451591]
								}, {
									"case":	77,
									"scores":	[-6.78080744451591]
								}, {
									"case":	78,
									"scores":	[-6.78080744451591]
								}, {
									"case":	79,
									"scores":	[-6.78080744451591]
								}, {
									"case":	80,
									"scores":	[-6.78080744451591]
								}, {
									"case":	81,
									"scores":	[-6.78080744451591]
								}, {
									"case":	82,
									"scores":	[-6.78080744451591]
								}, {
									"case":	83,
									"scores":	[-6.78080744451591]
								}, {
									"case":	84,
									"scores":	[-6.78080744451591]
								}, {
									"case":	85,
									"scores":	[-6.78080744451591]
								}, {
									"case":	86,
									"scores":	[-6.78080744451591]
								}, {
									"case":	87,
									"scores":	[-6.78080744451591]
								}, {
									"case":	88,
									"scores":	[-6.78080744451591]
								}, {
									"case":	89,
									"scores":	[-6.78080744451591]
								}, {
									"case":	90,
									"scores":	[-6.78080744451591]
								}, {
									"case":	91,
									"scores":	[-6.78080744451591]
								}, {
									"case":	92,
									"scores":	[-6.78080744451591]
								}, {
									"case":	93,
									"scores":	[-6.78080744451591]
								}, {
									"case":	94,
									"scores":	[-6.78080744451591]
								}, {
									"case":	95,
									"scores":	[-6.78080744451591]
								}, {
									"case":	96,
									"scores":	[-6.78080744451591]
								}, {
									"case":	97,
									"scores":	[-6.78080744451591]
								}, {
									"case":	98,
									"scores":	[-6.78080744451591]
								}, {
									"case":	99,
									"scores":	[-6.78080744451591]
								}, {
									"case":	100,
									"scores":	[-6.78080744451591]
								}, {
									"case":	101,
									"scores":	[-6.78080744451591]
								}, {
									"case":	102,
									"scores":	[-6.78080744451591]
								}, {
									"case":	103,
									"scores":	[-6.78080744451591]
								}, {
									"case":	104,
									"scores":	[-6.78080744451591]
								}, {
									"case":	105,
									"scores":	[-6.78080744451591]
								}, {
									"case":	106,
									"scores":	[-6.78080744451591]
								}, {
									"case":	107,
									"scores":	[-6.78080744451591]
								}, {
									"case":	108,
									"scores":	[-6.78080744451591]
								}, {
									"case":	109,
									"scores":	[-6.78080744451591]
								}, {
									"case":	110,
									"scores":	[-6.78080744451591]
								}, {
									"case":	111,
									"scores":	[-6.78080744451591]
								}, {
									"case":	112,
									"scores":	[-6.78080744451591]
								}, {
									"case":	113,
									"scores":	[-6.78080744451591]
								}, {
									"case":	114,
									"scores":	[-6.78080744451591]
								}, {
									"case":	115,
									"scores":	[-6.78080744451591]
								}, {
									"case":	116,
									"scores":	[-6.78080744451591]
								}, {
									"case":	117,
									"scores":	[-6.78080744451591]
								}, {
									"case":	118,
									"scores":	[-6.78080744451591]
								}, {
									"case":	119,
									"scores":	[-6.78080744451591]
								}, {
									"case":	120,
									"scores":	[-6.78080744451591]
								}, {
									"case":	121,
									"scores":	[-6.78080744451591]
								}, {
									"case":	122,
									"scores":	[-6.78080744451591]
								}, {
									"case":	123,
									"scores":	[-6.78080744451591]
								}, {
									"case":	124,
									"scores":	[-6.78080744451591]
								}, {
									"case":	125,
									"scores":	[-6.78080744451591]
								}, {
									"case":	126,
									"scores":	[-6.78080744451591]
								}, {
									"case":	127,
									"scores":	[-6.78080744451591]
								}, {
									"case":	128,
									"scores":	[-6.78080744451591]
								}, {
									"case":	129,
									"scores":	[-6.78080744451591]
								}, {
									"case":	130,
									"scores":	[-6.78080744451591]
								}, {
									"case":	131,
									"scores":	[-6.78080744451591]
								}, {
									"case":	132,
									"scores":	[-6.78080744451591]
								}, {
									"case":	133,
									"scores":	[-6.78080744451591]
								}, {
									"case":	134,
									"scores":	[-6.78080744451591]
								}, {
									"case":	135,
									"scores":	[-6.78080744451591]
								}, {
									"case":	136,
									"scores":	[-6.78080744451591]
								}, {
									"case":	137,
									"scores":	[-6.78080744451591]
								}, {
									"case":	138,
									"scores":	[-6.78080744451591]
								}, {
									"case":	139,
									"scores":	[-6.78080744451591]
								}, {
									"case":	140,
									"scores":	[-6.78080744451591]
								}, {
									"case":	141,
									"scores":	[-6.78080744451591]
								}, {
									"case":	142,
									"scores":	[-6.78080744451591]
								}, {
									"case":	143,
									"scores":	[-6.78080744451591]
								}, {
									"case":	144,
									"scores":	[-6.78080744451591]
								}, {
									"case":	145,
									"scores":	[-6.78080744451591]
								}, {
									"case":	146,
									"scores":	[-6.78080744451591]
								}, {
									"case":	147,
									"scores":	[-6.78080744451591]
								}, {
									"case":	148,
									"scores":	[-6.78080744451591]
								}, {
									"case":	149,
									"scores":	[-6.78080744451591]
								}, {
									"case":	150,
									"scores":	[-6.78080744451591]
								}, {
									"case":	151,
									"scores":	[-6.78080744451591]
								}, {
									"case":	152,
									"scores":	[-6.78080744451591]
								}, {
									"case":	153,
									"scores":	[-6.78080744451591]
								}, {
									"case":	154,
									"scores":	[-6.78080744451591]
								}, {
									"case":	155,
									"scores":	[-6.78080744451591]
								}, {
									"case":	156,
									"scores":	[-6.78080744451591]
								}, {
									"case":	157,
									"scores":	[-6.78080744451591]
								}, {
									"case":	158,
									"scores":	[-6.78080744451591]
								}, {
									"case":	159,
									"scores":	[-6.78080744451591]
								}, {
									"case":	160,
									"scores":	[-6.78080744451591]
								}, {
									"case":	161,
									"scores":	[-6.78080744451591]
								}, {
									"case":	162,
									"scores":	[-6.78080744451591]
								}, {
									"case":	163,
									"scores":	[-6.78080744451591]
								}, {
									"case":	164,
									"scores":	[-6.78080744451591]
								}, {
									"case":	165,
									"scores":	[-6.78080744451591]
								}, {
									"case":	166,
									"scores":	[-6.78080744451591]
								}, {
									"case":	167,
									"scores":	[-6.78080744451591]
								}, {
									"case":	168,
									"scores":	[-6.78080744451591]
								}, {
									"case":	169,
									"scores":	[-6.78080744451591]
								}, {
									"case":	170,
									"scores":	[-6.78080744451591]
								}, {
									"case":	171,
									"scores":	[-6.78080744451591]
								}, {
									"case":	172,
									"scores":	[-6.78080744451591]
								}, {
									"case":	173,
									"scores":	[-6.78080744451591]
								}, {
									"case":	174,
									"scores":	[-6.78080744451591]
								}, {
									"case":	175,
									"scores":	[-6.78080744451591]
								}, {
									"case":	176,
									"scores":	[-6.78080744451591]
								}, {
									"case":	177,
									"scores":	[-6.78080744451591]
								}, {
									"case":	178,
									"scores":	[-6.78080744451591]
								}, {
									"case":	179,
									"scores":	[-6.78080744451591]
								}, {
									"case":	180,
									"scores":	[-6.78080744451591]
								}, {
									"case":	181,
									"scores":	[-6.78080744451591]
								}, {
									"case":	182,
									"scores":	[-6.78080744451591]
								}, {
									"case":	183,
									"scores":	[-6.78080744451591]
								}, {
									"case":	184,
									"scores":	[-6.78080744451591]
								}, {
									"case":	185,
									"scores":	[-6.78080744451591]
								}, {
									"case":	186,
									"scores":	[-6.78080744451591]
								}, {
									"case":	187,
									"scores":	[-6.78080744451591]
								}, {
									"case":	188,
									"scores":	[-6.78080744451591]
								}, {
									"case":	189,
									"scores":	[-6.78080744451591]
								}, {
									"case":	190,
									"scores":	[-6.78080744451591]
								}, {
									"case":	191,
									"scores":	[-6.78080744451591]
								}, {
									"case":	192,
									"scores":	[-6.78080744451591]
								}, {
									"case":	193,
									"scores":	[-6.78080744451591]
								}, {
									"case":	194,
									"scores":	[-6.78080744451591]
								}, {
									"case":	195,
									"scores":	[-6.78080744451591]
								}, {
									"case":	196,
									"scores":	[-6.78080744451591]
								}, {
									"case":	197,
									"scores":	[-6.78080744451591]
								}, {
									"case":	198,
									"scores":	[-6.78080744451591]
								}, {
									"case":	199,
									"scores":	[-6.78080744451591]
								}, {
									"case":	200,
									"scores":	[-6.78080744451591]
								}, {
									"case":	201,
									"scores":	[-6.78080744451591]
								}, {
									"case":	202,
									"scores":	[-6.78080744451591]
								}, {
									"case":	203,
									"scores":	[-6.78080744451591]
								}, {
									"case":	204,
									"scores":	[-6.78080744451591]
								}, {
									"case":	205,
									"scores":	[-6.78080744451591]
								}, {
									"case":	206,
									"scores":	[-6.78080744451591]
								}, {
									"case":	207,
									"scores":	[-6.78080744451591]
								}, {
									"case":	208,
									"scores":	[-6.78080744451591]
								}, {
									"case":	209,
									"scores":	[-6.78080744451591]
								}, {
									"case":	210,
									"scores":	[-6.78080744451591]
								}, {
									"case":	211,
									"scores":	[-6.78080744451591]
								}, {
									"case":	212,
									"scores":	[-6.78080744451591]
								}, {
									"case":	213,
									"scores":	[-6.78080744451591]
								}, {
									"case":	214,
									"scores":	[-6.78080744451591]
								}, {
									"case":	215,
									"scores":	[-6.78080744451591]
								}, {
									"case":	216,
									"scores":	[-6.78080744451591]
								}, {
									"case":	217,
									"scores":	[-6.78080744451591]
								}, {
									"case":	218,
									"scores":	[-6.78080744451591]
								}, {
									"case":	219,
									"scores":	[-6.78080744451591]
								}, {
									"case":	220,
									"scores":	[-6.78080744451591]
								}, {
									"case":	221,
									"scores":	[-6.78080744451591]
								}, {
									"case":	222,
									"scores":	[-6.78080744451591]
								}, {
									"case":	223,
									"scores":	[-6.78080744451591]
								}, {
									"case":	224,
									"scores":	[-6.78080744451591]
								}, {
									"case":	225,
									"scores":	[-6.78080744451591]
								}, {
									"case":	226,
									"scores":	[-6.78080744451591]
								}, {
									"case":	227,
									"scores":	[-6.78080744451591]
								}, {
									"case":	228,
									"scores":	[-6.78080744451591]
								}, {
									"case":	229,
									"scores":	[-6.78080744451591]
								}, {
									"case":	230,
									"scores":	[-6.78080744451591]
								}, {
									"case":	231,
									"scores":	[-6.78080744451591]
								}, {
									"case":	232,
									"scores":	[-6.78080744451591]
								}, {
									"case":	233,
									"scores":	[-6.78080744451591]
								}, {
									"case":	234,
									"scores":	[-6.78080744451591]
								}, {
									"case":	235,
									"scores":	[-6.78080744451591]
								}, {
									"case":	236,
									"scores":	[-6.78080744451591]
								}, {
									"case":	237,
									"scores":	[-6.78080744451591]
								}, {
									"case":	238,
									"scores":	[-6.78080744451591]
								}, {
									"case":	239,
									"scores":	[-6.78080744451591]
								}, {
									"case":	240,
									"scores":	[-6.78080744451591]
								}, {
									"case":	241,
									"scores":	[-6.78080744451591]
								}, {
									"case":	242,
									"scores":	[-6.78080744451591]
								}, {
									"case":	243,
									"scores":	[-6.78080744451591]
								}, {
									"case":	244,
									"scores":	[-6.78080744451591]
								}, {
									"case":	245,
									"scores":	[-6.78080744451591]
								}, {
									"case":	246,
									"scores":	[-6.78080744451591]
								}, {
									"case":	247,
									"scores":	[-6.78080744451591]
								}, {
									"case":	248,
									"scores":	[-6.78080744451591]
								}, {
									"case":	249,
									"scores":	[-6.78080744451591]
								}, {
									"case":	250,
									"scores":	[-6.78080744451591]
								}, {
									"case":	251,
									"scores":	[-6.78080744451591]
								}, {
									"case":	252,
									"scores":	[-6.78080744451591]
								}, {
									"case":	253,
									"scores":	[-6.78080744451591]
								}, {
									"case":	254,
									"scores":	[-6.78080744451591]
								}, {
									"case":	255,
									"scores":	[-6.78080744451591]
								}, {
									"case":	256,
									"scores":	[-6.78080744451591]
								}, {
									"case":	257,
									"scores":	[-6.78080744451591]
								}, {
									"case":	258,
									"scores":	[-6.78080744451591]
								}, {
									"case":	259,
									"scores":	[-6.78080744451591]
								}, {
									"case":	260,
									"scores":	[-6.78080744451591]
								}, {
									"case":	261,
									"scores":	[-6.78080744451591]
								}, {
									"case":	262,
									"scores":	[-6.78080744451591]
								}, {
									"case":	263,
									"scores":	[-6.78080744451591]
								}, {
									"case":	264,
									"scores":	[-6.78080744451591]
								}, {
									"case":	265,
									"scores":	[-6.78080744451591]
								}, {
									"case":	266,
									"scores":	[-6.78080744451591]
								}, {
									"case":	267,
									"scores":	[-6.78080744451591]
								}, {
									"case":	268,
									"scores":	[-6.78080744451591]
								}, {
									"case":	269,
									"scores":	[-6.78080744451591]
								}, {
									"case":	270,
									"scores":	[-6.78080744451591]
								}, {
									"case":	271,
									"scores":	[-6.78080744451591]
								}, {
									"case":	272,
									"scores":	[-6.78080744451591]
								}, {
									"case":	273,
									"scores":	[-6.78080744451591]
								}, {
									"case":	274,
									"scores":	[-6.78080744451591]
								}, {
									"case":	275,
									"scores":	[-6.78080744451591]
								}, {
									"case":	276,
									"scores":	[-6.78080744451591]
								}, {
									"case":	277,
									"scores":	[-6.78080744451591]
								}, {
									"case":	278,
									"scores":	[-6.78080744451591]
								}, {
									"case":	279,
									"scores":	[-6.78080744451591]
								}, {
									"case":	280,
									"scores":	[-6.78080744451591]
								}, {
									"case":	281,
									"scores":	[-6.78080744451591]
								}, {
									"case":	282,
									"scores":	[-6.78080744451591]
								}, {
									"case":	283,
									"scores":	[-6.78080744451591]
								}, {
									"case":	284,
									"scores":	[-6.78080744451591]
								}, {
									"case":	285,
									"scores":	[-6.78080744451591]
								}, {
									"case":	286,
									"scores":	[-6.78080744451591]
								}, {
									"case":	287,
									"scores":	[-6.78080744451591]
								}, {
									"case":	288,
									"scores":	[-6.78080744451591]
								}, {
									"case":	289,
									"scores":	[-6.78080744451591]
								}, {
									"case":	290,
									"scores":	[-6.78080744451591]
								}, {
									"case":	291,
									"scores":	[-6.78080744451591]
								}, {
									"case":	292,
									"scores":	[-6.78080744451591]
								}, {
									"case":	293,
									"scores":	[-6.78080744451591]
								}, {
									"case":	294,
									"scores":	[-6.78080744451591]
								}, {
									"case":	295,
									"scores":	[-6.78080744451591]
								}, {
									"case":	296,
									"scores":	[-6.78080744451591]
								}, {
									"case":	297,
									"scores":	[-6.78080744451591]
								}, {
									"case":	298,
									"scores":	[-6.78080744451591]
								}, {
									"case":	299,
									"scores":	[-6.78080744451591]
								}, {
									"case":	300,
									"scores":	[-6.78080744451591]
								}, {
									"case":	301,
									"scores":	[-6.78080744451591]
								}, {
									"case":	302,
									"scores":	[-6.78080744451591]
								}, {
									"case":	303,
									"scores":	[-6.78080744451591]
								}, {
									"case":	304,
									"scores":	[-6.78080744451591]
								}, {
									"case":	305,
									"scores":	[-6.78080744451591]
								}, {
									"case":	306,
									"scores":	[-6.78080744451591]
								}, {
									"case":	307,
									"scores":	[-6.78080744451591]
								}, {
									"case":	308,
									"scores":	[-6.78080744451591]
								}, {
									"case":	309,
									"scores":	[-6.78080744451591]
								}, {
									"case":	310,
									"scores":	[-6.78080744451591]
								}, {
									"case":	311,
									"scores":	[-6.78080744451591]
								}, {
									"case":	312,
									"scores":	[-6.78080744451591]
								}, {
									"case":	313,
									"scores":	[-6.78080744451591]
								}, {
									"case":	314,
									"scores":	[-6.78080744451591]
								}, {
									"case":	315,
									"scores":	[-6.78080744451591]
								}, {
									"case":	316,
									"scores":	[-6.78080744451591]
								}, {
									"case":	317,
									"scores":	[-6.78080744451591]
								}, {
									"case":	318,
									"scores":	[-6.78080744451591]
								}, {
									"case":	319,
									"scores":	[-6.78080744451591]
								}, {
									"case":	320,
									"scores":	[-6.78080744451591]
								}, {
									"case":	321,
									"scores":	[-6.78080744451591]
								}, {
									"case":	322,
									"scores":	[-6.78080744451591]
								}, {
									"case":	323,
									"scores":	[-6.78080744451591]
								}, {
									"case":	324,
									"scores":	[-6.78080744451591]
								}, {
									"case":	325,
									"scores":	[-6.78080744451591]
								}, {
									"case":	326,
									"scores":	[-6.78080744451591]
								}, {
									"case":	327,
									"scores":	[-6.78080744451591]
								}, {
									"case":	328,
									"scores":	[-6.78080744451591]
								}, {
									"case":	329,
									"scores":	[-6.78080744451591]
								}, {
									"case":	330,
									"scores":	[-6.78080744451591]
								}, {
									"case":	331,
									"scores":	[-6.78080744451591]
								}, {
									"case":	332,
									"scores":	[-6.78080744451591]
								}, {
									"case":	333,
									"scores":	[-6.78080744451591]
								}, {
									"case":	334,
									"scores":	[-6.78080744451591]
								}, {
									"case":	335,
									"scores":	[-6.78080744451591]
								}, {
									"case":	336,
									"scores":	[-6.78080744451591]
								}, {
									"case":	337,
									"scores":	[-6.78080744451591]
								}, {
									"case":	338,
									"scores":	[-6.78080744451591]
								}, {
									"case":	339,
									"scores":	[-6.78080744451591]
								}, {
									"case":	340,
									"scores":	[-6.78080744451591]
								}, {
									"case":	341,
									"scores":	[-6.78080744451591]
								}, {
									"case":	342,
									"scores":	[-6.78080744451591]
								}, {
									"case":	343,
									"scores":	[-6.78080744451591]
								}, {
									"case":	344,
									"scores":	[-6.78080744451591]
								}, {
									"case":	345,
									"scores":	[-6.78080744451591]
								}, {
									"case":	346,
									"scores":	[-6.78080744451591]
								}, {
									"case":	347,
									"scores":	[-6.78080744451591]
								}, {
									"case":	348,
									"scores":	[-6.78080744451591]
								}, {
									"case":	349,
									"scores":	[-6.78080744451591]
								}, {
									"case":	350,
									"scores":	[-6.78080744451591]
								}, {
									"case":	351,
									"scores":	[-6.78080744451591]
								}, {
									"case":	352,
									"scores":	[-6.78080744451591]
								}, {
									"case":	353,
									"scores":	[-6.78080744451591]
								}, {
									"case":	354,
									"scores":	[-6.78080744451591]
								}, {
									"case":	355,
									"scores":	[-6.78080744451591]
								}, {
									"case":	356,
									"scores":	[-6.78080744451591]
								}, {
									"case":	357,
									"scores":	[-6.78080744451591]
								}, {
									"case":	358,
									"scores":	[-6.78080744451591]
								}, {
									"case":	359,
									"scores":	[-6.78080744451591]
								}, {
									"case":	360,
									"scores":	[-6.78080744451591]
								}, {
									"case":	361,
									"scores":	[-6.78080744451591]
								}, {
									"case":	362,
									"scores":	[-6.78080744451591]
								}, {
									"case":	363,
									"scores":	[-6.78080744451591]
								}, {
									"case":	364,
									"scores":	[-6.78080744451591]
								}, {
									"case":	365,
									"scores":	[-6.78080744451591]
								}, {
									"case":	366,
									"scores":	[-6.78080744451591]
								}, {
									"case":	367,
									"scores":	[-6.78080744451591]
								}, {
									"case":	368,
									"scores":	[-6.78080744451591]
								}, {
									"case":	369,
									"scores":	[-6.78080744451591]
								}, {
									"case":	370,
									"scores":	[-6.78080744451591]
								}, {
									"case":	371,
									"scores":	[-6.78080744451591]
								}, {
									"case":	372,
									"scores":	[-6.78080744451591]
								}, {
									"case":	373,
									"scores":	[-6.78080744451591]
								}, {
									"case":	374,
									"scores":	[-6.78080744451591]
								}, {
									"case":	375,
									"scores":	[-6.78080744451591]
								}, {
									"case":	376,
									"scores":	[-6.78080744451591]
								}, {
									"case":	377,
									"scores":	[-6.78080744451591]
								}, {
									"case":	378,
									"scores":	[-6.78080744451591]
								}, {
									"case":	379,
									"scores":	[-6.78080744451591]
								}, {
									"case":	380,
									"scores":	[-6.78080744451591]
								}, {
									"case":	381,
									"scores":	[-9.13850533231591, -10.216015481515909, -8.67516356251591, -7.96333944551591, -11.590773424215911, -9.30121076051591, -11.052978331515909, -10.34115421451591, -10.221904240515908, -11.036050414515909, -11.036050414515909, -10.505043554315909, -10.432793357515909, -10.432793357515909, -10.221904240515908, -10.221904240515908, -10.467943154315908, -10.259004640515908, -11.036050414515909, -11.036050414515909, -11.036050414515909, -11.036050414515909]
								}, {
									"case":	382,
									"scores":	[-9.13850533231591, -10.216015481515909, -8.67516356251591, -7.96333944551591, -11.590773424215911, -9.30121076051591, -11.052978331515909, -10.34115421451591, -10.221904240515908, -11.036050414515909, -11.036050414515909, -10.505043554315909, -10.432793357515909, -10.432793357515909, -10.221904240515908, -10.221904240515908, -10.467943154315908, -10.259004640515908, -11.036050414515909, -11.036050414515909, -11.036050414515909, -11.036050414515909]
								}, {
									"case":	383,
									"scores":	[-9.13850533231591, -10.216015481515909, -8.67516356251591, -7.96333944551591, -11.590773424215911, -9.30121076051591, -11.052978331515909, -10.34115421451591, -10.221904240515908, -11.036050414515909, -11.036050414515909, -10.505043554315909, -10.432793357515909, -10.432793357515909, -10.221904240515908, -10.221904240515908, -10.467943154315908, -10.259004640515908, -11.036050414515909, -11.036050414515909, -11.036050414515909, -11.036050414515909]
								}, {
									"case":	384,
									"scores":	[-9.13950533231591, -10.217015481515908, -8.67616356251591, -7.96433944551591, -11.59177342421591, -9.30221076051591, -11.053978331515909, -10.34215421451591, -10.222904240515909, -11.03705041451591, -11.03705041451591, -10.506043554315909, -10.43379335751591, -10.43379335751591, -10.222904240515909, -10.222904240515909, -10.468943154315909, -10.260004640515909, -11.03705041451591, -11.03705041451591, -11.03705041451591, -11.03705041451591]
								}]
						}, {
							"switch":	26,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1652,
							"begin_column":	3,
							"end_line":	1652,
							"end_column":	80,
							"patch_codes":	["if (!__is_neg(\"\", \"L1652\", 22, &(zhigh), sizeof (zhigh), &(type2), sizeof (type2), &((*zhigh).value.str.val), sizeof ((*zhigh).value.str.val), &((*zhigh).value.str.len), sizeof ((*zhigh).value.str.len), &(zlow), sizeof (zlow), &(type1), sizeof (type1), &((*zlow).value.str.val), sizeof ((*zlow).value.str.val), &((*zlow).value.str.len), sizeof ((*zlow).value.str.len), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(low), sizeof (low), &(high), sizeof (high), &(lstep), sizeof (lstep), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0);\n", "{\n}\n", "type2 = (-1)", "type2 = (0)", "type2 = (1)", "type2 = (2)", "type2 = (255)", "type2 = (3)", "type2 = (6)", "type2 = (err)", "type2 = (ht)", "type2 = (is_step_double)", "type2 = (return_value_used)", "type2 = (type1)", "type2 = (type2)", "type2 = is_numeric_string((*(&err)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(&high)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(&ht)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(&is_step_double)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(&low)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(&lstep)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(&return_value)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(&return_value_ptr)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(&return_value_used)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(&step)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(&this_ptr)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(&type1)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(&type2)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(&zhigh)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(&zlow)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(&zstep)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(return_value)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(this_ptr)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(zhigh)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(zlow)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(zstep)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(&err)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(&high)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(&ht)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(&is_step_double)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(&low)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(&lstep)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(&return_value)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(&return_value_ptr)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(&return_value_used)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(&step)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(&this_ptr)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(&type1)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(&type2)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(&zhigh)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(&zlow)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(&zstep)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(return_value)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(this_ptr)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(zhigh)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(zlow)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(zstep)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (0 * err))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (0 * ht))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (0 * is_step_double))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (0 * lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (0 * return_value_used))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (0 * type1))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (0 * type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err != 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err != is_step_double))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err != lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err != type1))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err != type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err * ht))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err * is_step_double))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err * lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err * return_value_used))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err * type1))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err * type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err + 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err + is_step_double))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err + lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err + type1))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err + type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err - 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err - is_step_double))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err - lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err - type1))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err - type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err == 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err == is_step_double))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err == lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err == type1))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (err == type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (high != 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (high == 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht != 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht != err))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht != is_step_double))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht != lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht != return_value_used))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht != type1))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht != type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht * err))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht * is_step_double))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht * lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht * return_value_used))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht * type1))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht * type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht + 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht + err))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht + is_step_double))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht + lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht + return_value_used))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht + type1))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht + type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht - 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht - err))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht - is_step_double))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht - lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht - return_value_used))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht - type1))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht - type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht == 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht == err))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht == is_step_double))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht == lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht == return_value_used))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht == type1))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (ht == type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (is_step_double != 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (is_step_double != lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (is_step_double != type1))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (is_step_double != type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (is_step_double * err))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (is_step_double * ht))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (is_step_double * lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (is_step_double * return_value_used))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (is_step_double * type1))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (is_step_double * type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (is_step_double + 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (is_step_double + lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (is_step_double + type1))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (is_step_double + type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (is_step_double - 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (is_step_double - lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (is_step_double - type1))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (is_step_double - type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (is_step_double == 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (is_step_double == lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (is_step_double == type1))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (is_step_double == type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (low != 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (low != high))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (low == 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (low == high))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (lstep != 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (lstep * err))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (lstep * ht))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (lstep * is_step_double))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (lstep * return_value_used))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (lstep * type1))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (lstep * type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (lstep + 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (lstep - 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (lstep == 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value != 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value != this_ptr))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value != zhigh))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value != zlow))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value != zstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value == 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value == this_ptr))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value == zhigh))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value == zlow))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value == zstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_ptr != 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_ptr == 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used != 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used != err))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used != is_step_double))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used != lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used != type1))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used != type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used * err))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used * ht))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used * is_step_double))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used * lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used * type1))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used * type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used + 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used + err))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used + is_step_double))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used + lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used + type1))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used + type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used - 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used - err))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used - is_step_double))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used - lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used - type1))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used - type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used == 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used == err))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used == is_step_double))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used == lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used == type1))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (return_value_used == type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (step != 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (step == 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (this_ptr != 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (this_ptr != zhigh))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (this_ptr != zlow))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (this_ptr != zstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (this_ptr == 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (this_ptr == zhigh))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (this_ptr == zlow))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (this_ptr == zstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type1 != 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type1 != lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type1 != type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type1 * err))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type1 * ht))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type1 * is_step_double))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type1 * lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type1 * return_value_used))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type1 * type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type1 + 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type1 + lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type1 + type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type1 - 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type1 - lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type1 - type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type1 == 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type1 == lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type1 == type2))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type2 != 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type2 != lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type2 * err))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type2 * ht))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type2 * is_step_double))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type2 * lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type2 * return_value_used))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type2 * type1))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type2 + 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type2 + lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type2 - 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type2 - lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type2 == 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (type2 == lstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (zhigh != 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (zhigh != zstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (zhigh == 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (zhigh == zstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (zlow != 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (zlow != zhigh))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (zlow != zstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (zlow == 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (zlow == zhigh))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (zlow == zstep))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (zstep != 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), (zstep == 0))", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.39746221451591, -7.65813762551591, -8.73473262451591, -7.94346159451591, -10.067071961915909, -6.91051824451591, -9.66149676051591, -8.87022573051591, -8.94897210451591, -9.47381691451591, -9.47381691451591, -10.001211004515909, -9.41823210451591, -9.41823210451591, -8.94897210451591, -8.94897210451591, -9.70686020451591, -9.24332290451591, -9.47381691451591, -9.47381691451591, -9.47381691451591, -9.47381691451591]
								}, {
									"case":	2,
									"scores":	[-6.78080744451591]
								}, {
									"case":	3,
									"scores":	[-6.78080744451591]
								}, {
									"case":	4,
									"scores":	[-6.78080744451591]
								}, {
									"case":	5,
									"scores":	[-6.78080744451591]
								}, {
									"case":	6,
									"scores":	[-6.78080744451591]
								}, {
									"case":	7,
									"scores":	[-6.78080744451591]
								}, {
									"case":	8,
									"scores":	[-6.78080744451591]
								}, {
									"case":	9,
									"scores":	[-6.78080744451591]
								}, {
									"case":	10,
									"scores":	[-6.78080744451591]
								}, {
									"case":	11,
									"scores":	[-6.78080744451591]
								}, {
									"case":	12,
									"scores":	[-6.78080744451591]
								}, {
									"case":	13,
									"scores":	[-6.78080744451591]
								}, {
									"case":	14,
									"scores":	[-6.78080744451591]
								}, {
									"case":	15,
									"scores":	[-6.78080744451591]
								}, {
									"case":	16,
									"scores":	[-6.78080744451591]
								}, {
									"case":	17,
									"scores":	[-6.78080744451591]
								}, {
									"case":	18,
									"scores":	[-6.78080744451591]
								}, {
									"case":	19,
									"scores":	[-6.78080744451591]
								}, {
									"case":	20,
									"scores":	[-6.78080744451591]
								}, {
									"case":	21,
									"scores":	[-6.78080744451591]
								}, {
									"case":	22,
									"scores":	[-6.78080744451591]
								}, {
									"case":	23,
									"scores":	[-6.78080744451591]
								}, {
									"case":	24,
									"scores":	[-6.78080744451591]
								}, {
									"case":	25,
									"scores":	[-6.78080744451591]
								}, {
									"case":	26,
									"scores":	[-6.78080744451591]
								}, {
									"case":	27,
									"scores":	[-6.78080744451591]
								}, {
									"case":	28,
									"scores":	[-6.78080744451591]
								}, {
									"case":	29,
									"scores":	[-6.78080744451591]
								}, {
									"case":	30,
									"scores":	[-6.78080744451591]
								}, {
									"case":	31,
									"scores":	[-6.78080744451591]
								}, {
									"case":	32,
									"scores":	[-6.78080744451591]
								}, {
									"case":	33,
									"scores":	[-6.78080744451591]
								}, {
									"case":	34,
									"scores":	[-6.78080744451591]
								}, {
									"case":	35,
									"scores":	[-6.78080744451591]
								}, {
									"case":	36,
									"scores":	[-6.78080744451591]
								}, {
									"case":	37,
									"scores":	[-6.78080744451591]
								}, {
									"case":	38,
									"scores":	[-6.78080744451591]
								}, {
									"case":	39,
									"scores":	[-6.78080744451591]
								}, {
									"case":	40,
									"scores":	[-6.78080744451591]
								}, {
									"case":	41,
									"scores":	[-6.78080744451591]
								}, {
									"case":	42,
									"scores":	[-6.78080744451591]
								}, {
									"case":	43,
									"scores":	[-6.78080744451591]
								}, {
									"case":	44,
									"scores":	[-6.78080744451591]
								}, {
									"case":	45,
									"scores":	[-6.78080744451591]
								}, {
									"case":	46,
									"scores":	[-6.78080744451591]
								}, {
									"case":	47,
									"scores":	[-6.78080744451591]
								}, {
									"case":	48,
									"scores":	[-6.78080744451591]
								}, {
									"case":	49,
									"scores":	[-6.78080744451591]
								}, {
									"case":	50,
									"scores":	[-6.78080744451591]
								}, {
									"case":	51,
									"scores":	[-6.78080744451591]
								}, {
									"case":	52,
									"scores":	[-6.78080744451591]
								}, {
									"case":	53,
									"scores":	[-6.78080744451591]
								}, {
									"case":	54,
									"scores":	[-6.78080744451591]
								}, {
									"case":	55,
									"scores":	[-6.78080744451591]
								}, {
									"case":	56,
									"scores":	[-6.78080744451591]
								}, {
									"case":	57,
									"scores":	[-6.78080744451591]
								}, {
									"case":	58,
									"scores":	[-6.78080744451591]
								}, {
									"case":	59,
									"scores":	[-6.78080744451591]
								}, {
									"case":	60,
									"scores":	[-6.78080744451591]
								}, {
									"case":	61,
									"scores":	[-6.78080744451591]
								}, {
									"case":	62,
									"scores":	[-6.78080744451591]
								}, {
									"case":	63,
									"scores":	[-6.78080744451591]
								}, {
									"case":	64,
									"scores":	[-6.78080744451591]
								}, {
									"case":	65,
									"scores":	[-6.78080744451591]
								}, {
									"case":	66,
									"scores":	[-6.78080744451591]
								}, {
									"case":	67,
									"scores":	[-6.78080744451591]
								}, {
									"case":	68,
									"scores":	[-6.78080744451591]
								}, {
									"case":	69,
									"scores":	[-6.78080744451591]
								}, {
									"case":	70,
									"scores":	[-6.78080744451591]
								}, {
									"case":	71,
									"scores":	[-6.78080744451591]
								}, {
									"case":	72,
									"scores":	[-6.78080744451591]
								}, {
									"case":	73,
									"scores":	[-6.78080744451591]
								}, {
									"case":	74,
									"scores":	[-6.78080744451591]
								}, {
									"case":	75,
									"scores":	[-6.78080744451591]
								}, {
									"case":	76,
									"scores":	[-6.78080744451591]
								}, {
									"case":	77,
									"scores":	[-6.78080744451591]
								}, {
									"case":	78,
									"scores":	[-6.78080744451591]
								}, {
									"case":	79,
									"scores":	[-6.78080744451591]
								}, {
									"case":	80,
									"scores":	[-6.78080744451591]
								}, {
									"case":	81,
									"scores":	[-6.78080744451591]
								}, {
									"case":	82,
									"scores":	[-6.78080744451591]
								}, {
									"case":	83,
									"scores":	[-6.78080744451591]
								}, {
									"case":	84,
									"scores":	[-6.78080744451591]
								}, {
									"case":	85,
									"scores":	[-6.78080744451591]
								}, {
									"case":	86,
									"scores":	[-6.78080744451591]
								}, {
									"case":	87,
									"scores":	[-6.78080744451591]
								}, {
									"case":	88,
									"scores":	[-6.78080744451591]
								}, {
									"case":	89,
									"scores":	[-6.78080744451591]
								}, {
									"case":	90,
									"scores":	[-6.78080744451591]
								}, {
									"case":	91,
									"scores":	[-6.78080744451591]
								}, {
									"case":	92,
									"scores":	[-6.78080744451591]
								}, {
									"case":	93,
									"scores":	[-6.78080744451591]
								}, {
									"case":	94,
									"scores":	[-6.78080744451591]
								}, {
									"case":	95,
									"scores":	[-6.78080744451591]
								}, {
									"case":	96,
									"scores":	[-6.78080744451591]
								}, {
									"case":	97,
									"scores":	[-6.78080744451591]
								}, {
									"case":	98,
									"scores":	[-6.78080744451591]
								}, {
									"case":	99,
									"scores":	[-6.78080744451591]
								}, {
									"case":	100,
									"scores":	[-6.78080744451591]
								}, {
									"case":	101,
									"scores":	[-6.78080744451591]
								}, {
									"case":	102,
									"scores":	[-6.78080744451591]
								}, {
									"case":	103,
									"scores":	[-6.78080744451591]
								}, {
									"case":	104,
									"scores":	[-6.78080744451591]
								}, {
									"case":	105,
									"scores":	[-6.78080744451591]
								}, {
									"case":	106,
									"scores":	[-6.78080744451591]
								}, {
									"case":	107,
									"scores":	[-6.78080744451591]
								}, {
									"case":	108,
									"scores":	[-6.78080744451591]
								}, {
									"case":	109,
									"scores":	[-6.78080744451591]
								}, {
									"case":	110,
									"scores":	[-6.78080744451591]
								}, {
									"case":	111,
									"scores":	[-6.78080744451591]
								}, {
									"case":	112,
									"scores":	[-6.78080744451591]
								}, {
									"case":	113,
									"scores":	[-6.78080744451591]
								}, {
									"case":	114,
									"scores":	[-6.78080744451591]
								}, {
									"case":	115,
									"scores":	[-6.78080744451591]
								}, {
									"case":	116,
									"scores":	[-6.78080744451591]
								}, {
									"case":	117,
									"scores":	[-6.78080744451591]
								}, {
									"case":	118,
									"scores":	[-6.78080744451591]
								}, {
									"case":	119,
									"scores":	[-6.78080744451591]
								}, {
									"case":	120,
									"scores":	[-6.78080744451591]
								}, {
									"case":	121,
									"scores":	[-6.78080744451591]
								}, {
									"case":	122,
									"scores":	[-6.78080744451591]
								}, {
									"case":	123,
									"scores":	[-6.78080744451591]
								}, {
									"case":	124,
									"scores":	[-6.78080744451591]
								}, {
									"case":	125,
									"scores":	[-6.78080744451591]
								}, {
									"case":	126,
									"scores":	[-6.78080744451591]
								}, {
									"case":	127,
									"scores":	[-6.78080744451591]
								}, {
									"case":	128,
									"scores":	[-6.78080744451591]
								}, {
									"case":	129,
									"scores":	[-6.78080744451591]
								}, {
									"case":	130,
									"scores":	[-6.78080744451591]
								}, {
									"case":	131,
									"scores":	[-6.78080744451591]
								}, {
									"case":	132,
									"scores":	[-6.78080744451591]
								}, {
									"case":	133,
									"scores":	[-6.78080744451591]
								}, {
									"case":	134,
									"scores":	[-6.78080744451591]
								}, {
									"case":	135,
									"scores":	[-6.78080744451591]
								}, {
									"case":	136,
									"scores":	[-6.78080744451591]
								}, {
									"case":	137,
									"scores":	[-6.78080744451591]
								}, {
									"case":	138,
									"scores":	[-6.78080744451591]
								}, {
									"case":	139,
									"scores":	[-6.78080744451591]
								}, {
									"case":	140,
									"scores":	[-6.78080744451591]
								}, {
									"case":	141,
									"scores":	[-6.78080744451591]
								}, {
									"case":	142,
									"scores":	[-6.78080744451591]
								}, {
									"case":	143,
									"scores":	[-6.78080744451591]
								}, {
									"case":	144,
									"scores":	[-6.78080744451591]
								}, {
									"case":	145,
									"scores":	[-6.78080744451591]
								}, {
									"case":	146,
									"scores":	[-6.78080744451591]
								}, {
									"case":	147,
									"scores":	[-6.78080744451591]
								}, {
									"case":	148,
									"scores":	[-6.78080744451591]
								}, {
									"case":	149,
									"scores":	[-6.78080744451591]
								}, {
									"case":	150,
									"scores":	[-6.78080744451591]
								}, {
									"case":	151,
									"scores":	[-6.78080744451591]
								}, {
									"case":	152,
									"scores":	[-6.78080744451591]
								}, {
									"case":	153,
									"scores":	[-6.78080744451591]
								}, {
									"case":	154,
									"scores":	[-6.78080744451591]
								}, {
									"case":	155,
									"scores":	[-6.78080744451591]
								}, {
									"case":	156,
									"scores":	[-6.78080744451591]
								}, {
									"case":	157,
									"scores":	[-6.78080744451591]
								}, {
									"case":	158,
									"scores":	[-6.78080744451591]
								}, {
									"case":	159,
									"scores":	[-6.78080744451591]
								}, {
									"case":	160,
									"scores":	[-6.78080744451591]
								}, {
									"case":	161,
									"scores":	[-6.78080744451591]
								}, {
									"case":	162,
									"scores":	[-6.78080744451591]
								}, {
									"case":	163,
									"scores":	[-6.78080744451591]
								}, {
									"case":	164,
									"scores":	[-6.78080744451591]
								}, {
									"case":	165,
									"scores":	[-6.78080744451591]
								}, {
									"case":	166,
									"scores":	[-6.78080744451591]
								}, {
									"case":	167,
									"scores":	[-6.78080744451591]
								}, {
									"case":	168,
									"scores":	[-6.78080744451591]
								}, {
									"case":	169,
									"scores":	[-6.78080744451591]
								}, {
									"case":	170,
									"scores":	[-6.78080744451591]
								}, {
									"case":	171,
									"scores":	[-6.78080744451591]
								}, {
									"case":	172,
									"scores":	[-6.78080744451591]
								}, {
									"case":	173,
									"scores":	[-6.78080744451591]
								}, {
									"case":	174,
									"scores":	[-6.78080744451591]
								}, {
									"case":	175,
									"scores":	[-6.78080744451591]
								}, {
									"case":	176,
									"scores":	[-6.78080744451591]
								}, {
									"case":	177,
									"scores":	[-6.78080744451591]
								}, {
									"case":	178,
									"scores":	[-6.78080744451591]
								}, {
									"case":	179,
									"scores":	[-6.78080744451591]
								}, {
									"case":	180,
									"scores":	[-6.78080744451591]
								}, {
									"case":	181,
									"scores":	[-6.78080744451591]
								}, {
									"case":	182,
									"scores":	[-6.78080744451591]
								}, {
									"case":	183,
									"scores":	[-6.78080744451591]
								}, {
									"case":	184,
									"scores":	[-6.78080744451591]
								}, {
									"case":	185,
									"scores":	[-6.78080744451591]
								}, {
									"case":	186,
									"scores":	[-6.78080744451591]
								}, {
									"case":	187,
									"scores":	[-6.78080744451591]
								}, {
									"case":	188,
									"scores":	[-6.78080744451591]
								}, {
									"case":	189,
									"scores":	[-6.78080744451591]
								}, {
									"case":	190,
									"scores":	[-6.78080744451591]
								}, {
									"case":	191,
									"scores":	[-6.78080744451591]
								}, {
									"case":	192,
									"scores":	[-6.78080744451591]
								}, {
									"case":	193,
									"scores":	[-6.78080744451591]
								}, {
									"case":	194,
									"scores":	[-6.78080744451591]
								}, {
									"case":	195,
									"scores":	[-6.78080744451591]
								}, {
									"case":	196,
									"scores":	[-6.78080744451591]
								}, {
									"case":	197,
									"scores":	[-6.78080744451591]
								}, {
									"case":	198,
									"scores":	[-6.78080744451591]
								}, {
									"case":	199,
									"scores":	[-6.78080744451591]
								}, {
									"case":	200,
									"scores":	[-6.78080744451591]
								}, {
									"case":	201,
									"scores":	[-6.78080744451591]
								}, {
									"case":	202,
									"scores":	[-6.78080744451591]
								}, {
									"case":	203,
									"scores":	[-6.78080744451591]
								}, {
									"case":	204,
									"scores":	[-6.78080744451591]
								}, {
									"case":	205,
									"scores":	[-6.78080744451591]
								}, {
									"case":	206,
									"scores":	[-6.78080744451591]
								}, {
									"case":	207,
									"scores":	[-6.78080744451591]
								}, {
									"case":	208,
									"scores":	[-6.78080744451591]
								}, {
									"case":	209,
									"scores":	[-6.78080744451591]
								}, {
									"case":	210,
									"scores":	[-6.78080744451591]
								}, {
									"case":	211,
									"scores":	[-6.78080744451591]
								}, {
									"case":	212,
									"scores":	[-6.78080744451591]
								}, {
									"case":	213,
									"scores":	[-6.78080744451591]
								}, {
									"case":	214,
									"scores":	[-6.78080744451591]
								}, {
									"case":	215,
									"scores":	[-6.78080744451591]
								}, {
									"case":	216,
									"scores":	[-6.78080744451591]
								}, {
									"case":	217,
									"scores":	[-6.78080744451591]
								}, {
									"case":	218,
									"scores":	[-6.78080744451591]
								}, {
									"case":	219,
									"scores":	[-6.78080744451591]
								}, {
									"case":	220,
									"scores":	[-6.78080744451591]
								}, {
									"case":	221,
									"scores":	[-6.78080744451591]
								}, {
									"case":	222,
									"scores":	[-6.78080744451591]
								}, {
									"case":	223,
									"scores":	[-6.78080744451591]
								}, {
									"case":	224,
									"scores":	[-6.78080744451591]
								}, {
									"case":	225,
									"scores":	[-6.78080744451591]
								}, {
									"case":	226,
									"scores":	[-6.78080744451591]
								}, {
									"case":	227,
									"scores":	[-6.78080744451591]
								}, {
									"case":	228,
									"scores":	[-6.78080744451591]
								}, {
									"case":	229,
									"scores":	[-6.78080744451591]
								}, {
									"case":	230,
									"scores":	[-6.78080744451591]
								}, {
									"case":	231,
									"scores":	[-6.78080744451591]
								}, {
									"case":	232,
									"scores":	[-6.78080744451591]
								}, {
									"case":	233,
									"scores":	[-6.78080744451591]
								}, {
									"case":	234,
									"scores":	[-6.78080744451591]
								}, {
									"case":	235,
									"scores":	[-6.78080744451591]
								}, {
									"case":	236,
									"scores":	[-6.78080744451591]
								}, {
									"case":	237,
									"scores":	[-6.78080744451591]
								}, {
									"case":	238,
									"scores":	[-6.78080744451591]
								}, {
									"case":	239,
									"scores":	[-6.78080744451591]
								}, {
									"case":	240,
									"scores":	[-6.78080744451591]
								}, {
									"case":	241,
									"scores":	[-6.78080744451591]
								}, {
									"case":	242,
									"scores":	[-6.78080744451591]
								}, {
									"case":	243,
									"scores":	[-6.78080744451591]
								}, {
									"case":	244,
									"scores":	[-6.78080744451591]
								}, {
									"case":	245,
									"scores":	[-6.78080744451591]
								}, {
									"case":	246,
									"scores":	[-6.78080744451591]
								}, {
									"case":	247,
									"scores":	[-6.78080744451591]
								}, {
									"case":	248,
									"scores":	[-6.78080744451591]
								}, {
									"case":	249,
									"scores":	[-6.78080744451591]
								}, {
									"case":	250,
									"scores":	[-6.78080744451591]
								}, {
									"case":	251,
									"scores":	[-6.78080744451591]
								}, {
									"case":	252,
									"scores":	[-6.78080744451591]
								}, {
									"case":	253,
									"scores":	[-6.78080744451591]
								}, {
									"case":	254,
									"scores":	[-6.78080744451591]
								}, {
									"case":	255,
									"scores":	[-6.78080744451591]
								}, {
									"case":	256,
									"scores":	[-6.78080744451591]
								}, {
									"case":	257,
									"scores":	[-6.78080744451591]
								}, {
									"case":	258,
									"scores":	[-6.78080744451591]
								}, {
									"case":	259,
									"scores":	[-6.78080744451591]
								}, {
									"case":	260,
									"scores":	[-6.78080744451591]
								}]
						}]
				}, {
					"line":	1654,
					"switches":	[{
							"switch":	29,
							"types":	[[], [], [], [], [380, 381, 382, 383], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [], [], [], [332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379], [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331], [], [], [], [], [], []],
							"begin_line":	1655,
							"begin_column":	2,
							"end_line":	1655,
							"end_column":	2,
							"patch_codes":	["memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset(&(zhigh)->is_ref__gc, 0, sizeof (*(&(zhigh)->is_ref__gc)))", "memset(&(zhigh)->refcount__gc, 0, sizeof (*(&(zhigh)->refcount__gc)))", "memset(&(zhigh)->type, 0, sizeof (*(&(zhigh)->type)))", "memset(&(zhigh)->value, 0, sizeof (*(&(zhigh)->value)))", "memset(&(zlow)->is_ref__gc, 0, sizeof (*(&(zlow)->is_ref__gc)))", "memset(&(zlow)->refcount__gc, 0, sizeof (*(&(zlow)->refcount__gc)))", "memset(&(zlow)->type, 0, sizeof (*(&(zlow)->type)))", "memset(&(zlow)->value, 0, sizeof (*(&(zlow)->value)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_null(*(return_value_ptr))", "add_next_index_stringl((return_value), (const char *)low, 1, 1)", "add_next_index_stringl((this_ptr), (const char *)low, 1, 1)", "add_next_index_stringl((zhigh), (const char *)low, 1, 1)", "add_next_index_stringl((zlow), (const char *)low, 1, 1)", "add_next_index_stringl((zstep), (const char *)low, 1, 1)", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "err = (type1)", "err = (type2)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "high = (high)", "high = (low)", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "is_step_double = (type1)", "is_step_double = (type2)", "low = (high)", "low = (low)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (step)", "type1 = (-1)", "type1 = (0)", "type1 = (1)", "type1 = (2)", "type1 = (255)", "type1 = (3)", "type1 = (6)", "type1 = (err)", "type1 = (ht)", "type1 = (is_step_double)", "type1 = (return_value_used)", "type1 = (type1)", "type1 = (type2)", "type1 = is_numeric_string((*(return_value)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(this_ptr)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(zhigh)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(zlow)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(zstep)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(return_value)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(this_ptr)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(zhigh)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(zlow)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(zstep)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = (-1)", "type2 = (0)", "type2 = (1)", "type2 = (2)", "type2 = (255)", "type2 = (3)", "type2 = (6)", "type2 = (err)", "type2 = (ht)", "type2 = (is_step_double)", "type2 = (return_value_used)", "type2 = (type1)", "type2 = (type2)", "type2 = is_numeric_string((*(return_value)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(this_ptr)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(zhigh)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(zlow)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(zstep)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(return_value)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(this_ptr)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(zhigh)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(zlow)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(zstep)).value.str.len, ((void *)0), ((void *)0), 0)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "add_next_index_stringl(return_value, (const char *)low, 1, 1)", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "high = (unsigned char *)(*zhigh).value.str.val", "is_step_double = 1", "low = (unsigned char *)(*zlow).value.str.val", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1655\", 12, &(is_step_double), sizeof (is_step_double), &(type1), sizeof (type1), &(type2), sizeof (type2), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(low), sizeof (low), &(high), sizeof (high), &(return_value), sizeof (return_value), &(lstep), sizeof (lstep), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1655\", 12, &(is_step_double), sizeof (is_step_double), &(type1), sizeof (type1), &(type2), sizeof (type2), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(low), sizeof (low), &(high), sizeof (high), &(return_value), sizeof (return_value), &(lstep), sizeof (lstep), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto err;\n", "if (__is_neg(\"\", \"L1655\", 12, &(is_step_double), sizeof (is_step_double), &(type1), sizeof (type1), &(type2), sizeof (type2), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(low), sizeof (low), &(high), sizeof (high), &(return_value), sizeof (return_value), &(lstep), sizeof (lstep), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1655\", 12, &(is_step_double), sizeof (is_step_double), &(type1), sizeof (type1), &(type2), sizeof (type2), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(low), sizeof (low), &(high), sizeof (high), &(return_value), sizeof (return_value), &(lstep), sizeof (lstep), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.578712346906288]
								}, {
									"case":	2,
									"scores":	[-4.578712346906288]
								}, {
									"case":	3,
									"scores":	[-4.578712346906288]
								}, {
									"case":	4,
									"scores":	[-4.578712346906288]
								}, {
									"case":	5,
									"scores":	[-4.578712346906288]
								}, {
									"case":	6,
									"scores":	[-4.578712346906288]
								}, {
									"case":	7,
									"scores":	[-4.578712346906288]
								}, {
									"case":	8,
									"scores":	[-4.578712346906288]
								}, {
									"case":	9,
									"scores":	[-4.578712346906288]
								}, {
									"case":	10,
									"scores":	[-4.578712346906288]
								}, {
									"case":	11,
									"scores":	[-4.578712346906288]
								}, {
									"case":	12,
									"scores":	[-4.578712346906288]
								}, {
									"case":	13,
									"scores":	[-4.578712346906288]
								}, {
									"case":	14,
									"scores":	[-4.578712346906288]
								}, {
									"case":	15,
									"scores":	[-4.578712346906288]
								}, {
									"case":	16,
									"scores":	[-4.578712346906288]
								}, {
									"case":	17,
									"scores":	[-4.578712346906288]
								}, {
									"case":	18,
									"scores":	[-4.578712346906288]
								}, {
									"case":	19,
									"scores":	[-4.578712346906288]
								}, {
									"case":	20,
									"scores":	[-4.578712346906288]
								}, {
									"case":	21,
									"scores":	[-4.578712346906288]
								}, {
									"case":	22,
									"scores":	[-4.578712346906288]
								}, {
									"case":	23,
									"scores":	[-4.578712346906288]
								}, {
									"case":	24,
									"scores":	[-4.578712346906288]
								}, {
									"case":	25,
									"scores":	[-4.578712346906288]
								}, {
									"case":	26,
									"scores":	[-4.578712346906288]
								}, {
									"case":	27,
									"scores":	[-4.578712346906288]
								}, {
									"case":	28,
									"scores":	[-4.578712346906288]
								}, {
									"case":	29,
									"scores":	[-4.578712346906288]
								}, {
									"case":	30,
									"scores":	[-4.578712346906288]
								}, {
									"case":	31,
									"scores":	[-4.578712346906288]
								}, {
									"case":	32,
									"scores":	[-4.578712346906288]
								}, {
									"case":	33,
									"scores":	[-4.578712346906288]
								}, {
									"case":	34,
									"scores":	[-4.578712346906288]
								}, {
									"case":	35,
									"scores":	[-4.578712346906288]
								}, {
									"case":	36,
									"scores":	[-4.578712346906288]
								}, {
									"case":	37,
									"scores":	[-4.578712346906288]
								}, {
									"case":	38,
									"scores":	[-4.578712346906288]
								}, {
									"case":	39,
									"scores":	[-4.578712346906288]
								}, {
									"case":	40,
									"scores":	[-4.578712346906288]
								}, {
									"case":	41,
									"scores":	[-4.578712346906288]
								}, {
									"case":	42,
									"scores":	[-4.578712346906288]
								}, {
									"case":	43,
									"scores":	[-4.578712346906288]
								}, {
									"case":	44,
									"scores":	[-4.578712346906288]
								}, {
									"case":	45,
									"scores":	[-4.578712346906288]
								}, {
									"case":	46,
									"scores":	[-4.578712346906288]
								}, {
									"case":	47,
									"scores":	[-4.578712346906288]
								}, {
									"case":	48,
									"scores":	[-4.578712346906288]
								}, {
									"case":	49,
									"scores":	[-4.578712346906288]
								}, {
									"case":	50,
									"scores":	[-4.578712346906288]
								}, {
									"case":	51,
									"scores":	[-4.578712346906288]
								}, {
									"case":	52,
									"scores":	[-4.578712346906288]
								}, {
									"case":	53,
									"scores":	[-4.578712346906288]
								}, {
									"case":	54,
									"scores":	[-4.578712346906288]
								}, {
									"case":	55,
									"scores":	[-4.578712346906288]
								}, {
									"case":	56,
									"scores":	[-4.578712346906288]
								}, {
									"case":	57,
									"scores":	[-4.578712346906288]
								}, {
									"case":	58,
									"scores":	[-4.578712346906288]
								}, {
									"case":	59,
									"scores":	[-4.578712346906288]
								}, {
									"case":	60,
									"scores":	[-4.578712346906288]
								}, {
									"case":	61,
									"scores":	[-4.578712346906288]
								}, {
									"case":	62,
									"scores":	[-4.578712346906288]
								}, {
									"case":	63,
									"scores":	[-4.578712346906288]
								}, {
									"case":	64,
									"scores":	[-4.578712346906288]
								}, {
									"case":	65,
									"scores":	[-4.578712346906288]
								}, {
									"case":	66,
									"scores":	[-4.578712346906288]
								}, {
									"case":	67,
									"scores":	[-4.578712346906288]
								}, {
									"case":	68,
									"scores":	[-4.578712346906288]
								}, {
									"case":	69,
									"scores":	[-4.578712346906288]
								}, {
									"case":	70,
									"scores":	[-4.578712346906288]
								}, {
									"case":	71,
									"scores":	[-4.578712346906288]
								}, {
									"case":	72,
									"scores":	[-4.578712346906288]
								}, {
									"case":	73,
									"scores":	[-4.578712346906288]
								}, {
									"case":	74,
									"scores":	[-4.578712346906288]
								}, {
									"case":	75,
									"scores":	[-4.578712346906288]
								}, {
									"case":	76,
									"scores":	[-4.578712346906288]
								}, {
									"case":	77,
									"scores":	[-4.578712346906288]
								}, {
									"case":	78,
									"scores":	[-4.578712346906288]
								}, {
									"case":	79,
									"scores":	[-4.578712346906288]
								}, {
									"case":	80,
									"scores":	[-4.578712346906288]
								}, {
									"case":	81,
									"scores":	[-4.578712346906288]
								}, {
									"case":	82,
									"scores":	[-4.578712346906288]
								}, {
									"case":	83,
									"scores":	[-4.578712346906288]
								}, {
									"case":	84,
									"scores":	[-4.578712346906288]
								}, {
									"case":	85,
									"scores":	[-4.578712346906288]
								}, {
									"case":	86,
									"scores":	[-4.578712346906288]
								}, {
									"case":	87,
									"scores":	[-4.578712346906288]
								}, {
									"case":	88,
									"scores":	[-4.578712346906288]
								}, {
									"case":	89,
									"scores":	[-4.578712346906288]
								}, {
									"case":	90,
									"scores":	[-4.578712346906288]
								}, {
									"case":	91,
									"scores":	[-4.578712346906288]
								}, {
									"case":	92,
									"scores":	[-4.578712346906288]
								}, {
									"case":	93,
									"scores":	[-4.578712346906288]
								}, {
									"case":	94,
									"scores":	[-4.578712346906288]
								}, {
									"case":	95,
									"scores":	[-4.578712346906288]
								}, {
									"case":	96,
									"scores":	[-4.578712346906288]
								}, {
									"case":	97,
									"scores":	[-4.578712346906288]
								}, {
									"case":	98,
									"scores":	[-4.578712346906288]
								}, {
									"case":	99,
									"scores":	[-4.578712346906288]
								}, {
									"case":	100,
									"scores":	[-4.578712346906288]
								}, {
									"case":	101,
									"scores":	[-4.578712346906288]
								}, {
									"case":	102,
									"scores":	[-4.578712346906288]
								}, {
									"case":	103,
									"scores":	[-4.578712346906288]
								}, {
									"case":	104,
									"scores":	[-4.578712346906288]
								}, {
									"case":	105,
									"scores":	[-4.578712346906288]
								}, {
									"case":	106,
									"scores":	[-4.578712346906288]
								}, {
									"case":	107,
									"scores":	[-4.578712346906288]
								}, {
									"case":	108,
									"scores":	[-4.578712346906288]
								}, {
									"case":	109,
									"scores":	[-4.578712346906288]
								}, {
									"case":	110,
									"scores":	[-4.578712346906288]
								}, {
									"case":	111,
									"scores":	[-4.578712346906288]
								}, {
									"case":	112,
									"scores":	[-4.578712346906288]
								}, {
									"case":	113,
									"scores":	[-4.578712346906288]
								}, {
									"case":	114,
									"scores":	[-4.578712346906288]
								}, {
									"case":	115,
									"scores":	[-4.578712346906288]
								}, {
									"case":	116,
									"scores":	[-4.578712346906288]
								}, {
									"case":	117,
									"scores":	[-4.578712346906288]
								}, {
									"case":	118,
									"scores":	[-4.578712346906288]
								}, {
									"case":	119,
									"scores":	[-4.578712346906288]
								}, {
									"case":	120,
									"scores":	[-4.578712346906288]
								}, {
									"case":	121,
									"scores":	[-4.578712346906288]
								}, {
									"case":	122,
									"scores":	[-4.578712346906288]
								}, {
									"case":	123,
									"scores":	[-4.578712346906288]
								}, {
									"case":	124,
									"scores":	[-4.578712346906288]
								}, {
									"case":	125,
									"scores":	[-4.578712346906288]
								}, {
									"case":	126,
									"scores":	[-4.578712346906288]
								}, {
									"case":	127,
									"scores":	[-4.578712346906288]
								}, {
									"case":	128,
									"scores":	[-4.578712346906288]
								}, {
									"case":	129,
									"scores":	[-4.578712346906288]
								}, {
									"case":	130,
									"scores":	[-4.578712346906288]
								}, {
									"case":	131,
									"scores":	[-4.578712346906288]
								}, {
									"case":	132,
									"scores":	[-4.578712346906288]
								}, {
									"case":	133,
									"scores":	[-4.578712346906288]
								}, {
									"case":	134,
									"scores":	[-4.578712346906288]
								}, {
									"case":	135,
									"scores":	[-4.578712346906288]
								}, {
									"case":	136,
									"scores":	[-4.578712346906288]
								}, {
									"case":	137,
									"scores":	[-4.578712346906288]
								}, {
									"case":	138,
									"scores":	[-4.578712346906288]
								}, {
									"case":	139,
									"scores":	[-4.578712346906288]
								}, {
									"case":	140,
									"scores":	[-4.578712346906288]
								}, {
									"case":	141,
									"scores":	[-4.578712346906288]
								}, {
									"case":	142,
									"scores":	[-4.578712346906288]
								}, {
									"case":	143,
									"scores":	[-4.578712346906288]
								}, {
									"case":	144,
									"scores":	[-4.578712346906288]
								}, {
									"case":	145,
									"scores":	[-4.578712346906288]
								}, {
									"case":	146,
									"scores":	[-4.578712346906288]
								}, {
									"case":	147,
									"scores":	[-4.578712346906288]
								}, {
									"case":	148,
									"scores":	[-4.578712346906288]
								}, {
									"case":	149,
									"scores":	[-4.578712346906288]
								}, {
									"case":	150,
									"scores":	[-4.578712346906288]
								}, {
									"case":	151,
									"scores":	[-4.578712346906288]
								}, {
									"case":	152,
									"scores":	[-4.578712346906288]
								}, {
									"case":	153,
									"scores":	[-4.578712346906288]
								}, {
									"case":	154,
									"scores":	[-4.578712346906288]
								}, {
									"case":	155,
									"scores":	[-4.578712346906288]
								}, {
									"case":	156,
									"scores":	[-4.578712346906288]
								}, {
									"case":	157,
									"scores":	[-4.578712346906288]
								}, {
									"case":	158,
									"scores":	[-4.578712346906288]
								}, {
									"case":	159,
									"scores":	[-4.578712346906288]
								}, {
									"case":	160,
									"scores":	[-4.578712346906288]
								}, {
									"case":	161,
									"scores":	[-4.578712346906288]
								}, {
									"case":	162,
									"scores":	[-4.578712346906288]
								}, {
									"case":	163,
									"scores":	[-4.578712346906288]
								}, {
									"case":	164,
									"scores":	[-4.578712346906288]
								}, {
									"case":	165,
									"scores":	[-4.578712346906288]
								}, {
									"case":	166,
									"scores":	[-4.578712346906288]
								}, {
									"case":	167,
									"scores":	[-4.578712346906288]
								}, {
									"case":	168,
									"scores":	[-4.578712346906288]
								}, {
									"case":	169,
									"scores":	[-4.578712346906288]
								}, {
									"case":	170,
									"scores":	[-4.578712346906288]
								}, {
									"case":	171,
									"scores":	[-4.578712346906288]
								}, {
									"case":	172,
									"scores":	[-4.578712346906288]
								}, {
									"case":	173,
									"scores":	[-4.578712346906288]
								}, {
									"case":	174,
									"scores":	[-4.578712346906288]
								}, {
									"case":	175,
									"scores":	[-4.578712346906288]
								}, {
									"case":	176,
									"scores":	[-4.578712346906288]
								}, {
									"case":	177,
									"scores":	[-4.578712346906288]
								}, {
									"case":	178,
									"scores":	[-4.578712346906288]
								}, {
									"case":	179,
									"scores":	[-4.578712346906288]
								}, {
									"case":	180,
									"scores":	[-4.578712346906288]
								}, {
									"case":	181,
									"scores":	[-4.578712346906288]
								}, {
									"case":	182,
									"scores":	[-4.578712346906288]
								}, {
									"case":	183,
									"scores":	[-4.578712346906288]
								}, {
									"case":	184,
									"scores":	[-4.578712346906288]
								}, {
									"case":	185,
									"scores":	[-4.578712346906288]
								}, {
									"case":	186,
									"scores":	[-4.578712346906288]
								}, {
									"case":	187,
									"scores":	[-4.578712346906288]
								}, {
									"case":	188,
									"scores":	[-4.578712346906288]
								}, {
									"case":	189,
									"scores":	[-4.578712346906288]
								}, {
									"case":	190,
									"scores":	[-4.578712346906288]
								}, {
									"case":	191,
									"scores":	[-4.578712346906288]
								}, {
									"case":	192,
									"scores":	[-4.578712346906288]
								}, {
									"case":	193,
									"scores":	[-4.578712346906288]
								}, {
									"case":	194,
									"scores":	[-4.578712346906288]
								}, {
									"case":	195,
									"scores":	[-4.578712346906288]
								}, {
									"case":	196,
									"scores":	[-4.578712346906288]
								}, {
									"case":	197,
									"scores":	[-4.578712346906288]
								}, {
									"case":	198,
									"scores":	[-4.578712346906288]
								}, {
									"case":	199,
									"scores":	[-4.578712346906288]
								}, {
									"case":	200,
									"scores":	[-4.578712346906288]
								}, {
									"case":	201,
									"scores":	[-4.578712346906288]
								}, {
									"case":	202,
									"scores":	[-4.578712346906288]
								}, {
									"case":	203,
									"scores":	[-4.578712346906288]
								}, {
									"case":	204,
									"scores":	[-4.578712346906288]
								}, {
									"case":	205,
									"scores":	[-4.578712346906288]
								}, {
									"case":	206,
									"scores":	[-4.578712346906288]
								}, {
									"case":	207,
									"scores":	[-4.578712346906288]
								}, {
									"case":	208,
									"scores":	[-4.578712346906288]
								}, {
									"case":	209,
									"scores":	[-4.578712346906288]
								}, {
									"case":	210,
									"scores":	[-4.578712346906288]
								}, {
									"case":	211,
									"scores":	[-4.578712346906288]
								}, {
									"case":	212,
									"scores":	[-4.578712346906288]
								}, {
									"case":	213,
									"scores":	[-4.578712346906288]
								}, {
									"case":	214,
									"scores":	[-4.578712346906288]
								}, {
									"case":	215,
									"scores":	[-4.578712346906288]
								}, {
									"case":	216,
									"scores":	[-4.578712346906288]
								}, {
									"case":	217,
									"scores":	[-4.578712346906288]
								}, {
									"case":	218,
									"scores":	[-4.578712346906288]
								}, {
									"case":	219,
									"scores":	[-4.578712346906288]
								}, {
									"case":	220,
									"scores":	[-4.578712346906288]
								}, {
									"case":	221,
									"scores":	[-4.578712346906288]
								}, {
									"case":	222,
									"scores":	[-4.578712346906288]
								}, {
									"case":	223,
									"scores":	[-4.578712346906288]
								}, {
									"case":	224,
									"scores":	[-4.578712346906288]
								}, {
									"case":	225,
									"scores":	[-4.578712346906288]
								}, {
									"case":	226,
									"scores":	[-4.578712346906288]
								}, {
									"case":	227,
									"scores":	[-4.578712346906288]
								}, {
									"case":	228,
									"scores":	[-4.578712346906288]
								}, {
									"case":	229,
									"scores":	[-4.578712346906288]
								}, {
									"case":	230,
									"scores":	[-4.578712346906288]
								}, {
									"case":	231,
									"scores":	[-4.578712346906288]
								}, {
									"case":	232,
									"scores":	[-4.578712346906288]
								}, {
									"case":	233,
									"scores":	[-4.578712346906288]
								}, {
									"case":	234,
									"scores":	[-4.578712346906288]
								}, {
									"case":	235,
									"scores":	[-4.578712346906288]
								}, {
									"case":	236,
									"scores":	[-4.578712346906288]
								}, {
									"case":	237,
									"scores":	[-4.578712346906288]
								}, {
									"case":	238,
									"scores":	[-4.578712346906288]
								}, {
									"case":	239,
									"scores":	[-4.578712346906288]
								}, {
									"case":	240,
									"scores":	[-4.578712346906288]
								}, {
									"case":	241,
									"scores":	[-4.578712346906288]
								}, {
									"case":	242,
									"scores":	[-4.578712346906288]
								}, {
									"case":	243,
									"scores":	[-4.578712346906288]
								}, {
									"case":	244,
									"scores":	[-4.578712346906288]
								}, {
									"case":	245,
									"scores":	[-4.578712346906288]
								}, {
									"case":	246,
									"scores":	[-4.578712346906288]
								}, {
									"case":	247,
									"scores":	[-4.578712346906288]
								}, {
									"case":	248,
									"scores":	[-4.578712346906288]
								}, {
									"case":	249,
									"scores":	[-4.578712346906288]
								}, {
									"case":	250,
									"scores":	[-4.578712346906288]
								}, {
									"case":	251,
									"scores":	[-4.578712346906288]
								}, {
									"case":	252,
									"scores":	[-4.578712346906288]
								}, {
									"case":	253,
									"scores":	[-4.578712346906288]
								}, {
									"case":	254,
									"scores":	[-4.578712346906288]
								}, {
									"case":	255,
									"scores":	[-4.578712346906288]
								}, {
									"case":	256,
									"scores":	[-4.578712346906288]
								}, {
									"case":	257,
									"scores":	[-4.578712346906288]
								}, {
									"case":	258,
									"scores":	[-4.578712346906288]
								}, {
									"case":	259,
									"scores":	[-4.578712346906288]
								}, {
									"case":	260,
									"scores":	[-4.578712346906288]
								}, {
									"case":	261,
									"scores":	[-4.578712346906288]
								}, {
									"case":	262,
									"scores":	[-4.578712346906288]
								}, {
									"case":	263,
									"scores":	[-4.578712346906288]
								}, {
									"case":	264,
									"scores":	[-4.578712346906288]
								}, {
									"case":	265,
									"scores":	[-4.578712346906288]
								}, {
									"case":	266,
									"scores":	[-4.578712346906288]
								}, {
									"case":	267,
									"scores":	[-4.578712346906288]
								}, {
									"case":	268,
									"scores":	[-4.578712346906288]
								}, {
									"case":	269,
									"scores":	[-4.578712346906288]
								}, {
									"case":	270,
									"scores":	[-4.578712346906288]
								}, {
									"case":	271,
									"scores":	[-4.578712346906288]
								}, {
									"case":	272,
									"scores":	[-4.578712346906288]
								}, {
									"case":	273,
									"scores":	[-4.578712346906288]
								}, {
									"case":	274,
									"scores":	[-4.578712346906288]
								}, {
									"case":	275,
									"scores":	[-4.578712346906288]
								}, {
									"case":	276,
									"scores":	[-4.578712346906288]
								}, {
									"case":	277,
									"scores":	[-4.578712346906288]
								}, {
									"case":	278,
									"scores":	[-4.578712346906288]
								}, {
									"case":	279,
									"scores":	[-4.578712346906288]
								}, {
									"case":	280,
									"scores":	[-4.578712346906288]
								}, {
									"case":	281,
									"scores":	[-4.578712346906288]
								}, {
									"case":	282,
									"scores":	[-4.578712346906288]
								}, {
									"case":	283,
									"scores":	[-4.578712346906288]
								}, {
									"case":	284,
									"scores":	[-4.578712346906288]
								}, {
									"case":	285,
									"scores":	[-4.578712346906288]
								}, {
									"case":	286,
									"scores":	[-4.578712346906288]
								}, {
									"case":	287,
									"scores":	[-4.578712346906288]
								}, {
									"case":	288,
									"scores":	[-4.578712346906288]
								}, {
									"case":	289,
									"scores":	[-4.578712346906288]
								}, {
									"case":	290,
									"scores":	[-4.578712346906288]
								}, {
									"case":	291,
									"scores":	[-4.578712346906288]
								}, {
									"case":	292,
									"scores":	[-4.578712346906288]
								}, {
									"case":	293,
									"scores":	[-4.578712346906288]
								}, {
									"case":	294,
									"scores":	[-4.578712346906288]
								}, {
									"case":	295,
									"scores":	[-4.578712346906288]
								}, {
									"case":	296,
									"scores":	[-4.578712346906288]
								}, {
									"case":	297,
									"scores":	[-4.578712346906288]
								}, {
									"case":	298,
									"scores":	[-4.578712346906288]
								}, {
									"case":	299,
									"scores":	[-4.578712346906288]
								}, {
									"case":	300,
									"scores":	[-4.578712346906288]
								}, {
									"case":	301,
									"scores":	[-4.578712346906288]
								}, {
									"case":	302,
									"scores":	[-4.578712346906288]
								}, {
									"case":	303,
									"scores":	[-4.578712346906288]
								}, {
									"case":	304,
									"scores":	[-4.578712346906288]
								}, {
									"case":	305,
									"scores":	[-4.578712346906288]
								}, {
									"case":	306,
									"scores":	[-4.578712346906288]
								}, {
									"case":	307,
									"scores":	[-4.578712346906288]
								}, {
									"case":	308,
									"scores":	[-4.578712346906288]
								}, {
									"case":	309,
									"scores":	[-4.578712346906288]
								}, {
									"case":	310,
									"scores":	[-4.578712346906288]
								}, {
									"case":	311,
									"scores":	[-4.578712346906288]
								}, {
									"case":	312,
									"scores":	[-4.578712346906288]
								}, {
									"case":	313,
									"scores":	[-4.578712346906288]
								}, {
									"case":	314,
									"scores":	[-4.578712346906288]
								}, {
									"case":	315,
									"scores":	[-4.578712346906288]
								}, {
									"case":	316,
									"scores":	[-4.578712346906288]
								}, {
									"case":	317,
									"scores":	[-4.578712346906288]
								}, {
									"case":	318,
									"scores":	[-4.578712346906288]
								}, {
									"case":	319,
									"scores":	[-4.578712346906288]
								}, {
									"case":	320,
									"scores":	[-4.578712346906288]
								}, {
									"case":	321,
									"scores":	[-4.578712346906288]
								}, {
									"case":	322,
									"scores":	[-4.578712346906288]
								}, {
									"case":	323,
									"scores":	[-4.578712346906288]
								}, {
									"case":	324,
									"scores":	[-4.578712346906288]
								}, {
									"case":	325,
									"scores":	[-4.578712346906288]
								}, {
									"case":	326,
									"scores":	[-4.578712346906288]
								}, {
									"case":	327,
									"scores":	[-4.578712346906288]
								}, {
									"case":	328,
									"scores":	[-4.578712346906288]
								}, {
									"case":	329,
									"scores":	[-4.578712346906288]
								}, {
									"case":	330,
									"scores":	[-4.578712346906288]
								}, {
									"case":	331,
									"scores":	[-4.578712346906288]
								}, {
									"case":	332,
									"scores":	[-4.578712346906288]
								}, {
									"case":	333,
									"scores":	[-4.578712346906288]
								}, {
									"case":	334,
									"scores":	[-4.578712346906288]
								}, {
									"case":	335,
									"scores":	[-4.578712346906288]
								}, {
									"case":	336,
									"scores":	[-4.578712346906288]
								}, {
									"case":	337,
									"scores":	[-4.578712346906288]
								}, {
									"case":	338,
									"scores":	[-4.578712346906288]
								}, {
									"case":	339,
									"scores":	[-4.578712346906288]
								}, {
									"case":	340,
									"scores":	[-4.578712346906288]
								}, {
									"case":	341,
									"scores":	[-4.578712346906288]
								}, {
									"case":	342,
									"scores":	[-4.578712346906288]
								}, {
									"case":	343,
									"scores":	[-4.578712346906288]
								}, {
									"case":	344,
									"scores":	[-4.578712346906288]
								}, {
									"case":	345,
									"scores":	[-4.578712346906288]
								}, {
									"case":	346,
									"scores":	[-4.578712346906288]
								}, {
									"case":	347,
									"scores":	[-4.578712346906288]
								}, {
									"case":	348,
									"scores":	[-4.578712346906288]
								}, {
									"case":	349,
									"scores":	[-4.578712346906288]
								}, {
									"case":	350,
									"scores":	[-4.578712346906288]
								}, {
									"case":	351,
									"scores":	[-4.578712346906288]
								}, {
									"case":	352,
									"scores":	[-4.578712346906288]
								}, {
									"case":	353,
									"scores":	[-4.578712346906288]
								}, {
									"case":	354,
									"scores":	[-4.578712346906288]
								}, {
									"case":	355,
									"scores":	[-4.578712346906288]
								}, {
									"case":	356,
									"scores":	[-4.578712346906288]
								}, {
									"case":	357,
									"scores":	[-4.578712346906288]
								}, {
									"case":	358,
									"scores":	[-4.578712346906288]
								}, {
									"case":	359,
									"scores":	[-4.578712346906288]
								}, {
									"case":	360,
									"scores":	[-4.578712346906288]
								}, {
									"case":	361,
									"scores":	[-4.578712346906288]
								}, {
									"case":	362,
									"scores":	[-4.578712346906288]
								}, {
									"case":	363,
									"scores":	[-4.578712346906288]
								}, {
									"case":	364,
									"scores":	[-4.578712346906288]
								}, {
									"case":	365,
									"scores":	[-4.578712346906288]
								}, {
									"case":	366,
									"scores":	[-4.578712346906288]
								}, {
									"case":	367,
									"scores":	[-4.578712346906288]
								}, {
									"case":	368,
									"scores":	[-4.578712346906288]
								}, {
									"case":	369,
									"scores":	[-4.578712346906288]
								}, {
									"case":	370,
									"scores":	[-4.578712346906288]
								}, {
									"case":	371,
									"scores":	[-4.578712346906288]
								}, {
									"case":	372,
									"scores":	[-4.578712346906288]
								}, {
									"case":	373,
									"scores":	[-4.578712346906288]
								}, {
									"case":	374,
									"scores":	[-4.578712346906288]
								}, {
									"case":	375,
									"scores":	[-4.578712346906288]
								}, {
									"case":	376,
									"scores":	[-4.578712346906288]
								}, {
									"case":	377,
									"scores":	[-4.578712346906288]
								}, {
									"case":	378,
									"scores":	[-4.578712346906288]
								}, {
									"case":	379,
									"scores":	[-4.578712346906288]
								}, {
									"case":	380,
									"scores":	[-5.8106082429062873, -5.8106082429062873, -5.8106082429062873, -6.0566471567062878, -6.0566471567062878, -6.021497359906288, -6.021497359906288, -6.0937475567062878, -5.8106082429062873, -5.8106082429062873, -6.0566471567062878, -5.8477086429062872]
								}, {
									"case":	381,
									"scores":	[-5.8106082429062873, -5.8106082429062873, -5.8106082429062873, -6.0566471567062878, -6.0566471567062878, -6.021497359906288, -6.021497359906288, -6.0937475567062878, -5.8106082429062873, -5.8106082429062873, -6.0566471567062878, -5.8477086429062872]
								}, {
									"case":	382,
									"scores":	[-5.8106082429062873, -5.8106082429062873, -5.8106082429062873, -6.0566471567062878, -6.0566471567062878, -6.021497359906288, -6.021497359906288, -6.0937475567062878, -5.8106082429062873, -5.8106082429062873, -6.0566471567062878, -5.8477086429062872]
								}, {
									"case":	383,
									"scores":	[-5.8116082429062885, -5.8116082429062885, -5.8116082429062885, -6.0576471567062882, -6.0576471567062882, -6.0224973599062883, -6.0224973599062883, -6.0947475567062881, -5.8116082429062885, -5.8116082429062885, -6.0576471567062882, -5.8487086429062884]
								}]
						}, {
							"switch":	30,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1655,
							"begin_column":	4,
							"end_line":	1655,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L1655\", 12, &(is_step_double), sizeof (is_step_double), &(type1), sizeof (type1), &(type2), sizeof (type2), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(low), sizeof (low), &(high), sizeof (high), &(return_value), sizeof (return_value), &(lstep), sizeof (lstep), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto double_str;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.1556443169062884, -5.1556443169062884, -5.1556443169062884, -5.9135324169062882, -5.9135324169062882, -5.62490431690629, -5.62490431690629, -6.2078832169062883, -5.1556443169062884, -5.1556443169062884, -5.9135324169062882, -5.4499951169062877]
								}]
						}]
				}, {
					"line":	1653,
					"switches":	[{
							"switch":	27,
							"types":	[[], [], [], [], [380, 381, 382, 383], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [], [], [], [332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379], [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331], [], [], [], [], [], []],
							"begin_line":	1654,
							"begin_column":	1,
							"end_line":	1654,
							"end_column":	1,
							"patch_codes":	["memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset(&(zhigh)->is_ref__gc, 0, sizeof (*(&(zhigh)->is_ref__gc)))", "memset(&(zhigh)->refcount__gc, 0, sizeof (*(&(zhigh)->refcount__gc)))", "memset(&(zhigh)->type, 0, sizeof (*(&(zhigh)->type)))", "memset(&(zhigh)->value, 0, sizeof (*(&(zhigh)->value)))", "memset(&(zlow)->is_ref__gc, 0, sizeof (*(&(zlow)->is_ref__gc)))", "memset(&(zlow)->refcount__gc, 0, sizeof (*(&(zlow)->refcount__gc)))", "memset(&(zlow)->type, 0, sizeof (*(&(zlow)->type)))", "memset(&(zlow)->value, 0, sizeof (*(&(zlow)->value)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_null(*(return_value_ptr))", "add_next_index_stringl((return_value), (const char *)low, 1, 1)", "add_next_index_stringl((this_ptr), (const char *)low, 1, 1)", "add_next_index_stringl((zhigh), (const char *)low, 1, 1)", "add_next_index_stringl((zlow), (const char *)low, 1, 1)", "add_next_index_stringl((zstep), (const char *)low, 1, 1)", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "err = (type1)", "err = (type2)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "high = (high)", "high = (low)", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "is_step_double = (type1)", "is_step_double = (type2)", "low = (high)", "low = (low)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (step)", "type1 = (-1)", "type1 = (0)", "type1 = (1)", "type1 = (2)", "type1 = (255)", "type1 = (3)", "type1 = (6)", "type1 = (err)", "type1 = (ht)", "type1 = (is_step_double)", "type1 = (return_value_used)", "type1 = (type1)", "type1 = (type2)", "type1 = is_numeric_string((*(return_value)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(this_ptr)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(zhigh)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(zlow)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*(zstep)).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(return_value)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(this_ptr)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(zhigh)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(zlow)).value.str.len, ((void *)0), ((void *)0), 0)", "type1 = is_numeric_string((*zlow).value.str.val, (*(zstep)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = (-1)", "type2 = (0)", "type2 = (1)", "type2 = (2)", "type2 = (255)", "type2 = (3)", "type2 = (6)", "type2 = (err)", "type2 = (ht)", "type2 = (is_step_double)", "type2 = (return_value_used)", "type2 = (type1)", "type2 = (type2)", "type2 = is_numeric_string((*(return_value)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(this_ptr)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(zhigh)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(zlow)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*(zstep)).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(return_value)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(this_ptr)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(zhigh)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(zlow)).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*(zstep)).value.str.len, ((void *)0), ((void *)0), 0)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "add_next_index_stringl(return_value, (const char *)low, 1, 1)", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "high = (unsigned char *)(*zhigh).value.str.val", "is_step_double = 1", "low = (unsigned char *)(*zlow).value.str.val", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0)", "type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0)", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1654\", 12, &(is_step_double), sizeof (is_step_double), &(type1), sizeof (type1), &(type2), sizeof (type2), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(low), sizeof (low), &(high), sizeof (high), &(return_value), sizeof (return_value), &(lstep), sizeof (lstep), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1654\", 12, &(is_step_double), sizeof (is_step_double), &(type1), sizeof (type1), &(type2), sizeof (type2), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(low), sizeof (low), &(high), sizeof (high), &(return_value), sizeof (return_value), &(lstep), sizeof (lstep), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto err;\n", "if (__is_neg(\"\", \"L1654\", 12, &(is_step_double), sizeof (is_step_double), &(type1), sizeof (type1), &(type2), sizeof (type2), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(low), sizeof (low), &(high), sizeof (high), &(return_value), sizeof (return_value), &(lstep), sizeof (lstep), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1654\", 12, &(is_step_double), sizeof (is_step_double), &(type1), sizeof (type1), &(type2), sizeof (type2), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(low), sizeof (low), &(high), sizeof (high), &(return_value), sizeof (return_value), &(lstep), sizeof (lstep), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.76060473719839]
								}, {
									"case":	2,
									"scores":	[-6.76060473719839]
								}, {
									"case":	3,
									"scores":	[-6.76060473719839]
								}, {
									"case":	4,
									"scores":	[-6.76060473719839]
								}, {
									"case":	5,
									"scores":	[-6.76060473719839]
								}, {
									"case":	6,
									"scores":	[-6.76060473719839]
								}, {
									"case":	7,
									"scores":	[-6.76060473719839]
								}, {
									"case":	8,
									"scores":	[-6.76060473719839]
								}, {
									"case":	9,
									"scores":	[-6.76060473719839]
								}, {
									"case":	10,
									"scores":	[-6.76060473719839]
								}, {
									"case":	11,
									"scores":	[-6.76060473719839]
								}, {
									"case":	12,
									"scores":	[-6.76060473719839]
								}, {
									"case":	13,
									"scores":	[-6.76060473719839]
								}, {
									"case":	14,
									"scores":	[-6.76060473719839]
								}, {
									"case":	15,
									"scores":	[-6.76060473719839]
								}, {
									"case":	16,
									"scores":	[-6.76060473719839]
								}, {
									"case":	17,
									"scores":	[-6.76060473719839]
								}, {
									"case":	18,
									"scores":	[-6.76060473719839]
								}, {
									"case":	19,
									"scores":	[-6.76060473719839]
								}, {
									"case":	20,
									"scores":	[-6.76060473719839]
								}, {
									"case":	21,
									"scores":	[-6.76060473719839]
								}, {
									"case":	22,
									"scores":	[-6.76060473719839]
								}, {
									"case":	23,
									"scores":	[-6.76060473719839]
								}, {
									"case":	24,
									"scores":	[-6.76060473719839]
								}, {
									"case":	25,
									"scores":	[-6.76060473719839]
								}, {
									"case":	26,
									"scores":	[-6.76060473719839]
								}, {
									"case":	27,
									"scores":	[-6.76060473719839]
								}, {
									"case":	28,
									"scores":	[-6.76060473719839]
								}, {
									"case":	29,
									"scores":	[-6.76060473719839]
								}, {
									"case":	30,
									"scores":	[-6.76060473719839]
								}, {
									"case":	31,
									"scores":	[-6.76060473719839]
								}, {
									"case":	32,
									"scores":	[-6.76060473719839]
								}, {
									"case":	33,
									"scores":	[-6.76060473719839]
								}, {
									"case":	34,
									"scores":	[-6.76060473719839]
								}, {
									"case":	35,
									"scores":	[-6.76060473719839]
								}, {
									"case":	36,
									"scores":	[-6.76060473719839]
								}, {
									"case":	37,
									"scores":	[-6.76060473719839]
								}, {
									"case":	38,
									"scores":	[-6.76060473719839]
								}, {
									"case":	39,
									"scores":	[-6.76060473719839]
								}, {
									"case":	40,
									"scores":	[-6.76060473719839]
								}, {
									"case":	41,
									"scores":	[-6.76060473719839]
								}, {
									"case":	42,
									"scores":	[-6.76060473719839]
								}, {
									"case":	43,
									"scores":	[-6.76060473719839]
								}, {
									"case":	44,
									"scores":	[-6.76060473719839]
								}, {
									"case":	45,
									"scores":	[-6.76060473719839]
								}, {
									"case":	46,
									"scores":	[-6.76060473719839]
								}, {
									"case":	47,
									"scores":	[-6.76060473719839]
								}, {
									"case":	48,
									"scores":	[-6.76060473719839]
								}, {
									"case":	49,
									"scores":	[-6.76060473719839]
								}, {
									"case":	50,
									"scores":	[-6.76060473719839]
								}, {
									"case":	51,
									"scores":	[-6.76060473719839]
								}, {
									"case":	52,
									"scores":	[-6.76060473719839]
								}, {
									"case":	53,
									"scores":	[-6.76060473719839]
								}, {
									"case":	54,
									"scores":	[-6.76060473719839]
								}, {
									"case":	55,
									"scores":	[-6.76060473719839]
								}, {
									"case":	56,
									"scores":	[-6.76060473719839]
								}, {
									"case":	57,
									"scores":	[-6.76060473719839]
								}, {
									"case":	58,
									"scores":	[-6.76060473719839]
								}, {
									"case":	59,
									"scores":	[-6.76060473719839]
								}, {
									"case":	60,
									"scores":	[-6.76060473719839]
								}, {
									"case":	61,
									"scores":	[-6.76060473719839]
								}, {
									"case":	62,
									"scores":	[-6.76060473719839]
								}, {
									"case":	63,
									"scores":	[-6.76060473719839]
								}, {
									"case":	64,
									"scores":	[-6.76060473719839]
								}, {
									"case":	65,
									"scores":	[-6.76060473719839]
								}, {
									"case":	66,
									"scores":	[-6.76060473719839]
								}, {
									"case":	67,
									"scores":	[-6.76060473719839]
								}, {
									"case":	68,
									"scores":	[-6.76060473719839]
								}, {
									"case":	69,
									"scores":	[-6.76060473719839]
								}, {
									"case":	70,
									"scores":	[-6.76060473719839]
								}, {
									"case":	71,
									"scores":	[-6.76060473719839]
								}, {
									"case":	72,
									"scores":	[-6.76060473719839]
								}, {
									"case":	73,
									"scores":	[-6.76060473719839]
								}, {
									"case":	74,
									"scores":	[-6.76060473719839]
								}, {
									"case":	75,
									"scores":	[-6.76060473719839]
								}, {
									"case":	76,
									"scores":	[-6.76060473719839]
								}, {
									"case":	77,
									"scores":	[-6.76060473719839]
								}, {
									"case":	78,
									"scores":	[-6.76060473719839]
								}, {
									"case":	79,
									"scores":	[-6.76060473719839]
								}, {
									"case":	80,
									"scores":	[-6.76060473719839]
								}, {
									"case":	81,
									"scores":	[-6.76060473719839]
								}, {
									"case":	82,
									"scores":	[-6.76060473719839]
								}, {
									"case":	83,
									"scores":	[-6.76060473719839]
								}, {
									"case":	84,
									"scores":	[-6.76060473719839]
								}, {
									"case":	85,
									"scores":	[-6.76060473719839]
								}, {
									"case":	86,
									"scores":	[-6.76060473719839]
								}, {
									"case":	87,
									"scores":	[-6.76060473719839]
								}, {
									"case":	88,
									"scores":	[-6.76060473719839]
								}, {
									"case":	89,
									"scores":	[-6.76060473719839]
								}, {
									"case":	90,
									"scores":	[-6.76060473719839]
								}, {
									"case":	91,
									"scores":	[-6.76060473719839]
								}, {
									"case":	92,
									"scores":	[-6.76060473719839]
								}, {
									"case":	93,
									"scores":	[-6.76060473719839]
								}, {
									"case":	94,
									"scores":	[-6.76060473719839]
								}, {
									"case":	95,
									"scores":	[-6.76060473719839]
								}, {
									"case":	96,
									"scores":	[-6.76060473719839]
								}, {
									"case":	97,
									"scores":	[-6.76060473719839]
								}, {
									"case":	98,
									"scores":	[-6.76060473719839]
								}, {
									"case":	99,
									"scores":	[-6.76060473719839]
								}, {
									"case":	100,
									"scores":	[-6.76060473719839]
								}, {
									"case":	101,
									"scores":	[-6.76060473719839]
								}, {
									"case":	102,
									"scores":	[-6.76060473719839]
								}, {
									"case":	103,
									"scores":	[-6.76060473719839]
								}, {
									"case":	104,
									"scores":	[-6.76060473719839]
								}, {
									"case":	105,
									"scores":	[-6.76060473719839]
								}, {
									"case":	106,
									"scores":	[-6.76060473719839]
								}, {
									"case":	107,
									"scores":	[-6.76060473719839]
								}, {
									"case":	108,
									"scores":	[-6.76060473719839]
								}, {
									"case":	109,
									"scores":	[-6.76060473719839]
								}, {
									"case":	110,
									"scores":	[-6.76060473719839]
								}, {
									"case":	111,
									"scores":	[-6.76060473719839]
								}, {
									"case":	112,
									"scores":	[-6.76060473719839]
								}, {
									"case":	113,
									"scores":	[-6.76060473719839]
								}, {
									"case":	114,
									"scores":	[-6.76060473719839]
								}, {
									"case":	115,
									"scores":	[-6.76060473719839]
								}, {
									"case":	116,
									"scores":	[-6.76060473719839]
								}, {
									"case":	117,
									"scores":	[-6.76060473719839]
								}, {
									"case":	118,
									"scores":	[-6.76060473719839]
								}, {
									"case":	119,
									"scores":	[-6.76060473719839]
								}, {
									"case":	120,
									"scores":	[-6.76060473719839]
								}, {
									"case":	121,
									"scores":	[-6.76060473719839]
								}, {
									"case":	122,
									"scores":	[-6.76060473719839]
								}, {
									"case":	123,
									"scores":	[-6.76060473719839]
								}, {
									"case":	124,
									"scores":	[-6.76060473719839]
								}, {
									"case":	125,
									"scores":	[-6.76060473719839]
								}, {
									"case":	126,
									"scores":	[-6.76060473719839]
								}, {
									"case":	127,
									"scores":	[-6.76060473719839]
								}, {
									"case":	128,
									"scores":	[-6.76060473719839]
								}, {
									"case":	129,
									"scores":	[-6.76060473719839]
								}, {
									"case":	130,
									"scores":	[-6.76060473719839]
								}, {
									"case":	131,
									"scores":	[-6.76060473719839]
								}, {
									"case":	132,
									"scores":	[-6.76060473719839]
								}, {
									"case":	133,
									"scores":	[-6.76060473719839]
								}, {
									"case":	134,
									"scores":	[-6.76060473719839]
								}, {
									"case":	135,
									"scores":	[-6.76060473719839]
								}, {
									"case":	136,
									"scores":	[-6.76060473719839]
								}, {
									"case":	137,
									"scores":	[-6.76060473719839]
								}, {
									"case":	138,
									"scores":	[-6.76060473719839]
								}, {
									"case":	139,
									"scores":	[-6.76060473719839]
								}, {
									"case":	140,
									"scores":	[-6.76060473719839]
								}, {
									"case":	141,
									"scores":	[-6.76060473719839]
								}, {
									"case":	142,
									"scores":	[-6.76060473719839]
								}, {
									"case":	143,
									"scores":	[-6.76060473719839]
								}, {
									"case":	144,
									"scores":	[-6.76060473719839]
								}, {
									"case":	145,
									"scores":	[-6.76060473719839]
								}, {
									"case":	146,
									"scores":	[-6.76060473719839]
								}, {
									"case":	147,
									"scores":	[-6.76060473719839]
								}, {
									"case":	148,
									"scores":	[-6.76060473719839]
								}, {
									"case":	149,
									"scores":	[-6.76060473719839]
								}, {
									"case":	150,
									"scores":	[-6.76060473719839]
								}, {
									"case":	151,
									"scores":	[-6.76060473719839]
								}, {
									"case":	152,
									"scores":	[-6.76060473719839]
								}, {
									"case":	153,
									"scores":	[-6.76060473719839]
								}, {
									"case":	154,
									"scores":	[-6.76060473719839]
								}, {
									"case":	155,
									"scores":	[-6.76060473719839]
								}, {
									"case":	156,
									"scores":	[-6.76060473719839]
								}, {
									"case":	157,
									"scores":	[-6.76060473719839]
								}, {
									"case":	158,
									"scores":	[-6.76060473719839]
								}, {
									"case":	159,
									"scores":	[-6.76060473719839]
								}, {
									"case":	160,
									"scores":	[-6.76060473719839]
								}, {
									"case":	161,
									"scores":	[-6.76060473719839]
								}, {
									"case":	162,
									"scores":	[-6.76060473719839]
								}, {
									"case":	163,
									"scores":	[-6.76060473719839]
								}, {
									"case":	164,
									"scores":	[-6.76060473719839]
								}, {
									"case":	165,
									"scores":	[-6.76060473719839]
								}, {
									"case":	166,
									"scores":	[-6.76060473719839]
								}, {
									"case":	167,
									"scores":	[-6.76060473719839]
								}, {
									"case":	168,
									"scores":	[-6.76060473719839]
								}, {
									"case":	169,
									"scores":	[-6.76060473719839]
								}, {
									"case":	170,
									"scores":	[-6.76060473719839]
								}, {
									"case":	171,
									"scores":	[-6.76060473719839]
								}, {
									"case":	172,
									"scores":	[-6.76060473719839]
								}, {
									"case":	173,
									"scores":	[-6.76060473719839]
								}, {
									"case":	174,
									"scores":	[-6.76060473719839]
								}, {
									"case":	175,
									"scores":	[-6.76060473719839]
								}, {
									"case":	176,
									"scores":	[-6.76060473719839]
								}, {
									"case":	177,
									"scores":	[-6.76060473719839]
								}, {
									"case":	178,
									"scores":	[-6.76060473719839]
								}, {
									"case":	179,
									"scores":	[-6.76060473719839]
								}, {
									"case":	180,
									"scores":	[-6.76060473719839]
								}, {
									"case":	181,
									"scores":	[-6.76060473719839]
								}, {
									"case":	182,
									"scores":	[-6.76060473719839]
								}, {
									"case":	183,
									"scores":	[-6.76060473719839]
								}, {
									"case":	184,
									"scores":	[-6.76060473719839]
								}, {
									"case":	185,
									"scores":	[-6.76060473719839]
								}, {
									"case":	186,
									"scores":	[-6.76060473719839]
								}, {
									"case":	187,
									"scores":	[-6.76060473719839]
								}, {
									"case":	188,
									"scores":	[-6.76060473719839]
								}, {
									"case":	189,
									"scores":	[-6.76060473719839]
								}, {
									"case":	190,
									"scores":	[-6.76060473719839]
								}, {
									"case":	191,
									"scores":	[-6.76060473719839]
								}, {
									"case":	192,
									"scores":	[-6.76060473719839]
								}, {
									"case":	193,
									"scores":	[-6.76060473719839]
								}, {
									"case":	194,
									"scores":	[-6.76060473719839]
								}, {
									"case":	195,
									"scores":	[-6.76060473719839]
								}, {
									"case":	196,
									"scores":	[-6.76060473719839]
								}, {
									"case":	197,
									"scores":	[-6.76060473719839]
								}, {
									"case":	198,
									"scores":	[-6.76060473719839]
								}, {
									"case":	199,
									"scores":	[-6.76060473719839]
								}, {
									"case":	200,
									"scores":	[-6.76060473719839]
								}, {
									"case":	201,
									"scores":	[-6.76060473719839]
								}, {
									"case":	202,
									"scores":	[-6.76060473719839]
								}, {
									"case":	203,
									"scores":	[-6.76060473719839]
								}, {
									"case":	204,
									"scores":	[-6.76060473719839]
								}, {
									"case":	205,
									"scores":	[-6.76060473719839]
								}, {
									"case":	206,
									"scores":	[-6.76060473719839]
								}, {
									"case":	207,
									"scores":	[-6.76060473719839]
								}, {
									"case":	208,
									"scores":	[-6.76060473719839]
								}, {
									"case":	209,
									"scores":	[-6.76060473719839]
								}, {
									"case":	210,
									"scores":	[-6.76060473719839]
								}, {
									"case":	211,
									"scores":	[-6.76060473719839]
								}, {
									"case":	212,
									"scores":	[-6.76060473719839]
								}, {
									"case":	213,
									"scores":	[-6.76060473719839]
								}, {
									"case":	214,
									"scores":	[-6.76060473719839]
								}, {
									"case":	215,
									"scores":	[-6.76060473719839]
								}, {
									"case":	216,
									"scores":	[-6.76060473719839]
								}, {
									"case":	217,
									"scores":	[-6.76060473719839]
								}, {
									"case":	218,
									"scores":	[-6.76060473719839]
								}, {
									"case":	219,
									"scores":	[-6.76060473719839]
								}, {
									"case":	220,
									"scores":	[-6.76060473719839]
								}, {
									"case":	221,
									"scores":	[-6.76060473719839]
								}, {
									"case":	222,
									"scores":	[-6.76060473719839]
								}, {
									"case":	223,
									"scores":	[-6.76060473719839]
								}, {
									"case":	224,
									"scores":	[-6.76060473719839]
								}, {
									"case":	225,
									"scores":	[-6.76060473719839]
								}, {
									"case":	226,
									"scores":	[-6.76060473719839]
								}, {
									"case":	227,
									"scores":	[-6.76060473719839]
								}, {
									"case":	228,
									"scores":	[-6.76060473719839]
								}, {
									"case":	229,
									"scores":	[-6.76060473719839]
								}, {
									"case":	230,
									"scores":	[-6.76060473719839]
								}, {
									"case":	231,
									"scores":	[-6.76060473719839]
								}, {
									"case":	232,
									"scores":	[-6.76060473719839]
								}, {
									"case":	233,
									"scores":	[-6.76060473719839]
								}, {
									"case":	234,
									"scores":	[-6.76060473719839]
								}, {
									"case":	235,
									"scores":	[-6.76060473719839]
								}, {
									"case":	236,
									"scores":	[-6.76060473719839]
								}, {
									"case":	237,
									"scores":	[-6.76060473719839]
								}, {
									"case":	238,
									"scores":	[-6.76060473719839]
								}, {
									"case":	239,
									"scores":	[-6.76060473719839]
								}, {
									"case":	240,
									"scores":	[-6.76060473719839]
								}, {
									"case":	241,
									"scores":	[-6.76060473719839]
								}, {
									"case":	242,
									"scores":	[-6.76060473719839]
								}, {
									"case":	243,
									"scores":	[-6.76060473719839]
								}, {
									"case":	244,
									"scores":	[-6.76060473719839]
								}, {
									"case":	245,
									"scores":	[-6.76060473719839]
								}, {
									"case":	246,
									"scores":	[-6.76060473719839]
								}, {
									"case":	247,
									"scores":	[-6.76060473719839]
								}, {
									"case":	248,
									"scores":	[-6.76060473719839]
								}, {
									"case":	249,
									"scores":	[-6.76060473719839]
								}, {
									"case":	250,
									"scores":	[-6.76060473719839]
								}, {
									"case":	251,
									"scores":	[-6.76060473719839]
								}, {
									"case":	252,
									"scores":	[-6.76060473719839]
								}, {
									"case":	253,
									"scores":	[-6.76060473719839]
								}, {
									"case":	254,
									"scores":	[-6.76060473719839]
								}, {
									"case":	255,
									"scores":	[-6.76060473719839]
								}, {
									"case":	256,
									"scores":	[-6.76060473719839]
								}, {
									"case":	257,
									"scores":	[-6.76060473719839]
								}, {
									"case":	258,
									"scores":	[-6.76060473719839]
								}, {
									"case":	259,
									"scores":	[-6.76060473719839]
								}, {
									"case":	260,
									"scores":	[-6.76060473719839]
								}, {
									"case":	261,
									"scores":	[-6.76060473719839]
								}, {
									"case":	262,
									"scores":	[-6.76060473719839]
								}, {
									"case":	263,
									"scores":	[-6.76060473719839]
								}, {
									"case":	264,
									"scores":	[-6.76060473719839]
								}, {
									"case":	265,
									"scores":	[-6.76060473719839]
								}, {
									"case":	266,
									"scores":	[-6.76060473719839]
								}, {
									"case":	267,
									"scores":	[-6.76060473719839]
								}, {
									"case":	268,
									"scores":	[-6.76060473719839]
								}, {
									"case":	269,
									"scores":	[-6.76060473719839]
								}, {
									"case":	270,
									"scores":	[-6.76060473719839]
								}, {
									"case":	271,
									"scores":	[-6.76060473719839]
								}, {
									"case":	272,
									"scores":	[-6.76060473719839]
								}, {
									"case":	273,
									"scores":	[-6.76060473719839]
								}, {
									"case":	274,
									"scores":	[-6.76060473719839]
								}, {
									"case":	275,
									"scores":	[-6.76060473719839]
								}, {
									"case":	276,
									"scores":	[-6.76060473719839]
								}, {
									"case":	277,
									"scores":	[-6.76060473719839]
								}, {
									"case":	278,
									"scores":	[-6.76060473719839]
								}, {
									"case":	279,
									"scores":	[-6.76060473719839]
								}, {
									"case":	280,
									"scores":	[-6.76060473719839]
								}, {
									"case":	281,
									"scores":	[-6.76060473719839]
								}, {
									"case":	282,
									"scores":	[-6.76060473719839]
								}, {
									"case":	283,
									"scores":	[-6.76060473719839]
								}, {
									"case":	284,
									"scores":	[-6.76060473719839]
								}, {
									"case":	285,
									"scores":	[-6.76060473719839]
								}, {
									"case":	286,
									"scores":	[-6.76060473719839]
								}, {
									"case":	287,
									"scores":	[-6.76060473719839]
								}, {
									"case":	288,
									"scores":	[-6.76060473719839]
								}, {
									"case":	289,
									"scores":	[-6.76060473719839]
								}, {
									"case":	290,
									"scores":	[-6.76060473719839]
								}, {
									"case":	291,
									"scores":	[-6.76060473719839]
								}, {
									"case":	292,
									"scores":	[-6.76060473719839]
								}, {
									"case":	293,
									"scores":	[-6.76060473719839]
								}, {
									"case":	294,
									"scores":	[-6.76060473719839]
								}, {
									"case":	295,
									"scores":	[-6.76060473719839]
								}, {
									"case":	296,
									"scores":	[-6.76060473719839]
								}, {
									"case":	297,
									"scores":	[-6.76060473719839]
								}, {
									"case":	298,
									"scores":	[-6.76060473719839]
								}, {
									"case":	299,
									"scores":	[-6.76060473719839]
								}, {
									"case":	300,
									"scores":	[-6.76060473719839]
								}, {
									"case":	301,
									"scores":	[-6.76060473719839]
								}, {
									"case":	302,
									"scores":	[-6.76060473719839]
								}, {
									"case":	303,
									"scores":	[-6.76060473719839]
								}, {
									"case":	304,
									"scores":	[-6.76060473719839]
								}, {
									"case":	305,
									"scores":	[-6.76060473719839]
								}, {
									"case":	306,
									"scores":	[-6.76060473719839]
								}, {
									"case":	307,
									"scores":	[-6.76060473719839]
								}, {
									"case":	308,
									"scores":	[-6.76060473719839]
								}, {
									"case":	309,
									"scores":	[-6.76060473719839]
								}, {
									"case":	310,
									"scores":	[-6.76060473719839]
								}, {
									"case":	311,
									"scores":	[-6.76060473719839]
								}, {
									"case":	312,
									"scores":	[-6.76060473719839]
								}, {
									"case":	313,
									"scores":	[-6.76060473719839]
								}, {
									"case":	314,
									"scores":	[-6.76060473719839]
								}, {
									"case":	315,
									"scores":	[-6.76060473719839]
								}, {
									"case":	316,
									"scores":	[-6.76060473719839]
								}, {
									"case":	317,
									"scores":	[-6.76060473719839]
								}, {
									"case":	318,
									"scores":	[-6.76060473719839]
								}, {
									"case":	319,
									"scores":	[-6.76060473719839]
								}, {
									"case":	320,
									"scores":	[-6.76060473719839]
								}, {
									"case":	321,
									"scores":	[-6.76060473719839]
								}, {
									"case":	322,
									"scores":	[-6.76060473719839]
								}, {
									"case":	323,
									"scores":	[-6.76060473719839]
								}, {
									"case":	324,
									"scores":	[-6.76060473719839]
								}, {
									"case":	325,
									"scores":	[-6.76060473719839]
								}, {
									"case":	326,
									"scores":	[-6.76060473719839]
								}, {
									"case":	327,
									"scores":	[-6.76060473719839]
								}, {
									"case":	328,
									"scores":	[-6.76060473719839]
								}, {
									"case":	329,
									"scores":	[-6.76060473719839]
								}, {
									"case":	330,
									"scores":	[-6.76060473719839]
								}, {
									"case":	331,
									"scores":	[-6.76060473719839]
								}, {
									"case":	332,
									"scores":	[-6.76060473719839]
								}, {
									"case":	333,
									"scores":	[-6.76060473719839]
								}, {
									"case":	334,
									"scores":	[-6.76060473719839]
								}, {
									"case":	335,
									"scores":	[-6.76060473719839]
								}, {
									"case":	336,
									"scores":	[-6.76060473719839]
								}, {
									"case":	337,
									"scores":	[-6.76060473719839]
								}, {
									"case":	338,
									"scores":	[-6.76060473719839]
								}, {
									"case":	339,
									"scores":	[-6.76060473719839]
								}, {
									"case":	340,
									"scores":	[-6.76060473719839]
								}, {
									"case":	341,
									"scores":	[-6.76060473719839]
								}, {
									"case":	342,
									"scores":	[-6.76060473719839]
								}, {
									"case":	343,
									"scores":	[-6.76060473719839]
								}, {
									"case":	344,
									"scores":	[-6.76060473719839]
								}, {
									"case":	345,
									"scores":	[-6.76060473719839]
								}, {
									"case":	346,
									"scores":	[-6.76060473719839]
								}, {
									"case":	347,
									"scores":	[-6.76060473719839]
								}, {
									"case":	348,
									"scores":	[-6.76060473719839]
								}, {
									"case":	349,
									"scores":	[-6.76060473719839]
								}, {
									"case":	350,
									"scores":	[-6.76060473719839]
								}, {
									"case":	351,
									"scores":	[-6.76060473719839]
								}, {
									"case":	352,
									"scores":	[-6.76060473719839]
								}, {
									"case":	353,
									"scores":	[-6.76060473719839]
								}, {
									"case":	354,
									"scores":	[-6.76060473719839]
								}, {
									"case":	355,
									"scores":	[-6.76060473719839]
								}, {
									"case":	356,
									"scores":	[-6.76060473719839]
								}, {
									"case":	357,
									"scores":	[-6.76060473719839]
								}, {
									"case":	358,
									"scores":	[-6.76060473719839]
								}, {
									"case":	359,
									"scores":	[-6.76060473719839]
								}, {
									"case":	360,
									"scores":	[-6.76060473719839]
								}, {
									"case":	361,
									"scores":	[-6.76060473719839]
								}, {
									"case":	362,
									"scores":	[-6.76060473719839]
								}, {
									"case":	363,
									"scores":	[-6.76060473719839]
								}, {
									"case":	364,
									"scores":	[-6.76060473719839]
								}, {
									"case":	365,
									"scores":	[-6.76060473719839]
								}, {
									"case":	366,
									"scores":	[-6.76060473719839]
								}, {
									"case":	367,
									"scores":	[-6.76060473719839]
								}, {
									"case":	368,
									"scores":	[-6.76060473719839]
								}, {
									"case":	369,
									"scores":	[-6.76060473719839]
								}, {
									"case":	370,
									"scores":	[-6.76060473719839]
								}, {
									"case":	371,
									"scores":	[-6.76060473719839]
								}, {
									"case":	372,
									"scores":	[-6.76060473719839]
								}, {
									"case":	373,
									"scores":	[-6.76060473719839]
								}, {
									"case":	374,
									"scores":	[-6.76060473719839]
								}, {
									"case":	375,
									"scores":	[-6.76060473719839]
								}, {
									"case":	376,
									"scores":	[-6.76060473719839]
								}, {
									"case":	377,
									"scores":	[-6.76060473719839]
								}, {
									"case":	378,
									"scores":	[-6.76060473719839]
								}, {
									"case":	379,
									"scores":	[-6.76060473719839]
								}, {
									"case":	380,
									"scores":	[-10.319804633198389, -8.48181277319839, -8.48181277319839, -11.68867381689839, -11.68867381689839, -10.53069375019839, -10.53069375019839, -10.602943946998391, -10.319804633198389, -10.319804633198389, -10.565843546998391, -10.356905033198391]
								}, {
									"case":	381,
									"scores":	[-10.319804633198389, -8.48181277319839, -8.48181277319839, -11.68867381689839, -11.68867381689839, -10.53069375019839, -10.53069375019839, -10.602943946998391, -10.319804633198389, -10.319804633198389, -10.565843546998391, -10.356905033198391]
								}, {
									"case":	382,
									"scores":	[-10.319804633198389, -8.48181277319839, -8.48181277319839, -11.68867381689839, -11.68867381689839, -10.53069375019839, -10.53069375019839, -10.602943946998391, -10.319804633198389, -10.319804633198389, -10.565843546998391, -10.356905033198391]
								}, {
									"case":	383,
									"scores":	[-10.32080463319839, -8.48281277319839, -8.48281277319839, -11.689673816898392, -11.689673816898392, -10.531693750198389, -10.531693750198389, -10.60394394699839, -10.32080463319839, -10.32080463319839, -10.56684354699839, -10.35790503319839]
								}]
						}, {
							"switch":	28,
							"types":	[[6], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [3, 4, 5]],
							"begin_line":	1654,
							"begin_column":	3,
							"end_line":	1658,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L1654\", 12, &(is_step_double), sizeof (is_step_double), &(type1), sizeof (type1), &(type2), sizeof (type2), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(low), sizeof (low), &(high), sizeof (high), &(return_value), sizeof (return_value), &(lstep), sizeof (lstep), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht))) {\n    goto double_str;\n} else if (type1 == 1 || type2 == 1) {\n    goto long_str;\n}\n", "if ((type1 == 2 || type2 == 2 || is_step_double) || __is_neg(\"\", \"L1654\", 12, &(is_step_double), sizeof (is_step_double), &(type1), sizeof (type1), &(type2), sizeof (type2), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(low), sizeof (low), &(high), sizeof (high), &(return_value), sizeof (return_value), &(lstep), sizeof (lstep), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht))) {\n    goto double_str;\n} else if (type1 == 1 || type2 == 1) {\n    goto long_str;\n}\n", "if (type1 == 2 || is_step_double) {\n    goto double_str;\n} else if (type1 == 1 || type2 == 1) {\n    goto long_str;\n}\n", "if (type1 == 2 || type2 == 2) {\n    goto double_str;\n} else if (type1 == 1 || type2 == 1) {\n    goto long_str;\n}\n", "if (type2 == 2 || is_step_double) {\n    goto double_str;\n} else if (type1 == 1 || type2 == 1) {\n    goto long_str;\n}\n", "if ((type1 == 2 || type2 == 2 || is_step_double) && !__is_neg(\"\", \"L1654\", 12, &(is_step_double), sizeof (is_step_double), &(type1), sizeof (type1), &(type2), sizeof (type2), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(low), sizeof (low), &(high), sizeof (high), &(return_value), sizeof (return_value), &(lstep), sizeof (lstep), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht))) {\n    goto double_str;\n} else if (type1 == 1 || type2 == 1) {\n    goto long_str;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.770197569428146, -1.7655307094281447, -1.7655307094281447, -5.8882974268281458, -5.8882974268281458, -5.2394575694281462, -5.2394575694281462, -5.8224364694281459, -4.770197569428146, -4.770197569428146, -5.5280856694281457, -5.0645483694281461]
								}, {
									"case":	2,
									"scores":	[-4.770197569428146, -1.7655307094281447, -1.7655307094281447, -5.8882974268281458, -5.8882974268281458, -5.2394575694281462, -5.2394575694281462, -5.8224364694281459, -4.770197569428146, -4.770197569428146, -5.5280856694281457, -5.0645483694281461]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-4.770197569428146, -1.7655307094281447, -1.7655307094281447, -5.8882974268281458, -5.8882974268281458, -5.2394575694281462, -5.2394575694281462, -5.8224364694281459, -4.770197569428146, -4.770197569428146, -5.5280856694281457, -5.0645483694281461]
								}]
						}, {
							"switch":	31,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1654,
							"begin_column":	3,
							"end_line":	1658,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L1654\", 12, &(is_step_double), sizeof (is_step_double), &(type1), sizeof (type1), &(type2), sizeof (type2), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(low), sizeof (low), &(high), sizeof (high), &(return_value), sizeof (return_value), &(lstep), sizeof (lstep), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    if (type1 == 2 || type2 == 2 || is_step_double) {\n        goto double_str;\n    } else if (type1 == 1 || type2 == 1) {\n        goto long_str;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.02418049719839, -6.01951363719839, -6.01951363719839, -10.142280354598389, -9.53621105459839, -9.49344049719839, -9.49344049719839, -10.076419397198389, -9.02418049719839, -9.02418049719839, -9.78206859719839, -9.31853129719839]
								}]
						}]
				}, {
					"line":	1695,
					"switches":	[]
				}, {
					"line":	1696,
					"switches":	[{
							"switch":	34,
							"types":	[[], [], [], [], [334, 335, 336, 337], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [], [], [], [288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], [], [], [], [], [], []],
							"begin_line":	1697,
							"begin_column":	4294967295,
							"end_line":	1697,
							"end_column":	4294967295,
							"patch_codes":	["memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_double((return_value), low)", "add_next_index_double((this_ptr), low)", "add_next_index_double((zhigh), low)", "add_next_index_double((zlow), low)", "add_next_index_double((zstep), low)", "add_next_index_null(*(return_value_ptr))", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "high = (*(return_value)).value.dval", "high = (*(this_ptr)).value.dval", "high = (*(zhigh)).value.dval", "high = (*(zlow)).value.dval", "high = (*(zstep)).value.dval", "high = (high)", "high = (low)", "high = (step)", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "low = (*(return_value)).value.dval", "low = (*(this_ptr)).value.dval", "low = (*(zhigh)).value.dval", "low = (*(zlow)).value.dval", "low = (*(zstep)).value.dval", "low = (high)", "low = (low)", "low = (step)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (high)", "step = (low)", "step = (step)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "add_next_index_double(return_value, low)", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "high = (*zhigh).value.dval", "is_step_double = 1", "low = (*zlow).value.dval", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1697\", 7, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(return_value), sizeof (return_value), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1697\", 7, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(return_value), sizeof (return_value), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto err;\n", "if (__is_neg(\"\", \"L1697\", 7, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(return_value), sizeof (return_value), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1697\", 7, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(return_value), sizeof (return_value), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	2,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	3,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	4,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	5,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	6,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	7,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	8,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	9,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	10,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	11,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	12,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	13,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	14,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	15,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	16,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	17,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	18,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	19,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	20,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	21,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	22,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	23,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	24,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	25,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	26,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	27,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	28,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	29,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	30,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	31,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	32,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	33,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	34,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	35,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	36,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	37,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	38,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	39,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	40,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	41,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	42,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	43,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	44,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	45,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	46,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	47,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	48,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	49,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	50,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	51,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	52,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	53,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	54,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	55,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	56,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	57,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	58,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	59,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	60,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	61,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	62,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	63,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	64,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	65,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	66,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	67,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	68,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	69,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	70,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	71,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	72,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	73,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	74,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	75,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	76,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	77,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	78,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	79,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	80,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	81,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	82,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	83,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	84,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	85,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	86,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	87,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	88,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	89,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	90,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	91,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	92,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	93,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	94,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	95,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	96,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	97,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	98,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	99,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	100,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	101,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	102,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	103,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	104,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	105,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	106,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	107,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	108,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	109,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	110,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	111,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	112,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	113,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	114,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	115,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	116,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	117,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	118,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	119,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	120,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	121,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	122,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	123,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	124,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	125,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	126,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	127,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	128,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	129,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	130,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	131,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	132,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	133,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	134,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	135,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	136,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	137,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	138,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	139,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	140,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	141,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	142,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	143,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	144,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	145,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	146,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	147,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	148,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	149,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	150,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	151,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	152,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	153,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	154,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	155,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	156,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	157,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	158,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	159,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	160,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	161,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	162,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	163,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	164,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	165,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	166,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	167,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	168,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	169,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	170,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	171,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	172,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	173,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	174,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	175,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	176,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	177,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	178,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	179,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	180,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	181,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	182,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	183,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	184,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	185,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	186,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	187,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	188,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	189,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	190,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	191,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	192,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	193,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	194,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	195,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	196,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	197,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	198,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	199,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	200,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	201,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	202,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	203,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	204,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	205,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	206,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	207,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	208,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	209,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	210,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	211,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	212,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	213,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	214,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	215,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	216,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	217,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	218,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	219,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	220,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	221,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	222,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	223,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	224,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	225,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	226,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	227,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	228,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	229,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	230,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	231,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	232,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	233,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	234,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	235,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	236,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	237,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	238,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	239,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	240,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	241,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	242,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	243,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	244,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	245,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	246,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	247,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	248,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	249,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	250,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	251,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	252,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	253,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	254,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	255,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	256,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	257,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	258,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	259,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	260,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	261,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	262,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	263,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	264,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	265,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	266,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	267,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	268,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	269,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	270,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	271,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	272,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	273,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	274,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	275,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	276,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	277,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	278,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	279,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	280,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	281,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	282,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	283,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	284,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	285,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	286,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	287,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	288,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	289,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	290,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	291,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	292,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	293,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	294,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	295,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	296,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	297,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	298,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	299,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	300,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	301,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	302,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	303,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	304,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	305,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	306,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	307,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	308,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	309,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	310,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	311,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	312,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	313,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	314,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	315,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	316,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	317,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	318,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	319,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	320,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	321,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	322,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	323,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	324,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	325,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	326,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	327,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	328,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	329,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	330,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	331,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	332,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	333,
									"scores":	[-2.1393884932932741]
								}, {
									"case":	334,
									"scores":	[-3.6499677524932741, -4.6522833444932736, -3.937492777693274, -4.2206320914932736, -3.937492777693274, -4.1835316914932736, -3.9745931776932739]
								}, {
									"case":	335,
									"scores":	[-3.6499677524932741, -4.6522833444932736, -3.937492777693274, -4.2206320914932736, -3.937492777693274, -4.1835316914932736, -3.9745931776932739]
								}, {
									"case":	336,
									"scores":	[-3.6499677524932741, -4.6522833444932736, -3.937492777693274, -4.2206320914932736, -3.937492777693274, -4.1835316914932736, -3.9745931776932739]
								}, {
									"case":	337,
									"scores":	[-3.6509677524932744, -4.653283344493274, -3.9384927776932739, -4.2216320914932739, -3.9384927776932739, -4.1845316914932731, -3.9755931776932742]
								}]
						}]
				}, {
					"line":	1698,
					"switches":	[{
							"switch":	35,
							"types":	[[], [], [], [], [334, 335, 336, 337], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [], [], [], [288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], [], [], [], [], [], []],
							"begin_line":	1699,
							"begin_column":	1,
							"end_line":	1699,
							"end_column":	1,
							"patch_codes":	["memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_double((return_value), low)", "add_next_index_double((this_ptr), low)", "add_next_index_double((zhigh), low)", "add_next_index_double((zlow), low)", "add_next_index_double((zstep), low)", "add_next_index_null(*(return_value_ptr))", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "high = (*(return_value)).value.dval", "high = (*(this_ptr)).value.dval", "high = (*(zhigh)).value.dval", "high = (*(zlow)).value.dval", "high = (*(zstep)).value.dval", "high = (high)", "high = (low)", "high = (step)", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "low = (*(return_value)).value.dval", "low = (*(this_ptr)).value.dval", "low = (*(zhigh)).value.dval", "low = (*(zlow)).value.dval", "low = (*(zstep)).value.dval", "low = (high)", "low = (low)", "low = (step)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (high)", "step = (low)", "step = (step)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "add_next_index_double(return_value, low)", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "high = (*zhigh).value.dval", "is_step_double = 1", "low = (*zlow).value.dval", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1699\", 10, &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &(err), sizeof (err), &(return_value), sizeof (return_value), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1699\", 10, &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &(err), sizeof (err), &(return_value), sizeof (return_value), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc)))\n    goto err;\n", "if (__is_neg(\"\", \"L1699\", 10, &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &(err), sizeof (err), &(return_value), sizeof (return_value), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1699\", 10, &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &(err), sizeof (err), &(return_value), sizeof (return_value), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	2,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	3,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	4,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	5,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	6,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	7,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	8,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	9,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	10,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	11,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	12,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	13,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	14,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	15,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	16,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	17,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	18,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	19,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	20,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	21,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	22,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	23,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	24,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	25,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	26,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	27,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	28,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	29,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	30,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	31,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	32,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	33,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	34,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	35,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	36,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	37,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	38,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	39,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	40,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	41,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	42,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	43,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	44,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	45,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	46,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	47,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	48,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	49,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	50,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	51,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	52,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	53,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	54,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	55,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	56,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	57,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	58,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	59,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	60,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	61,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	62,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	63,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	64,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	65,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	66,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	67,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	68,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	69,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	70,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	71,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	72,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	73,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	74,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	75,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	76,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	77,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	78,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	79,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	80,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	81,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	82,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	83,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	84,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	85,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	86,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	87,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	88,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	89,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	90,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	91,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	92,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	93,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	94,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	95,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	96,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	97,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	98,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	99,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	100,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	101,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	102,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	103,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	104,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	105,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	106,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	107,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	108,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	109,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	110,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	111,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	112,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	113,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	114,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	115,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	116,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	117,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	118,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	119,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	120,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	121,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	122,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	123,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	124,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	125,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	126,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	127,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	128,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	129,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	130,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	131,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	132,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	133,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	134,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	135,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	136,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	137,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	138,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	139,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	140,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	141,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	142,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	143,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	144,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	145,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	146,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	147,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	148,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	149,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	150,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	151,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	152,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	153,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	154,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	155,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	156,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	157,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	158,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	159,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	160,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	161,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	162,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	163,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	164,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	165,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	166,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	167,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	168,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	169,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	170,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	171,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	172,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	173,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	174,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	175,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	176,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	177,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	178,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	179,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	180,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	181,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	182,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	183,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	184,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	185,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	186,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	187,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	188,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	189,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	190,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	191,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	192,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	193,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	194,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	195,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	196,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	197,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	198,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	199,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	200,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	201,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	202,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	203,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	204,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	205,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	206,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	207,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	208,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	209,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	210,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	211,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	212,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	213,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	214,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	215,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	216,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	217,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	218,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	219,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	220,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	221,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	222,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	223,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	224,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	225,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	226,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	227,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	228,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	229,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	230,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	231,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	232,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	233,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	234,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	235,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	236,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	237,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	238,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	239,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	240,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	241,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	242,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	243,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	244,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	245,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	246,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	247,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	248,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	249,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	250,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	251,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	252,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	253,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	254,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	255,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	256,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	257,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	258,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	259,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	260,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	261,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	262,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	263,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	264,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	265,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	266,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	267,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	268,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	269,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	270,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	271,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	272,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	273,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	274,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	275,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	276,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	277,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	278,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	279,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	280,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	281,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	282,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	283,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	284,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	285,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	286,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	287,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	288,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	289,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	290,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	291,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	292,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	293,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	294,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	295,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	296,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	297,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	298,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	299,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	300,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	301,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	302,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	303,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	304,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	305,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	306,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	307,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	308,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	309,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	310,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	311,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	312,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	313,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	314,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	315,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	316,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	317,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	318,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	319,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	320,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	321,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	322,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	323,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	324,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	325,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	326,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	327,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	328,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	329,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	330,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	331,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	332,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	333,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	334,
									"scores":	[-8.3668901621757534, -9.2423122111757543, -8.6530902173757536, -9.4672363913757547, -8.7510702103757545, -9.0819121841757546, -8.899129131175755, -8.6901906173757553, -9.4672363913757547, -9.4672363913757547]
								}, {
									"case":	335,
									"scores":	[-8.3668901621757534, -9.2423122111757543, -8.6530902173757536, -9.4672363913757547, -8.7510702103757545, -9.0819121841757546, -8.899129131175755, -8.6901906173757553, -9.4672363913757547, -9.4672363913757547]
								}, {
									"case":	336,
									"scores":	[-8.3668901621757534, -9.2423122111757543, -8.6530902173757536, -9.4672363913757547, -8.7510702103757545, -9.0819121841757546, -8.899129131175755, -8.6901906173757553, -9.4672363913757547, -9.4672363913757547]
								}, {
									"case":	337,
									"scores":	[-8.3678901621757547, -9.2433122111757537, -8.6540902173757548, -9.4682363913757541, -8.7520702103757539, -9.0829121841757541, -8.9001291311757544, -8.6911906173757547, -9.4682363913757541, -9.4682363913757541]
								}]
						}, {
							"switch":	36,
							"types":	[[], [], [1], [], [], [], [240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257], [], [192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190], [], [], [191]],
							"begin_line":	1699,
							"begin_column":	3,
							"end_line":	1699,
							"end_column":	26,
							"patch_codes":	["if (!__is_neg(\"\", \"L1699\", 10, &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &(err), sizeof (err), &(return_value), sizeof (return_value), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc)))\n    convert_to_double(zhigh);\n", "_array_init(zhigh, -1)", "_array_init(zhigh, 0)", "_array_init(zhigh, 1)", "_array_init(zhigh, 2)", "_array_init(zhigh, 255)", "_array_init(zhigh, 3)", "_array_init(zhigh, 6)", "_object_init_ex(zhigh, 0)", "_object_init_ex(zhigh, spl_ce_AppendIterator)", "_object_init_ex(zhigh, spl_ce_ArrayIterator)", "_object_init_ex(zhigh, spl_ce_ArrayObject)", "_object_init_ex(zhigh, spl_ce_CachingIterator)", "_object_init_ex(zhigh, spl_ce_Countable)", "_object_init_ex(zhigh, spl_ce_EmptyIterator)", "_object_init_ex(zhigh, spl_ce_FilterIterator)", "_object_init_ex(zhigh, spl_ce_InfiniteIterator)", "_object_init_ex(zhigh, spl_ce_IteratorIterator)", "_object_init_ex(zhigh, spl_ce_LimitIterator)", "_object_init_ex(zhigh, spl_ce_NoRewindIterator)", "_object_init_ex(zhigh, spl_ce_OuterIterator)", "_object_init_ex(zhigh, spl_ce_ParentIterator)", "_object_init_ex(zhigh, spl_ce_RecursiveArrayIterator)", "_object_init_ex(zhigh, spl_ce_RecursiveCachingIterator)", "_object_init_ex(zhigh, spl_ce_RecursiveFilterIterator)", "_object_init_ex(zhigh, spl_ce_RecursiveIterator)", "_object_init_ex(zhigh, spl_ce_RecursiveIteratorIterator)", "_object_init_ex(zhigh, spl_ce_RecursiveRegexIterator)", "_object_init_ex(zhigh, spl_ce_RecursiveTreeIterator)", "_object_init_ex(zhigh, spl_ce_RegexIterator)", "_object_init_ex(zhigh, spl_ce_SeekableIterator)", "_object_init_ex(zhigh, zend_ce_aggregate)", "_object_init_ex(zhigh, zend_ce_arrayaccess)", "_object_init_ex(zhigh, zend_ce_iterator)", "_object_init_ex(zhigh, zend_ce_serializable)", "_object_init_ex(zhigh, zend_ce_traversable)", "_object_init_ex(zhigh, zend_standard_class_def)", "add_index_null(zhigh, -1)", "add_index_null(zhigh, 0)", "add_index_null(zhigh, 1)", "add_index_null(zhigh, 2)", "add_index_null(zhigh, 255)", "add_index_null(zhigh, 3)", "add_index_null(zhigh, 6)", "add_next_index_bool(zhigh, -1)", "add_next_index_bool(zhigh, 0)", "add_next_index_bool(zhigh, 1)", "add_next_index_bool(zhigh, 2)", "add_next_index_bool(zhigh, 255)", "add_next_index_bool(zhigh, 3)", "add_next_index_bool(zhigh, 6)", "add_next_index_bool(zhigh, err)", "add_next_index_bool(zhigh, ht)", "add_next_index_bool(zhigh, is_step_double)", "add_next_index_bool(zhigh, le_index_ptr)", "add_next_index_bool(zhigh, return_value_used)", "add_next_index_long(zhigh, -1)", "add_next_index_long(zhigh, 0)", "add_next_index_long(zhigh, 1)", "add_next_index_long(zhigh, 2)", "add_next_index_long(zhigh, 255)", "add_next_index_long(zhigh, 3)", "add_next_index_long(zhigh, 6)", "add_next_index_resource(zhigh, -1)", "add_next_index_resource(zhigh, 0)", "add_next_index_resource(zhigh, 1)", "add_next_index_resource(zhigh, 2)", "add_next_index_resource(zhigh, 255)", "add_next_index_resource(zhigh, 3)", "add_next_index_resource(zhigh, 6)", "add_next_index_resource(zhigh, err)", "add_next_index_resource(zhigh, ht)", "add_next_index_resource(zhigh, is_step_double)", "add_next_index_resource(zhigh, le_index_ptr)", "add_next_index_resource(zhigh, return_value_used)", "add_next_index_zval(zhigh, 0)", "add_next_index_zval(zhigh, return_value)", "add_next_index_zval(zhigh, this_ptr)", "add_next_index_zval(zhigh, zhigh)", "add_next_index_zval(zhigh, zlow)", "add_next_index_zval(zhigh, zstep)", "bitwise_not_function(zhigh, 0)", "bitwise_not_function(zhigh, return_value)", "bitwise_not_function(zhigh, this_ptr)", "bitwise_not_function(zhigh, zhigh)", "bitwise_not_function(zhigh, zlow)", "bitwise_not_function(zhigh, zstep)", "boolean_not_function(zhigh, 0)", "boolean_not_function(zhigh, return_value)", "boolean_not_function(zhigh, this_ptr)", "boolean_not_function(zhigh, zhigh)", "boolean_not_function(zhigh, zlow)", "boolean_not_function(zhigh, zstep)", "compile_string(zhigh, 0)", "convert_to_long_base(zhigh, -1)", "convert_to_long_base(zhigh, 0)", "convert_to_long_base(zhigh, 1)", "convert_to_long_base(zhigh, 2)", "convert_to_long_base(zhigh, 255)", "convert_to_long_base(zhigh, 3)", "convert_to_long_base(zhigh, 6)", "convert_to_long_base(zhigh, err)", "convert_to_long_base(zhigh, ht)", "convert_to_long_base(zhigh, is_step_double)", "convert_to_long_base(zhigh, le_index_ptr)", "convert_to_long_base(zhigh, return_value_used)", "php_count_recursive(zhigh, -1)", "php_count_recursive(zhigh, 0)", "php_count_recursive(zhigh, 1)", "php_count_recursive(zhigh, 2)", "php_count_recursive(zhigh, 255)", "php_count_recursive(zhigh, 3)", "php_count_recursive(zhigh, 6)", "php_spl_get_constructor_helper(zhigh, 0)", "php_spl_get_constructor_helper(zhigh, brk)", "php_spl_get_constructor_helper(zhigh, dlclose)", "php_spl_object_hash(zhigh, 0)", "spl_array_iterator_append(zhigh, 0)", "spl_array_iterator_append(zhigh, return_value)", "spl_array_iterator_append(zhigh, this_ptr)", "spl_array_iterator_append(zhigh, zhigh)", "spl_array_iterator_append(zhigh, zlow)", "spl_array_iterator_append(zhigh, zstep)", "spl_array_iterator_key(zhigh, 0)", "spl_array_iterator_key(zhigh, return_value)", "spl_array_iterator_key(zhigh, this_ptr)", "spl_array_iterator_key(zhigh, zhigh)", "spl_array_iterator_key(zhigh, zlow)", "spl_array_iterator_key(zhigh, zstep)", "zend_binary_zval_strcasecmp(zhigh, 0)", "zend_binary_zval_strcasecmp(zhigh, return_value)", "zend_binary_zval_strcasecmp(zhigh, this_ptr)", "zend_binary_zval_strcasecmp(zhigh, zhigh)", "zend_binary_zval_strcasecmp(zhigh, zlow)", "zend_binary_zval_strcasecmp(zhigh, zstep)", "zend_binary_zval_strcmp(zhigh, 0)", "zend_binary_zval_strcmp(zhigh, return_value)", "zend_binary_zval_strcmp(zhigh, this_ptr)", "zend_binary_zval_strcmp(zhigh, zhigh)", "zend_binary_zval_strcmp(zhigh, zlow)", "zend_binary_zval_strcmp(zhigh, zstep)", "zend_iterator_unwrap(zhigh, 0)", "zend_make_callable(zhigh, 0)", "zend_make_callable(zhigh, environ)", "zend_object_create_proxy(zhigh, 0)", "zend_object_create_proxy(zhigh, return_value)", "zend_object_create_proxy(zhigh, this_ptr)", "zend_object_create_proxy(zhigh, zhigh)", "zend_object_create_proxy(zhigh, zlow)", "zend_object_create_proxy(zhigh, zstep)", "zend_object_store_set_object(zhigh, 0)", "zend_print_zval(zhigh, -1)", "zend_print_zval(zhigh, 0)", "zend_print_zval(zhigh, 1)", "zend_print_zval(zhigh, 2)", "zend_print_zval(zhigh, 255)", "zend_print_zval(zhigh, 3)", "zend_print_zval(zhigh, 6)", "zend_print_zval(zhigh, err)", "zend_print_zval(zhigh, ht)", "zend_print_zval(zhigh, is_step_double)", "zend_print_zval(zhigh, le_index_ptr)", "zend_print_zval(zhigh, return_value_used)", "zend_print_zval_r(zhigh, -1)", "zend_print_zval_r(zhigh, 0)", "zend_print_zval_r(zhigh, 1)", "zend_print_zval_r(zhigh, 2)", "zend_print_zval_r(zhigh, 255)", "zend_print_zval_r(zhigh, 3)", "zend_print_zval_r(zhigh, 6)", "zend_print_zval_r(zhigh, err)", "zend_print_zval_r(zhigh, ht)", "zend_print_zval_r(zhigh, is_step_double)", "zend_print_zval_r(zhigh, le_index_ptr)", "zend_print_zval_r(zhigh, return_value_used)", "zend_std_get_debug_info(zhigh, 0)", "zval_set_isref_to_p(zhigh, -1)", "zval_set_isref_to_p(zhigh, 0)", "zval_set_isref_to_p(zhigh, 1)", "zval_set_isref_to_p(zhigh, 2)", "zval_set_isref_to_p(zhigh, 255)", "zval_set_isref_to_p(zhigh, 3)", "zval_set_isref_to_p(zhigh, 6)", "zval_set_refcount_p(zhigh, -1)", "zval_set_refcount_p(zhigh, 0)", "zval_set_refcount_p(zhigh, 1)", "zval_set_refcount_p(zhigh, 2)", "zval_set_refcount_p(zhigh, 255)", "zval_set_refcount_p(zhigh, 3)", "zval_set_refcount_p(zhigh, 6)", "{\n}\n", "_convert_to_string(zhigh)", "_object_init(zhigh)", "_zval_copy_ctor(zhigh)", "_zval_copy_ctor_func(zhigh)", "_zval_dtor(zhigh)", "_zval_dtor_func(zhigh)", "_zval_dtor_wrapper(zhigh)", "_zval_internal_dtor(zhigh)", "add_next_index_null(zhigh)", "config_zval_dtor(zhigh)", "convert_scalar_to_number(zhigh)", "convert_to_array(zhigh)", "convert_to_boolean(zhigh)", "convert_to_long(zhigh)", "convert_to_null(zhigh)", "convert_to_object(zhigh)", "decrement_function(zhigh)", "gc_remove_zval_from_buffer(zhigh)", "gc_zobj_possible_root(zhigh)", "gc_zval_check_possible_root(zhigh)", "gc_zval_possible_root(zhigh)", "i_zend_is_true(zhigh)", "i_zval_ptr_dtor(zhigh)", "increment_function(zhigh)", "lex_scan(zhigh)", "php_array_data_shuffle(zhigh)", "php_output_get_contents(zhigh)", "php_output_get_length(zhigh)", "safe_free_zval_ptr_rel(zhigh)", "zend_is_true(zhigh)", "zend_locale_sprintf_double(zhigh)", "zend_object_store_ctor_failed(zhigh)", "zend_objects_clone_obj(zhigh)", "zend_objects_store_add_ref(zhigh)", "zend_objects_store_clone_obj(zhigh)", "zend_objects_store_del_ref(zhigh)", "zend_objects_store_get_refcount(zhigh)", "zend_print_flat_zval_r(zhigh)", "zend_print_variable(zhigh)", "zend_std_get_constructor(zhigh)", "zend_std_get_properties(zhigh)", "zval_addref_p(zhigh)", "zval_delref_p(zhigh)", "zval_is_true(zhigh)", "zval_isref_p(zhigh)", "zval_refcount_p(zhigh)", "zval_set_isref_p(zhigh)", "zval_unset_isref_p(zhigh)", "convert_to_double((&err))", "convert_to_double((&high))", "convert_to_double((&ht))", "convert_to_double((&is_step_double))", "convert_to_double((&low))", "convert_to_double((&return_value))", "convert_to_double((&return_value_ptr))", "convert_to_double((&return_value_used))", "convert_to_double((&step))", "convert_to_double((&this_ptr))", "convert_to_double((&zhigh))", "convert_to_double((&zlow))", "convert_to_double((&zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.9002330619757553, -6.0093562179757543, -6.2893919119757546, -6.8142367219757549, -6.2859106559757549, -7.3748063209757539, -7.0472800119757544, -6.5837427119757548, -6.8142367219757549, -6.8142367219757549]
								}, {
									"case":	2,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	3,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	4,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	5,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	6,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	7,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	8,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	9,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	10,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	11,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	12,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	13,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	14,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	15,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	16,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	17,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	18,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	19,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	20,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	21,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	22,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	23,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	24,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	25,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	26,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	27,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	28,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	29,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	30,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	31,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	32,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	33,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	34,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	35,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	36,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	37,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	38,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	39,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	40,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	41,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	42,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	43,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	44,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	45,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	46,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	47,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	48,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	49,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	50,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	51,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	52,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	53,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	54,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	55,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	56,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	57,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	58,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	59,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	60,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	61,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	62,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	63,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	64,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	65,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	66,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	67,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	68,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	69,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	70,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	71,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	72,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	73,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	74,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	75,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	76,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	77,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	78,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	79,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	80,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	81,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	82,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	83,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	84,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	85,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	86,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	87,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	88,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	89,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	90,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	91,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	92,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	93,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	94,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	95,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	96,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	97,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	98,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	99,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	100,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	101,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	102,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	103,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	104,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	105,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	106,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	107,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	108,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	109,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	110,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	111,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	112,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	113,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	114,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	115,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	116,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	117,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	118,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	119,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	120,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	121,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	122,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	123,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	124,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	125,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	126,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	127,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	128,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	129,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	130,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	131,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	132,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	133,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	134,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	135,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	136,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	137,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	138,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	139,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	140,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	141,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	142,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	143,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	144,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	145,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	146,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	147,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	148,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	149,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	150,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	151,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	152,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	153,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	154,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	155,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	156,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	157,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	158,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	159,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	160,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	161,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	162,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	163,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	164,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	165,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	166,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	167,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	168,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	169,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	170,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	171,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	172,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	173,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	174,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	175,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	176,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	177,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	178,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	179,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	180,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	181,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	182,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	183,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	184,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	185,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	186,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	187,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	188,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	189,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	190,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	191,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	192,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	193,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	194,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	195,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	196,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	197,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	198,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	199,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	200,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	201,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	202,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	203,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	204,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	205,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	206,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	207,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	208,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	209,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	210,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	211,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	212,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	213,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	214,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	215,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	216,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	217,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	218,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	219,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	220,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	221,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	222,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	223,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	224,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	225,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	226,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	227,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	228,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	229,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	230,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	231,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	232,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	233,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	234,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	235,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	236,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	237,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	238,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	239,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	240,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	241,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	242,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	243,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	244,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	245,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	246,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	247,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	248,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	249,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	250,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	251,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	252,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	253,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	254,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	255,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	256,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	257,
									"scores":	[-6.6191857859757546]
								}]
						}]
				}, {
					"line":	1699,
					"switches":	[{
							"switch":	37,
							"types":	[[], [], [], [], [335, 336, 337, 338], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [], [], [], [289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334], [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288], [], [], [], [], [], []],
							"begin_line":	1700,
							"begin_column":	1,
							"end_line":	1700,
							"end_column":	1,
							"patch_codes":	["memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow), 0, sizeof (*(&(*zlow))))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_double((return_value), low)", "add_next_index_double((this_ptr), low)", "add_next_index_double((zhigh), low)", "add_next_index_double((zlow), low)", "add_next_index_double((zstep), low)", "add_next_index_null(*(return_value_ptr))", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "high = (*(return_value)).value.dval", "high = (*(this_ptr)).value.dval", "high = (*(zhigh)).value.dval", "high = (*(zlow)).value.dval", "high = (*(zstep)).value.dval", "high = (high)", "high = (low)", "high = (step)", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "low = (*(return_value)).value.dval", "low = (*(this_ptr)).value.dval", "low = (*(zhigh)).value.dval", "low = (*(zlow)).value.dval", "low = (*(zstep)).value.dval", "low = (high)", "low = (low)", "low = (step)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (high)", "step = (low)", "step = (step)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "add_next_index_double(return_value, low)", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "high = (*zhigh).value.dval", "is_step_double = 1", "low = (*zlow).value.dval", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1700\", 13, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1700\", 13, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    goto err;\n", "if (__is_neg(\"\", \"L1700\", 13, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1700\", 13, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	2,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	3,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	4,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	5,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	6,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	7,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	8,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	9,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	10,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	11,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	12,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	13,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	14,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	15,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	16,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	17,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	18,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	19,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	20,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	21,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	22,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	23,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	24,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	25,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	26,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	27,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	28,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	29,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	30,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	31,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	32,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	33,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	34,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	35,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	36,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	37,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	38,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	39,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	40,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	41,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	42,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	43,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	44,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	45,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	46,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	47,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	48,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	49,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	50,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	51,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	52,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	53,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	54,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	55,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	56,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	57,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	58,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	59,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	60,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	61,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	62,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	63,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	64,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	65,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	66,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	67,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	68,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	69,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	70,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	71,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	72,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	73,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	74,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	75,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	76,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	77,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	78,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	79,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	80,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	81,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	82,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	83,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	84,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	85,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	86,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	87,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	88,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	89,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	90,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	91,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	92,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	93,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	94,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	95,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	96,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	97,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	98,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	99,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	100,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	101,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	102,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	103,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	104,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	105,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	106,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	107,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	108,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	109,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	110,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	111,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	112,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	113,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	114,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	115,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	116,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	117,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	118,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	119,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	120,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	121,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	122,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	123,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	124,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	125,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	126,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	127,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	128,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	129,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	130,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	131,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	132,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	133,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	134,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	135,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	136,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	137,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	138,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	139,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	140,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	141,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	142,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	143,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	144,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	145,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	146,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	147,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	148,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	149,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	150,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	151,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	152,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	153,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	154,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	155,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	156,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	157,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	158,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	159,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	160,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	161,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	162,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	163,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	164,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	165,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	166,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	167,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	168,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	169,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	170,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	171,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	172,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	173,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	174,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	175,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	176,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	177,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	178,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	179,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	180,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	181,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	182,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	183,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	184,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	185,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	186,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	187,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	188,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	189,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	190,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	191,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	192,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	193,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	194,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	195,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	196,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	197,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	198,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	199,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	200,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	201,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	202,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	203,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	204,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	205,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	206,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	207,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	208,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	209,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	210,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	211,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	212,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	213,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	214,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	215,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	216,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	217,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	218,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	219,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	220,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	221,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	222,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	223,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	224,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	225,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	226,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	227,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	228,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	229,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	230,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	231,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	232,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	233,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	234,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	235,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	236,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	237,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	238,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	239,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	240,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	241,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	242,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	243,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	244,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	245,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	246,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	247,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	248,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	249,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	250,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	251,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	252,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	253,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	254,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	255,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	256,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	257,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	258,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	259,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	260,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	261,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	262,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	263,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	264,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	265,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	266,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	267,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	268,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	269,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	270,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	271,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	272,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	273,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	274,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	275,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	276,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	277,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	278,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	279,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	280,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	281,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	282,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	283,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	284,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	285,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	286,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	287,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	288,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	289,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	290,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	291,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	292,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	293,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	294,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	295,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	296,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	297,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	298,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	299,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	300,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	301,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	302,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	303,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	304,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	305,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	306,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	307,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	308,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	309,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	310,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	311,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	312,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	313,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	314,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	315,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	316,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	317,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	318,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	319,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	320,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	321,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	322,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	323,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	324,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	325,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	326,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	327,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	328,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	329,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	330,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	331,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	332,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	333,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	334,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	335,
									"scores":	[-7.713664442458235, -9.2309976424582345, -8.7397556416582347, -8.6417756486582338, -9.4559218226582349, -9.4559218226582349, -9.0705976154582348, -8.8878145624582352, -8.6788760486582355, -9.4559218226582349, -9.4559218226582349, -9.4559218226582349, -9.4559218226582349]
								}, {
									"case":	336,
									"scores":	[-7.713664442458235, -9.2309976424582345, -8.7397556416582347, -8.6417756486582338, -9.4559218226582349, -9.4559218226582349, -9.0705976154582348, -8.8878145624582352, -8.6788760486582355, -9.4559218226582349, -9.4559218226582349, -9.4559218226582349, -9.4559218226582349]
								}, {
									"case":	337,
									"scores":	[-7.713664442458235, -9.2309976424582345, -8.7397556416582347, -8.6417756486582338, -9.4559218226582349, -9.4559218226582349, -9.0705976154582348, -8.8878145624582352, -8.6788760486582355, -9.4559218226582349, -9.4559218226582349, -9.4559218226582349, -9.4559218226582349]
								}, {
									"case":	338,
									"scores":	[-7.7146644424582353, -9.231997642458234, -8.7407556416582342, -8.642775648658235, -9.4569218226582343, -9.4569218226582343, -9.0715976154582343, -8.8888145624582346, -8.6798760486582349, -9.4569218226582343, -9.4569218226582343, -9.4569218226582343, -9.4569218226582343]
								}]
						}, {
							"switch":	38,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1700,
							"begin_column":	3,
							"end_line":	1700,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L1700\", 13, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(err), sizeof (err), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    low = (*zlow).value.dval;\n", "{\n}\n", "low = (*(&err)).value.dval", "low = (*(&high)).value.dval", "low = (*(&ht)).value.dval", "low = (*(&is_step_double)).value.dval", "low = (*(&low)).value.dval", "low = (*(&return_value)).value.dval", "low = (*(&return_value_ptr)).value.dval", "low = (*(&return_value_used)).value.dval", "low = (*(&step)).value.dval", "low = (*(&this_ptr)).value.dval", "low = (*(&zhigh)).value.dval", "low = (*(&zlow)).value.dval", "low = (*(&zstep)).value.dval", "low = (*(return_value)).value.dval", "low = (*(this_ptr)).value.dval", "low = (*(zhigh)).value.dval", "low = (*(zlow)).value.dval", "low = (*(zstep)).value.dval", "low = (high)", "low = (low)", "low = (step)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.734883160658236, -6.3012715106582355, -6.5778259486582353, -6.581307204658235, -7.1061520146582353, -7.1061520146582353, -7.6667216136582352, -7.3391953046582348, -6.8756580046582352, -7.1061520146582353, -7.1061520146582353, -7.1061520146582353, -7.1061520146582353]
								}, {
									"case":	2,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	3,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	4,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	5,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	6,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	7,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	8,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	9,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	10,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	11,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	12,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	13,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	14,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	15,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	16,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	17,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	18,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	19,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	20,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	21,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	22,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	23,
									"scores":	[-6.5989830786582351]
								}]
						}]
				}, {
					"line":	1700,
					"switches":	[{
							"switch":	39,
							"types":	[[], [], [], [], [335, 336, 337, 338], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [], [], [], [289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334], [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288], [], [], [], [], [], []],
							"begin_line":	1701,
							"begin_column":	1,
							"end_line":	1701,
							"end_column":	1,
							"patch_codes":	["memset(&(*zhigh), 0, sizeof (*(&(*zhigh))))", "memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_double((return_value), low)", "add_next_index_double((this_ptr), low)", "add_next_index_double((zhigh), low)", "add_next_index_double((zlow), low)", "add_next_index_double((zstep), low)", "add_next_index_null(*(return_value_ptr))", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "high = (*(return_value)).value.dval", "high = (*(this_ptr)).value.dval", "high = (*(zhigh)).value.dval", "high = (*(zlow)).value.dval", "high = (*(zstep)).value.dval", "high = (high)", "high = (low)", "high = (step)", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "low = (*(return_value)).value.dval", "low = (*(this_ptr)).value.dval", "low = (*(zhigh)).value.dval", "low = (*(zlow)).value.dval", "low = (*(zstep)).value.dval", "low = (high)", "low = (low)", "low = (step)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (high)", "step = (low)", "step = (step)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "add_next_index_double(return_value, low)", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "high = (*zhigh).value.dval", "is_step_double = 1", "low = (*zlow).value.dval", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1701\", 13, &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(err), sizeof (err), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1701\", 13, &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(err), sizeof (err), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    goto err;\n", "if (__is_neg(\"\", \"L1701\", 13, &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(err), sizeof (err), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1701\", 13, &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(err), sizeof (err), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	2,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	3,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	4,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	5,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	6,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	7,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	8,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	9,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	10,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	11,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	12,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	13,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	14,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	15,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	16,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	17,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	18,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	19,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	20,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	21,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	22,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	23,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	24,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	25,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	26,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	27,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	28,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	29,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	30,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	31,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	32,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	33,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	34,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	35,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	36,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	37,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	38,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	39,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	40,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	41,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	42,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	43,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	44,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	45,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	46,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	47,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	48,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	49,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	50,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	51,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	52,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	53,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	54,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	55,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	56,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	57,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	58,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	59,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	60,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	61,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	62,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	63,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	64,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	65,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	66,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	67,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	68,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	69,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	70,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	71,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	72,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	73,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	74,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	75,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	76,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	77,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	78,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	79,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	80,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	81,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	82,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	83,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	84,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	85,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	86,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	87,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	88,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	89,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	90,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	91,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	92,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	93,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	94,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	95,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	96,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	97,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	98,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	99,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	100,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	101,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	102,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	103,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	104,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	105,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	106,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	107,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	108,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	109,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	110,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	111,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	112,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	113,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	114,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	115,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	116,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	117,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	118,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	119,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	120,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	121,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	122,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	123,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	124,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	125,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	126,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	127,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	128,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	129,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	130,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	131,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	132,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	133,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	134,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	135,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	136,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	137,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	138,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	139,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	140,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	141,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	142,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	143,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	144,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	145,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	146,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	147,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	148,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	149,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	150,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	151,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	152,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	153,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	154,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	155,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	156,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	157,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	158,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	159,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	160,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	161,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	162,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	163,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	164,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	165,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	166,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	167,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	168,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	169,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	170,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	171,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	172,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	173,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	174,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	175,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	176,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	177,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	178,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	179,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	180,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	181,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	182,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	183,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	184,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	185,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	186,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	187,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	188,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	189,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	190,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	191,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	192,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	193,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	194,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	195,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	196,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	197,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	198,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	199,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	200,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	201,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	202,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	203,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	204,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	205,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	206,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	207,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	208,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	209,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	210,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	211,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	212,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	213,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	214,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	215,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	216,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	217,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	218,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	219,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	220,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	221,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	222,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	223,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	224,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	225,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	226,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	227,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	228,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	229,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	230,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	231,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	232,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	233,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	234,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	235,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	236,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	237,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	238,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	239,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	240,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	241,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	242,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	243,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	244,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	245,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	246,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	247,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	248,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	249,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	250,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	251,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	252,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	253,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	254,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	255,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	256,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	257,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	258,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	259,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	260,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	261,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	262,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	263,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	264,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	265,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	266,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	267,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	268,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	269,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	270,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	271,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	272,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	273,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	274,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	275,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	276,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	277,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	278,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	279,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	280,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	281,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	282,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	283,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	284,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	285,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	286,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	287,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	288,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	289,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	290,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	291,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	292,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	293,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	294,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	295,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	296,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	297,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	298,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	299,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	300,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	301,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	302,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	303,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	304,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	305,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	306,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	307,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	308,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	309,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	310,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	311,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	312,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	313,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	314,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	315,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	316,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	317,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	318,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	319,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	320,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	321,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	322,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	323,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	324,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	325,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	326,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	327,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	328,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	329,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	330,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	331,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	332,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	333,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	334,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	335,
									"scores":	[-8.3007157351407148, -9.5899580551407144, -9.3268069343407163, -9.2288269413407154, -10.042973115340715, -10.042973115340715, -9.6576489081407146, -9.474865855140715, -9.2659273413407153, -10.042973115340715, -10.042973115340715, -10.042973115340715, -10.042973115340715]
								}, {
									"case":	336,
									"scores":	[-8.3007157351407148, -9.5899580551407144, -9.3268069343407163, -9.2288269413407154, -10.042973115340715, -10.042973115340715, -9.6576489081407146, -9.474865855140715, -9.2659273413407153, -10.042973115340715, -10.042973115340715, -10.042973115340715, -10.042973115340715]
								}, {
									"case":	337,
									"scores":	[-8.3007157351407148, -9.5899580551407144, -9.3268069343407163, -9.2288269413407154, -10.042973115340715, -10.042973115340715, -9.6576489081407146, -9.474865855140715, -9.2659273413407153, -10.042973115340715, -10.042973115340715, -10.042973115340715, -10.042973115340715]
								}, {
									"case":	338,
									"scores":	[-8.301715735140716, -9.5909580551407139, -9.3278069343407157, -9.2298269413407148, -10.043973115340716, -10.043973115340716, -9.6586489081407159, -9.4758658551407144, -9.2669273413407147, -10.043973115340716, -10.043973115340716, -10.043973115340716, -10.043973115340716]
								}]
						}, {
							"switch":	40,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1701,
							"begin_column":	3,
							"end_line":	1701,
							"end_column":	10,
							"patch_codes":	["if (!__is_neg(\"\", \"L1701\", 13, &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(err), sizeof (err), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    high = (*zhigh).value.dval;\n", "{\n}\n", "high = (*(&err)).value.dval", "high = (*(&high)).value.dval", "high = (*(&ht)).value.dval", "high = (*(&is_step_double)).value.dval", "high = (*(&low)).value.dval", "high = (*(&return_value)).value.dval", "high = (*(&return_value_ptr)).value.dval", "high = (*(&return_value_used)).value.dval", "high = (*(&step)).value.dval", "high = (*(&this_ptr)).value.dval", "high = (*(&zhigh)).value.dval", "high = (*(&zlow)).value.dval", "high = (*(&zstep)).value.dval", "high = (*(return_value)).value.dval", "high = (*(this_ptr)).value.dval", "high = (*(zhigh)).value.dval", "high = (*(zlow)).value.dval", "high = (*(zstep)).value.dval", "high = (high)", "high = (low)", "high = (step)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.2300464533407158, -8.6292821538407161, -8.8497177623407151, -8.0764704973407149, -8.601315307340716, -8.601315307340716, -8.4484496063407164, -8.8343585973407155, -8.370821297340715, -8.601315307340716, -8.601315307340716, -8.601315307340716, -8.601315307340716]
								}, {
									"case":	2,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	3,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	4,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	5,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	6,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	7,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	8,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	9,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	10,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	11,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	12,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	13,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	14,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	15,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	16,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	17,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	18,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	19,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	20,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	21,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	22,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	23,
									"scores":	[-6.5787803713407156]
								}]
						}]
				}, {
					"line":	1711,
					"switches":	[{
							"switch":	45,
							"types":	[[], [], [], [], [334, 335, 336, 337], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [], [], [], [288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], [], [], [], [], [], []],
							"begin_line":	1712,
							"begin_column":	2,
							"end_line":	1712,
							"end_column":	2,
							"patch_codes":	["memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_double((return_value), low)", "add_next_index_double((this_ptr), low)", "add_next_index_double((zhigh), low)", "add_next_index_double((zlow), low)", "add_next_index_double((zstep), low)", "add_next_index_null(*(return_value_ptr))", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "high = (*(return_value)).value.dval", "high = (*(this_ptr)).value.dval", "high = (*(zhigh)).value.dval", "high = (*(zlow)).value.dval", "high = (*(zstep)).value.dval", "high = (high)", "high = (low)", "high = (step)", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "low = (*(return_value)).value.dval", "low = (*(this_ptr)).value.dval", "low = (*(zhigh)).value.dval", "low = (*(zlow)).value.dval", "low = (*(zstep)).value.dval", "low = (high)", "low = (low)", "low = (step)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (high)", "step = (low)", "step = (step)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "add_next_index_double(return_value, low)", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "high = (*zhigh).value.dval", "is_step_double = 1", "low = (*zlow).value.dval", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1712\", 7, &(err), sizeof (err), &(return_value), sizeof (return_value), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1712\", 7, &(err), sizeof (err), &(return_value), sizeof (return_value), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto err;\n", "if (__is_neg(\"\", \"L1712\", 7, &(err), sizeof (err), &(return_value), sizeof (return_value), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1712\", 7, &(err), sizeof (err), &(return_value), sizeof (return_value), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	2,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	3,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	4,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	5,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	6,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	7,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	8,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	9,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	10,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	11,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	12,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	13,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	14,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	15,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	16,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	17,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	18,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	19,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	20,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	21,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	22,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	23,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	24,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	25,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	26,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	27,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	28,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	29,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	30,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	31,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	32,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	33,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	34,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	35,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	36,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	37,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	38,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	39,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	40,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	41,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	42,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	43,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	44,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	45,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	46,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	47,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	48,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	49,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	50,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	51,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	52,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	53,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	54,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	55,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	56,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	57,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	58,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	59,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	60,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	61,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	62,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	63,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	64,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	65,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	66,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	67,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	68,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	69,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	70,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	71,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	72,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	73,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	74,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	75,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	76,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	77,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	78,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	79,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	80,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	81,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	82,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	83,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	84,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	85,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	86,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	87,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	88,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	89,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	90,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	91,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	92,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	93,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	94,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	95,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	96,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	97,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	98,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	99,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	100,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	101,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	102,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	103,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	104,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	105,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	106,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	107,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	108,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	109,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	110,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	111,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	112,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	113,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	114,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	115,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	116,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	117,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	118,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	119,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	120,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	121,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	122,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	123,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	124,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	125,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	126,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	127,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	128,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	129,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	130,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	131,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	132,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	133,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	134,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	135,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	136,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	137,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	138,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	139,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	140,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	141,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	142,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	143,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	144,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	145,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	146,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	147,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	148,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	149,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	150,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	151,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	152,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	153,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	154,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	155,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	156,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	157,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	158,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	159,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	160,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	161,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	162,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	163,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	164,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	165,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	166,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	167,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	168,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	169,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	170,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	171,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	172,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	173,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	174,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	175,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	176,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	177,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	178,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	179,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	180,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	181,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	182,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	183,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	184,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	185,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	186,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	187,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	188,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	189,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	190,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	191,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	192,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	193,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	194,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	195,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	196,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	197,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	198,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	199,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	200,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	201,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	202,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	203,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	204,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	205,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	206,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	207,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	208,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	209,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	210,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	211,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	212,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	213,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	214,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	215,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	216,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	217,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	218,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	219,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	220,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	221,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	222,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	223,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	224,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	225,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	226,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	227,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	228,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	229,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	230,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	231,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	232,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	233,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	234,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	235,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	236,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	237,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	238,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	239,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	240,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	241,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	242,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	243,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	244,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	245,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	246,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	247,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	248,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	249,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	250,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	251,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	252,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	253,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	254,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	255,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	256,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	257,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	258,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	259,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	260,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	261,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	262,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	263,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	264,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	265,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	266,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	267,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	268,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	269,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	270,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	271,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	272,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	273,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	274,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	275,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	276,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	277,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	278,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	279,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	280,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	281,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	282,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	283,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	284,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	285,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	286,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	287,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	288,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	289,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	290,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	291,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	292,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	293,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	294,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	295,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	296,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	297,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	298,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	299,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	300,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	301,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	302,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	303,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	304,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	305,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	306,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	307,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	308,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	309,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	310,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	311,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	312,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	313,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	314,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	315,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	316,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	317,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	318,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	319,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	320,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	321,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	322,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	323,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	324,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	325,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	326,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	327,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	328,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	329,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	330,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	331,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	332,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	333,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	334,
									"scores":	[-9.3540679623881573, -10.046639112188156, -9.8638560591881568, -9.8638560591881568, -9.6178171453881571, -9.8638560591881568, -9.6549175453881571]
								}, {
									"case":	335,
									"scores":	[-9.3540679623881573, -10.046639112188156, -9.8638560591881568, -9.8638560591881568, -9.6178171453881571, -9.8638560591881568, -9.6549175453881571]
								}, {
									"case":	336,
									"scores":	[-9.3540679623881573, -10.046639112188156, -9.8638560591881568, -9.8638560591881568, -9.6178171453881571, -9.8638560591881568, -9.6549175453881571]
								}, {
									"case":	337,
									"scores":	[-9.3550679623881567, -10.047639112188158, -9.8648560591881562, -9.8648560591881562, -9.6188171453881566, -9.8648560591881562, -9.6559175453881565]
								}]
						}, {
							"switch":	46,
							"types":	[[4], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [3]],
							"begin_line":	1712,
							"begin_column":	4,
							"end_line":	1715,
							"end_column":	4,
							"patch_codes":	["if (__is_neg(\"\", \"L1712\", 7, &(err), sizeof (err), &(return_value), sizeof (return_value), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht))) {\n    err = 1;\n    goto err;\n}\n", "if ((high - low < step || step <= 0) || __is_neg(\"\", \"L1712\", 7, &(err), sizeof (err), &(return_value), sizeof (return_value), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht))) {\n    err = 1;\n    goto err;\n}\n", "if (high - low < step) {\n    err = 1;\n    goto err;\n}\n", "if ((high - low < step || step <= 0) && !__is_neg(\"\", \"L1712\", 7, &(err), sizeof (err), &(return_value), sizeof (return_value), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht))) {\n    err = 1;\n    goto err;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.160868683428145, -5.7561192714281457, -6.1420282624281457, -6.1420282624281457, -5.384140162428146, -6.1420282624281457, -5.6784909624281461]
								}, {
									"case":	2,
									"scores":	[-4.3845724604281457, -3.979823048428146, -4.3657320394281456, -4.3657320394281456, -3.6078439394281459, -4.3657320394281456, -3.902194739428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-4.3845724604281457, -3.979823048428146, -4.3657320394281456, -4.3657320394281456, -3.6078439394281459, -4.3657320394281456, -3.902194739428146]
								}]
						}, {
							"switch":	47,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1712,
							"begin_column":	4,
							"end_line":	1715,
							"end_column":	4,
							"patch_codes":	["if (!__is_neg(\"\", \"L1712\", 7, &(err), sizeof (err), &(return_value), sizeof (return_value), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    if (high - low < step || step <= 0) {\n        err = 1;\n        goto err;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.5426431403881562, -9.1378937283881569, -9.523802719388156, -9.523802719388156, -8.7659146193881554, -9.523802719388156, -9.0602654193881555]
								}]
						}]
				}, {
					"line":	1716,
					"switches":	[{
							"switch":	49,
							"types":	[[], [], [], [], [334, 335, 336, 337, 338], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [], [], [], [288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], [], [], [], [], [], []],
							"begin_line":	1717,
							"begin_column":	3,
							"end_line":	1717,
							"end_column":	3,
							"patch_codes":	["memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_double((return_value), low)", "add_next_index_double((this_ptr), low)", "add_next_index_double((zhigh), low)", "add_next_index_double((zlow), low)", "add_next_index_double((zstep), low)", "add_next_index_null(*(return_value_ptr))", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "high = (*(return_value)).value.dval", "high = (*(this_ptr)).value.dval", "high = (*(zhigh)).value.dval", "high = (*(zlow)).value.dval", "high = (*(zstep)).value.dval", "high = (high)", "high = (low)", "high = (step)", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "low = (*(return_value)).value.dval", "low = (*(this_ptr)).value.dval", "low = (*(zhigh)).value.dval", "low = (*(zlow)).value.dval", "low = (*(zstep)).value.dval", "low = (high)", "low = (low)", "low = (step)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (high)", "step = (low)", "step = (step)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "add_next_index_double(return_value, low)", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "high = (*zhigh).value.dval", "is_step_double = 1", "low = (*zlow).value.dval", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1717\", 7, &(return_value), sizeof (return_value), &(err), sizeof (err), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    break;\n", "if (__is_neg(\"\", \"L1717\", 7, &(return_value), sizeof (return_value), &(err), sizeof (err), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1717\", 7, &(return_value), sizeof (return_value), &(err), sizeof (err), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto err;\n", "if (__is_neg(\"\", \"L1717\", 7, &(return_value), sizeof (return_value), &(err), sizeof (err), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1717\", 7, &(return_value), sizeof (return_value), &(err), sizeof (err), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	2,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	3,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	4,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	5,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	6,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	7,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	8,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	9,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	10,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	11,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	12,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	13,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	14,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	15,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	16,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	17,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	18,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	19,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	20,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	21,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	22,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	23,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	24,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	25,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	26,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	27,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	28,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	29,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	30,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	31,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	32,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	33,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	34,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	35,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	36,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	37,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	38,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	39,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	40,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	41,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	42,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	43,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	44,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	45,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	46,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	47,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	48,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	49,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	50,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	51,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	52,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	53,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	54,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	55,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	56,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	57,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	58,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	59,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	60,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	61,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	62,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	63,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	64,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	65,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	66,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	67,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	68,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	69,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	70,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	71,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	72,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	73,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	74,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	75,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	76,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	77,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	78,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	79,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	80,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	81,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	82,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	83,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	84,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	85,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	86,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	87,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	88,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	89,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	90,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	91,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	92,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	93,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	94,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	95,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	96,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	97,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	98,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	99,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	100,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	101,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	102,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	103,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	104,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	105,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	106,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	107,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	108,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	109,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	110,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	111,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	112,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	113,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	114,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	115,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	116,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	117,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	118,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	119,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	120,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	121,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	122,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	123,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	124,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	125,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	126,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	127,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	128,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	129,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	130,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	131,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	132,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	133,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	134,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	135,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	136,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	137,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	138,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	139,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	140,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	141,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	142,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	143,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	144,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	145,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	146,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	147,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	148,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	149,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	150,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	151,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	152,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	153,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	154,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	155,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	156,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	157,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	158,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	159,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	160,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	161,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	162,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	163,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	164,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	165,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	166,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	167,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	168,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	169,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	170,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	171,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	172,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	173,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	174,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	175,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	176,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	177,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	178,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	179,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	180,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	181,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	182,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	183,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	184,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	185,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	186,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	187,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	188,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	189,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	190,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	191,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	192,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	193,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	194,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	195,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	196,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	197,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	198,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	199,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	200,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	201,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	202,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	203,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	204,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	205,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	206,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	207,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	208,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	209,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	210,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	211,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	212,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	213,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	214,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	215,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	216,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	217,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	218,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	219,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	220,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	221,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	222,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	223,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	224,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	225,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	226,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	227,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	228,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	229,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	230,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	231,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	232,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	233,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	234,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	235,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	236,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	237,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	238,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	239,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	240,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	241,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	242,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	243,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	244,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	245,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	246,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	247,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	248,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	249,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	250,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	251,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	252,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	253,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	254,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	255,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	256,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	257,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	258,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	259,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	260,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	261,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	262,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	263,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	264,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	265,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	266,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	267,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	268,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	269,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	270,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	271,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	272,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	273,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	274,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	275,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	276,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	277,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	278,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	279,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	280,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	281,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	282,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	283,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	284,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	285,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	286,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	287,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	288,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	289,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	290,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	291,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	292,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	293,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	294,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	295,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	296,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	297,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	298,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	299,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	300,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	301,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	302,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	303,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	304,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	305,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	306,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	307,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	308,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	309,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	310,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	311,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	312,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	313,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	314,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	315,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	316,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	317,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	318,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	319,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	320,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	321,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	322,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	323,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	324,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	325,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	326,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	327,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	328,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	329,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	330,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	331,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	332,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	333,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	334,
									"scores":	[-7.0903479369531182, -7.6625165921531178, -7.9085555059531183, -7.9085555059531183, -7.6625165921531178, -7.9085555059531183, -7.6996169921531177]
								}, {
									"case":	335,
									"scores":	[-7.0893479369531178, -7.6615165921531183, -7.907555505953118, -7.907555505953118, -7.6615165921531183, -7.907555505953118, -7.6986169921531182]
								}, {
									"case":	336,
									"scores":	[-7.0893479369531178, -7.6615165921531183, -7.907555505953118, -7.907555505953118, -7.6615165921531183, -7.907555505953118, -7.6986169921531182]
								}, {
									"case":	337,
									"scores":	[-7.0893479369531178, -7.6615165921531183, -7.907555505953118, -7.907555505953118, -7.6615165921531183, -7.907555505953118, -7.6986169921531182]
								}, {
									"case":	338,
									"scores":	[-7.0903479369531182, -7.6625165921531178, -7.9085555059531183, -7.9085555059531183, -7.6625165921531178, -7.9085555059531183, -7.6996169921531177]
								}]
						}, {
							"switch":	50,
							"types":	[[], [], [1], [], [], [], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [], [3, 4, 5, 6], [], [], [], [], [], [], [], [2]],
							"begin_line":	1717,
							"begin_column":	5,
							"end_line":	1717,
							"end_column":	44,
							"patch_codes":	["if (!__is_neg(\"\", \"L1717\", 7, &(return_value), sizeof (return_value), &(err), sizeof (err), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    add_next_index_double(return_value, low);\n", "{\n}\n", "Debug(return_value, low)", "php_printf(return_value, low)", "printf(return_value, low)", "wprintf(return_value, low)", "add_next_index_double((&err), low)", "add_next_index_double((&high), low)", "add_next_index_double((&ht), low)", "add_next_index_double((&is_step_double), low)", "add_next_index_double((&low), low)", "add_next_index_double((&return_value), low)", "add_next_index_double((&return_value_ptr), low)", "add_next_index_double((&return_value_used), low)", "add_next_index_double((&step), low)", "add_next_index_double((&this_ptr), low)", "add_next_index_double((&zhigh), low)", "add_next_index_double((&zlow), low)", "add_next_index_double((&zstep), low)", "add_next_index_double((return_value), low)", "add_next_index_double((this_ptr), low)", "add_next_index_double((zhigh), low)", "add_next_index_double((zlow), low)", "add_next_index_double((zstep), low)", "add_next_index_double(return_value, (high))", "add_next_index_double(return_value, (low))", "add_next_index_double(return_value, (step))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.2273638047531179, -6.8885602047531185, -7.6464483047531182, -7.6464483047531182, -6.8885602047531185, -7.6464483047531182, -7.1829110047531177]
								}, {
									"case":	2,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	3,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	4,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	5,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	6,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	7,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	8,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	9,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	10,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	11,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	12,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	13,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	14,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	15,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	16,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	17,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	18,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	19,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	20,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	21,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	22,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	23,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	24,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	25,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	26,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	27,
									"scores":	[-6.4777668347531181]
								}]
						}]
				}, {
					"line":	1715,
					"switches":	[{
							"switch":	48,
							"types":	[[], [], [], [], [334, 335, 336, 337], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [], [], [], [288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], [], [], [], [], [], []],
							"begin_line":	1716,
							"begin_column":	2,
							"end_line":	1716,
							"end_column":	2,
							"patch_codes":	["memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_double((return_value), low)", "add_next_index_double((this_ptr), low)", "add_next_index_double((zhigh), low)", "add_next_index_double((zlow), low)", "add_next_index_double((zstep), low)", "add_next_index_null(*(return_value_ptr))", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "high = (*(return_value)).value.dval", "high = (*(this_ptr)).value.dval", "high = (*(zhigh)).value.dval", "high = (*(zlow)).value.dval", "high = (*(zstep)).value.dval", "high = (high)", "high = (low)", "high = (step)", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "low = (*(return_value)).value.dval", "low = (*(this_ptr)).value.dval", "low = (*(zhigh)).value.dval", "low = (*(zlow)).value.dval", "low = (*(zstep)).value.dval", "low = (high)", "low = (low)", "low = (step)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (high)", "step = (low)", "step = (step)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "add_next_index_double(return_value, low)", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "high = (*zhigh).value.dval", "is_step_double = 1", "low = (*zlow).value.dval", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1716\", 7, &(return_value), sizeof (return_value), &(err), sizeof (err), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1716\", 7, &(return_value), sizeof (return_value), &(err), sizeof (err), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto err;\n", "if (__is_neg(\"\", \"L1716\", 7, &(return_value), sizeof (return_value), &(err), sizeof (err), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1716\", 7, &(return_value), sizeof (return_value), &(err), sizeof (err), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	2,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	3,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	4,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	5,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	6,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	7,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	8,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	9,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	10,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	11,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	12,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	13,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	14,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	15,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	16,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	17,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	18,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	19,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	20,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	21,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	22,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	23,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	24,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	25,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	26,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	27,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	28,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	29,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	30,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	31,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	32,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	33,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	34,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	35,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	36,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	37,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	38,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	39,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	40,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	41,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	42,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	43,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	44,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	45,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	46,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	47,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	48,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	49,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	50,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	51,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	52,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	53,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	54,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	55,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	56,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	57,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	58,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	59,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	60,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	61,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	62,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	63,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	64,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	65,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	66,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	67,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	68,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	69,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	70,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	71,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	72,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	73,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	74,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	75,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	76,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	77,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	78,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	79,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	80,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	81,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	82,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	83,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	84,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	85,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	86,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	87,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	88,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	89,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	90,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	91,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	92,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	93,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	94,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	95,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	96,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	97,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	98,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	99,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	100,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	101,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	102,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	103,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	104,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	105,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	106,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	107,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	108,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	109,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	110,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	111,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	112,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	113,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	114,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	115,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	116,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	117,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	118,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	119,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	120,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	121,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	122,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	123,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	124,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	125,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	126,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	127,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	128,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	129,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	130,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	131,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	132,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	133,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	134,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	135,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	136,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	137,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	138,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	139,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	140,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	141,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	142,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	143,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	144,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	145,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	146,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	147,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	148,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	149,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	150,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	151,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	152,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	153,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	154,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	155,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	156,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	157,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	158,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	159,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	160,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	161,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	162,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	163,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	164,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	165,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	166,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	167,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	168,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	169,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	170,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	171,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	172,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	173,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	174,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	175,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	176,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	177,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	178,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	179,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	180,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	181,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	182,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	183,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	184,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	185,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	186,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	187,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	188,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	189,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	190,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	191,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	192,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	193,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	194,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	195,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	196,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	197,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	198,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	199,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	200,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	201,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	202,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	203,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	204,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	205,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	206,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	207,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	208,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	209,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	210,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	211,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	212,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	213,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	214,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	215,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	216,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	217,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	218,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	219,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	220,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	221,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	222,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	223,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	224,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	225,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	226,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	227,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	228,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	229,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	230,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	231,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	232,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	233,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	234,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	235,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	236,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	237,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	238,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	239,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	240,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	241,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	242,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	243,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	244,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	245,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	246,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	247,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	248,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	249,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	250,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	251,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	252,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	253,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	254,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	255,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	256,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	257,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	258,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	259,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	260,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	261,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	262,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	263,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	264,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	265,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	266,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	267,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	268,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	269,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	270,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	271,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	272,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	273,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	274,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	275,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	276,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	277,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	278,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	279,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	280,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	281,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	282,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	283,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	284,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	285,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	286,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	287,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	288,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	289,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	290,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	291,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	292,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	293,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	294,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	295,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	296,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	297,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	298,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	299,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	300,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	301,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	302,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	303,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	304,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	305,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	306,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	307,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	308,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	309,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	310,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	311,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	312,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	313,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	314,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	315,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	316,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	317,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	318,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	319,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	320,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	321,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	322,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	323,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	324,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	325,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	326,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	327,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	328,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	329,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	330,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	331,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	332,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	333,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	334,
									"scores":	[-8.1063107828706364, -7.427821273070637, -8.9245183518706366, -8.9245183518706366, -8.6784794380706369, -8.9245183518706366, -8.7155798380706369]
								}, {
									"case":	335,
									"scores":	[-8.1063107828706364, -7.427821273070637, -8.9245183518706366, -8.9245183518706366, -8.6784794380706369, -8.9245183518706366, -8.7155798380706369]
								}, {
									"case":	336,
									"scores":	[-8.1063107828706364, -7.427821273070637, -8.9245183518706366, -8.9245183518706366, -8.6784794380706369, -8.9245183518706366, -8.7155798380706369]
								}, {
									"case":	337,
									"scores":	[-8.10731078287064, -7.4288212730706373, -8.925518351870636, -8.925518351870636, -8.6794794380706364, -8.925518351870636, -8.7165798380706363]
								}]
						}, {
							"switch":	51,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1716,
							"begin_column":	4,
							"end_line":	1718,
							"end_column":	4,
							"patch_codes":	["if (!__is_neg(\"\", \"L1716\", 7, &(return_value), sizeof (return_value), &(err), sizeof (err), &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    for (; low <= (high + 1.0000000000000001E-15); low += step) {\n        add_next_index_double(return_value, low);\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.39288351207064, -8.08883205207064, -8.81196801207064, -8.81196801207064, -8.05407991207064, -8.81196801207064, -8.34843071207064]
								}]
						}]
				}, {
					"line":	1710,
					"switches":	[{
							"switch":	43,
							"types":	[[], [], [], [], [334, 335, 336, 337], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [], [], [], [288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], [], [], [], [], [], []],
							"begin_line":	1711,
							"begin_column":	8,
							"end_line":	1711,
							"end_column":	8,
							"patch_codes":	["memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_double((return_value), low)", "add_next_index_double((this_ptr), low)", "add_next_index_double((zhigh), low)", "add_next_index_double((zlow), low)", "add_next_index_double((zstep), low)", "add_next_index_null(*(return_value_ptr))", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "high = (*(return_value)).value.dval", "high = (*(this_ptr)).value.dval", "high = (*(zhigh)).value.dval", "high = (*(zlow)).value.dval", "high = (*(zstep)).value.dval", "high = (high)", "high = (low)", "high = (step)", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "low = (*(return_value)).value.dval", "low = (*(this_ptr)).value.dval", "low = (*(zhigh)).value.dval", "low = (*(zlow)).value.dval", "low = (*(zstep)).value.dval", "low = (high)", "low = (low)", "low = (step)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (high)", "step = (low)", "step = (step)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "add_next_index_double(return_value, low)", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "high = (*zhigh).value.dval", "is_step_double = 1", "low = (*zlow).value.dval", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1711\", 7, &(return_value), sizeof (return_value), &(err), sizeof (err), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1711\", 7, &(return_value), sizeof (return_value), &(err), sizeof (err), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto err;\n", "if (__is_neg(\"\", \"L1711\", 7, &(return_value), sizeof (return_value), &(err), sizeof (err), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1711\", 7, &(return_value), sizeof (return_value), &(err), sizeof (err), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	2,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	3,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	4,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	5,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	6,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	7,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	8,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	9,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	10,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	11,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	12,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	13,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	14,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	15,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	16,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	17,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	18,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	19,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	20,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	21,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	22,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	23,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	24,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	25,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	26,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	27,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	28,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	29,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	30,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	31,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	32,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	33,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	34,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	35,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	36,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	37,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	38,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	39,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	40,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	41,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	42,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	43,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	44,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	45,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	46,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	47,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	48,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	49,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	50,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	51,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	52,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	53,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	54,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	55,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	56,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	57,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	58,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	59,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	60,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	61,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	62,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	63,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	64,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	65,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	66,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	67,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	68,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	69,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	70,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	71,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	72,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	73,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	74,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	75,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	76,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	77,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	78,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	79,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	80,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	81,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	82,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	83,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	84,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	85,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	86,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	87,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	88,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	89,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	90,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	91,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	92,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	93,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	94,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	95,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	96,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	97,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	98,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	99,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	100,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	101,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	102,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	103,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	104,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	105,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	106,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	107,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	108,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	109,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	110,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	111,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	112,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	113,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	114,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	115,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	116,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	117,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	118,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	119,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	120,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	121,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	122,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	123,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	124,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	125,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	126,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	127,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	128,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	129,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	130,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	131,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	132,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	133,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	134,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	135,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	136,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	137,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	138,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	139,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	140,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	141,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	142,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	143,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	144,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	145,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	146,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	147,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	148,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	149,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	150,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	151,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	152,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	153,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	154,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	155,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	156,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	157,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	158,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	159,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	160,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	161,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	162,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	163,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	164,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	165,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	166,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	167,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	168,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	169,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	170,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	171,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	172,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	173,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	174,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	175,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	176,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	177,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	178,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	179,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	180,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	181,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	182,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	183,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	184,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	185,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	186,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	187,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	188,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	189,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	190,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	191,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	192,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	193,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	194,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	195,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	196,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	197,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	198,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	199,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	200,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	201,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	202,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	203,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	204,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	205,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	206,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	207,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	208,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	209,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	210,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	211,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	212,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	213,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	214,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	215,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	216,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	217,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	218,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	219,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	220,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	221,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	222,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	223,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	224,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	225,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	226,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	227,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	228,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	229,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	230,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	231,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	232,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	233,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	234,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	235,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	236,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	237,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	238,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	239,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	240,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	241,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	242,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	243,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	244,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	245,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	246,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	247,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	248,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	249,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	250,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	251,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	252,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	253,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	254,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	255,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	256,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	257,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	258,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	259,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	260,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	261,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	262,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	263,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	264,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	265,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	266,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	267,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	268,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	269,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	270,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	271,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	272,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	273,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	274,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	275,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	276,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	277,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	278,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	279,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	280,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	281,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	282,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	283,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	284,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	285,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	286,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	287,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	288,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	289,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	290,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	291,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	292,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	293,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	294,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	295,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	296,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	297,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	298,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	299,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	300,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	301,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	302,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	303,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	304,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	305,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	306,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	307,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	308,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	309,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	310,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	311,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	312,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	313,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	314,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	315,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	316,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	317,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	318,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	319,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	320,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	321,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	322,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	323,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	324,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	325,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	326,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	327,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	328,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	329,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	330,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	331,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	332,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	333,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	334,
									"scores":	[-7.6459141975056761, -7.9543336697056759, -8.4641217665056754, -8.4641217665056754, -8.2180828527056757, -8.4641217665056754, -8.2551832527056757]
								}, {
									"case":	335,
									"scores":	[-7.6459141975056761, -7.9543336697056759, -8.4641217665056754, -8.4641217665056754, -8.2180828527056757, -8.4641217665056754, -8.2551832527056757]
								}, {
									"case":	336,
									"scores":	[-7.6459141975056761, -7.9543336697056759, -8.4641217665056754, -8.4641217665056754, -8.2180828527056757, -8.4641217665056754, -8.2551832527056757]
								}, {
									"case":	337,
									"scores":	[-7.6469141975056765, -7.9553336697056762, -8.4651217665056766, -8.4651217665056766, -8.219082852705677, -8.4651217665056766, -8.2561832527056769]
								}]
						}, {
							"switch":	44,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1711,
							"begin_column":	10,
							"end_line":	1721,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L1711\", 7, &(return_value), sizeof (return_value), &(err), sizeof (err), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht))) {\n    if (high - low < step || step <= 0) {\n        err = 1;\n        goto err;\n    }\n    for (; low <= (high + 1.0000000000000001E-15); low += step) {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    add_next_index_double(return_value, low);\n}\n", "if ((high > low) || __is_neg(\"\", \"L1711\", 7, &(return_value), sizeof (return_value), &(err), sizeof (err), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht))) {\n    if (high - low < step || step <= 0) {\n        err = 1;\n        goto err;\n    }\n    for (; low <= (high + 1.0000000000000001E-15); low += step) {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    add_next_index_double(return_value, low);\n}\n", "if ((high > low) && !__is_neg(\"\", \"L1711\", 7, &(return_value), sizeof (return_value), &(err), sizeof (err), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht))) {\n    if (high - low < step || step <= 0) {\n        err = 1;\n        goto err;\n    }\n    for (; low <= (high + 1.0000000000000001E-15); low += step) {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    add_next_index_double(return_value, low);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.5117578068281468, -4.9496827278281463, -4.9308423068281462, -4.9308423068281462, -4.1729542068281464, -4.9308423068281462, -4.4673050068281466]
								}, {
									"case":	2,
									"scores":	[-4.3612628739281458, -4.7991877949281463, -4.7803473739281461, -4.7803473739281461, -4.0224592739281455, -4.7803473739281461, -4.3168100739281456]
								}, {
									"case":	3,
									"scores":	[-4.3612628739281458, -4.7991877949281463, -4.7803473739281461, -4.7803473739281461, -4.0224592739281455, -4.7803473739281461, -4.3168100739281456]
								}]
						}, {
							"switch":	52,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1711,
							"begin_column":	10,
							"end_line":	1721,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L1711\", 7, &(return_value), sizeof (return_value), &(err), sizeof (err), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    if (high > low) {\n        if (high - low < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= (high + 1.0000000000000001E-15); low += step) {\n            add_next_index_double(return_value, low);\n        }\n    } else {\n        add_next_index_double(return_value, low);\n    }\n", "if (!__is_neg(\"\", \"L1711\", 7, &(return_value), sizeof (return_value), &(err), sizeof (err), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)) && (high > low)) {\n    if (high - low < step || step <= 0) {\n        err = 1;\n        goto err;\n    }\n    for (; low <= (high + 1.0000000000000001E-15); low += step) {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    add_next_index_double(return_value, low);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.177621926705676, -8.6155468477056765, -8.5967064267056763, -8.5967064267056763, -7.8388183267056766, -8.5967064267056763, -8.1331691267056758]
								}, {
									"case":	2,
									"scores":	[-8.59791512520568, -9.035840046205676, -9.01699962520568, -9.01699962520568, -8.259111525205677, -9.01699962520568, -8.5534623252056772]
								}]
						}]
				}, {
					"line":	1702,
					"switches":	[{
							"switch":	41,
							"types":	[[], [], [], [], [334, 335, 336, 337], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [], [], [], [288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], [], [], [], [], [], []],
							"begin_line":	1703,
							"begin_column":	1,
							"end_line":	1703,
							"end_column":	1,
							"patch_codes":	["memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_double((return_value), low)", "add_next_index_double((this_ptr), low)", "add_next_index_double((zhigh), low)", "add_next_index_double((zlow), low)", "add_next_index_double((zstep), low)", "add_next_index_null(*(return_value_ptr))", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "high = (*(return_value)).value.dval", "high = (*(this_ptr)).value.dval", "high = (*(zhigh)).value.dval", "high = (*(zlow)).value.dval", "high = (*(zstep)).value.dval", "high = (high)", "high = (low)", "high = (step)", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "low = (*(return_value)).value.dval", "low = (*(this_ptr)).value.dval", "low = (*(zhigh)).value.dval", "low = (*(zlow)).value.dval", "low = (*(zstep)).value.dval", "low = (high)", "low = (low)", "low = (step)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (high)", "step = (low)", "step = (step)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "add_next_index_double(return_value, low)", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "high = (*zhigh).value.dval", "is_step_double = 1", "low = (*zlow).value.dval", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1703\", 7, &(zhigh), sizeof (zhigh), &(err), sizeof (err), &(zlow), sizeof (zlow), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1703\", 7, &(zhigh), sizeof (zhigh), &(err), sizeof (err), &(zlow), sizeof (zlow), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto err;\n", "if (__is_neg(\"\", \"L1703\", 7, &(zhigh), sizeof (zhigh), &(err), sizeof (err), &(zlow), sizeof (zlow), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1703\", 7, &(zhigh), sizeof (zhigh), &(err), sizeof (err), &(zlow), sizeof (zlow), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	2,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	3,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	4,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	5,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	6,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	7,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	8,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	9,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	10,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	11,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	12,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	13,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	14,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	15,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	16,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	17,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	18,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	19,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	20,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	21,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	22,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	23,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	24,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	25,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	26,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	27,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	28,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	29,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	30,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	31,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	32,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	33,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	34,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	35,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	36,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	37,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	38,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	39,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	40,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	41,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	42,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	43,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	44,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	45,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	46,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	47,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	48,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	49,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	50,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	51,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	52,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	53,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	54,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	55,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	56,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	57,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	58,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	59,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	60,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	61,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	62,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	63,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	64,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	65,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	66,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	67,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	68,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	69,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	70,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	71,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	72,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	73,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	74,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	75,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	76,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	77,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	78,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	79,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	80,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	81,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	82,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	83,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	84,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	85,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	86,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	87,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	88,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	89,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	90,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	91,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	92,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	93,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	94,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	95,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	96,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	97,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	98,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	99,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	100,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	101,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	102,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	103,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	104,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	105,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	106,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	107,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	108,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	109,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	110,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	111,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	112,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	113,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	114,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	115,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	116,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	117,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	118,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	119,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	120,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	121,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	122,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	123,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	124,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	125,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	126,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	127,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	128,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	129,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	130,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	131,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	132,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	133,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	134,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	135,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	136,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	137,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	138,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	139,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	140,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	141,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	142,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	143,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	144,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	145,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	146,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	147,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	148,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	149,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	150,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	151,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	152,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	153,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	154,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	155,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	156,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	157,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	158,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	159,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	160,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	161,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	162,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	163,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	164,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	165,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	166,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	167,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	168,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	169,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	170,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	171,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	172,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	173,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	174,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	175,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	176,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	177,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	178,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	179,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	180,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	181,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	182,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	183,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	184,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	185,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	186,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	187,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	188,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	189,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	190,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	191,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	192,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	193,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	194,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	195,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	196,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	197,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	198,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	199,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	200,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	201,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	202,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	203,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	204,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	205,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	206,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	207,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	208,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	209,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	210,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	211,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	212,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	213,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	214,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	215,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	216,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	217,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	218,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	219,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	220,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	221,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	222,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	223,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	224,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	225,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	226,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	227,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	228,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	229,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	230,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	231,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	232,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	233,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	234,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	235,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	236,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	237,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	238,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	239,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	240,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	241,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	242,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	243,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	244,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	245,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	246,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	247,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	248,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	249,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	250,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	251,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	252,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	253,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	254,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	255,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	256,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	257,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	258,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	259,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	260,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	261,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	262,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	263,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	264,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	265,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	266,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	267,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	268,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	269,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	270,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	271,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	272,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	273,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	274,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	275,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	276,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	277,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	278,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	279,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	280,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	281,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	282,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	283,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	284,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	285,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	286,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	287,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	288,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	289,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	290,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	291,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	292,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	293,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	294,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	295,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	296,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	297,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	298,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	299,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	300,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	301,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	302,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	303,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	304,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	305,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	306,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	307,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	308,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	309,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	310,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	311,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	312,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	313,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	314,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	315,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	316,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	317,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	318,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	319,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	320,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	321,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	322,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	323,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	324,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	325,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	326,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	327,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	328,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	329,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	330,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	331,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	332,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	333,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	334,
									"scores":	[-9.3807756738231944, -8.7558953770231955, -9.3606615938231954, -8.4474759048231967, -9.0196445600231954, -9.265683473823195, -9.0567449600231953]
								}, {
									"case":	335,
									"scores":	[-9.3807756738231944, -8.7558953770231955, -9.3606615938231954, -8.4474759048231967, -9.0196445600231954, -9.265683473823195, -9.0567449600231953]
								}, {
									"case":	336,
									"scores":	[-9.3807756738231944, -8.7558953770231955, -9.3606615938231954, -8.4474759048231967, -9.0196445600231954, -9.265683473823195, -9.0567449600231953]
								}, {
									"case":	337,
									"scores":	[-9.3817756738231957, -8.756895377023195, -9.3616615938231966, -8.4484759048231961, -9.0206445600231948, -9.2666834738231962, -9.0577449600231965]
								}]
						}, {
							"switch":	42,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1703,
							"begin_column":	3,
							"end_line":	1721,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L1703\", 7, &(zhigh), sizeof (zhigh), &(err), sizeof (err), &(zlow), sizeof (zlow), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht))) {\n    if (low - high < step || step <= 0) {\n        err = 1;\n        goto err;\n    }\n    for (; low >= (high - 1.0000000000000001E-15); low -= step) {\n        add_next_index_double(return_value, low);\n    }\n} else if (high > low) {\n    if (high - low < step || step <= 0) {\n        err = 1;\n        goto err;\n    }\n    for (; low <= (high + 1.0000000000000001E-15); low += step) {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    add_next_index_double(return_value, low);\n}\n", "if ((low > high) || __is_neg(\"\", \"L1703\", 7, &(zhigh), sizeof (zhigh), &(err), sizeof (err), &(zlow), sizeof (zlow), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht))) {\n    if (low - high < step || step <= 0) {\n        err = 1;\n        goto err;\n    }\n    for (; low >= (high - 1.0000000000000001E-15); low -= step) {\n        add_next_index_double(return_value, low);\n    }\n} else if (high > low) {\n    if (high - low < step || step <= 0) {\n        err = 1;\n        goto err;\n    }\n    for (; low <= (high + 1.0000000000000001E-15); low += step) {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    add_next_index_double(return_value, low);\n}\n", "if ((low > high) && !__is_neg(\"\", \"L1703\", 7, &(zhigh), sizeof (zhigh), &(err), sizeof (err), &(zlow), sizeof (zlow), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht))) {\n    if (low - high < step || step <= 0) {\n        err = 1;\n        goto err;\n    }\n    for (; low >= (high - 1.0000000000000001E-15); low -= step) {\n        add_next_index_double(return_value, low);\n    }\n} else if (high > low) {\n    if (high - low < step || step <= 0) {\n        err = 1;\n        goto err;\n    }\n    for (; low <= (high + 1.0000000000000001E-15); low += step) {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    add_next_index_double(return_value, low);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.0974660108281462, -7.3213828753281449, -7.0084831648281458, -6.8834579543281453, -6.5446543543281459, -7.3025424543281456, -6.839005154328146]
								}, {
									"case":	2,
									"scores":	[-5.080064573428146, -5.3039814379281456, -4.9910817274281456, -4.866056516928146, -4.5272529169281457, -5.2851410169281454, -4.8216037169281458]
								}, {
									"case":	3,
									"scores":	[-5.080064573428146, -5.3039814379281456, -4.9910817274281456, -4.866056516928146, -4.5272529169281457, -5.2851410169281454, -4.8216037169281458]
								}]
						}, {
							"switch":	53,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1703,
							"begin_column":	3,
							"end_line":	1721,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L1703\", 7, &(zhigh), sizeof (zhigh), &(err), sizeof (err), &(zlow), sizeof (zlow), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    if (low > high) {\n        if (low - high < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= (high - 1.0000000000000001E-15); low -= step) {\n            add_next_index_double(return_value, low);\n        }\n    } else if (high > low) {\n        if (high - low < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= (high + 1.0000000000000001E-15); low += step) {\n            add_next_index_double(return_value, low);\n        }\n    } else {\n        add_next_index_double(return_value, low);\n    }\n", "if (!__is_neg(\"\", \"L1703\", 7, &(zhigh), sizeof (zhigh), &(err), sizeof (err), &(zlow), sizeof (zlow), &(return_value), sizeof (return_value), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)) && (low > high)) {\n    if (low - high < step || step <= 0) {\n        err = 1;\n        goto err;\n    }\n    for (; low >= (high - 1.0000000000000001E-15); low -= step) {\n        add_next_index_double(return_value, low);\n    }\n} else if (high > low) {\n    if (high - low < step || step <= 0) {\n        err = 1;\n        goto err;\n    }\n    for (; low <= (high + 1.0000000000000001E-15); low += step) {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    add_next_index_double(return_value, low);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.0913516905231955, -9.3152685550231951, -9.0023688445231969, -8.8773436340231964, -8.5385400340231961, -9.2964281340231949, -8.8328908340231962]
								}, {
									"case":	2,
									"scores":	[-9.652723809023195, -9.8766406735231946, -9.5637409630231947, -9.4387157525231959, -9.0999121525231956, -9.8578002525231962, -9.3942629525231958]
								}]
						}]
				}, {
					"line":	1694,
					"switches":	[{
							"switch":	32,
							"types":	[[], [], [], [], [310, 311, 312, 313], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [], [], [], [267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309], [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], [], [], [], [], [], []],
							"begin_line":	1695,
							"begin_column":	7,
							"end_line":	1695,
							"end_column":	7,
							"patch_codes":	["memset(&(*zhigh), 0, sizeof (*(&(*zhigh))))", "memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow), 0, sizeof (*(&(*zlow))))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_null(*(return_value_ptr))", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (step)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "is_step_double = 1", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1695\", 13, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1695\", 13, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    goto err;\n", "if (__is_neg(\"\", \"L1695\", 13, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1695\", 13, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	2,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	3,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	4,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	5,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	6,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	7,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	8,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	9,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	10,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	11,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	12,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	13,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	14,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	15,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	16,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	17,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	18,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	19,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	20,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	21,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	22,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	23,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	24,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	25,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	26,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	27,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	28,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	29,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	30,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	31,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	32,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	33,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	34,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	35,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	36,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	37,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	38,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	39,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	40,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	41,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	42,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	43,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	44,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	45,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	46,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	47,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	48,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	49,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	50,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	51,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	52,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	53,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	54,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	55,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	56,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	57,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	58,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	59,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	60,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	61,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	62,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	63,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	64,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	65,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	66,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	67,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	68,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	69,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	70,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	71,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	72,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	73,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	74,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	75,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	76,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	77,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	78,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	79,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	80,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	81,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	82,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	83,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	84,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	85,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	86,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	87,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	88,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	89,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	90,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	91,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	92,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	93,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	94,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	95,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	96,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	97,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	98,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	99,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	100,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	101,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	102,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	103,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	104,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	105,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	106,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	107,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	108,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	109,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	110,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	111,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	112,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	113,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	114,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	115,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	116,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	117,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	118,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	119,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	120,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	121,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	122,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	123,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	124,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	125,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	126,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	127,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	128,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	129,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	130,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	131,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	132,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	133,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	134,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	135,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	136,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	137,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	138,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	139,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	140,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	141,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	142,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	143,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	144,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	145,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	146,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	147,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	148,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	149,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	150,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	151,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	152,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	153,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	154,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	155,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	156,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	157,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	158,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	159,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	160,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	161,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	162,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	163,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	164,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	165,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	166,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	167,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	168,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	169,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	170,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	171,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	172,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	173,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	174,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	175,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	176,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	177,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	178,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	179,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	180,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	181,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	182,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	183,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	184,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	185,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	186,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	187,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	188,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	189,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	190,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	191,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	192,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	193,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	194,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	195,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	196,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	197,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	198,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	199,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	200,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	201,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	202,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	203,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	204,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	205,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	206,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	207,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	208,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	209,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	210,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	211,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	212,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	213,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	214,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	215,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	216,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	217,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	218,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	219,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	220,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	221,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	222,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	223,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	224,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	225,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	226,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	227,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	228,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	229,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	230,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	231,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	232,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	233,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	234,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	235,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	236,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	237,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	238,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	239,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	240,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	241,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	242,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	243,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	244,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	245,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	246,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	247,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	248,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	249,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	250,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	251,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	252,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	253,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	254,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	255,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	256,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	257,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	258,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	259,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	260,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	261,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	262,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	263,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	264,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	265,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	266,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	267,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	268,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	269,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	270,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	271,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	272,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	273,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	274,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	275,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	276,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	277,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	278,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	279,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	280,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	281,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	282,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	283,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	284,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	285,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	286,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	287,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	288,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	289,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	290,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	291,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	292,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	293,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	294,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	295,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	296,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	297,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	298,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	299,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	300,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	301,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	302,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	303,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	304,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	305,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	306,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	307,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	308,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	309,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	310,
									"scores":	[-7.6640770738743642, -7.665402043874364, -9.4689352990743636, -10.249921093074363, -10.249921093074363, -8.8967666438743649, -9.2051861160743638, -9.7149742128743632, -9.5060356990743635, -10.283081473074365, -10.283081473074365, -10.283081473074365, -10.283081473074365]
								}, {
									"case":	311,
									"scores":	[-7.6640770738743642, -7.665402043874364, -9.4689352990743636, -10.249921093074363, -10.249921093074363, -8.8967666438743649, -9.2051861160743638, -9.7149742128743632, -9.5060356990743635, -10.283081473074365, -10.283081473074365, -10.283081473074365, -10.283081473074365]
								}, {
									"case":	312,
									"scores":	[-7.6640770738743642, -7.665402043874364, -9.4689352990743636, -10.249921093074363, -10.249921093074363, -8.8967666438743649, -9.2051861160743638, -9.7149742128743632, -9.5060356990743635, -10.283081473074365, -10.283081473074365, -10.283081473074365, -10.283081473074365]
								}, {
									"case":	313,
									"scores":	[-7.6650770738743645, -7.6664020438743643, -9.4699352990743648, -10.250921093074364, -10.250921093074364, -8.8977666438743643, -9.2061861160743632, -9.7159742128743645, -9.5070356990743647, -10.284081473074364, -10.284081473074364, -10.284081473074364, -10.284081473074364]
								}]
						}, {
							"switch":	33,
							"types":	[[6], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [3, 4, 5]],
							"begin_line":	1695,
							"begin_column":	9,
							"end_line":	1751,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L1695\", 13, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc))) {\n    double low, high;\n  double_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    if (low > high) {\n        if (low - high < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= (high - 1.0000000000000001E-15); low -= step) {\n            add_next_index_double(return_value, low);\n        }\n    } else if (high > low) {\n        if (high - low < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= (high + 1.0000000000000001E-15); low += step) {\n            add_next_index_double(return_value, low);\n        }\n    } else {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    double low, high;\n    long lstep;\n  long_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    lstep = (long)step;\n    if (low > high) {\n        if (low - high < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= high; low -= lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else if (high > low) {\n        if (high - low < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= high; low += lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else {\n        add_next_index_long(return_value, (long)low);\n    }\n}\n", "if (((*zlow).type == 2 || (*zhigh).type == 2 || is_step_double) || __is_neg(\"\", \"L1695\", 13, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc))) {\n    double low, high;\n  double_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    if (low > high) {\n        if (low - high < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= (high - 1.0000000000000001E-15); low -= step) {\n            add_next_index_double(return_value, low);\n        }\n    } else if (high > low) {\n        if (high - low < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= (high + 1.0000000000000001E-15); low += step) {\n            add_next_index_double(return_value, low);\n        }\n    } else {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    double low, high;\n    long lstep;\n  long_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    lstep = (long)step;\n    if (low > high) {\n        if (low - high < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= high; low -= lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else if (high > low) {\n        if (high - low < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= high; low += lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else {\n        add_next_index_long(return_value, (long)low);\n    }\n}\n", "if ((*zhigh).type == 2 || is_step_double) {\n    double low, high;\n  double_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    if (low > high) {\n        if (low - high < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= (high - 1.0000000000000001E-15); low -= step) {\n            add_next_index_double(return_value, low);\n        }\n    } else if (high > low) {\n        if (high - low < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= (high + 1.0000000000000001E-15); low += step) {\n            add_next_index_double(return_value, low);\n        }\n    } else {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    double low, high;\n    long lstep;\n  long_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    lstep = (long)step;\n    if (low > high) {\n        if (low - high < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= high; low -= lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else if (high > low) {\n        if (high - low < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= high; low += lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else {\n        add_next_index_long(return_value, (long)low);\n    }\n}\n", "if ((*zlow).type == 2 || (*zhigh).type == 2) {\n    double low, high;\n  double_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    if (low > high) {\n        if (low - high < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= (high - 1.0000000000000001E-15); low -= step) {\n            add_next_index_double(return_value, low);\n        }\n    } else if (high > low) {\n        if (high - low < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= (high + 1.0000000000000001E-15); low += step) {\n            add_next_index_double(return_value, low);\n        }\n    } else {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    double low, high;\n    long lstep;\n  long_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    lstep = (long)step;\n    if (low > high) {\n        if (low - high < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= high; low -= lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else if (high > low) {\n        if (high - low < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= high; low += lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else {\n        add_next_index_long(return_value, (long)low);\n    }\n}\n", "if ((*zlow).type == 2 || is_step_double) {\n    double low, high;\n  double_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    if (low > high) {\n        if (low - high < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= (high - 1.0000000000000001E-15); low -= step) {\n            add_next_index_double(return_value, low);\n        }\n    } else if (high > low) {\n        if (high - low < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= (high + 1.0000000000000001E-15); low += step) {\n            add_next_index_double(return_value, low);\n        }\n    } else {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    double low, high;\n    long lstep;\n  long_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    lstep = (long)step;\n    if (low > high) {\n        if (low - high < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= high; low -= lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else if (high > low) {\n        if (high - low < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= high; low += lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else {\n        add_next_index_long(return_value, (long)low);\n    }\n}\n", "if (((*zlow).type == 2 || (*zhigh).type == 2 || is_step_double) && !__is_neg(\"\", \"L1695\", 13, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc))) {\n    double low, high;\n  double_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    if (low > high) {\n        if (low - high < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= (high - 1.0000000000000001E-15); low -= step) {\n            add_next_index_double(return_value, low);\n        }\n    } else if (high > low) {\n        if (high - low < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= (high + 1.0000000000000001E-15); low += step) {\n            add_next_index_double(return_value, low);\n        }\n    } else {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    double low, high;\n    long lstep;\n  long_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    lstep = (long)step;\n    if (low > high) {\n        if (low - high < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= high; low -= lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else if (high > low) {\n        if (high - low < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= high; low += lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else {\n        add_next_index_long(return_value, (long)low);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[0.65945361267185776, 0.66046389667185723, -0.98837829332814264, 0.61076689667185624, 0.61076689667185624, -1.3271818933281425, -1.7651068143281452, -1.7462663933281428, -1.2827290933281428, -1.5132231033281425, -1.5132231033281425, -1.5132231033281425, -1.5132231033281425]
								}, {
									"case":	2,
									"scores":	[-1.6697464594281453, -1.6687361754281458, -3.3175783654281457, -1.7184331754281454, -1.7184331754281454, -3.656381965428146, -4.0943068864281456, -4.0754664654281454, -3.6119291654281458, -3.8424231754281459, -3.8424231754281459, -3.8424231754281459, -3.8424231754281459]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-1.6697464594281453, -1.6687361754281458, -3.3175783654281457, -1.7184331754281454, -1.7184331754281454, -3.656381965428146, -4.0943068864281456, -4.0754664654281454, -3.6119291654281458, -3.8424231754281459, -3.8424231754281459, -3.8424231754281459, -3.8424231754281459]
								}]
						}, {
							"switch":	54,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1695,
							"begin_column":	9,
							"end_line":	1751,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L1695\", 13, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    if ((*zlow).type == 2 || (*zhigh).type == 2 || is_step_double) {\n        double low, high;\n      double_str:\n        convert_to_double(zlow);\n        convert_to_double(zhigh);\n        low = (*zlow).value.dval;\n        high = (*zhigh).value.dval;\n        if (low > high) {\n            if (low - high < step || step <= 0) {\n                err = 1;\n                goto err;\n            }\n            for (; low >= (high - 1.0000000000000001E-15); low -= step) {\n                add_next_index_double(return_value, low);\n            }\n        } else if (high > low) {\n            if (high - low < step || step <= 0) {\n                err = 1;\n                goto err;\n            }\n            for (; low <= (high + 1.0000000000000001E-15); low += step) {\n                add_next_index_double(return_value, low);\n            }\n        } else {\n            add_next_index_double(return_value, low);\n        }\n    } else {\n        double low, high;\n        long lstep;\n      long_str:\n        convert_to_double(zlow);\n        convert_to_double(zhigh);\n        low = (*zlow).value.dval;\n        high = (*zhigh).value.dval;\n        lstep = (long)step;\n        if (low > high) {\n            if (low - high < lstep || lstep <= 0) {\n                err = 1;\n                goto err;\n            }\n            for (; low >= high; low -= lstep) {\n                add_next_index_long(return_value, (long)low);\n            }\n        } else if (high > low) {\n            if (high - low < lstep || lstep <= 0) {\n                err = 1;\n                goto err;\n            }\n            for (; low <= high; low += lstep) {\n                add_next_index_long(return_value, (long)low);\n            }\n        } else {\n            add_next_index_long(return_value, (long)low);\n        }\n    }\n", "if (!__is_neg(\"\", \"L1695\", 13, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &(is_step_double), sizeof (is_step_double), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &(err), sizeof (err), &(zstep), sizeof (zstep), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)) && ((*zlow).type == 2 || (*zhigh).type == 2 || is_step_double)) {\n    double low, high;\n  double_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    if (low > high) {\n        if (low - high < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= (high - 1.0000000000000001E-15); low -= step) {\n            add_next_index_double(return_value, low);\n        }\n    } else if (high > low) {\n        if (high - low < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= (high + 1.0000000000000001E-15); low += step) {\n            add_next_index_double(return_value, low);\n        }\n    } else {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    double low, high;\n    long lstep;\n  long_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    lstep = (long)step;\n    if (low > high) {\n        if (low - high < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= high; low -= lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else if (high > low) {\n        if (high - low < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= high; low += lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else {\n        add_next_index_long(return_value, (long)low);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.441838867074364, -7.4408285830743646, -9.0896707730743636, -7.4905255830743638, -7.4905255830743638, -9.4284743730743639, -9.8663992940743643, -9.8475588730743642, -9.3840215730743637, -9.6145155830743647, -9.6145155830743647, -9.6145155830743647, -9.6145155830743647]
								}, {
									"case":	2,
									"scores":	[-5.5066126570743634, -5.505602373074364, -7.1544445630743638, -5.5552993730743632, -5.5552993730743632, -7.4932481630743641, -7.9311730840743637, -7.9123326630743636, -7.448795363074364, -7.6792893730743641, -7.6792893730743641, -7.6792893730743641, -7.6792893730743641]
								}]
						}]
				}, {
					"line":	1645,
					"switches":	[{
							"switch":	21,
							"types":	[[], [], [], [], [310, 311, 312, 313], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [], [], [], [267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309], [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], [], [], [], [], [], []],
							"begin_line":	1646,
							"begin_column":	0,
							"end_line":	1646,
							"end_column":	0,
							"patch_codes":	["memset(&(*zhigh), 0, sizeof (*(&(*zhigh))))", "memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow), 0, sizeof (*(&(*zlow))))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_null(*(return_value_ptr))", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (step)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "is_step_double = 1", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1646\", 17, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &((*zlow).value.str.len), sizeof ((*zlow).value.str.len), &((*zhigh).value.str.len), sizeof ((*zhigh).value.str.len), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &((*zlow).value.str.val), sizeof ((*zlow).value.str.val), &((*zhigh).value.str.val), sizeof ((*zhigh).value.str.val), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(err), sizeof (err), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1646\", 17, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &((*zlow).value.str.len), sizeof ((*zlow).value.str.len), &((*zhigh).value.str.len), sizeof ((*zhigh).value.str.len), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &((*zlow).value.str.val), sizeof ((*zlow).value.str.val), &((*zhigh).value.str.val), sizeof ((*zhigh).value.str.val), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(err), sizeof (err), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    goto err;\n", "if (__is_neg(\"\", \"L1646\", 17, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &((*zlow).value.str.len), sizeof ((*zlow).value.str.len), &((*zhigh).value.str.len), sizeof ((*zhigh).value.str.len), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &((*zlow).value.str.val), sizeof ((*zlow).value.str.val), &((*zhigh).value.str.val), sizeof ((*zhigh).value.str.val), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(err), sizeof (err), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1646\", 17, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &((*zlow).value.str.len), sizeof ((*zlow).value.str.len), &((*zhigh).value.str.len), sizeof ((*zhigh).value.str.len), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &((*zlow).value.str.val), sizeof ((*zlow).value.str.val), &((*zhigh).value.str.val), sizeof ((*zhigh).value.str.val), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(err), sizeof (err), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	2,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	3,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	4,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	5,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	6,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	7,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	8,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	9,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	10,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	11,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	12,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	13,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	14,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	15,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	16,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	17,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	18,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	19,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	20,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	21,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	22,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	23,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	24,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	25,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	26,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	27,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	28,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	29,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	30,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	31,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	32,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	33,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	34,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	35,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	36,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	37,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	38,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	39,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	40,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	41,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	42,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	43,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	44,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	45,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	46,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	47,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	48,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	49,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	50,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	51,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	52,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	53,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	54,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	55,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	56,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	57,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	58,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	59,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	60,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	61,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	62,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	63,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	64,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	65,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	66,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	67,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	68,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	69,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	70,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	71,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	72,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	73,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	74,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	75,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	76,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	77,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	78,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	79,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	80,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	81,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	82,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	83,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	84,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	85,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	86,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	87,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	88,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	89,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	90,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	91,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	92,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	93,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	94,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	95,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	96,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	97,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	98,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	99,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	100,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	101,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	102,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	103,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	104,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	105,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	106,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	107,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	108,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	109,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	110,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	111,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	112,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	113,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	114,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	115,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	116,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	117,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	118,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	119,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	120,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	121,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	122,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	123,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	124,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	125,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	126,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	127,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	128,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	129,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	130,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	131,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	132,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	133,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	134,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	135,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	136,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	137,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	138,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	139,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	140,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	141,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	142,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	143,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	144,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	145,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	146,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	147,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	148,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	149,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	150,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	151,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	152,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	153,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	154,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	155,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	156,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	157,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	158,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	159,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	160,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	161,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	162,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	163,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	164,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	165,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	166,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	167,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	168,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	169,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	170,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	171,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	172,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	173,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	174,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	175,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	176,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	177,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	178,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	179,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	180,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	181,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	182,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	183,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	184,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	185,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	186,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	187,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	188,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	189,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	190,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	191,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	192,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	193,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	194,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	195,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	196,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	197,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	198,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	199,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	200,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	201,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	202,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	203,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	204,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	205,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	206,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	207,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	208,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	209,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	210,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	211,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	212,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	213,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	214,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	215,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	216,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	217,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	218,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	219,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	220,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	221,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	222,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	223,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	224,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	225,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	226,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	227,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	228,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	229,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	230,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	231,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	232,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	233,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	234,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	235,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	236,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	237,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	238,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	239,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	240,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	241,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	242,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	243,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	244,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	245,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	246,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	247,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	248,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	249,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	250,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	251,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	252,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	253,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	254,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	255,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	256,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	257,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	258,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	259,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	260,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	261,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	262,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	263,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	264,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	265,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	266,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	267,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	268,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	269,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	270,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	271,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	272,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	273,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	274,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	275,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	276,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	277,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	278,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	279,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	280,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	281,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	282,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	283,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	284,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	285,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	286,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	287,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	288,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	289,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	290,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	291,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	292,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	293,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	294,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	295,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	296,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	297,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	298,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	299,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	300,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	301,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	302,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	303,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	304,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	305,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	306,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	307,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	308,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	309,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	310,
									"scores":	[-9.7178723535517264, -9.7191973235517271, -8.6343936208517267, -8.6343936208517267, -11.896439741851726, -11.896439741851726, -10.563399372651727, -9.56871326985173, -9.56871326985173, -9.86479578285173, -11.114786621651728, -10.851704764851727, -11.172668427851727, -11.929600121851728, -11.929600121851728, -11.929600121851728, -11.929600121851728]
								}, {
									"case":	311,
									"scores":	[-9.7178723535517264, -9.7191973235517271, -8.6343936208517267, -8.6343936208517267, -11.896439741851726, -11.896439741851726, -10.563399372651727, -9.56871326985173, -9.56871326985173, -9.86479578285173, -11.114786621651728, -10.851704764851727, -11.172668427851727, -11.929600121851728, -11.929600121851728, -11.929600121851728, -11.929600121851728]
								}, {
									"case":	312,
									"scores":	[-9.7178723535517264, -9.7191973235517271, -8.6343936208517267, -8.6343936208517267, -11.896439741851726, -11.896439741851726, -10.563399372651727, -9.56871326985173, -9.56871326985173, -9.86479578285173, -11.114786621651728, -10.851704764851727, -11.172668427851727, -11.929600121851728, -11.929600121851728, -11.929600121851728, -11.929600121851728]
								}, {
									"case":	313,
									"scores":	[-9.71887235355173, -9.7201973235517265, -8.63539362085173, -8.63539362085173, -11.897439741851727, -11.897439741851727, -10.564399372651728, -9.5697132698517269, -9.5697132698517269, -9.8657957828517269, -11.115786621651727, -10.852704764851726, -11.173668427851727, -11.930600121851727, -11.930600121851727, -11.930600121851727, -11.930600121851727]
								}]
						}, {
							"switch":	22,
							"types":	[[8], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [4, 5, 6, 7]],
							"begin_line":	1646,
							"begin_column":	2,
							"end_line":	1751,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L1646\", 17, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &((*zlow).value.str.len), sizeof ((*zlow).value.str.len), &((*zhigh).value.str.len), sizeof ((*zhigh).value.str.len), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &((*zlow).value.str.val), sizeof ((*zlow).value.str.val), &((*zhigh).value.str.val), sizeof ((*zhigh).value.str.val), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(err), sizeof (err), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc))) {\n    int type1, type2;\n    unsigned char *low, *high;\n    long lstep = (long)step;\n    type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0);\n    type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0);\n    if (type1 == 2 || type2 == 2 || is_step_double) {\n        goto double_str;\n    } else if (type1 == 1 || type2 == 1) {\n        goto long_str;\n    }\n    if ((zlow)->type != 6) {\n        _convert_to_string((zlow));\n    }\n    ;\n    if ((zhigh)->type != 6) {\n        _convert_to_string((zhigh));\n    }\n    ;\n    low = (unsigned char *)(*zlow).value.str.val;\n    high = (unsigned char *)(*zhigh).value.str.val;\n    if (*low > *high) {\n        unsigned char ch = *low;\n        if (lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; ch >= *high; ch -= (unsigned int)lstep) {\n            add_next_index_stringl(return_value, (const char *)&ch, 1, 1);\n            if (((int)ch - lstep) < 0) {\n                break;\n            }\n        }\n    } else if (*high > *low) {\n        unsigned char ch = *low;\n        if (lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; ch <= *high; ch += (unsigned int)lstep) {\n            add_next_index_stringl(return_value, (const char *)&ch, 1, 1);\n            if (((int)ch + lstep) > 255) {\n                break;\n            }\n        }\n    } else {\n        add_next_index_stringl(return_value, (const char *)low, 1, 1);\n    }\n} else if ((*zlow).type == 2 || (*zhigh).type == 2 || is_step_double) {\n    double low, high;\n  double_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    if (low > high) {\n        if (low - high < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= (high - 1.0000000000000001E-15); low -= step) {\n            add_next_index_double(return_value, low);\n        }\n    } else if (high > low) {\n        if (high - low < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= (high + 1.0000000000000001E-15); low += step) {\n            add_next_index_double(return_value, low);\n        }\n    } else {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    double low, high;\n    long lstep;\n  long_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    lstep = (long)step;\n    if (low > high) {\n        if (low - high < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= high; low -= lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else if (high > low) {\n        if (high - low < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= high; low += lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else {\n        add_next_index_long(return_value, (long)low);\n    }\n}\n", "if ((((*zlow).type == 6 && (*zhigh).type == 6 && (*zlow).value.str.len >= 1) || __is_neg(\"\", \"L1646\", 17, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &((*zlow).value.str.len), sizeof ((*zlow).value.str.len), &((*zhigh).value.str.len), sizeof ((*zhigh).value.str.len), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &((*zlow).value.str.val), sizeof ((*zlow).value.str.val), &((*zhigh).value.str.val), sizeof ((*zhigh).value.str.val), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(err), sizeof (err), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc))) && (*zhigh).value.str.len >= 1) {\n    int type1, type2;\n    unsigned char *low, *high;\n    long lstep = (long)step;\n    type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0);\n    type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0);\n    if (type1 == 2 || type2 == 2 || is_step_double) {\n        goto double_str;\n    } else if (type1 == 1 || type2 == 1) {\n        goto long_str;\n    }\n    if ((zlow)->type != 6) {\n        _convert_to_string((zlow));\n    }\n    ;\n    if ((zhigh)->type != 6) {\n        _convert_to_string((zhigh));\n    }\n    ;\n    low = (unsigned char *)(*zlow).value.str.val;\n    high = (unsigned char *)(*zhigh).value.str.val;\n    if (*low > *high) {\n        unsigned char ch = *low;\n        if (lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; ch >= *high; ch -= (unsigned int)lstep) {\n            add_next_index_stringl(return_value, (const char *)&ch, 1, 1);\n            if (((int)ch - lstep) < 0) {\n                break;\n            }\n        }\n    } else if (*high > *low) {\n        unsigned char ch = *low;\n        if (lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; ch <= *high; ch += (unsigned int)lstep) {\n            add_next_index_stringl(return_value, (const char *)&ch, 1, 1);\n            if (((int)ch + lstep) > 255) {\n                break;\n            }\n        }\n    } else {\n        add_next_index_stringl(return_value, (const char *)low, 1, 1);\n    }\n} else if ((*zlow).type == 2 || (*zhigh).type == 2 || is_step_double) {\n    double low, high;\n  double_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    if (low > high) {\n        if (low - high < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= (high - 1.0000000000000001E-15); low -= step) {\n            add_next_index_double(return_value, low);\n        }\n    } else if (high > low) {\n        if (high - low < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= (high + 1.0000000000000001E-15); low += step) {\n            add_next_index_double(return_value, low);\n        }\n    } else {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    double low, high;\n    long lstep;\n  long_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    lstep = (long)step;\n    if (low > high) {\n        if (low - high < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= high; low -= lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else if (high > low) {\n        if (high - low < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= high; low += lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else {\n        add_next_index_long(return_value, (long)low);\n    }\n}\n", "if (((*zlow).type == 6 && (*zhigh).type == 6 && (*zlow).value.str.len >= 1 && (*zhigh).value.str.len >= 1) || __is_neg(\"\", \"L1646\", 17, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &((*zlow).value.str.len), sizeof ((*zlow).value.str.len), &((*zhigh).value.str.len), sizeof ((*zhigh).value.str.len), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &((*zlow).value.str.val), sizeof ((*zlow).value.str.val), &((*zhigh).value.str.val), sizeof ((*zhigh).value.str.val), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(err), sizeof (err), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc))) {\n    int type1, type2;\n    unsigned char *low, *high;\n    long lstep = (long)step;\n    type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0);\n    type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0);\n    if (type1 == 2 || type2 == 2 || is_step_double) {\n        goto double_str;\n    } else if (type1 == 1 || type2 == 1) {\n        goto long_str;\n    }\n    if ((zlow)->type != 6) {\n        _convert_to_string((zlow));\n    }\n    ;\n    if ((zhigh)->type != 6) {\n        _convert_to_string((zhigh));\n    }\n    ;\n    low = (unsigned char *)(*zlow).value.str.val;\n    high = (unsigned char *)(*zhigh).value.str.val;\n    if (*low > *high) {\n        unsigned char ch = *low;\n        if (lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; ch >= *high; ch -= (unsigned int)lstep) {\n            add_next_index_stringl(return_value, (const char *)&ch, 1, 1);\n            if (((int)ch - lstep) < 0) {\n                break;\n            }\n        }\n    } else if (*high > *low) {\n        unsigned char ch = *low;\n        if (lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; ch <= *high; ch += (unsigned int)lstep) {\n            add_next_index_stringl(return_value, (const char *)&ch, 1, 1);\n            if (((int)ch + lstep) > 255) {\n                break;\n            }\n        }\n    } else {\n        add_next_index_stringl(return_value, (const char *)low, 1, 1);\n    }\n} else if ((*zlow).type == 2 || (*zhigh).type == 2 || is_step_double) {\n    double low, high;\n  double_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    if (low > high) {\n        if (low - high < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= (high - 1.0000000000000001E-15); low -= step) {\n            add_next_index_double(return_value, low);\n        }\n    } else if (high > low) {\n        if (high - low < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= (high + 1.0000000000000001E-15); low += step) {\n            add_next_index_double(return_value, low);\n        }\n    } else {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    double low, high;\n    long lstep;\n  long_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    lstep = (long)step;\n    if (low > high) {\n        if (low - high < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= high; low -= lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else if (high > low) {\n        if (high - low < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= high; low += lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else {\n        add_next_index_long(return_value, (long)low);\n    }\n}\n", "if ((*zhigh).type == 6 && (*zlow).value.str.len >= 1 && (*zhigh).value.str.len >= 1) {\n    int type1, type2;\n    unsigned char *low, *high;\n    long lstep = (long)step;\n    type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0);\n    type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0);\n    if (type1 == 2 || type2 == 2 || is_step_double) {\n        goto double_str;\n    } else if (type1 == 1 || type2 == 1) {\n        goto long_str;\n    }\n    if ((zlow)->type != 6) {\n        _convert_to_string((zlow));\n    }\n    ;\n    if ((zhigh)->type != 6) {\n        _convert_to_string((zhigh));\n    }\n    ;\n    low = (unsigned char *)(*zlow).value.str.val;\n    high = (unsigned char *)(*zhigh).value.str.val;\n    if (*low > *high) {\n        unsigned char ch = *low;\n        if (lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; ch >= *high; ch -= (unsigned int)lstep) {\n            add_next_index_stringl(return_value, (const char *)&ch, 1, 1);\n            if (((int)ch - lstep) < 0) {\n                break;\n            }\n        }\n    } else if (*high > *low) {\n        unsigned char ch = *low;\n        if (lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; ch <= *high; ch += (unsigned int)lstep) {\n            add_next_index_stringl(return_value, (const char *)&ch, 1, 1);\n            if (((int)ch + lstep) > 255) {\n                break;\n            }\n        }\n    } else {\n        add_next_index_stringl(return_value, (const char *)low, 1, 1);\n    }\n} else if ((*zlow).type == 2 || (*zhigh).type == 2 || is_step_double) {\n    double low, high;\n  double_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    if (low > high) {\n        if (low - high < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= (high - 1.0000000000000001E-15); low -= step) {\n            add_next_index_double(return_value, low);\n        }\n    } else if (high > low) {\n        if (high - low < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= (high + 1.0000000000000001E-15); low += step) {\n            add_next_index_double(return_value, low);\n        }\n    } else {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    double low, high;\n    long lstep;\n  long_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    lstep = (long)step;\n    if (low > high) {\n        if (low - high < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= high; low -= lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else if (high > low) {\n        if (high - low < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= high; low += lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else {\n        add_next_index_long(return_value, (long)low);\n    }\n}\n", "if ((*zlow).type == 6 && (*zhigh).type == 6 && (*zhigh).value.str.len >= 1) {\n    int type1, type2;\n    unsigned char *low, *high;\n    long lstep = (long)step;\n    type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0);\n    type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0);\n    if (type1 == 2 || type2 == 2 || is_step_double) {\n        goto double_str;\n    } else if (type1 == 1 || type2 == 1) {\n        goto long_str;\n    }\n    if ((zlow)->type != 6) {\n        _convert_to_string((zlow));\n    }\n    ;\n    if ((zhigh)->type != 6) {\n        _convert_to_string((zhigh));\n    }\n    ;\n    low = (unsigned char *)(*zlow).value.str.val;\n    high = (unsigned char *)(*zhigh).value.str.val;\n    if (*low > *high) {\n        unsigned char ch = *low;\n        if (lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; ch >= *high; ch -= (unsigned int)lstep) {\n            add_next_index_stringl(return_value, (const char *)&ch, 1, 1);\n            if (((int)ch - lstep) < 0) {\n                break;\n            }\n        }\n    } else if (*high > *low) {\n        unsigned char ch = *low;\n        if (lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; ch <= *high; ch += (unsigned int)lstep) {\n            add_next_index_stringl(return_value, (const char *)&ch, 1, 1);\n            if (((int)ch + lstep) > 255) {\n                break;\n            }\n        }\n    } else {\n        add_next_index_stringl(return_value, (const char *)low, 1, 1);\n    }\n} else if ((*zlow).type == 2 || (*zhigh).type == 2 || is_step_double) {\n    double low, high;\n  double_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    if (low > high) {\n        if (low - high < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= (high - 1.0000000000000001E-15); low -= step) {\n            add_next_index_double(return_value, low);\n        }\n    } else if (high > low) {\n        if (high - low < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= (high + 1.0000000000000001E-15); low += step) {\n            add_next_index_double(return_value, low);\n        }\n    } else {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    double low, high;\n    long lstep;\n  long_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    lstep = (long)step;\n    if (low > high) {\n        if (low - high < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= high; low -= lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else if (high > low) {\n        if (high - low < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= high; low += lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else {\n        add_next_index_long(return_value, (long)low);\n    }\n}\n", "if ((*zlow).type == 6 && (*zhigh).type == 6 && (*zlow).value.str.len >= 1) {\n    int type1, type2;\n    unsigned char *low, *high;\n    long lstep = (long)step;\n    type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0);\n    type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0);\n    if (type1 == 2 || type2 == 2 || is_step_double) {\n        goto double_str;\n    } else if (type1 == 1 || type2 == 1) {\n        goto long_str;\n    }\n    if ((zlow)->type != 6) {\n        _convert_to_string((zlow));\n    }\n    ;\n    if ((zhigh)->type != 6) {\n        _convert_to_string((zhigh));\n    }\n    ;\n    low = (unsigned char *)(*zlow).value.str.val;\n    high = (unsigned char *)(*zhigh).value.str.val;\n    if (*low > *high) {\n        unsigned char ch = *low;\n        if (lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; ch >= *high; ch -= (unsigned int)lstep) {\n            add_next_index_stringl(return_value, (const char *)&ch, 1, 1);\n            if (((int)ch - lstep) < 0) {\n                break;\n            }\n        }\n    } else if (*high > *low) {\n        unsigned char ch = *low;\n        if (lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; ch <= *high; ch += (unsigned int)lstep) {\n            add_next_index_stringl(return_value, (const char *)&ch, 1, 1);\n            if (((int)ch + lstep) > 255) {\n                break;\n            }\n        }\n    } else {\n        add_next_index_stringl(return_value, (const char *)low, 1, 1);\n    }\n} else if ((*zlow).type == 2 || (*zhigh).type == 2 || is_step_double) {\n    double low, high;\n  double_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    if (low > high) {\n        if (low - high < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= (high - 1.0000000000000001E-15); low -= step) {\n            add_next_index_double(return_value, low);\n        }\n    } else if (high > low) {\n        if (high - low < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= (high + 1.0000000000000001E-15); low += step) {\n            add_next_index_double(return_value, low);\n        }\n    } else {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    double low, high;\n    long lstep;\n  long_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    lstep = (long)step;\n    if (low > high) {\n        if (low - high < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= high; low -= lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else if (high > low) {\n        if (high - low < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= high; low += lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else {\n        add_next_index_long(return_value, (long)low);\n    }\n}\n", "if ((*zlow).type == 6 && (*zlow).value.str.len >= 1 && (*zhigh).value.str.len >= 1) {\n    int type1, type2;\n    unsigned char *low, *high;\n    long lstep = (long)step;\n    type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0);\n    type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0);\n    if (type1 == 2 || type2 == 2 || is_step_double) {\n        goto double_str;\n    } else if (type1 == 1 || type2 == 1) {\n        goto long_str;\n    }\n    if ((zlow)->type != 6) {\n        _convert_to_string((zlow));\n    }\n    ;\n    if ((zhigh)->type != 6) {\n        _convert_to_string((zhigh));\n    }\n    ;\n    low = (unsigned char *)(*zlow).value.str.val;\n    high = (unsigned char *)(*zhigh).value.str.val;\n    if (*low > *high) {\n        unsigned char ch = *low;\n        if (lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; ch >= *high; ch -= (unsigned int)lstep) {\n            add_next_index_stringl(return_value, (const char *)&ch, 1, 1);\n            if (((int)ch - lstep) < 0) {\n                break;\n            }\n        }\n    } else if (*high > *low) {\n        unsigned char ch = *low;\n        if (lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; ch <= *high; ch += (unsigned int)lstep) {\n            add_next_index_stringl(return_value, (const char *)&ch, 1, 1);\n            if (((int)ch + lstep) > 255) {\n                break;\n            }\n        }\n    } else {\n        add_next_index_stringl(return_value, (const char *)low, 1, 1);\n    }\n} else if ((*zlow).type == 2 || (*zhigh).type == 2 || is_step_double) {\n    double low, high;\n  double_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    if (low > high) {\n        if (low - high < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= (high - 1.0000000000000001E-15); low -= step) {\n            add_next_index_double(return_value, low);\n        }\n    } else if (high > low) {\n        if (high - low < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= (high + 1.0000000000000001E-15); low += step) {\n            add_next_index_double(return_value, low);\n        }\n    } else {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    double low, high;\n    long lstep;\n  long_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    lstep = (long)step;\n    if (low > high) {\n        if (low - high < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= high; low -= lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else if (high > low) {\n        if (high - low < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= high; low += lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else {\n        add_next_index_long(return_value, (long)low);\n    }\n}\n", "if (((*zlow).type == 6 && (*zhigh).type == 6 && (*zlow).value.str.len >= 1 && (*zhigh).value.str.len >= 1) && !__is_neg(\"\", \"L1646\", 17, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &((*zlow).value.str.len), sizeof ((*zlow).value.str.len), &((*zhigh).value.str.len), sizeof ((*zhigh).value.str.len), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &((*zlow).value.str.val), sizeof ((*zlow).value.str.val), &((*zhigh).value.str.val), sizeof ((*zhigh).value.str.val), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(err), sizeof (err), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc))) {\n    int type1, type2;\n    unsigned char *low, *high;\n    long lstep = (long)step;\n    type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0);\n    type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0);\n    if (type1 == 2 || type2 == 2 || is_step_double) {\n        goto double_str;\n    } else if (type1 == 1 || type2 == 1) {\n        goto long_str;\n    }\n    if ((zlow)->type != 6) {\n        _convert_to_string((zlow));\n    }\n    ;\n    if ((zhigh)->type != 6) {\n        _convert_to_string((zhigh));\n    }\n    ;\n    low = (unsigned char *)(*zlow).value.str.val;\n    high = (unsigned char *)(*zhigh).value.str.val;\n    if (*low > *high) {\n        unsigned char ch = *low;\n        if (lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; ch >= *high; ch -= (unsigned int)lstep) {\n            add_next_index_stringl(return_value, (const char *)&ch, 1, 1);\n            if (((int)ch - lstep) < 0) {\n                break;\n            }\n        }\n    } else if (*high > *low) {\n        unsigned char ch = *low;\n        if (lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; ch <= *high; ch += (unsigned int)lstep) {\n            add_next_index_stringl(return_value, (const char *)&ch, 1, 1);\n            if (((int)ch + lstep) > 255) {\n                break;\n            }\n        }\n    } else {\n        add_next_index_stringl(return_value, (const char *)low, 1, 1);\n    }\n} else if ((*zlow).type == 2 || (*zhigh).type == 2 || is_step_double) {\n    double low, high;\n  double_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    if (low > high) {\n        if (low - high < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= (high - 1.0000000000000001E-15); low -= step) {\n            add_next_index_double(return_value, low);\n        }\n    } else if (high > low) {\n        if (high - low < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= (high + 1.0000000000000001E-15); low += step) {\n            add_next_index_double(return_value, low);\n        }\n    } else {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    double low, high;\n    long lstep;\n  long_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    lstep = (long)step;\n    if (low > high) {\n        if (low - high < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= high; low -= lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else if (high > low) {\n        if (high - low < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= high; low += lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else {\n        add_next_index_long(return_value, (long)low);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-0.084720991968144865, -0.0837107079681454, 1.8382908360318564, 1.8382908360318564, 0.97637151603185357, 0.97637151603185357, -1.0837356289681424, -0.40853419396814417, -0.40853419396814417, -0.657525813968145, -0.89062970846814427, -1.3995021949681448, -1.0061073199681436, -1.1476184839681451, -1.1476184839681451, -1.1476184839681451, -1.1476184839681451]
								}, {
									"case":	2,
									"scores":	[-2.1346926934281445, -2.133682409428145, -0.21168086542814546, -0.21168086542814546, -1.0736001854281469, -1.0736001854281469, -3.1337073304281455, -2.4585058954281447, -2.4585058954281447, -2.7074975154281455, -2.9406014099281457, -3.4494738964281453, -3.0560790214281459, -3.1975901854281457, -3.1975901854281457, -3.1975901854281457, -3.1975901854281457]
								}, {
									"case":	3,
									"scores":	[-2.1346926934281445, -2.133682409428145, -0.21168086542814546, -0.21168086542814546, -1.0736001854281469, -1.0736001854281469, -3.1337073304281455, -2.4585058954281447, -2.4585058954281447, -2.7074975154281455, -2.9406014099281457, -3.4494738964281453, -3.0560790214281459, -3.1975901854281457, -3.1975901854281457, -3.1975901854281457, -3.1975901854281457]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-2.1346926934281445, -2.133682409428145, -0.21168086542814546, -0.21168086542814546, -1.0736001854281469, -1.0736001854281469, -3.1337073304281455, -2.4585058954281447, -2.4585058954281447, -2.7074975154281455, -2.9406014099281457, -3.4494738964281453, -3.0560790214281459, -3.1975901854281457, -3.1975901854281457, -3.1975901854281457, -3.1975901854281457]
								}]
						}, {
							"switch":	55,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1646,
							"begin_column":	2,
							"end_line":	1751,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L1646\", 17, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &((*zlow).value.str.len), sizeof ((*zlow).value.str.len), &((*zhigh).value.str.len), sizeof ((*zhigh).value.str.len), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &((*zlow).value.str.val), sizeof ((*zlow).value.str.val), &((*zhigh).value.str.val), sizeof ((*zhigh).value.str.val), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(err), sizeof (err), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)))\n    if ((*zlow).type == 6 && (*zhigh).type == 6 && (*zlow).value.str.len >= 1 && (*zhigh).value.str.len >= 1) {\n        int type1, type2;\n        unsigned char *low, *high;\n        long lstep = (long)step;\n        type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0);\n        type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0);\n        if (type1 == 2 || type2 == 2 || is_step_double) {\n            goto double_str;\n        } else if (type1 == 1 || type2 == 1) {\n            goto long_str;\n        }\n        if ((zlow)->type != 6) {\n            _convert_to_string((zlow));\n        }\n        ;\n        if ((zhigh)->type != 6) {\n            _convert_to_string((zhigh));\n        }\n        ;\n        low = (unsigned char *)(*zlow).value.str.val;\n        high = (unsigned char *)(*zhigh).value.str.val;\n        if (*low > *high) {\n            unsigned char ch = *low;\n            if (lstep <= 0) {\n                err = 1;\n                goto err;\n            }\n            for (; ch >= *high; ch -= (unsigned int)lstep) {\n                add_next_index_stringl(return_value, (const char *)&ch, 1, 1);\n                if (((int)ch - lstep) < 0) {\n                    break;\n                }\n            }\n        } else if (*high > *low) {\n            unsigned char ch = *low;\n            if (lstep <= 0) {\n                err = 1;\n                goto err;\n            }\n            for (; ch <= *high; ch += (unsigned int)lstep) {\n                add_next_index_stringl(return_value, (const char *)&ch, 1, 1);\n                if (((int)ch + lstep) > 255) {\n                    break;\n                }\n            }\n        } else {\n            add_next_index_stringl(return_value, (const char *)low, 1, 1);\n        }\n    } else if ((*zlow).type == 2 || (*zhigh).type == 2 || is_step_double) {\n        double low, high;\n      double_str:\n        convert_to_double(zlow);\n        convert_to_double(zhigh);\n        low = (*zlow).value.dval;\n        high = (*zhigh).value.dval;\n        if (low > high) {\n            if (low - high < step || step <= 0) {\n                err = 1;\n                goto err;\n            }\n            for (; low >= (high - 1.0000000000000001E-15); low -= step) {\n                add_next_index_double(return_value, low);\n            }\n        } else if (high > low) {\n            if (high - low < step || step <= 0) {\n                err = 1;\n                goto err;\n            }\n            for (; low <= (high + 1.0000000000000001E-15); low += step) {\n                add_next_index_double(return_value, low);\n            }\n        } else {\n            add_next_index_double(return_value, low);\n        }\n    } else {\n        double low, high;\n        long lstep;\n      long_str:\n        convert_to_double(zlow);\n        convert_to_double(zhigh);\n        low = (*zlow).value.dval;\n        high = (*zhigh).value.dval;\n        lstep = (long)step;\n        if (low > high) {\n            if (low - high < lstep || lstep <= 0) {\n                err = 1;\n                goto err;\n            }\n            for (; low >= high; low -= lstep) {\n                add_next_index_long(return_value, (long)low);\n            }\n        } else if (high > low) {\n            if (high - low < lstep || lstep <= 0) {\n                err = 1;\n                goto err;\n            }\n            for (; low <= high; low += lstep) {\n                add_next_index_long(return_value, (long)low);\n            }\n        } else {\n            add_next_index_long(return_value, (long)low);\n        }\n    }\n", "if (!__is_neg(\"\", \"L1646\", 17, &(zlow), sizeof (zlow), &(zhigh), sizeof (zhigh), &((*zlow).value.str.len), sizeof ((*zlow).value.str.len), &((*zhigh).value.str.len), sizeof ((*zhigh).value.str.len), &((*zlow).type), sizeof ((*zlow).type), &((*zhigh).type), sizeof ((*zhigh).type), &(return_value), sizeof (return_value), &((*zlow).value.str.val), sizeof ((*zlow).value.str.val), &((*zhigh).value.str.val), sizeof ((*zhigh).value.str.val), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(err), sizeof (err), &(ht), sizeof (ht), &((*zlow).refcount__gc), sizeof ((*zlow).refcount__gc), &((*zlow).is_ref__gc), sizeof ((*zlow).is_ref__gc), &((*zhigh).refcount__gc), sizeof ((*zhigh).refcount__gc), &((*zhigh).is_ref__gc), sizeof ((*zhigh).is_ref__gc)) && ((*zlow).type == 6 && (*zhigh).type == 6 && (*zlow).value.str.len >= 1 && (*zhigh).value.str.len >= 1)) {\n    int type1, type2;\n    unsigned char *low, *high;\n    long lstep = (long)step;\n    type1 = is_numeric_string((*zlow).value.str.val, (*zlow).value.str.len, ((void *)0), ((void *)0), 0);\n    type2 = is_numeric_string((*zhigh).value.str.val, (*zhigh).value.str.len, ((void *)0), ((void *)0), 0);\n    if (type1 == 2 || type2 == 2 || is_step_double) {\n        goto double_str;\n    } else if (type1 == 1 || type2 == 1) {\n        goto long_str;\n    }\n    if ((zlow)->type != 6) {\n        _convert_to_string((zlow));\n    }\n    ;\n    if ((zhigh)->type != 6) {\n        _convert_to_string((zhigh));\n    }\n    ;\n    low = (unsigned char *)(*zlow).value.str.val;\n    high = (unsigned char *)(*zhigh).value.str.val;\n    if (*low > *high) {\n        unsigned char ch = *low;\n        if (lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; ch >= *high; ch -= (unsigned int)lstep) {\n            add_next_index_stringl(return_value, (const char *)&ch, 1, 1);\n            if (((int)ch - lstep) < 0) {\n                break;\n            }\n        }\n    } else if (*high > *low) {\n        unsigned char ch = *low;\n        if (lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; ch <= *high; ch += (unsigned int)lstep) {\n            add_next_index_stringl(return_value, (const char *)&ch, 1, 1);\n            if (((int)ch + lstep) > 255) {\n                break;\n            }\n        }\n    } else {\n        add_next_index_stringl(return_value, (const char *)low, 1, 1);\n    }\n} else if ((*zlow).type == 2 || (*zhigh).type == 2 || is_step_double) {\n    double low, high;\n  double_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    if (low > high) {\n        if (low - high < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= (high - 1.0000000000000001E-15); low -= step) {\n            add_next_index_double(return_value, low);\n        }\n    } else if (high > low) {\n        if (high - low < step || step <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= (high + 1.0000000000000001E-15); low += step) {\n            add_next_index_double(return_value, low);\n        }\n    } else {\n        add_next_index_double(return_value, low);\n    }\n} else {\n    double low, high;\n    long lstep;\n  long_str:\n    convert_to_double(zlow);\n    convert_to_double(zhigh);\n    low = (*zlow).value.dval;\n    high = (*zhigh).value.dval;\n    lstep = (long)step;\n    if (low > high) {\n        if (low - high < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low >= high; low -= lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else if (high > low) {\n        if (high - low < lstep || lstep <= 0) {\n            err = 1;\n            goto err;\n        }\n        for (; low <= high; low += lstep) {\n            add_next_index_long(return_value, (long)low);\n        }\n    } else {\n        add_next_index_long(return_value, (long)low);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.204944129851727, -10.203933845851727, -8.281932301851727, -8.281932301851727, -9.1438516218517272, -9.1438516218517272, -11.203958766851727, -10.528757331851727, -10.528757331851727, -10.777748951851727, -11.010852846351726, -11.519725332851728, -11.126330457851727, -11.267841621851726, -11.267841621851726, -11.267841621851726, -11.267841621851726]
								}, {
									"case":	2,
									"scores":	[-7.6793823068517266, -7.6783720228517272, -5.7563704788517267, -5.7563704788517267, -6.618289798851726, -6.618289798851726, -8.6783969438517268, -8.0031955088517268, -8.0031955088517268, -8.2521871288517268, -8.48529102335173, -8.99416350985173, -8.6007686348517272, -8.74227979885173, -8.74227979885173, -8.74227979885173, -8.74227979885173]
								}]
						}]
				}, {
					"line":	1751,
					"switches":	[{
							"switch":	56,
							"types":	[[], [], [], [], [308, 309, 310, 311], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [], [], [], [265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307], [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], [], [], [], [], [], []],
							"begin_line":	1752,
							"begin_column":	4294967295,
							"end_line":	1752,
							"end_column":	4294967295,
							"patch_codes":	["memset(&(*zhigh).is_ref__gc, 0, sizeof (*(&(*zhigh).is_ref__gc)))", "memset(&(*zhigh).refcount__gc, 0, sizeof (*(&(*zhigh).refcount__gc)))", "memset(&(*zhigh).type, 0, sizeof (*(&(*zhigh).type)))", "memset(&(*zhigh).value, 0, sizeof (*(&(*zhigh).value)))", "memset(&(*zhigh).value.dval, 0, sizeof (*(&(*zhigh).value.dval)))", "memset(&(*zhigh).value.ht, 0, sizeof (*(&(*zhigh).value.ht)))", "memset(&(*zhigh).value.lval, 0, sizeof (*(&(*zhigh).value.lval)))", "memset(&(*zhigh).value.obj, 0, sizeof (*(&(*zhigh).value.obj)))", "memset(&(*zhigh).value.str, 0, sizeof (*(&(*zhigh).value.str)))", "memset(&(*zhigh).value.str.len, 0, sizeof (*(&(*zhigh).value.str.len)))", "memset(&(*zhigh).value.str.val, 0, sizeof (*(&(*zhigh).value.str.val)))", "memset(&(*zlow).is_ref__gc, 0, sizeof (*(&(*zlow).is_ref__gc)))", "memset(&(*zlow).refcount__gc, 0, sizeof (*(&(*zlow).refcount__gc)))", "memset(&(*zlow).type, 0, sizeof (*(&(*zlow).type)))", "memset(&(*zlow).value, 0, sizeof (*(&(*zlow).value)))", "memset(&(*zlow).value.dval, 0, sizeof (*(&(*zlow).value.dval)))", "memset(&(*zlow).value.ht, 0, sizeof (*(&(*zlow).value.ht)))", "memset(&(*zlow).value.lval, 0, sizeof (*(&(*zlow).value.lval)))", "memset(&(*zlow).value.obj, 0, sizeof (*(&(*zlow).value.obj)))", "memset(&(*zlow).value.str, 0, sizeof (*(&(*zlow).value.str)))", "memset(&(*zlow).value.str.len, 0, sizeof (*(&(*zlow).value.str.len)))", "memset(&(*zlow).value.str.val, 0, sizeof (*(&(*zlow).value.str.val)))", "memset((*zhigh).value.ht, 0, sizeof (*((*zhigh).value.ht)))", "memset((*zhigh).value.str.val, 0, sizeof (*((*zhigh).value.str.val)))", "memset((*zlow).value.ht, 0, sizeof (*((*zlow).value.ht)))", "memset((*zlow).value.str.val, 0, sizeof (*((*zlow).value.str.val)))", "(*(return_value)).value.ht->nApplyCount++", "(*(return_value)).value.ht->nApplyCount--", "(*(this_ptr)).value.ht->nApplyCount++", "(*(this_ptr)).value.ht->nApplyCount--", "(*(zhigh)).value.ht->nApplyCount++", "(*(zhigh)).value.ht->nApplyCount--", "(*(zlow)).value.ht->nApplyCount++", "(*(zlow)).value.ht->nApplyCount--", "(*(zstep)).value.ht->nApplyCount++", "(*(zstep)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "(**(return_value_ptr)).value.lval++", "(basic_globals.array_walk_fci).no_separation = (-1)", "(basic_globals.array_walk_fci).no_separation = (0)", "(basic_globals.array_walk_fci).no_separation = (1)", "(basic_globals.array_walk_fci).no_separation = (2)", "(basic_globals.array_walk_fci).no_separation = (255)", "(basic_globals.array_walk_fci).no_separation = (3)", "(basic_globals.array_walk_fci).no_separation = (6)", "(basic_globals.array_walk_fci).param_count = (-1)", "(basic_globals.array_walk_fci).param_count = (0)", "(basic_globals.array_walk_fci).param_count = (1)", "(basic_globals.array_walk_fci).param_count = (2)", "(basic_globals.array_walk_fci).param_count = (255)", "(basic_globals.array_walk_fci).param_count = (3)", "(basic_globals.array_walk_fci).param_count = (6)", "(basic_globals.array_walk_fci).param_count = (return_value_ptr) ? 3 : 2", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.array_walk_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.array_walk_fci).retval_ptr_ptr = (return_value_ptr)", "(basic_globals.user_compare_fci).no_separation = (-1)", "(basic_globals.user_compare_fci).no_separation = (0)", "(basic_globals.user_compare_fci).no_separation = (1)", "(basic_globals.user_compare_fci).no_separation = (2)", "(basic_globals.user_compare_fci).no_separation = (255)", "(basic_globals.user_compare_fci).no_separation = (3)", "(basic_globals.user_compare_fci).no_separation = (6)", "(basic_globals.user_compare_fci).param_count = (-1)", "(basic_globals.user_compare_fci).param_count = (0)", "(basic_globals.user_compare_fci).param_count = (1)", "(basic_globals.user_compare_fci).param_count = (2)", "(basic_globals.user_compare_fci).param_count = (255)", "(basic_globals.user_compare_fci).param_count = (3)", "(basic_globals.user_compare_fci).param_count = (6)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(return_value)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(this_ptr)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zhigh)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zlow)", "(basic_globals.user_compare_fci).retval_ptr_ptr = &(zstep)", "(basic_globals.user_compare_fci).retval_ptr_ptr = (return_value_ptr)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zhigh)), 0)", "_array_init(((zlow)), 0)", "_array_init(((zstep)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zhigh)))", "_convert_to_string(((zlow)))", "_convert_to_string(((zstep)))", "_efree(((return_value)))", "_efree(((return_value_ptr)))", "_efree(((this_ptr)))", "_efree(((zhigh)))", "_efree(((zlow)))", "_efree(((zstep)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zhigh))))", "_zval_copy_ctor((((zlow))))", "_zval_copy_ctor((((zstep))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zhigh)))", "_zval_copy_ctor(((zlow)))", "_zval_copy_ctor(((zstep)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zhigh))", "_zval_copy_ctor_func((zlow))", "_zval_copy_ctor_func((zstep))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zhigh)))", "_zval_dtor(((zlow)))", "_zval_dtor(((zstep)))", "_zval_dtor((*(return_value_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zhigh))", "_zval_dtor_func((zlow))", "_zval_dtor_func((zstep))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(return_value_ptr)[0]))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zhigh)))", "_zval_ptr_dtor((&(zlow)))", "_zval_ptr_dtor((&(zstep)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "_zval_ptr_dtor(((return_value_ptr)))", "add_next_index_null(*(return_value_ptr))", "convert_to_array((return_value))", "convert_to_array((this_ptr))", "convert_to_array((zhigh))", "convert_to_array((zlow))", "convert_to_array((zstep))", "convert_to_array(*(return_value_ptr))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zhigh))", "convert_to_boolean((zlow))", "convert_to_boolean((zstep))", "convert_to_double((return_value))", "convert_to_double((this_ptr))", "convert_to_double((zhigh))", "convert_to_double((zlow))", "convert_to_double((zstep))", "convert_to_double(*&(return_value))", "convert_to_double(*&(this_ptr))", "convert_to_double(*&(zhigh))", "convert_to_double(*&(zlow))", "convert_to_double(*&(zstep))", "convert_to_long(*&(return_value))", "convert_to_long(*&(this_ptr))", "convert_to_long(*&(zhigh))", "convert_to_long(*&(zlow))", "convert_to_long(*&(zstep))", "convert_to_long(*(return_value_ptr))", "err = (-1)", "err = (0)", "err = (1)", "err = (2)", "err = (255)", "err = (3)", "err = (6)", "err = (err)", "err = (ht)", "err = (is_step_double)", "err = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zhigh))", "gc_remove_zval_from_buffer((zlow))", "gc_remove_zval_from_buffer((zstep))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zhigh)))", "gc_zval_check_possible_root(((zlow)))", "gc_zval_check_possible_root(((zstep)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zhigh))", "gc_zval_possible_root((zlow))", "gc_zval_possible_root((zstep))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zhigh))", "i_zval_ptr_dtor((zlow))", "i_zval_ptr_dtor((zstep))", "is_step_double = (-1)", "is_step_double = (0)", "is_step_double = (1)", "is_step_double = (2)", "is_step_double = (255)", "is_step_double = (3)", "is_step_double = (6)", "is_step_double = (err)", "is_step_double = (ht)", "is_step_double = (is_step_double)", "is_step_double = (return_value_used)", "php_array_data_shuffle((return_value))", "php_array_data_shuffle((this_ptr))", "php_array_data_shuffle((zhigh))", "php_array_data_shuffle((zlow))", "php_array_data_shuffle((zstep))", "step = (*(return_value)).value.dval", "step = (*(this_ptr)).value.dval", "step = (*(zhigh)).value.dval", "step = (*(zlow)).value.dval", "step = (*(zstep)).value.dval", "step = (step)", "zend_hash_internal_pointer_end_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_end_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(return_value)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(this_ptr)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zhigh)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zlow)).value.ht, ((void *)0))", "zend_hash_internal_pointer_reset_ex((*(zstep)).value.ht, ((void *)0))", "zend_hash_rehash((*(return_value)).value.ht)", "zend_hash_rehash((*(this_ptr)).value.ht)", "zend_hash_rehash((*(zhigh)).value.ht)", "zend_hash_rehash((*(zlow)).value.ht)", "zend_hash_rehash((*(zstep)).value.ht)", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_add_ref(&(zhigh))", "zval_add_ref(&(zlow))", "zval_add_ref(&(zstep))", "zval_add_ref((return_value_ptr))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((zhigh))", "zval_addref_p((zlow))", "zval_addref_p((zstep))", "zval_addref_p(*((return_value_ptr)))", "zval_delref_p((return_value))", "zval_delref_p((this_ptr))", "zval_delref_p((zhigh))", "zval_delref_p((zlow))", "zval_delref_p((zstep))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p((zhigh))", "zval_set_isref_p((zlow))", "zval_set_isref_p((zstep))", "zval_set_isref_p(*(((return_value_ptr))))", "zval_set_isref_to_p((return_value), 0)", "zval_set_isref_to_p((this_ptr), 0)", "zval_set_isref_to_p((zhigh), 0)", "zval_set_isref_to_p((zlow), 0)", "zval_set_isref_to_p((zstep), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((zhigh), 1)", "zval_set_refcount_p((zlow), 1)", "zval_set_refcount_p((zstep), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zhigh))", "zval_unset_isref_p((zlow))", "zval_unset_isref_p((zstep))", "(basic_globals.array_walk_fci).no_separation = 0", "(basic_globals.user_compare_fci).no_separation = 0", "(basic_globals.user_compare_fci).param_count = 2", "(basic_globals.user_compare_fci_cache) = empty_fcall_info_cache", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_array_init((return_value), 0)", "_convert_to_string((zhigh))", "_convert_to_string((zlow))", "_zval_dtor((return_value))", "convert_to_double(*&zstep)", "convert_to_double(zhigh)", "err = 1", "exit(1)", "is_step_double = 1", "php_array_init_globals(&array_globals)", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the filter callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the map callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"An error occurred while invoking the reduction callback\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array must contain at least one element\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array sizes are inconsistent\")", "php_error_docref0(((void *)0), (1 << 1L), \"Array was modified by the user comparison function\")", "php_error_docref0(((void *)0), (1 << 1L), \"Both parameters should have an equal number of elements\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only count STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only flip STRING and INTEGER values!\")", "php_error_docref0(((void *)0), (1 << 1L), \"Cannot add element to the array as the next element is already occupied\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid extract type\")", "php_error_docref0(((void *)0), (1 << 1L), \"Number of elements must be positive\")", "php_error_docref0(((void *)0), (1 << 1L), \"Second argument has to be between 1 and the number of elements in the array\")", "php_error_docref0(((void *)0), (1 << 1L), \"Size parameter expected to be greater than 0\")", "php_error_docref0(((void *)0), (1 << 1L), \"When only one parameter is given, it must be an array\")", "php_error_docref0(((void *)0), (1 << 1L), \"You may only pad up to 1048576 elements at a time\")", "php_error_docref0(((void *)0), (1 << 1L), \"prefix is not a valid identifier\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_error_docref0(((void *)0), (1 << 1L), \"specified extract type requires the prefix parameter\")", "php_error_docref0(((void *)0), (1 << 1L), \"step exceeds the specified range\")", "php_set_compare_func(0)", "php_set_compare_func(2)", "step = (*zstep).value.dval", "zend_block_interruptions()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_rebuild_symbol_table()", "zend_reset_all_cv(&(executor_globals.symbol_table))", "zend_unblock_interruptions()", "if (__is_neg(\"\", \"L1752\", 7, &(err), sizeof (err), &(return_value), sizeof (return_value), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto double_str;\n", "if (__is_neg(\"\", \"L1752\", 7, &(err), sizeof (err), &(return_value), sizeof (return_value), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto err;\n", "if (__is_neg(\"\", \"L1752\", 7, &(err), sizeof (err), &(return_value), sizeof (return_value), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    goto long_str;\n", "if (__is_neg(\"\", \"L1752\", 7, &(err), sizeof (err), &(return_value), sizeof (return_value), &(zhigh), sizeof (zhigh), &(zlow), sizeof (zlow), &(is_step_double), sizeof (is_step_double), &(zstep), sizeof (zstep), &(ht), sizeof (ht)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	2,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	3,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	4,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	5,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	6,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	7,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	8,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	9,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	10,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	11,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	12,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	13,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	14,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	15,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	16,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	17,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	18,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	19,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	20,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	21,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	22,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	23,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	24,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	25,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	26,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	27,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	28,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	29,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	30,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	31,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	32,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	33,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	34,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	35,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	36,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	37,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	38,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	39,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	40,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	41,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	42,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	43,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	44,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	45,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	46,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	47,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	48,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	49,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	50,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	51,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	52,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	53,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	54,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	55,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	56,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	57,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	58,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	59,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	60,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	61,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	62,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	63,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	64,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	65,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	66,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	67,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	68,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	69,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	70,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	71,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	72,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	73,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	74,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	75,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	76,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	77,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	78,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	79,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	80,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	81,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	82,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	83,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	84,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	85,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	86,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	87,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	88,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	89,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	90,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	91,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	92,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	93,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	94,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	95,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	96,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	97,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	98,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	99,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	100,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	101,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	102,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	103,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	104,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	105,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	106,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	107,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	108,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	109,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	110,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	111,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	112,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	113,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	114,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	115,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	116,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	117,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	118,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	119,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	120,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	121,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	122,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	123,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	124,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	125,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	126,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	127,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	128,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	129,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	130,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	131,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	132,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	133,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	134,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	135,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	136,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	137,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	138,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	139,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	140,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	141,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	142,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	143,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	144,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	145,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	146,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	147,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	148,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	149,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	150,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	151,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	152,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	153,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	154,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	155,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	156,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	157,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	158,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	159,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	160,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	161,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	162,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	163,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	164,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	165,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	166,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	167,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	168,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	169,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	170,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	171,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	172,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	173,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	174,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	175,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	176,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	177,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	178,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	179,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	180,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	181,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	182,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	183,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	184,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	185,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	186,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	187,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	188,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	189,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	190,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	191,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	192,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	193,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	194,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	195,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	196,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	197,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	198,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	199,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	200,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	201,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	202,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	203,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	204,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	205,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	206,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	207,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	208,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	209,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	210,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	211,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	212,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	213,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	214,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	215,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	216,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	217,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	218,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	219,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	220,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	221,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	222,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	223,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	224,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	225,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	226,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	227,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	228,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	229,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	230,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	231,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	232,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	233,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	234,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	235,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	236,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	237,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	238,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	239,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	240,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	241,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	242,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	243,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	244,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	245,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	246,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	247,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	248,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	249,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	250,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	251,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	252,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	253,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	254,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	255,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	256,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	257,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	258,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	259,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	260,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	261,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	262,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	263,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	264,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	265,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	266,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	267,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	268,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	269,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	270,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	271,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	272,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	273,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	274,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	275,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	276,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	277,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	278,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	279,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	280,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	281,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	282,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	283,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	284,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	285,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	286,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	287,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	288,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	289,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	290,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	291,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	292,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	293,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	294,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	295,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	296,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	297,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	298,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	299,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	300,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	301,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	302,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	303,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	304,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	305,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	306,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	307,
									"scores":	[-3.1091184445342082]
								}, {
									"case":	308,
									"scores":	[-5.5471385755342073, -6.2457421653342085, -7.38513815433421, -7.38513815433421, -5.5471385755342073, -6.7971294143342078, -6.834897140534208]
								}, {
									"case":	309,
									"scores":	[-5.5471385755342073, -6.2457421653342085, -7.38513815433421, -7.38513815433421, -5.5471385755342073, -6.7971294143342078, -6.834897140534208]
								}, {
									"case":	310,
									"scores":	[-5.5471385755342073, -6.2457421653342085, -7.38513815433421, -7.38513815433421, -5.5471385755342073, -6.7971294143342078, -6.834897140534208]
								}, {
									"case":	311,
									"scores":	[-5.5481385755342076, -6.2467421653342079, -7.38613815433421, -7.38613815433421, -5.5481385755342076, -6.7981294143342081, -6.8358971405342084]
								}]
						}]
				}]
		}],
	"sizes":	[{
			"switch":	0,
			"case":	308,
			"size":	7
		}, {
			"switch":	0,
			"case":	309,
			"size":	7
		}, {
			"switch":	0,
			"case":	310,
			"size":	7
		}, {
			"switch":	0,
			"case":	311,
			"size":	7
		}, {
			"switch":	1,
			"case":	1,
			"size":	7
		}, {
			"switch":	1,
			"case":	2,
			"size":	7
		}, {
			"switch":	1,
			"case":	5,
			"size":	7
		}, {
			"switch":	2,
			"case":	1,
			"size":	7
		}, {
			"switch":	2,
			"case":	2,
			"size":	7
		}, {
			"switch":	3,
			"case":	308,
			"size":	7
		}, {
			"switch":	3,
			"case":	309,
			"size":	7
		}, {
			"switch":	3,
			"case":	310,
			"size":	7
		}, {
			"switch":	3,
			"case":	311,
			"size":	7
		}, {
			"switch":	4,
			"case":	1,
			"size":	7
		}, {
			"switch":	4,
			"case":	2,
			"size":	7
		}, {
			"switch":	4,
			"case":	3,
			"size":	7
		}, {
			"switch":	5,
			"case":	326,
			"size":	12
		}, {
			"switch":	5,
			"case":	327,
			"size":	12
		}, {
			"switch":	5,
			"case":	328,
			"size":	12
		}, {
			"switch":	5,
			"case":	329,
			"size":	12
		}, {
			"switch":	6,
			"case":	1,
			"size":	12
		}, {
			"switch":	6,
			"case":	2,
			"size":	12
		}, {
			"switch":	6,
			"case":	5,
			"size":	12
		}, {
			"switch":	7,
			"case":	325,
			"size":	7
		}, {
			"switch":	7,
			"case":	326,
			"size":	7
		}, {
			"switch":	7,
			"case":	327,
			"size":	7
		}, {
			"switch":	7,
			"case":	328,
			"size":	7
		}, {
			"switch":	8,
			"case":	1,
			"size":	7
		}, {
			"switch":	9,
			"case":	1,
			"size":	12
		}, {
			"switch":	9,
			"case":	2,
			"size":	12
		}, {
			"switch":	10,
			"case":	326,
			"size":	13
		}, {
			"switch":	10,
			"case":	327,
			"size":	13
		}, {
			"switch":	10,
			"case":	328,
			"size":	13
		}, {
			"switch":	10,
			"case":	329,
			"size":	13
		}, {
			"switch":	11,
			"case":	1,
			"size":	13
		}, {
			"switch":	11,
			"case":	2,
			"size":	13
		}, {
			"switch":	11,
			"case":	3,
			"size":	13
		}, {
			"switch":	12,
			"case":	1,
			"size":	13
		}, {
			"switch":	12,
			"case":	2,
			"size":	13
		}, {
			"switch":	13,
			"case":	326,
			"size":	13
		}, {
			"switch":	13,
			"case":	327,
			"size":	13
		}, {
			"switch":	13,
			"case":	328,
			"size":	13
		}, {
			"switch":	13,
			"case":	329,
			"size":	13
		}, {
			"switch":	14,
			"case":	1,
			"size":	13
		}, {
			"switch":	15,
			"case":	325,
			"size":	7
		}, {
			"switch":	15,
			"case":	326,
			"size":	7
		}, {
			"switch":	15,
			"case":	327,
			"size":	7
		}, {
			"switch":	15,
			"case":	328,
			"size":	7
		}, {
			"switch":	16,
			"case":	1,
			"size":	7
		}, {
			"switch":	16,
			"case":	2,
			"size":	7
		}, {
			"switch":	16,
			"case":	3,
			"size":	7
		}, {
			"switch":	17,
			"case":	1,
			"size":	7
		}, {
			"switch":	18,
			"case":	1,
			"size":	7
		}, {
			"switch":	18,
			"case":	2,
			"size":	7
		}, {
			"switch":	19,
			"case":	308,
			"size":	7
		}, {
			"switch":	19,
			"case":	309,
			"size":	7
		}, {
			"switch":	19,
			"case":	310,
			"size":	7
		}, {
			"switch":	19,
			"case":	311,
			"size":	7
		}, {
			"switch":	20,
			"case":	1,
			"size":	7
		}, {
			"switch":	21,
			"case":	310,
			"size":	17
		}, {
			"switch":	21,
			"case":	311,
			"size":	17
		}, {
			"switch":	21,
			"case":	312,
			"size":	17
		}, {
			"switch":	21,
			"case":	313,
			"size":	17
		}, {
			"switch":	22,
			"case":	1,
			"size":	17
		}, {
			"switch":	22,
			"case":	2,
			"size":	17
		}, {
			"switch":	22,
			"case":	3,
			"size":	17
		}, {
			"switch":	22,
			"case":	8,
			"size":	17
		}, {
			"switch":	23,
			"case":	381,
			"size":	22
		}, {
			"switch":	23,
			"case":	382,
			"size":	22
		}, {
			"switch":	23,
			"case":	383,
			"size":	22
		}, {
			"switch":	23,
			"case":	384,
			"size":	22
		}, {
			"switch":	24,
			"case":	1,
			"size":	22
		}, {
			"switch":	25,
			"case":	381,
			"size":	22
		}, {
			"switch":	25,
			"case":	382,
			"size":	22
		}, {
			"switch":	25,
			"case":	383,
			"size":	22
		}, {
			"switch":	25,
			"case":	384,
			"size":	22
		}, {
			"switch":	26,
			"case":	1,
			"size":	22
		}, {
			"switch":	27,
			"case":	380,
			"size":	12
		}, {
			"switch":	27,
			"case":	381,
			"size":	12
		}, {
			"switch":	27,
			"case":	382,
			"size":	12
		}, {
			"switch":	27,
			"case":	383,
			"size":	12
		}, {
			"switch":	28,
			"case":	1,
			"size":	12
		}, {
			"switch":	28,
			"case":	2,
			"size":	12
		}, {
			"switch":	28,
			"case":	6,
			"size":	12
		}, {
			"switch":	29,
			"case":	380,
			"size":	12
		}, {
			"switch":	29,
			"case":	381,
			"size":	12
		}, {
			"switch":	29,
			"case":	382,
			"size":	12
		}, {
			"switch":	29,
			"case":	383,
			"size":	12
		}, {
			"switch":	30,
			"case":	1,
			"size":	12
		}, {
			"switch":	31,
			"case":	1,
			"size":	12
		}, {
			"switch":	32,
			"case":	310,
			"size":	13
		}, {
			"switch":	32,
			"case":	311,
			"size":	13
		}, {
			"switch":	32,
			"case":	312,
			"size":	13
		}, {
			"switch":	32,
			"case":	313,
			"size":	13
		}, {
			"switch":	33,
			"case":	1,
			"size":	13
		}, {
			"switch":	33,
			"case":	2,
			"size":	13
		}, {
			"switch":	33,
			"case":	6,
			"size":	13
		}, {
			"switch":	34,
			"case":	334,
			"size":	7
		}, {
			"switch":	34,
			"case":	335,
			"size":	7
		}, {
			"switch":	34,
			"case":	336,
			"size":	7
		}, {
			"switch":	34,
			"case":	337,
			"size":	7
		}, {
			"switch":	35,
			"case":	334,
			"size":	10
		}, {
			"switch":	35,
			"case":	335,
			"size":	10
		}, {
			"switch":	35,
			"case":	336,
			"size":	10
		}, {
			"switch":	35,
			"case":	337,
			"size":	10
		}, {
			"switch":	36,
			"case":	1,
			"size":	10
		}, {
			"switch":	37,
			"case":	335,
			"size":	13
		}, {
			"switch":	37,
			"case":	336,
			"size":	13
		}, {
			"switch":	37,
			"case":	337,
			"size":	13
		}, {
			"switch":	37,
			"case":	338,
			"size":	13
		}, {
			"switch":	38,
			"case":	1,
			"size":	13
		}, {
			"switch":	39,
			"case":	335,
			"size":	13
		}, {
			"switch":	39,
			"case":	336,
			"size":	13
		}, {
			"switch":	39,
			"case":	337,
			"size":	13
		}, {
			"switch":	39,
			"case":	338,
			"size":	13
		}, {
			"switch":	40,
			"case":	1,
			"size":	13
		}, {
			"switch":	41,
			"case":	334,
			"size":	7
		}, {
			"switch":	41,
			"case":	335,
			"size":	7
		}, {
			"switch":	41,
			"case":	336,
			"size":	7
		}, {
			"switch":	41,
			"case":	337,
			"size":	7
		}, {
			"switch":	42,
			"case":	1,
			"size":	7
		}, {
			"switch":	42,
			"case":	2,
			"size":	7
		}, {
			"switch":	42,
			"case":	3,
			"size":	7
		}, {
			"switch":	43,
			"case":	334,
			"size":	7
		}, {
			"switch":	43,
			"case":	335,
			"size":	7
		}, {
			"switch":	43,
			"case":	336,
			"size":	7
		}, {
			"switch":	43,
			"case":	337,
			"size":	7
		}, {
			"switch":	44,
			"case":	1,
			"size":	7
		}, {
			"switch":	44,
			"case":	2,
			"size":	7
		}, {
			"switch":	44,
			"case":	3,
			"size":	7
		}, {
			"switch":	45,
			"case":	334,
			"size":	7
		}, {
			"switch":	45,
			"case":	335,
			"size":	7
		}, {
			"switch":	45,
			"case":	336,
			"size":	7
		}, {
			"switch":	45,
			"case":	337,
			"size":	7
		}, {
			"switch":	46,
			"case":	1,
			"size":	7
		}, {
			"switch":	46,
			"case":	2,
			"size":	7
		}, {
			"switch":	46,
			"case":	4,
			"size":	7
		}, {
			"switch":	47,
			"case":	1,
			"size":	7
		}, {
			"switch":	48,
			"case":	334,
			"size":	7
		}, {
			"switch":	48,
			"case":	335,
			"size":	7
		}, {
			"switch":	48,
			"case":	336,
			"size":	7
		}, {
			"switch":	48,
			"case":	337,
			"size":	7
		}, {
			"switch":	49,
			"case":	334,
			"size":	7
		}, {
			"switch":	49,
			"case":	335,
			"size":	7
		}, {
			"switch":	49,
			"case":	336,
			"size":	7
		}, {
			"switch":	49,
			"case":	337,
			"size":	7
		}, {
			"switch":	49,
			"case":	338,
			"size":	7
		}, {
			"switch":	50,
			"case":	1,
			"size":	7
		}, {
			"switch":	51,
			"case":	1,
			"size":	7
		}, {
			"switch":	52,
			"case":	1,
			"size":	7
		}, {
			"switch":	52,
			"case":	2,
			"size":	7
		}, {
			"switch":	53,
			"case":	1,
			"size":	7
		}, {
			"switch":	53,
			"case":	2,
			"size":	7
		}, {
			"switch":	54,
			"case":	1,
			"size":	13
		}, {
			"switch":	54,
			"case":	2,
			"size":	13
		}, {
			"switch":	55,
			"case":	1,
			"size":	17
		}, {
			"switch":	55,
			"case":	2,
			"size":	17
		}, {
			"switch":	56,
			"case":	308,
			"size":	7
		}, {
			"switch":	56,
			"case":	309,
			"size":	7
		}, {
			"switch":	56,
			"case":	310,
			"size":	7
		}, {
			"switch":	56,
			"case":	311,
			"size":	7
		}],
	"func_locations":	[{
			"file":	"ext/standard/array.c",
			"functions":	[{
					"function":	"__cmsg_nxthdr",
					"begin":	308,
					"end":	324
				}, {
					"function":	"__uint16_identity",
					"begin":	32,
					"end":	36
				}, {
					"function":	"__uint32_identity",
					"begin":	38,
					"end":	42
				}, {
					"function":	"__uint64_identity",
					"begin":	44,
					"end":	48
				}, {
					"function":	"__zend_calloc",
					"begin":	103,
					"end":	108
				}, {
					"function":	"__zend_malloc",
					"begin":	93,
					"end":	101
				}, {
					"function":	"__zend_realloc",
					"begin":	110,
					"end":	118
				}, {
					"function":	"_phpi_pop",
					"begin":	1958,
					"end":	2016
				}, {
					"function":	"_zval_copy_ctor",
					"begin":	40,
					"end":	46
				}, {
					"function":	"_zval_dtor",
					"begin":	30,
					"end":	36
				}, {
					"function":	"atof",
					"begin":	24,
					"end":	28
				}, {
					"function":	"atoi",
					"begin":	360,
					"end":	364
				}, {
					"function":	"atol",
					"begin":	365,
					"end":	369
				}, {
					"function":	"atoll",
					"begin":	372,
					"end":	376
				}, {
					"function":	"bsearch",
					"begin":	19,
					"end":	43
				}, {
					"function":	"btowc",
					"begin":	317,
					"end":	320
				}, {
					"function":	"feof_unlocked",
					"begin":	124,
					"end":	128
				}, {
					"function":	"ferror_unlocked",
					"begin":	131,
					"end":	135
				}, {
					"function":	"fgetc_unlocked",
					"begin":	52,
					"end":	56
				}, {
					"function":	"fputc_unlocked",
					"begin":	87,
					"end":	91
				}, {
					"function":	"fstat",
					"begin":	462,
					"end":	466
				}, {
					"function":	"fstatat",
					"begin":	469,
					"end":	474
				}, {
					"function":	"gc_remove_from_buffer",
					"begin":	187,
					"end":	194
				}, {
					"function":	"gc_zval_check_possible_root",
					"begin":	180,
					"end":	185
				}, {
					"function":	"getc_unlocked",
					"begin":	62,
					"end":	66
				}, {
					"function":	"getchar",
					"begin":	43,
					"end":	47
				}, {
					"function":	"getchar_unlocked",
					"begin":	69,
					"end":	73
				}, {
					"function":	"gnu_dev_major",
					"begin":	79,
					"end":	79
				}, {
					"function":	"gnu_dev_makedev",
					"begin":	81,
					"end":	81
				}, {
					"function":	"gnu_dev_minor",
					"begin":	80,
					"end":	80
				}, {
					"function":	"i_zend_is_true",
					"begin":	101,
					"end":	156
				}, {
					"function":	"i_zval_ptr_dtor",
					"begin":	80,
					"end":	99
				}, {
					"function":	"is_numeric_string",
					"begin":	102,
					"end":	224
				}, {
					"function":	"lstat",
					"begin":	455,
					"end":	459
				}, {
					"function":	"mbrlen",
					"begin":	328,
					"end":	332
				}, {
					"function":	"mknod",
					"begin":	478,
					"end":	482
				}, {
					"function":	"mknodat",
					"begin":	486,
					"end":	491
				}, {
					"function":	"php_array_data_compare",
					"begin":	354,
					"end":	391
				}, {
					"function":	"php_array_data_shuffle",
					"begin":	1761,
					"end":	1814
				}, {
					"function":	"php_array_diff",
					"begin":	3395,
					"end":	3660
				}, {
					"function":	"php_array_diff_key",
					"begin":	3314,
					"end":	3392
				}, {
					"function":	"php_array_init_globals",
					"begin":	96,
					"end":	99
				}, {
					"function":	"php_array_intersect",
					"begin":	2977,
					"end":	3247
				}, {
					"function":	"php_array_intersect_key",
					"begin":	2891,
					"end":	2974
				}, {
					"function":	"php_array_key_compare",
					"begin":	168,
					"end":	220
				}, {
					"function":	"php_array_merge",
					"begin":	2234,
					"end":	2294
				}, {
					"function":	"php_array_merge_or_replace_wrapper",
					"begin":	2356,
					"end":	2393
				}, {
					"function":	"php_array_natural_case_compare",
					"begin":	445,
					"end":	448
				}, {
					"function":	"php_array_natural_compare",
					"begin":	439,
					"end":	442
				}, {
					"function":	"php_array_natural_general_compare",
					"begin":	400,
					"end":	436
				}, {
					"function":	"php_array_replace_recursive",
					"begin":	2297,
					"end":	2353
				}, {
					"function":	"php_array_reverse_data_compare",
					"begin":	394,
					"end":	397
				}, {
					"function":	"php_array_reverse_key_compare",
					"begin":	223,
					"end":	226
				}, {
					"function":	"php_array_user_compare",
					"begin":	569,
					"end":	596
				}, {
					"function":	"php_array_user_key_compare",
					"begin":	714,
					"end":	764
				}, {
					"function":	"php_array_walk",
					"begin":	1048,
					"end":	1140
				}, {
					"function":	"php_compact_var",
					"begin":	1472,
					"end":	1504
				}, {
					"function":	"php_count_recursive",
					"begin":	269,
					"end":	296
				}, {
					"function":	"php_multisort_compare",
					"begin":	3731,
					"end":	3752
				}, {
					"function":	"php_natsort",
					"begin":	451,
					"end":	470
				}, {
					"function":	"php_prefix_varname",
					"begin":	1295,
					"end":	1309
				}, {
					"function":	"php_search_array",
					"begin":	1197,
					"end":	1240
				}, {
					"function":	"php_set_compare_func",
					"begin":	143,
					"end":	165
				}, {
					"function":	"php_set_error_handling",
					"begin":	292,
					"end":	295
				}, {
					"function":	"php_splice",
					"begin":	1833,
					"end":	1920
				}, {
					"function":	"php_std_error_handling",
					"begin":	296,
					"end":	296
				}, {
					"function":	"php_valid_var_name",
					"begin":	1259,
					"end":	1292
				}, {
					"function":	"putc_unlocked",
					"begin":	97,
					"end":	101
				}, {
					"function":	"putchar",
					"begin":	78,
					"end":	82
				}, {
					"function":	"putchar_unlocked",
					"begin":	104,
					"end":	108
				}, {
					"function":	"safe_free_zval_ptr_rel",
					"begin":	62,
					"end":	69
				}, {
					"function":	"smart_str_print_long",
					"begin":	153,
					"end":	157
				}, {
					"function":	"smart_str_print_unsigned",
					"begin":	159,
					"end":	163
				}, {
					"function":	"stat",
					"begin":	448,
					"end":	452
				}, {
					"function":	"tolower",
					"begin":	206,
					"end":	210
				}, {
					"function":	"toupper",
					"begin":	212,
					"end":	216
				}, {
					"function":	"vprintf",
					"begin":	35,
					"end":	39
				}, {
					"function":	"wctob",
					"begin":	323,
					"end":	326
				}, {
					"function":	"zend_arg_types_stack_2_pop",
					"begin":	355,
					"end":	363
				}, {
					"function":	"zend_arg_types_stack_3_pop",
					"begin":	365,
					"end":	374
				}, {
					"function":	"zend_dval_to_lval",
					"begin":	77,
					"end":	83
				}, {
					"function":	"zend_inline_hash_func",
					"begin":	261,
					"end":	288
				}, {
					"function":	"zend_memnstr",
					"begin":	226,
					"end":	257
				}, {
					"function":	"zend_memrchr",
					"begin":	259,
					"end":	274
				}, {
					"function":	"zend_objects_store_del_ref_by_handle",
					"begin":	71,
					"end":	73
				}, {
					"function":	"zend_ptr_stack_2_pop",
					"begin":	93,
					"end":	98
				}, {
					"function":	"zend_ptr_stack_2_push",
					"begin":	72,
					"end":	83
				}, {
					"function":	"zend_ptr_stack_3_pop",
					"begin":	85,
					"end":	91
				}, {
					"function":	"zend_ptr_stack_3_push",
					"begin":	58,
					"end":	70
				}, {
					"function":	"zend_ptr_stack_pop",
					"begin":	108,
					"end":	112
				}, {
					"function":	"zend_ptr_stack_push",
					"begin":	100,
					"end":	106
				}, {
					"function":	"zend_symtable_del",
					"begin":	355,
					"end":	359
				}, {
					"function":	"zend_symtable_exists",
					"begin":	369,
					"end":	373
				}, {
					"function":	"zend_symtable_find",
					"begin":	362,
					"end":	366
				}, {
					"function":	"zend_symtable_update",
					"begin":	348,
					"end":	352
				}, {
					"function":	"zend_symtable_update_current_key_ex",
					"begin":	375,
					"end":	379
				}, {
					"function":	"zend_vm_stack_alloc",
					"begin":	243,
					"end":	270
				}, {
					"function":	"zend_vm_stack_clear_multiple",
					"begin":	331,
					"end":	342
				}, {
					"function":	"zend_vm_stack_destroy",
					"begin":	197,
					"end":	206
				}, {
					"function":	"zend_vm_stack_extend",
					"begin":	208,
					"end":	213
				}, {
					"function":	"zend_vm_stack_free",
					"begin":	284,
					"end":	300
				}, {
					"function":	"zend_vm_stack_free_int",
					"begin":	272,
					"end":	282
				}, {
					"function":	"zend_vm_stack_get_arg",
					"begin":	344,
					"end":	353
				}, {
					"function":	"zend_vm_stack_init",
					"begin":	192,
					"end":	195
				}, {
					"function":	"zend_vm_stack_new_page",
					"begin":	183,
					"end":	190
				}, {
					"function":	"zend_vm_stack_pop",
					"begin":	231,
					"end":	241
				}, {
					"function":	"zend_vm_stack_push",
					"begin":	220,
					"end":	224
				}, {
					"function":	"zend_vm_stack_push_args",
					"begin":	302,
					"end":	329
				}, {
					"function":	"zend_vm_stack_push_nocheck",
					"begin":	226,
					"end":	229
				}, {
					"function":	"zend_vm_stack_top",
					"begin":	215,
					"end":	218
				}, {
					"function":	"zif_array_change_key_case",
					"begin":	2722,
					"end":	2760
				}, {
					"function":	"zif_array_chunk",
					"begin":	4392,
					"end":	4461
				}, {
					"function":	"zif_array_combine",
					"begin":	4466,
					"end":	4520
				}, {
					"function":	"zif_array_count_values",
					"begin":	2518,
					"end":	2561
				}, {
					"function":	"zif_array_diff",
					"begin":	3681,
					"end":	3684
				}, {
					"function":	"zif_array_diff_assoc",
					"begin":	3697,
					"end":	3700
				}, {
					"function":	"zif_array_diff_key",
					"begin":	3665,
					"end":	3668
				}, {
					"function":	"zif_array_diff_uassoc",
					"begin":	3705,
					"end":	3708
				}, {
					"function":	"zif_array_diff_ukey",
					"begin":	3673,
					"end":	3676
				}, {
					"function":	"zif_array_fill",
					"begin":	1543,
					"end":	1568
				}, {
					"function":	"zif_array_fill_keys",
					"begin":	1573,
					"end":	1611
				}, {
					"function":	"zif_array_filter",
					"begin":	4156,
					"end":	4220
				}, {
					"function":	"zif_array_flip",
					"begin":	2679,
					"end":	2717
				}, {
					"function":	"zif_array_intersect",
					"begin":	3268,
					"end":	3271
				}, {
					"function":	"zif_array_intersect_assoc",
					"begin":	3284,
					"end":	3287
				}, {
					"function":	"zif_array_intersect_key",
					"begin":	3252,
					"end":	3255
				}, {
					"function":	"zif_array_intersect_uassoc",
					"begin":	3292,
					"end":	3295
				}, {
					"function":	"zif_array_intersect_ukey",
					"begin":	3260,
					"end":	3263
				}, {
					"function":	"zif_array_key_exists",
					"begin":	4357,
					"end":	4387
				}, {
					"function":	"zif_array_keys",
					"begin":	2430,
					"end":	2488
				}, {
					"function":	"zif_array_map",
					"begin":	4225,
					"end":	4352
				}, {
					"function":	"zif_array_merge",
					"begin":	2398,
					"end":	2401
				}, {
					"function":	"zif_array_merge_recursive",
					"begin":	2406,
					"end":	2409
				}, {
					"function":	"zif_array_multisort",
					"begin":	3764,
					"end":	3938
				}, {
					"function":	"zif_array_pad",
					"begin":	2608,
					"end":	2674
				}, {
					"function":	"zif_array_pop",
					"begin":	2021,
					"end":	2024
				}, {
					"function":	"zif_array_product",
					"begin":	4044,
					"end":	4083
				}, {
					"function":	"zif_array_push",
					"begin":	1925,
					"end":	1954
				}, {
					"function":	"zif_array_rand",
					"begin":	3943,
					"end":	3998
				}, {
					"function":	"zif_array_reduce",
					"begin":	4088,
					"end":	4151
				}, {
					"function":	"zif_array_replace",
					"begin":	2414,
					"end":	2417
				}, {
					"function":	"zif_array_replace_recursive",
					"begin":	2422,
					"end":	2425
				}, {
					"function":	"zif_array_reverse",
					"begin":	2566,
					"end":	2603
				}, {
					"function":	"zif_array_search",
					"begin":	1253,
					"end":	1256
				}, {
					"function":	"zif_array_shift",
					"begin":	2029,
					"end":	2032
				}, {
					"function":	"zif_array_slice",
					"begin":	2150,
					"end":	2231
				}, {
					"function":	"zif_array_splice",
					"begin":	2068,
					"end":	2145
				}, {
					"function":	"zif_array_sum",
					"begin":	4003,
					"end":	4039
				}, {
					"function":	"zif_array_udiff",
					"begin":	3689,
					"end":	3692
				}, {
					"function":	"zif_array_udiff_assoc",
					"begin":	3713,
					"end":	3716
				}, {
					"function":	"zif_array_udiff_uassoc",
					"begin":	3721,
					"end":	3724
				}, {
					"function":	"zif_array_uintersect",
					"begin":	3276,
					"end":	3279
				}, {
					"function":	"zif_array_uintersect_assoc",
					"begin":	3300,
					"end":	3303
				}, {
					"function":	"zif_array_uintersect_uassoc",
					"begin":	3308,
					"end":	3311
				}, {
					"function":	"zif_array_unique",
					"begin":	2765,
					"end":	2827
				}, {
					"function":	"zif_array_unshift",
					"begin":	2037,
					"end":	2063
				}, {
					"function":	"zif_array_values",
					"begin":	2493,
					"end":	2513
				}, {
					"function":	"zif_array_walk",
					"begin":	1145,
					"end":	1165
				}, {
					"function":	"zif_array_walk_recursive",
					"begin":	1170,
					"end":	1190
				}, {
					"function":	"zif_arsort",
					"begin":	511,
					"end":	526
				}, {
					"function":	"zif_asort",
					"begin":	491,
					"end":	506
				}, {
					"function":	"zif_compact",
					"begin":	1509,
					"end":	1538
				}, {
					"function":	"zif_count",
					"begin":	301,
					"end":	345
				}, {
					"function":	"zif_current",
					"begin":	904,
					"end":	917
				}, {
					"function":	"zif_end",
					"begin":	812,
					"end":	830
				}, {
					"function":	"zif_extract",
					"begin":	1314,
					"end":	1469
				}, {
					"function":	"zif_in_array",
					"begin":	1245,
					"end":	1248
				}, {
					"function":	"zif_key",
					"begin":	922,
					"end":	943
				}, {
					"function":	"zif_krsort",
					"begin":	231,
					"end":	246
				}, {
					"function":	"zif_ksort",
					"begin":	251,
					"end":	266
				}, {
					"function":	"zif_max",
					"begin":	999,
					"end":	1045
				}, {
					"function":	"zif_min",
					"begin":	948,
					"end":	994
				}, {
					"function":	"zif_natcasesort",
					"begin":	483,
					"end":	486
				}, {
					"function":	"zif_natsort",
					"begin":	475,
					"end":	478
				}, {
					"function":	"zif_next",
					"begin":	858,
					"end":	876
				}, {
					"function":	"zif_prev",
					"begin":	835,
					"end":	853
				}, {
					"function":	"zif_range",
					"begin":	1616,
					"end":	1758
				}, {
					"function":	"zif_reset",
					"begin":	881,
					"end":	899
				}, {
					"function":	"zif_rsort",
					"begin":	551,
					"end":	566
				}, {
					"function":	"zif_shuffle",
					"begin":	1819,
					"end":	1830
				}, {
					"function":	"zif_sort",
					"begin":	531,
					"end":	546
				}, {
					"function":	"zif_uasort",
					"begin":	673,
					"end":	711
				}, {
					"function":	"zif_uksort",
					"begin":	769,
					"end":	807
				}, {
					"function":	"zif_usort",
					"begin":	630,
					"end":	668
				}, {
					"function":	"zm_shutdown_array",
					"begin":	133,
					"end":	140
				}, {
					"function":	"zm_startup_array",
					"begin":	102,
					"end":	130
				}, {
					"function":	"zval_addref_p",
					"begin":	386,
					"end":	388
				}, {
					"function":	"zval_compare",
					"begin":	2830,
					"end":	2862
				}, {
					"function":	"zval_delref_p",
					"begin":	390,
					"end":	392
				}, {
					"function":	"zval_isref_p",
					"begin":	394,
					"end":	396
				}, {
					"function":	"zval_refcount_p",
					"begin":	378,
					"end":	380
				}, {
					"function":	"zval_set_isref_p",
					"begin":	398,
					"end":	400
				}, {
					"function":	"zval_set_isref_to_p",
					"begin":	406,
					"end":	408
				}, {
					"function":	"zval_set_refcount_p",
					"begin":	382,
					"end":	384
				}, {
					"function":	"zval_unset_isref_p",
					"begin":	402,
					"end":	404
				}, {
					"function":	"zval_user_compare",
					"begin":	2865,
					"end":	2888
				}]
		}]
}
