{
	"switch_num":	68,
	"case_num":	[55, 2, 124, 1, 2, 177, 19, 174, 55, 2, 111, 1, 2, 240, 3, 240, 3, 240, 5, 1, 239, 3, 239, 1, 239, 166, 239, 155, 2, 239, 366, 239, 466, 239, 1, 239, 166, 239, 200, 2, 2, 2, 111, 1, 90, 2, 91, 3, 91, 147, 2, 91, 3, 189, 90, 189, 3, 2, 188, 1, 2, 91, 1, 62, 62, 48, 39, 2],
	"switch_cluster":	[[3, 6, 8, 11, 19, 23, 25, 27, 28, 30, 32, 34, 36, 38, 39, 40, 43, 49, 50, 54, 57, 59, 60, 62, 67], [1, 4, 9, 12, 14, 16, 18, 21, 41, 45, 47, 52, 56, 66], [0, 2, 5, 7, 10, 13, 15, 17, 20, 22, 24, 26, 29, 31, 33, 35, 37, 42, 44, 46, 48, 51, 53, 55, 58, 61, 63, 64, 65], []],
	"priority":	[{
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	428,
			"primary_score":	999861,
			"second_score":	3110
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	429,
			"primary_score":	999861,
			"second_score":	3108
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	479,
			"primary_score":	999861,
			"second_score":	3111
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	485,
			"primary_score":	999861,
			"second_score":	2
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	590,
			"primary_score":	999861,
			"second_score":	3107
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	592,
			"primary_score":	999861,
			"second_score":	3106
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	593,
			"primary_score":	999861,
			"second_score":	6
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	594,
			"primary_score":	999861,
			"second_score":	5
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	595,
			"primary_score":	999861,
			"second_score":	637
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	596,
			"primary_score":	999861,
			"second_score":	636
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	597,
			"primary_score":	999861,
			"second_score":	635
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	599,
			"primary_score":	999861,
			"second_score":	4
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	601,
			"primary_score":	999861,
			"second_score":	3
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	692,
			"primary_score":	999861,
			"second_score":	121734
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	697,
			"primary_score":	999861,
			"second_score":	121733
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	699,
			"primary_score":	999861,
			"second_score":	121732
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	812,
			"primary_score":	999861,
			"second_score":	121731
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	816,
			"primary_score":	999861,
			"second_score":	121730
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	819,
			"primary_score":	999861,
			"second_score":	121729
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	820,
			"primary_score":	999861,
			"second_score":	121728
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1897,
			"primary_score":	999861,
			"second_score":	121950
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1898,
			"primary_score":	999861,
			"second_score":	121949
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1901,
			"primary_score":	999861,
			"second_score":	121948
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1902,
			"primary_score":	999861,
			"second_score":	121947
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1903,
			"primary_score":	999861,
			"second_score":	121946
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1904,
			"primary_score":	999861,
			"second_score":	121945
		}, {
			"file":	"Zend/zend.c",
			"line":	227,
			"primary_score":	999861,
			"second_score":	119706
		}, {
			"file":	"Zend/zend.c",
			"line":	228,
			"primary_score":	999861,
			"second_score":	119705
		}, {
			"file":	"Zend/zend.c",
			"line":	229,
			"primary_score":	999861,
			"second_score":	119704
		}, {
			"file":	"Zend/zend.c",
			"line":	305,
			"primary_score":	999861,
			"second_score":	119710
		}, {
			"file":	"Zend/zend.c",
			"line":	311,
			"primary_score":	999861,
			"second_score":	119709
		}, {
			"file":	"Zend/zend.c",
			"line":	312,
			"primary_score":	999861,
			"second_score":	119708
		}, {
			"file":	"Zend/zend.c",
			"line":	314,
			"primary_score":	999861,
			"second_score":	119707
		}, {
			"file":	"Zend/zend.c",
			"line":	315,
			"primary_score":	999861,
			"second_score":	119703
		}, {
			"file":	"Zend/zend.c",
			"line":	318,
			"primary_score":	999861,
			"second_score":	119702
		}, {
			"file":	"Zend/zend.c",
			"line":	319,
			"primary_score":	999861,
			"second_score":	119701
		}, {
			"file":	"Zend/zend.c",
			"line":	322,
			"primary_score":	999861,
			"second_score":	119700
		}, {
			"file":	"Zend/zend.c",
			"line":	324,
			"primary_score":	999861,
			"second_score":	121360
		}, {
			"file":	"Zend/zend.c",
			"line":	325,
			"primary_score":	999861,
			"second_score":	121309
		}, {
			"file":	"Zend/zend.c",
			"line":	328,
			"primary_score":	999861,
			"second_score":	121308
		}, {
			"file":	"Zend/zend.c",
			"line":	797,
			"primary_score":	999861,
			"second_score":	103518
		}, {
			"file":	"Zend/zend.c",
			"line":	798,
			"primary_score":	999861,
			"second_score":	103510
		}, {
			"file":	"Zend/zend.c",
			"line":	800,
			"primary_score":	999861,
			"second_score":	47188
		}, {
			"file":	"Zend/zend.c",
			"line":	801,
			"primary_score":	999861,
			"second_score":	47169
		}, {
			"file":	"Zend/zend.c",
			"line":	803,
			"primary_score":	999861,
			"second_score":	14813
		}, {
			"file":	"Zend/zend.c",
			"line":	804,
			"primary_score":	999861,
			"second_score":	14750
		}, {
			"file":	"Zend/zend.c",
			"line":	806,
			"primary_score":	999861,
			"second_score":	14749
		}, {
			"file":	"Zend/zend.c",
			"line":	807,
			"primary_score":	999861,
			"second_score":	14741
		}, {
			"file":	"Zend/zend.c",
			"line":	809,
			"primary_score":	999861,
			"second_score":	14740
		}, {
			"file":	"Zend/zend.c",
			"line":	810,
			"primary_score":	999861,
			"second_score":	14739
		}, {
			"file":	"Zend/zend.c",
			"line":	812,
			"primary_score":	999861,
			"second_score":	14738
		}, {
			"file":	"Zend/zend.c",
			"line":	813,
			"primary_score":	999861,
			"second_score":	6281
		}, {
			"file":	"Zend/zend.c",
			"line":	814,
			"primary_score":	999861,
			"second_score":	6280
		}, {
			"file":	"Zend/zend.c",
			"line":	822,
			"primary_score":	999861,
			"second_score":	6224
		}, {
			"file":	"Zend/zend.c",
			"line":	824,
			"primary_score":	999861,
			"second_score":	6124
		}, {
			"file":	"Zend/zend.c",
			"line":	898,
			"primary_score":	999861,
			"second_score":	120130
		}, {
			"file":	"Zend/zend.c",
			"line":	899,
			"primary_score":	999861,
			"second_score":	120124
		}, {
			"file":	"Zend/zend.c",
			"line":	900,
			"primary_score":	999861,
			"second_score":	119364
		}, {
			"file":	"Zend/zend.c",
			"line":	907,
			"primary_score":	999861,
			"second_score":	118538
		}, {
			"file":	"Zend/zend.c",
			"line":	908,
			"primary_score":	999861,
			"second_score":	118537
		}, {
			"file":	"Zend/zend.c",
			"line":	910,
			"primary_score":	999861,
			"second_score":	118536
		}, {
			"file":	"Zend/zend.c",
			"line":	911,
			"primary_score":	999861,
			"second_score":	118530
		}, {
			"file":	"Zend/zend.c",
			"line":	912,
			"primary_score":	999861,
			"second_score":	118520
		}, {
			"file":	"Zend/zend.c",
			"line":	915,
			"primary_score":	999861,
			"second_score":	118518
		}, {
			"file":	"Zend/zend.c",
			"line":	917,
			"primary_score":	999861,
			"second_score":	113649
		}, {
			"file":	"Zend/zend.c",
			"line":	918,
			"primary_score":	999861,
			"second_score":	113643
		}, {
			"file":	"Zend/zend.c",
			"line":	919,
			"primary_score":	999861,
			"second_score":	113494
		}, {
			"file":	"Zend/zend.c",
			"line":	921,
			"primary_score":	999861,
			"second_score":	113492
		}, {
			"file":	"Zend/zend.c",
			"line":	924,
			"primary_score":	999861,
			"second_score":	113465
		}, {
			"file":	"Zend/zend.c",
			"line":	925,
			"primary_score":	999861,
			"second_score":	113464
		}, {
			"file":	"Zend/zend.c",
			"line":	943,
			"primary_score":	999861,
			"second_score":	113460
		}, {
			"file":	"Zend/zend.c",
			"line":	944,
			"primary_score":	999861,
			"second_score":	113454
		}, {
			"file":	"Zend/zend.c",
			"line":	945,
			"primary_score":	999861,
			"second_score":	113451
		}, {
			"file":	"Zend/zend.c",
			"line":	1200,
			"primary_score":	999861,
			"second_score":	120178
		}, {
			"file":	"Zend/zend.c",
			"line":	1201,
			"primary_score":	999861,
			"second_score":	120177
		}, {
			"file":	"Zend/zend.c",
			"line":	1202,
			"primary_score":	999861,
			"second_score":	120176
		}, {
			"file":	"Zend/zend.c",
			"line":	1205,
			"primary_score":	999861,
			"second_score":	133533
		}, {
			"file":	"Zend/zend.c",
			"line":	1206,
			"primary_score":	999861,
			"second_score":	133532
		}, {
			"file":	"Zend/zend.c",
			"line":	1207,
			"primary_score":	999861,
			"second_score":	133531
		}, {
			"file":	"Zend/zend.c",
			"line":	1209,
			"primary_score":	999861,
			"second_score":	133410
		}, {
			"file":	"Zend/zend.c",
			"line":	1210,
			"primary_score":	999861,
			"second_score":	133331
		}, {
			"file":	"Zend/zend.c",
			"line":	1211,
			"primary_score":	999861,
			"second_score":	133330
		}, {
			"file":	"Zend/zend.c",
			"line":	1212,
			"primary_score":	999861,
			"second_score":	133329
		}, {
			"file":	"Zend/zend.c",
			"line":	1213,
			"primary_score":	999861,
			"second_score":	120613
		}, {
			"file":	"Zend/zend.c",
			"line":	1214,
			"primary_score":	999861,
			"second_score":	120611
		}, {
			"file":	"Zend/zend.c",
			"line":	1239,
			"primary_score":	999861,
			"second_score":	120610
		}, {
			"file":	"Zend/zend.c",
			"line":	1240,
			"primary_score":	999861,
			"second_score":	120197
		}, {
			"file":	"Zend/zend.c",
			"line":	1248,
			"primary_score":	999861,
			"second_score":	120175
		}, {
			"file":	"Zend/zend.c",
			"line":	1249,
			"primary_score":	999861,
			"second_score":	120174
		}, {
			"file":	"Zend/zend.c",
			"line":	1250,
			"primary_score":	999861,
			"second_score":	120173
		}, {
			"file":	"Zend/zend.c",
			"line":	1252,
			"primary_score":	999861,
			"second_score":	120172
		}, {
			"file":	"Zend/zend.c",
			"line":	1282,
			"primary_score":	999861,
			"second_score":	113562
		}, {
			"file":	"Zend/zend.h",
			"line":	379,
			"primary_score":	999861,
			"second_score":	15289
		}, {
			"file":	"Zend/zend.h",
			"line":	383,
			"primary_score":	999861,
			"second_score":	121308
		}, {
			"file":	"Zend/zend.h",
			"line":	387,
			"primary_score":	999861,
			"second_score":	132080
		}, {
			"file":	"Zend/zend.h",
			"line":	391,
			"primary_score":	999861,
			"second_score":	15291
		}, {
			"file":	"Zend/zend.h",
			"line":	395,
			"primary_score":	999861,
			"second_score":	123156
		}, {
			"file":	"Zend/zend.h",
			"line":	399,
			"primary_score":	999861,
			"second_score":	133767
		}, {
			"file":	"Zend/zend.h",
			"line":	403,
			"primary_score":	999861,
			"second_score":	17648
		}, {
			"file":	"Zend/zend_API.c",
			"line":	241,
			"primary_score":	999974,
			"second_score":	125031
		}, {
			"file":	"Zend/zend_API.c",
			"line":	242,
			"primary_score":	999974,
			"second_score":	125030
		}, {
			"file":	"Zend/zend_API.c",
			"line":	307,
			"primary_score":	999861,
			"second_score":	122845
		}, {
			"file":	"Zend/zend_API.c",
			"line":	308,
			"primary_score":	999861,
			"second_score":	122844
		}, {
			"file":	"Zend/zend_API.c",
			"line":	309,
			"primary_score":	999861,
			"second_score":	122843
		}, {
			"file":	"Zend/zend_API.c",
			"line":	312,
			"primary_score":	999861,
			"second_score":	122842
		}, {
			"file":	"Zend/zend_API.c",
			"line":	313,
			"primary_score":	999861,
			"second_score":	122841
		}, {
			"file":	"Zend/zend_API.c",
			"line":	315,
			"primary_score":	999861,
			"second_score":	122840
		}, {
			"file":	"Zend/zend_API.c",
			"line":	320,
			"primary_score":	999861,
			"second_score":	122839
		}, {
			"file":	"Zend/zend_API.c",
			"line":	325,
			"primary_score":	999861,
			"second_score":	122838
		}, {
			"file":	"Zend/zend_API.c",
			"line":	416,
			"primary_score":	999861,
			"second_score":	128665
		}, {
			"file":	"Zend/zend_API.c",
			"line":	417,
			"primary_score":	999861,
			"second_score":	128664
		}, {
			"file":	"Zend/zend_API.c",
			"line":	418,
			"primary_score":	999861,
			"second_score":	128663
		}, {
			"file":	"Zend/zend_API.c",
			"line":	431,
			"primary_score":	999861,
			"second_score":	128662
		}, {
			"file":	"Zend/zend_API.c",
			"line":	432,
			"primary_score":	999861,
			"second_score":	128661
		}, {
			"file":	"Zend/zend_API.c",
			"line":	438,
			"primary_score":	999861,
			"second_score":	128659
		}, {
			"file":	"Zend/zend_API.c",
			"line":	439,
			"primary_score":	999861,
			"second_score":	128658
		}, {
			"file":	"Zend/zend_API.c",
			"line":	440,
			"primary_score":	999861,
			"second_score":	128657
		}, {
			"file":	"Zend/zend_API.c",
			"line":	453,
			"primary_score":	999861,
			"second_score":	128656
		}, {
			"file":	"Zend/zend_API.c",
			"line":	632,
			"primary_score":	999961,
			"second_score":	122347
		}, {
			"file":	"Zend/zend_API.c",
			"line":	633,
			"primary_score":	999961,
			"second_score":	122346
		}, {
			"file":	"Zend/zend_API.c",
			"line":	636,
			"primary_score":	999961,
			"second_score":	122345
		}, {
			"file":	"Zend/zend_API.c",
			"line":	639,
			"primary_score":	999961,
			"second_score":	122344
		}, {
			"file":	"Zend/zend_API.c",
			"line":	643,
			"primary_score":	999861,
			"second_score":	122837
		}, {
			"file":	"Zend/zend_API.c",
			"line":	644,
			"primary_score":	999861,
			"second_score":	122836
		}, {
			"file":	"Zend/zend_API.c",
			"line":	647,
			"primary_score":	999861,
			"second_score":	122835
		}, {
			"file":	"Zend/zend_API.c",
			"line":	650,
			"primary_score":	999861,
			"second_score":	122834
		}, {
			"file":	"Zend/zend_API.c",
			"line":	656,
			"primary_score":	999861,
			"second_score":	122833
		}, {
			"file":	"Zend/zend_API.c",
			"line":	658,
			"primary_score":	999861,
			"second_score":	122832
		}, {
			"file":	"Zend/zend_API.c",
			"line":	664,
			"primary_score":	999861,
			"second_score":	122848
		}, {
			"file":	"Zend/zend_API.c",
			"line":	665,
			"primary_score":	999861,
			"second_score":	122847
		}, {
			"file":	"Zend/zend_API.c",
			"line":	667,
			"primary_score":	999861,
			"second_score":	122846
		}, {
			"file":	"Zend/zend_API.c",
			"line":	668,
			"primary_score":	999861,
			"second_score":	122831
		}, {
			"file":	"Zend/zend_API.c",
			"line":	688,
			"primary_score":	999861,
			"second_score":	122830
		}, {
			"file":	"Zend/zend_API.c",
			"line":	694,
			"primary_score":	999861,
			"second_score":	122908
		}, {
			"file":	"Zend/zend_API.c",
			"line":	695,
			"primary_score":	999861,
			"second_score":	122907
		}, {
			"file":	"Zend/zend_API.c",
			"line":	696,
			"primary_score":	999861,
			"second_score":	122906
		}, {
			"file":	"Zend/zend_API.c",
			"line":	697,
			"primary_score":	999861,
			"second_score":	122905
		}, {
			"file":	"Zend/zend_API.c",
			"line":	698,
			"primary_score":	999861,
			"second_score":	122904
		}, {
			"file":	"Zend/zend_API.c",
			"line":	699,
			"primary_score":	999861,
			"second_score":	122903
		}, {
			"file":	"Zend/zend_API.c",
			"line":	700,
			"primary_score":	999861,
			"second_score":	122902
		}, {
			"file":	"Zend/zend_API.c",
			"line":	701,
			"primary_score":	999861,
			"second_score":	122901
		}, {
			"file":	"Zend/zend_API.c",
			"line":	702,
			"primary_score":	999861,
			"second_score":	122900
		}, {
			"file":	"Zend/zend_API.c",
			"line":	703,
			"primary_score":	999861,
			"second_score":	122899
		}, {
			"file":	"Zend/zend_API.c",
			"line":	704,
			"primary_score":	999861,
			"second_score":	122898
		}, {
			"file":	"Zend/zend_API.c",
			"line":	706,
			"primary_score":	999861,
			"second_score":	122897
		}, {
			"file":	"Zend/zend_API.c",
			"line":	707,
			"primary_score":	999861,
			"second_score":	122890
		}, {
			"file":	"Zend/zend_API.c",
			"line":	708,
			"primary_score":	999861,
			"second_score":	122889
		}, {
			"file":	"Zend/zend_API.c",
			"line":	718,
			"primary_score":	999861,
			"second_score":	122888
		}, {
			"file":	"Zend/zend_API.c",
			"line":	722,
			"primary_score":	999861,
			"second_score":	122891
		}, {
			"file":	"Zend/zend_API.c",
			"line":	742,
			"primary_score":	999886,
			"second_score":	121094
		}, {
			"file":	"Zend/zend_API.c",
			"line":	744,
			"primary_score":	999886,
			"second_score":	121093
		}, {
			"file":	"Zend/zend_API.c",
			"line":	745,
			"primary_score":	999886,
			"second_score":	121092
		}, {
			"file":	"Zend/zend_API.c",
			"line":	748,
			"primary_score":	999886,
			"second_score":	121091
		}, {
			"file":	"Zend/zend_API.c",
			"line":	749,
			"primary_score":	999886,
			"second_score":	121090
		}, {
			"file":	"Zend/zend_API.c",
			"line":	764,
			"primary_score":	999861,
			"second_score":	122887
		}, {
			"file":	"Zend/zend_API.c",
			"line":	765,
			"primary_score":	999861,
			"second_score":	121088
		}, {
			"file":	"Zend/zend_API.c",
			"line":	768,
			"primary_score":	999861,
			"second_score":	122886
		}, {
			"file":	"Zend/zend_API.c",
			"line":	770,
			"primary_score":	999886,
			"second_score":	121086
		}, {
			"file":	"Zend/zend_API.c",
			"line":	771,
			"primary_score":	999886,
			"second_score":	121085
		}, {
			"file":	"Zend/zend_API.c",
			"line":	774,
			"primary_score":	999861,
			"second_score":	122885
		}, {
			"file":	"Zend/zend_API.c",
			"line":	790,
			"primary_score":	999861,
			"second_score":	122884
		}, {
			"file":	"Zend/zend_API.c",
			"line":	792,
			"primary_score":	999861,
			"second_score":	122882
		}, {
			"file":	"Zend/zend_API.c",
			"line":	798,
			"primary_score":	999861,
			"second_score":	122881
		}, {
			"file":	"Zend/zend_API.c",
			"line":	799,
			"primary_score":	999861,
			"second_score":	122880
		}, {
			"file":	"Zend/zend_API.c",
			"line":	800,
			"primary_score":	999861,
			"second_score":	122854
		}, {
			"file":	"Zend/zend_API.c",
			"line":	801,
			"primary_score":	999861,
			"second_score":	122853
		}, {
			"file":	"Zend/zend_API.c",
			"line":	804,
			"primary_score":	999861,
			"second_score":	122852
		}, {
			"file":	"Zend/zend_API.c",
			"line":	805,
			"primary_score":	999886,
			"second_score":	121076
		}, {
			"file":	"Zend/zend_API.c",
			"line":	808,
			"primary_score":	999886,
			"second_score":	121075
		}, {
			"file":	"Zend/zend_API.c",
			"line":	809,
			"primary_score":	999886,
			"second_score":	121074
		}, {
			"file":	"Zend/zend_API.c",
			"line":	810,
			"primary_score":	999886,
			"second_score":	121073
		}, {
			"file":	"Zend/zend_API.c",
			"line":	812,
			"primary_score":	999886,
			"second_score":	121072
		}, {
			"file":	"Zend/zend_API.c",
			"line":	813,
			"primary_score":	999886,
			"second_score":	121071
		}, {
			"file":	"Zend/zend_API.c",
			"line":	814,
			"primary_score":	999886,
			"second_score":	121070
		}, {
			"file":	"Zend/zend_API.c",
			"line":	816,
			"primary_score":	999886,
			"second_score":	121068
		}, {
			"file":	"Zend/zend_API.c",
			"line":	819,
			"primary_score":	999886,
			"second_score":	121067
		}, {
			"file":	"Zend/zend_API.c",
			"line":	820,
			"primary_score":	999886,
			"second_score":	121039
		}, {
			"file":	"Zend/zend_API.c",
			"line":	821,
			"primary_score":	999886,
			"second_score":	121038
		}, {
			"file":	"Zend/zend_API.c",
			"line":	825,
			"primary_score":	999886,
			"second_score":	121037
		}, {
			"file":	"Zend/zend_API.c",
			"line":	826,
			"primary_score":	999886,
			"second_score":	121036
		}, {
			"file":	"Zend/zend_API.c",
			"line":	827,
			"primary_score":	999886,
			"second_score":	121035
		}, {
			"file":	"Zend/zend_API.c",
			"line":	834,
			"primary_score":	999861,
			"second_score":	122851
		}, {
			"file":	"Zend/zend_API.c",
			"line":	836,
			"primary_score":	999861,
			"second_score":	122849
		}, {
			"file":	"Zend/zend_API.c",
			"line":	844,
			"primary_score":	999861,
			"second_score":	122829
		}, {
			"file":	"Zend/zend_API.c",
			"line":	847,
			"primary_score":	999861,
			"second_score":	122828
		}, {
			"file":	"Zend/zend_API.c",
			"line":	881,
			"primary_score":	999861,
			"second_score":	122916
		}, {
			"file":	"Zend/zend_API.c",
			"line":	882,
			"primary_score":	999861,
			"second_score":	122915
		}, {
			"file":	"Zend/zend_API.c",
			"line":	884,
			"primary_score":	999861,
			"second_score":	122914
		}, {
			"file":	"Zend/zend_API.c",
			"line":	886,
			"primary_score":	999861,
			"second_score":	122910
		}, {
			"file":	"Zend/zend_API.c",
			"line":	887,
			"primary_score":	999861,
			"second_score":	122909
		}, {
			"file":	"Zend/zend_API.c",
			"line":	888,
			"primary_score":	999861,
			"second_score":	122827
		}, {
			"file":	"Zend/zend_API.c",
			"line":	890,
			"primary_score":	999861,
			"second_score":	122826
		}, {
			"file":	"Zend/zend_API.c",
			"line":	973,
			"primary_score":	999861,
			"second_score":	157118
		}, {
			"file":	"Zend/zend_API.c",
			"line":	975,
			"primary_score":	999861,
			"second_score":	157014
		}, {
			"file":	"Zend/zend_API.c",
			"line":	976,
			"primary_score":	999861,
			"second_score":	156996
		}, {
			"file":	"Zend/zend_API.c",
			"line":	977,
			"primary_score":	999861,
			"second_score":	156995
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1018,
			"primary_score":	999965,
			"second_score":	126426
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1019,
			"primary_score":	999965,
			"second_score":	129379
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1020,
			"primary_score":	999965,
			"second_score":	129378
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1021,
			"primary_score":	999965,
			"second_score":	129377
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1023,
			"primary_score":	999965,
			"second_score":	129376
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1024,
			"primary_score":	999965,
			"second_score":	129375
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1026,
			"primary_score":	999965,
			"second_score":	129366
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1032,
			"primary_score":	999965,
			"second_score":	129365
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1068,
			"primary_score":	999965,
			"second_score":	129364
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1072,
			"primary_score":	999965,
			"second_score":	129363
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1073,
			"primary_score":	999965,
			"second_score":	129362
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1080,
			"primary_score":	999965,
			"second_score":	126374
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1082,
			"primary_score":	999965,
			"second_score":	126373
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1101,
			"primary_score":	999965,
			"second_score":	126429
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1103,
			"primary_score":	999965,
			"second_score":	126428
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1108,
			"primary_score":	999965,
			"second_score":	126427
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1110,
			"primary_score":	999965,
			"second_score":	126425
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1111,
			"primary_score":	999965,
			"second_score":	126424
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1112,
			"primary_score":	999977,
			"second_score":	126423
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1113,
			"primary_score":	999977,
			"second_score":	126376
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1117,
			"primary_score":	999977,
			"second_score":	126375
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1122,
			"primary_score":	999965,
			"second_score":	126372
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1128,
			"primary_score":	999965,
			"second_score":	126430
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1368,
			"primary_score":	999861,
			"second_score":	123577
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1370,
			"primary_score":	999861,
			"second_score":	123576
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1371,
			"primary_score":	999861,
			"second_score":	123466
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1373,
			"primary_score":	999861,
			"second_score":	123351
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1779,
			"primary_score":	999861,
			"second_score":	103509
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1780,
			"primary_score":	999861,
			"second_score":	103508
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1781,
			"primary_score":	999861,
			"second_score":	103507
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2171,
			"primary_score":	999861,
			"second_score":	50133
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2172,
			"primary_score":	999861,
			"second_score":	50132
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2173,
			"primary_score":	999861,
			"second_score":	50131
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2175,
			"primary_score":	999861,
			"second_score":	50130
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2176,
			"primary_score":	999861,
			"second_score":	50129
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2178,
			"primary_score":	999861,
			"second_score":	50128
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2179,
			"primary_score":	999861,
			"second_score":	47249
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2185,
			"primary_score":	999861,
			"second_score":	47248
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2186,
			"primary_score":	999861,
			"second_score":	47200
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2187,
			"primary_score":	999861,
			"second_score":	47199
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2213,
			"primary_score":	999861,
			"second_score":	50140
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2215,
			"primary_score":	999861,
			"second_score":	50139
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2220,
			"primary_score":	999861,
			"second_score":	50138
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2224,
			"primary_score":	999861,
			"second_score":	53380
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2228,
			"primary_score":	999861,
			"second_score":	50137
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2232,
			"primary_score":	999861,
			"second_score":	52697
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2233,
			"primary_score":	999861,
			"second_score":	53765
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2238,
			"primary_score":	999861,
			"second_score":	50136
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2239,
			"primary_score":	999861,
			"second_score":	50135
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2240,
			"primary_score":	999861,
			"second_score":	50134
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2245,
			"primary_score":	999861,
			"second_score":	47198
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2284,
			"primary_score":	999861,
			"second_score":	119327
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2286,
			"primary_score":	999861,
			"second_score":	119326
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2287,
			"primary_score":	999861,
			"second_score":	119320
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2290,
			"primary_score":	999861,
			"second_score":	119319
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2292,
			"primary_score":	999861,
			"second_score":	119318
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2293,
			"primary_score":	999861,
			"second_score":	118736
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2295,
			"primary_score":	999861,
			"second_score":	118735
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2296,
			"primary_score":	999861,
			"second_score":	118729
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2299,
			"primary_score":	999861,
			"second_score":	118728
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2305,
			"primary_score":	999861,
			"second_score":	114672
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2307,
			"primary_score":	999861,
			"second_score":	114671
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2331,
			"primary_score":	999861,
			"second_score":	113442
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2335,
			"primary_score":	999861,
			"second_score":	113441
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2337,
			"primary_score":	999861,
			"second_score":	113440
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	144,
			"primary_score":	999861,
			"second_score":	3194
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	297,
			"primary_score":	999861,
			"second_score":	3197
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	673,
			"primary_score":	999861,
			"second_score":	112964
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	675,
			"primary_score":	999861,
			"second_score":	112963
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	676,
			"primary_score":	999861,
			"second_score":	112962
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	699,
			"primary_score":	999861,
			"second_score":	113022
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	701,
			"primary_score":	999861,
			"second_score":	113021
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	702,
			"primary_score":	999861,
			"second_score":	113020
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	725,
			"primary_score":	999861,
			"second_score":	112971
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	726,
			"primary_score":	999861,
			"second_score":	112970
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	728,
			"primary_score":	999861,
			"second_score":	112969
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	730,
			"primary_score":	999861,
			"second_score":	112968
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	731,
			"primary_score":	999861,
			"second_score":	112967
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	732,
			"primary_score":	999861,
			"second_score":	112966
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	734,
			"primary_score":	999861,
			"second_score":	112965
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	735,
			"primary_score":	999861,
			"second_score":	112961
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	736,
			"primary_score":	999861,
			"second_score":	112960
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	737,
			"primary_score":	999861,
			"second_score":	112959
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	738,
			"primary_score":	999861,
			"second_score":	112958
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	739,
			"primary_score":	999861,
			"second_score":	112957
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	740,
			"primary_score":	999861,
			"second_score":	112956
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	741,
			"primary_score":	999861,
			"second_score":	112955
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	743,
			"primary_score":	999861,
			"second_score":	128932
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	745,
			"primary_score":	999861,
			"second_score":	128931
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	746,
			"primary_score":	999861,
			"second_score":	128930
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	748,
			"primary_score":	999861,
			"second_score":	128929
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	749,
			"primary_score":	999861,
			"second_score":	128928
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	750,
			"primary_score":	999861,
			"second_score":	128927
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	751,
			"primary_score":	999861,
			"second_score":	128926
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	752,
			"primary_score":	999861,
			"second_score":	128925
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	753,
			"primary_score":	999861,
			"second_score":	128924
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	754,
			"primary_score":	999861,
			"second_score":	128923
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	768,
			"primary_score":	999861,
			"second_score":	127314
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	770,
			"primary_score":	999861,
			"second_score":	127313
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	772,
			"primary_score":	999861,
			"second_score":	127312
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	773,
			"primary_score":	999861,
			"second_score":	127311
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	774,
			"primary_score":	999861,
			"second_score":	127310
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	776,
			"primary_score":	999861,
			"second_score":	127309
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	778,
			"primary_score":	999861,
			"second_score":	127308
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	779,
			"primary_score":	999861,
			"second_score":	127307
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	780,
			"primary_score":	999861,
			"second_score":	127306
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	786,
			"primary_score":	999861,
			"second_score":	113008
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	787,
			"primary_score":	999861,
			"second_score":	113007
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	789,
			"primary_score":	999861,
			"second_score":	113006
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	791,
			"primary_score":	999861,
			"second_score":	113005
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	792,
			"primary_score":	999861,
			"second_score":	113004
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	795,
			"primary_score":	999861,
			"second_score":	113003
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	800,
			"primary_score":	999861,
			"second_score":	113002
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	801,
			"primary_score":	999861,
			"second_score":	113001
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	802,
			"primary_score":	999861,
			"second_score":	113000
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	803,
			"primary_score":	999861,
			"second_score":	112999
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	805,
			"primary_score":	999861,
			"second_score":	112995
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	806,
			"primary_score":	999861,
			"second_score":	112993
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	807,
			"primary_score":	999861,
			"second_score":	112992
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	808,
			"primary_score":	999861,
			"second_score":	112991
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	811,
			"primary_score":	999990,
			"second_score":	128790
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	815,
			"primary_score":	999990,
			"second_score":	128789
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	817,
			"primary_score":	999990,
			"second_score":	128788
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	818,
			"primary_score":	999990,
			"second_score":	128787
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	819,
			"primary_score":	999990,
			"second_score":	128786
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	820,
			"primary_score":	999990,
			"second_score":	128785
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	821,
			"primary_score":	999990,
			"second_score":	128784
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	825,
			"primary_score":	999990,
			"second_score":	128783
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	833,
			"primary_score":	999861,
			"second_score":	127103
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	838,
			"primary_score":	999861,
			"second_score":	127102
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	839,
			"primary_score":	999861,
			"second_score":	127101
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	841,
			"primary_score":	999861,
			"second_score":	127100
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	842,
			"primary_score":	999861,
			"second_score":	127099
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	843,
			"primary_score":	999861,
			"second_score":	127098
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	845,
			"primary_score":	999861,
			"second_score":	127097
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	846,
			"primary_score":	999861,
			"second_score":	127096
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	890,
			"primary_score":	999861,
			"second_score":	113346
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	891,
			"primary_score":	999861,
			"second_score":	113345
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	893,
			"primary_score":	999861,
			"second_score":	113344
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	894,
			"primary_score":	999861,
			"second_score":	113343
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	896,
			"primary_score":	999861,
			"second_score":	113342
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	897,
			"primary_score":	999861,
			"second_score":	113341
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	904,
			"primary_score":	999861,
			"second_score":	113340
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	905,
			"primary_score":	999861,
			"second_score":	113339
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	906,
			"primary_score":	999861,
			"second_score":	113086
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	907,
			"primary_score":	999861,
			"second_score":	113085
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	908,
			"primary_score":	999861,
			"second_score":	113084
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	909,
			"primary_score":	999861,
			"second_score":	113083
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	911,
			"primary_score":	999861,
			"second_score":	113082
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	912,
			"primary_score":	999861,
			"second_score":	113081
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1599,
			"primary_score":	999861,
			"second_score":	3212
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1600,
			"primary_score":	999861,
			"second_score":	3211
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1601,
			"primary_score":	999861,
			"second_score":	3210
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1602,
			"primary_score":	999861,
			"second_score":	3209
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1604,
			"primary_score":	999861,
			"second_score":	3208
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1608,
			"primary_score":	999861,
			"second_score":	3207
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1614,
			"primary_score":	999861,
			"second_score":	3206
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1669,
			"primary_score":	999861,
			"second_score":	3205
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1670,
			"primary_score":	999861,
			"second_score":	3204
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1671,
			"primary_score":	999861,
			"second_score":	3203
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1672,
			"primary_score":	999861,
			"second_score":	3202
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1673,
			"primary_score":	999861,
			"second_score":	3201
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1674,
			"primary_score":	999861,
			"second_score":	3200
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1675,
			"primary_score":	999861,
			"second_score":	3199
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1676,
			"primary_score":	999861,
			"second_score":	3198
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1678,
			"primary_score":	999861,
			"second_score":	3196
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1679,
			"primary_score":	999861,
			"second_score":	3195
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1680,
			"primary_score":	999861,
			"second_score":	3193
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1681,
			"primary_score":	999861,
			"second_score":	3192
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1684,
			"primary_score":	999861,
			"second_score":	113352
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1686,
			"primary_score":	999861,
			"second_score":	113351
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1687,
			"primary_score":	999861,
			"second_score":	113350
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1692,
			"primary_score":	999861,
			"second_score":	113349
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1705,
			"primary_score":	999861,
			"second_score":	113348
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1709,
			"primary_score":	999861,
			"second_score":	113347
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1710,
			"primary_score":	999861,
			"second_score":	113080
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1711,
			"primary_score":	999861,
			"second_score":	113079
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1712,
			"primary_score":	999861,
			"second_score":	113078
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1717,
			"primary_score":	999861,
			"second_score":	113077
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1718,
			"primary_score":	999861,
			"second_score":	113076
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1719,
			"primary_score":	999861,
			"second_score":	113075
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1721,
			"primary_score":	999861,
			"second_score":	113074
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1722,
			"primary_score":	999861,
			"second_score":	113073
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1724,
			"primary_score":	999861,
			"second_score":	113072
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1725,
			"primary_score":	999861,
			"second_score":	113071
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1726,
			"primary_score":	999861,
			"second_score":	113067
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1727,
			"primary_score":	999861,
			"second_score":	113061
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1729,
			"primary_score":	999861,
			"second_score":	113043
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1730,
			"primary_score":	999861,
			"second_score":	113042
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1732,
			"primary_score":	999861,
			"second_score":	112947
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1802,
			"primary_score":	999861,
			"second_score":	113032
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1803,
			"primary_score":	999861,
			"second_score":	113031
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1804,
			"primary_score":	999861,
			"second_score":	113027
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1805,
			"primary_score":	999861,
			"second_score":	113026
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1807,
			"primary_score":	999861,
			"second_score":	113025
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1811,
			"primary_score":	999861,
			"second_score":	113024
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1864,
			"primary_score":	999861,
			"second_score":	113023
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1865,
			"primary_score":	999861,
			"second_score":	113019
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1870,
			"primary_score":	999861,
			"second_score":	113018
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1875,
			"primary_score":	999861,
			"second_score":	113041
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1876,
			"primary_score":	999861,
			"second_score":	113040
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1877,
			"primary_score":	999861,
			"second_score":	113039
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1878,
			"primary_score":	999861,
			"second_score":	113038
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1879,
			"primary_score":	999861,
			"second_score":	113037
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1880,
			"primary_score":	999861,
			"second_score":	113036
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1881,
			"primary_score":	999861,
			"second_score":	113035
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1883,
			"primary_score":	999861,
			"second_score":	113034
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1884,
			"primary_score":	999861,
			"second_score":	120942
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1885,
			"primary_score":	999861,
			"second_score":	120941
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1887,
			"primary_score":	999861,
			"second_score":	120940
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1891,
			"primary_score":	999861,
			"second_score":	120939
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1897,
			"primary_score":	999861,
			"second_score":	120938
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1898,
			"primary_score":	999861,
			"second_score":	120937
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1899,
			"primary_score":	999861,
			"second_score":	120936
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1900,
			"primary_score":	999861,
			"second_score":	120935
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1901,
			"primary_score":	999861,
			"second_score":	120934
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1902,
			"primary_score":	999861,
			"second_score":	120933
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1909,
			"primary_score":	999861,
			"second_score":	122765
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1910,
			"primary_score":	999861,
			"second_score":	122764
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1912,
			"primary_score":	999861,
			"second_score":	127119
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1913,
			"primary_score":	999861,
			"second_score":	127115
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1917,
			"primary_score":	999861,
			"second_score":	127114
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1925,
			"primary_score":	999861,
			"second_score":	113033
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1927,
			"primary_score":	999861,
			"second_score":	113017
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1944,
			"primary_score":	999861,
			"second_score":	113016
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2005,
			"primary_score":	999861,
			"second_score":	113015
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2007,
			"primary_score":	999861,
			"second_score":	113014
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2008,
			"primary_score":	999861,
			"second_score":	113013
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2009,
			"primary_score":	999861,
			"second_score":	113012
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2010,
			"primary_score":	999861,
			"second_score":	113011
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2011,
			"primary_score":	999861,
			"second_score":	113009
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2013,
			"primary_score":	999861,
			"second_score":	112990
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2016,
			"primary_score":	999861,
			"second_score":	112989
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2018,
			"primary_score":	999861,
			"second_score":	112988
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2019,
			"primary_score":	999861,
			"second_score":	130511
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2020,
			"primary_score":	999861,
			"second_score":	130510
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2022,
			"primary_score":	999861,
			"second_score":	112987
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2025,
			"primary_score":	999861,
			"second_score":	112986
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2026,
			"primary_score":	999861,
			"second_score":	112980
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2027,
			"primary_score":	999861,
			"second_score":	112979
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2030,
			"primary_score":	999861,
			"second_score":	112973
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2031,
			"primary_score":	999861,
			"second_score":	112972
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2037,
			"primary_score":	999861,
			"second_score":	112954
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2039,
			"primary_score":	999861,
			"second_score":	112953
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2040,
			"primary_score":	999861,
			"second_score":	112952
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2041,
			"primary_score":	999861,
			"second_score":	112951
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2044,
			"primary_score":	999861,
			"second_score":	112950
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2046,
			"primary_score":	999861,
			"second_score":	112948
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2052,
			"primary_score":	999861,
			"second_score":	113406
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2053,
			"primary_score":	999861,
			"second_score":	113405
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2054,
			"primary_score":	999861,
			"second_score":	113404
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2056,
			"primary_score":	999861,
			"second_score":	113403
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2060,
			"primary_score":	999861,
			"second_score":	113402
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2061,
			"primary_score":	999861,
			"second_score":	113401
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2062,
			"primary_score":	999861,
			"second_score":	113400
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2069,
			"primary_score":	999861,
			"second_score":	113399
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2070,
			"primary_score":	999861,
			"second_score":	113398
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2071,
			"primary_score":	999861,
			"second_score":	113397
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2073,
			"primary_score":	999861,
			"second_score":	113396
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2074,
			"primary_score":	999861,
			"second_score":	113395
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2075,
			"primary_score":	999861,
			"second_score":	113394
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2076,
			"primary_score":	999861,
			"second_score":	113393
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2082,
			"primary_score":	999861,
			"second_score":	113392
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2086,
			"primary_score":	999861,
			"second_score":	113713
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2088,
			"primary_score":	999861,
			"second_score":	113711
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2090,
			"primary_score":	999861,
			"second_score":	113710
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2091,
			"primary_score":	999861,
			"second_score":	113709
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2095,
			"primary_score":	999861,
			"second_score":	113708
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2096,
			"primary_score":	999861,
			"second_score":	113707
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2097,
			"primary_score":	999861,
			"second_score":	113706
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2098,
			"primary_score":	999861,
			"second_score":	113687
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2100,
			"primary_score":	999861,
			"second_score":	113686
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2104,
			"primary_score":	999861,
			"second_score":	113685
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2105,
			"primary_score":	999861,
			"second_score":	113679
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2107,
			"primary_score":	999861,
			"second_score":	113661
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2112,
			"primary_score":	999861,
			"second_score":	124690
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2113,
			"primary_score":	999861,
			"second_score":	124689
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2114,
			"primary_score":	999861,
			"second_score":	124688
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2115,
			"primary_score":	999861,
			"second_score":	124687
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2116,
			"primary_score":	999861,
			"second_score":	124686
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2118,
			"primary_score":	999861,
			"second_score":	124685
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2119,
			"primary_score":	999861,
			"second_score":	124684
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2121,
			"primary_score":	999861,
			"second_score":	132182
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2122,
			"primary_score":	999861,
			"second_score":	132181
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2123,
			"primary_score":	999861,
			"second_score":	132180
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2124,
			"primary_score":	999861,
			"second_score":	132179
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2126,
			"primary_score":	999861,
			"second_score":	132178
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2130,
			"primary_score":	999861,
			"second_score":	132177
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2131,
			"primary_score":	999861,
			"second_score":	133668
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2133,
			"primary_score":	999861,
			"second_score":	133667
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2134,
			"primary_score":	999861,
			"second_score":	133666
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2136,
			"primary_score":	999861,
			"second_score":	133665
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2137,
			"primary_score":	999861,
			"second_score":	133663
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2138,
			"primary_score":	999861,
			"second_score":	133662
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2139,
			"primary_score":	999861,
			"second_score":	132169
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2140,
			"primary_score":	999861,
			"second_score":	132168
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2144,
			"primary_score":	999861,
			"second_score":	133661
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2145,
			"primary_score":	999861,
			"second_score":	133655
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2147,
			"primary_score":	999861,
			"second_score":	133654
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2150,
			"primary_score":	999861,
			"second_score":	133648
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2151,
			"primary_score":	999861,
			"second_score":	133633
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2152,
			"primary_score":	999861,
			"second_score":	133632
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2154,
			"primary_score":	999861,
			"second_score":	133630
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2155,
			"primary_score":	999861,
			"second_score":	133629
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2159,
			"primary_score":	999861,
			"second_score":	143964
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2163,
			"primary_score":	999861,
			"second_score":	126786
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2164,
			"primary_score":	999861,
			"second_score":	126785
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2170,
			"primary_score":	999861,
			"second_score":	126784
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2171,
			"primary_score":	999861,
			"second_score":	126783
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2172,
			"primary_score":	999861,
			"second_score":	126782
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2173,
			"primary_score":	999861,
			"second_score":	126781
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2175,
			"primary_score":	999861,
			"second_score":	126780
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2180,
			"primary_score":	999861,
			"second_score":	126779
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2183,
			"primary_score":	999861,
			"second_score":	126778
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2185,
			"primary_score":	999861,
			"second_score":	126777
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2186,
			"primary_score":	999861,
			"second_score":	126776
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2188,
			"primary_score":	999861,
			"second_score":	126775
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2189,
			"primary_score":	999861,
			"second_score":	126774
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2190,
			"primary_score":	999861,
			"second_score":	126773
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2197,
			"primary_score":	999861,
			"second_score":	126772
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2202,
			"primary_score":	999861,
			"second_score":	143963
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2204,
			"primary_score":	999861,
			"second_score":	143962
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2205,
			"primary_score":	999861,
			"second_score":	122239
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2206,
			"primary_score":	999861,
			"second_score":	122238
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2207,
			"primary_score":	999861,
			"second_score":	122236
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2208,
			"primary_score":	999861,
			"second_score":	122235
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2209,
			"primary_score":	999861,
			"second_score":	122234
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2211,
			"primary_score":	999861,
			"second_score":	122233
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2212,
			"primary_score":	999861,
			"second_score":	122231
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2214,
			"primary_score":	999861,
			"second_score":	122212
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2218,
			"primary_score":	999861,
			"second_score":	122211
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2221,
			"primary_score":	999861,
			"second_score":	122210
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2222,
			"primary_score":	999861,
			"second_score":	122204
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2223,
			"primary_score":	999861,
			"second_score":	122203
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2226,
			"primary_score":	999861,
			"second_score":	122197
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2230,
			"primary_score":	999861,
			"second_score":	122196
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2233,
			"primary_score":	999861,
			"second_score":	122178
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2234,
			"primary_score":	999861,
			"second_score":	122177
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2235,
			"primary_score":	999861,
			"second_score":	122176
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2236,
			"primary_score":	999861,
			"second_score":	122175
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2238,
			"primary_score":	999861,
			"second_score":	122174
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2239,
			"primary_score":	999861,
			"second_score":	122172
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2246,
			"primary_score":	999861,
			"second_score":	146332
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2344,
			"primary_score":	999861,
			"second_score":	146331
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2348,
			"primary_score":	999861,
			"second_score":	146230
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2350,
			"primary_score":	999861,
			"second_score":	146229
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2351,
			"primary_score":	999861,
			"second_score":	146213
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2408,
			"primary_score":	999861,
			"second_score":	121060
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2410,
			"primary_score":	999861,
			"second_score":	121059
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2413,
			"primary_score":	999861,
			"second_score":	121058
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2418,
			"primary_score":	999861,
			"second_score":	113409
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2420,
			"primary_score":	999861,
			"second_score":	113408
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2424,
			"primary_score":	999861,
			"second_score":	113407
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2429,
			"primary_score":	999861,
			"second_score":	124693
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2431,
			"primary_score":	999861,
			"second_score":	124692
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2434,
			"primary_score":	999861,
			"second_score":	124691
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2469,
			"primary_score":	999861,
			"second_score":	132776
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2470,
			"primary_score":	999861,
			"second_score":	132775
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2472,
			"primary_score":	999861,
			"second_score":	132774
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2478,
			"primary_score":	999861,
			"second_score":	132773
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2482,
			"primary_score":	999861,
			"second_score":	132772
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2517,
			"primary_score":	999861,
			"second_score":	132777
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2527,
			"primary_score":	999861,
			"second_score":	121560
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2538,
			"primary_score":	999861,
			"second_score":	132779
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2540,
			"primary_score":	999861,
			"second_score":	132778
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2541,
			"primary_score":	999861,
			"second_score":	132691
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2544,
			"primary_score":	999861,
			"second_score":	132690
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2545,
			"primary_score":	999861,
			"second_score":	132689
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2564,
			"primary_score":	999861,
			"second_score":	123461
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2566,
			"primary_score":	999861,
			"second_score":	123460
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2567,
			"primary_score":	999861,
			"second_score":	123356
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2570,
			"primary_score":	999861,
			"second_score":	123355
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2571,
			"primary_score":	999861,
			"second_score":	123354
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2572,
			"primary_score":	999861,
			"second_score":	123353
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2625,
			"primary_score":	999861,
			"second_score":	3213
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	346,
			"primary_score":	999861,
			"second_score":	124147
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1335,
			"primary_score":	999861,
			"second_score":	121147
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1336,
			"primary_score":	999861,
			"second_score":	121146
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1337,
			"primary_score":	999861,
			"second_score":	121145
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1338,
			"primary_score":	999861,
			"second_score":	121144
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1339,
			"primary_score":	999861,
			"second_score":	121143
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1341,
			"primary_score":	999861,
			"second_score":	121142
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1345,
			"primary_score":	999861,
			"second_score":	121075
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1348,
			"primary_score":	999861,
			"second_score":	120899
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1349,
			"primary_score":	999861,
			"second_score":	120898
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1354,
			"primary_score":	999861,
			"second_score":	120897
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1356,
			"primary_score":	999861,
			"second_score":	120857
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1362,
			"primary_score":	999861,
			"second_score":	120838
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1367,
			"primary_score":	999861,
			"second_score":	120837
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1891,
			"primary_score":	999861,
			"second_score":	123579
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1892,
			"primary_score":	999861,
			"second_score":	123578
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1893,
			"primary_score":	999861,
			"second_score":	123203
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1921,
			"primary_score":	999861,
			"second_score":	133001
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1923,
			"primary_score":	999861,
			"second_score":	133000
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1927,
			"primary_score":	999861,
			"second_score":	132962
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1929,
			"primary_score":	999861,
			"second_score":	132860
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1932,
			"primary_score":	999861,
			"second_score":	132859
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	2390,
			"primary_score":	999869,
			"second_score":	119537
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	2391,
			"primary_score":	999869,
			"second_score":	119536
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	2392,
			"primary_score":	999869,
			"second_score":	119535
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	2394,
			"primary_score":	999869,
			"second_score":	119534
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	2398,
			"primary_score":	999869,
			"second_score":	119467
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	2399,
			"primary_score":	999869,
			"second_score":	119410
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	2400,
			"primary_score":	999869,
			"second_score":	119390
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	2404,
			"primary_score":	999869,
			"second_score":	119386
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	131,
			"primary_score":	999861,
			"second_score":	18912
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	171,
			"primary_score":	999861,
			"second_score":	164219
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	172,
			"primary_score":	999861,
			"second_score":	164218
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	173,
			"primary_score":	999861,
			"second_score":	164217
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	174,
			"primary_score":	999861,
			"second_score":	164216
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	175,
			"primary_score":	999861,
			"second_score":	164215
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	176,
			"primary_score":	999861,
			"second_score":	164214
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	208,
			"primary_score":	999861,
			"second_score":	133395
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	210,
			"primary_score":	999861,
			"second_score":	133394
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	229,
			"primary_score":	999861,
			"second_score":	113642
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	230,
			"primary_score":	999861,
			"second_score":	113617
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	231,
			"primary_score":	999861,
			"second_score":	113592
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	232,
			"primary_score":	999861,
			"second_score":	113588
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	233,
			"primary_score":	999861,
			"second_score":	113584
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	234,
			"primary_score":	999861,
			"second_score":	113580
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	235,
			"primary_score":	999861,
			"second_score":	113576
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	236,
			"primary_score":	999861,
			"second_score":	113572
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	237,
			"primary_score":	999861,
			"second_score":	113502
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	238,
			"primary_score":	999861,
			"second_score":	113498
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	245,
			"primary_score":	999861,
			"second_score":	165076
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	246,
			"primary_score":	999861,
			"second_score":	165075
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	248,
			"primary_score":	999861,
			"second_score":	165074
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	252,
			"primary_score":	999861,
			"second_score":	164957
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	253,
			"primary_score":	999861,
			"second_score":	164847
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	254,
			"primary_score":	999861,
			"second_score":	164473
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	255,
			"primary_score":	999861,
			"second_score":	164472
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	262,
			"primary_score":	999861,
			"second_score":	133549
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	269,
			"primary_score":	999861,
			"second_score":	164245
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	283,
			"primary_score":	999861,
			"second_score":	129622
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	290,
			"primary_score":	999861,
			"second_score":	134555
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	296,
			"primary_score":	999896,
			"second_score":	135548
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	297,
			"primary_score":	999896,
			"second_score":	135547
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	299,
			"primary_score":	999896,
			"second_score":	135540
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	300,
			"primary_score":	999897,
			"second_score":	135533
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	304,
			"primary_score":	999897,
			"second_score":	135532
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	305,
			"primary_score":	999897,
			"second_score":	135511
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	307,
			"primary_score":	999923,
			"second_score":	135534
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	309,
			"primary_score":	999896,
			"second_score":	139000
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	310,
			"primary_score":	999896,
			"second_score":	138999
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	311,
			"primary_score":	999896,
			"second_score":	138998
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	312,
			"primary_score":	999896,
			"second_score":	163471
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	313,
			"primary_score":	999896,
			"second_score":	163470
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	315,
			"primary_score":	999896,
			"second_score":	138997
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	316,
			"primary_score":	999896,
			"second_score":	138936
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	317,
			"primary_score":	999896,
			"second_score":	138935
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	318,
			"primary_score":	999896,
			"second_score":	138934
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	335,
			"primary_score":	999861,
			"second_score":	133775
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	336,
			"primary_score":	999861,
			"second_score":	133774
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	337,
			"primary_score":	999861,
			"second_score":	133773
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	338,
			"primary_score":	999861,
			"second_score":	143981
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	339,
			"primary_score":	999861,
			"second_score":	143980
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	341,
			"primary_score":	999861,
			"second_score":	133772
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	342,
			"primary_score":	999861,
			"second_score":	134612
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	343,
			"primary_score":	999861,
			"second_score":	134611
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	345,
			"primary_score":	999861,
			"second_score":	134610
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	348,
			"primary_score":	999861,
			"second_score":	133771
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	349,
			"primary_score":	999861,
			"second_score":	133770
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	350,
			"primary_score":	999861,
			"second_score":	133768
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	351,
			"primary_score":	999861,
			"second_score":	133766
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	352,
			"primary_score":	999861,
			"second_score":	133765
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	353,
			"primary_score":	999861,
			"second_score":	133764
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	417,
			"primary_score":	999974,
			"second_score":	147440
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	418,
			"primary_score":	999974,
			"second_score":	147439
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	419,
			"primary_score":	999974,
			"second_score":	147438
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	420,
			"primary_score":	999974,
			"second_score":	147437
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	421,
			"primary_score":	999974,
			"second_score":	147436
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	423,
			"primary_score":	999974,
			"second_score":	147435
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	429,
			"primary_score":	999974,
			"second_score":	147434
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	432,
			"primary_score":	999974,
			"second_score":	147372
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	436,
			"primary_score":	999974,
			"second_score":	147371
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	437,
			"primary_score":	999974,
			"second_score":	147370
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	439,
			"primary_score":	999974,
			"second_score":	147285
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	440,
			"primary_score":	999974,
			"second_score":	147278
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	441,
			"primary_score":	999974,
			"second_score":	147216
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	443,
			"primary_score":	999974,
			"second_score":	147213
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	445,
			"primary_score":	999974,
			"second_score":	147211
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	546,
			"primary_score":	999861,
			"second_score":	134772
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	548,
			"primary_score":	999861,
			"second_score":	134771
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	567,
			"primary_score":	999869,
			"second_score":	121784
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	569,
			"primary_score":	999869,
			"second_score":	121774
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	570,
			"primary_score":	999869,
			"second_score":	121773
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	571,
			"primary_score":	999869,
			"second_score":	121772
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	572,
			"primary_score":	999869,
			"second_score":	121770
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	573,
			"primary_score":	999869,
			"second_score":	121766
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	574,
			"primary_score":	999869,
			"second_score":	121761
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	583,
			"primary_score":	999995,
			"second_score":	143059
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	584,
			"primary_score":	999995,
			"second_score":	143058
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	585,
			"primary_score":	999995,
			"second_score":	143042
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	632,
			"primary_score":	999896,
			"second_score":	135576
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	633,
			"primary_score":	999896,
			"second_score":	135575
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	634,
			"primary_score":	999896,
			"second_score":	135574
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	636,
			"primary_score":	999896,
			"second_score":	135573
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	637,
			"primary_score":	999896,
			"second_score":	135572
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	640,
			"primary_score":	999896,
			"second_score":	135571
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	645,
			"primary_score":	999896,
			"second_score":	135550
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	646,
			"primary_score":	999896,
			"second_score":	135549
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	647,
			"primary_score":	999896,
			"second_score":	135510
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	648,
			"primary_score":	999896,
			"second_score":	135509
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	649,
			"primary_score":	999896,
			"second_score":	135508
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	685,
			"primary_score":	999896,
			"second_score":	135577
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	828,
			"primary_score":	999914,
			"second_score":	121247
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	830,
			"primary_score":	999914,
			"second_score":	121237
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	831,
			"primary_score":	999914,
			"second_score":	121236
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	832,
			"primary_score":	999914,
			"second_score":	121234
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	833,
			"primary_score":	999914,
			"second_score":	121233
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	834,
			"primary_score":	999914,
			"second_score":	121148
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	835,
			"primary_score":	999914,
			"second_score":	121147
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	841,
			"primary_score":	999861,
			"second_score":	134274
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	843,
			"primary_score":	999861,
			"second_score":	134264
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	844,
			"primary_score":	999861,
			"second_score":	134263
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	845,
			"primary_score":	999861,
			"second_score":	134259
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	884,
			"primary_score":	999975,
			"second_score":	143150
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	890,
			"primary_score":	999975,
			"second_score":	143149
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	897,
			"primary_score":	999896,
			"second_score":	136521
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	898,
			"primary_score":	999896,
			"second_score":	136520
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	900,
			"primary_score":	999896,
			"second_score":	136519
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	901,
			"primary_score":	999997,
			"second_score":	145004
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	903,
			"primary_score":	999997,
			"second_score":	145003
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	904,
			"primary_score":	999997,
			"second_score":	144999
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	905,
			"primary_score":	999997,
			"second_score":	144998
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	907,
			"primary_score":	999997,
			"second_score":	144997
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	927,
			"primary_score":	999896,
			"second_score":	136518
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	929,
			"primary_score":	999896,
			"second_score":	136480
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	930,
			"primary_score":	999896,
			"second_score":	136478
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	932,
			"primary_score":	999896,
			"second_score":	136468
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	933,
			"primary_score":	999896,
			"second_score":	136467
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	936,
			"primary_score":	999995,
			"second_score":	143069
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	937,
			"primary_score":	999995,
			"second_score":	143068
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	939,
			"primary_score":	999995,
			"second_score":	143067
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	940,
			"primary_score":	999995,
			"second_score":	143066
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	942,
			"primary_score":	999995,
			"second_score":	143065
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	944,
			"primary_score":	999995,
			"second_score":	143064
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	946,
			"primary_score":	999995,
			"second_score":	143063
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	947,
			"primary_score":	999997,
			"second_score":	143062
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	956,
			"primary_score":	999997,
			"second_score":	143061
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	957,
			"primary_score":	999997,
			"second_score":	143060
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	958,
			"primary_score":	999997,
			"second_score":	143041
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	959,
			"primary_score":	999997,
			"second_score":	143040
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	960,
			"primary_score":	999997,
			"second_score":	143035
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	989,
			"primary_score":	999896,
			"second_score":	136466
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	990,
			"primary_score":	999896,
			"second_score":	136465
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	991,
			"primary_score":	999896,
			"second_score":	136461
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	992,
			"primary_score":	999896,
			"second_score":	136457
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	993,
			"primary_score":	999896,
			"second_score":	136456
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	994,
			"primary_score":	999896,
			"second_score":	136454
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1199,
			"primary_score":	999868,
			"second_score":	121598
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1200,
			"primary_score":	999868,
			"second_score":	121596
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1202,
			"primary_score":	999868,
			"second_score":	121586
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1203,
			"primary_score":	999868,
			"second_score":	121585
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1204,
			"primary_score":	999868,
			"second_score":	121581
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1205,
			"primary_score":	999868,
			"second_score":	121580
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1206,
			"primary_score":	999868,
			"second_score":	121579
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1212,
			"primary_score":	999868,
			"second_score":	121011
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1213,
			"primary_score":	999868,
			"second_score":	121009
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1214,
			"primary_score":	999868,
			"second_score":	120999
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1216,
			"primary_score":	999868,
			"second_score":	120998
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1218,
			"primary_score":	999868,
			"second_score":	120997
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1219,
			"primary_score":	999868,
			"second_score":	120996
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1221,
			"primary_score":	999868,
			"second_score":	120995
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1222,
			"primary_score":	999868,
			"second_score":	120988
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1224,
			"primary_score":	999868,
			"second_score":	120962
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1225,
			"primary_score":	999868,
			"second_score":	120958
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1227,
			"primary_score":	999868,
			"second_score":	120928
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1228,
			"primary_score":	999868,
			"second_score":	120927
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1229,
			"primary_score":	999868,
			"second_score":	120926
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1235,
			"primary_score":	999868,
			"second_score":	120771
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1236,
			"primary_score":	999868,
			"second_score":	120769
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1237,
			"primary_score":	999868,
			"second_score":	120768
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1239,
			"primary_score":	999868,
			"second_score":	120767
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1240,
			"primary_score":	999868,
			"second_score":	120763
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1241,
			"primary_score":	999868,
			"second_score":	120762
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1243,
			"primary_score":	999868,
			"second_score":	120761
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1244,
			"primary_score":	999868,
			"second_score":	120735
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1245,
			"primary_score":	999868,
			"second_score":	120713
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1251,
			"primary_score":	999896,
			"second_score":	136525
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1253,
			"primary_score":	999896,
			"second_score":	136524
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1256,
			"primary_score":	999896,
			"second_score":	136523
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1264,
			"primary_score":	999861,
			"second_score":	134458
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1266,
			"primary_score":	999861,
			"second_score":	134457
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1267,
			"primary_score":	999861,
			"second_score":	134450
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1273,
			"primary_score":	999861,
			"second_score":	134364
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1274,
			"primary_score":	999861,
			"second_score":	134363
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1275,
			"primary_score":	999861,
			"second_score":	134362
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1276,
			"primary_score":	999861,
			"second_score":	134361
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1277,
			"primary_score":	999861,
			"second_score":	134360
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1279,
			"primary_score":	999861,
			"second_score":	134359
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1281,
			"primary_score":	999861,
			"second_score":	134355
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1285,
			"primary_score":	999861,
			"second_score":	134354
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1286,
			"primary_score":	999975,
			"second_score":	143152
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1287,
			"primary_score":	999975,
			"second_score":	143151
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1310,
			"primary_score":	999975,
			"second_score":	143148
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1311,
			"primary_score":	999975,
			"second_score":	143147
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1312,
			"primary_score":	999975,
			"second_score":	143146
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1320,
			"primary_score":	999975,
			"second_score":	143145
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1321,
			"primary_score":	999975,
			"second_score":	143135
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1322,
			"primary_score":	999975,
			"second_score":	143134
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1327,
			"primary_score":	999975,
			"second_score":	143133
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1356,
			"primary_score":	999975,
			"second_score":	143132
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1358,
			"primary_score":	999975,
			"second_score":	143131
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1362,
			"primary_score":	999861,
			"second_score":	134353
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1363,
			"primary_score":	999861,
			"second_score":	134349
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1421,
			"primary_score":	999861,
			"second_score":	132799
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1422,
			"primary_score":	999911,
			"second_score":	121074
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1424,
			"primary_score":	999911,
			"second_score":	121064
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1425,
			"primary_score":	999911,
			"second_score":	121063
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1426,
			"primary_score":	999911,
			"second_score":	121059
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1427,
			"primary_score":	999862,
			"second_score":	132798
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1428,
			"primary_score":	999862,
			"second_score":	132797
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1430,
			"primary_score":	999862,
			"second_score":	132796
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1431,
			"primary_score":	999995,
			"second_score":	142963
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1433,
			"primary_score":	999862,
			"second_score":	132795
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1435,
			"primary_score":	999862,
			"second_score":	132794
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1446,
			"primary_score":	999862,
			"second_score":	132793
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1917,
			"primary_score":	999861,
			"second_score":	135739
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1918,
			"primary_score":	999861,
			"second_score":	135738
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1919,
			"primary_score":	999861,
			"second_score":	135737
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1921,
			"primary_score":	999861,
			"second_score":	135736
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1923,
			"primary_score":	999861,
			"second_score":	135727
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1933,
			"primary_score":	999861,
			"second_score":	135726
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1934,
			"primary_score":	999861,
			"second_score":	135468
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1941,
			"primary_score":	999861,
			"second_score":	135430
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1942,
			"primary_score":	999861,
			"second_score":	135411
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1944,
			"primary_score":	999861,
			"second_score":	135410
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1945,
			"primary_score":	999861,
			"second_score":	135384
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1946,
			"primary_score":	999861,
			"second_score":	135380
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2047,
			"primary_score":	999861,
			"second_score":	135735
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2048,
			"primary_score":	999861,
			"second_score":	135734
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2049,
			"primary_score":	999861,
			"second_score":	135733
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2050,
			"primary_score":	999861,
			"second_score":	135732
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2052,
			"primary_score":	999861,
			"second_score":	135731
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2059,
			"primary_score":	999861,
			"second_score":	135730
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2063,
			"primary_score":	999861,
			"second_score":	135729
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2083,
			"primary_score":	999861,
			"second_score":	135728
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2098,
			"primary_score":	999974,
			"second_score":	147450
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2099,
			"primary_score":	999974,
			"second_score":	147449
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2100,
			"primary_score":	999974,
			"second_score":	147448
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2101,
			"primary_score":	999974,
			"second_score":	147447
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2102,
			"primary_score":	999974,
			"second_score":	147446
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2104,
			"primary_score":	999974,
			"second_score":	147445
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2105,
			"primary_score":	999974,
			"second_score":	147444
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2147,
			"primary_score":	999974,
			"second_score":	147443
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2172,
			"primary_score":	999974,
			"second_score":	147477
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2173,
			"primary_score":	999974,
			"second_score":	147476
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2175,
			"primary_score":	999974,
			"second_score":	147475
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2184,
			"primary_score":	999974,
			"second_score":	147474
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2185,
			"primary_score":	999974,
			"second_score":	147472
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2187,
			"primary_score":	999974,
			"second_score":	147462
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2188,
			"primary_score":	999974,
			"second_score":	147461
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2189,
			"primary_score":	999974,
			"second_score":	147460
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2190,
			"primary_score":	999974,
			"second_score":	147459
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2191,
			"primary_score":	999974,
			"second_score":	147458
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2192,
			"primary_score":	999974,
			"second_score":	147457
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2194,
			"primary_score":	999974,
			"second_score":	147456
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2195,
			"primary_score":	999974,
			"second_score":	147451
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2205,
			"primary_score":	999974,
			"second_score":	147442
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2206,
			"primary_score":	999974,
			"second_score":	147441
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2208,
			"primary_score":	999974,
			"second_score":	147210
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2213,
			"primary_score":	999974,
			"second_score":	147209
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2214,
			"primary_score":	999974,
			"second_score":	147207
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2215,
			"primary_score":	999974,
			"second_score":	147206
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2216,
			"primary_score":	999974,
			"second_score":	147201
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2315,
			"primary_score":	999861,
			"second_score":	133569
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2319,
			"primary_score":	999861,
			"second_score":	133568
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2414,
			"primary_score":	999861,
			"second_score":	134634
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2416,
			"primary_score":	999861,
			"second_score":	134633
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2423,
			"primary_score":	999861,
			"second_score":	134632
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2424,
			"primary_score":	999861,
			"second_score":	134622
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2425,
			"primary_score":	999861,
			"second_score":	134621
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2426,
			"primary_score":	999861,
			"second_score":	134620
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2427,
			"primary_score":	999861,
			"second_score":	134561
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2428,
			"primary_score":	999861,
			"second_score":	134558
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2430,
			"primary_score":	999974,
			"second_score":	147057
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2431,
			"primary_score":	999974,
			"second_score":	147056
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2435,
			"primary_score":	999861,
			"second_score":	134556
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2436,
			"primary_score":	999861,
			"second_score":	134554
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2437,
			"primary_score":	999861,
			"second_score":	134553
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2438,
			"primary_score":	999861,
			"second_score":	134548
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2440,
			"primary_score":	999861,
			"second_score":	134547
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2441,
			"primary_score":	999861,
			"second_score":	134525
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2447,
			"primary_score":	999861,
			"second_score":	134787
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2448,
			"primary_score":	999861,
			"second_score":	134786
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2449,
			"primary_score":	999861,
			"second_score":	134785
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2450,
			"primary_score":	999861,
			"second_score":	134784
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2451,
			"primary_score":	999861,
			"second_score":	134783
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2453,
			"primary_score":	999861,
			"second_score":	134782
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2454,
			"primary_score":	999861,
			"second_score":	134778
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2456,
			"primary_score":	999861,
			"second_score":	134777
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2471,
			"primary_score":	999861,
			"second_score":	134776
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2472,
			"primary_score":	999861,
			"second_score":	134775
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2485,
			"primary_score":	999861,
			"second_score":	134774
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2491,
			"primary_score":	999861,
			"second_score":	134773
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2493,
			"primary_score":	999861,
			"second_score":	134770
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2494,
			"primary_score":	999861,
			"second_score":	134769
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2495,
			"primary_score":	999861,
			"second_score":	136443
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2499,
			"primary_score":	999861,
			"second_score":	134768
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2512,
			"primary_score":	999861,
			"second_score":	134767
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2513,
			"primary_score":	999861,
			"second_score":	134766
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2516,
			"primary_score":	999861,
			"second_score":	134728
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2519,
			"primary_score":	999903,
			"second_score":	135339
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2523,
			"primary_score":	999897,
			"second_score":	135301
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2530,
			"primary_score":	999861,
			"second_score":	134727
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2532,
			"primary_score":	999861,
			"second_score":	134717
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2533,
			"primary_score":	999861,
			"second_score":	134716
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2534,
			"primary_score":	999861,
			"second_score":	134715
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2539,
			"primary_score":	999861,
			"second_score":	136429
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2540,
			"primary_score":	999861,
			"second_score":	136428
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2545,
			"primary_score":	999861,
			"second_score":	134714
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2546,
			"primary_score":	999861,
			"second_score":	134713
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2547,
			"primary_score":	999861,
			"second_score":	134709
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2548,
			"primary_score":	999861,
			"second_score":	134708
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2601,
			"primary_score":	999861,
			"second_score":	133807
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2602,
			"primary_score":	999861,
			"second_score":	133806
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2604,
			"primary_score":	999861,
			"second_score":	133805
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2612,
			"primary_score":	999861,
			"second_score":	133804
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2618,
			"primary_score":	999861,
			"second_score":	133802
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2619,
			"primary_score":	999861,
			"second_score":	133798
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2622,
			"primary_score":	999861,
			"second_score":	133794
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2623,
			"primary_score":	999861,
			"second_score":	133792
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2628,
			"primary_score":	999861,
			"second_score":	133791
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2630,
			"primary_score":	999861,
			"second_score":	133781
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2632,
			"primary_score":	999861,
			"second_score":	133780
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2633,
			"primary_score":	999861,
			"second_score":	133779
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2635,
			"primary_score":	999861,
			"second_score":	133763
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2639,
			"primary_score":	999861,
			"second_score":	119587
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2640,
			"primary_score":	999861,
			"second_score":	119586
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2643,
			"primary_score":	999861,
			"second_score":	133762
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4935,
			"primary_score":	999984,
			"second_score":	144011
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4936,
			"primary_score":	999984,
			"second_score":	144010
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4938,
			"primary_score":	999984,
			"second_score":	144009
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4940,
			"primary_score":	999984,
			"second_score":	144005
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4941,
			"primary_score":	999986,
			"second_score":	144004
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4982,
			"primary_score":	999986,
			"second_score":	144003
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4992,
			"primary_score":	999986,
			"second_score":	144000
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4993,
			"primary_score":	999986,
			"second_score":	143996
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4994,
			"primary_score":	999986,
			"second_score":	143995
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4995,
			"primary_score":	999986,
			"second_score":	143994
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4996,
			"primary_score":	999986,
			"second_score":	143992
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4997,
			"primary_score":	999986,
			"second_score":	143988
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4998,
			"primary_score":	999986,
			"second_score":	143744
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4999,
			"primary_score":	999986,
			"second_score":	143743
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5000,
			"primary_score":	999986,
			"second_score":	143740
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5002,
			"primary_score":	999986,
			"second_score":	143737
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5004,
			"primary_score":	999986,
			"second_score":	143732
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5023,
			"primary_score":	999984,
			"second_score":	143580
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5029,
			"primary_score":	999984,
			"second_score":	143473
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5030,
			"primary_score":	999984,
			"second_score":	143472
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5032,
			"primary_score":	999984,
			"second_score":	143471
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5033,
			"primary_score":	999984,
			"second_score":	143467
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5035,
			"primary_score":	999984,
			"second_score":	143466
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5041,
			"primary_score":	999974,
			"second_score":	147173
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5042,
			"primary_score":	999974,
			"second_score":	147172
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5044,
			"primary_score":	999974,
			"second_score":	147171
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5045,
			"primary_score":	999974,
			"second_score":	147169
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5046,
			"primary_score":	999974,
			"second_score":	147159
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5047,
			"primary_score":	999974,
			"second_score":	147158
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5048,
			"primary_score":	999974,
			"second_score":	147157
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5049,
			"primary_score":	999974,
			"second_score":	147155
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5050,
			"primary_score":	999974,
			"second_score":	147151
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5052,
			"primary_score":	999974,
			"second_score":	147150
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5058,
			"primary_score":	999974,
			"second_score":	147072
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5060,
			"primary_score":	999974,
			"second_score":	147071
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5061,
			"primary_score":	999974,
			"second_score":	147023
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5063,
			"primary_score":	999974,
			"second_score":	147015
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5064,
			"primary_score":	999974,
			"second_score":	147013
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5070,
			"primary_score":	999861,
			"second_score":	137335
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5072,
			"primary_score":	999861,
			"second_score":	137334
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5085,
			"primary_score":	999861,
			"second_score":	137333
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5097,
			"primary_score":	999861,
			"second_score":	137306
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5100,
			"primary_score":	999861,
			"second_score":	137305
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5105,
			"primary_score":	999861,
			"second_score":	137304
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5113,
			"primary_score":	999861,
			"second_score":	137336
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5115,
			"primary_score":	999861,
			"second_score":	137303
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5116,
			"primary_score":	999861,
			"second_score":	137302
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5117,
			"primary_score":	999861,
			"second_score":	137276
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5118,
			"primary_score":	999861,
			"second_score":	137275
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5119,
			"primary_score":	999861,
			"second_score":	137274
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5120,
			"primary_score":	999861,
			"second_score":	137240
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5121,
			"primary_score":	999861,
			"second_score":	137237
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5129,
			"primary_score":	999861,
			"second_score":	137353
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5130,
			"primary_score":	999861,
			"second_score":	137352
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5131,
			"primary_score":	999861,
			"second_score":	137351
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5132,
			"primary_score":	999861,
			"second_score":	137350
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5133,
			"primary_score":	999861,
			"second_score":	137349
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5135,
			"primary_score":	999861,
			"second_score":	137348
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5182,
			"primary_score":	999861,
			"second_score":	137347
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5203,
			"primary_score":	999861,
			"second_score":	137346
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5205,
			"primary_score":	999861,
			"second_score":	137337
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5206,
			"primary_score":	999861,
			"second_score":	137236
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5270,
			"primary_score":	999952,
			"second_score":	137601
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5272,
			"primary_score":	999952,
			"second_score":	137591
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5273,
			"primary_score":	999952,
			"second_score":	137590
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5274,
			"primary_score":	999952,
			"second_score":	137588
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5275,
			"primary_score":	999952,
			"second_score":	137587
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5276,
			"primary_score":	999952,
			"second_score":	137582
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5277,
			"primary_score":	999955,
			"second_score":	137581
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5278,
			"primary_score":	999955,
			"second_score":	137577
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5279,
			"primary_score":	999963,
			"second_score":	137576
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5280,
			"primary_score":	999963,
			"second_score":	137518
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5281,
			"primary_score":	999965,
			"second_score":	137517
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5282,
			"primary_score":	999965,
			"second_score":	137516
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5284,
			"primary_score":	999965,
			"second_score":	137515
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5285,
			"primary_score":	999965,
			"second_score":	137511
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5289,
			"primary_score":	999965,
			"second_score":	137510
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5299,
			"primary_score":	999952,
			"second_score":	137507
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5305,
			"primary_score":	999957,
			"second_score":	136806
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5307,
			"primary_score":	999957,
			"second_score":	136796
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5308,
			"primary_score":	999957,
			"second_score":	136795
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5309,
			"primary_score":	999957,
			"second_score":	136791
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5310,
			"primary_score":	999957,
			"second_score":	136775
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5311,
			"primary_score":	999962,
			"second_score":	136774
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5312,
			"primary_score":	999962,
			"second_score":	136716
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5313,
			"primary_score":	999962,
			"second_score":	136715
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5314,
			"primary_score":	999962,
			"second_score":	136714
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5316,
			"primary_score":	999962,
			"second_score":	136713
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5317,
			"primary_score":	999962,
			"second_score":	136709
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5321,
			"primary_score":	999962,
			"second_score":	136708
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5327,
			"primary_score":	999957,
			"second_score":	136705
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6096,
			"primary_score":	999861,
			"second_score":	129925
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6097,
			"primary_score":	999861,
			"second_score":	129923
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6099,
			"primary_score":	999861,
			"second_score":	129922
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6101,
			"primary_score":	999861,
			"second_score":	129912
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6102,
			"primary_score":	999861,
			"second_score":	129911
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6103,
			"primary_score":	999861,
			"second_score":	129907
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6104,
			"primary_score":	999861,
			"second_score":	129906
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6105,
			"primary_score":	999861,
			"second_score":	129905
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6107,
			"primary_score":	999861,
			"second_score":	129900
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6113,
			"primary_score":	999861,
			"second_score":	127098
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6115,
			"primary_score":	999861,
			"second_score":	127088
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6117,
			"primary_score":	999861,
			"second_score":	127086
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6118,
			"primary_score":	999861,
			"second_score":	127085
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6119,
			"primary_score":	999861,
			"second_score":	127084
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6120,
			"primary_score":	999861,
			"second_score":	127082
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6121,
			"primary_score":	999861,
			"second_score":	127078
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6123,
			"primary_score":	999861,
			"second_score":	127077
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6124,
			"primary_score":	999861,
			"second_score":	127072
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6126,
			"primary_score":	999861,
			"second_score":	127070
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6127,
			"primary_score":	999861,
			"second_score":	127060
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6128,
			"primary_score":	999861,
			"second_score":	127059
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6129,
			"primary_score":	999861,
			"second_score":	127058
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6135,
			"primary_score":	999861,
			"second_score":	126668
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6137,
			"primary_score":	999861,
			"second_score":	126658
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6138,
			"primary_score":	999861,
			"second_score":	126657
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6139,
			"primary_score":	999861,
			"second_score":	126653
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6140,
			"primary_score":	999861,
			"second_score":	126555
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6142,
			"primary_score":	999861,
			"second_score":	126554
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6144,
			"primary_score":	999861,
			"second_score":	126552
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6146,
			"primary_score":	999861,
			"second_score":	126547
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6152,
			"primary_score":	999861,
			"second_score":	134034
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6154,
			"primary_score":	999861,
			"second_score":	134033
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6155,
			"primary_score":	999861,
			"second_score":	134032
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6168,
			"primary_score":	999861,
			"second_score":	135383
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6170,
			"primary_score":	999861,
			"second_score":	135382
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6171,
			"primary_score":	999861,
			"second_score":	135381
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6184,
			"primary_score":	999861,
			"second_score":	134523
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6186,
			"primary_score":	999861,
			"second_score":	134522
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6187,
			"primary_score":	999861,
			"second_score":	134521
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6200,
			"primary_score":	999861,
			"second_score":	133966
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6221,
			"primary_score":	999896,
			"second_score":	135551
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6259,
			"primary_score":	999861,
			"second_score":	133898
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6261,
			"primary_score":	999861,
			"second_score":	133897
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6262,
			"primary_score":	999861,
			"second_score":	132469
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6263,
			"primary_score":	999861,
			"second_score":	132468
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6266,
			"primary_score":	999861,
			"second_score":	133896
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6268,
			"primary_score":	999861,
			"second_score":	133895
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6269,
			"primary_score":	999861,
			"second_score":	133872
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6278,
			"primary_score":	999861,
			"second_score":	132628
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6280,
			"primary_score":	999861,
			"second_score":	134054
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6283,
			"primary_score":	999861,
			"second_score":	134053
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6284,
			"primary_score":	999861,
			"second_score":	134052
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6293,
			"primary_score":	999861,
			"second_score":	133871
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6294,
			"primary_score":	999861,
			"second_score":	133868
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6295,
			"primary_score":	999861,
			"second_score":	133867
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6373,
			"primary_score":	999974,
			"second_score":	147455
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6376,
			"primary_score":	999974,
			"second_score":	147454
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6379,
			"primary_score":	999974,
			"second_score":	147453
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6383,
			"primary_score":	999974,
			"second_score":	147452
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6610,
			"primary_score":	999861,
			"second_score":	133942
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6618,
			"primary_score":	999861,
			"second_score":	133850
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6619,
			"primary_score":	999861,
			"second_score":	133849
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6624,
			"primary_score":	999861,
			"second_score":	133848
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6634,
			"primary_score":	999861,
			"second_score":	133852
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6635,
			"primary_score":	999861,
			"second_score":	133851
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	32,
			"primary_score":	999861,
			"second_score":	6291
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	33,
			"primary_score":	999861,
			"second_score":	114058
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	35,
			"primary_score":	999861,
			"second_score":	6290
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	60,
			"primary_score":	999861,
			"second_score":	113840
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	171,
			"primary_score":	999861,
			"second_score":	114574
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	174,
			"primary_score":	999861,
			"second_score":	114573
		}, {
			"file":	"Zend/zend_exceptions.c",
			"line":	73,
			"primary_score":	999861,
			"second_score":	120612
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	71,
			"primary_score":	999861,
			"second_score":	121311
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	72,
			"primary_score":	999861,
			"second_score":	121309
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	73,
			"primary_score":	999861,
			"second_score":	121307
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	74,
			"primary_score":	999861,
			"second_score":	121305
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	177,
			"primary_score":	999861,
			"second_score":	122783
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	182,
			"primary_score":	999861,
			"second_score":	121313
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	184,
			"primary_score":	999861,
			"second_score":	121312
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	185,
			"primary_score":	999861,
			"second_score":	121304
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	273,
			"primary_score":	999896,
			"second_score":	122778
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	275,
			"primary_score":	999896,
			"second_score":	122777
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	279,
			"primary_score":	999897,
			"second_score":	122776
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	280,
			"primary_score":	999897,
			"second_score":	122767
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	281,
			"primary_score":	999897,
			"second_score":	122765
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	283,
			"primary_score":	999896,
			"second_score":	122641
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	288,
			"primary_score":	999998,
			"second_score":	126106
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	290,
			"primary_score":	999998,
			"second_score":	126105
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	293,
			"primary_score":	999998,
			"second_score":	126104
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	298,
			"primary_score":	999898,
			"second_score":	122579
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	300,
			"primary_score":	999898,
			"second_score":	122578
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	303,
			"primary_score":	999898,
			"second_score":	122577
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	349,
			"primary_score":	999995,
			"second_score":	125651
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	352,
			"primary_score":	999998,
			"second_score":	125650
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	367,
			"primary_score":	999998,
			"second_score":	126107
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	439,
			"primary_score":	999896,
			"second_score":	122781
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	441,
			"primary_score":	999896,
			"second_score":	122780
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	442,
			"primary_score":	999896,
			"second_score":	122779
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	444,
			"primary_score":	999940,
			"second_score":	125659
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	602,
			"primary_score":	999861,
			"second_score":	122929
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	603,
			"primary_score":	999861,
			"second_score":	122928
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	604,
			"primary_score":	999861,
			"second_score":	122927
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	606,
			"primary_score":	999861,
			"second_score":	122926
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	611,
			"primary_score":	999861,
			"second_score":	122925
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	613,
			"primary_score":	999861,
			"second_score":	122924
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	629,
			"primary_score":	999861,
			"second_score":	122923
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	638,
			"primary_score":	999861,
			"second_score":	122922
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	643,
			"primary_score":	999997,
			"second_score":	125654
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	644,
			"primary_score":	999997,
			"second_score":	125653
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	645,
			"primary_score":	999997,
			"second_score":	125652
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	647,
			"primary_score":	999997,
			"second_score":	125649
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	676,
			"primary_score":	999997,
			"second_score":	125648
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	683,
			"primary_score":	999997,
			"second_score":	125647
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	684,
			"primary_score":	999999,
			"second_score":	125646
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	686,
			"primary_score":	999999,
			"second_score":	125645
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	687,
			"primary_score":	999999,
			"second_score":	125540
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	688,
			"primary_score":	999999,
			"second_score":	125537
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	689,
			"primary_score":	999999,
			"second_score":	125535
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	690,
			"primary_score":	999999,
			"second_score":	125533
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	694,
			"primary_score":	999997,
			"second_score":	125530
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	695,
			"primary_score":	999997,
			"second_score":	125528
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	696,
			"primary_score":	999997,
			"second_score":	125527
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	710,
			"primary_score":	999997,
			"second_score":	125526
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	719,
			"primary_score":	999997,
			"second_score":	125327
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	723,
			"primary_score":	999997,
			"second_score":	125326
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	724,
			"primary_score":	1000000,
			"second_score":	128141
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	787,
			"primary_score":	999953,
			"second_score":	122636
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	788,
			"primary_score":	999953,
			"second_score":	122635
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	790,
			"primary_score":	999953,
			"second_score":	122634
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	796,
			"primary_score":	999953,
			"second_score":	122633
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	799,
			"primary_score":	999953,
			"second_score":	122630
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	800,
			"primary_score":	999953,
			"second_score":	122628
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	801,
			"primary_score":	999953,
			"second_score":	122626
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	802,
			"primary_score":	999953,
			"second_score":	122602
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	803,
			"primary_score":	999953,
			"second_score":	122594
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	804,
			"primary_score":	999953,
			"second_score":	122593
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	856,
			"primary_score":	999916,
			"second_score":	126189
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	857,
			"primary_score":	999916,
			"second_score":	126188
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	859,
			"primary_score":	999916,
			"second_score":	126187
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	865,
			"primary_score":	999916,
			"second_score":	126186
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	866,
			"primary_score":	999916,
			"second_score":	126184
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	884,
			"primary_score":	999916,
			"second_score":	126182
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	885,
			"primary_score":	999916,
			"second_score":	126180
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	886,
			"primary_score":	999916,
			"second_score":	126178
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	893,
			"primary_score":	999916,
			"second_score":	126176
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	894,
			"primary_score":	999916,
			"second_score":	126175
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	895,
			"primary_score":	999916,
			"second_score":	126173
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	896,
			"primary_score":	999916,
			"second_score":	126171
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	82,
			"primary_score":	999861,
			"second_score":	120671
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	83,
			"primary_score":	999861,
			"second_score":	120669
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	85,
			"primary_score":	999861,
			"second_score":	120668
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	86,
			"primary_score":	999861,
			"second_score":	121740
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	87,
			"primary_score":	999861,
			"second_score":	120665
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	88,
			"primary_score":	999861,
			"second_score":	120662
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	91,
			"primary_score":	999861,
			"second_score":	123145
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	93,
			"primary_score":	999861,
			"second_score":	123144
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	94,
			"primary_score":	999861,
			"second_score":	123142
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	97,
			"primary_score":	999861,
			"second_score":	123140
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	103,
			"primary_score":	999861,
			"second_score":	120760
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	105,
			"primary_score":	999861,
			"second_score":	120759
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	113,
			"primary_score":	999861,
			"second_score":	120758
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	155,
			"primary_score":	999861,
			"second_score":	120757
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	199,
			"primary_score":	999861,
			"second_score":	114669
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	201,
			"primary_score":	999861,
			"second_score":	114668
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	202,
			"primary_score":	999861,
			"second_score":	114667
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	203,
			"primary_score":	999861,
			"second_score":	114666
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	204,
			"primary_score":	999861,
			"second_score":	114621
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	217,
			"primary_score":	999861,
			"second_score":	122850
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	222,
			"primary_score":	999861,
			"second_score":	147921
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	223,
			"primary_score":	999861,
			"second_score":	147919
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	245,
			"primary_score":	999861,
			"second_score":	133322
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	247,
			"primary_score":	999861,
			"second_score":	133321
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	250,
			"primary_score":	999861,
			"second_score":	133320
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	265,
			"primary_score":	999861,
			"second_score":	133319
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	267,
			"primary_score":	999861,
			"second_score":	133317
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	268,
			"primary_score":	999861,
			"second_score":	133316
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	269,
			"primary_score":	999861,
			"second_score":	133315
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	274,
			"primary_score":	999861,
			"second_score":	120642
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	280,
			"primary_score":	999861,
			"second_score":	120641
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	286,
			"primary_score":	999861,
			"second_score":	120621
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	293,
			"primary_score":	999861,
			"second_score":	120620
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	297,
			"primary_score":	999861,
			"second_score":	120619
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	305,
			"primary_score":	999861,
			"second_score":	123066
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	327,
			"primary_score":	999861,
			"second_score":	123065
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	328,
			"primary_score":	999861,
			"second_score":	123064
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	333,
			"primary_score":	999861,
			"second_score":	121751
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	334,
			"primary_score":	999861,
			"second_score":	121750
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	336,
			"primary_score":	999861,
			"second_score":	121749
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	337,
			"primary_score":	999861,
			"second_score":	120674
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	338,
			"primary_score":	999861,
			"second_score":	120673
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	339,
			"primary_score":	999861,
			"second_score":	120672
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	341,
			"primary_score":	999861,
			"second_score":	120643
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	367,
			"primary_score":	999861,
			"second_score":	123076
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	369,
			"primary_score":	999861,
			"second_score":	123075
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	371,
			"primary_score":	999861,
			"second_score":	123070
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	372,
			"primary_score":	999861,
			"second_score":	123069
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	373,
			"primary_score":	999861,
			"second_score":	123068
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	107,
			"primary_score":	999861,
			"second_score":	114608
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	119,
			"primary_score":	999861,
			"second_score":	114592
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	203,
			"primary_score":	999861,
			"second_score":	119382
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	204,
			"primary_score":	999984,
			"second_score":	119796
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	206,
			"primary_score":	999861,
			"second_score":	119381
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	213,
			"primary_score":	999861,
			"second_score":	120123
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	214,
			"primary_score":	999861,
			"second_score":	120117
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	215,
			"primary_score":	999861,
			"second_score":	120116
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	216,
			"primary_score":	999861,
			"second_score":	119450
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	217,
			"primary_score":	999861,
			"second_score":	119447
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	219,
			"primary_score":	999861,
			"second_score":	119371
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	223,
			"primary_score":	999861,
			"second_score":	119366
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	229,
			"primary_score":	999861,
			"second_score":	118517
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	246,
			"primary_score":	999861,
			"second_score":	118511
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	247,
			"primary_score":	999861,
			"second_score":	118508
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	248,
			"primary_score":	999861,
			"second_score":	114754
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	250,
			"primary_score":	999861,
			"second_score":	114752
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	251,
			"primary_score":	999861,
			"second_score":	114746
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	254,
			"primary_score":	999861,
			"second_score":	114745
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	261,
			"primary_score":	999861,
			"second_score":	114744
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	268,
			"primary_score":	999861,
			"second_score":	114743
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	269,
			"primary_score":	999861,
			"second_score":	114739
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	270,
			"primary_score":	999861,
			"second_score":	114734
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	271,
			"primary_score":	999861,
			"second_score":	114725
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	272,
			"primary_score":	999861,
			"second_score":	114716
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	274,
			"primary_score":	999861,
			"second_score":	114714
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	284,
			"primary_score":	999861,
			"second_score":	114708
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	288,
			"primary_score":	999861,
			"second_score":	114707
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	289,
			"primary_score":	999861,
			"second_score":	114690
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	290,
			"primary_score":	999861,
			"second_score":	114673
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	293,
			"primary_score":	999861,
			"second_score":	114670
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	295,
			"primary_score":	999861,
			"second_score":	114620
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	298,
			"primary_score":	999861,
			"second_score":	114617
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	302,
			"primary_score":	999861,
			"second_score":	114616
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	303,
			"primary_score":	999861,
			"second_score":	114600
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	306,
			"primary_score":	999861,
			"second_score":	114584
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	311,
			"primary_score":	999861,
			"second_score":	114583
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	313,
			"primary_score":	999861,
			"second_score":	114581
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	314,
			"primary_score":	999861,
			"second_score":	114575
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	315,
			"primary_score":	999861,
			"second_score":	113832
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	317,
			"primary_score":	999861,
			"second_score":	113830
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	322,
			"primary_score":	999861,
			"second_score":	113824
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	324,
			"primary_score":	999861,
			"second_score":	113755
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	325,
			"primary_score":	999861,
			"second_score":	113734
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	326,
			"primary_score":	999861,
			"second_score":	113730
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	327,
			"primary_score":	999861,
			"second_score":	113728
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	328,
			"primary_score":	999861,
			"second_score":	113726
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	329,
			"primary_score":	999861,
			"second_score":	113658
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	333,
			"primary_score":	999861,
			"second_score":	113657
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	335,
			"primary_score":	999861,
			"second_score":	113655
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	337,
			"primary_score":	999861,
			"second_score":	113650
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	397,
			"primary_score":	999861,
			"second_score":	129618
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	398,
			"primary_score":	999861,
			"second_score":	129617
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	407,
			"primary_score":	999861,
			"second_score":	129615
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	411,
			"primary_score":	999861,
			"second_score":	129614
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	412,
			"primary_score":	999861,
			"second_score":	129613
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	430,
			"primary_score":	999861,
			"second_score":	114870
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	431,
			"primary_score":	999861,
			"second_score":	114868
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	432,
			"primary_score":	999861,
			"second_score":	114866
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	434,
			"primary_score":	999861,
			"second_score":	114865
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	435,
			"primary_score":	999861,
			"second_score":	114864
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	436,
			"primary_score":	999861,
			"second_score":	114851
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	437,
			"primary_score":	999861,
			"second_score":	114817
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	440,
			"primary_score":	999861,
			"second_score":	115624
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	442,
			"primary_score":	999861,
			"second_score":	115623
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	443,
			"primary_score":	999861,
			"second_score":	115621
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	446,
			"primary_score":	999861,
			"second_score":	115619
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	456,
			"primary_score":	999861,
			"second_score":	15292
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	457,
			"primary_score":	999861,
			"second_score":	15290
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	458,
			"primary_score":	999861,
			"second_score":	15288
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	459,
			"primary_score":	999861,
			"second_score":	15286
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	460,
			"primary_score":	999861,
			"second_score":	17651
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	461,
			"primary_score":	999861,
			"second_score":	17649
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1032,
			"primary_score":	999974,
			"second_score":	126499
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1033,
			"primary_score":	999974,
			"second_score":	126498
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1034,
			"primary_score":	999974,
			"second_score":	126497
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1035,
			"primary_score":	999974,
			"second_score":	126496
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1036,
			"primary_score":	999974,
			"second_score":	126495
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1037,
			"primary_score":	999974,
			"second_score":	126494
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1038,
			"primary_score":	999974,
			"second_score":	126493
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1039,
			"primary_score":	999974,
			"second_score":	126492
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1040,
			"primary_score":	999974,
			"second_score":	126491
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1041,
			"primary_score":	999974,
			"second_score":	126490
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1042,
			"primary_score":	999974,
			"second_score":	126489
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1043,
			"primary_score":	999974,
			"second_score":	126488
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1045,
			"primary_score":	999974,
			"second_score":	126487
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1046,
			"primary_score":	999974,
			"second_score":	126486
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1047,
			"primary_score":	999974,
			"second_score":	126485
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1048,
			"primary_score":	999974,
			"second_score":	126484
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1066,
			"primary_score":	999974,
			"second_score":	126483
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1067,
			"primary_score":	999974,
			"second_score":	126470
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1070,
			"primary_score":	999974,
			"second_score":	126469
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1155,
			"primary_score":	999861,
			"second_score":	121834
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1156,
			"primary_score":	999861,
			"second_score":	121833
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1157,
			"primary_score":	999861,
			"second_score":	121832
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1158,
			"primary_score":	999861,
			"second_score":	121831
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1159,
			"primary_score":	999861,
			"second_score":	121830
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1161,
			"primary_score":	999861,
			"second_score":	121829
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1169,
			"primary_score":	999861,
			"second_score":	121828
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1170,
			"primary_score":	999861,
			"second_score":	121827
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1172,
			"primary_score":	999861,
			"second_score":	121826
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1176,
			"primary_score":	999861,
			"second_score":	121825
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1177,
			"primary_score":	999861,
			"second_score":	121824
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1178,
			"primary_score":	999861,
			"second_score":	121823
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1179,
			"primary_score":	999861,
			"second_score":	119336
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1181,
			"primary_score":	999861,
			"second_score":	119335
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1182,
			"primary_score":	999861,
			"second_score":	119334
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1183,
			"primary_score":	999861,
			"second_score":	119333
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1184,
			"primary_score":	999861,
			"second_score":	119332
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1185,
			"primary_score":	999861,
			"second_score":	119331
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1187,
			"primary_score":	999861,
			"second_score":	119330
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1188,
			"primary_score":	999861,
			"second_score":	119329
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1189,
			"primary_score":	999861,
			"second_score":	119328
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1190,
			"primary_score":	999861,
			"second_score":	119327
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1193,
			"primary_score":	999861,
			"second_score":	119326
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1195,
			"primary_score":	999861,
			"second_score":	119325
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1197,
			"primary_score":	999861,
			"second_score":	118957
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1198,
			"primary_score":	999861,
			"second_score":	118956
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1199,
			"primary_score":	999861,
			"second_score":	118955
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1202,
			"primary_score":	999861,
			"second_score":	118954
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1210,
			"primary_score":	999861,
			"second_score":	118923
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1211,
			"primary_score":	999861,
			"second_score":	118922
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1212,
			"primary_score":	999861,
			"second_score":	118921
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1213,
			"primary_score":	999861,
			"second_score":	118920
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1214,
			"primary_score":	999861,
			"second_score":	118831
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1215,
			"primary_score":	999861,
			"second_score":	118812
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1216,
			"primary_score":	999861,
			"second_score":	118811
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1220,
			"primary_score":	999861,
			"second_score":	118810
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1223,
			"primary_score":	999861,
			"second_score":	118809
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1235,
			"primary_score":	999861,
			"second_score":	121836
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1237,
			"primary_score":	999861,
			"second_score":	121835
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1238,
			"primary_score":	999861,
			"second_score":	118808
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1242,
			"primary_score":	999861,
			"second_score":	118807
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1248,
			"primary_score":	999861,
			"second_score":	121837
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1510,
			"primary_score":	999861,
			"second_score":	103537
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1583,
			"primary_score":	999974,
			"second_score":	126502
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1584,
			"primary_score":	999974,
			"second_score":	126501
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1586,
			"primary_score":	999974,
			"second_score":	126500
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1600,
			"primary_score":	999974,
			"second_score":	126468
		}, {
			"file":	"Zend/zend_extensions.c",
			"line":	182,
			"primary_score":	999861,
			"second_score":	14748
		}, {
			"file":	"Zend/zend_extensions.c",
			"line":	183,
			"primary_score":	999861,
			"second_score":	14745
		}, {
			"file":	"Zend/zend_float.c",
			"line":	44,
			"primary_score":	999861,
			"second_score":	113654
		}, {
			"file":	"Zend/zend_float.c",
			"line":	45,
			"primary_score":	999861,
			"second_score":	113653
		}, {
			"file":	"Zend/zend_float.c",
			"line":	48,
			"primary_score":	999861,
			"second_score":	113651
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	35,
			"primary_score":	999861,
			"second_score":	3139
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	36,
			"primary_score":	999861,
			"second_score":	3138
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	37,
			"primary_score":	999861,
			"second_score":	3137
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	84,
			"primary_score":	999861,
			"second_score":	3140
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	132,
			"primary_score":	999861,
			"second_score":	115656
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	142,
			"primary_score":	999861,
			"second_score":	115655
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	143,
			"primary_score":	999968,
			"second_score":	124208
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	144,
			"primary_score":	999968,
			"second_score":	124200
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	147,
			"primary_score":	999861,
			"second_score":	115654
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	149,
			"primary_score":	999861,
			"second_score":	115653
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	150,
			"primary_score":	999861,
			"second_score":	118560
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	152,
			"primary_score":	999861,
			"second_score":	118559
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	153,
			"primary_score":	999861,
			"second_score":	118558
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	155,
			"primary_score":	999861,
			"second_score":	118557
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	156,
			"primary_score":	999861,
			"second_score":	118660
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	157,
			"primary_score":	999861,
			"second_score":	118556
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	158,
			"primary_score":	999861,
			"second_score":	118555
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	159,
			"primary_score":	999861,
			"second_score":	118554
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	176,
			"primary_score":	999861,
			"second_score":	118553
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	177,
			"primary_score":	999861,
			"second_score":	118552
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	178,
			"primary_score":	999861,
			"second_score":	118551
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	179,
			"primary_score":	999861,
			"second_score":	118550
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	181,
			"primary_score":	999861,
			"second_score":	118549
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	183,
			"primary_score":	999861,
			"second_score":	118548
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	184,
			"primary_score":	999861,
			"second_score":	118547
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	186,
			"primary_score":	999861,
			"second_score":	118546
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	187,
			"primary_score":	999861,
			"second_score":	118545
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	188,
			"primary_score":	999861,
			"second_score":	118544
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	195,
			"primary_score":	999968,
			"second_score":	124205
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	197,
			"primary_score":	999968,
			"second_score":	124204
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	202,
			"primary_score":	999968,
			"second_score":	124203
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	204,
			"primary_score":	999968,
			"second_score":	124202
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	205,
			"primary_score":	999968,
			"second_score":	124201
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	206,
			"primary_score":	999968,
			"second_score":	126147
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	207,
			"primary_score":	999968,
			"second_score":	126146
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	208,
			"primary_score":	999968,
			"second_score":	126145
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	210,
			"primary_score":	999968,
			"second_score":	126144
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	212,
			"primary_score":	999970,
			"second_score":	126143
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	213,
			"primary_score":	999970,
			"second_score":	126142
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	214,
			"primary_score":	999970,
			"second_score":	126141
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	232,
			"primary_score":	999968,
			"second_score":	126140
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	233,
			"primary_score":	999968,
			"second_score":	126139
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	234,
			"primary_score":	999968,
			"second_score":	126138
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	235,
			"primary_score":	999968,
			"second_score":	126137
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	237,
			"primary_score":	999968,
			"second_score":	126136
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	239,
			"primary_score":	999968,
			"second_score":	126135
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	240,
			"primary_score":	999968,
			"second_score":	126134
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	242,
			"primary_score":	999968,
			"second_score":	126133
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	243,
			"primary_score":	999968,
			"second_score":	126132
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	244,
			"primary_score":	999968,
			"second_score":	126131
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	251,
			"primary_score":	999861,
			"second_score":	114862
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	253,
			"primary_score":	999861,
			"second_score":	114861
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	264,
			"primary_score":	999861,
			"second_score":	114860
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	265,
			"primary_score":	999861,
			"second_score":	114859
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	266,
			"primary_score":	999861,
			"second_score":	114853
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	653,
			"primary_score":	999861,
			"second_score":	113463
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	655,
			"primary_score":	999861,
			"second_score":	113462
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	728,
			"primary_score":	999861,
			"second_score":	113461
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	182,
			"primary_score":	999861,
			"second_score":	115618
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	183,
			"primary_score":	999861,
			"second_score":	115657
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	189,
			"primary_score":	999861,
			"second_score":	114858
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	190,
			"primary_score":	999861,
			"second_score":	114857
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	191,
			"primary_score":	999861,
			"second_score":	114856
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	192,
			"primary_score":	999861,
			"second_score":	114855
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	193,
			"primary_score":	999861,
			"second_score":	114854
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	150,
			"primary_score":	999861,
			"second_score":	157013
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	152,
			"primary_score":	999861,
			"second_score":	157012
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	154,
			"primary_score":	999861,
			"second_score":	157011
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	158,
			"primary_score":	999861,
			"second_score":	157010
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	161,
			"primary_score":	999861,
			"second_score":	157009
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	164,
			"primary_score":	999861,
			"second_score":	157008
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	165,
			"primary_score":	999861,
			"second_score":	157007
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	166,
			"primary_score":	999861,
			"second_score":	157006
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	167,
			"primary_score":	999861,
			"second_score":	157005
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	168,
			"primary_score":	999861,
			"second_score":	157004
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	169,
			"primary_score":	999861,
			"second_score":	157003
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	170,
			"primary_score":	999861,
			"second_score":	157002
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	171,
			"primary_score":	999861,
			"second_score":	157001
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	172,
			"primary_score":	999861,
			"second_score":	157000
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	173,
			"primary_score":	999861,
			"second_score":	156999
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	174,
			"primary_score":	999861,
			"second_score":	156998
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	175,
			"primary_score":	999861,
			"second_score":	156997
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	197,
			"primary_score":	999861,
			"second_score":	133530
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	198,
			"primary_score":	999861,
			"second_score":	133529
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	199,
			"primary_score":	999861,
			"second_score":	133528
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	201,
			"primary_score":	999861,
			"second_score":	133527
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	203,
			"primary_score":	999861,
			"second_score":	133526
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	210,
			"primary_score":	999861,
			"second_score":	164839
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	212,
			"primary_score":	999861,
			"second_score":	133523
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	213,
			"primary_score":	999861,
			"second_score":	133416
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	215,
			"primary_score":	999861,
			"second_score":	133415
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	216,
			"primary_score":	999861,
			"second_score":	133414
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	217,
			"primary_score":	999861,
			"second_score":	133413
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	220,
			"primary_score":	999861,
			"second_score":	133411
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	243,
			"primary_score":	999861,
			"second_score":	164612
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	250,
			"primary_score":	999861,
			"second_score":	164611
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	251,
			"primary_score":	999861,
			"second_score":	164507
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	254,
			"primary_score":	999861,
			"second_score":	164506
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	255,
			"primary_score":	999861,
			"second_score":	164505
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	257,
			"primary_score":	999861,
			"second_score":	164504
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	258,
			"primary_score":	999861,
			"second_score":	164503
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	259,
			"primary_score":	999861,
			"second_score":	164498
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	260,
			"primary_score":	999861,
			"second_score":	164497
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	261,
			"primary_score":	999861,
			"second_score":	164493
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	262,
			"primary_score":	999861,
			"second_score":	164492
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	265,
			"primary_score":	999861,
			"second_score":	164491
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	266,
			"primary_score":	999861,
			"second_score":	164489
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	267,
			"primary_score":	999861,
			"second_score":	164480
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	268,
			"primary_score":	999861,
			"second_score":	164479
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	270,
			"primary_score":	999861,
			"second_score":	164477
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	271,
			"primary_score":	999861,
			"second_score":	164476
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	272,
			"primary_score":	999861,
			"second_score":	164474
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	376,
			"primary_score":	999861,
			"second_score":	126947
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	401,
			"primary_score":	999861,
			"second_score":	126946
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	415,
			"primary_score":	999861,
			"second_score":	126828
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	426,
			"primary_score":	999861,
			"second_score":	126809
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	476,
			"primary_score":	999861,
			"second_score":	47247
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	477,
			"primary_score":	999861,
			"second_score":	47246
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	479,
			"primary_score":	999861,
			"second_score":	47245
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	481,
			"primary_score":	999861,
			"second_score":	47244
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	482,
			"primary_score":	999861,
			"second_score":	47243
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	484,
			"primary_score":	999861,
			"second_score":	47227
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	486,
			"primary_score":	999861,
			"second_score":	47226
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	487,
			"primary_score":	999861,
			"second_score":	47225
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	488,
			"primary_score":	999861,
			"second_score":	47224
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	492,
			"primary_score":	999861,
			"second_score":	47223
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	493,
			"primary_score":	999861,
			"second_score":	47221
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	494,
			"primary_score":	999861,
			"second_score":	47220
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	496,
			"primary_score":	999861,
			"second_score":	47271
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	498,
			"primary_score":	999861,
			"second_score":	47219
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	499,
			"primary_score":	999861,
			"second_score":	51598
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	501,
			"primary_score":	999861,
			"second_score":	47218
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	502,
			"primary_score":	999861,
			"second_score":	50185
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	505,
			"primary_score":	999861,
			"second_score":	47217
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	507,
			"primary_score":	999861,
			"second_score":	47216
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	508,
			"primary_score":	999861,
			"second_score":	47215
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	510,
			"primary_score":	999861,
			"second_score":	62017
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	512,
			"primary_score":	999861,
			"second_score":	47214
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	513,
			"primary_score":	999861,
			"second_score":	47213
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	515,
			"primary_score":	999861,
			"second_score":	47212
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	516,
			"primary_score":	999861,
			"second_score":	47211
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	518,
			"primary_score":	999861,
			"second_score":	47207
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	519,
			"primary_score":	999861,
			"second_score":	47206
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	521,
			"primary_score":	999861,
			"second_score":	47205
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	522,
			"primary_score":	999861,
			"second_score":	47204
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	523,
			"primary_score":	999861,
			"second_score":	47202
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	524,
			"primary_score":	999861,
			"second_score":	47201
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	526,
			"primary_score":	999861,
			"second_score":	47276
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	534,
			"primary_score":	999861,
			"second_score":	3133
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	536,
			"primary_score":	999861,
			"second_score":	3132
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	538,
			"primary_score":	999861,
			"second_score":	3131
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	540,
			"primary_score":	999861,
			"second_score":	3130
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	541,
			"primary_score":	999861,
			"second_score":	3129
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	542,
			"primary_score":	999861,
			"second_score":	3122
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	543,
			"primary_score":	999861,
			"second_score":	3121
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	544,
			"primary_score":	999861,
			"second_score":	3120
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	545,
			"primary_score":	999861,
			"second_score":	3257
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	547,
			"primary_score":	999861,
			"second_score":	3119
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	548,
			"primary_score":	999861,
			"second_score":	3118
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	550,
			"primary_score":	999861,
			"second_score":	3117
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	552,
			"primary_score":	999861,
			"second_score":	3116
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	553,
			"primary_score":	999861,
			"second_score":	3115
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	556,
			"primary_score":	999861,
			"second_score":	3114
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	599,
			"primary_score":	999861,
			"second_score":	3611
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	601,
			"primary_score":	999861,
			"second_score":	3610
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	602,
			"primary_score":	999861,
			"second_score":	3608
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	603,
			"primary_score":	999861,
			"second_score":	3924
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	605,
			"primary_score":	999861,
			"second_score":	3607
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	607,
			"primary_score":	999861,
			"second_score":	3606
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	608,
			"primary_score":	999861,
			"second_score":	3605
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	610,
			"primary_score":	999861,
			"second_score":	3604
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	611,
			"primary_score":	999861,
			"second_score":	52792
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	616,
			"primary_score":	999861,
			"second_score":	3603
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	617,
			"primary_score":	999861,
			"second_score":	52734
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	620,
			"primary_score":	999861,
			"second_score":	3602
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	622,
			"primary_score":	999861,
			"second_score":	3601
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	623,
			"primary_score":	999861,
			"second_score":	3600
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	625,
			"primary_score":	999861,
			"second_score":	50148
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	627,
			"primary_score":	999861,
			"second_score":	3599
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	628,
			"primary_score":	999861,
			"second_score":	3598
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	630,
			"primary_score":	999861,
			"second_score":	3597
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	631,
			"primary_score":	999861,
			"second_score":	3596
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	633,
			"primary_score":	999861,
			"second_score":	3594
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	634,
			"primary_score":	999861,
			"second_score":	50141
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	636,
			"primary_score":	999861,
			"second_score":	3593
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	637,
			"primary_score":	999861,
			"second_score":	3592
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	639,
			"primary_score":	999861,
			"second_score":	3591
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	640,
			"primary_score":	999861,
			"second_score":	3590
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	642,
			"primary_score":	999861,
			"second_score":	3589
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	665,
			"primary_score":	999861,
			"second_score":	103506
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	667,
			"primary_score":	999861,
			"second_score":	103505
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	669,
			"primary_score":	999861,
			"second_score":	103504
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	670,
			"primary_score":	999861,
			"second_score":	103503
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	671,
			"primary_score":	999861,
			"second_score":	50160
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	672,
			"primary_score":	999861,
			"second_score":	47192
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	675,
			"primary_score":	999861,
			"second_score":	47191
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	676,
			"primary_score":	999861,
			"second_score":	47190
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	679,
			"primary_score":	999861,
			"second_score":	47189
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	693,
			"primary_score":	999861,
			"second_score":	119271
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	695,
			"primary_score":	999861,
			"second_score":	119270
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	697,
			"primary_score":	999861,
			"second_score":	119269
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	698,
			"primary_score":	999861,
			"second_score":	119267
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	699,
			"primary_score":	999861,
			"second_score":	119266
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	711,
			"primary_score":	999861,
			"second_score":	119265
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	717,
			"primary_score":	999861,
			"second_score":	6024
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	719,
			"primary_score":	999861,
			"second_score":	6023
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	721,
			"primary_score":	999861,
			"second_score":	6022
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	722,
			"primary_score":	999861,
			"second_score":	6020
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	723,
			"primary_score":	999861,
			"second_score":	6019
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	724,
			"primary_score":	999861,
			"second_score":	3575
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	726,
			"primary_score":	999861,
			"second_score":	3572
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	727,
			"primary_score":	999861,
			"second_score":	3612
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	729,
			"primary_score":	999861,
			"second_score":	3571
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	731,
			"primary_score":	999861,
			"second_score":	3570
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	735,
			"primary_score":	999861,
			"second_score":	3569
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	775,
			"primary_score":	999861,
			"second_score":	114572
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	777,
			"primary_score":	999861,
			"second_score":	114571
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	779,
			"primary_score":	999861,
			"second_score":	119443
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	780,
			"primary_score":	999861,
			"second_score":	114568
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	781,
			"primary_score":	999861,
			"second_score":	114567
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	782,
			"primary_score":	999861,
			"second_score":	113841
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	784,
			"primary_score":	999861,
			"second_score":	113839
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	785,
			"primary_score":	999861,
			"second_score":	113838
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	786,
			"primary_score":	999861,
			"second_score":	113837
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	787,
			"primary_score":	999861,
			"second_score":	114079
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	789,
			"primary_score":	999861,
			"second_score":	113836
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	790,
			"primary_score":	999861,
			"second_score":	113835
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	793,
			"primary_score":	999861,
			"second_score":	119375
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	898,
			"primary_score":	999861,
			"second_score":	97613
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	899,
			"primary_score":	999861,
			"second_score":	97612
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	900,
			"primary_score":	999861,
			"second_score":	97611
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	902,
			"primary_score":	999861,
			"second_score":	97610
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	904,
			"primary_score":	999861,
			"second_score":	97609
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	905,
			"primary_score":	999861,
			"second_score":	97595
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	907,
			"primary_score":	999861,
			"second_score":	97594
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	908,
			"primary_score":	999861,
			"second_score":	97593
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	909,
			"primary_score":	999861,
			"second_score":	97590
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	911,
			"primary_score":	999861,
			"second_score":	97589
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	912,
			"primary_score":	999861,
			"second_score":	97588
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	914,
			"primary_score":	999861,
			"second_score":	97591
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	916,
			"primary_score":	999861,
			"second_score":	138386
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	948,
			"primary_score":	999861,
			"second_score":	64575
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	949,
			"primary_score":	999861,
			"second_score":	64574
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	950,
			"primary_score":	999861,
			"second_score":	64573
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	952,
			"primary_score":	999861,
			"second_score":	64572
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	954,
			"primary_score":	999861,
			"second_score":	64571
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	955,
			"primary_score":	999861,
			"second_score":	64562
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	957,
			"primary_score":	999861,
			"second_score":	64561
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	958,
			"primary_score":	999861,
			"second_score":	64560
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	959,
			"primary_score":	999861,
			"second_score":	64559
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	961,
			"primary_score":	999861,
			"second_score":	64558
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	997,
			"primary_score":	999861,
			"second_score":	114014
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	998,
			"primary_score":	999861,
			"second_score":	114013
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1000,
			"primary_score":	999861,
			"second_score":	114012
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1002,
			"primary_score":	999861,
			"second_score":	114011
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1004,
			"primary_score":	999861,
			"second_score":	114010
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1005,
			"primary_score":	999861,
			"second_score":	114009
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1006,
			"primary_score":	999861,
			"second_score":	114008
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1007,
			"primary_score":	999861,
			"second_score":	114007
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1008,
			"primary_score":	999861,
			"second_score":	114006
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1038,
			"primary_score":	999861,
			"second_score":	119373
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1040,
			"primary_score":	999861,
			"second_score":	119372
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1132,
			"primary_score":	999980,
			"second_score":	121656
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1134,
			"primary_score":	999980,
			"second_score":	121655
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1136,
			"primary_score":	999980,
			"second_score":	121654
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1138,
			"primary_score":	999980,
			"second_score":	121653
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1139,
			"primary_score":	999980,
			"second_score":	121909
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1140,
			"primary_score":	999987,
			"second_score":	121908
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1143,
			"primary_score":	999987,
			"second_score":	121907
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1145,
			"primary_score":	999987,
			"second_score":	121906
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1146,
			"primary_score":	999987,
			"second_score":	121905
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1148,
			"primary_score":	999987,
			"second_score":	121904
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1154,
			"primary_score":	999983,
			"second_score":	121652
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	263,
			"primary_score":	999861,
			"second_score":	47242
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	266,
			"primary_score":	999861,
			"second_score":	47241
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	267,
			"primary_score":	999861,
			"second_score":	47240
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	268,
			"primary_score":	999861,
			"second_score":	47239
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	269,
			"primary_score":	999861,
			"second_score":	47238
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	270,
			"primary_score":	999861,
			"second_score":	47237
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	271,
			"primary_score":	999861,
			"second_score":	47236
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	272,
			"primary_score":	999861,
			"second_score":	47235
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	273,
			"primary_score":	999861,
			"second_score":	47234
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	274,
			"primary_score":	999861,
			"second_score":	47233
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	276,
			"primary_score":	999861,
			"second_score":	47232
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	278,
			"primary_score":	999861,
			"second_score":	48691
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	279,
			"primary_score":	999861,
			"second_score":	47446
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	280,
			"primary_score":	999861,
			"second_score":	47445
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	281,
			"primary_score":	999861,
			"second_score":	47444
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	282,
			"primary_score":	999861,
			"second_score":	47231
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	283,
			"primary_score":	999861,
			"second_score":	47230
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	287,
			"primary_score":	999861,
			"second_score":	47228
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	39,
			"primary_score":	999861,
			"second_score":	3574
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	40,
			"primary_score":	999861,
			"second_score":	3614
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	42,
			"primary_score":	999861,
			"second_score":	3573
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	105,
			"primary_score":	999861,
			"second_score":	3243
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	106,
			"primary_score":	999861,
			"second_score":	3216
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	107,
			"primary_score":	999861,
			"second_score":	3215
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	121,
			"primary_score":	999861,
			"second_score":	113453
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	127,
			"primary_score":	999861,
			"second_score":	113452
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	226,
			"primary_score":	999861,
			"second_score":	6025
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	384,
			"primary_score":	999861,
			"second_score":	97616
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	385,
			"primary_score":	999861,
			"second_score":	97615
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	387,
			"primary_score":	999861,
			"second_score":	97614
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	388,
			"primary_score":	999861,
			"second_score":	97587
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	392,
			"primary_score":	999861,
			"second_score":	97586
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	395,
			"primary_score":	999861,
			"second_score":	97585
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3151,
			"primary_score":	999861,
			"second_score":	133816
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3153,
			"primary_score":	999861,
			"second_score":	133815
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3155,
			"primary_score":	999861,
			"second_score":	133814
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3157,
			"primary_score":	999861,
			"second_score":	133813
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3214,
			"primary_score":	999861,
			"second_score":	164212
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3217,
			"primary_score":	999861,
			"second_score":	164211
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3220,
			"primary_score":	999861,
			"second_score":	164210
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3222,
			"primary_score":	999861,
			"second_score":	164209
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3223,
			"primary_score":	999861,
			"second_score":	164208
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3224,
			"primary_score":	999861,
			"second_score":	164207
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3226,
			"primary_score":	999861,
			"second_score":	164206
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3228,
			"primary_score":	999861,
			"second_score":	164205
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3231,
			"primary_score":	999861,
			"second_score":	164204
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3232,
			"primary_score":	999861,
			"second_score":	164203
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3233,
			"primary_score":	999861,
			"second_score":	164202
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3245,
			"primary_score":	999861,
			"second_score":	164201
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3246,
			"primary_score":	999861,
			"second_score":	164200
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3247,
			"primary_score":	999861,
			"second_score":	164199
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3250,
			"primary_score":	999861,
			"second_score":	164198
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3251,
			"primary_score":	999861,
			"second_score":	164197
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3252,
			"primary_score":	999861,
			"second_score":	164196
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3258,
			"primary_score":	999861,
			"second_score":	164195
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3262,
			"primary_score":	999861,
			"second_score":	164194
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3267,
			"primary_score":	999861,
			"second_score":	164193
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3269,
			"primary_score":	999861,
			"second_score":	164192
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3271,
			"primary_score":	999861,
			"second_score":	164191
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3272,
			"primary_score":	999861,
			"second_score":	164190
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3273,
			"primary_score":	999861,
			"second_score":	164189
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3274,
			"primary_score":	999861,
			"second_score":	164188
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3281,
			"primary_score":	999861,
			"second_score":	164187
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3282,
			"primary_score":	999861,
			"second_score":	164186
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3284,
			"primary_score":	999861,
			"second_score":	164185
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3294,
			"primary_score":	999861,
			"second_score":	133836
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3297,
			"primary_score":	999861,
			"second_score":	133835
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3362,
			"primary_score":	999861,
			"second_score":	133834
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3364,
			"primary_score":	999861,
			"second_score":	133833
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3376,
			"primary_score":	999861,
			"second_score":	133832
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3377,
			"primary_score":	999861,
			"second_score":	133925
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3382,
			"primary_score":	999861,
			"second_score":	133831
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3384,
			"primary_score":	999861,
			"second_score":	133900
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3385,
			"primary_score":	999861,
			"second_score":	133899
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3388,
			"primary_score":	999861,
			"second_score":	133830
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3390,
			"primary_score":	999861,
			"second_score":	133829
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3391,
			"primary_score":	999861,
			"second_score":	133828
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3395,
			"primary_score":	999861,
			"second_score":	134013
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3396,
			"primary_score":	999861,
			"second_score":	134012
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3401,
			"primary_score":	999861,
			"second_score":	133827
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3402,
			"primary_score":	999861,
			"second_score":	133826
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3403,
			"primary_score":	999861,
			"second_score":	134041
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3404,
			"primary_score":	999861,
			"second_score":	133825
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3405,
			"primary_score":	999861,
			"second_score":	133824
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3407,
			"primary_score":	999861,
			"second_score":	133859
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3409,
			"primary_score":	999861,
			"second_score":	133858
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3410,
			"primary_score":	999861,
			"second_score":	133857
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3413,
			"primary_score":	999861,
			"second_score":	133823
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3414,
			"primary_score":	999861,
			"second_score":	133822
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3418,
			"primary_score":	999861,
			"second_score":	134006
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3422,
			"primary_score":	999861,
			"second_score":	134005
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3425,
			"primary_score":	999861,
			"second_score":	134004
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3426,
			"primary_score":	999861,
			"second_score":	134003
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3428,
			"primary_score":	999861,
			"second_score":	134002
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3429,
			"primary_score":	999861,
			"second_score":	134001
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3431,
			"primary_score":	999861,
			"second_score":	134000
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3439,
			"primary_score":	999861,
			"second_score":	133924
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3441,
			"primary_score":	999861,
			"second_score":	133923
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3459,
			"primary_score":	999861,
			"second_score":	133856
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3462,
			"primary_score":	999861,
			"second_score":	133855
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3463,
			"primary_score":	999861,
			"second_score":	133854
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3467,
			"primary_score":	999861,
			"second_score":	133853
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3468,
			"primary_score":	999861,
			"second_score":	133847
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3472,
			"primary_score":	999861,
			"second_score":	134035
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3473,
			"primary_score":	999861,
			"second_score":	134031
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3477,
			"primary_score":	999861,
			"second_score":	133919
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3478,
			"primary_score":	999861,
			"second_score":	133917
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3482,
			"primary_score":	999861,
			"second_score":	135822
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3483,
			"primary_score":	999861,
			"second_score":	135821
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3492,
			"primary_score":	999861,
			"second_score":	133943
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3493,
			"primary_score":	999861,
			"second_score":	133941
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3592,
			"primary_score":	999861,
			"second_score":	133967
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3593,
			"primary_score":	999861,
			"second_score":	133965
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3602,
			"primary_score":	999868,
			"second_score":	121599
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3603,
			"primary_score":	999868,
			"second_score":	121577
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3607,
			"primary_score":	999868,
			"second_score":	121012
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3608,
			"primary_score":	999868,
			"second_score":	120925
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3612,
			"primary_score":	999868,
			"second_score":	120772
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3613,
			"primary_score":	999868,
			"second_score":	120711
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3732,
			"primary_score":	999861,
			"second_score":	132800
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3733,
			"primary_score":	999861,
			"second_score":	132792
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4142,
			"primary_score":	999861,
			"second_score":	134679
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4143,
			"primary_score":	999861,
			"second_score":	134678
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4147,
			"primary_score":	999861,
			"second_score":	135318
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4148,
			"primary_score":	999861,
			"second_score":	135317
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4152,
			"primary_score":	999861,
			"second_score":	152815
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4153,
			"primary_score":	999861,
			"second_score":	152721
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4157,
			"primary_score":	999861,
			"second_score":	133333
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4158,
			"primary_score":	999861,
			"second_score":	133251
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4167,
			"primary_score":	999861,
			"second_score":	128958
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4168,
			"primary_score":	999861,
			"second_score":	128844
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4172,
			"primary_score":	999861,
			"second_score":	134789
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4173,
			"primary_score":	999861,
			"second_score":	134707
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4412,
			"primary_score":	999861,
			"second_score":	126394
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4413,
			"primary_score":	999861,
			"second_score":	126377
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4417,
			"primary_score":	999861,
			"second_score":	142573
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4418,
			"primary_score":	999861,
			"second_score":	142361
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4457,
			"primary_score":	999896,
			"second_score":	136526
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4458,
			"primary_score":	999896,
			"second_score":	136449
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4477,
			"primary_score":	999974,
			"second_score":	147178
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4478,
			"primary_score":	999974,
			"second_score":	147124
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4482,
			"primary_score":	999974,
			"second_score":	147073
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4483,
			"primary_score":	999974,
			"second_score":	147004
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4677,
			"primary_score":	999869,
			"second_score":	121785
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4678,
			"primary_score":	999869,
			"second_score":	121760
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4732,
			"primary_score":	999861,
			"second_score":	126479
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4733,
			"primary_score":	999861,
			"second_score":	126478
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4737,
			"primary_score":	999861,
			"second_score":	129926
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4738,
			"primary_score":	999861,
			"second_score":	129898
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4742,
			"primary_score":	999861,
			"second_score":	127099
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4743,
			"primary_score":	999861,
			"second_score":	127057
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4747,
			"primary_score":	999861,
			"second_score":	126669
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4748,
			"primary_score":	999861,
			"second_score":	126545
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4827,
			"primary_score":	999861,
			"second_score":	136929
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4828,
			"primary_score":	999861,
			"second_score":	136928
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4832,
			"primary_score":	999952,
			"second_score":	136611
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4833,
			"primary_score":	999952,
			"second_score":	136610
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4842,
			"primary_score":	999914,
			"second_score":	121248
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4843,
			"primary_score":	999914,
			"second_score":	121142
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4892,
			"primary_score":	999861,
			"second_score":	135740
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4893,
			"primary_score":	999861,
			"second_score":	135379
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4897,
			"primary_score":	999861,
			"second_score":	134635
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4898,
			"primary_score":	999861,
			"second_score":	134520
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4977,
			"primary_score":	999974,
			"second_score":	147507
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4978,
			"primary_score":	999974,
			"second_score":	147506
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5007,
			"primary_score":	999974,
			"second_score":	147478
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5008,
			"primary_score":	999974,
			"second_score":	147200
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5072,
			"primary_score":	999995,
			"second_score":	147096
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5073,
			"primary_score":	999995,
			"second_score":	147095
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5082,
			"primary_score":	999925,
			"second_score":	136975
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5083,
			"primary_score":	999925,
			"second_score":	136974
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5092,
			"primary_score":	999861,
			"second_score":	137259
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5093,
			"primary_score":	999861,
			"second_score":	137258
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5197,
			"primary_score":	999861,
			"second_score":	137354
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5198,
			"primary_score":	999861,
			"second_score":	137235
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5212,
			"primary_score":	999861,
			"second_score":	136952
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5213,
			"primary_score":	999861,
			"second_score":	136951
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5257,
			"primary_score":	999861,
			"second_score":	134304
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5258,
			"primary_score":	999861,
			"second_score":	134303
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5262,
			"primary_score":	999861,
			"second_score":	136427
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5263,
			"primary_score":	999861,
			"second_score":	136426
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5267,
			"primary_score":	999861,
			"second_score":	134365
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5268,
			"primary_score":	999861,
			"second_score":	134326
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5284,
			"primary_score":	999984,
			"second_score":	144252
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5285,
			"primary_score":	999984,
			"second_score":	144225
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5289,
			"primary_score":	999984,
			"second_score":	143581
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5290,
			"primary_score":	999984,
			"second_score":	143554
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5294,
			"primary_score":	999984,
			"second_score":	143474
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5295,
			"primary_score":	999984,
			"second_score":	143443
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5299,
			"primary_score":	999861,
			"second_score":	134394
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5300,
			"primary_score":	999861,
			"second_score":	134393
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5309,
			"primary_score":	999984,
			"second_score":	143503
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5310,
			"primary_score":	999984,
			"second_score":	143502
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5354,
			"primary_score":	999986,
			"second_score":	143526
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5355,
			"primary_score":	999986,
			"second_score":	143525
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5399,
			"primary_score":	999896,
			"second_score":	135422
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5400,
			"primary_score":	999896,
			"second_score":	135421
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5409,
			"primary_score":	999861,
			"second_score":	134459
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5410,
			"primary_score":	999861,
			"second_score":	134422
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5414,
			"primary_score":	999896,
			"second_score":	135446
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5415,
			"primary_score":	999896,
			"second_score":	135444
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5439,
			"primary_score":	999896,
			"second_score":	135613
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5440,
			"primary_score":	999896,
			"second_score":	135507
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5444,
			"primary_score":	999896,
			"second_score":	135636
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5445,
			"primary_score":	999896,
			"second_score":	135635
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5464,
			"primary_score":	999984,
			"second_score":	143604
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5465,
			"primary_score":	999984,
			"second_score":	143603
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5489,
			"primary_score":	999984,
			"second_score":	144043
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5490,
			"primary_score":	999984,
			"second_score":	143702
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5494,
			"primary_score":	999984,
			"second_score":	144066
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5495,
			"primary_score":	999984,
			"second_score":	144065
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5539,
			"primary_score":	999955,
			"second_score":	136655
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5540,
			"primary_score":	999955,
			"second_score":	136654
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5544,
			"primary_score":	999962,
			"second_score":	136807
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5545,
			"primary_score":	999962,
			"second_score":	136704
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5554,
			"primary_score":	999963,
			"second_score":	137602
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5555,
			"primary_score":	999963,
			"second_score":	137506
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5717,
			"primary_score":	999861,
			"second_score":	133846
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5719,
			"primary_score":	999861,
			"second_score":	133845
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5720,
			"primary_score":	999861,
			"second_score":	133844
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5721,
			"primary_score":	999861,
			"second_score":	133843
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5723,
			"primary_score":	999861,
			"second_score":	133842
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5730,
			"primary_score":	999861,
			"second_score":	133841
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5732,
			"primary_score":	999861,
			"second_score":	133840
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5733,
			"primary_score":	999861,
			"second_score":	133839
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5734,
			"primary_score":	999861,
			"second_score":	133956
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5736,
			"primary_score":	999861,
			"second_score":	133838
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5738,
			"primary_score":	999861,
			"second_score":	133837
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5882,
			"primary_score":	999861,
			"second_score":	133821
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5907,
			"primary_score":	999861,
			"second_score":	133820
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5908,
			"primary_score":	999861,
			"second_score":	133819
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5909,
			"primary_score":	999861,
			"second_score":	133818
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5911,
			"primary_score":	999861,
			"second_score":	133817
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5913,
			"primary_score":	999861,
			"second_score":	133812
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5916,
			"primary_score":	999861,
			"second_score":	133811
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5920,
			"primary_score":	999861,
			"second_score":	133810
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5923,
			"primary_score":	999861,
			"second_score":	133809
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	127,
			"primary_score":	999927,
			"second_score":	144365
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	128,
			"primary_score":	999927,
			"second_score":	144339
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	135,
			"primary_score":	999927,
			"second_score":	144159
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	136,
			"primary_score":	999927,
			"second_score":	144158
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	137,
			"primary_score":	999927,
			"second_score":	144154
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	138,
			"primary_score":	999927,
			"second_score":	144153
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	143,
			"primary_score":	999861,
			"second_score":	165083
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	144,
			"primary_score":	999861,
			"second_score":	165082
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	145,
			"primary_score":	999861,
			"second_score":	165081
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	146,
			"primary_score":	999861,
			"second_score":	121456
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	161,
			"primary_score":	999861,
			"second_score":	118529
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	165,
			"primary_score":	999861,
			"second_score":	118528
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	166,
			"primary_score":	999861,
			"second_score":	118524
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	197,
			"primary_score":	999861,
			"second_score":	133564
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	198,
			"primary_score":	999861,
			"second_score":	133563
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	199,
			"primary_score":	999861,
			"second_score":	133562
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	200,
			"primary_score":	999861,
			"second_score":	133561
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	201,
			"primary_score":	999861,
			"second_score":	133560
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	202,
			"primary_score":	999861,
			"second_score":	133559
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	204,
			"primary_score":	999861,
			"second_score":	133558
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	205,
			"primary_score":	999861,
			"second_score":	133554
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	207,
			"primary_score":	999861,
			"second_score":	133553
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	208,
			"primary_score":	999861,
			"second_score":	133552
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	209,
			"primary_score":	999861,
			"second_score":	133551
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	210,
			"primary_score":	999861,
			"second_score":	133550
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	212,
			"primary_score":	999861,
			"second_score":	133548
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	216,
			"primary_score":	999861,
			"second_score":	133547
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	217,
			"primary_score":	999861,
			"second_score":	133546
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	218,
			"primary_score":	999861,
			"second_score":	133545
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	219,
			"primary_score":	999861,
			"second_score":	133544
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	220,
			"primary_score":	999861,
			"second_score":	133543
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	221,
			"primary_score":	999861,
			"second_score":	133542
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	222,
			"primary_score":	999861,
			"second_score":	133541
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	224,
			"primary_score":	999861,
			"second_score":	133540
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	233,
			"primary_score":	999861,
			"second_score":	133409
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	235,
			"primary_score":	999861,
			"second_score":	133333
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	236,
			"primary_score":	999861,
			"second_score":	133332
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	455,
			"primary_score":	999861,
			"second_score":	165210
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	456,
			"primary_score":	999861,
			"second_score":	165098
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	457,
			"primary_score":	999861,
			"second_score":	165097
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	458,
			"primary_score":	999861,
			"second_score":	165092
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	459,
			"primary_score":	999861,
			"second_score":	165091
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	460,
			"primary_score":	999861,
			"second_score":	165090
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	464,
			"primary_score":	999861,
			"second_score":	165089
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	465,
			"primary_score":	999861,
			"second_score":	165088
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	467,
			"primary_score":	999861,
			"second_score":	165087
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	468,
			"primary_score":	999861,
			"second_score":	165086
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	484,
			"primary_score":	999861,
			"second_score":	165085
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	485,
			"primary_score":	999861,
			"second_score":	165084
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	490,
			"primary_score":	999861,
			"second_score":	165080
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	492,
			"primary_score":	999861,
			"second_score":	165079
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	493,
			"primary_score":	999861,
			"second_score":	165078
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	498,
			"primary_score":	999861,
			"second_score":	165077
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	500,
			"primary_score":	999861,
			"second_score":	164471
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	501,
			"primary_score":	999861,
			"second_score":	164470
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	502,
			"primary_score":	999861,
			"second_score":	164469
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	507,
			"primary_score":	999861,
			"second_score":	164468
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	508,
			"primary_score":	999861,
			"second_score":	164467
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	543,
			"primary_score":	999861,
			"second_score":	164466
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	544,
			"primary_score":	999861,
			"second_score":	164222
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	545,
			"primary_score":	999861,
			"second_score":	164221
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	546,
			"primary_score":	999861,
			"second_score":	164220
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	547,
			"primary_score":	999861,
			"second_score":	164213
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	548,
			"primary_score":	999861,
			"second_score":	133808
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	549,
			"primary_score":	999861,
			"second_score":	133761
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	550,
			"primary_score":	999861,
			"second_score":	133760
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	553,
			"primary_score":	999861,
			"second_score":	133759
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	556,
			"primary_score":	999861,
			"second_score":	133758
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	557,
			"primary_score":	999861,
			"second_score":	133757
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	558,
			"primary_score":	999861,
			"second_score":	133756
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	559,
			"primary_score":	999861,
			"second_score":	133755
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	560,
			"primary_score":	999861,
			"second_score":	133570
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	566,
			"primary_score":	999861,
			"second_score":	133565
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	567,
			"primary_score":	999861,
			"second_score":	133539
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	614,
			"primary_score":	999861,
			"second_score":	121564
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	615,
			"primary_score":	999861,
			"second_score":	121563
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	618,
			"primary_score":	999861,
			"second_score":	121562
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	623,
			"primary_score":	999861,
			"second_score":	121561
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	626,
			"primary_score":	999861,
			"second_score":	121466
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	628,
			"primary_score":	999861,
			"second_score":	121465
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	629,
			"primary_score":	999861,
			"second_score":	121464
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	631,
			"primary_score":	999861,
			"second_score":	121463
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	632,
			"primary_score":	999861,
			"second_score":	121462
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	634,
			"primary_score":	999861,
			"second_score":	121461
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	651,
			"primary_score":	999861,
			"second_score":	121460
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	653,
			"primary_score":	999861,
			"second_score":	121455
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	654,
			"primary_score":	999861,
			"second_score":	121019
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	655,
			"primary_score":	999861,
			"second_score":	121018
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	656,
			"primary_score":	999861,
			"second_score":	121017
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	684,
			"primary_score":	999861,
			"second_score":	121822
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	685,
			"primary_score":	999861,
			"second_score":	121821
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	686,
			"primary_score":	999861,
			"second_score":	121717
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	687,
			"primary_score":	999861,
			"second_score":	121716
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	688,
			"primary_score":	999861,
			"second_score":	121715
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	689,
			"primary_score":	999861,
			"second_score":	121714
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	690,
			"primary_score":	999861,
			"second_score":	121713
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	692,
			"primary_score":	999861,
			"second_score":	121712
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	697,
			"primary_score":	999861,
			"second_score":	121711
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	699,
			"primary_score":	999861,
			"second_score":	121710
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	700,
			"primary_score":	999861,
			"second_score":	121709
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	701,
			"primary_score":	999861,
			"second_score":	121593
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	702,
			"primary_score":	999861,
			"second_score":	121591
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	704,
			"primary_score":	999861,
			"second_score":	121590
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	705,
			"primary_score":	999861,
			"second_score":	121565
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	709,
			"primary_score":	999861,
			"second_score":	121016
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	711,
			"primary_score":	999861,
			"second_score":	121015
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	712,
			"primary_score":	999861,
			"second_score":	121014
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	713,
			"primary_score":	999861,
			"second_score":	120770
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	714,
			"primary_score":	999861,
			"second_score":	120769
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	715,
			"primary_score":	999861,
			"second_score":	120768
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	716,
			"primary_score":	999861,
			"second_score":	120761
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	717,
			"primary_score":	999861,
			"second_score":	120760
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	719,
			"primary_score":	999861,
			"second_score":	119618
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	724,
			"primary_score":	999861,
			"second_score":	119617
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	729,
			"primary_score":	999861,
			"second_score":	119616
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	730,
			"primary_score":	999861,
			"second_score":	119568
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	731,
			"primary_score":	999861,
			"second_score":	119567
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	732,
			"primary_score":	999861,
			"second_score":	119396
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	733,
			"primary_score":	999861,
			"second_score":	119391
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	736,
			"primary_score":	999861,
			"second_score":	119390
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	737,
			"primary_score":	999861,
			"second_score":	119364
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	738,
			"primary_score":	999861,
			"second_score":	119338
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	739,
			"primary_score":	999861,
			"second_score":	119337
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	848,
			"primary_score":	999861,
			"second_score":	136730
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	849,
			"primary_score":	999861,
			"second_score":	136729
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	851,
			"primary_score":	999861,
			"second_score":	136728
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	854,
			"primary_score":	999861,
			"second_score":	136612
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	855,
			"primary_score":	999861,
			"second_score":	136611
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	856,
			"primary_score":	999861,
			"second_score":	136610
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	857,
			"primary_score":	999861,
			"second_score":	136609
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	858,
			"primary_score":	999861,
			"second_score":	129480
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	859,
			"primary_score":	999861,
			"second_score":	129479
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	864,
			"primary_score":	999861,
			"second_score":	129478
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	867,
			"primary_score":	999861,
			"second_score":	129477
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	868,
			"primary_score":	999861,
			"second_score":	129476
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	939,
			"primary_score":	999861,
			"second_score":	136608
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	942,
			"primary_score":	999861,
			"second_score":	136607
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	943,
			"primary_score":	999861,
			"second_score":	132351
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	945,
			"primary_score":	999861,
			"second_score":	136606
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	947,
			"primary_score":	999861,
			"second_score":	136605
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	948,
			"primary_score":	999861,
			"second_score":	136604
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	960,
			"primary_score":	999861,
			"second_score":	133894
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	963,
			"primary_score":	999861,
			"second_score":	133893
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	968,
			"primary_score":	999861,
			"second_score":	133892
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	969,
			"primary_score":	999861,
			"second_score":	133891
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	970,
			"primary_score":	999861,
			"second_score":	133890
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	971,
			"primary_score":	999861,
			"second_score":	134080
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	972,
			"primary_score":	999861,
			"second_score":	134079
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	973,
			"primary_score":	999861,
			"second_score":	134078
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	975,
			"primary_score":	999984,
			"second_score":	144195
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	989,
			"primary_score":	999861,
			"second_score":	133889
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	996,
			"primary_score":	999861,
			"second_score":	133888
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	997,
			"primary_score":	999861,
			"second_score":	133887
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1010,
			"primary_score":	999861,
			"second_score":	133886
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1045,
			"primary_score":	999861,
			"second_score":	133885
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1046,
			"primary_score":	999861,
			"second_score":	133884
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1047,
			"primary_score":	999861,
			"second_score":	133881
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1048,
			"primary_score":	999861,
			"second_score":	133880
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1049,
			"primary_score":	999861,
			"second_score":	164137
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1050,
			"primary_score":	999861,
			"second_score":	164136
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1051,
			"primary_score":	999861,
			"second_score":	164135
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1052,
			"primary_score":	999861,
			"second_score":	164134
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1053,
			"primary_score":	999861,
			"second_score":	164133
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1054,
			"primary_score":	999861,
			"second_score":	164132
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1064,
			"primary_score":	999861,
			"second_score":	133876
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1066,
			"primary_score":	999861,
			"second_score":	133875
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1067,
			"primary_score":	999861,
			"second_score":	133874
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1068,
			"primary_score":	999861,
			"second_score":	133873
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1128,
			"primary_score":	999861,
			"second_score":	133878
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1129,
			"primary_score":	999861,
			"second_score":	133877
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1132,
			"primary_score":	999861,
			"second_score":	164130
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1133,
			"primary_score":	999861,
			"second_score":	164129
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1134,
			"primary_score":	999861,
			"second_score":	164128
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1137,
			"primary_score":	999861,
			"second_score":	164127
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1138,
			"primary_score":	999861,
			"second_score":	164126
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1437,
			"primary_score":	999861,
			"second_score":	164124
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1438,
			"primary_score":	999861,
			"second_score":	164123
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1439,
			"primary_score":	999861,
			"second_score":	164122
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1440,
			"primary_score":	999861,
			"second_score":	164121
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1442,
			"primary_score":	999861,
			"second_score":	164120
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1443,
			"primary_score":	999861,
			"second_score":	164119
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1444,
			"primary_score":	999861,
			"second_score":	164118
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1445,
			"primary_score":	999861,
			"second_score":	164117
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1447,
			"primary_score":	999861,
			"second_score":	164116
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1448,
			"primary_score":	999861,
			"second_score":	164115
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1449,
			"primary_score":	999882,
			"second_score":	164114
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1450,
			"primary_score":	999882,
			"second_score":	164113
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1452,
			"primary_score":	999861,
			"second_score":	143147
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1453,
			"primary_score":	999861,
			"second_score":	143146
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1455,
			"primary_score":	999861,
			"second_score":	164112
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1457,
			"primary_score":	999861,
			"second_score":	164111
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1458,
			"primary_score":	999861,
			"second_score":	164110
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1460,
			"primary_score":	999861,
			"second_score":	164109
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1462,
			"primary_score":	999861,
			"second_score":	164108
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1463,
			"primary_score":	999861,
			"second_score":	164107
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1464,
			"primary_score":	999861,
			"second_score":	164106
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1465,
			"primary_score":	999861,
			"second_score":	164105
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1466,
			"primary_score":	999882,
			"second_score":	164102
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1467,
			"primary_score":	999861,
			"second_score":	164100
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1468,
			"primary_score":	999861,
			"second_score":	164099
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2191,
			"primary_score":	999861,
			"second_score":	134077
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2225,
			"primary_score":	999861,
			"second_score":	134076
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2226,
			"primary_score":	999861,
			"second_score":	134075
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2227,
			"primary_score":	999861,
			"second_score":	134072
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2228,
			"primary_score":	999861,
			"second_score":	134071
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2229,
			"primary_score":	999861,
			"second_score":	134070
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2347,
			"primary_score":	999861,
			"second_score":	143114
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2348,
			"primary_score":	999861,
			"second_score":	143113
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2349,
			"primary_score":	999861,
			"second_score":	143112
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2366,
			"primary_score":	999861,
			"second_score":	135971
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2368,
			"primary_score":	999861,
			"second_score":	135970
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2369,
			"primary_score":	999861,
			"second_score":	135969
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2370,
			"primary_score":	999861,
			"second_score":	135856
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2371,
			"primary_score":	999861,
			"second_score":	135855
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2398,
			"primary_score":	999861,
			"second_score":	131808
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2399,
			"primary_score":	999861,
			"second_score":	131807
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2410,
			"primary_score":	999861,
			"second_score":	131806
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2415,
			"primary_score":	999861,
			"second_score":	131805
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2419,
			"primary_score":	999861,
			"second_score":	131804
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2448,
			"primary_score":	999861,
			"second_score":	134959
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2449,
			"primary_score":	999861,
			"second_score":	134958
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2450,
			"primary_score":	999861,
			"second_score":	134957
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2470,
			"primary_score":	999868,
			"second_score":	124084
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2471,
			"primary_score":	999868,
			"second_score":	124083
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2482,
			"primary_score":	999868,
			"second_score":	124082
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2483,
			"primary_score":	999868,
			"second_score":	124081
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2500,
			"primary_score":	999949,
			"second_score":	138682
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2501,
			"primary_score":	999949,
			"second_score":	138681
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2512,
			"primary_score":	999949,
			"second_score":	138680
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2517,
			"primary_score":	999949,
			"second_score":	138679
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2518,
			"primary_score":	999950,
			"second_score":	138677
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2525,
			"primary_score":	999861,
			"second_score":	147696
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2526,
			"primary_score":	999861,
			"second_score":	147695
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2536,
			"primary_score":	999861,
			"second_score":	147694
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2540,
			"primary_score":	999861,
			"second_score":	147693
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2585,
			"primary_score":	999861,
			"second_score":	136138
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2586,
			"primary_score":	999861,
			"second_score":	136137
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2591,
			"primary_score":	999861,
			"second_score":	136136
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2592,
			"primary_score":	999861,
			"second_score":	136135
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2601,
			"primary_score":	999861,
			"second_score":	128748
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2602,
			"primary_score":	999861,
			"second_score":	128747
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2603,
			"primary_score":	999861,
			"second_score":	137564
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2604,
			"primary_score":	999861,
			"second_score":	137563
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2607,
			"primary_score":	999861,
			"second_score":	128746
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2608,
			"primary_score":	999861,
			"second_score":	128745
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2609,
			"primary_score":	999910,
			"second_score":	121637
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2617,
			"primary_score":	999963,
			"second_score":	144375
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2618,
			"primary_score":	999963,
			"second_score":	144374
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2621,
			"primary_score":	999984,
			"second_score":	144373
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2622,
			"primary_score":	999984,
			"second_score":	144372
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2626,
			"primary_score":	999861,
			"second_score":	134479
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2628,
			"primary_score":	999861,
			"second_score":	134478
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2629,
			"primary_score":	999861,
			"second_score":	134477
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2634,
			"primary_score":	999861,
			"second_score":	134105
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2635,
			"primary_score":	999861,
			"second_score":	134104
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2636,
			"primary_score":	999861,
			"second_score":	134103
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2639,
			"primary_score":	999861,
			"second_score":	134098
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2641,
			"primary_score":	999861,
			"second_score":	134097
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2642,
			"primary_score":	999861,
			"second_score":	134096
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2643,
			"primary_score":	999861,
			"second_score":	134095
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2644,
			"primary_score":	999861,
			"second_score":	134094
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2645,
			"primary_score":	999861,
			"second_score":	134093
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2646,
			"primary_score":	999861,
			"second_score":	134088
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2651,
			"primary_score":	999861,
			"second_score":	127321
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2652,
			"primary_score":	999861,
			"second_score":	127320
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2653,
			"primary_score":	999861,
			"second_score":	127319
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2666,
			"primary_score":	999959,
			"second_score":	147796
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2667,
			"primary_score":	999959,
			"second_score":	147795
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2677,
			"primary_score":	999969,
			"second_score":	147794
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2681,
			"primary_score":	999974,
			"second_score":	147792
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2688,
			"primary_score":	999884,
			"second_score":	134670
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2689,
			"primary_score":	999884,
			"second_score":	134669
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2690,
			"primary_score":	999884,
			"second_score":	134668
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2694,
			"primary_score":	999861,
			"second_score":	135782
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2695,
			"primary_score":	999861,
			"second_score":	135781
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2696,
			"primary_score":	999861,
			"second_score":	135780
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2697,
			"primary_score":	999861,
			"second_score":	135779
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2698,
			"primary_score":	999861,
			"second_score":	135778
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2699,
			"primary_score":	999933,
			"second_score":	138604
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2700,
			"primary_score":	999961,
			"second_score":	138602
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2703,
			"primary_score":	999861,
			"second_score":	135777
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2719,
			"primary_score":	999861,
			"second_score":	134500
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2720,
			"primary_score":	999861,
			"second_score":	131880
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2725,
			"primary_score":	999861,
			"second_score":	131879
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2726,
			"primary_score":	999861,
			"second_score":	131878
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2727,
			"primary_score":	999861,
			"second_score":	131877
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2730,
			"primary_score":	999861,
			"second_score":	134799
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2731,
			"primary_score":	999861,
			"second_score":	134798
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2732,
			"primary_score":	999861,
			"second_score":	134797
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2768,
			"primary_score":	999893,
			"second_score":	137114
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2769,
			"primary_score":	999896,
			"second_score":	138853
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2770,
			"primary_score":	999951,
			"second_score":	137112
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2771,
			"primary_score":	999960,
			"second_score":	137111
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2813,
			"primary_score":	999868,
			"second_score":	123897
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2814,
			"primary_score":	999868,
			"second_score":	123896
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2815,
			"primary_score":	999869,
			"second_score":	123895
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2891,
			"primary_score":	999896,
			"second_score":	135718
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2892,
			"primary_score":	999896,
			"second_score":	135717
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2898,
			"primary_score":	999896,
			"second_score":	135716
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2899,
			"primary_score":	999896,
			"second_score":	135715
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2905,
			"primary_score":	999861,
			"second_score":	134481
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2906,
			"primary_score":	999861,
			"second_score":	134480
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2909,
			"primary_score":	999861,
			"second_score":	134069
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2910,
			"primary_score":	999861,
			"second_score":	134068
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2911,
			"primary_score":	999861,
			"second_score":	130331
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2958,
			"primary_score":	999926,
			"second_score":	137013
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2960,
			"primary_score":	999926,
			"second_score":	137012
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2961,
			"primary_score":	999926,
			"second_score":	137011
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2962,
			"primary_score":	999926,
			"second_score":	137010
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2977,
			"primary_score":	999926,
			"second_score":	137009
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2978,
			"primary_score":	999926,
			"second_score":	137008
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2983,
			"primary_score":	999937,
			"second_score":	137019
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2984,
			"primary_score":	999937,
			"second_score":	137018
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2985,
			"primary_score":	999937,
			"second_score":	137017
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2986,
			"primary_score":	999939,
			"second_score":	137016
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2987,
			"primary_score":	999968,
			"second_score":	137014
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2990,
			"primary_score":	999994,
			"second_score":	143344
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2991,
			"primary_score":	999994,
			"second_score":	143343
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3000,
			"primary_score":	999861,
			"second_score":	139163
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3001,
			"primary_score":	999861,
			"second_score":	139162
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3045,
			"primary_score":	999861,
			"second_score":	137361
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3046,
			"primary_score":	999861,
			"second_score":	137360
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3048,
			"primary_score":	999861,
			"second_score":	137359
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3050,
			"primary_score":	999861,
			"second_score":	137358
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3051,
			"primary_score":	999861,
			"second_score":	137357
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3052,
			"primary_score":	999861,
			"second_score":	137356
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3053,
			"primary_score":	999861,
			"second_score":	137355
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3055,
			"primary_score":	999861,
			"second_score":	137354
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3056,
			"primary_score":	999861,
			"second_score":	137344
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3057,
			"primary_score":	999861,
			"second_score":	137343
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3058,
			"primary_score":	999861,
			"second_score":	137342
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3059,
			"primary_score":	999861,
			"second_score":	137341
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3061,
			"primary_score":	999861,
			"second_score":	137340
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3062,
			"primary_score":	999861,
			"second_score":	137345
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3075,
			"primary_score":	999861,
			"second_score":	137339
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3076,
			"primary_score":	999861,
			"second_score":	137311
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3077,
			"primary_score":	999861,
			"second_score":	137310
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3080,
			"primary_score":	999861,
			"second_score":	137309
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3081,
			"primary_score":	999861,
			"second_score":	137308
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3082,
			"primary_score":	999861,
			"second_score":	137307
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3083,
			"primary_score":	999861,
			"second_score":	137298
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3098,
			"primary_score":	999861,
			"second_score":	137297
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3101,
			"primary_score":	999861,
			"second_score":	137296
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3104,
			"primary_score":	999861,
			"second_score":	137295
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3106,
			"primary_score":	999861,
			"second_score":	137294
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3108,
			"primary_score":	999861,
			"second_score":	137293
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3115,
			"primary_score":	999861,
			"second_score":	137292
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3120,
			"primary_score":	999861,
			"second_score":	136739
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3121,
			"primary_score":	999861,
			"second_score":	136738
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3123,
			"primary_score":	999861,
			"second_score":	136737
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3125,
			"primary_score":	999861,
			"second_score":	136736
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3126,
			"primary_score":	999861,
			"second_score":	136735
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3128,
			"primary_score":	999861,
			"second_score":	136734
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3129,
			"primary_score":	999861,
			"second_score":	136732
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3132,
			"primary_score":	999861,
			"second_score":	136731
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3133,
			"primary_score":	999861,
			"second_score":	136603
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3146,
			"primary_score":	999861,
			"second_score":	129524
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3149,
			"primary_score":	999861,
			"second_score":	129523
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3179,
			"primary_score":	999861,
			"second_score":	119688
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3180,
			"primary_score":	999861,
			"second_score":	119687
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3181,
			"primary_score":	999861,
			"second_score":	119686
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3183,
			"primary_score":	999861,
			"second_score":	119685
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3184,
			"primary_score":	999861,
			"second_score":	119684
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3185,
			"primary_score":	999861,
			"second_score":	119683
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3194,
			"primary_score":	999861,
			"second_score":	135979
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3195,
			"primary_score":	999861,
			"second_score":	135978
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3196,
			"primary_score":	999861,
			"second_score":	135975
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3197,
			"primary_score":	999861,
			"second_score":	135974
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3199,
			"primary_score":	999861,
			"second_score":	135973
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3200,
			"primary_score":	999861,
			"second_score":	135980
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3202,
			"primary_score":	999861,
			"second_score":	135972
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3255,
			"primary_score":	999861,
			"second_score":	131865
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3256,
			"primary_score":	999861,
			"second_score":	131864
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3257,
			"primary_score":	999861,
			"second_score":	131863
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3258,
			"primary_score":	999861,
			"second_score":	131862
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3261,
			"primary_score":	999861,
			"second_score":	131861
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3333,
			"primary_score":	999861,
			"second_score":	134066
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3334,
			"primary_score":	999861,
			"second_score":	134065
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3335,
			"primary_score":	999861,
			"second_score":	134064
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3336,
			"primary_score":	999861,
			"second_score":	134063
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3338,
			"primary_score":	999861,
			"second_score":	134062
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3340,
			"primary_score":	999861,
			"second_score":	134061
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3341,
			"primary_score":	999861,
			"second_score":	134060
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3342,
			"primary_score":	999861,
			"second_score":	134059
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3343,
			"primary_score":	999861,
			"second_score":	134058
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3344,
			"primary_score":	999861,
			"second_score":	134057
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3345,
			"primary_score":	999861,
			"second_score":	134056
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3350,
			"primary_score":	999861,
			"second_score":	132638
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3351,
			"primary_score":	999861,
			"second_score":	132637
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3359,
			"primary_score":	999896,
			"second_score":	135713
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3360,
			"primary_score":	999896,
			"second_score":	135712
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3361,
			"primary_score":	999896,
			"second_score":	135709
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3362,
			"primary_score":	999896,
			"second_score":	135708
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3363,
			"primary_score":	999896,
			"second_score":	135707
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3364,
			"primary_score":	999896,
			"second_score":	135706
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3365,
			"primary_score":	999999,
			"second_score":	138048
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3367,
			"primary_score":	999994,
			"second_score":	145448
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3371,
			"primary_score":	999903,
			"second_score":	138060
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3372,
			"primary_score":	999939,
			"second_score":	138089
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3374,
			"primary_score":	999903,
			"second_score":	138059
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3378,
			"primary_score":	999896,
			"second_score":	135704
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3380,
			"primary_score":	999896,
			"second_score":	135703
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3382,
			"primary_score":	999896,
			"second_score":	135702
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3383,
			"primary_score":	999896,
			"second_score":	135701
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3384,
			"primary_score":	999896,
			"second_score":	135670
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3385,
			"primary_score":	999896,
			"second_score":	135669
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4190,
			"primary_score":	999960,
			"second_score":	137109
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4191,
			"primary_score":	999960,
			"second_score":	137108
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4192,
			"primary_score":	999960,
			"second_score":	137107
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4194,
			"primary_score":	999960,
			"second_score":	137106
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4195,
			"primary_score":	999960,
			"second_score":	137105
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4739,
			"primary_score":	999861,
			"second_score":	131876
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4772,
			"primary_score":	999861,
			"second_score":	131875
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4773,
			"primary_score":	999861,
			"second_score":	131874
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4778,
			"primary_score":	999861,
			"second_score":	131873
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4782,
			"primary_score":	999861,
			"second_score":	131872
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4783,
			"primary_score":	999861,
			"second_score":	131871
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4784,
			"primary_score":	999861,
			"second_score":	131870
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4870,
			"primary_score":	999861,
			"second_score":	131869
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4871,
			"primary_score":	999861,
			"second_score":	131868
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4872,
			"primary_score":	999861,
			"second_score":	131867
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4873,
			"primary_score":	999861,
			"second_score":	131866
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5273,
			"primary_score":	999884,
			"second_score":	134666
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5274,
			"primary_score":	999884,
			"second_score":	134665
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5275,
			"primary_score":	999884,
			"second_score":	134664
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5276,
			"primary_score":	999885,
			"second_score":	134663
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5278,
			"primary_score":	999885,
			"second_score":	134662
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5279,
			"primary_score":	999885,
			"second_score":	134661
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5280,
			"primary_score":	999885,
			"second_score":	134660
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5297,
			"primary_score":	999974,
			"second_score":	147791
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5298,
			"primary_score":	999974,
			"second_score":	147790
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5299,
			"primary_score":	999974,
			"second_score":	147789
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5410,
			"primary_score":	999974,
			"second_score":	147787
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5411,
			"primary_score":	999974,
			"second_score":	147786
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5414,
			"primary_score":	999974,
			"second_score":	147785
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5415,
			"primary_score":	999974,
			"second_score":	147784
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5417,
			"primary_score":	999974,
			"second_score":	147783
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5418,
			"primary_score":	999974,
			"second_score":	147782
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5476,
			"primary_score":	999865,
			"second_score":	137409
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5477,
			"primary_score":	999865,
			"second_score":	137408
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5478,
			"primary_score":	999865,
			"second_score":	137405
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5479,
			"primary_score":	999865,
			"second_score":	137404
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5481,
			"primary_score":	999861,
			"second_score":	134102
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5482,
			"primary_score":	999867,
			"second_score":	139263
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5483,
			"primary_score":	999868,
			"second_score":	139262
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5486,
			"primary_score":	999861,
			"second_score":	134101
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5487,
			"primary_score":	999916,
			"second_score":	137410
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5488,
			"primary_score":	999861,
			"second_score":	134099
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5512,
			"primary_score":	999984,
			"second_score":	144370
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5513,
			"primary_score":	999984,
			"second_score":	144369
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5514,
			"primary_score":	999984,
			"second_score":	144368
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5516,
			"primary_score":	999984,
			"second_score":	144367
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5517,
			"primary_score":	999984,
			"second_score":	144366
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5518,
			"primary_score":	999984,
			"second_score":	144338
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5523,
			"primary_score":	999910,
			"second_score":	121636
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5524,
			"primary_score":	999910,
			"second_score":	121635
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5529,
			"primary_score":	999910,
			"second_score":	121634
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5530,
			"primary_score":	999910,
			"second_score":	121633
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5531,
			"primary_score":	999910,
			"second_score":	121632
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5572,
			"primary_score":	999910,
			"second_score":	121631
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5573,
			"primary_score":	999910,
			"second_score":	121630
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5578,
			"primary_score":	999910,
			"second_score":	121629
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5579,
			"primary_score":	999910,
			"second_score":	121628
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5580,
			"primary_score":	999910,
			"second_score":	121627
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5631,
			"primary_score":	999910,
			"second_score":	121626
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5632,
			"primary_score":	999910,
			"second_score":	121625
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5633,
			"primary_score":	999910,
			"second_score":	121624
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5665,
			"primary_score":	999910,
			"second_score":	121622
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5666,
			"primary_score":	999910,
			"second_score":	121621
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5669,
			"primary_score":	999914,
			"second_score":	121620
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5670,
			"primary_score":	999914,
			"second_score":	121619
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5672,
			"primary_score":	999914,
			"second_score":	121618
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5673,
			"primary_score":	999914,
			"second_score":	121617
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6045,
			"primary_score":	999861,
			"second_score":	147691
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6046,
			"primary_score":	999861,
			"second_score":	147690
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6051,
			"primary_score":	999861,
			"second_score":	147689
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6055,
			"primary_score":	999861,
			"second_score":	147688
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6056,
			"primary_score":	999992,
			"second_score":	147687
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6100,
			"primary_score":	999861,
			"second_score":	130048
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6101,
			"primary_score":	999861,
			"second_score":	130047
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6102,
			"primary_score":	999861,
			"second_score":	130046
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6248,
			"primary_score":	999950,
			"second_score":	138676
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6249,
			"primary_score":	999950,
			"second_score":	138675
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6250,
			"primary_score":	999950,
			"second_score":	138674
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6267,
			"primary_score":	999950,
			"second_score":	138672
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6268,
			"primary_score":	999950,
			"second_score":	138671
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6269,
			"primary_score":	999950,
			"second_score":	138670
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6270,
			"primary_score":	999950,
			"second_score":	138669
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6272,
			"primary_score":	999950,
			"second_score":	138668
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6273,
			"primary_score":	999950,
			"second_score":	138667
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6274,
			"primary_score":	999950,
			"second_score":	138666
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6275,
			"primary_score":	999950,
			"second_score":	138665
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6277,
			"primary_score":	999950,
			"second_score":	138664
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6278,
			"primary_score":	999950,
			"second_score":	138663
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6281,
			"primary_score":	999950,
			"second_score":	138662
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6282,
			"primary_score":	999950,
			"second_score":	138661
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6284,
			"primary_score":	999950,
			"second_score":	138660
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6285,
			"primary_score":	999950,
			"second_score":	138659
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6369,
			"primary_score":	999868,
			"second_score":	124079
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6370,
			"primary_score":	999868,
			"second_score":	124078
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6373,
			"primary_score":	999868,
			"second_score":	124077
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6374,
			"primary_score":	999868,
			"second_score":	124076
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6376,
			"primary_score":	999868,
			"second_score":	124075
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6377,
			"primary_score":	999868,
			"second_score":	124074
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6842,
			"primary_score":	999861,
			"second_score":	134955
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6843,
			"primary_score":	999861,
			"second_score":	134954
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6853,
			"primary_score":	999861,
			"second_score":	134953
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6854,
			"primary_score":	999861,
			"second_score":	134952
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6876,
			"primary_score":	999861,
			"second_score":	134950
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6877,
			"primary_score":	999861,
			"second_score":	134949
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6878,
			"primary_score":	999861,
			"second_score":	134948
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6989,
			"primary_score":	999861,
			"second_score":	134946
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6990,
			"primary_score":	999861,
			"second_score":	134945
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6991,
			"primary_score":	999861,
			"second_score":	134944
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6992,
			"primary_score":	999861,
			"second_score":	134943
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7379,
			"primary_score":	999861,
			"second_score":	131802
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7380,
			"primary_score":	999861,
			"second_score":	131801
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7381,
			"primary_score":	999861,
			"second_score":	131800
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7382,
			"primary_score":	999861,
			"second_score":	131799
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7384,
			"primary_score":	999861,
			"second_score":	131798
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7385,
			"primary_score":	999861,
			"second_score":	131797
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7386,
			"primary_score":	999861,
			"second_score":	131796
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7387,
			"primary_score":	999861,
			"second_score":	131795
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7389,
			"primary_score":	999861,
			"second_score":	131794
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7390,
			"primary_score":	999861,
			"second_score":	131793
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7391,
			"primary_score":	999861,
			"second_score":	131792
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7392,
			"primary_score":	999861,
			"second_score":	131791
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7394,
			"primary_score":	999861,
			"second_score":	131790
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7395,
			"primary_score":	999861,
			"second_score":	131789
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7396,
			"primary_score":	999861,
			"second_score":	131788
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7397,
			"primary_score":	999861,
			"second_score":	131787
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7399,
			"primary_score":	999861,
			"second_score":	131786
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7400,
			"primary_score":	999861,
			"second_score":	131785
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7401,
			"primary_score":	999861,
			"second_score":	131784
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7402,
			"primary_score":	999861,
			"second_score":	131783
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7404,
			"primary_score":	999861,
			"second_score":	131782
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7405,
			"primary_score":	999861,
			"second_score":	131781
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7406,
			"primary_score":	999861,
			"second_score":	131780
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7407,
			"primary_score":	999861,
			"second_score":	131779
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7409,
			"primary_score":	999861,
			"second_score":	131778
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7410,
			"primary_score":	999861,
			"second_score":	131777
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7411,
			"primary_score":	999861,
			"second_score":	131776
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7658,
			"primary_score":	999861,
			"second_score":	143111
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7659,
			"primary_score":	999861,
			"second_score":	143110
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7660,
			"primary_score":	999861,
			"second_score":	143109
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7688,
			"primary_score":	999869,
			"second_score":	123839
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7689,
			"primary_score":	999869,
			"second_score":	123838
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7694,
			"primary_score":	999869,
			"second_score":	123837
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7697,
			"primary_score":	999869,
			"second_score":	123836
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7709,
			"primary_score":	999869,
			"second_score":	123834
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7710,
			"primary_score":	999869,
			"second_score":	123833
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7711,
			"primary_score":	999869,
			"second_score":	123832
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7712,
			"primary_score":	999869,
			"second_score":	123831
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7714,
			"primary_score":	999869,
			"second_score":	123830
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7715,
			"primary_score":	999869,
			"second_score":	123829
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7716,
			"primary_score":	999869,
			"second_score":	123828
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7717,
			"primary_score":	999869,
			"second_score":	123827
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7719,
			"primary_score":	999869,
			"second_score":	123826
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7720,
			"primary_score":	999869,
			"second_score":	123825
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7721,
			"primary_score":	999869,
			"second_score":	123824
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8066,
			"primary_score":	999861,
			"second_score":	143107
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8067,
			"primary_score":	999861,
			"second_score":	143106
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8068,
			"primary_score":	999861,
			"second_score":	143105
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8069,
			"primary_score":	999861,
			"second_score":	143104
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8071,
			"primary_score":	999861,
			"second_score":	143103
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8072,
			"primary_score":	999861,
			"second_score":	143102
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8075,
			"primary_score":	999861,
			"second_score":	143101
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8076,
			"primary_score":	999861,
			"second_score":	143100
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8078,
			"primary_score":	999861,
			"second_score":	143099
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8079,
			"primary_score":	999861,
			"second_score":	143098
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8086,
			"primary_score":	999984,
			"second_score":	144194
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8120,
			"primary_score":	999984,
			"second_score":	144193
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8121,
			"primary_score":	999984,
			"second_score":	144192
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8122,
			"primary_score":	999984,
			"second_score":	144189
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8123,
			"primary_score":	999984,
			"second_score":	144188
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8134,
			"primary_score":	999984,
			"second_score":	144187
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8140,
			"primary_score":	999985,
			"second_score":	144186
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8141,
			"primary_score":	999985,
			"second_score":	144185
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8179,
			"primary_score":	999984,
			"second_score":	144183
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8180,
			"primary_score":	999984,
			"second_score":	144182
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8181,
			"primary_score":	999984,
			"second_score":	144181
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8184,
			"primary_score":	999984,
			"second_score":	144162
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8186,
			"primary_score":	999984,
			"second_score":	144161
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8187,
			"primary_score":	999984,
			"second_score":	144160
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8188,
			"primary_score":	999984,
			"second_score":	144131
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8189,
			"primary_score":	999984,
			"second_score":	144100
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8190,
			"primary_score":	999984,
			"second_score":	144099
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8199,
			"primary_score":	999984,
			"second_score":	144170
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8200,
			"primary_score":	999984,
			"second_score":	144169
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8201,
			"primary_score":	999984,
			"second_score":	144166
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8202,
			"primary_score":	999984,
			"second_score":	144165
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8204,
			"primary_score":	999984,
			"second_score":	144164
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8205,
			"primary_score":	999984,
			"second_score":	144171
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8207,
			"primary_score":	999984,
			"second_score":	144163
		}, {
			"file":	"Zend/zend_list.c",
			"line":	52,
			"primary_score":	999861,
			"second_score":	114052
		}, {
			"file":	"Zend/zend_list.c",
			"line":	54,
			"primary_score":	999861,
			"second_score":	114051
		}, {
			"file":	"Zend/zend_list.c",
			"line":	56,
			"primary_score":	999861,
			"second_score":	114041
		}, {
			"file":	"Zend/zend_list.c",
			"line":	57,
			"primary_score":	999861,
			"second_score":	114040
		}, {
			"file":	"Zend/zend_list.c",
			"line":	170,
			"primary_score":	999861,
			"second_score":	114018
		}, {
			"file":	"Zend/zend_list.c",
			"line":	171,
			"primary_score":	999861,
			"second_score":	114017
		}, {
			"file":	"Zend/zend_list.c",
			"line":	172,
			"primary_score":	999861,
			"second_score":	114016
		}, {
			"file":	"Zend/zend_list.c",
			"line":	174,
			"primary_score":	999861,
			"second_score":	114015
		}, {
			"file":	"Zend/zend_list.c",
			"line":	175,
			"primary_score":	999861,
			"second_score":	114005
		}, {
			"file":	"Zend/zend_list.c",
			"line":	183,
			"primary_score":	999861,
			"second_score":	114004
		}, {
			"file":	"Zend/zend_list.c",
			"line":	185,
			"primary_score":	999861,
			"second_score":	113895
		}, {
			"file":	"Zend/zend_list.c",
			"line":	239,
			"primary_score":	999861,
			"second_score":	103517
		}, {
			"file":	"Zend/zend_list.c",
			"line":	347,
			"primary_score":	999861,
			"second_score":	6223
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	28,
			"primary_score":	999861,
			"second_score":	147721
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	29,
			"primary_score":	999861,
			"second_score":	147720
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	30,
			"primary_score":	999861,
			"second_score":	147719
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	31,
			"primary_score":	999861,
			"second_score":	147718
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	32,
			"primary_score":	999861,
			"second_score":	147717
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	33,
			"primary_score":	999861,
			"second_score":	147716
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	39,
			"primary_score":	999861,
			"second_score":	144240
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	41,
			"primary_score":	999861,
			"second_score":	144136
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	42,
			"primary_score":	999861,
			"second_score":	144135
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	43,
			"primary_score":	999861,
			"second_score":	144134
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	46,
			"primary_score":	999861,
			"second_score":	144133
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	48,
			"primary_score":	999861,
			"second_score":	144132
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	49,
			"primary_score":	999861,
			"second_score":	144131
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	51,
			"primary_score":	999861,
			"second_score":	144130
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	93,
			"primary_score":	999861,
			"second_score":	133408
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	94,
			"primary_score":	999861,
			"second_score":	133407
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	96,
			"primary_score":	999861,
			"second_score":	133406
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	97,
			"primary_score":	999861,
			"second_score":	133405
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	98,
			"primary_score":	999861,
			"second_score":	133404
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	99,
			"primary_score":	999861,
			"second_score":	133401
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	100,
			"primary_score":	999861,
			"second_score":	133334
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	109,
			"primary_score":	999861,
			"second_score":	3144
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	111,
			"primary_score":	999861,
			"second_score":	3143
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	112,
			"primary_score":	999867,
			"second_score":	143127
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	113,
			"primary_score":	999867,
			"second_score":	143126
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	116,
			"primary_score":	999867,
			"second_score":	143125
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	117,
			"primary_score":	999867,
			"second_score":	143106
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	120,
			"primary_score":	999861,
			"second_score":	3142
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	126,
			"primary_score":	999861,
			"second_score":	120152
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	127,
			"primary_score":	999861,
			"second_score":	120148
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	190,
			"primary_score":	999861,
			"second_score":	14747
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	192,
			"primary_score":	999861,
			"second_score":	14746
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	233,
			"primary_score":	999861,
			"second_score":	120200
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	235,
			"primary_score":	999861,
			"second_score":	120199
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	275,
			"primary_score":	999861,
			"second_score":	165096
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	277,
			"primary_score":	999861,
			"second_score":	165095
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	278,
			"primary_score":	999861,
			"second_score":	165094
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	279,
			"primary_score":	999861,
			"second_score":	165093
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	57,
			"primary_score":	999987,
			"second_score":	126050
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	58,
			"primary_score":	999987,
			"second_score":	126049
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	59,
			"primary_score":	999987,
			"second_score":	126048
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	60,
			"primary_score":	999987,
			"second_score":	126047
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	62,
			"primary_score":	999987,
			"second_score":	126046
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	63,
			"primary_score":	999987,
			"second_score":	125965
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	64,
			"primary_score":	999987,
			"second_score":	125947
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	96,
			"primary_score":	999989,
			"second_score":	125013
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	97,
			"primary_score":	999989,
			"second_score":	125012
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	98,
			"primary_score":	999989,
			"second_score":	125011
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	101,
			"primary_score":	999989,
			"second_score":	125010
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	239,
			"primary_score":	999987,
			"second_score":	125518
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	240,
			"primary_score":	999987,
			"second_score":	125517
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	241,
			"primary_score":	999987,
			"second_score":	125516
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	242,
			"primary_score":	999987,
			"second_score":	125515
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	244,
			"primary_score":	999987,
			"second_score":	125514
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	248,
			"primary_score":	999987,
			"second_score":	125513
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	258,
			"primary_score":	999987,
			"second_score":	125512
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	259,
			"primary_score":	999987,
			"second_score":	125511
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	260,
			"primary_score":	999987,
			"second_score":	125510
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	287,
			"primary_score":	999988,
			"second_score":	125501
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	296,
			"primary_score":	999988,
			"second_score":	125500
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	310,
			"primary_score":	999988,
			"second_score":	125499
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	311,
			"primary_score":	999988,
			"second_score":	125498
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	312,
			"primary_score":	999988,
			"second_score":	125497
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	313,
			"primary_score":	999988,
			"second_score":	125496
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	314,
			"primary_score":	999988,
			"second_score":	125495
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	315,
			"primary_score":	999988,
			"second_score":	125494
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	316,
			"primary_score":	999988,
			"second_score":	125493
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	318,
			"primary_score":	999988,
			"second_score":	125492
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	477,
			"primary_score":	999988,
			"second_score":	125525
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	478,
			"primary_score":	999988,
			"second_score":	125524
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	479,
			"primary_score":	999988,
			"second_score":	125523
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	480,
			"primary_score":	999988,
			"second_score":	125522
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	482,
			"primary_score":	999988,
			"second_score":	125521
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	484,
			"primary_score":	999988,
			"second_score":	125520
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	494,
			"primary_score":	999988,
			"second_score":	125519
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	496,
			"primary_score":	999988,
			"second_score":	125491
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	531,
			"primary_score":	999989,
			"second_score":	125482
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	533,
			"primary_score":	999989,
			"second_score":	125481
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	546,
			"primary_score":	999989,
			"second_score":	125480
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	548,
			"primary_score":	999989,
			"second_score":	125479
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	549,
			"primary_score":	999989,
			"second_score":	125477
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	552,
			"primary_score":	999989,
			"second_score":	125475
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	562,
			"primary_score":	999989,
			"second_score":	125474
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	563,
			"primary_score":	999989,
			"second_score":	126051
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	565,
			"primary_score":	999989,
			"second_score":	125473
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	578,
			"primary_score":	999988,
			"second_score":	125328
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1251,
			"primary_score":	999974,
			"second_score":	126367
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1252,
			"primary_score":	999974,
			"second_score":	126366
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1254,
			"primary_score":	999974,
			"second_score":	126365
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1282,
			"primary_score":	999974,
			"second_score":	126364
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1431,
			"primary_score":	999974,
			"second_score":	125029
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1432,
			"primary_score":	999974,
			"second_score":	125028
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1434,
			"primary_score":	999974,
			"second_score":	125027
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	39,
			"primary_score":	999965,
			"second_score":	119711
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	43,
			"primary_score":	999965,
			"second_score":	119710
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	44,
			"primary_score":	999987,
			"second_score":	119709
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	45,
			"primary_score":	999987,
			"second_score":	119605
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	46,
			"primary_score":	999987,
			"second_score":	119586
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	63,
			"primary_score":	999971,
			"second_score":	119736
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	65,
			"primary_score":	999971,
			"second_score":	119735
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	137,
			"primary_score":	999977,
			"second_score":	119712
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	138,
			"primary_score":	999977,
			"second_score":	119585
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	143,
			"primary_score":	999977,
			"second_score":	126422
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	145,
			"primary_score":	999977,
			"second_score":	126421
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	146,
			"primary_score":	999977,
			"second_score":	126399
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	147,
			"primary_score":	999977,
			"second_score":	126398
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	148,
			"primary_score":	999977,
			"second_score":	126397
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	149,
			"primary_score":	999977,
			"second_score":	126396
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	150,
			"primary_score":	999977,
			"second_score":	126395
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	151,
			"primary_score":	999977,
			"second_score":	126378
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	152,
			"primary_score":	999977,
			"second_score":	126377
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	41,
			"primary_score":	999861,
			"second_score":	113725
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	42,
			"primary_score":	999861,
			"second_score":	113659
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	47,
			"primary_score":	999861,
			"second_score":	119370
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	49,
			"primary_score":	999861,
			"second_score":	119369
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	50,
			"primary_score":	999965,
			"second_score":	119367
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	82,
			"primary_score":	999861,
			"second_score":	114619
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	84,
			"primary_score":	999861,
			"second_score":	114618
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	85,
			"primary_score":	999965,
			"second_score":	114613
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	104,
			"primary_score":	999965,
			"second_score":	126394
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	105,
			"primary_score":	999965,
			"second_score":	126393
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	107,
			"primary_score":	999965,
			"second_score":	126392
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	111,
			"primary_score":	999965,
			"second_score":	126391
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	115,
			"primary_score":	999965,
			"second_score":	126390
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	117,
			"primary_score":	999965,
			"second_score":	126389
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	118,
			"primary_score":	999965,
			"second_score":	126388
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	119,
			"primary_score":	999965,
			"second_score":	126387
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	121,
			"primary_score":	999965,
			"second_score":	126386
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	122,
			"primary_score":	999965,
			"second_score":	126385
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	123,
			"primary_score":	999965,
			"second_score":	126384
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	124,
			"primary_score":	999965,
			"second_score":	126383
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	125,
			"primary_score":	999965,
			"second_score":	126382
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	126,
			"primary_score":	999965,
			"second_score":	126381
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	127,
			"primary_score":	999965,
			"second_score":	126380
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	132,
			"primary_score":	999965,
			"second_score":	126379
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	167,
			"primary_score":	999971,
			"second_score":	119759
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	169,
			"primary_score":	999971,
			"second_score":	119758
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	171,
			"primary_score":	999971,
			"second_score":	119757
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	172,
			"primary_score":	999971,
			"second_score":	119755
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	173,
			"primary_score":	999971,
			"second_score":	119558
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	175,
			"primary_score":	999971,
			"second_score":	119556
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	183,
			"primary_score":	999971,
			"second_score":	119754
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	184,
			"primary_score":	999971,
			"second_score":	119753
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	186,
			"primary_score":	999971,
			"second_score":	119752
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	190,
			"primary_score":	999971,
			"second_score":	119751
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	196,
			"primary_score":	999971,
			"second_score":	119750
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	197,
			"primary_score":	999972,
			"second_score":	119749
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	198,
			"primary_score":	999972,
			"second_score":	119748
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	199,
			"primary_score":	999977,
			"second_score":	119747
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	201,
			"primary_score":	999977,
			"second_score":	119746
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	202,
			"primary_score":	999977,
			"second_score":	119745
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	203,
			"primary_score":	999977,
			"second_score":	119744
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	205,
			"primary_score":	999977,
			"second_score":	119743
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	206,
			"primary_score":	999977,
			"second_score":	119737
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	209,
			"primary_score":	999977,
			"second_score":	119734
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	214,
			"primary_score":	999972,
			"second_score":	119732
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	216,
			"primary_score":	999972,
			"second_score":	119731
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	217,
			"primary_score":	999975,
			"second_score":	119728
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	218,
			"primary_score":	999972,
			"second_score":	119720
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	219,
			"primary_score":	999972,
			"second_score":	119719
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	220,
			"primary_score":	999972,
			"second_score":	119713
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	223,
			"primary_score":	999972,
			"second_score":	119566
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	225,
			"primary_score":	999972,
			"second_score":	119562
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	230,
			"primary_score":	999971,
			"second_score":	119560
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	239,
			"primary_score":	999971,
			"second_score":	119559
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	48,
			"primary_score":	999861,
			"second_score":	164355
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	53,
			"primary_score":	999861,
			"second_score":	164465
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	55,
			"primary_score":	999861,
			"second_score":	164464
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	62,
			"primary_score":	999861,
			"second_score":	164463
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	63,
			"primary_score":	999861,
			"second_score":	164359
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	64,
			"primary_score":	999861,
			"second_score":	164358
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	65,
			"primary_score":	999861,
			"second_score":	164357
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	66,
			"primary_score":	999861,
			"second_score":	164356
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	68,
			"primary_score":	999861,
			"second_score":	164250
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	69,
			"primary_score":	999861,
			"second_score":	164249
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	71,
			"primary_score":	999861,
			"second_score":	164248
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	73,
			"primary_score":	999861,
			"second_score":	164247
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	74,
			"primary_score":	999861,
			"second_score":	164246
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	75,
			"primary_score":	999861,
			"second_score":	164244
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	76,
			"primary_score":	999861,
			"second_score":	164243
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	78,
			"primary_score":	999861,
			"second_score":	164242
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	79,
			"primary_score":	999861,
			"second_score":	164241
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	80,
			"primary_score":	999861,
			"second_score":	164240
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	82,
			"primary_score":	999861,
			"second_score":	164239
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	84,
			"primary_score":	999861,
			"second_score":	164238
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	85,
			"primary_score":	999861,
			"second_score":	164237
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	86,
			"primary_score":	999861,
			"second_score":	164236
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	88,
			"primary_score":	999861,
			"second_score":	164235
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	89,
			"primary_score":	999861,
			"second_score":	164234
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	91,
			"primary_score":	999861,
			"second_score":	164233
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	93,
			"primary_score":	999861,
			"second_score":	164232
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	95,
			"primary_score":	999861,
			"second_score":	164231
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	97,
			"primary_score":	999861,
			"second_score":	164230
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	98,
			"primary_score":	999861,
			"second_score":	164229
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	100,
			"primary_score":	999861,
			"second_score":	164228
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	101,
			"primary_score":	999861,
			"second_score":	164227
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	103,
			"primary_score":	999861,
			"second_score":	164226
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	105,
			"primary_score":	999861,
			"second_score":	164225
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	110,
			"primary_score":	999861,
			"second_score":	14836
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	122,
			"primary_score":	999861,
			"second_score":	14838
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	124,
			"primary_score":	999861,
			"second_score":	14837
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	136,
			"primary_score":	999861,
			"second_score":	114699
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	140,
			"primary_score":	999861,
			"second_score":	114698
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	197,
			"primary_score":	999861,
			"second_score":	114682
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	201,
			"primary_score":	999861,
			"second_score":	114681
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	266,
			"primary_score":	999861,
			"second_score":	15271
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	268,
			"primary_score":	999861,
			"second_score":	15270
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	271,
			"primary_score":	999861,
			"second_score":	15269
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	312,
			"primary_score":	999861,
			"second_score":	19051
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	314,
			"primary_score":	999861,
			"second_score":	19050
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	315,
			"primary_score":	999861,
			"second_score":	18987
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	316,
			"primary_score":	999861,
			"second_score":	18986
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	319,
			"primary_score":	999861,
			"second_score":	18978
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	321,
			"primary_score":	999861,
			"second_score":	15268
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	329,
			"primary_score":	999861,
			"second_score":	15267
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	330,
			"primary_score":	999861,
			"second_score":	15259
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	333,
			"primary_score":	999861,
			"second_score":	15258
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	334,
			"primary_score":	999861,
			"second_score":	14829
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	335,
			"primary_score":	999861,
			"second_score":	14821
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	336,
			"primary_score":	999861,
			"second_score":	16325
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	338,
			"primary_score":	999861,
			"second_score":	14820
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	339,
			"primary_score":	999861,
			"second_score":	14819
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	350,
			"primary_score":	999861,
			"second_score":	120609
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	351,
			"primary_score":	999861,
			"second_score":	120608
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	352,
			"primary_score":	999861,
			"second_score":	120607
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	354,
			"primary_score":	999861,
			"second_score":	120606
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	359,
			"primary_score":	999861,
			"second_score":	120605
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	360,
			"primary_score":	999861,
			"second_score":	120604
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	363,
			"primary_score":	999861,
			"second_score":	120585
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	367,
			"primary_score":	999861,
			"second_score":	120584
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	369,
			"primary_score":	999861,
			"second_score":	120565
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	370,
			"primary_score":	999902,
			"second_score":	120564
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	371,
			"primary_score":	999902,
			"second_score":	120563
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	372,
			"primary_score":	999902,
			"second_score":	120553
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	373,
			"primary_score":	999902,
			"second_score":	120552
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	375,
			"primary_score":	999902,
			"second_score":	120550
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	378,
			"primary_score":	999861,
			"second_score":	120531
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	379,
			"primary_score":	999861,
			"second_score":	120530
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	380,
			"primary_score":	999861,
			"second_score":	120529
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	381,
			"primary_score":	999861,
			"second_score":	120320
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	382,
			"primary_score":	999861,
			"second_score":	120317
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	384,
			"primary_score":	999861,
			"second_score":	120316
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	386,
			"primary_score":	999861,
			"second_score":	120251
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	388,
			"primary_score":	999861,
			"second_score":	120206
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	391,
			"primary_score":	999861,
			"second_score":	120205
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	394,
			"primary_score":	999861,
			"second_score":	120204
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	397,
			"primary_score":	999861,
			"second_score":	120203
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	400,
			"primary_score":	999861,
			"second_score":	120202
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	401,
			"primary_score":	999861,
			"second_score":	120201
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	403,
			"primary_score":	999861,
			"second_score":	120198
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	416,
			"primary_score":	999861,
			"second_score":	133785
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	417,
			"primary_score":	999861,
			"second_score":	133784
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	418,
			"primary_score":	999861,
			"second_score":	133783
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	423,
			"primary_score":	999861,
			"second_score":	133790
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	424,
			"primary_score":	999861,
			"second_score":	133789
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	426,
			"primary_score":	999861,
			"second_score":	133788
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	437,
			"primary_score":	999861,
			"second_score":	133787
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	439,
			"primary_score":	999861,
			"second_score":	133786
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	441,
			"primary_score":	999861,
			"second_score":	133782
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	446,
			"primary_score":	999861,
			"second_score":	133793
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	488,
			"primary_score":	999861,
			"second_score":	133754
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	490,
			"primary_score":	999861,
			"second_score":	133753
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	493,
			"primary_score":	999861,
			"second_score":	133752
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	496,
			"primary_score":	999861,
			"second_score":	133751
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	497,
			"primary_score":	999861,
			"second_score":	133750
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	500,
			"primary_score":	999861,
			"second_score":	133747
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	501,
			"primary_score":	999896,
			"second_score":	132317
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	502,
			"primary_score":	999896,
			"second_score":	132261
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	504,
			"primary_score":	999861,
			"second_score":	133746
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	505,
			"primary_score":	999861,
			"second_score":	133745
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	506,
			"primary_score":	999861,
			"second_score":	133686
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	508,
			"primary_score":	999861,
			"second_score":	133685
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	509,
			"primary_score":	999861,
			"second_score":	133684
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	510,
			"primary_score":	999861,
			"second_score":	133628
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	513,
			"primary_score":	999861,
			"second_score":	133627
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	514,
			"primary_score":	999861,
			"second_score":	133626
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	515,
			"primary_score":	999861,
			"second_score":	133625
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	516,
			"primary_score":	999861,
			"second_score":	133581
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	517,
			"primary_score":	999861,
			"second_score":	133580
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	519,
			"primary_score":	999861,
			"second_score":	133579
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	520,
			"primary_score":	999906,
			"second_score":	131806
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	522,
			"primary_score":	999861,
			"second_score":	133578
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	530,
			"primary_score":	999861,
			"second_score":	125463
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	537,
			"primary_score":	999861,
			"second_score":	125524
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	539,
			"primary_score":	999861,
			"second_score":	133577
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	540,
			"primary_score":	999861,
			"second_score":	133573
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	543,
			"primary_score":	999861,
			"second_score":	133572
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	544,
			"primary_score":	999861,
			"second_score":	133571
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	543,
			"primary_score":	999861,
			"second_score":	120053
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	544,
			"primary_score":	999861,
			"second_score":	120052
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	546,
			"primary_score":	999861,
			"second_score":	120051
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	558,
			"primary_score":	999861,
			"second_score":	120050
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	559,
			"primary_score":	999861,
			"second_score":	120022
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	561,
			"primary_score":	999861,
			"second_score":	120021
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	608,
			"primary_score":	999861,
			"second_score":	120020
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1014,
			"primary_score":	999869,
			"second_score":	119300
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1016,
			"primary_score":	999869,
			"second_score":	119299
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1017,
			"primary_score":	999869,
			"second_score":	119296
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1018,
			"primary_score":	999869,
			"second_score":	119292
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1892,
			"primary_score":	999861,
			"second_score":	149920
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1893,
			"primary_score":	999861,
			"second_score":	149919
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1894,
			"primary_score":	999861,
			"second_score":	149918
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1896,
			"primary_score":	999861,
			"second_score":	149917
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1897,
			"primary_score":	999861,
			"second_score":	149909
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1899,
			"primary_score":	999861,
			"second_score":	149902
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1901,
			"primary_score":	999861,
			"second_score":	149901
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1907,
			"primary_score":	999861,
			"second_score":	149942
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	78,
			"primary_score":	999861,
			"second_score":	113727
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	79,
			"primary_score":	999861,
			"second_score":	113753
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	86,
			"primary_score":	999861,
			"second_score":	114723
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	88,
			"primary_score":	999861,
			"second_score":	114722
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	96,
			"primary_score":	999861,
			"second_score":	114724
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	97,
			"primary_score":	999861,
			"second_score":	114721
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	98,
			"primary_score":	999861,
			"second_score":	114720
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	100,
			"primary_score":	999861,
			"second_score":	114719
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	104,
			"primary_score":	999861,
			"second_score":	114718
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	105,
			"primary_score":	999861,
			"second_score":	114717
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	62,
			"primary_score":	999861,
			"second_score":	133198
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	64,
			"primary_score":	999861,
			"second_score":	123106
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	65,
			"primary_score":	999861,
			"second_score":	123105
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	66,
			"primary_score":	999861,
			"second_score":	123104
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	67,
			"primary_score":	999861,
			"second_score":	123103
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	87,
			"primary_score":	999861,
			"second_score":	123074
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	88,
			"primary_score":	999861,
			"second_score":	123073
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	89,
			"primary_score":	999861,
			"second_score":	123072
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	90,
			"primary_score":	999861,
			"second_score":	123071
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	27,
			"primary_score":	999861,
			"second_score":	114738
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	28,
			"primary_score":	999861,
			"second_score":	114737
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	29,
			"primary_score":	999861,
			"second_score":	114736
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	30,
			"primary_score":	999861,
			"second_score":	114735
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	50,
			"primary_score":	999861,
			"second_score":	134358
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	51,
			"primary_score":	999861,
			"second_score":	134357
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	52,
			"primary_score":	999861,
			"second_score":	134356
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	62,
			"primary_score":	999861,
			"second_score":	134348
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	63,
			"primary_score":	999861,
			"second_score":	134347
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	65,
			"primary_score":	999861,
			"second_score":	134328
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	83,
			"primary_score":	999861,
			"second_score":	133567
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	84,
			"primary_score":	999861,
			"second_score":	133566
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	93,
			"primary_score":	999861,
			"second_score":	113497
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	95,
			"primary_score":	999861,
			"second_score":	113496
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	103,
			"primary_score":	999861,
			"second_score":	113495
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	121,
			"primary_score":	999861,
			"second_score":	133797
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	123,
			"primary_score":	999861,
			"second_score":	133796
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	130,
			"primary_score":	999861,
			"second_score":	133795
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	46,
			"primary_score":	999861,
			"second_score":	133381
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	47,
			"primary_score":	999861,
			"second_score":	133380
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	67,
			"primary_score":	999861,
			"second_score":	133390
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	68,
			"primary_score":	999861,
			"second_score":	133389
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	74,
			"primary_score":	999861,
			"second_score":	133388
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	75,
			"primary_score":	999861,
			"second_score":	133387
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	76,
			"primary_score":	999861,
			"second_score":	133386
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	77,
			"primary_score":	999861,
			"second_score":	133385
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	78,
			"primary_score":	999861,
			"second_score":	133384
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	83,
			"primary_score":	999861,
			"second_score":	133391
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	84,
			"primary_score":	999861,
			"second_score":	133383
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	85,
			"primary_score":	999861,
			"second_score":	133382
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	222,
			"primary_score":	999861,
			"second_score":	165228
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	223,
			"primary_score":	999861,
			"second_score":	165227
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	224,
			"primary_score":	999861,
			"second_score":	165226
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	225,
			"primary_score":	999861,
			"second_score":	165225
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	227,
			"primary_score":	999861,
			"second_score":	165224
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	228,
			"primary_score":	999861,
			"second_score":	165223
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	229,
			"primary_score":	999861,
			"second_score":	165222
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	231,
			"primary_score":	999861,
			"second_score":	165221
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	232,
			"primary_score":	999861,
			"second_score":	165220
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	234,
			"primary_score":	999861,
			"second_score":	165219
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	275,
			"primary_score":	999861,
			"second_score":	165218
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	276,
			"primary_score":	999861,
			"second_score":	165217
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	277,
			"primary_score":	999861,
			"second_score":	165216
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	278,
			"primary_score":	999861,
			"second_score":	165215
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	279,
			"primary_score":	999861,
			"second_score":	165214
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	281,
			"primary_score":	999861,
			"second_score":	165213
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	282,
			"primary_score":	999861,
			"second_score":	165212
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	284,
			"primary_score":	999861,
			"second_score":	165211
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	289,
			"primary_score":	999861,
			"second_score":	133393
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	299,
			"primary_score":	999861,
			"second_score":	133392
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	301,
			"primary_score":	999861,
			"second_score":	133379
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	302,
			"primary_score":	999861,
			"second_score":	133378
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	309,
			"primary_score":	999861,
			"second_score":	133377
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	310,
			"primary_score":	999861,
			"second_score":	133376
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	311,
			"primary_score":	999861,
			"second_score":	133357
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	313,
			"primary_score":	999861,
			"second_score":	133356
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	322,
			"primary_score":	999861,
			"second_score":	133403
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	325,
			"primary_score":	999861,
			"second_score":	133402
		}, {
			"file":	"Zend/zend_string.c",
			"line":	77,
			"primary_score":	999861,
			"second_score":	6123
		}, {
			"file":	"Zend/zend_string.c",
			"line":	78,
			"primary_score":	999861,
			"second_score":	6122
		}, {
			"file":	"Zend/zend_string.c",
			"line":	85,
			"primary_score":	999861,
			"second_score":	134609
		}, {
			"file":	"Zend/zend_string.c",
			"line":	86,
			"primary_score":	999861,
			"second_score":	134608
		}, {
			"file":	"Zend/zend_string.c",
			"line":	87,
			"primary_score":	999861,
			"second_score":	134607
		}, {
			"file":	"Zend/zend_string.c",
			"line":	89,
			"primary_score":	999861,
			"second_score":	134606
		}, {
			"file":	"Zend/zend_string.c",
			"line":	93,
			"primary_score":	999861,
			"second_score":	134605
		}, {
			"file":	"Zend/zend_string.c",
			"line":	94,
			"primary_score":	999861,
			"second_score":	134595
		}, {
			"file":	"Zend/zend_string.c",
			"line":	95,
			"primary_score":	999861,
			"second_score":	134594
		}, {
			"file":	"Zend/zend_string.c",
			"line":	96,
			"primary_score":	999861,
			"second_score":	134593
		}, {
			"file":	"Zend/zend_string.c",
			"line":	97,
			"primary_score":	999861,
			"second_score":	134592
		}, {
			"file":	"Zend/zend_string.c",
			"line":	98,
			"primary_score":	999861,
			"second_score":	152755
		}, {
			"file":	"Zend/zend_string.c",
			"line":	99,
			"primary_score":	999861,
			"second_score":	152754
		}, {
			"file":	"Zend/zend_string.c",
			"line":	100,
			"primary_score":	999861,
			"second_score":	152753
		}, {
			"file":	"Zend/zend_string.c",
			"line":	102,
			"primary_score":	999861,
			"second_score":	152734
		}, {
			"file":	"Zend/zend_string.c",
			"line":	105,
			"primary_score":	999861,
			"second_score":	143800
		}, {
			"file":	"Zend/zend_string.c",
			"line":	108,
			"primary_score":	999861,
			"second_score":	138982
		}, {
			"file":	"Zend/zend_string.c",
			"line":	114,
			"primary_score":	999861,
			"second_score":	138981
		}, {
			"file":	"Zend/zend_string.c",
			"line":	115,
			"primary_score":	999861,
			"second_score":	138980
		}, {
			"file":	"Zend/zend_string.c",
			"line":	121,
			"primary_score":	999861,
			"second_score":	138979
		}, {
			"file":	"Zend/zend_string.c",
			"line":	122,
			"primary_score":	999861,
			"second_score":	138978
		}, {
			"file":	"Zend/zend_string.c",
			"line":	123,
			"primary_score":	999861,
			"second_score":	138977
		}, {
			"file":	"Zend/zend_string.c",
			"line":	124,
			"primary_score":	999861,
			"second_score":	138976
		}, {
			"file":	"Zend/zend_string.c",
			"line":	126,
			"primary_score":	999861,
			"second_score":	138957
		}, {
			"file":	"Zend/zend_string.c",
			"line":	127,
			"primary_score":	999861,
			"second_score":	138956
		}, {
			"file":	"Zend/zend_string.c",
			"line":	128,
			"primary_score":	999861,
			"second_score":	138955
		}, {
			"file":	"Zend/zend_string.c",
			"line":	129,
			"primary_score":	999861,
			"second_score":	138954
		}, {
			"file":	"Zend/zend_string.c",
			"line":	131,
			"primary_score":	999861,
			"second_score":	138953
		}, {
			"file":	"Zend/zend_string.c",
			"line":	132,
			"primary_score":	999861,
			"second_score":	138952
		}, {
			"file":	"Zend/zend_string.c",
			"line":	133,
			"primary_score":	999861,
			"second_score":	138951
		}, {
			"file":	"Zend/zend_string.c",
			"line":	134,
			"primary_score":	999861,
			"second_score":	143767
		}, {
			"file":	"Zend/zend_string.c",
			"line":	137,
			"primary_score":	999861,
			"second_score":	138950
		}, {
			"file":	"Zend/zend_string.c",
			"line":	139,
			"primary_score":	999861,
			"second_score":	138948
		}, {
			"file":	"Zend/zend_string.c",
			"line":	140,
			"primary_score":	999861,
			"second_score":	138947
		}, {
			"file":	"Zend/zend_string.c",
			"line":	141,
			"primary_score":	999861,
			"second_score":	138946
		}, {
			"file":	"Zend/zend_string.c",
			"line":	142,
			"primary_score":	999861,
			"second_score":	138945
		}, {
			"file":	"Zend/zend_string.c",
			"line":	143,
			"primary_score":	999861,
			"second_score":	138944
		}, {
			"file":	"Zend/zend_string.c",
			"line":	145,
			"primary_score":	999861,
			"second_score":	138943
		}, {
			"file":	"Zend/zend_string.c",
			"line":	149,
			"primary_score":	999861,
			"second_score":	138942
		}, {
			"file":	"Zend/zend_string.c",
			"line":	151,
			"primary_score":	999861,
			"second_score":	138941
		}, {
			"file":	"Zend/zend_string.c",
			"line":	153,
			"primary_score":	999861,
			"second_score":	138939
		}, {
			"file":	"Zend/zend_string.c",
			"line":	155,
			"primary_score":	999861,
			"second_score":	138938
		}, {
			"file":	"Zend/zend_string.c",
			"line":	174,
			"primary_score":	999861,
			"second_score":	138937
		}, {
			"file":	"Zend/zend_string.c",
			"line":	188,
			"primary_score":	999861,
			"second_score":	112943
		}, {
			"file":	"Zend/zend_string.c",
			"line":	189,
			"primary_score":	999861,
			"second_score":	112942
		}, {
			"file":	"Zend/zend_string.c",
			"line":	192,
			"primary_score":	999861,
			"second_score":	112941
		}, {
			"file":	"Zend/zend_string.c",
			"line":	199,
			"primary_score":	999861,
			"second_score":	112940
		}, {
			"file":	"Zend/zend_string.c",
			"line":	200,
			"primary_score":	999861,
			"second_score":	103549
		}, {
			"file":	"Zend/zend_string.c",
			"line":	201,
			"primary_score":	999861,
			"second_score":	103548
		}, {
			"file":	"Zend/zend_string.c",
			"line":	202,
			"primary_score":	999861,
			"second_score":	110117
		}, {
			"file":	"Zend/zend_string.c",
			"line":	203,
			"primary_score":	999861,
			"second_score":	110116
		}, {
			"file":	"Zend/zend_string.c",
			"line":	204,
			"primary_score":	999861,
			"second_score":	110115
		}, {
			"file":	"Zend/zend_string.c",
			"line":	208,
			"primary_score":	999861,
			"second_score":	110114
		}, {
			"file":	"Zend/zend_string.c",
			"line":	209,
			"primary_score":	999861,
			"second_score":	108817
		}, {
			"file":	"Zend/zend_string.c",
			"line":	211,
			"primary_score":	999861,
			"second_score":	110113
		}, {
			"file":	"Zend/zend_string.c",
			"line":	213,
			"primary_score":	999861,
			"second_score":	110112
		}, {
			"file":	"Zend/zend_string.c",
			"line":	215,
			"primary_score":	999861,
			"second_score":	103547
		}, {
			"file":	"Zend/zend_string.c",
			"line":	216,
			"primary_score":	999861,
			"second_score":	103546
		}, {
			"file":	"Zend/zend_string.c",
			"line":	218,
			"primary_score":	999861,
			"second_score":	103545
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	459,
			"primary_score":	999861,
			"second_score":	6279
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	467,
			"primary_score":	999861,
			"second_score":	6225
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1379,
			"primary_score":	999861,
			"second_score":	6278
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1380,
			"primary_score":	999861,
			"second_score":	6277
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1382,
			"primary_score":	999861,
			"second_score":	6276
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1383,
			"primary_score":	999861,
			"second_score":	6275
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1384,
			"primary_score":	999861,
			"second_score":	6229
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1385,
			"primary_score":	999861,
			"second_score":	6228
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1389,
			"primary_score":	999861,
			"second_score":	6227
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1391,
			"primary_score":	999861,
			"second_score":	6226
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	32,
			"primary_score":	999861,
			"second_score":	114055
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	37,
			"primary_score":	999861,
			"second_score":	115376
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	38,
			"primary_score":	999861,
			"second_score":	115355
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	41,
			"primary_score":	999861,
			"second_score":	114847
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	43,
			"primary_score":	999861,
			"second_score":	114846
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	44,
			"primary_score":	999861,
			"second_score":	114845
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	45,
			"primary_score":	999861,
			"second_score":	114837
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	48,
			"primary_score":	999861,
			"second_score":	114818
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	51,
			"primary_score":	999971,
			"second_score":	119761
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	53,
			"primary_score":	999971,
			"second_score":	119760
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	55,
			"primary_score":	999971,
			"second_score":	119554
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	58,
			"primary_score":	999861,
			"second_score":	114054
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	61,
			"primary_score":	999861,
			"second_score":	114053
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	63,
			"primary_score":	999861,
			"second_score":	113851
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	77,
			"primary_score":	999861,
			"second_score":	15287
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	81,
			"primary_score":	999861,
			"second_score":	19028
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	82,
			"primary_score":	999861,
			"second_score":	19025
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	107,
			"primary_score":	999861,
			"second_score":	133214
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	121,
			"primary_score":	999861,
			"second_score":	133213
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	124,
			"primary_score":	999861,
			"second_score":	133212
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	153,
			"primary_score":	999861,
			"second_score":	119711
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	32,
			"primary_score":	999861,
			"second_score":	114057
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	33,
			"primary_score":	999861,
			"second_score":	115485
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	35,
			"primary_score":	999861,
			"second_score":	114056
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	42,
			"primary_score":	999861,
			"second_score":	133216
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	43,
			"primary_score":	999861,
			"second_score":	122925
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	45,
			"primary_score":	999861,
			"second_score":	133215
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	345,
			"primary_score":	999861,
			"second_score":	133328
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	346,
			"primary_score":	999861,
			"second_score":	133327
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	347,
			"primary_score":	999861,
			"second_score":	133326
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	350,
			"primary_score":	999861,
			"second_score":	133325
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	354,
			"primary_score":	999861,
			"second_score":	133324
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	356,
			"primary_score":	999861,
			"second_score":	133323
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	363,
			"primary_score":	999861,
			"second_score":	133314
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	364,
			"primary_score":	999861,
			"second_score":	133313
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	365,
			"primary_score":	999861,
			"second_score":	133312
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	366,
			"primary_score":	999861,
			"second_score":	133311
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	367,
			"primary_score":	999861,
			"second_score":	133310
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	368,
			"primary_score":	999861,
			"second_score":	133309
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	369,
			"primary_score":	999861,
			"second_score":	133308
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	370,
			"primary_score":	999861,
			"second_score":	133307
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	371,
			"primary_score":	999861,
			"second_score":	133306
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	372,
			"primary_score":	999861,
			"second_score":	133305
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	373,
			"primary_score":	999861,
			"second_score":	133304
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	374,
			"primary_score":	999861,
			"second_score":	133303
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	375,
			"primary_score":	999861,
			"second_score":	133302
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	377,
			"primary_score":	999861,
			"second_score":	133301
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	379,
			"primary_score":	999861,
			"second_score":	133300
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	380,
			"primary_score":	999861,
			"second_score":	133299
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	383,
			"primary_score":	999861,
			"second_score":	133266
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	395,
			"primary_score":	999861,
			"second_score":	133265
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	396,
			"primary_score":	999861,
			"second_score":	133264
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	397,
			"primary_score":	999861,
			"second_score":	133263
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	399,
			"primary_score":	999861,
			"second_score":	133262
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	400,
			"primary_score":	999861,
			"second_score":	133261
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	402,
			"primary_score":	999861,
			"second_score":	133260
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	403,
			"primary_score":	999861,
			"second_score":	120637
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	410,
			"primary_score":	999861,
			"second_score":	120636
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	411,
			"primary_score":	999861,
			"second_score":	120615
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	414,
			"primary_score":	999861,
			"second_score":	120614
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	431,
			"primary_score":	999861,
			"second_score":	119725
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	436,
			"primary_score":	999861,
			"second_score":	119724
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	437,
			"primary_score":	999861,
			"second_score":	119723
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	458,
			"primary_score":	999861,
			"second_score":	120628
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	459,
			"primary_score":	999861,
			"second_score":	120627
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	461,
			"primary_score":	999861,
			"second_score":	120626
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	462,
			"primary_score":	999861,
			"second_score":	120625
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	463,
			"primary_score":	999861,
			"second_score":	120624
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	474,
			"primary_score":	999861,
			"second_score":	120623
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	476,
			"primary_score":	999861,
			"second_score":	120622
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	478,
			"primary_score":	999861,
			"second_score":	120618
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	481,
			"primary_score":	999861,
			"second_score":	120617
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	566,
			"primary_score":	999861,
			"second_score":	120616
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	571,
			"primary_score":	999861,
			"second_score":	123084
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	572,
			"primary_score":	999861,
			"second_score":	123083
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	573,
			"primary_score":	999861,
			"second_score":	123082
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	575,
			"primary_score":	999861,
			"second_score":	123081
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	576,
			"primary_score":	999861,
			"second_score":	123080
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	589,
			"primary_score":	999861,
			"second_score":	123079
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	603,
			"primary_score":	999861,
			"second_score":	123078
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	613,
			"primary_score":	999861,
			"second_score":	123077
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	614,
			"primary_score":	999861,
			"second_score":	123067
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	615,
			"primary_score":	999861,
			"second_score":	123063
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	617,
			"primary_score":	999861,
			"second_score":	123062
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	618,
			"primary_score":	999861,
			"second_score":	123061
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	620,
			"primary_score":	999861,
			"second_score":	123060
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	621,
			"primary_score":	999861,
			"second_score":	122950
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	622,
			"primary_score":	999861,
			"second_score":	122947
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	623,
			"primary_score":	999861,
			"second_score":	122946
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	625,
			"primary_score":	999861,
			"second_score":	122945
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	626,
			"primary_score":	999861,
			"second_score":	122944
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	627,
			"primary_score":	999861,
			"second_score":	122943
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	628,
			"primary_score":	999861,
			"second_score":	122942
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	630,
			"primary_score":	999861,
			"second_score":	122941
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	631,
			"primary_score":	999861,
			"second_score":	122930
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	632,
			"primary_score":	999861,
			"second_score":	122921
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	636,
			"primary_score":	999861,
			"second_score":	122920
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	638,
			"primary_score":	999861,
			"second_score":	122919
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	643,
			"primary_score":	999861,
			"second_score":	121758
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	644,
			"primary_score":	999874,
			"second_score":	120712
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	709,
			"primary_score":	999861,
			"second_score":	121757
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	710,
			"primary_score":	999861,
			"second_score":	121756
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	712,
			"primary_score":	999861,
			"second_score":	121755
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	729,
			"primary_score":	999861,
			"second_score":	121754
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	730,
			"primary_score":	999861,
			"second_score":	121753
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	732,
			"primary_score":	999861,
			"second_score":	121752
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	734,
			"primary_score":	999861,
			"second_score":	120640
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	742,
			"primary_score":	999861,
			"second_score":	120639
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	794,
			"primary_score":	999974,
			"second_score":	126460
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	795,
			"primary_score":	999974,
			"second_score":	126459
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	796,
			"primary_score":	999974,
			"second_score":	126458
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	798,
			"primary_score":	999974,
			"second_score":	126457
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	799,
			"primary_score":	999974,
			"second_score":	126456
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	808,
			"primary_score":	999974,
			"second_score":	126455
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	809,
			"primary_score":	999974,
			"second_score":	126431
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	810,
			"primary_score":	999974,
			"second_score":	126371
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	812,
			"primary_score":	999974,
			"second_score":	126368
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	814,
			"primary_score":	999974,
			"second_score":	126363
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	815,
			"primary_score":	999975,
			"second_score":	126362
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	816,
			"primary_score":	999975,
			"second_score":	126361
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	820,
			"primary_score":	999975,
			"second_score":	126357
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1151,
			"primary_score":	999974,
			"second_score":	126510
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1153,
			"primary_score":	999974,
			"second_score":	126509
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1154,
			"primary_score":	999974,
			"second_score":	126508
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1155,
			"primary_score":	999974,
			"second_score":	126507
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1161,
			"primary_score":	999974,
			"second_score":	126506
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1163,
			"primary_score":	999974,
			"second_score":	126505
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1164,
			"primary_score":	999974,
			"second_score":	126504
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1167,
			"primary_score":	999974,
			"second_score":	126503
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1168,
			"primary_score":	999974,
			"second_score":	126467
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1178,
			"primary_score":	999974,
			"second_score":	126465
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1179,
			"primary_score":	999974,
			"second_score":	126464
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1731,
			"primary_score":	999861,
			"second_score":	121377
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1733,
			"primary_score":	999861,
			"second_score":	121376
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1734,
			"primary_score":	999861,
			"second_score":	121375
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1736,
			"primary_score":	999861,
			"second_score":	121374
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1737,
			"primary_score":	999861,
			"second_score":	121373
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1739,
			"primary_score":	999861,
			"second_score":	121372
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1746,
			"primary_score":	999861,
			"second_score":	121371
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1749,
			"primary_score":	999861,
			"second_score":	121307
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1750,
			"primary_score":	999861,
			"second_score":	121306
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1919,
			"primary_score":	999861,
			"second_score":	123110
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1921,
			"primary_score":	999861,
			"second_score":	123109
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1923,
			"primary_score":	999861,
			"second_score":	123108
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1925,
			"primary_score":	999861,
			"second_score":	123102
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1927,
			"primary_score":	999861,
			"second_score":	123101
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1931,
			"primary_score":	999861,
			"second_score":	123088
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1933,
			"primary_score":	999861,
			"second_score":	123086
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1935,
			"primary_score":	999861,
			"second_score":	123085
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1940,
			"primary_score":	999861,
			"second_score":	120635
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1941,
			"primary_score":	999861,
			"second_score":	120634
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1944,
			"primary_score":	999861,
			"second_score":	120633
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1945,
			"primary_score":	999861,
			"second_score":	120632
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1947,
			"primary_score":	999861,
			"second_score":	120631
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1948,
			"primary_score":	999861,
			"second_score":	120630
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1951,
			"primary_score":	999861,
			"second_score":	119012
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1952,
			"primary_score":	999861,
			"second_score":	119011
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1954,
			"primary_score":	999861,
			"second_score":	119010
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1956,
			"primary_score":	999861,
			"second_score":	119009
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1957,
			"primary_score":	999861,
			"second_score":	118985
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1958,
			"primary_score":	999861,
			"second_score":	118977
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1959,
			"primary_score":	999861,
			"second_score":	118974
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1978,
			"primary_score":	999861,
			"second_score":	120629
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2077,
			"primary_score":	999861,
			"second_score":	133257
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2079,
			"primary_score":	999861,
			"second_score":	133256
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2080,
			"primary_score":	999861,
			"second_score":	133255
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2084,
			"primary_score":	999861,
			"second_score":	133254
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2085,
			"primary_score":	999861,
			"second_score":	133253
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2086,
			"primary_score":	999861,
			"second_score":	133252
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2089,
			"primary_score":	999861,
			"second_score":	133251
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2091,
			"primary_score":	999861,
			"second_score":	133250
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2092,
			"primary_score":	999861,
			"second_score":	133226
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2093,
			"primary_score":	999861,
			"second_score":	133218
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2094,
			"primary_score":	999861,
			"second_score":	133217
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2096,
			"primary_score":	999861,
			"second_score":	133211
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2099,
			"primary_score":	999861,
			"second_score":	133207
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2100,
			"primary_score":	999861,
			"second_score":	133206
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	3262,
			"primary_score":	999965,
			"second_score":	122968
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	3264,
			"primary_score":	999965,
			"second_score":	122967
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	3266,
			"primary_score":	999965,
			"second_score":	122966
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	3267,
			"primary_score":	999965,
			"second_score":	122965
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	3277,
			"primary_score":	999965,
			"second_score":	122964
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	3278,
			"primary_score":	999965,
			"second_score":	122963
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	3284,
			"primary_score":	999965,
			"second_score":	122962
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	3285,
			"primary_score":	999965,
			"second_score":	122961
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	3287,
			"primary_score":	999965,
			"second_score":	122960
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	3288,
			"primary_score":	999965,
			"second_score":	122936
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	3289,
			"primary_score":	999965,
			"second_score":	122928
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	3290,
			"primary_score":	999965,
			"second_score":	122927
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	3296,
			"primary_score":	999965,
			"second_score":	122924
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	3298,
			"primary_score":	999965,
			"second_score":	122923
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	3299,
			"primary_score":	999965,
			"second_score":	122922
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	3301,
			"primary_score":	999965,
			"second_score":	122921
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	3313,
			"primary_score":	999969,
			"second_score":	122920
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	3322,
			"primary_score":	999969,
			"second_score":	122919
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	3323,
			"primary_score":	999969,
			"second_score":	122796
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	3337,
			"primary_score":	999965,
			"second_score":	122795
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	3342,
			"primary_score":	999965,
			"second_score":	122794
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	3343,
			"primary_score":	999965,
			"second_score":	122793
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5999,
			"primary_score":	999861,
			"second_score":	119720
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6000,
			"primary_score":	999861,
			"second_score":	119719
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6001,
			"primary_score":	999861,
			"second_score":	119718
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6002,
			"primary_score":	999861,
			"second_score":	119717
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6004,
			"primary_score":	999861,
			"second_score":	119716
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6005,
			"primary_score":	999861,
			"second_score":	119715
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6007,
			"primary_score":	999861,
			"second_score":	119713
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6014,
			"primary_score":	999861,
			"second_score":	119712
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6017,
			"primary_score":	999861,
			"second_score":	119699
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6018,
			"primary_score":	999861,
			"second_score":	119673
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6019,
			"primary_score":	999861,
			"second_score":	119672
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6032,
			"primary_score":	999868,
			"second_score":	119255
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6033,
			"primary_score":	999868,
			"second_score":	119254
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6034,
			"primary_score":	999868,
			"second_score":	119253
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6035,
			"primary_score":	999868,
			"second_score":	119252
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6037,
			"primary_score":	999868,
			"second_score":	119251
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6038,
			"primary_score":	999868,
			"second_score":	119250
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6040,
			"primary_score":	999868,
			"second_score":	119248
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6041,
			"primary_score":	999868,
			"second_score":	119247
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6049,
			"primary_score":	999868,
			"second_score":	119246
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6053,
			"primary_score":	999869,
			"second_score":	119245
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6054,
			"primary_score":	999869,
			"second_score":	119244
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9985,
			"primary_score":	999869,
			"second_score":	119314
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9986,
			"primary_score":	999869,
			"second_score":	119313
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9988,
			"primary_score":	999869,
			"second_score":	119312
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9989,
			"primary_score":	999869,
			"second_score":	119311
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9991,
			"primary_score":	999869,
			"second_score":	119291
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9992,
			"primary_score":	999869,
			"second_score":	119260
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9993,
			"primary_score":	999869,
			"second_score":	119259
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10178,
			"primary_score":	999861,
			"second_score":	121517
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10179,
			"primary_score":	999861,
			"second_score":	121516
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10180,
			"primary_score":	999861,
			"second_score":	121515
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10181,
			"primary_score":	999861,
			"second_score":	121514
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10183,
			"primary_score":	999861,
			"second_score":	121513
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10184,
			"primary_score":	999861,
			"second_score":	121512
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10186,
			"primary_score":	999861,
			"second_score":	121501
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10193,
			"primary_score":	999861,
			"second_score":	121500
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10196,
			"primary_score":	999861,
			"second_score":	121436
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10197,
			"primary_score":	999861,
			"second_score":	121382
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10198,
			"primary_score":	999861,
			"second_score":	121381
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10211,
			"primary_score":	999861,
			"second_score":	120778
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10212,
			"primary_score":	999861,
			"second_score":	120777
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10213,
			"primary_score":	999861,
			"second_score":	120776
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10214,
			"primary_score":	999861,
			"second_score":	120775
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10216,
			"primary_score":	999861,
			"second_score":	120774
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10217,
			"primary_score":	999861,
			"second_score":	120773
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10219,
			"primary_score":	999861,
			"second_score":	120762
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10222,
			"primary_score":	999861,
			"second_score":	120761
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10223,
			"primary_score":	999861,
			"second_score":	120756
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10224,
			"primary_score":	999861,
			"second_score":	120725
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10228,
			"primary_score":	999861,
			"second_score":	120724
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10236,
			"primary_score":	999861,
			"second_score":	120723
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10519,
			"primary_score":	999861,
			"second_score":	123172
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10520,
			"primary_score":	999861,
			"second_score":	123171
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10521,
			"primary_score":	999861,
			"second_score":	123170
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10522,
			"primary_score":	999861,
			"second_score":	123169
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10524,
			"primary_score":	999861,
			"second_score":	123158
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10528,
			"primary_score":	999861,
			"second_score":	123157
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10537,
			"primary_score":	999861,
			"second_score":	123155
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10538,
			"primary_score":	999861,
			"second_score":	123153
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10539,
			"primary_score":	999861,
			"second_score":	123149
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10541,
			"primary_score":	999861,
			"second_score":	123115
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10542,
			"primary_score":	999861,
			"second_score":	123114
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10547,
			"primary_score":	999861,
			"second_score":	123179
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10548,
			"primary_score":	999861,
			"second_score":	123178
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10549,
			"primary_score":	999861,
			"second_score":	123177
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10551,
			"primary_score":	999861,
			"second_score":	123176
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10552,
			"primary_score":	999861,
			"second_score":	123175
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10553,
			"primary_score":	999861,
			"second_score":	123174
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10554,
			"primary_score":	999861,
			"second_score":	123173
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11261,
			"primary_score":	999861,
			"second_score":	119837
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11262,
			"primary_score":	999861,
			"second_score":	119836
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11263,
			"primary_score":	999861,
			"second_score":	119835
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11265,
			"primary_score":	999861,
			"second_score":	119834
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11266,
			"primary_score":	999861,
			"second_score":	119833
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11268,
			"primary_score":	999861,
			"second_score":	119822
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11269,
			"primary_score":	999861,
			"second_score":	119819
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11270,
			"primary_score":	999861,
			"second_score":	119818
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11272,
			"primary_score":	999861,
			"second_score":	119784
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11273,
			"primary_score":	999861,
			"second_score":	119730
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11274,
			"primary_score":	999861,
			"second_score":	119729
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26202,
			"primary_score":	999899,
			"second_score":	122582
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26203,
			"primary_score":	999899,
			"second_score":	122581
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26205,
			"primary_score":	999899,
			"second_score":	122580
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26207,
			"primary_score":	999899,
			"second_score":	122576
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26211,
			"primary_score":	999899,
			"second_score":	122575
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26220,
			"primary_score":	999899,
			"second_score":	122573
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26221,
			"primary_score":	999899,
			"second_score":	122571
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26222,
			"primary_score":	999899,
			"second_score":	122567
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26224,
			"primary_score":	999899,
			"second_score":	122566
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26225,
			"primary_score":	999899,
			"second_score":	122565
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26316,
			"primary_score":	999899,
			"second_score":	122586
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26318,
			"primary_score":	999899,
			"second_score":	122585
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26322,
			"primary_score":	999899,
			"second_score":	122584
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26323,
			"primary_score":	999899,
			"second_score":	122583
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28127,
			"primary_score":	999998,
			"second_score":	125666
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28129,
			"primary_score":	999998,
			"second_score":	125665
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28130,
			"primary_score":	999998,
			"second_score":	125664
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28132,
			"primary_score":	999998,
			"second_score":	125663
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28133,
			"primary_score":	999998,
			"second_score":	125662
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28134,
			"primary_score":	999998,
			"second_score":	125658
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28136,
			"primary_score":	999998,
			"second_score":	125657
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28139,
			"primary_score":	999998,
			"second_score":	125656
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28142,
			"primary_score":	999998,
			"second_score":	125655
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28143,
			"primary_score":	999998,
			"second_score":	125314
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28150,
			"primary_score":	999998,
			"second_score":	125313
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28151,
			"primary_score":	999998,
			"second_score":	125312
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28152,
			"primary_score":	999998,
			"second_score":	125311
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28376,
			"primary_score":	999992,
			"second_score":	123210
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28378,
			"primary_score":	999992,
			"second_score":	123209
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28380,
			"primary_score":	999992,
			"second_score":	123208
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28381,
			"primary_score":	999992,
			"second_score":	123207
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28391,
			"primary_score":	999992,
			"second_score":	123206
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28392,
			"primary_score":	999992,
			"second_score":	123202
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28398,
			"primary_score":	999992,
			"second_score":	123201
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28406,
			"primary_score":	999992,
			"second_score":	123199
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28410,
			"primary_score":	999992,
			"second_score":	123197
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28412,
			"primary_score":	999992,
			"second_score":	123196
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28413,
			"primary_score":	999992,
			"second_score":	123195
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28415,
			"primary_score":	999992,
			"second_score":	123194
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28427,
			"primary_score":	999992,
			"second_score":	123193
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28436,
			"primary_score":	999992,
			"second_score":	123192
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28437,
			"primary_score":	999992,
			"second_score":	122975
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28451,
			"primary_score":	999992,
			"second_score":	122974
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28456,
			"primary_score":	999992,
			"second_score":	122973
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28457,
			"primary_score":	999992,
			"second_score":	122972
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28462,
			"primary_score":	1000000,
			"second_score":	123334
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28464,
			"primary_score":	1000000,
			"second_score":	123333
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28465,
			"primary_score":	1000000,
			"second_score":	123212
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28469,
			"primary_score":	1000000,
			"second_score":	123211
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30159,
			"primary_score":	999953,
			"second_score":	122789
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30160,
			"primary_score":	999953,
			"second_score":	122788
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30161,
			"primary_score":	999953,
			"second_score":	122787
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30162,
			"primary_score":	999953,
			"second_score":	122786
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30164,
			"primary_score":	999953,
			"second_score":	122785
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30165,
			"primary_score":	999953,
			"second_score":	122784
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30166,
			"primary_score":	999953,
			"second_score":	122782
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30168,
			"primary_score":	999953,
			"second_score":	122640
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30182,
			"primary_score":	999953,
			"second_score":	122639
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30191,
			"primary_score":	999953,
			"second_score":	122638
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30192,
			"primary_score":	999953,
			"second_score":	122637
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30198,
			"primary_score":	999953,
			"second_score":	122592
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30206,
			"primary_score":	999953,
			"second_score":	122591
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30207,
			"primary_score":	999953,
			"second_score":	122590
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32090,
			"primary_score":	999917,
			"second_score":	126352
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32091,
			"primary_score":	999917,
			"second_score":	126351
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32092,
			"primary_score":	999917,
			"second_score":	126350
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32093,
			"primary_score":	999917,
			"second_score":	126349
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32095,
			"primary_score":	999917,
			"second_score":	126348
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32096,
			"primary_score":	999917,
			"second_score":	126347
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32097,
			"primary_score":	999917,
			"second_score":	126336
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32099,
			"primary_score":	999917,
			"second_score":	126194
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32113,
			"primary_score":	999917,
			"second_score":	126193
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32122,
			"primary_score":	999917,
			"second_score":	126192
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32124,
			"primary_score":	999917,
			"second_score":	126191
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32127,
			"primary_score":	999917,
			"second_score":	126190
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32129,
			"primary_score":	999917,
			"second_score":	126170
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32136,
			"primary_score":	999949,
			"second_score":	126168
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32138,
			"primary_score":	999917,
			"second_score":	126128
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32139,
			"primary_score":	999917,
			"second_score":	126127
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	39394,
			"primary_score":	999861,
			"second_score":	133575
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	39413,
			"primary_score":	999861,
			"second_score":	133574
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	39418,
			"primary_score":	999861,
			"second_score":	133576
		}, {
			"file":	"ext/date/php_date.c",
			"line":	626,
			"primary_score":	999861,
			"second_score":	118734
		}, {
			"file":	"ext/date/php_date.c",
			"line":	629,
			"primary_score":	999861,
			"second_score":	118733
		}, {
			"file":	"ext/date/php_date.c",
			"line":	630,
			"primary_score":	999861,
			"second_score":	118732
		}, {
			"file":	"ext/date/php_date.c",
			"line":	635,
			"primary_score":	999861,
			"second_score":	118731
		}, {
			"file":	"ext/date/php_date.c",
			"line":	640,
			"primary_score":	999861,
			"second_score":	118730
		}, {
			"file":	"ext/date/php_date.c",
			"line":	789,
			"primary_score":	999861,
			"second_score":	53379
		}, {
			"file":	"ext/date/php_date.c",
			"line":	791,
			"primary_score":	999861,
			"second_score":	52700
		}, {
			"file":	"ext/date/php_date.c",
			"line":	795,
			"primary_score":	999861,
			"second_score":	52699
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	910,
			"primary_score":	999861,
			"second_score":	58443
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	911,
			"primary_score":	999861,
			"second_score":	58428
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	912,
			"primary_score":	999861,
			"second_score":	58413
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	913,
			"primary_score":	999861,
			"second_score":	58398
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	914,
			"primary_score":	999861,
			"second_score":	58179
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	915,
			"primary_score":	999861,
			"second_score":	58074
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	916,
			"primary_score":	999861,
			"second_score":	58017
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	917,
			"primary_score":	999861,
			"second_score":	58002
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	918,
			"primary_score":	999861,
			"second_score":	57987
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	919,
			"primary_score":	999861,
			"second_score":	57870
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	920,
			"primary_score":	999861,
			"second_score":	57735
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	921,
			"primary_score":	999861,
			"second_score":	57618
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	922,
			"primary_score":	999861,
			"second_score":	57495
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	923,
			"primary_score":	999861,
			"second_score":	57474
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	924,
			"primary_score":	999861,
			"second_score":	57429
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	925,
			"primary_score":	999861,
			"second_score":	57390
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	926,
			"primary_score":	999861,
			"second_score":	57249
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	927,
			"primary_score":	999861,
			"second_score":	57132
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	928,
			"primary_score":	999861,
			"second_score":	56991
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	930,
			"primary_score":	999861,
			"second_score":	56874
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	932,
			"primary_score":	999861,
			"second_score":	56859
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	939,
			"primary_score":	999861,
			"second_score":	56706
		}, {
			"file":	"ext/ereg/ereg.c",
			"line":	230,
			"primary_score":	999861,
			"second_score":	53764
		}, {
			"file":	"ext/filter/filter.c",
			"line":	287,
			"primary_score":	999861,
			"second_score":	59851
		}, {
			"file":	"ext/filter/filter.c",
			"line":	289,
			"primary_score":	999861,
			"second_score":	59210
		}, {
			"file":	"ext/filter/filter.c",
			"line":	303,
			"primary_score":	999861,
			"second_score":	119227
		}, {
			"file":	"ext/filter/filter.c",
			"line":	304,
			"primary_score":	999861,
			"second_score":	119226
		}, {
			"file":	"ext/filter/filter.c",
			"line":	305,
			"primary_score":	999861,
			"second_score":	119225
		}, {
			"file":	"ext/filter/filter.c",
			"line":	306,
			"primary_score":	999861,
			"second_score":	119224
		}, {
			"file":	"ext/filter/filter.c",
			"line":	307,
			"primary_score":	999861,
			"second_score":	118756
		}, {
			"file":	"ext/filter/filter.c",
			"line":	308,
			"primary_score":	999861,
			"second_score":	118755
		}, {
			"file":	"ext/filter/filter.c",
			"line":	309,
			"primary_score":	999861,
			"second_score":	118754
		}, {
			"file":	"ext/hash/hash.c",
			"line":	889,
			"primary_score":	999861,
			"second_score":	60730
		}, {
			"file":	"ext/hash/hash.c",
			"line":	891,
			"primary_score":	999861,
			"second_score":	60451
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	289,
			"primary_score":	999861,
			"second_score":	62057
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	290,
			"primary_score":	999861,
			"second_score":	62006
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	291,
			"primary_score":	999861,
			"second_score":	61323
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	2852,
			"primary_score":	999861,
			"second_score":	62056
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	2856,
			"primary_score":	999861,
			"second_score":	62007
		}, {
			"file":	"ext/json/json.c",
			"line":	162,
			"primary_score":	999985,
			"second_score":	122327
		}, {
			"file":	"ext/json/json.c",
			"line":	163,
			"primary_score":	999985,
			"second_score":	122326
		}, {
			"file":	"ext/json/json.c",
			"line":	165,
			"primary_score":	999985,
			"second_score":	122325
		}, {
			"file":	"ext/json/json.c",
			"line":	166,
			"primary_score":	999985,
			"second_score":	122322
		}, {
			"file":	"ext/json/json.c",
			"line":	167,
			"primary_score":	999985,
			"second_score":	122321
		}, {
			"file":	"ext/json/json.c",
			"line":	168,
			"primary_score":	999985,
			"second_score":	122320
		}, {
			"file":	"ext/json/json.c",
			"line":	169,
			"primary_score":	999985,
			"second_score":	122319
		}, {
			"file":	"ext/json/json.c",
			"line":	170,
			"primary_score":	999985,
			"second_score":	122318
		}, {
			"file":	"ext/json/json.c",
			"line":	172,
			"primary_score":	999985,
			"second_score":	122317
		}, {
			"file":	"ext/json/json.c",
			"line":	173,
			"primary_score":	999985,
			"second_score":	122313
		}, {
			"file":	"ext/json/json.c",
			"line":	174,
			"primary_score":	999985,
			"second_score":	122312
		}, {
			"file":	"ext/json/json.c",
			"line":	175,
			"primary_score":	999985,
			"second_score":	122311
		}, {
			"file":	"ext/json/json.c",
			"line":	176,
			"primary_score":	999985,
			"second_score":	122300
		}, {
			"file":	"ext/json/json.c",
			"line":	179,
			"primary_score":	999985,
			"second_score":	122299
		}, {
			"file":	"ext/json/json.c",
			"line":	180,
			"primary_score":	999993,
			"second_score":	122298
		}, {
			"file":	"ext/json/json.c",
			"line":	198,
			"primary_score":	999983,
			"second_score":	121647
		}, {
			"file":	"ext/json/json.c",
			"line":	206,
			"primary_score":	999983,
			"second_score":	121645
		}, {
			"file":	"ext/json/json.c",
			"line":	208,
			"primary_score":	999983,
			"second_score":	121644
		}, {
			"file":	"ext/json/json.c",
			"line":	220,
			"primary_score":	999983,
			"second_score":	122332
		}, {
			"file":	"ext/json/json.c",
			"line":	221,
			"primary_score":	999983,
			"second_score":	122331
		}, {
			"file":	"ext/json/json.c",
			"line":	223,
			"primary_score":	999983,
			"second_score":	122330
		}, {
			"file":	"ext/json/json.c",
			"line":	224,
			"primary_score":	999985,
			"second_score":	122329
		}, {
			"file":	"ext/json/json.c",
			"line":	225,
			"primary_score":	999985,
			"second_score":	122328
		}, {
			"file":	"ext/json/json.c",
			"line":	227,
			"primary_score":	999992,
			"second_score":	125014
		}, {
			"file":	"ext/json/json.c",
			"line":	228,
			"primary_score":	999992,
			"second_score":	125009
		}, {
			"file":	"ext/json/json.c",
			"line":	231,
			"primary_score":	999983,
			"second_score":	122297
		}, {
			"file":	"ext/json/json.c",
			"line":	237,
			"primary_score":	999983,
			"second_score":	122296
		}, {
			"file":	"ext/json/json.c",
			"line":	240,
			"primary_score":	999992,
			"second_score":	122291
		}, {
			"file":	"ext/json/json.c",
			"line":	243,
			"primary_score":	999983,
			"second_score":	122257
		}, {
			"file":	"ext/json/json.c",
			"line":	244,
			"primary_score":	999983,
			"second_score":	122255
		}, {
			"file":	"ext/json/json.c",
			"line":	246,
			"primary_score":	999983,
			"second_score":	122254
		}, {
			"file":	"ext/json/json.c",
			"line":	248,
			"primary_score":	999983,
			"second_score":	122251
		}, {
			"file":	"ext/json/json.c",
			"line":	250,
			"primary_score":	999983,
			"second_score":	122250
		}, {
			"file":	"ext/json/json.c",
			"line":	251,
			"primary_score":	999983,
			"second_score":	122249
		}, {
			"file":	"ext/json/json.c",
			"line":	252,
			"primary_score":	999983,
			"second_score":	122248
		}, {
			"file":	"ext/json/json.c",
			"line":	253,
			"primary_score":	999983,
			"second_score":	122247
		}, {
			"file":	"ext/json/json.c",
			"line":	254,
			"primary_score":	999983,
			"second_score":	122246
		}, {
			"file":	"ext/json/json.c",
			"line":	255,
			"primary_score":	999983,
			"second_score":	122245
		}, {
			"file":	"ext/json/json.c",
			"line":	256,
			"primary_score":	999983,
			"second_score":	122244
		}, {
			"file":	"ext/json/json.c",
			"line":	258,
			"primary_score":	999983,
			"second_score":	122243
		}, {
			"file":	"ext/json/json.c",
			"line":	259,
			"primary_score":	999983,
			"second_score":	122239
		}, {
			"file":	"ext/json/json.c",
			"line":	260,
			"primary_score":	999983,
			"second_score":	121657
		}, {
			"file":	"ext/json/json.c",
			"line":	261,
			"primary_score":	999983,
			"second_score":	121651
		}, {
			"file":	"ext/json/json.c",
			"line":	262,
			"primary_score":	999983,
			"second_score":	121650
		}, {
			"file":	"ext/json/json.c",
			"line":	264,
			"primary_score":	999983,
			"second_score":	121902
		}, {
			"file":	"ext/json/json.c",
			"line":	265,
			"primary_score":	999983,
			"second_score":	121895
		}, {
			"file":	"ext/json/json.c",
			"line":	266,
			"primary_score":	999983,
			"second_score":	121894
		}, {
			"file":	"ext/json/json.c",
			"line":	270,
			"primary_score":	999983,
			"second_score":	121893
		}, {
			"file":	"ext/json/json.c",
			"line":	280,
			"primary_score":	999990,
			"second_score":	121892
		}, {
			"file":	"ext/json/json.c",
			"line":	281,
			"primary_score":	999990,
			"second_score":	121891
		}, {
			"file":	"ext/json/json.c",
			"line":	282,
			"primary_score":	999990,
			"second_score":	121890
		}, {
			"file":	"ext/json/json.c",
			"line":	290,
			"primary_score":	999991,
			"second_score":	121889
		}, {
			"file":	"ext/json/json.c",
			"line":	291,
			"primary_score":	999993,
			"second_score":	121888
		}, {
			"file":	"ext/json/json.c",
			"line":	292,
			"primary_score":	999993,
			"second_score":	121880
		}, {
			"file":	"ext/json/json.c",
			"line":	294,
			"primary_score":	999992,
			"second_score":	122212
		}, {
			"file":	"ext/json/json.c",
			"line":	297,
			"primary_score":	999991,
			"second_score":	121878
		}, {
			"file":	"ext/json/json.c",
			"line":	299,
			"primary_score":	999991,
			"second_score":	121875
		}, {
			"file":	"ext/json/json.c",
			"line":	300,
			"primary_score":	999991,
			"second_score":	121699
		}, {
			"file":	"ext/json/json.c",
			"line":	302,
			"primary_score":	999991,
			"second_score":	121691
		}, {
			"file":	"ext/json/json.c",
			"line":	304,
			"primary_score":	999991,
			"second_score":	121689
		}, {
			"file":	"ext/json/json.c",
			"line":	326,
			"primary_score":	999984,
			"second_score":	121663
		}, {
			"file":	"ext/json/json.c",
			"line":	333,
			"primary_score":	999983,
			"second_score":	121649
		}, {
			"file":	"ext/json/json.c",
			"line":	334,
			"primary_score":	999983,
			"second_score":	121648
		}, {
			"file":	"ext/json/json.c",
			"line":	335,
			"primary_score":	999983,
			"second_score":	121646
		}, {
			"file":	"ext/json/json.c",
			"line":	337,
			"primary_score":	999983,
			"second_score":	121643
		}, {
			"file":	"ext/json/json.c",
			"line":	340,
			"primary_score":	999990,
			"second_score":	121642
		}, {
			"file":	"ext/json/json.c",
			"line":	349,
			"primary_score":	999982,
			"second_score":	121874
		}, {
			"file":	"ext/json/json.c",
			"line":	350,
			"primary_score":	999982,
			"second_score":	121873
		}, {
			"file":	"ext/json/json.c",
			"line":	351,
			"primary_score":	999982,
			"second_score":	121872
		}, {
			"file":	"ext/json/json.c",
			"line":	353,
			"primary_score":	999982,
			"second_score":	121871
		}, {
			"file":	"ext/json/json.c",
			"line":	358,
			"primary_score":	999982,
			"second_score":	121870
		}, {
			"file":	"ext/json/json.c",
			"line":	382,
			"primary_score":	999982,
			"second_score":	121869
		}, {
			"file":	"ext/json/json.c",
			"line":	384,
			"primary_score":	999982,
			"second_score":	121841
		}, {
			"file":	"ext/json/json.c",
			"line":	385,
			"primary_score":	999982,
			"second_score":	121769
		}, {
			"file":	"ext/json/json.c",
			"line":	386,
			"primary_score":	999999,
			"second_score":	121955
		}, {
			"file":	"ext/json/json.c",
			"line":	387,
			"primary_score":	999999,
			"second_score":	121954
		}, {
			"file":	"ext/json/json.c",
			"line":	389,
			"primary_score":	999999,
			"second_score":	121935
		}, {
			"file":	"ext/json/json.c",
			"line":	390,
			"primary_score":	999999,
			"second_score":	121934
		}, {
			"file":	"ext/json/json.c",
			"line":	391,
			"primary_score":	999999,
			"second_score":	121933
		}, {
			"file":	"ext/json/json.c",
			"line":	394,
			"primary_score":	999999,
			"second_score":	130566
		}, {
			"file":	"ext/json/json.c",
			"line":	398,
			"primary_score":	999999,
			"second_score":	121923
		}, {
			"file":	"ext/json/json.c",
			"line":	401,
			"primary_score":	999987,
			"second_score":	121763
		}, {
			"file":	"ext/json/json.c",
			"line":	403,
			"primary_score":	999982,
			"second_score":	121760
		}, {
			"file":	"ext/json/json.c",
			"line":	405,
			"primary_score":	999982,
			"second_score":	121737
		}, {
			"file":	"ext/json/json.c",
			"line":	407,
			"primary_score":	999982,
			"second_score":	121736
		}, {
			"file":	"ext/json/json.c",
			"line":	483,
			"primary_score":	999985,
			"second_score":	121735
		}, {
			"file":	"ext/json/json.c",
			"line":	496,
			"primary_score":	999983,
			"second_score":	121727
		}, {
			"file":	"ext/json/json.c",
			"line":	500,
			"primary_score":	999982,
			"second_score":	121726
		}, {
			"file":	"ext/json/json.c",
			"line":	501,
			"primary_score":	999982,
			"second_score":	121718
		}, {
			"file":	"ext/json/json.c",
			"line":	541,
			"primary_score":	999977,
			"second_score":	121688
		}, {
			"file":	"ext/json/json.c",
			"line":	542,
			"primary_score":	999977,
			"second_score":	121687
		}, {
			"file":	"ext/json/json.c",
			"line":	557,
			"primary_score":	999993,
			"second_score":	121668
		}, {
			"file":	"ext/json/json.c",
			"line":	558,
			"primary_score":	999992,
			"second_score":	121665
		}, {
			"file":	"ext/json/json.c",
			"line":	579,
			"primary_score":	999984,
			"second_score":	121922
		}, {
			"file":	"ext/json/json.c",
			"line":	587,
			"primary_score":	999992,
			"second_score":	125018
		}, {
			"file":	"ext/json/json.c",
			"line":	589,
			"primary_score":	999983,
			"second_score":	121634
		}, {
			"file":	"ext/json/json.c",
			"line":	597,
			"primary_score":	999977,
			"second_score":	121633
		}, {
			"file":	"ext/json/json.c",
			"line":	675,
			"primary_score":	999976,
			"second_score":	122404
		}, {
			"file":	"ext/json/json.c",
			"line":	676,
			"primary_score":	999976,
			"second_score":	122403
		}, {
			"file":	"ext/json/json.c",
			"line":	677,
			"primary_score":	999976,
			"second_score":	122402
		}, {
			"file":	"ext/json/json.c",
			"line":	679,
			"primary_score":	999976,
			"second_score":	122401
		}, {
			"file":	"ext/json/json.c",
			"line":	683,
			"primary_score":	999977,
			"second_score":	122335
		}, {
			"file":	"ext/json/json.c",
			"line":	685,
			"primary_score":	999977,
			"second_score":	121632
		}, {
			"file":	"ext/json/json.c",
			"line":	687,
			"primary_score":	999977,
			"second_score":	121598
		}, {
			"file":	"ext/json/json.c",
			"line":	724,
			"primary_score":	999999,
			"second_score":	121382
		}, {
			"file":	"ext/json/json.c",
			"line":	728,
			"primary_score":	999999,
			"second_score":	121349
		}, {
			"file":	"ext/json/utf8_decode.c",
			"line":	61,
			"primary_score":	999973,
			"second_score":	121787
		}, {
			"file":	"ext/json/utf8_decode.c",
			"line":	62,
			"primary_score":	999973,
			"second_score":	121786
		}, {
			"file":	"ext/json/utf8_decode.c",
			"line":	65,
			"primary_score":	999973,
			"second_score":	121785
		}, {
			"file":	"ext/json/utf8_decode.c",
			"line":	66,
			"primary_score":	999973,
			"second_score":	121784
		}, {
			"file":	"ext/json/utf8_decode.c",
			"line":	67,
			"primary_score":	999973,
			"second_score":	121783
		}, {
			"file":	"ext/json/utf8_decode.c",
			"line":	89,
			"primary_score":	999973,
			"second_score":	121836
		}, {
			"file":	"ext/json/utf8_decode.c",
			"line":	90,
			"primary_score":	999973,
			"second_score":	121835
		}, {
			"file":	"ext/json/utf8_decode.c",
			"line":	91,
			"primary_score":	999973,
			"second_score":	121834
		}, {
			"file":	"ext/json/utf8_decode.c",
			"line":	92,
			"primary_score":	999973,
			"second_score":	121833
		}, {
			"file":	"ext/json/utf8_decode.c",
			"line":	93,
			"primary_score":	999973,
			"second_score":	121832
		}, {
			"file":	"ext/json/utf8_decode.c",
			"line":	127,
			"primary_score":	999973,
			"second_score":	121775
		}, {
			"file":	"ext/json/utf8_decode.c",
			"line":	128,
			"primary_score":	999973,
			"second_score":	121774
		}, {
			"file":	"ext/json/utf8_decode.c",
			"line":	130,
			"primary_score":	999973,
			"second_score":	121773
		}, {
			"file":	"ext/json/utf8_decode.c",
			"line":	131,
			"primary_score":	999973,
			"second_score":	121772
		}, {
			"file":	"ext/json/utf8_decode.c",
			"line":	133,
			"primary_score":	999973,
			"second_score":	121790
		}, {
			"file":	"ext/json/utf8_decode.c",
			"line":	134,
			"primary_score":	999973,
			"second_score":	121789
		}, {
			"file":	"ext/json/utf8_decode.c",
			"line":	135,
			"primary_score":	999973,
			"second_score":	121788
		}, {
			"file":	"ext/json/utf8_decode.c",
			"line":	139,
			"primary_score":	999973,
			"second_score":	121782
		}, {
			"file":	"ext/json/utf8_decode.c",
			"line":	140,
			"primary_score":	999974,
			"second_score":	121781
		}, {
			"file":	"ext/json/utf8_decode.c",
			"line":	145,
			"primary_score":	999992,
			"second_score":	121962
		}, {
			"file":	"ext/json/utf8_decode.c",
			"line":	156,
			"primary_score":	999994,
			"second_score":	121961
		}, {
			"file":	"ext/json/utf8_decode.c",
			"line":	168,
			"primary_score":	999998,
			"second_score":	121960
		}, {
			"file":	"ext/json/utf8_decode.c",
			"line":	178,
			"primary_score":	1000000,
			"second_score":	121959
		}, {
			"file":	"ext/json/utf8_to_utf16.c",
			"line":	35,
			"primary_score":	999973,
			"second_score":	121840
		}, {
			"file":	"ext/json/utf8_to_utf16.c",
			"line":	36,
			"primary_score":	999973,
			"second_score":	121839
		}, {
			"file":	"ext/json/utf8_to_utf16.c",
			"line":	37,
			"primary_score":	999973,
			"second_score":	121838
		}, {
			"file":	"ext/json/utf8_to_utf16.c",
			"line":	39,
			"primary_score":	999973,
			"second_score":	121837
		}, {
			"file":	"ext/json/utf8_to_utf16.c",
			"line":	40,
			"primary_score":	999973,
			"second_score":	121831
		}, {
			"file":	"ext/json/utf8_to_utf16.c",
			"line":	41,
			"primary_score":	999973,
			"second_score":	121776
		}, {
			"file":	"ext/json/utf8_to_utf16.c",
			"line":	42,
			"primary_score":	999973,
			"second_score":	121771
		}, {
			"file":	"ext/json/utf8_to_utf16.c",
			"line":	43,
			"primary_score":	999973,
			"second_score":	121770
		}, {
			"file":	"ext/json/utf8_to_utf16.c",
			"line":	45,
			"primary_score":	999973,
			"second_score":	121779
		}, {
			"file":	"ext/json/utf8_to_utf16.c",
			"line":	46,
			"primary_score":	999973,
			"second_score":	121778
		}, {
			"file":	"ext/json/utf8_to_utf16.c",
			"line":	47,
			"primary_score":	999973,
			"second_score":	121777
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	581,
			"primary_score":	999861,
			"second_score":	54208
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	583,
			"primary_score":	999861,
			"second_score":	54207
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	585,
			"primary_score":	999861,
			"second_score":	54206
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	586,
			"primary_score":	999861,
			"second_score":	54205
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	587,
			"primary_score":	999861,
			"second_score":	54186
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	683,
			"primary_score":	999861,
			"second_score":	54210
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	690,
			"primary_score":	999861,
			"second_score":	54209
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	692,
			"primary_score":	999861,
			"second_score":	54185
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	699,
			"primary_score":	999861,
			"second_score":	118750
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	700,
			"primary_score":	999861,
			"second_score":	118749
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	701,
			"primary_score":	999861,
			"second_score":	118748
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	703,
			"primary_score":	999861,
			"second_score":	118747
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	704,
			"primary_score":	999861,
			"second_score":	118746
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	707,
			"primary_score":	999861,
			"second_score":	118745
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	711,
			"primary_score":	999861,
			"second_score":	118744
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	712,
			"primary_score":	999861,
			"second_score":	118740
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	717,
			"primary_score":	999861,
			"second_score":	118739
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	719,
			"primary_score":	999861,
			"second_score":	118738
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	113,
			"primary_score":	999861,
			"second_score":	54730
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	163,
			"primary_score":	999861,
			"second_score":	55358
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	165,
			"primary_score":	999861,
			"second_score":	54734
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	199,
			"primary_score":	999861,
			"second_score":	64576
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	203,
			"primary_score":	999861,
			"second_score":	64557
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	389,
			"primary_score":	999861,
			"second_score":	64477
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	390,
			"primary_score":	999861,
			"second_score":	64468
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	391,
			"primary_score":	999861,
			"second_score":	63128
		}, {
			"file":	"ext/pdo/pdo_sqlstate.c",
			"line":	309,
			"primary_score":	999861,
			"second_score":	64467
		}, {
			"file":	"ext/pdo_sqlite/pdo_sqlite.c",
			"line":	87,
			"primary_score":	999861,
			"second_score":	64577
		}, {
			"file":	"ext/pdo_sqlite/pdo_sqlite.c",
			"line":	88,
			"primary_score":	999861,
			"second_score":	64519
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1102,
			"primary_score":	999861,
			"second_score":	98906
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1104,
			"primary_score":	999861,
			"second_score":	98905
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1105,
			"primary_score":	999861,
			"second_score":	98880
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1106,
			"primary_score":	999861,
			"second_score":	98843
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1107,
			"primary_score":	999861,
			"second_score":	98816
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1108,
			"primary_score":	999861,
			"second_score":	98790
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1109,
			"primary_score":	999861,
			"second_score":	98763
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1110,
			"primary_score":	999861,
			"second_score":	98732
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1111,
			"primary_score":	999861,
			"second_score":	98703
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1112,
			"primary_score":	999861,
			"second_score":	98674
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1113,
			"primary_score":	999861,
			"second_score":	98646
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1114,
			"primary_score":	999861,
			"second_score":	98617
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1115,
			"primary_score":	999861,
			"second_score":	98588
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1116,
			"primary_score":	999861,
			"second_score":	98559
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1117,
			"primary_score":	999861,
			"second_score":	98530
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1118,
			"primary_score":	999861,
			"second_score":	98501
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1119,
			"primary_score":	999861,
			"second_score":	98473
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1120,
			"primary_score":	999861,
			"second_score":	98442
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1121,
			"primary_score":	999861,
			"second_score":	98411
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1122,
			"primary_score":	999861,
			"second_score":	98378
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1123,
			"primary_score":	999861,
			"second_score":	98353
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1124,
			"primary_score":	999861,
			"second_score":	98329
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1125,
			"primary_score":	999861,
			"second_score":	98299
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3394,
			"primary_score":	999861,
			"second_score":	133538
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3396,
			"primary_score":	999861,
			"second_score":	133536
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3400,
			"primary_score":	999861,
			"second_score":	133535
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3404,
			"primary_score":	999861,
			"second_score":	133534
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3527,
			"primary_score":	999861,
			"second_score":	98291
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3557,
			"primary_score":	999861,
			"second_score":	98944
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3559,
			"primary_score":	999861,
			"second_score":	98907
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3561,
			"primary_score":	999861,
			"second_score":	98298
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3562,
			"primary_score":	999861,
			"second_score":	98297
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3570,
			"primary_score":	999861,
			"second_score":	98296
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3575,
			"primary_score":	999861,
			"second_score":	98295
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3617,
			"primary_score":	999861,
			"second_score":	119315
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3619,
			"primary_score":	999861,
			"second_score":	119314
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3621,
			"primary_score":	999861,
			"second_score":	119313
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3657,
			"primary_score":	999861,
			"second_score":	119312
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3658,
			"primary_score":	999861,
			"second_score":	119311
		}, {
			"file":	"ext/session/session.c",
			"line":	93,
			"primary_score":	999861,
			"second_score":	119248
		}, {
			"file":	"ext/session/session.c",
			"line":	98,
			"primary_score":	999861,
			"second_score":	119247
		}, {
			"file":	"ext/session/session.c",
			"line":	103,
			"primary_score":	999861,
			"second_score":	119246
		}, {
			"file":	"ext/session/session.c",
			"line":	1441,
			"primary_score":	999861,
			"second_score":	119250
		}, {
			"file":	"ext/session/session.c",
			"line":	1958,
			"primary_score":	999861,
			"second_score":	119252
		}, {
			"file":	"ext/session/session.c",
			"line":	1960,
			"primary_score":	999861,
			"second_score":	119251
		}, {
			"file":	"ext/session/session.c",
			"line":	1961,
			"primary_score":	999861,
			"second_score":	119249
		}, {
			"file":	"ext/session/session.c",
			"line":	1964,
			"primary_score":	999861,
			"second_score":	119245
		}, {
			"file":	"ext/session/session.c",
			"line":	1965,
			"primary_score":	999861,
			"second_score":	119239
		}, {
			"file":	"ext/session/session.c",
			"line":	1971,
			"primary_score":	999861,
			"second_score":	119238
		}, {
			"file":	"ext/session/session.c",
			"line":	2013,
			"primary_score":	999861,
			"second_score":	67036
		}, {
			"file":	"ext/session/session.c",
			"line":	2019,
			"primary_score":	999861,
			"second_score":	65604
		}, {
			"file":	"ext/session/session.c",
			"line":	2020,
			"primary_score":	999861,
			"second_score":	65603
		}, {
			"file":	"ext/session/session.c",
			"line":	2022,
			"primary_score":	999861,
			"second_score":	65602
		}, {
			"file":	"ext/simplexml/simplexml.c",
			"line":	2600,
			"primary_score":	999861,
			"second_score":	98003
		}, {
			"file":	"ext/simplexml/simplexml.c",
			"line":	2601,
			"primary_score":	999861,
			"second_score":	98002
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	919,
			"primary_score":	999861,
			"second_score":	119234
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	924,
			"primary_score":	999861,
			"second_score":	119233
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	929,
			"primary_score":	999861,
			"second_score":	119232
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	932,
			"primary_score":	999861,
			"second_score":	119231
		}, {
			"file":	"ext/sqlite3/sqlite3.c",
			"line":	2140,
			"primary_score":	999861,
			"second_score":	56002
		}, {
			"file":	"ext/sqlite3/sqlite3.c",
			"line":	2142,
			"primary_score":	999861,
			"second_score":	55393
		}, {
			"file":	"ext/standard/array.c",
			"line":	138,
			"primary_score":	999861,
			"second_score":	97581
		}, {
			"file":	"ext/standard/assert.c",
			"line":	114,
			"primary_score":	999861,
			"second_score":	97579
		}, {
			"file":	"ext/standard/assert.c",
			"line":	118,
			"primary_score":	999861,
			"second_score":	97578
		}, {
			"file":	"ext/standard/assert.c",
			"line":	124,
			"primary_score":	999861,
			"second_score":	119286
		}, {
			"file":	"ext/standard/assert.c",
			"line":	129,
			"primary_score":	999861,
			"second_score":	119285
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3470,
			"primary_score":	999861,
			"second_score":	97775
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3471,
			"primary_score":	999861,
			"second_score":	97774
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3472,
			"primary_score":	999861,
			"second_score":	97735
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3645,
			"primary_score":	999861,
			"second_score":	97779
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3653,
			"primary_score":	999861,
			"second_score":	97776
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3659,
			"primary_score":	999861,
			"second_score":	97734
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3661,
			"primary_score":	999861,
			"second_score":	97693
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3662,
			"primary_score":	999861,
			"second_score":	97655
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3665,
			"primary_score":	999861,
			"second_score":	97618
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3666,
			"primary_score":	999861,
			"second_score":	97582
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3667,
			"primary_score":	999861,
			"second_score":	97580
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3668,
			"primary_score":	999861,
			"second_score":	97577
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3669,
			"primary_score":	999861,
			"second_score":	96500
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3670,
			"primary_score":	999861,
			"second_score":	96497
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3675,
			"primary_score":	999861,
			"second_score":	96175
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3678,
			"primary_score":	999861,
			"second_score":	96172
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3726,
			"primary_score":	999861,
			"second_score":	119307
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3729,
			"primary_score":	999861,
			"second_score":	119306
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3730,
			"primary_score":	999861,
			"second_score":	119305
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3732,
			"primary_score":	999861,
			"second_score":	119304
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3735,
			"primary_score":	999861,
			"second_score":	119296
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3741,
			"primary_score":	999861,
			"second_score":	119295
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3746,
			"primary_score":	999861,
			"second_score":	119294
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3747,
			"primary_score":	999861,
			"second_score":	119292
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3752,
			"primary_score":	999861,
			"second_score":	119291
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3758,
			"primary_score":	999861,
			"second_score":	119287
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3759,
			"primary_score":	999861,
			"second_score":	119284
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3760,
			"primary_score":	999861,
			"second_score":	119273
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3765,
			"primary_score":	999861,
			"second_score":	119262
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3771,
			"primary_score":	999861,
			"second_score":	119261
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3773,
			"primary_score":	999861,
			"second_score":	119258
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3774,
			"primary_score":	999861,
			"second_score":	119257
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3775,
			"primary_score":	999861,
			"second_score":	119256
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4526,
			"primary_score":	999861,
			"second_score":	122373
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4527,
			"primary_score":	999861,
			"second_score":	122372
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4528,
			"primary_score":	999861,
			"second_score":	122371
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4530,
			"primary_score":	999861,
			"second_score":	122370
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4534,
			"primary_score":	999861,
			"second_score":	122303
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4536,
			"primary_score":	999861,
			"second_score":	122272
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4545,
			"primary_score":	999861,
			"second_score":	122271
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5006,
			"primary_score":	999861,
			"second_score":	120140
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5018,
			"primary_score":	999861,
			"second_score":	118725
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5024,
			"primary_score":	999861,
			"second_score":	118724
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	234,
			"primary_score":	999861,
			"second_score":	97617
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	235,
			"primary_score":	999861,
			"second_score":	97584
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	238,
			"primary_score":	999861,
			"second_score":	97583
		}, {
			"file":	"ext/standard/crypt.c",
			"line":	130,
			"primary_score":	999861,
			"second_score":	96174
		}, {
			"file":	"ext/standard/crypt.c",
			"line":	133,
			"primary_score":	999861,
			"second_score":	96173
		}, {
			"file":	"ext/standard/file.c",
			"line":	318,
			"primary_score":	999861,
			"second_score":	96499
		}, {
			"file":	"ext/standard/file.c",
			"line":	320,
			"primary_score":	999861,
			"second_score":	96498
		}, {
			"file":	"ext/standard/file.c",
			"line":	2342,
			"primary_score":	999861,
			"second_score":	122067
		}, {
			"file":	"ext/standard/file.c",
			"line":	2343,
			"primary_score":	999861,
			"second_score":	122066
		}, {
			"file":	"ext/standard/file.c",
			"line":	2344,
			"primary_score":	999861,
			"second_score":	122065
		}, {
			"file":	"ext/standard/file.c",
			"line":	2346,
			"primary_score":	999861,
			"second_score":	122064
		}, {
			"file":	"ext/standard/file.c",
			"line":	2350,
			"primary_score":	999861,
			"second_score":	121954
		}, {
			"file":	"ext/standard/file.c",
			"line":	2351,
			"primary_score":	999861,
			"second_score":	121709
		}, {
			"file":	"ext/standard/file.c",
			"line":	2360,
			"primary_score":	999861,
			"second_score":	121705
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	110,
			"primary_score":	999861,
			"second_score":	119290
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	114,
			"primary_score":	999861,
			"second_score":	119289
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	118,
			"primary_score":	999861,
			"second_score":	119288
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2148,
			"primary_score":	999861,
			"second_score":	96496
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2150,
			"primary_score":	999861,
			"second_score":	96495
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2151,
			"primary_score":	999861,
			"second_score":	96216
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2153,
			"primary_score":	999861,
			"second_score":	96176
		}, {
			"file":	"ext/standard/head.c",
			"line":	68,
			"primary_score":	999861,
			"second_score":	129725
		}, {
			"file":	"ext/standard/head.c",
			"line":	71,
			"primary_score":	999861,
			"second_score":	129624
		}, {
			"file":	"ext/standard/info.c",
			"line":	527,
			"primary_score":	999861,
			"second_score":	123595
		}, {
			"file":	"ext/standard/info.c",
			"line":	528,
			"primary_score":	999861,
			"second_score":	123594
		}, {
			"file":	"ext/standard/info.c",
			"line":	577,
			"primary_score":	999861,
			"second_score":	123593
		}, {
			"file":	"ext/standard/info.c",
			"line":	578,
			"primary_score":	999861,
			"second_score":	123592
		}, {
			"file":	"ext/standard/info.c",
			"line":	605,
			"primary_score":	999861,
			"second_score":	123591
		}, {
			"file":	"ext/standard/info.c",
			"line":	607,
			"primary_score":	999861,
			"second_score":	123590
		}, {
			"file":	"ext/standard/info.c",
			"line":	609,
			"primary_score":	999861,
			"second_score":	123589
		}, {
			"file":	"ext/standard/info.c",
			"line":	611,
			"primary_score":	999861,
			"second_score":	123588
		}, {
			"file":	"ext/standard/info.c",
			"line":	613,
			"primary_score":	999861,
			"second_score":	123587
		}, {
			"file":	"ext/standard/info.c",
			"line":	616,
			"primary_score":	999861,
			"second_score":	123586
		}, {
			"file":	"ext/standard/info.c",
			"line":	619,
			"primary_score":	999861,
			"second_score":	122879
		}, {
			"file":	"ext/standard/info.c",
			"line":	627,
			"primary_score":	999861,
			"second_score":	122878
		}, {
			"file":	"ext/standard/info.c",
			"line":	1153,
			"primary_score":	999861,
			"second_score":	124544
		}, {
			"file":	"ext/standard/info.c",
			"line":	1154,
			"primary_score":	999861,
			"second_score":	124543
		}, {
			"file":	"ext/standard/info.c",
			"line":	1156,
			"primary_score":	999861,
			"second_score":	124542
		}, {
			"file":	"ext/standard/info.c",
			"line":	1160,
			"primary_score":	999861,
			"second_score":	124504
		}, {
			"file":	"ext/standard/info.c",
			"line":	1161,
			"primary_score":	999861,
			"second_score":	124503
		}, {
			"file":	"ext/standard/info.c",
			"line":	1280,
			"primary_score":	999861,
			"second_score":	123638
		}, {
			"file":	"ext/standard/info.c",
			"line":	1281,
			"primary_score":	999861,
			"second_score":	123637
		}, {
			"file":	"ext/standard/info.c",
			"line":	1283,
			"primary_score":	999861,
			"second_score":	123636
		}, {
			"file":	"ext/standard/info.c",
			"line":	1286,
			"primary_score":	999861,
			"second_score":	123598
		}, {
			"file":	"ext/standard/info.c",
			"line":	1295,
			"primary_score":	999861,
			"second_score":	120519
		}, {
			"file":	"ext/standard/info.c",
			"line":	1299,
			"primary_score":	999861,
			"second_score":	120486
		}, {
			"file":	"ext/standard/info.c",
			"line":	1302,
			"primary_score":	999861,
			"second_score":	120485
		}, {
			"file":	"ext/standard/quot_print.c",
			"line":	39,
			"primary_score":	1000000,
			"second_score":	128617
		}, {
			"file":	"ext/standard/quot_print.c",
			"line":	40,
			"primary_score":	1000000,
			"second_score":	128616
		}, {
			"file":	"ext/standard/quot_print.c",
			"line":	42,
			"primary_score":	1000000,
			"second_score":	128619
		}, {
			"file":	"ext/standard/quot_print.c",
			"line":	43,
			"primary_score":	1000000,
			"second_score":	128618
		}, {
			"file":	"ext/standard/quot_print.c",
			"line":	202,
			"primary_score":	1000000,
			"second_score":	128716
		}, {
			"file":	"ext/standard/quot_print.c",
			"line":	203,
			"primary_score":	1000000,
			"second_score":	128715
		}, {
			"file":	"ext/standard/quot_print.c",
			"line":	205,
			"primary_score":	1000000,
			"second_score":	128714
		}, {
			"file":	"ext/standard/quot_print.c",
			"line":	209,
			"primary_score":	1000000,
			"second_score":	128647
		}, {
			"file":	"ext/standard/quot_print.c",
			"line":	214,
			"primary_score":	1000000,
			"second_score":	128646
		}, {
			"file":	"ext/standard/quot_print.c",
			"line":	215,
			"primary_score":	1000000,
			"second_score":	128645
		}, {
			"file":	"ext/standard/quot_print.c",
			"line":	216,
			"primary_score":	1000000,
			"second_score":	128623
		}, {
			"file":	"ext/standard/quot_print.c",
			"line":	217,
			"primary_score":	1000000,
			"second_score":	128622
		}, {
			"file":	"ext/standard/quot_print.c",
			"line":	223,
			"primary_score":	1000000,
			"second_score":	128621
		}, {
			"file":	"ext/standard/quot_print.c",
			"line":	225,
			"primary_score":	1000000,
			"second_score":	128615
		}, {
			"file":	"ext/standard/quot_print.c",
			"line":	248,
			"primary_score":	1000000,
			"second_score":	128614
		}, {
			"file":	"ext/standard/quot_print.c",
			"line":	253,
			"primary_score":	1000000,
			"second_score":	128613
		}, {
			"file":	"ext/standard/quot_print.c",
			"line":	255,
			"primary_score":	1000000,
			"second_score":	128612
		}, {
			"file":	"ext/standard/string.c",
			"line":	1058,
			"primary_score":	999861,
			"second_score":	122817
		}, {
			"file":	"ext/standard/string.c",
			"line":	1059,
			"primary_score":	999861,
			"second_score":	122816
		}, {
			"file":	"ext/standard/string.c",
			"line":	1060,
			"primary_score":	999861,
			"second_score":	122815
		}, {
			"file":	"ext/standard/string.c",
			"line":	1061,
			"primary_score":	999861,
			"second_score":	122814
		}, {
			"file":	"ext/standard/string.c",
			"line":	1062,
			"primary_score":	999861,
			"second_score":	122813
		}, {
			"file":	"ext/standard/string.c",
			"line":	1063,
			"primary_score":	999861,
			"second_score":	122812
		}, {
			"file":	"ext/standard/string.c",
			"line":	1065,
			"primary_score":	999861,
			"second_score":	122811
		}, {
			"file":	"ext/standard/string.c",
			"line":	1067,
			"primary_score":	999861,
			"second_score":	122808
		}, {
			"file":	"ext/standard/string.c",
			"line":	1071,
			"primary_score":	999861,
			"second_score":	122807
		}, {
			"file":	"ext/standard/string.c",
			"line":	1073,
			"primary_score":	999861,
			"second_score":	122803
		}, {
			"file":	"ext/standard/string.c",
			"line":	1074,
			"primary_score":	999861,
			"second_score":	121794
		}, {
			"file":	"ext/standard/string.c",
			"line":	1076,
			"primary_score":	999861,
			"second_score":	122791
		}, {
			"file":	"ext/standard/string.c",
			"line":	1077,
			"primary_score":	999861,
			"second_score":	121785
		}, {
			"file":	"ext/standard/string.c",
			"line":	1124,
			"primary_score":	999861,
			"second_score":	121784
		}, {
			"file":	"ext/standard/string.c",
			"line":	1125,
			"primary_score":	999861,
			"second_score":	121815
		}, {
			"file":	"ext/standard/string.c",
			"line":	1127,
			"primary_score":	999861,
			"second_score":	121783
		}, {
			"file":	"ext/standard/string.c",
			"line":	1129,
			"primary_score":	999861,
			"second_score":	121772
		}, {
			"file":	"ext/standard/string.c",
			"line":	1131,
			"primary_score":	999861,
			"second_score":	121769
		}, {
			"file":	"ext/standard/string.c",
			"line":	1132,
			"primary_score":	999861,
			"second_score":	121768
		}, {
			"file":	"ext/standard/string.c",
			"line":	1144,
			"primary_score":	999861,
			"second_score":	122918
		}, {
			"file":	"ext/standard/string.c",
			"line":	1146,
			"primary_score":	999861,
			"second_score":	122917
		}, {
			"file":	"ext/standard/string.c",
			"line":	1150,
			"primary_score":	999861,
			"second_score":	122825
		}, {
			"file":	"ext/standard/string.c",
			"line":	1163,
			"primary_score":	999861,
			"second_score":	122824
		}, {
			"file":	"ext/standard/string.c",
			"line":	1167,
			"primary_score":	999861,
			"second_score":	122823
		}, {
			"file":	"ext/standard/string.c",
			"line":	1168,
			"primary_score":	999861,
			"second_score":	122822
		}, {
			"file":	"ext/standard/string.c",
			"line":	1169,
			"primary_score":	999861,
			"second_score":	122821
		}, {
			"file":	"ext/standard/string.c",
			"line":	1170,
			"primary_score":	999861,
			"second_score":	122819
		}, {
			"file":	"ext/standard/string.c",
			"line":	1177,
			"primary_score":	999861,
			"second_score":	122818
		}, {
			"file":	"ext/standard/string.c",
			"line":	1179,
			"primary_score":	999861,
			"second_score":	121759
		}, {
			"file":	"ext/standard/string.c",
			"line":	3536,
			"primary_score":	999861,
			"second_score":	120065
		}, {
			"file":	"ext/standard/string.c",
			"line":	3539,
			"primary_score":	999861,
			"second_score":	120064
		}, {
			"file":	"ext/standard/string.c",
			"line":	3540,
			"primary_score":	999861,
			"second_score":	120063
		}, {
			"file":	"ext/standard/string.c",
			"line":	3543,
			"primary_score":	999861,
			"second_score":	120062
		}, {
			"file":	"ext/standard/string.c",
			"line":	3544,
			"primary_score":	999861,
			"second_score":	120017
		}, {
			"file":	"ext/standard/string.c",
			"line":	3545,
			"primary_score":	999861,
			"second_score":	120016
		}, {
			"file":	"ext/standard/string.c",
			"line":	3546,
			"primary_score":	999861,
			"second_score":	120015
		}, {
			"file":	"ext/standard/string.c",
			"line":	3547,
			"primary_score":	999861,
			"second_score":	119981
		}, {
			"file":	"ext/standard/string.c",
			"line":	3647,
			"primary_score":	999861,
			"second_score":	120210
		}, {
			"file":	"ext/standard/string.c",
			"line":	3648,
			"primary_score":	999861,
			"second_score":	120209
		}, {
			"file":	"ext/standard/string.c",
			"line":	3649,
			"primary_score":	999861,
			"second_score":	120208
		}, {
			"file":	"ext/standard/string.c",
			"line":	3650,
			"primary_score":	999861,
			"second_score":	120207
		}, {
			"file":	"ext/standard/string.c",
			"line":	3651,
			"primary_score":	999861,
			"second_score":	120206
		}, {
			"file":	"ext/standard/string.c",
			"line":	3652,
			"primary_score":	999861,
			"second_score":	120205
		}, {
			"file":	"ext/standard/string.c",
			"line":	3653,
			"primary_score":	999861,
			"second_score":	120204
		}, {
			"file":	"ext/standard/string.c",
			"line":	3655,
			"primary_score":	999861,
			"second_score":	120203
		}, {
			"file":	"ext/standard/string.c",
			"line":	3659,
			"primary_score":	999861,
			"second_score":	120081
		}, {
			"file":	"ext/standard/string.c",
			"line":	3660,
			"primary_score":	999861,
			"second_score":	120078
		}, {
			"file":	"ext/standard/string.c",
			"line":	3661,
			"primary_score":	999861,
			"second_score":	120075
		}, {
			"file":	"ext/standard/string.c",
			"line":	3664,
			"primary_score":	999861,
			"second_score":	120072
		}, {
			"file":	"ext/standard/string.c",
			"line":	3665,
			"primary_score":	999861,
			"second_score":	120071
		}, {
			"file":	"ext/standard/string.c",
			"line":	3666,
			"primary_score":	999861,
			"second_score":	120069
		}, {
			"file":	"ext/standard/string.c",
			"line":	3672,
			"primary_score":	999861,
			"second_score":	120067
		}, {
			"file":	"ext/standard/string.c",
			"line":	3703,
			"primary_score":	999861,
			"second_score":	120066
		}, {
			"file":	"ext/standard/string.c",
			"line":	3705,
			"primary_score":	999861,
			"second_score":	119980
		}, {
			"file":	"ext/standard/string.c",
			"line":	3716,
			"primary_score":	999861,
			"second_score":	120211
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	121,
			"primary_score":	999861,
			"second_score":	97778
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	125,
			"primary_score":	999861,
			"second_score":	97777
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1083,
			"primary_score":	999861,
			"second_score":	97576
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1085,
			"primary_score":	999861,
			"second_score":	96501
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1097,
			"primary_score":	999861,
			"second_score":	119283
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1102,
			"primary_score":	999861,
			"second_score":	119282
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1103,
			"primary_score":	999861,
			"second_score":	119278
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1105,
			"primary_score":	999861,
			"second_score":	119274
		}, {
			"file":	"ext/standard/user_filters.c",
			"line":	129,
			"primary_score":	999861,
			"second_score":	119260
		}, {
			"file":	"ext/standard/user_filters.c",
			"line":	135,
			"primary_score":	999861,
			"second_score":	119259
		}, {
			"file":	"ext/standard/var.c",
			"line":	89,
			"primary_score":	999888,
			"second_score":	121029
		}, {
			"file":	"ext/standard/var.c",
			"line":	90,
			"primary_score":	999888,
			"second_score":	121028
		}, {
			"file":	"ext/standard/var.c",
			"line":	91,
			"primary_score":	999888,
			"second_score":	121027
		}, {
			"file":	"ext/standard/var.c",
			"line":	92,
			"primary_score":	999888,
			"second_score":	121026
		}, {
			"file":	"ext/standard/var.c",
			"line":	93,
			"primary_score":	999888,
			"second_score":	121025
		}, {
			"file":	"ext/standard/var.c",
			"line":	95,
			"primary_score":	999888,
			"second_score":	121024
		}, {
			"file":	"ext/standard/var.c",
			"line":	99,
			"primary_score":	999888,
			"second_score":	121023
		}, {
			"file":	"ext/standard/var.c",
			"line":	108,
			"primary_score":	999980,
			"second_score":	120733
		}, {
			"file":	"ext/standard/var.c",
			"line":	174,
			"primary_score":	999888,
			"second_score":	121120
		}, {
			"file":	"ext/standard/var.c",
			"line":	175,
			"primary_score":	999888,
			"second_score":	121119
		}, {
			"file":	"ext/standard/var.c",
			"line":	176,
			"primary_score":	999888,
			"second_score":	121118
		}, {
			"file":	"ext/standard/var.c",
			"line":	178,
			"primary_score":	999888,
			"second_score":	121117
		}, {
			"file":	"ext/standard/var.c",
			"line":	182,
			"primary_score":	999888,
			"second_score":	121031
		}, {
			"file":	"ext/standard/var.c",
			"line":	183,
			"primary_score":	999888,
			"second_score":	121030
		}, {
			"file":	"ext/standard/var.c",
			"line":	185,
			"primary_score":	999888,
			"second_score":	120732
		}, {
			"file":	"ext/xmlreader/php_xmlreader.c",
			"line":	1378,
			"primary_score":	999861,
			"second_score":	100789
		}, {
			"file":	"ext/xmlreader/php_xmlreader.c",
			"line":	1379,
			"primary_score":	999861,
			"second_score":	100696
		}, {
			"file":	"ext/xmlwriter/php_xmlwriter.c",
			"line":	1972,
			"primary_score":	999861,
			"second_score":	103479
		}, {
			"file":	"main/SAPI.c",
			"line":	69,
			"primary_score":	999861,
			"second_score":	3134
		}, {
			"file":	"main/SAPI.c",
			"line":	101,
			"primary_score":	999861,
			"second_score":	3135
		}, {
			"file":	"main/SAPI.c",
			"line":	104,
			"primary_score":	999861,
			"second_score":	3113
		}, {
			"file":	"main/SAPI.c",
			"line":	106,
			"primary_score":	999861,
			"second_score":	3112
		}, {
			"file":	"main/SAPI.c",
			"line":	116,
			"primary_score":	999861,
			"second_score":	129654
		}, {
			"file":	"main/SAPI.c",
			"line":	283,
			"primary_score":	999861,
			"second_score":	129717
		}, {
			"file":	"main/SAPI.c",
			"line":	284,
			"primary_score":	999861,
			"second_score":	129716
		}, {
			"file":	"main/SAPI.c",
			"line":	286,
			"primary_score":	999861,
			"second_score":	129715
		}, {
			"file":	"main/SAPI.c",
			"line":	287,
			"primary_score":	999861,
			"second_score":	129714
		}, {
			"file":	"main/SAPI.c",
			"line":	288,
			"primary_score":	999861,
			"second_score":	129713
		}, {
			"file":	"main/SAPI.c",
			"line":	293,
			"primary_score":	999861,
			"second_score":	129712
		}, {
			"file":	"main/SAPI.c",
			"line":	294,
			"primary_score":	999861,
			"second_score":	129711
		}, {
			"file":	"main/SAPI.c",
			"line":	295,
			"primary_score":	999861,
			"second_score":	129710
		}, {
			"file":	"main/SAPI.c",
			"line":	301,
			"primary_score":	999861,
			"second_score":	129709
		}, {
			"file":	"main/SAPI.c",
			"line":	313,
			"primary_score":	999861,
			"second_score":	129708
		}, {
			"file":	"main/SAPI.c",
			"line":	314,
			"primary_score":	999861,
			"second_score":	129707
		}, {
			"file":	"main/SAPI.c",
			"line":	315,
			"primary_score":	999861,
			"second_score":	129685
		}, {
			"file":	"main/SAPI.c",
			"line":	317,
			"primary_score":	999861,
			"second_score":	129684
		}, {
			"file":	"main/SAPI.c",
			"line":	479,
			"primary_score":	999861,
			"second_score":	113389
		}, {
			"file":	"main/SAPI.c",
			"line":	487,
			"primary_score":	999861,
			"second_score":	113430
		}, {
			"file":	"main/SAPI.c",
			"line":	488,
			"primary_score":	999861,
			"second_score":	113426
		}, {
			"file":	"main/SAPI.c",
			"line":	491,
			"primary_score":	999861,
			"second_score":	113425
		}, {
			"file":	"main/SAPI.c",
			"line":	493,
			"primary_score":	999861,
			"second_score":	113424
		}, {
			"file":	"main/SAPI.c",
			"line":	504,
			"primary_score":	999861,
			"second_score":	113423
		}, {
			"file":	"main/SAPI.c",
			"line":	507,
			"primary_score":	999861,
			"second_score":	113422
		}, {
			"file":	"main/SAPI.c",
			"line":	510,
			"primary_score":	999861,
			"second_score":	113421
		}, {
			"file":	"main/SAPI.c",
			"line":	513,
			"primary_score":	999861,
			"second_score":	113420
		}, {
			"file":	"main/SAPI.c",
			"line":	516,
			"primary_score":	999861,
			"second_score":	113419
		}, {
			"file":	"main/SAPI.c",
			"line":	519,
			"primary_score":	999861,
			"second_score":	113418
		}, {
			"file":	"main/SAPI.c",
			"line":	522,
			"primary_score":	999861,
			"second_score":	113417
		}, {
			"file":	"main/SAPI.c",
			"line":	523,
			"primary_score":	999861,
			"second_score":	113416
		}, {
			"file":	"main/SAPI.c",
			"line":	525,
			"primary_score":	999861,
			"second_score":	113412
		}, {
			"file":	"main/SAPI.c",
			"line":	528,
			"primary_score":	999861,
			"second_score":	113411
		}, {
			"file":	"main/SAPI.c",
			"line":	529,
			"primary_score":	999861,
			"second_score":	113410
		}, {
			"file":	"main/SAPI.c",
			"line":	530,
			"primary_score":	999861,
			"second_score":	113391
		}, {
			"file":	"main/SAPI.c",
			"line":	532,
			"primary_score":	999861,
			"second_score":	113390
		}, {
			"file":	"main/SAPI.c",
			"line":	533,
			"primary_score":	999861,
			"second_score":	113388
		}, {
			"file":	"main/SAPI.c",
			"line":	534,
			"primary_score":	999861,
			"second_score":	113387
		}, {
			"file":	"main/SAPI.c",
			"line":	535,
			"primary_score":	999861,
			"second_score":	113386
		}, {
			"file":	"main/SAPI.c",
			"line":	536,
			"primary_score":	999861,
			"second_score":	113385
		}, {
			"file":	"main/SAPI.c",
			"line":	605,
			"primary_score":	999861,
			"second_score":	129657
		}, {
			"file":	"main/SAPI.c",
			"line":	620,
			"primary_score":	999861,
			"second_score":	129655
		}, {
			"file":	"main/SAPI.c",
			"line":	809,
			"primary_score":	999861,
			"second_score":	119335
		}, {
			"file":	"main/SAPI.c",
			"line":	810,
			"primary_score":	999861,
			"second_score":	119334
		}, {
			"file":	"main/SAPI.c",
			"line":	812,
			"primary_score":	999861,
			"second_score":	119333
		}, {
			"file":	"main/SAPI.c",
			"line":	813,
			"primary_score":	999861,
			"second_score":	119332
		}, {
			"file":	"main/SAPI.c",
			"line":	819,
			"primary_score":	999861,
			"second_score":	129721
		}, {
			"file":	"main/SAPI.c",
			"line":	820,
			"primary_score":	999861,
			"second_score":	129720
		}, {
			"file":	"main/SAPI.c",
			"line":	821,
			"primary_score":	999861,
			"second_score":	129719
		}, {
			"file":	"main/SAPI.c",
			"line":	823,
			"primary_score":	999861,
			"second_score":	129718
		}, {
			"file":	"main/SAPI.c",
			"line":	824,
			"primary_score":	999861,
			"second_score":	129683
		}, {
			"file":	"main/SAPI.c",
			"line":	825,
			"primary_score":	999861,
			"second_score":	129682
		}, {
			"file":	"main/SAPI.c",
			"line":	826,
			"primary_score":	999861,
			"second_score":	129660
		}, {
			"file":	"main/SAPI.c",
			"line":	827,
			"primary_score":	999861,
			"second_score":	129659
		}, {
			"file":	"main/SAPI.c",
			"line":	828,
			"primary_score":	999861,
			"second_score":	129658
		}, {
			"file":	"main/SAPI.c",
			"line":	829,
			"primary_score":	999861,
			"second_score":	129635
		}, {
			"file":	"main/SAPI.c",
			"line":	832,
			"primary_score":	999861,
			"second_score":	129634
		}, {
			"file":	"main/SAPI.c",
			"line":	837,
			"primary_score":	999861,
			"second_score":	129633
		}, {
			"file":	"main/SAPI.c",
			"line":	839,
			"primary_score":	999861,
			"second_score":	129632
		}, {
			"file":	"main/SAPI.c",
			"line":	840,
			"primary_score":	999861,
			"second_score":	129631
		}, {
			"file":	"main/SAPI.c",
			"line":	845,
			"primary_score":	999861,
			"second_score":	129629
		}, {
			"file":	"main/SAPI.c",
			"line":	848,
			"primary_score":	999861,
			"second_score":	129628
		}, {
			"file":	"main/SAPI.c",
			"line":	879,
			"primary_score":	999861,
			"second_score":	129627
		}, {
			"file":	"main/SAPI.c",
			"line":	881,
			"primary_score":	999861,
			"second_score":	129625
		}, {
			"file":	"main/SAPI.c",
			"line":	950,
			"primary_score":	999861,
			"second_score":	103523
		}, {
			"file":	"main/SAPI.c",
			"line":	951,
			"primary_score":	999861,
			"second_score":	103522
		}, {
			"file":	"main/SAPI.c",
			"line":	952,
			"primary_score":	999861,
			"second_score":	103520
		}, {
			"file":	"main/getopt.c",
			"line":	174,
			"primary_score":	999861,
			"second_score":	154621
		}, {
			"file":	"main/getopt.c",
			"line":	175,
			"primary_score":	999861,
			"second_score":	154620
		}, {
			"file":	"main/getopt.c",
			"line":	177,
			"primary_score":	999861,
			"second_score":	154619
		}, {
			"file":	"main/getopt.c",
			"line":	178,
			"primary_score":	999861,
			"second_score":	154618
		}, {
			"file":	"main/getopt.c",
			"line":	185,
			"primary_score":	999861,
			"second_score":	154617
		}, {
			"file":	"main/main.c",
			"line":	591,
			"primary_score":	999882,
			"second_score":	121021
		}, {
			"file":	"main/main.c",
			"line":	592,
			"primary_score":	999882,
			"second_score":	121020
		}, {
			"file":	"main/main.c",
			"line":	593,
			"primary_score":	999882,
			"second_score":	121019
		}, {
			"file":	"main/main.c",
			"line":	594,
			"primary_score":	999882,
			"second_score":	121018
		}, {
			"file":	"main/main.c",
			"line":	595,
			"primary_score":	999882,
			"second_score":	121017
		}, {
			"file":	"main/main.c",
			"line":	597,
			"primary_score":	999882,
			"second_score":	121016
		}, {
			"file":	"main/main.c",
			"line":	598,
			"primary_score":	999882,
			"second_score":	121015
		}, {
			"file":	"main/main.c",
			"line":	599,
			"primary_score":	999882,
			"second_score":	120803
		}, {
			"file":	"main/main.c",
			"line":	600,
			"primary_score":	999882,
			"second_score":	120754
		}, {
			"file":	"main/main.c",
			"line":	601,
			"primary_score":	999882,
			"second_score":	120735
		}, {
			"file":	"main/main.c",
			"line":	603,
			"primary_score":	999882,
			"second_score":	120734
		}, {
			"file":	"main/main.c",
			"line":	1599,
			"primary_score":	999861,
			"second_score":	120159
		}, {
			"file":	"main/main.c",
			"line":	1600,
			"primary_score":	999861,
			"second_score":	120158
		}, {
			"file":	"main/main.c",
			"line":	1602,
			"primary_score":	999861,
			"second_score":	120157
		}, {
			"file":	"main/main.c",
			"line":	1607,
			"primary_score":	999861,
			"second_score":	120156
		}, {
			"file":	"main/main.c",
			"line":	1608,
			"primary_score":	999861,
			"second_score":	120155
		}, {
			"file":	"main/main.c",
			"line":	1610,
			"primary_score":	999861,
			"second_score":	120154
		}, {
			"file":	"main/main.c",
			"line":	1613,
			"primary_score":	999861,
			"second_score":	120147
		}, {
			"file":	"main/main.c",
			"line":	1614,
			"primary_score":	999861,
			"second_score":	120141
		}, {
			"file":	"main/main.c",
			"line":	1615,
			"primary_score":	999861,
			"second_score":	120139
		}, {
			"file":	"main/main.c",
			"line":	1618,
			"primary_score":	999861,
			"second_score":	120137
		}, {
			"file":	"main/main.c",
			"line":	1619,
			"primary_score":	999861,
			"second_score":	120131
		}, {
			"file":	"main/main.c",
			"line":	1620,
			"primary_score":	999861,
			"second_score":	119362
		}, {
			"file":	"main/main.c",
			"line":	1623,
			"primary_score":	999861,
			"second_score":	119360
		}, {
			"file":	"main/main.c",
			"line":	1624,
			"primary_score":	999861,
			"second_score":	119354
		}, {
			"file":	"main/main.c",
			"line":	1626,
			"primary_score":	999861,
			"second_score":	119353
		}, {
			"file":	"main/main.c",
			"line":	1632,
			"primary_score":	999861,
			"second_score":	119352
		}, {
			"file":	"main/main.c",
			"line":	1635,
			"primary_score":	999861,
			"second_score":	119351
		}, {
			"file":	"main/main.c",
			"line":	1637,
			"primary_score":	999861,
			"second_score":	119349
		}, {
			"file":	"main/main.c",
			"line":	1638,
			"primary_score":	999861,
			"second_score":	119344
		}, {
			"file":	"main/main.c",
			"line":	1641,
			"primary_score":	999861,
			"second_score":	119342
		}, {
			"file":	"main/main.c",
			"line":	1642,
			"primary_score":	999861,
			"second_score":	119336
		}, {
			"file":	"main/main.c",
			"line":	1643,
			"primary_score":	999861,
			"second_score":	119331
		}, {
			"file":	"main/main.c",
			"line":	1646,
			"primary_score":	999861,
			"second_score":	119329
		}, {
			"file":	"main/main.c",
			"line":	1647,
			"primary_score":	999861,
			"second_score":	119328
		}, {
			"file":	"main/main.c",
			"line":	1648,
			"primary_score":	999861,
			"second_score":	118726
		}, {
			"file":	"main/main.c",
			"line":	1652,
			"primary_score":	999861,
			"second_score":	118723
		}, {
			"file":	"main/main.c",
			"line":	1653,
			"primary_score":	999861,
			"second_score":	118717
		}, {
			"file":	"main/main.c",
			"line":	1655,
			"primary_score":	999861,
			"second_score":	118716
		}, {
			"file":	"main/main.c",
			"line":	1656,
			"primary_score":	999861,
			"second_score":	118578
		}, {
			"file":	"main/main.c",
			"line":	1657,
			"primary_score":	999861,
			"second_score":	118577
		}, {
			"file":	"main/main.c",
			"line":	1660,
			"primary_score":	999861,
			"second_score":	118543
		}, {
			"file":	"main/main.c",
			"line":	1663,
			"primary_score":	999861,
			"second_score":	118541
		}, {
			"file":	"main/main.c",
			"line":	1667,
			"primary_score":	999861,
			"second_score":	118540
		}, {
			"file":	"main/main.c",
			"line":	1673,
			"primary_score":	999861,
			"second_score":	118539
		}, {
			"file":	"main/main.c",
			"line":	1676,
			"primary_score":	999861,
			"second_score":	113449
		}, {
			"file":	"main/main.c",
			"line":	1677,
			"primary_score":	999861,
			"second_score":	113443
		}, {
			"file":	"main/main.c",
			"line":	1678,
			"primary_score":	999861,
			"second_score":	113439
		}, {
			"file":	"main/main.c",
			"line":	1681,
			"primary_score":	999861,
			"second_score":	113437
		}, {
			"file":	"main/main.c",
			"line":	1682,
			"primary_score":	999861,
			"second_score":	113431
		}, {
			"file":	"main/main.c",
			"line":	1683,
			"primary_score":	999861,
			"second_score":	113384
		}, {
			"file":	"main/main.c",
			"line":	1686,
			"primary_score":	999861,
			"second_score":	113382
		}, {
			"file":	"main/main.c",
			"line":	1687,
			"primary_score":	999861,
			"second_score":	113376
		}, {
			"file":	"main/main.c",
			"line":	1688,
			"primary_score":	999861,
			"second_score":	113373
		}, {
			"file":	"main/main.c",
			"line":	1691,
			"primary_score":	999861,
			"second_score":	113371
		}, {
			"file":	"main/main.c",
			"line":	1692,
			"primary_score":	999861,
			"second_score":	113365
		}, {
			"file":	"main/main.c",
			"line":	1693,
			"primary_score":	999861,
			"second_score":	112946
		}, {
			"file":	"main/main.c",
			"line":	1694,
			"primary_score":	999861,
			"second_score":	112944
		}, {
			"file":	"main/main.c",
			"line":	1697,
			"primary_score":	999861,
			"second_score":	103544
		}, {
			"file":	"main/main.c",
			"line":	1698,
			"primary_score":	999861,
			"second_score":	103538
		}, {
			"file":	"main/main.c",
			"line":	1699,
			"primary_score":	999861,
			"second_score":	103536
		}, {
			"file":	"main/main.c",
			"line":	1732,
			"primary_score":	999861,
			"second_score":	121359
		}, {
			"file":	"main/main.c",
			"line":	1733,
			"primary_score":	999861,
			"second_score":	121358
		}, {
			"file":	"main/main.c",
			"line":	1753,
			"primary_score":	999861,
			"second_score":	3150
		}, {
			"file":	"main/main.c",
			"line":	1756,
			"primary_score":	999861,
			"second_score":	3149
		}, {
			"file":	"main/main.c",
			"line":	1759,
			"primary_score":	999861,
			"second_score":	3148
		}, {
			"file":	"main/main.c",
			"line":	1762,
			"primary_score":	999861,
			"second_score":	3147
		}, {
			"file":	"main/main.c",
			"line":	1766,
			"primary_score":	999861,
			"second_score":	3146
		}, {
			"file":	"main/main.c",
			"line":	2198,
			"primary_score":	999861,
			"second_score":	103527
		}, {
			"file":	"main/main.c",
			"line":	2200,
			"primary_score":	999861,
			"second_score":	103526
		}, {
			"file":	"main/main.c",
			"line":	2202,
			"primary_score":	999861,
			"second_score":	103525
		}, {
			"file":	"main/main.c",
			"line":	2215,
			"primary_score":	999861,
			"second_score":	103524
		}, {
			"file":	"main/main.c",
			"line":	2217,
			"primary_score":	999861,
			"second_score":	103519
		}, {
			"file":	"main/main.c",
			"line":	2220,
			"primary_score":	999861,
			"second_score":	6121
		}, {
			"file":	"main/main.c",
			"line":	2222,
			"primary_score":	999861,
			"second_score":	6055
		}, {
			"file":	"main/main.c",
			"line":	2223,
			"primary_score":	999861,
			"second_score":	6026
		}, {
			"file":	"main/main.c",
			"line":	2226,
			"primary_score":	999861,
			"second_score":	3567
		}, {
			"file":	"main/main.c",
			"line":	2229,
			"primary_score":	999861,
			"second_score":	3244
		}, {
			"file":	"main/main.c",
			"line":	2230,
			"primary_score":	999861,
			"second_score":	3214
		}, {
			"file":	"main/main.c",
			"line":	2235,
			"primary_score":	999861,
			"second_score":	3191
		}, {
			"file":	"main/main.c",
			"line":	2236,
			"primary_score":	999861,
			"second_score":	3154
		}, {
			"file":	"main/main.c",
			"line":	2238,
			"primary_score":	999861,
			"second_score":	3152
		}, {
			"file":	"main/main.c",
			"line":	2241,
			"primary_score":	999861,
			"second_score":	3151
		}, {
			"file":	"main/main.c",
			"line":	2242,
			"primary_score":	999861,
			"second_score":	3141
		}, {
			"file":	"main/main.c",
			"line":	2346,
			"primary_score":	999861,
			"second_score":	120171
		}, {
			"file":	"main/main.c",
			"line":	2354,
			"primary_score":	999861,
			"second_score":	120169
		}, {
			"file":	"main/main.c",
			"line":	2357,
			"primary_score":	999861,
			"second_score":	120168
		}, {
			"file":	"main/main.c",
			"line":	2359,
			"primary_score":	999861,
			"second_score":	120166
		}, {
			"file":	"main/output.c",
			"line":	103,
			"primary_score":	999861,
			"second_score":	3190
		}, {
			"file":	"main/output.c",
			"line":	104,
			"primary_score":	999861,
			"second_score":	3176
		}, {
			"file":	"main/output.c",
			"line":	105,
			"primary_score":	999861,
			"second_score":	3162
		}, {
			"file":	"main/output.c",
			"line":	129,
			"primary_score":	999861,
			"second_score":	119348
		}, {
			"file":	"main/output.c",
			"line":	131,
			"primary_score":	999861,
			"second_score":	119347
		}, {
			"file":	"main/output.c",
			"line":	132,
			"primary_score":	999861,
			"second_score":	119346
		}, {
			"file":	"main/output.c",
			"line":	135,
			"primary_score":	999861,
			"second_score":	119345
		}, {
			"file":	"main/output.c",
			"line":	198,
			"primary_score":	999861,
			"second_score":	121357
		}, {
			"file":	"main/output.c",
			"line":	201,
			"primary_score":	999861,
			"second_score":	121356
		}, {
			"file":	"main/output.c",
			"line":	202,
			"primary_score":	999861,
			"second_score":	121310
		}, {
			"file":	"main/output.c",
			"line":	281,
			"primary_score":	999861,
			"second_score":	119350
		}, {
			"file":	"main/output.c",
			"line":	697,
			"primary_score":	999861,
			"second_score":	121351
		}, {
			"file":	"main/output.c",
			"line":	703,
			"primary_score":	999861,
			"second_score":	121350
		}, {
			"file":	"main/output.c",
			"line":	711,
			"primary_score":	999861,
			"second_score":	121348
		}, {
			"file":	"main/output.c",
			"line":	715,
			"primary_score":	999861,
			"second_score":	121347
		}, {
			"file":	"main/output.c",
			"line":	716,
			"primary_score":	999861,
			"second_score":	121346
		}, {
			"file":	"main/output.c",
			"line":	717,
			"primary_score":	999861,
			"second_score":	121345
		}, {
			"file":	"main/output.c",
			"line":	719,
			"primary_score":	999861,
			"second_score":	121344
		}, {
			"file":	"main/output.c",
			"line":	785,
			"primary_score":	999861,
			"second_score":	121312
		}, {
			"file":	"main/output.c",
			"line":	789,
			"primary_score":	999861,
			"second_score":	121311
		}, {
			"file":	"main/output.c",
			"line":	975,
			"primary_score":	999861,
			"second_score":	121355
		}, {
			"file":	"main/output.c",
			"line":	976,
			"primary_score":	999861,
			"second_score":	121354
		}, {
			"file":	"main/output.c",
			"line":	977,
			"primary_score":	999861,
			"second_score":	121353
		}, {
			"file":	"main/output.c",
			"line":	979,
			"primary_score":	999861,
			"second_score":	121352
		}, {
			"file":	"main/output.c",
			"line":	983,
			"primary_score":	999861,
			"second_score":	121349
		}, {
			"file":	"main/output.c",
			"line":	990,
			"primary_score":	999861,
			"second_score":	121343
		}, {
			"file":	"main/output.c",
			"line":	1002,
			"primary_score":	999861,
			"second_score":	121342
		}, {
			"file":	"main/output.c",
			"line":	1003,
			"primary_score":	999861,
			"second_score":	121341
		}, {
			"file":	"main/output.c",
			"line":	1006,
			"primary_score":	999861,
			"second_score":	121340
		}, {
			"file":	"main/output.c",
			"line":	1010,
			"primary_score":	999861,
			"second_score":	121339
		}, {
			"file":	"main/output.c",
			"line":	1011,
			"primary_score":	999861,
			"second_score":	129623
		}, {
			"file":	"main/output.c",
			"line":	1014,
			"primary_score":	999861,
			"second_score":	129621
		}, {
			"file":	"main/output.c",
			"line":	1015,
			"primary_score":	999861,
			"second_score":	129619
		}, {
			"file":	"main/output.c",
			"line":	1016,
			"primary_score":	999861,
			"second_score":	129616
		}, {
			"file":	"main/output.c",
			"line":	1022,
			"primary_score":	999861,
			"second_score":	121338
		}, {
			"file":	"main/output.c",
			"line":	1023,
			"primary_score":	999861,
			"second_score":	121320
		}, {
			"file":	"main/output.c",
			"line":	1024,
			"primary_score":	999861,
			"second_score":	121319
		}, {
			"file":	"main/output.c",
			"line":	1026,
			"primary_score":	999861,
			"second_score":	121314
		}, {
			"file":	"main/output.c",
			"line":	1028,
			"primary_score":	999861,
			"second_score":	121313
		}, {
			"file":	"main/php_ini.c",
			"line":	194,
			"primary_score":	999861,
			"second_score":	3256
		}, {
			"file":	"main/php_ini.c",
			"line":	197,
			"primary_score":	999861,
			"second_score":	3255
		}, {
			"file":	"main/php_ini.c",
			"line":	198,
			"primary_score":	999861,
			"second_score":	3254
		}, {
			"file":	"main/php_ini.c",
			"line":	729,
			"primary_score":	999861,
			"second_score":	3566
		}, {
			"file":	"main/php_ini.c",
			"line":	730,
			"primary_score":	999861,
			"second_score":	3247
		}, {
			"file":	"main/php_ini.c",
			"line":	734,
			"primary_score":	999861,
			"second_score":	3246
		}, {
			"file":	"main/php_ini.c",
			"line":	738,
			"primary_score":	999861,
			"second_score":	3245
		}, {
			"file":	"main/php_logos.c",
			"line":	67,
			"primary_score":	999861,
			"second_score":	6054
		}, {
			"file":	"main/php_logos.c",
			"line":	68,
			"primary_score":	999861,
			"second_score":	6027
		}, {
			"file":	"main/php_open_temporary_file.c",
			"line":	183,
			"primary_score":	999861,
			"second_score":	3153
		}, {
			"file":	"main/php_ticks.c",
			"line":	32,
			"primary_score":	999861,
			"second_score":	120153
		}, {
			"file":	"main/php_ticks.c",
			"line":	37,
			"primary_score":	999861,
			"second_score":	3145
		}, {
			"file":	"main/snprintf.c",
			"line":	317,
			"primary_score":	999902,
			"second_score":	120866
		}, {
			"file":	"main/snprintf.c",
			"line":	318,
			"primary_score":	999902,
			"second_score":	120865
		}, {
			"file":	"main/snprintf.c",
			"line":	320,
			"primary_score":	999902,
			"second_score":	120864
		}, {
			"file":	"main/snprintf.c",
			"line":	324,
			"primary_score":	999902,
			"second_score":	120863
		}, {
			"file":	"main/snprintf.c",
			"line":	335,
			"primary_score":	999902,
			"second_score":	120862
		}, {
			"file":	"main/snprintf.c",
			"line":	339,
			"primary_score":	999902,
			"second_score":	120861
		}, {
			"file":	"main/snprintf.c",
			"line":	346,
			"primary_score":	999902,
			"second_score":	120860
		}, {
			"file":	"main/snprintf.c",
			"line":	347,
			"primary_score":	999902,
			"second_score":	120859
		}, {
			"file":	"main/snprintf.c",
			"line":	349,
			"primary_score":	999902,
			"second_score":	120858
		}, {
			"file":	"main/snprintf.c",
			"line":	350,
			"primary_score":	999902,
			"second_score":	120857
		}, {
			"file":	"main/snprintf.c",
			"line":	354,
			"primary_score":	999902,
			"second_score":	120856
		}, {
			"file":	"main/snprintf.c",
			"line":	355,
			"primary_score":	999902,
			"second_score":	120855
		}, {
			"file":	"main/spprintf.c",
			"line":	340,
			"primary_score":	999960,
			"second_score":	120873
		}, {
			"file":	"main/spprintf.c",
			"line":	345,
			"primary_score":	999960,
			"second_score":	120872
		}, {
			"file":	"main/spprintf.c",
			"line":	346,
			"primary_score":	999960,
			"second_score":	120871
		}, {
			"file":	"main/spprintf.c",
			"line":	441,
			"primary_score":	999902,
			"second_score":	120869
		}, {
			"file":	"main/spprintf.c",
			"line":	449,
			"primary_score":	999960,
			"second_score":	120868
		}, {
			"file":	"main/spprintf.c",
			"line":	474,
			"primary_score":	999902,
			"second_score":	120867
		}, {
			"file":	"main/spprintf.c",
			"line":	476,
			"primary_score":	999902,
			"second_score":	120854
		}, {
			"file":	"main/spprintf.c",
			"line":	478,
			"primary_score":	999902,
			"second_score":	120852
		}, {
			"file":	"main/spprintf.c",
			"line":	479,
			"primary_score":	999902,
			"second_score":	120851
		}, {
			"file":	"main/spprintf.c",
			"line":	481,
			"primary_score":	999902,
			"second_score":	120850
		}, {
			"file":	"main/spprintf.c",
			"line":	483,
			"primary_score":	999902,
			"second_score":	120849
		}, {
			"file":	"main/spprintf.c",
			"line":	486,
			"primary_score":	999902,
			"second_score":	120848
		}, {
			"file":	"main/spprintf.c",
			"line":	775,
			"primary_score":	999877,
			"second_score":	120964
		}, {
			"file":	"main/streams/filter.c",
			"line":	37,
			"primary_score":	999861,
			"second_score":	6095
		}, {
			"file":	"main/streams/filter.c",
			"line":	54,
			"primary_score":	999861,
			"second_score":	62055
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	287,
			"primary_score":	999861,
			"second_score":	148280
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	371,
			"primary_score":	999861,
			"second_score":	113976
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	372,
			"primary_score":	999861,
			"second_score":	113975
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	374,
			"primary_score":	999861,
			"second_score":	113974
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	377,
			"primary_score":	999861,
			"second_score":	113973
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	392,
			"primary_score":	999861,
			"second_score":	113972
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	393,
			"primary_score":	999861,
			"second_score":	113971
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	394,
			"primary_score":	999861,
			"second_score":	113970
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	404,
			"primary_score":	999861,
			"second_score":	113969
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	405,
			"primary_score":	999861,
			"second_score":	113968
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	413,
			"primary_score":	999861,
			"second_score":	113967
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	425,
			"primary_score":	999861,
			"second_score":	113966
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	427,
			"primary_score":	999861,
			"second_score":	113947
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	432,
			"primary_score":	999861,
			"second_score":	113986
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	434,
			"primary_score":	999861,
			"second_score":	113985
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	441,
			"primary_score":	999861,
			"second_score":	113984
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	442,
			"primary_score":	999861,
			"second_score":	113983
		}, {
			"file":	"main/streams/streams.c",
			"line":	104,
			"primary_score":	999861,
			"second_score":	119272
		}, {
			"file":	"main/streams/streams.c",
			"line":	105,
			"primary_score":	999861,
			"second_score":	119263
		}, {
			"file":	"main/streams/streams.c",
			"line":	333,
			"primary_score":	999861,
			"second_score":	114001
		}, {
			"file":	"main/streams/streams.c",
			"line":	334,
			"primary_score":	999861,
			"second_score":	114000
		}, {
			"file":	"main/streams/streams.c",
			"line":	335,
			"primary_score":	999861,
			"second_score":	113999
		}, {
			"file":	"main/streams/streams.c",
			"line":	336,
			"primary_score":	999861,
			"second_score":	113998
		}, {
			"file":	"main/streams/streams.c",
			"line":	337,
			"primary_score":	999861,
			"second_score":	113997
		}, {
			"file":	"main/streams/streams.c",
			"line":	339,
			"primary_score":	999861,
			"second_score":	113996
		}, {
			"file":	"main/streams/streams.c",
			"line":	352,
			"primary_score":	999861,
			"second_score":	113995
		}, {
			"file":	"main/streams/streams.c",
			"line":	361,
			"primary_score":	999861,
			"second_score":	113994
		}, {
			"file":	"main/streams/streams.c",
			"line":	365,
			"primary_score":	999861,
			"second_score":	113993
		}, {
			"file":	"main/streams/streams.c",
			"line":	383,
			"primary_score":	999861,
			"second_score":	113992
		}, {
			"file":	"main/streams/streams.c",
			"line":	402,
			"primary_score":	999861,
			"second_score":	113991
		}, {
			"file":	"main/streams/streams.c",
			"line":	405,
			"primary_score":	999861,
			"second_score":	113981
		}, {
			"file":	"main/streams/streams.c",
			"line":	410,
			"primary_score":	999861,
			"second_score":	113980
		}, {
			"file":	"main/streams/streams.c",
			"line":	414,
			"primary_score":	999861,
			"second_score":	113979
		}, {
			"file":	"main/streams/streams.c",
			"line":	415,
			"primary_score":	999861,
			"second_score":	113978
		}, {
			"file":	"main/streams/streams.c",
			"line":	427,
			"primary_score":	999861,
			"second_score":	113977
		}, {
			"file":	"main/streams/streams.c",
			"line":	428,
			"primary_score":	999861,
			"second_score":	113946
		}, {
			"file":	"main/streams/streams.c",
			"line":	431,
			"primary_score":	999861,
			"second_score":	113945
		}, {
			"file":	"main/streams/streams.c",
			"line":	438,
			"primary_score":	999861,
			"second_score":	113944
		}, {
			"file":	"main/streams/streams.c",
			"line":	439,
			"primary_score":	999861,
			"second_score":	113943
		}, {
			"file":	"main/streams/streams.c",
			"line":	442,
			"primary_score":	999861,
			"second_score":	113942
		}, {
			"file":	"main/streams/streams.c",
			"line":	446,
			"primary_score":	999861,
			"second_score":	113941
		}, {
			"file":	"main/streams/streams.c",
			"line":	451,
			"primary_score":	999861,
			"second_score":	113940
		}, {
			"file":	"main/streams/streams.c",
			"line":	456,
			"primary_score":	999861,
			"second_score":	113939
		}, {
			"file":	"main/streams/streams.c",
			"line":	461,
			"primary_score":	999861,
			"second_score":	113938
		}, {
			"file":	"main/streams/streams.c",
			"line":	493,
			"primary_score":	999861,
			"second_score":	113937
		}, {
			"file":	"main/streams/streams.c",
			"line":	494,
			"primary_score":	999861,
			"second_score":	113936
		}, {
			"file":	"main/streams/streams.c",
			"line":	495,
			"primary_score":	999861,
			"second_score":	113917
		}, {
			"file":	"main/streams/streams.c",
			"line":	498,
			"primary_score":	999861,
			"second_score":	113916
		}, {
			"file":	"main/streams/streams.c",
			"line":	502,
			"primary_score":	999861,
			"second_score":	113897
		}, {
			"file":	"main/streams/streams.c",
			"line":	506,
			"primary_score":	999861,
			"second_score":	113896
		}, {
			"file":	"main/streams/streams.c",
			"line":	1118,
			"primary_score":	999861,
			"second_score":	113990
		}, {
			"file":	"main/streams/streams.c",
			"line":	1120,
			"primary_score":	999861,
			"second_score":	113989
		}, {
			"file":	"main/streams/streams.c",
			"line":	1124,
			"primary_score":	999861,
			"second_score":	113988
		}, {
			"file":	"main/streams/streams.c",
			"line":	1125,
			"primary_score":	999861,
			"second_score":	113987
		}, {
			"file":	"main/streams/streams.c",
			"line":	1128,
			"primary_score":	999861,
			"second_score":	113982
		}, {
			"file":	"main/streams/streams.c",
			"line":	1502,
			"primary_score":	999861,
			"second_score":	114003
		}, {
			"file":	"main/streams/streams.c",
			"line":	1504,
			"primary_score":	999861,
			"second_score":	114002
		}, {
			"file":	"main/streams/streams.c",
			"line":	1515,
			"primary_score":	999861,
			"second_score":	113375
		}, {
			"file":	"main/streams/streams.c",
			"line":	1521,
			"primary_score":	999861,
			"second_score":	113374
		}, {
			"file":	"main/streams/streams.c",
			"line":	1557,
			"primary_score":	999861,
			"second_score":	6120
		}, {
			"file":	"main/streams/streams.c",
			"line":	1558,
			"primary_score":	999861,
			"second_score":	6096
		}, {
			"file":	"main/streams/streams.c",
			"line":	1559,
			"primary_score":	999861,
			"second_score":	6086
		}, {
			"file":	"main/streams/streams.c",
			"line":	1560,
			"primary_score":	999861,
			"second_score":	6056
		}, {
			"file":	"main/streams/streams.c",
			"line":	1596,
			"primary_score":	999861,
			"second_score":	97654
		}, {
			"file":	"main/streams/transports.c",
			"line":	29,
			"primary_score":	999861,
			"second_score":	6085
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	255,
			"primary_score":	999861,
			"second_score":	121330
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	258,
			"primary_score":	999861,
			"second_score":	121329
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	267,
			"primary_score":	999861,
			"second_score":	121328
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	268,
			"primary_score":	999861,
			"second_score":	121327
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	271,
			"primary_score":	999861,
			"second_score":	121326
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	275,
			"primary_score":	999861,
			"second_score":	121325
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	287,
			"primary_score":	999861,
			"second_score":	121337
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	288,
			"primary_score":	999861,
			"second_score":	121336
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	289,
			"primary_score":	999861,
			"second_score":	121335
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	291,
			"primary_score":	999861,
			"second_score":	121334
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	295,
			"primary_score":	999861,
			"second_score":	121333
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	303,
			"primary_score":	999861,
			"second_score":	121332
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	305,
			"primary_score":	999861,
			"second_score":	121331
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	306,
			"primary_score":	999861,
			"second_score":	121324
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	312,
			"primary_score":	999861,
			"second_score":	121323
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	313,
			"primary_score":	999861,
			"second_score":	121322
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	316,
			"primary_score":	999861,
			"second_score":	121321
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	325,
			"primary_score":	999861,
			"second_score":	103521
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	378,
			"primary_score":	999861,
			"second_score":	113415
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	379,
			"primary_score":	999861,
			"second_score":	113414
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	383,
			"primary_score":	999861,
			"second_score":	113413
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	395,
			"primary_score":	999861,
			"second_score":	129656
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	403,
			"primary_score":	999861,
			"second_score":	129630
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	950,
			"primary_score":	999861,
			"second_score":	148233
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	954,
			"primary_score":	999861,
			"second_score":	148232
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	955,
			"primary_score":	999861,
			"second_score":	148231
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	956,
			"primary_score":	999861,
			"second_score":	148230
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1090,
			"primary_score":	999861,
			"second_score":	148219
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1091,
			"primary_score":	999861,
			"second_score":	148218
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1137,
			"primary_score":	999861,
			"second_score":	120165
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1140,
			"primary_score":	999861,
			"second_score":	120164
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1177,
			"primary_score":	999861,
			"second_score":	121838
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1180,
			"primary_score":	999861,
			"second_score":	118806
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1319,
			"primary_score":	999861,
			"second_score":	120163
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1321,
			"primary_score":	999861,
			"second_score":	120161
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1323,
			"primary_score":	999861,
			"second_score":	120160
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1325,
			"primary_score":	999861,
			"second_score":	103534
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1326,
			"primary_score":	999861,
			"second_score":	103533
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1328,
			"primary_score":	999861,
			"second_score":	103532
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1332,
			"primary_score":	999861,
			"second_score":	103531
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1333,
			"primary_score":	999861,
			"second_score":	103530
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1336,
			"primary_score":	999861,
			"second_score":	103529
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1337,
			"primary_score":	999861,
			"second_score":	103528
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1339,
			"primary_score":	999861,
			"second_score":	3136
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1344,
			"primary_score":	999861,
			"second_score":	1
		}],
	"mutation_info":	[{
			"file":	"ext/json/json.c",
			"functions":	[]
		}],
	"rules":	[{
			"file_name":	"ext/json/json.c",
			"lines":	[{
					"line":	180,
					"switches":	[{
							"switch":	2,
							"types":	[[], [], [], [], [119, 120, 121, 122, 123, 124], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], [], [], [], [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118], [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [], [], [], [], [], []],
							"begin_line":	181,
							"begin_column":	3,
							"end_line":	181,
							"end_column":	3,
							"patch_codes":	["memset(&(**val).is_ref__gc, 0, sizeof (*(&(**val).is_ref__gc)))", "memset(&(**val).refcount__gc, 0, sizeof (*(&(**val).refcount__gc)))", "memset(&(**val).type, 0, sizeof (*(&(**val).type)))", "memset(&(**val).value, 0, sizeof (*(&(**val).value)))", "memset(&(**val).value.dval, 0, sizeof (*(&(**val).value.dval)))", "memset(&(**val).value.ht, 0, sizeof (*(&(**val).value.ht)))", "memset(&(**val).value.lval, 0, sizeof (*(&(**val).value.lval)))", "memset(&(**val).value.obj, 0, sizeof (*(&(**val).value.obj)))", "memset(&(**val).value.obj.handle, 0, sizeof (*(&(**val).value.obj.handle)))", "memset(&(**val).value.obj.handlers, 0, sizeof (*(&(**val).value.obj.handlers)))", "memset(&(**val).value.obj.handlers->add_ref, 0, sizeof (*(&(**val).value.obj.handlers->add_ref)))", "memset(&(**val).value.obj.handlers->call_method, 0, sizeof (*(&(**val).value.obj.handlers->call_method)))", "memset(&(**val).value.obj.handlers->cast_object, 0, sizeof (*(&(**val).value.obj.handlers->cast_object)))", "memset(&(**val).value.obj.handlers->clone_obj, 0, sizeof (*(&(**val).value.obj.handlers->clone_obj)))", "memset(&(**val).value.obj.handlers->compare_objects, 0, sizeof (*(&(**val).value.obj.handlers->compare_objects)))", "memset(&(**val).value.obj.handlers->count_elements, 0, sizeof (*(&(**val).value.obj.handlers->count_elements)))", "memset(&(**val).value.obj.handlers->del_ref, 0, sizeof (*(&(**val).value.obj.handlers->del_ref)))", "memset(&(**val).value.obj.handlers->get, 0, sizeof (*(&(**val).value.obj.handlers->get)))", "memset(&(**val).value.obj.handlers->get_class_entry, 0, sizeof (*(&(**val).value.obj.handlers->get_class_entry)))", "memset(&(**val).value.obj.handlers->get_class_name, 0, sizeof (*(&(**val).value.obj.handlers->get_class_name)))", "memset(&(**val).value.obj.handlers->get_closure, 0, sizeof (*(&(**val).value.obj.handlers->get_closure)))", "memset(&(**val).value.obj.handlers->get_constructor, 0, sizeof (*(&(**val).value.obj.handlers->get_constructor)))", "memset(&(**val).value.obj.handlers->get_debug_info, 0, sizeof (*(&(**val).value.obj.handlers->get_debug_info)))", "memset(&(**val).value.obj.handlers->get_method, 0, sizeof (*(&(**val).value.obj.handlers->get_method)))", "memset(&(**val).value.obj.handlers->get_properties, 0, sizeof (*(&(**val).value.obj.handlers->get_properties)))", "memset(&(**val).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(**val).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(**val).value.obj.handlers->has_dimension, 0, sizeof (*(&(**val).value.obj.handlers->has_dimension)))", "memset(&(**val).value.obj.handlers->has_property, 0, sizeof (*(&(**val).value.obj.handlers->has_property)))", "memset(&(**val).value.obj.handlers->read_dimension, 0, sizeof (*(&(**val).value.obj.handlers->read_dimension)))", "memset(&(**val).value.obj.handlers->read_property, 0, sizeof (*(&(**val).value.obj.handlers->read_property)))", "memset(&(**val).value.obj.handlers->set, 0, sizeof (*(&(**val).value.obj.handlers->set)))", "memset(&(**val).value.obj.handlers->unset_dimension, 0, sizeof (*(&(**val).value.obj.handlers->unset_dimension)))", "memset(&(**val).value.obj.handlers->unset_property, 0, sizeof (*(&(**val).value.obj.handlers->unset_property)))", "memset(&(**val).value.obj.handlers->write_dimension, 0, sizeof (*(&(**val).value.obj.handlers->write_dimension)))", "memset(&(**val).value.obj.handlers->write_property, 0, sizeof (*(&(**val).value.obj.handlers->write_property)))", "memset(&(**val).value.str, 0, sizeof (*(&(**val).value.str)))", "memset((**val).value.ht, 0, sizeof (*((**val).value.ht)))", "memset((**val).value.obj.handlers, 0, sizeof (*((**val).value.obj.handlers)))", "memset((**val).value.obj.handlers->add_ref, 0, sizeof (*((**val).value.obj.handlers->add_ref)))", "memset((**val).value.obj.handlers->call_method, 0, sizeof (*((**val).value.obj.handlers->call_method)))", "memset((**val).value.obj.handlers->cast_object, 0, sizeof (*((**val).value.obj.handlers->cast_object)))", "memset((**val).value.obj.handlers->clone_obj, 0, sizeof (*((**val).value.obj.handlers->clone_obj)))", "memset((**val).value.obj.handlers->compare_objects, 0, sizeof (*((**val).value.obj.handlers->compare_objects)))", "memset((**val).value.obj.handlers->count_elements, 0, sizeof (*((**val).value.obj.handlers->count_elements)))", "memset((**val).value.obj.handlers->del_ref, 0, sizeof (*((**val).value.obj.handlers->del_ref)))", "memset((**val).value.obj.handlers->get, 0, sizeof (*((**val).value.obj.handlers->get)))", "memset((**val).value.obj.handlers->get_class_entry, 0, sizeof (*((**val).value.obj.handlers->get_class_entry)))", "memset((**val).value.obj.handlers->get_class_name, 0, sizeof (*((**val).value.obj.handlers->get_class_name)))", "memset((**val).value.obj.handlers->get_closure, 0, sizeof (*((**val).value.obj.handlers->get_closure)))", "memset((**val).value.obj.handlers->get_constructor, 0, sizeof (*((**val).value.obj.handlers->get_constructor)))", "memset((**val).value.obj.handlers->get_debug_info, 0, sizeof (*((**val).value.obj.handlers->get_debug_info)))", "memset((**val).value.obj.handlers->get_method, 0, sizeof (*((**val).value.obj.handlers->get_method)))", "memset((**val).value.obj.handlers->get_properties, 0, sizeof (*((**val).value.obj.handlers->get_properties)))", "memset((**val).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((**val).value.obj.handlers->get_property_ptr_ptr)))", "memset((**val).value.obj.handlers->has_dimension, 0, sizeof (*((**val).value.obj.handlers->has_dimension)))", "memset((**val).value.obj.handlers->has_property, 0, sizeof (*((**val).value.obj.handlers->has_property)))", "memset((**val).value.obj.handlers->read_dimension, 0, sizeof (*((**val).value.obj.handlers->read_dimension)))", "memset((**val).value.obj.handlers->read_property, 0, sizeof (*((**val).value.obj.handlers->read_property)))", "memset((**val).value.obj.handlers->set, 0, sizeof (*((**val).value.obj.handlers->set)))", "memset((**val).value.obj.handlers->unset_dimension, 0, sizeof (*((**val).value.obj.handlers->unset_dimension)))", "memset((**val).value.obj.handlers->unset_property, 0, sizeof (*((**val).value.obj.handlers->unset_property)))", "memset((**val).value.obj.handlers->write_dimension, 0, sizeof (*((**val).value.obj.handlers->write_dimension)))", "memset((**val).value.obj.handlers->write_property, 0, sizeof (*((**val).value.obj.handlers->write_property)))", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (i)", "(key)++", "(myht)->nApplyCount++", "(myht)->nApplyCount--", "_efree(((key)))", "i = (0)", "i = (1)", "i = (3)", "i = (4)", "i = (5)", "i = (i)", "i = (myht) ? zend_hash_num_elements(myht) : 0", "i = myht ? zend_hash_num_elements((myht)) : 0", "i = zend_hash_get_current_key_ex((myht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &(key), &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &(pos))", "idx = (0)", "idx = (1)", "idx = (3)", "idx = (4)", "idx = (5)", "idx = (idx)", "idx = (index)", "zend_hash_internal_pointer_reset_ex((myht), &pos)", "zend_hash_internal_pointer_reset_ex(myht, &(pos))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "exit(1)", "i = myht ? zend_hash_num_elements(myht) : 0", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &pos)", "idx = 0", "idx++", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_internal_pointer_reset_ex(myht, &pos)", "if (__is_neg(\"\", \"L181\", 8, &(i), sizeof (i), &(index), sizeof (index), &(idx), sizeof (idx), &(myht), sizeof (myht), &(key), sizeof (key), &(key_len), sizeof (key_len), &(pos), sizeof (pos), &(val), sizeof (val)))\n    break;\n", "if (__is_neg(\"\", \"L181\", 8, &(i), sizeof (i), &(index), sizeof (index), &(idx), sizeof (idx), &(myht), sizeof (myht), &(key), sizeof (key), &(key_len), sizeof (key_len), &(pos), sizeof (pos), &(val), sizeof (val)))\n    return 0;\n", "if (__is_neg(\"\", \"L181\", 8, &(i), sizeof (i), &(index), sizeof (index), &(idx), sizeof (idx), &(myht), sizeof (myht), &(key), sizeof (key), &(key_len), sizeof (key_len), &(pos), sizeof (pos), &(val), sizeof (val)))\n    return 1;\n", "if (__is_neg(\"\", \"L181\", 8, &(i), sizeof (i), &(index), sizeof (index), &(idx), sizeof (idx), &(myht), sizeof (myht), &(key), sizeof (key), &(key_len), sizeof (key_len), &(pos), sizeof (pos), &(val), sizeof (val)))\n    return 3;\n", "if (__is_neg(\"\", \"L181\", 8, &(i), sizeof (i), &(index), sizeof (index), &(idx), sizeof (idx), &(myht), sizeof (myht), &(key), sizeof (key), &(key_len), sizeof (key_len), &(pos), sizeof (pos), &(val), sizeof (val)))\n    return 4;\n", "if (__is_neg(\"\", \"L181\", 8, &(i), sizeof (i), &(index), sizeof (index), &(idx), sizeof (idx), &(myht), sizeof (myht), &(key), sizeof (key), &(key_len), sizeof (key_len), &(pos), sizeof (pos), &(val), sizeof (val)))\n    return 5;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	2,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	3,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	4,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	5,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	6,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	7,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	8,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	9,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	10,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	11,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	12,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	13,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	14,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	15,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	16,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	17,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	18,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	19,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	20,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	21,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	22,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	23,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	24,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	25,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	26,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	27,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	28,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	29,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	30,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	31,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	32,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	33,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	34,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	35,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	36,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	37,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	38,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	39,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	40,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	41,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	42,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	43,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	44,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	45,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	46,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	47,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	48,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	49,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	50,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	51,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	52,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	53,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	54,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	55,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	56,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	57,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	58,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	59,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	60,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	61,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	62,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	63,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	64,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	65,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	66,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	67,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	68,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	69,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	70,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	71,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	72,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	73,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	74,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	75,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	76,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	77,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	78,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	79,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	80,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	81,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	82,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	83,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	84,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	85,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	86,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	87,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	88,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	89,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	90,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	91,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	92,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	93,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	94,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	95,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	96,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	97,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	98,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	99,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	100,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	101,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	102,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	103,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	104,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	105,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	106,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	107,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	108,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	109,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	110,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	111,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	112,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	113,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	114,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	115,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	116,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	117,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	118,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	119,
									"scores":	[-8.17753476978599, -8.17753476978599, -8.17753476978599, -8.4235736835859871, -8.38842388678599, -7.6765997697859873, -8.4235736835859871, -8.42552428678599]
								}, {
									"case":	120,
									"scores":	[-8.32175576978599, -8.32175576978599, -8.32175576978599, -8.5677946835859871, -8.53264488678599, -7.8208207697859873, -8.5677946835859871, -8.56974528678599]
								}, {
									"case":	121,
									"scores":	[-11.146224769785988, -11.146224769785988, -11.146224769785988, -11.392263683585988, -11.357113886785989, -10.645289769785988, -11.392263683585988, -11.394214286785989]
								}, {
									"case":	122,
									"scores":	[-11.146224769785988, -11.146224769785988, -11.146224769785988, -11.392263683585988, -11.357113886785989, -10.645289769785988, -11.392263683585988, -11.394214286785989]
								}, {
									"case":	123,
									"scores":	[-11.146224769785988, -11.146224769785988, -11.146224769785988, -11.392263683585988, -11.357113886785989, -10.645289769785988, -11.392263683585988, -11.394214286785989]
								}, {
									"case":	124,
									"scores":	[-11.146224769785988, -11.146224769785988, -11.146224769785988, -11.392263683585988, -11.357113886785989, -10.645289769785988, -11.392263683585988, -11.394214286785989]
								}]
						}, {
							"switch":	3,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	181,
							"begin_column":	5,
							"end_line":	181,
							"end_column":	12,
							"patch_codes":	["if (!__is_neg(\"\", \"L181\", 8, &(i), sizeof (i), &(index), sizeof (index), &(idx), sizeof (idx), &(myht), sizeof (myht), &(key), sizeof (key), &(key_len), sizeof (key_len), &(pos), sizeof (pos), &(val), sizeof (val)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.5215708437859874, -7.5215708437859874, -7.5215708437859874, -8.27945894378599, -7.9908308437859876, -7.1995598137859877, -8.27945894378599, -8.28518164378599]
								}]
						}]
				}, {
					"line":	179,
					"switches":	[{
							"switch":	0,
							"types":	[[], [], [], [], [], [], [], [], [], [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [], [], [], [], [], []],
							"begin_line":	180,
							"begin_column":	2,
							"end_line":	180,
							"end_column":	2,
							"patch_codes":	["(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (i)", "(key)++", "(myht)->nApplyCount++", "(myht)->nApplyCount--", "_efree(((key)))", "i = (0)", "i = (1)", "i = (3)", "i = (4)", "i = (5)", "i = (i)", "i = (myht) ? zend_hash_num_elements(myht) : 0", "i = myht ? zend_hash_num_elements((myht)) : 0", "i = zend_hash_get_current_key_ex((myht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &(key), &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &(pos))", "idx = (0)", "idx = (1)", "idx = (3)", "idx = (4)", "idx = (5)", "idx = (idx)", "idx = (index)", "zend_hash_internal_pointer_reset_ex((myht), &pos)", "zend_hash_internal_pointer_reset_ex(myht, &(pos))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "exit(1)", "i = myht ? zend_hash_num_elements(myht) : 0", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &pos)", "idx = 0", "idx++", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_internal_pointer_reset_ex(myht, &pos)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	2,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	3,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	4,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	5,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	6,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	7,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	8,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	9,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	10,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	11,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	12,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	13,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	14,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	15,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	16,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	17,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	18,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	19,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	20,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	21,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	22,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	23,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	24,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	25,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	26,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	27,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	28,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	29,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	30,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	31,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	32,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	33,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	34,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	35,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	36,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	37,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	38,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	39,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	40,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	41,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	42,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	43,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	44,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	45,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	46,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	47,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	48,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	49,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	50,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	51,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	52,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	53,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	54,
									"scores":	[-6.8616182737859877]
								}, {
									"case":	55,
									"scores":	[-6.8616182737859877]
								}]
						}, {
							"switch":	1,
							"types":	[[2], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	180,
							"begin_column":	4,
							"end_line":	186,
							"end_column":	4,
							"patch_codes":	["if (__is_neg(\"\", \"L180\", 8, &(i), sizeof (i), &(index), sizeof (index), &(idx), sizeof (idx), &(myht), sizeof (myht), &(key), sizeof (key), &(key_len), sizeof (key_len), &(pos), sizeof (pos), &(val), sizeof (val))) {\n    return 1;\n} else {\n    if (index != idx) {\n        return 1;\n    }\n}\n", "if ((i == 1) && !__is_neg(\"\", \"L180\", 8, &(i), sizeof (i), &(index), sizeof (index), &(idx), sizeof (idx), &(myht), sizeof (myht), &(key), sizeof (key), &(key_len), sizeof (key_len), &(pos), sizeof (pos), &(val), sizeof (val))) {\n    return 1;\n} else {\n    if (index != idx) {\n        return 1;\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.2540603964281449, -1.9549573204281459, -2.5074396924281457, -5.1217910424281454, -4.5482073204281459, -3.7569362904281456, -4.8368354204281454, -5.4090938964281463]
								}, {
									"case":	2,
									"scores":	[-1.9057425694281447, -2.6066394934281449, -3.1591218654281454, -5.7734732154281456, -5.1998894934281461, -4.4086184634281462, -5.4885175934281456, -6.0607760694281456]
								}]
						}]
				}, {
					"line":	227,
					"switches":	[{
							"switch":	5,
							"types":	[[], [], [], [], [177], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], [], [], [], [155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176], [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154], [], [], [], [], [], []],
							"begin_line":	228,
							"begin_column":	1,
							"end_line":	228,
							"end_column":	1,
							"patch_codes":	["memset(&((**val)), 0, sizeof (*(&((**val)))))", "memset(&((**val)).is_ref__gc, 0, sizeof (*(&((**val)).is_ref__gc)))", "memset(&((**val)).refcount__gc, 0, sizeof (*(&((**val)).refcount__gc)))", "memset(&((**val)).type, 0, sizeof (*(&((**val)).type)))", "memset(&((**val)).value, 0, sizeof (*(&((**val)).value)))", "memset(&((**val)).value.dval, 0, sizeof (*(&((**val)).value.dval)))", "memset(&((**val)).value.ht, 0, sizeof (*(&((**val)).value.ht)))", "memset(&((**val)).value.lval, 0, sizeof (*(&((**val)).value.lval)))", "memset(&((**val)).value.obj, 0, sizeof (*(&((**val)).value.obj)))", "memset(&((**val)).value.obj.handle, 0, sizeof (*(&((**val)).value.obj.handle)))", "memset(&((**val)).value.obj.handlers, 0, sizeof (*(&((**val)).value.obj.handlers)))", "memset(&((**val)).value.obj.handlers->add_ref, 0, sizeof (*(&((**val)).value.obj.handlers->add_ref)))", "memset(&((**val)).value.obj.handlers->call_method, 0, sizeof (*(&((**val)).value.obj.handlers->call_method)))", "memset(&((**val)).value.obj.handlers->cast_object, 0, sizeof (*(&((**val)).value.obj.handlers->cast_object)))", "memset(&((**val)).value.obj.handlers->clone_obj, 0, sizeof (*(&((**val)).value.obj.handlers->clone_obj)))", "memset(&((**val)).value.obj.handlers->compare_objects, 0, sizeof (*(&((**val)).value.obj.handlers->compare_objects)))", "memset(&((**val)).value.obj.handlers->count_elements, 0, sizeof (*(&((**val)).value.obj.handlers->count_elements)))", "memset(&((**val)).value.obj.handlers->del_ref, 0, sizeof (*(&((**val)).value.obj.handlers->del_ref)))", "memset(&((**val)).value.obj.handlers->get, 0, sizeof (*(&((**val)).value.obj.handlers->get)))", "memset(&((**val)).value.obj.handlers->get_class_entry, 0, sizeof (*(&((**val)).value.obj.handlers->get_class_entry)))", "memset(&((**val)).value.obj.handlers->get_class_name, 0, sizeof (*(&((**val)).value.obj.handlers->get_class_name)))", "memset(&((**val)).value.obj.handlers->get_closure, 0, sizeof (*(&((**val)).value.obj.handlers->get_closure)))", "memset(&((**val)).value.obj.handlers->get_constructor, 0, sizeof (*(&((**val)).value.obj.handlers->get_constructor)))", "memset(&((**val)).value.obj.handlers->get_debug_info, 0, sizeof (*(&((**val)).value.obj.handlers->get_debug_info)))", "memset(&((**val)).value.obj.handlers->get_method, 0, sizeof (*(&((**val)).value.obj.handlers->get_method)))", "memset(&((**val)).value.obj.handlers->get_properties, 0, sizeof (*(&((**val)).value.obj.handlers->get_properties)))", "memset(&((**val)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&((**val)).value.obj.handlers->get_property_ptr_ptr)))", "memset(&((**val)).value.obj.handlers->has_dimension, 0, sizeof (*(&((**val)).value.obj.handlers->has_dimension)))", "memset(&((**val)).value.obj.handlers->has_property, 0, sizeof (*(&((**val)).value.obj.handlers->has_property)))", "memset(&((**val)).value.obj.handlers->read_dimension, 0, sizeof (*(&((**val)).value.obj.handlers->read_dimension)))", "memset(&((**val)).value.obj.handlers->read_property, 0, sizeof (*(&((**val)).value.obj.handlers->read_property)))", "memset(&((**val)).value.obj.handlers->set, 0, sizeof (*(&((**val)).value.obj.handlers->set)))", "memset(&((**val)).value.obj.handlers->unset_dimension, 0, sizeof (*(&((**val)).value.obj.handlers->unset_dimension)))", "memset(&((**val)).value.obj.handlers->unset_property, 0, sizeof (*(&((**val)).value.obj.handlers->unset_property)))", "memset(&((**val)).value.obj.handlers->write_dimension, 0, sizeof (*(&((**val)).value.obj.handlers->write_dimension)))", "memset(&((**val)).value.obj.handlers->write_property, 0, sizeof (*(&((**val)).value.obj.handlers->write_property)))", "memset(&((**val)).value.str, 0, sizeof (*(&((**val)).value.str)))", "memset(&(**val), 0, sizeof (*(&(**val))))", "memset(&(**val).is_ref__gc, 0, sizeof (*(&(**val).is_ref__gc)))", "memset(&(**val).refcount__gc, 0, sizeof (*(&(**val).refcount__gc)))", "memset(&(**val).type, 0, sizeof (*(&(**val).type)))", "memset(&(**val).value, 0, sizeof (*(&(**val).value)))", "memset(&json_globals.encoder_depth, 0, sizeof (*(&json_globals.encoder_depth)))", "memset(&json_globals.error_code, 0, sizeof (*(&json_globals.error_code)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset(((**val)).value.ht, 0, sizeof (*(((**val)).value.ht)))", "memset(((**val)).value.obj.handlers, 0, sizeof (*(((**val)).value.obj.handlers)))", "memset(((**val)).value.obj.handlers->add_ref, 0, sizeof (*(((**val)).value.obj.handlers->add_ref)))", "memset(((**val)).value.obj.handlers->call_method, 0, sizeof (*(((**val)).value.obj.handlers->call_method)))", "memset(((**val)).value.obj.handlers->cast_object, 0, sizeof (*(((**val)).value.obj.handlers->cast_object)))", "memset(((**val)).value.obj.handlers->clone_obj, 0, sizeof (*(((**val)).value.obj.handlers->clone_obj)))", "memset(((**val)).value.obj.handlers->compare_objects, 0, sizeof (*(((**val)).value.obj.handlers->compare_objects)))", "memset(((**val)).value.obj.handlers->count_elements, 0, sizeof (*(((**val)).value.obj.handlers->count_elements)))", "memset(((**val)).value.obj.handlers->del_ref, 0, sizeof (*(((**val)).value.obj.handlers->del_ref)))", "memset(((**val)).value.obj.handlers->get, 0, sizeof (*(((**val)).value.obj.handlers->get)))", "memset(((**val)).value.obj.handlers->get_class_entry, 0, sizeof (*(((**val)).value.obj.handlers->get_class_entry)))", "memset(((**val)).value.obj.handlers->get_class_name, 0, sizeof (*(((**val)).value.obj.handlers->get_class_name)))", "memset(((**val)).value.obj.handlers->get_closure, 0, sizeof (*(((**val)).value.obj.handlers->get_closure)))", "memset(((**val)).value.obj.handlers->get_constructor, 0, sizeof (*(((**val)).value.obj.handlers->get_constructor)))", "memset(((**val)).value.obj.handlers->get_debug_info, 0, sizeof (*(((**val)).value.obj.handlers->get_debug_info)))", "memset(((**val)).value.obj.handlers->get_method, 0, sizeof (*(((**val)).value.obj.handlers->get_method)))", "memset(((**val)).value.obj.handlers->get_properties, 0, sizeof (*(((**val)).value.obj.handlers->get_properties)))", "memset(((**val)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(((**val)).value.obj.handlers->get_property_ptr_ptr)))", "memset(((**val)).value.obj.handlers->has_dimension, 0, sizeof (*(((**val)).value.obj.handlers->has_dimension)))", "memset(((**val)).value.obj.handlers->has_property, 0, sizeof (*(((**val)).value.obj.handlers->has_property)))", "memset(((**val)).value.obj.handlers->read_dimension, 0, sizeof (*(((**val)).value.obj.handlers->read_dimension)))", "memset(((**val)).value.obj.handlers->read_property, 0, sizeof (*(((**val)).value.obj.handlers->read_property)))", "memset(((**val)).value.obj.handlers->set, 0, sizeof (*(((**val)).value.obj.handlers->set)))", "memset(((**val)).value.obj.handlers->unset_dimension, 0, sizeof (*(((**val)).value.obj.handlers->unset_dimension)))", "memset(((**val)).value.obj.handlers->unset_property, 0, sizeof (*(((**val)).value.obj.handlers->unset_property)))", "memset(((**val)).value.obj.handlers->write_dimension, 0, sizeof (*(((**val)).value.obj.handlers->write_dimension)))", "memset(((**val)).value.obj.handlers->write_property, 0, sizeof (*(((**val)).value.obj.handlers->write_property)))", "memset(myht, 0, sizeof (*(myht)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (i)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (r)", "(myht)->nApplyCount++", "(myht)->nApplyCount--", "i = (0)", "i = (1)", "i = (10)", "i = (128)", "i = (16)", "i = (2)", "i = (3)", "i = (32)", "i = (4)", "i = (5)", "i = (78)", "i = (i)", "i = (myht) ? zend_hash_num_elements(myht) : 0", "i = (options)", "i = (r)", "i = myht ? zend_hash_num_elements((myht)) : 0", "json_pretty_print_char((buf), options, ' ')", "json_pretty_print_char((buf), options, '\\n')", "json_pretty_print_indent((buf), options)", "myht = ((**(val))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(val)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(val)))", "myht = ((**val).type == 4 ? (**(val)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(val)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(val)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "myht = (myht)", "php_json_encode(buf, *(val), options)", "r = (0)", "r = (1)", "r = (10)", "r = (128)", "r = (16)", "r = (2)", "r = (3)", "r = (32)", "r = (4)", "r = (5)", "r = (78)", "r = (i)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((val))", "r = (options)", "r = (r)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "exit(1)", "i = myht ? zend_hash_num_elements(myht) : 0", "json_pretty_print_char(buf, options, ' ')", "json_pretty_print_char(buf, options, '\\n')", "json_pretty_print_indent(buf, options)", "myht = ((**val)).value.obj.handlers->get_properties(&(**val))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "r = (options & (1 << 4)) ? 1 : json_determine_array_type(val)", "r = 1", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L228\", 51, &(val), sizeof (val), &(myht), sizeof (myht), &(((**val)).value.obj.handlers), sizeof (((**val)).value.obj.handlers), &(((**val)).value.obj.handlers->get_properties), sizeof (((**val)).value.obj.handlers->get_properties), &(r), sizeof (r), &(options), sizeof (options), &((**val).type), sizeof ((**val).type), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(buf), sizeof (buf), &(i), sizeof (i), &((**val).refcount__gc), sizeof ((**val).refcount__gc), &((**val).is_ref__gc), sizeof ((**val).is_ref__gc), &(((**val)).refcount__gc), sizeof (((**val)).refcount__gc), &(((**val)).type), sizeof (((**val)).type), &(((**val)).is_ref__gc), sizeof (((**val)).is_ref__gc), &(((**val)).value.obj.handle), sizeof (((**val)).value.obj.handle), &(((**val)).value.obj.handlers->add_ref), sizeof (((**val)).value.obj.handlers->add_ref), &(((**val)).value.obj.handlers->del_ref), sizeof (((**val)).value.obj.handlers->del_ref), &(((**val)).value.obj.handlers->clone_obj), sizeof (((**val)).value.obj.handlers->clone_obj), &(((**val)).value.obj.handlers->read_property), sizeof (((**val)).value.obj.handlers->read_property), &(((**val)).value.obj.handlers->write_property), sizeof (((**val)).value.obj.handlers->write_property), &(((**val)).value.obj.handlers->read_dimension), sizeof (((**val)).value.obj.handlers->read_dimension), &(((**val)).value.obj.handlers->write_dimension), sizeof (((**val)).value.obj.handlers->write_dimension), &(((**val)).value.obj.handlers->get_property_ptr_ptr), sizeof (((**val)).value.obj.handlers->get_property_ptr_ptr), &(((**val)).value.obj.handlers->get), sizeof (((**val)).value.obj.handlers->get), &(((**val)).value.obj.handlers->set), sizeof (((**val)).value.obj.handlers->set), &(((**val)).value.obj.handlers->has_property), sizeof (((**val)).value.obj.handlers->has_property), &(((**val)).value.obj.handlers->unset_property), sizeof (((**val)).value.obj.handlers->unset_property), &(((**val)).value.obj.handlers->has_dimension), sizeof (((**val)).value.obj.handlers->has_dimension), &(((**val)).value.obj.handlers->unset_dimension), sizeof (((**val)).value.obj.handlers->unset_dimension), &(((**val)).value.obj.handlers->get_method), sizeof (((**val)).value.obj.handlers->get_method), &(((**val)).value.obj.handlers->call_method), sizeof (((**val)).value.obj.handlers->call_method), &(((**val)).value.obj.handlers->get_constructor), sizeof (((**val)).value.obj.handlers->get_constructor), &(((**val)).value.obj.handlers->get_class_entry), sizeof (((**val)).value.obj.handlers->get_class_entry), &(((**val)).value.obj.handlers->get_class_name), sizeof (((**val)).value.obj.handlers->get_class_name), &(((**val)).value.obj.handlers->compare_objects), sizeof (((**val)).value.obj.handlers->compare_objects), &(((**val)).value.obj.handlers->cast_object), sizeof (((**val)).value.obj.handlers->cast_object), &(((**val)).value.obj.handlers->count_elements), sizeof (((**val)).value.obj.handlers->count_elements), &(((**val)).value.obj.handlers->get_debug_info), sizeof (((**val)).value.obj.handlers->get_debug_info), &(((**val)).value.obj.handlers->get_closure), sizeof (((**val)).value.obj.handlers->get_closure), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	2,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	3,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	4,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	5,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	6,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	7,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	8,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	9,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	10,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	11,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	12,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	13,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	14,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	15,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	16,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	17,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	18,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	19,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	20,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	21,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	22,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	23,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	24,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	25,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	26,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	27,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	28,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	29,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	30,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	31,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	32,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	33,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	34,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	35,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	36,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	37,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	38,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	39,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	40,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	41,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	42,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	43,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	44,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	45,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	46,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	47,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	48,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	49,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	50,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	51,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	52,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	53,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	54,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	55,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	56,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	57,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	58,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	59,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	60,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	61,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	62,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	63,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	64,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	65,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	66,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	67,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	68,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	69,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	70,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	71,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	72,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	73,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	74,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	75,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	76,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	77,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	78,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	79,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	80,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	81,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	82,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	83,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	84,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	85,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	86,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	87,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	88,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	89,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	90,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	91,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	92,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	93,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	94,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	95,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	96,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	97,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	98,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	99,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	100,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	101,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	102,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	103,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	104,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	105,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	106,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	107,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	108,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	109,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	110,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	111,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	112,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	113,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	114,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	115,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	116,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	117,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	118,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	119,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	120,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	121,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	122,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	123,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	124,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	125,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	126,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	127,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	128,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	129,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	130,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	131,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	132,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	133,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	134,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	135,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	136,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	137,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	138,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	139,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	140,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	141,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	142,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	143,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	144,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	145,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	146,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	147,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	148,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	149,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	150,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	151,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	152,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	153,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	154,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	155,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	156,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	157,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	158,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	159,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	160,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	161,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	162,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	163,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	164,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	165,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	166,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	167,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	168,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	169,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	170,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	171,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	172,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	173,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	174,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	175,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	176,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	177,
									"scores":	[-8.6888918753918833, -9.12635233519188, -9.9924632630918833, -8.0865706518018836, -9.6107349993918838, -9.5498554063918828, -10.326901180391882, -10.326901180391882, -9.79589432019188, -9.77034018039188, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.326901180391882, -10.572940094191882, -10.572940094191882, -10.572940094191882, -10.537790297391883, -10.326901180391882, -10.326901180391882, -10.326901180391882]
								}]
						}, {
							"switch":	6,
							"types":	[[], [], [1], [], [], [], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [], [4], [], [], [], [], [2], [], [], [3]],
							"begin_line":	228,
							"begin_column":	3,
							"end_line":	228,
							"end_column":	10,
							"patch_codes":	["if (!__is_neg(\"\", \"L228\", 51, &(val), sizeof (val), &(myht), sizeof (myht), &(((**val)).value.obj.handlers), sizeof (((**val)).value.obj.handlers), &(((**val)).value.obj.handlers->get_properties), sizeof (((**val)).value.obj.handlers->get_properties), &(r), sizeof (r), &(options), sizeof (options), &((**val).type), sizeof ((**val).type), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(buf), sizeof (buf), &(i), sizeof (i), &((**val).refcount__gc), sizeof ((**val).refcount__gc), &((**val).is_ref__gc), sizeof ((**val).is_ref__gc), &(((**val)).refcount__gc), sizeof (((**val)).refcount__gc), &(((**val)).type), sizeof (((**val)).type), &(((**val)).is_ref__gc), sizeof (((**val)).is_ref__gc), &(((**val)).value.obj.handle), sizeof (((**val)).value.obj.handle), &(((**val)).value.obj.handlers->add_ref), sizeof (((**val)).value.obj.handlers->add_ref), &(((**val)).value.obj.handlers->del_ref), sizeof (((**val)).value.obj.handlers->del_ref), &(((**val)).value.obj.handlers->clone_obj), sizeof (((**val)).value.obj.handlers->clone_obj), &(((**val)).value.obj.handlers->read_property), sizeof (((**val)).value.obj.handlers->read_property), &(((**val)).value.obj.handlers->write_property), sizeof (((**val)).value.obj.handlers->write_property), &(((**val)).value.obj.handlers->read_dimension), sizeof (((**val)).value.obj.handlers->read_dimension), &(((**val)).value.obj.handlers->write_dimension), sizeof (((**val)).value.obj.handlers->write_dimension), &(((**val)).value.obj.handlers->get_property_ptr_ptr), sizeof (((**val)).value.obj.handlers->get_property_ptr_ptr), &(((**val)).value.obj.handlers->get), sizeof (((**val)).value.obj.handlers->get), &(((**val)).value.obj.handlers->set), sizeof (((**val)).value.obj.handlers->set), &(((**val)).value.obj.handlers->has_property), sizeof (((**val)).value.obj.handlers->has_property), &(((**val)).value.obj.handlers->unset_property), sizeof (((**val)).value.obj.handlers->unset_property), &(((**val)).value.obj.handlers->has_dimension), sizeof (((**val)).value.obj.handlers->has_dimension), &(((**val)).value.obj.handlers->unset_dimension), sizeof (((**val)).value.obj.handlers->unset_dimension), &(((**val)).value.obj.handlers->get_method), sizeof (((**val)).value.obj.handlers->get_method), &(((**val)).value.obj.handlers->call_method), sizeof (((**val)).value.obj.handlers->call_method), &(((**val)).value.obj.handlers->get_constructor), sizeof (((**val)).value.obj.handlers->get_constructor), &(((**val)).value.obj.handlers->get_class_entry), sizeof (((**val)).value.obj.handlers->get_class_entry), &(((**val)).value.obj.handlers->get_class_name), sizeof (((**val)).value.obj.handlers->get_class_name), &(((**val)).value.obj.handlers->compare_objects), sizeof (((**val)).value.obj.handlers->compare_objects), &(((**val)).value.obj.handlers->cast_object), sizeof (((**val)).value.obj.handlers->cast_object), &(((**val)).value.obj.handlers->count_elements), sizeof (((**val)).value.obj.handlers->count_elements), &(((**val)).value.obj.handlers->get_debug_info), sizeof (((**val)).value.obj.handlers->get_debug_info), &(((**val)).value.obj.handlers->get_closure), sizeof (((**val)).value.obj.handlers->get_closure), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection)))\n    myht = ((**val)).value.obj.handlers->get_properties(&(**val));\n", "zend_std_get_debug_info(&(**val), 0)", "{\n}\n", "myht = zend_std_get_properties(&(**val))", "myht = ((**(&buf))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(&i))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(&myht))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(&options))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(&r))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(&val))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(val))).value.obj.handlers->get_properties(&(**val))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(&buf)))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(&i)))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(&myht)))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(&options)))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(&r)))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(&val)))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(val)))", "myht = (myht)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6468139903918821, -8.8174318013918835, -8.1578904003918833, -6.4675183003918821, -8.65205074539188, -8.17315428039188, -8.40364829039188, -8.40364829039188, -8.931042380391883, -8.19260118039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188, -9.16153639039188, -9.16153639039188, -9.16153639039188, -8.87290829039188, -8.40364829039188, -8.40364829039188, -8.40364829039188]
								}, {
									"case":	2,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	3,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	4,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	5,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	6,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	7,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	8,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	9,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	10,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	11,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	12,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	13,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	14,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	15,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	16,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	17,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	18,
									"scores":	[-7.7909428103918827]
								}, {
									"case":	19,
									"scores":	[-7.7909428103918827]
								}]
						}]
				}, {
					"line":	228,
					"switches":	[{
							"switch":	7,
							"types":	[[], [], [], [], [174], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], [], [], [], [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173], [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151], [], [], [], [], [], []],
							"begin_line":	229,
							"begin_column":	1,
							"end_line":	229,
							"end_column":	1,
							"patch_codes":	["memset(&((**val)).is_ref__gc, 0, sizeof (*(&((**val)).is_ref__gc)))", "memset(&((**val)).refcount__gc, 0, sizeof (*(&((**val)).refcount__gc)))", "memset(&((**val)).type, 0, sizeof (*(&((**val)).type)))", "memset(&((**val)).value, 0, sizeof (*(&((**val)).value)))", "memset(&((**val)).value.dval, 0, sizeof (*(&((**val)).value.dval)))", "memset(&((**val)).value.ht, 0, sizeof (*(&((**val)).value.ht)))", "memset(&((**val)).value.lval, 0, sizeof (*(&((**val)).value.lval)))", "memset(&((**val)).value.obj, 0, sizeof (*(&((**val)).value.obj)))", "memset(&((**val)).value.obj.handle, 0, sizeof (*(&((**val)).value.obj.handle)))", "memset(&((**val)).value.obj.handlers, 0, sizeof (*(&((**val)).value.obj.handlers)))", "memset(&((**val)).value.obj.handlers->add_ref, 0, sizeof (*(&((**val)).value.obj.handlers->add_ref)))", "memset(&((**val)).value.obj.handlers->call_method, 0, sizeof (*(&((**val)).value.obj.handlers->call_method)))", "memset(&((**val)).value.obj.handlers->cast_object, 0, sizeof (*(&((**val)).value.obj.handlers->cast_object)))", "memset(&((**val)).value.obj.handlers->clone_obj, 0, sizeof (*(&((**val)).value.obj.handlers->clone_obj)))", "memset(&((**val)).value.obj.handlers->compare_objects, 0, sizeof (*(&((**val)).value.obj.handlers->compare_objects)))", "memset(&((**val)).value.obj.handlers->count_elements, 0, sizeof (*(&((**val)).value.obj.handlers->count_elements)))", "memset(&((**val)).value.obj.handlers->del_ref, 0, sizeof (*(&((**val)).value.obj.handlers->del_ref)))", "memset(&((**val)).value.obj.handlers->get, 0, sizeof (*(&((**val)).value.obj.handlers->get)))", "memset(&((**val)).value.obj.handlers->get_class_entry, 0, sizeof (*(&((**val)).value.obj.handlers->get_class_entry)))", "memset(&((**val)).value.obj.handlers->get_class_name, 0, sizeof (*(&((**val)).value.obj.handlers->get_class_name)))", "memset(&((**val)).value.obj.handlers->get_closure, 0, sizeof (*(&((**val)).value.obj.handlers->get_closure)))", "memset(&((**val)).value.obj.handlers->get_constructor, 0, sizeof (*(&((**val)).value.obj.handlers->get_constructor)))", "memset(&((**val)).value.obj.handlers->get_debug_info, 0, sizeof (*(&((**val)).value.obj.handlers->get_debug_info)))", "memset(&((**val)).value.obj.handlers->get_method, 0, sizeof (*(&((**val)).value.obj.handlers->get_method)))", "memset(&((**val)).value.obj.handlers->get_properties, 0, sizeof (*(&((**val)).value.obj.handlers->get_properties)))", "memset(&((**val)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&((**val)).value.obj.handlers->get_property_ptr_ptr)))", "memset(&((**val)).value.obj.handlers->has_dimension, 0, sizeof (*(&((**val)).value.obj.handlers->has_dimension)))", "memset(&((**val)).value.obj.handlers->has_property, 0, sizeof (*(&((**val)).value.obj.handlers->has_property)))", "memset(&((**val)).value.obj.handlers->read_dimension, 0, sizeof (*(&((**val)).value.obj.handlers->read_dimension)))", "memset(&((**val)).value.obj.handlers->read_property, 0, sizeof (*(&((**val)).value.obj.handlers->read_property)))", "memset(&((**val)).value.obj.handlers->set, 0, sizeof (*(&((**val)).value.obj.handlers->set)))", "memset(&((**val)).value.obj.handlers->unset_dimension, 0, sizeof (*(&((**val)).value.obj.handlers->unset_dimension)))", "memset(&((**val)).value.obj.handlers->unset_property, 0, sizeof (*(&((**val)).value.obj.handlers->unset_property)))", "memset(&((**val)).value.obj.handlers->write_dimension, 0, sizeof (*(&((**val)).value.obj.handlers->write_dimension)))", "memset(&((**val)).value.obj.handlers->write_property, 0, sizeof (*(&((**val)).value.obj.handlers->write_property)))", "memset(&((**val)).value.str, 0, sizeof (*(&((**val)).value.str)))", "memset(&(**val).is_ref__gc, 0, sizeof (*(&(**val).is_ref__gc)))", "memset(&(**val).refcount__gc, 0, sizeof (*(&(**val).refcount__gc)))", "memset(&(**val).type, 0, sizeof (*(&(**val).type)))", "memset(&(**val).value, 0, sizeof (*(&(**val).value)))", "memset(&json_globals.encoder_depth, 0, sizeof (*(&json_globals.encoder_depth)))", "memset(&json_globals.error_code, 0, sizeof (*(&json_globals.error_code)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset(((**val)).value.ht, 0, sizeof (*(((**val)).value.ht)))", "memset(((**val)).value.obj.handlers, 0, sizeof (*(((**val)).value.obj.handlers)))", "memset(((**val)).value.obj.handlers->add_ref, 0, sizeof (*(((**val)).value.obj.handlers->add_ref)))", "memset(((**val)).value.obj.handlers->call_method, 0, sizeof (*(((**val)).value.obj.handlers->call_method)))", "memset(((**val)).value.obj.handlers->cast_object, 0, sizeof (*(((**val)).value.obj.handlers->cast_object)))", "memset(((**val)).value.obj.handlers->clone_obj, 0, sizeof (*(((**val)).value.obj.handlers->clone_obj)))", "memset(((**val)).value.obj.handlers->compare_objects, 0, sizeof (*(((**val)).value.obj.handlers->compare_objects)))", "memset(((**val)).value.obj.handlers->count_elements, 0, sizeof (*(((**val)).value.obj.handlers->count_elements)))", "memset(((**val)).value.obj.handlers->del_ref, 0, sizeof (*(((**val)).value.obj.handlers->del_ref)))", "memset(((**val)).value.obj.handlers->get, 0, sizeof (*(((**val)).value.obj.handlers->get)))", "memset(((**val)).value.obj.handlers->get_class_entry, 0, sizeof (*(((**val)).value.obj.handlers->get_class_entry)))", "memset(((**val)).value.obj.handlers->get_class_name, 0, sizeof (*(((**val)).value.obj.handlers->get_class_name)))", "memset(((**val)).value.obj.handlers->get_closure, 0, sizeof (*(((**val)).value.obj.handlers->get_closure)))", "memset(((**val)).value.obj.handlers->get_constructor, 0, sizeof (*(((**val)).value.obj.handlers->get_constructor)))", "memset(((**val)).value.obj.handlers->get_debug_info, 0, sizeof (*(((**val)).value.obj.handlers->get_debug_info)))", "memset(((**val)).value.obj.handlers->get_method, 0, sizeof (*(((**val)).value.obj.handlers->get_method)))", "memset(((**val)).value.obj.handlers->get_properties, 0, sizeof (*(((**val)).value.obj.handlers->get_properties)))", "memset(((**val)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(((**val)).value.obj.handlers->get_property_ptr_ptr)))", "memset(((**val)).value.obj.handlers->has_dimension, 0, sizeof (*(((**val)).value.obj.handlers->has_dimension)))", "memset(((**val)).value.obj.handlers->has_property, 0, sizeof (*(((**val)).value.obj.handlers->has_property)))", "memset(((**val)).value.obj.handlers->read_dimension, 0, sizeof (*(((**val)).value.obj.handlers->read_dimension)))", "memset(((**val)).value.obj.handlers->read_property, 0, sizeof (*(((**val)).value.obj.handlers->read_property)))", "memset(((**val)).value.obj.handlers->set, 0, sizeof (*(((**val)).value.obj.handlers->set)))", "memset(((**val)).value.obj.handlers->unset_dimension, 0, sizeof (*(((**val)).value.obj.handlers->unset_dimension)))", "memset(((**val)).value.obj.handlers->unset_property, 0, sizeof (*(((**val)).value.obj.handlers->unset_property)))", "memset(((**val)).value.obj.handlers->write_dimension, 0, sizeof (*(((**val)).value.obj.handlers->write_dimension)))", "memset(((**val)).value.obj.handlers->write_property, 0, sizeof (*(((**val)).value.obj.handlers->write_property)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (i)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (r)", "(myht)->nApplyCount++", "(myht)->nApplyCount--", "i = (0)", "i = (1)", "i = (10)", "i = (128)", "i = (16)", "i = (2)", "i = (3)", "i = (32)", "i = (4)", "i = (5)", "i = (78)", "i = (i)", "i = (myht) ? zend_hash_num_elements(myht) : 0", "i = (options)", "i = (r)", "i = myht ? zend_hash_num_elements((myht)) : 0", "json_pretty_print_char((buf), options, ' ')", "json_pretty_print_char((buf), options, '\\n')", "json_pretty_print_indent((buf), options)", "myht = ((**(val))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(val)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(val)))", "myht = ((**val).type == 4 ? (**(val)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(val)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(val)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "myht = (myht)", "php_json_encode(buf, *(val), options)", "r = (0)", "r = (1)", "r = (10)", "r = (128)", "r = (16)", "r = (2)", "r = (3)", "r = (32)", "r = (4)", "r = (5)", "r = (78)", "r = (i)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((val))", "r = (options)", "r = (r)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "exit(1)", "i = myht ? zend_hash_num_elements(myht) : 0", "json_pretty_print_char(buf, options, ' ')", "json_pretty_print_char(buf, options, '\\n')", "json_pretty_print_indent(buf, options)", "myht = ((**val)).value.obj.handlers->get_properties(&(**val))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "r = (options & (1 << 4)) ? 1 : json_determine_array_type(val)", "r = 1", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L229\", 51, &(r), sizeof (r), &(val), sizeof (val), &(myht), sizeof (myht), &(((**val)).value.obj.handlers), sizeof (((**val)).value.obj.handlers), &(((**val)).value.obj.handlers->get_properties), sizeof (((**val)).value.obj.handlers->get_properties), &(options), sizeof (options), &(myht->nApplyCount), sizeof (myht->nApplyCount), &((**val).type), sizeof ((**val).type), &(buf), sizeof (buf), &(i), sizeof (i), &((**val).refcount__gc), sizeof ((**val).refcount__gc), &((**val).is_ref__gc), sizeof ((**val).is_ref__gc), &(((**val)).refcount__gc), sizeof (((**val)).refcount__gc), &(((**val)).type), sizeof (((**val)).type), &(((**val)).is_ref__gc), sizeof (((**val)).is_ref__gc), &(((**val)).value.obj.handle), sizeof (((**val)).value.obj.handle), &(((**val)).value.obj.handlers->add_ref), sizeof (((**val)).value.obj.handlers->add_ref), &(((**val)).value.obj.handlers->del_ref), sizeof (((**val)).value.obj.handlers->del_ref), &(((**val)).value.obj.handlers->clone_obj), sizeof (((**val)).value.obj.handlers->clone_obj), &(((**val)).value.obj.handlers->read_property), sizeof (((**val)).value.obj.handlers->read_property), &(((**val)).value.obj.handlers->write_property), sizeof (((**val)).value.obj.handlers->write_property), &(((**val)).value.obj.handlers->read_dimension), sizeof (((**val)).value.obj.handlers->read_dimension), &(((**val)).value.obj.handlers->write_dimension), sizeof (((**val)).value.obj.handlers->write_dimension), &(((**val)).value.obj.handlers->get_property_ptr_ptr), sizeof (((**val)).value.obj.handlers->get_property_ptr_ptr), &(((**val)).value.obj.handlers->get), sizeof (((**val)).value.obj.handlers->get), &(((**val)).value.obj.handlers->set), sizeof (((**val)).value.obj.handlers->set), &(((**val)).value.obj.handlers->has_property), sizeof (((**val)).value.obj.handlers->has_property), &(((**val)).value.obj.handlers->unset_property), sizeof (((**val)).value.obj.handlers->unset_property), &(((**val)).value.obj.handlers->has_dimension), sizeof (((**val)).value.obj.handlers->has_dimension), &(((**val)).value.obj.handlers->unset_dimension), sizeof (((**val)).value.obj.handlers->unset_dimension), &(((**val)).value.obj.handlers->get_method), sizeof (((**val)).value.obj.handlers->get_method), &(((**val)).value.obj.handlers->call_method), sizeof (((**val)).value.obj.handlers->call_method), &(((**val)).value.obj.handlers->get_constructor), sizeof (((**val)).value.obj.handlers->get_constructor), &(((**val)).value.obj.handlers->get_class_entry), sizeof (((**val)).value.obj.handlers->get_class_entry), &(((**val)).value.obj.handlers->get_class_name), sizeof (((**val)).value.obj.handlers->get_class_name), &(((**val)).value.obj.handlers->compare_objects), sizeof (((**val)).value.obj.handlers->compare_objects), &(((**val)).value.obj.handlers->cast_object), sizeof (((**val)).value.obj.handlers->cast_object), &(((**val)).value.obj.handlers->count_elements), sizeof (((**val)).value.obj.handlers->count_elements), &(((**val)).value.obj.handlers->get_debug_info), sizeof (((**val)).value.obj.handlers->get_debug_info), &(((**val)).value.obj.handlers->get_closure), sizeof (((**val)).value.obj.handlers->get_closure), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	2,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	3,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	4,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	5,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	6,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	7,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	8,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	9,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	10,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	11,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	12,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	13,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	14,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	15,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	16,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	17,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	18,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	19,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	20,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	21,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	22,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	23,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	24,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	25,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	26,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	27,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	28,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	29,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	30,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	31,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	32,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	33,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	34,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	35,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	36,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	37,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	38,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	39,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	40,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	41,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	42,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	43,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	44,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	45,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	46,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	47,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	48,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	49,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	50,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	51,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	52,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	53,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	54,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	55,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	56,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	57,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	58,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	59,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	60,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	61,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	62,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	63,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	64,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	65,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	66,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	67,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	68,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	69,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	70,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	71,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	72,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	73,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	74,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	75,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	76,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	77,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	78,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	79,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	80,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	81,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	82,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	83,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	84,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	85,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	86,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	87,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	88,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	89,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	90,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	91,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	92,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	93,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	94,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	95,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	96,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	97,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	98,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	99,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	100,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	101,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	102,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	103,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	104,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	105,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	106,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	107,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	108,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	109,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	110,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	111,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	112,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	113,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	114,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	115,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	116,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	117,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	118,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	119,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	120,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	121,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	122,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	123,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	124,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	125,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	126,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	127,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	128,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	129,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	130,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	131,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	132,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	133,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	134,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	135,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	136,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	137,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	138,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	139,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	140,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	141,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	142,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	143,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	144,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	145,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	146,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	147,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	148,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	149,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	150,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	151,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	152,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	153,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	154,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	155,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	156,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	157,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	158,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	159,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	160,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	161,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	162,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	163,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	164,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	165,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	166,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	167,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	168,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	169,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	170,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	171,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	172,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	173,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	174,
									"scores":	[-9.8360571160743628, -10.716025350074364, -8.7985989068743642, -11.496846046874364, -10.723161903974365, -10.136906699074364, -10.913952473074364, -10.913952473074364, -10.382945612874364, -10.357391473074363, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -10.913952473074364, -11.159991386874363, -11.159991386874363, -11.159991386874363, -11.124841590074364, -10.913952473074364, -10.913952473074364, -10.913952473074364]
								}]
						}, {
							"switch":	8,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	229,
							"begin_column":	3,
							"end_line":	229,
							"end_column":	7,
							"patch_codes":	["if (!__is_neg(\"\", \"L229\", 51, &(r), sizeof (r), &(val), sizeof (val), &(myht), sizeof (myht), &(((**val)).value.obj.handlers), sizeof (((**val)).value.obj.handlers), &(((**val)).value.obj.handlers->get_properties), sizeof (((**val)).value.obj.handlers->get_properties), &(options), sizeof (options), &(myht->nApplyCount), sizeof (myht->nApplyCount), &((**val).type), sizeof ((**val).type), &(buf), sizeof (buf), &(i), sizeof (i), &((**val).refcount__gc), sizeof ((**val).refcount__gc), &((**val).is_ref__gc), sizeof ((**val).is_ref__gc), &(((**val)).refcount__gc), sizeof (((**val)).refcount__gc), &(((**val)).type), sizeof (((**val)).type), &(((**val)).is_ref__gc), sizeof (((**val)).is_ref__gc), &(((**val)).value.obj.handle), sizeof (((**val)).value.obj.handle), &(((**val)).value.obj.handlers->add_ref), sizeof (((**val)).value.obj.handlers->add_ref), &(((**val)).value.obj.handlers->del_ref), sizeof (((**val)).value.obj.handlers->del_ref), &(((**val)).value.obj.handlers->clone_obj), sizeof (((**val)).value.obj.handlers->clone_obj), &(((**val)).value.obj.handlers->read_property), sizeof (((**val)).value.obj.handlers->read_property), &(((**val)).value.obj.handlers->write_property), sizeof (((**val)).value.obj.handlers->write_property), &(((**val)).value.obj.handlers->read_dimension), sizeof (((**val)).value.obj.handlers->read_dimension), &(((**val)).value.obj.handlers->write_dimension), sizeof (((**val)).value.obj.handlers->write_dimension), &(((**val)).value.obj.handlers->get_property_ptr_ptr), sizeof (((**val)).value.obj.handlers->get_property_ptr_ptr), &(((**val)).value.obj.handlers->get), sizeof (((**val)).value.obj.handlers->get), &(((**val)).value.obj.handlers->set), sizeof (((**val)).value.obj.handlers->set), &(((**val)).value.obj.handlers->has_property), sizeof (((**val)).value.obj.handlers->has_property), &(((**val)).value.obj.handlers->unset_property), sizeof (((**val)).value.obj.handlers->unset_property), &(((**val)).value.obj.handlers->has_dimension), sizeof (((**val)).value.obj.handlers->has_dimension), &(((**val)).value.obj.handlers->unset_dimension), sizeof (((**val)).value.obj.handlers->unset_dimension), &(((**val)).value.obj.handlers->get_method), sizeof (((**val)).value.obj.handlers->get_method), &(((**val)).value.obj.handlers->call_method), sizeof (((**val)).value.obj.handlers->call_method), &(((**val)).value.obj.handlers->get_constructor), sizeof (((**val)).value.obj.handlers->get_constructor), &(((**val)).value.obj.handlers->get_class_entry), sizeof (((**val)).value.obj.handlers->get_class_entry), &(((**val)).value.obj.handlers->get_class_name), sizeof (((**val)).value.obj.handlers->get_class_name), &(((**val)).value.obj.handlers->compare_objects), sizeof (((**val)).value.obj.handlers->compare_objects), &(((**val)).value.obj.handlers->cast_object), sizeof (((**val)).value.obj.handlers->cast_object), &(((**val)).value.obj.handlers->count_elements), sizeof (((**val)).value.obj.handlers->count_elements), &(((**val)).value.obj.handlers->get_debug_info), sizeof (((**val)).value.obj.handlers->get_debug_info), &(((**val)).value.obj.handlers->get_closure), sizeof (((**val)).value.obj.handlers->get_closure), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection)))\n    r = 1;\n", "{\n}\n", "r = (0 * i)", "r = (0 * options)", "r = (0 * r)", "r = (0)", "r = (1)", "r = (10)", "r = (128)", "r = (16)", "r = (2)", "r = (3)", "r = (32)", "r = (4)", "r = (5)", "r = (78)", "r = (buf != 0)", "r = (buf == 0)", "r = (i != 0)", "r = (i != r)", "r = (i * options)", "r = (i * r)", "r = (i + 0)", "r = (i + r)", "r = (i - 0)", "r = (i - r)", "r = (i == 0)", "r = (i == r)", "r = (i)", "r = (myht != 0)", "r = (myht == 0)", "r = (options != 0)", "r = (options != i)", "r = (options != r)", "r = (options * i)", "r = (options * r)", "r = (options + 0)", "r = (options + i)", "r = (options + r)", "r = (options - 0)", "r = (options - i)", "r = (options - r)", "r = (options == 0)", "r = (options == i)", "r = (options == r)", "r = (options)", "r = (r != 0)", "r = (r * i)", "r = (r * options)", "r = (r + 0)", "r = (r - 0)", "r = (r == 0)", "r = (r)", "r = (val != 0)", "r = (val == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.3748592940743638, -9.4657537835743639, -8.7891397130743645, -9.8363619735743644, -8.8442142125243635, -8.8924815730743649, -9.1229755830743642, -9.1229755830743642, -9.6503696730743638, -8.9119284730743651, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642, -9.880863683074363, -9.880863683074363, -9.880863683074363, -9.5922355830743644, -9.1229755830743642, -9.1229755830743642, -9.1229755830743642]
								}, {
									"case":	2,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	3,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	4,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	5,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	6,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	7,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	8,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	9,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	10,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	11,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	12,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	13,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	14,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	15,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	16,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	17,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	18,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	19,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	20,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	21,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	22,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	23,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	24,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	25,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	26,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	27,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	28,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	29,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	30,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	31,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	32,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	33,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	34,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	35,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	36,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	37,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	38,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	39,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	40,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	41,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	42,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	43,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	44,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	45,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	46,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	47,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	48,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	49,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	50,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	51,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	52,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	53,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	54,
									"scores":	[-7.7707401030743641]
								}, {
									"case":	55,
									"scores":	[-7.7707401030743641]
								}]
						}]
				}, {
					"line":	223,
					"switches":	[{
							"switch":	4,
							"types":	[[], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	224,
							"begin_column":	2,
							"end_line":	230,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L224\", 21, &(val), sizeof (val), &((**val).type), sizeof ((**val).type), &(myht), sizeof (myht), &(options), sizeof (options), &(r), sizeof (r), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(buf), sizeof (buf), &(i), sizeof (i), &((**val).refcount__gc), sizeof ((**val).refcount__gc), &((**val).is_ref__gc), sizeof ((**val).is_ref__gc), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection))) {\n    myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))));\n    r = (options & (1 << 4)) ? 1 : json_determine_array_type(val);\n} else {\n    myht = ((**val)).value.obj.handlers->get_properties(&(**val));\n    r = 1;\n}\n", "if (((**val).type == 4) || __is_neg(\"\", \"L224\", 21, &(val), sizeof (val), &((**val).type), sizeof ((**val).type), &(myht), sizeof (myht), &(options), sizeof (options), &(r), sizeof (r), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(buf), sizeof (buf), &(i), sizeof (i), &((**val).refcount__gc), sizeof ((**val).refcount__gc), &((**val).is_ref__gc), sizeof ((**val).is_ref__gc), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection))) {\n    myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))));\n    r = (options & (1 << 4)) ? 1 : json_determine_array_type(val);\n} else {\n    myht = ((**val)).value.obj.handlers->get_properties(&(**val));\n    r = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.6289404554281477, -0.864208065428147, -4.4337123043281457, -2.7908795644281463, -4.7012037664281454, -4.2485870554281453, -4.4617239423281454, -3.2720599454281452, -3.4831070554281451, -3.4831070554281451, -3.4831070554281451, -3.4831070554281451, -3.4831070554281451, -3.4831070554281451, -4.2409951554281458, -4.2409951554281458, -4.2409951554281458, -3.9523670554281454, -3.4831070554281451, -3.4831070554281451, -3.4831070554281451]
								}, {
									"case":	2,
									"scores":	[-2.6275783124281444, -1.8628459224281451, -5.432350161328146, -3.7895174214281457, -5.6998416234281457, -5.2472249124281456, -5.4603617993281457, -4.2706978024281455, -4.4817449124281454, -4.4817449124281454, -4.4817449124281454, -4.4817449124281454, -4.4817449124281454, -4.4817449124281454, -5.2396330124281452, -5.2396330124281452, -5.2396330124281452, -4.9510049124281457, -4.4817449124281454, -4.4817449124281454, -4.4817449124281454]
								}]
						}]
				}, {
					"line":	240,
					"switches":	[{
							"switch":	10,
							"types":	[[], [], [], [], [111], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [], [], [], [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110], [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88], [], [], [], [], [], []],
							"begin_line":	241,
							"begin_column":	1,
							"end_line":	241,
							"end_column":	1,
							"patch_codes":	["memset(&(**val).is_ref__gc, 0, sizeof (*(&(**val).is_ref__gc)))", "memset(&(**val).refcount__gc, 0, sizeof (*(&(**val).refcount__gc)))", "memset(&(**val).type, 0, sizeof (*(&(**val).type)))", "memset(&(**val).value, 0, sizeof (*(&(**val).value)))", "memset(&json_globals.encoder_depth, 0, sizeof (*(&json_globals.encoder_depth)))", "memset(&json_globals.error_code, 0, sizeof (*(&json_globals.error_code)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (i)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (r)", "(myht)->nApplyCount++", "(myht)->nApplyCount--", "i = (0)", "i = (1)", "i = (10)", "i = (128)", "i = (16)", "i = (2)", "i = (3)", "i = (32)", "i = (4)", "i = (5)", "i = (78)", "i = (i)", "i = (myht) ? zend_hash_num_elements(myht) : 0", "i = (options)", "i = (r)", "i = myht ? zend_hash_num_elements((myht)) : 0", "json_pretty_print_char((buf), options, ' ')", "json_pretty_print_char((buf), options, '\\n')", "json_pretty_print_indent((buf), options)", "myht = ((**(val))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(val)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(val)))", "myht = ((**val).type == 4 ? (**(val)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(val)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(val)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "myht = (myht)", "php_json_encode(buf, *(val), options)", "r = (0)", "r = (1)", "r = (10)", "r = (128)", "r = (16)", "r = (2)", "r = (3)", "r = (32)", "r = (4)", "r = (5)", "r = (78)", "r = (i)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((val))", "r = (options)", "r = (r)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "exit(1)", "i = myht ? zend_hash_num_elements(myht) : 0", "json_pretty_print_char(buf, options, ' ')", "json_pretty_print_char(buf, options, '\\n')", "json_pretty_print_indent(buf, options)", "myht = ((**val)).value.obj.handlers->get_properties(&(**val))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "r = (options & (1 << 4)) ? 1 : json_determine_array_type(val)", "r = 1", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L241\", 6, &(buf), sizeof (buf), &(options), sizeof (options), &(r), sizeof (r), &(i), sizeof (i), &(myht), sizeof (myht), &(val), sizeof (val)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.37682132259995]
								}, {
									"case":	2,
									"scores":	[-8.37682132259995]
								}, {
									"case":	3,
									"scores":	[-8.37682132259995]
								}, {
									"case":	4,
									"scores":	[-8.37682132259995]
								}, {
									"case":	5,
									"scores":	[-8.37682132259995]
								}, {
									"case":	6,
									"scores":	[-8.37682132259995]
								}, {
									"case":	7,
									"scores":	[-8.37682132259995]
								}, {
									"case":	8,
									"scores":	[-8.37682132259995]
								}, {
									"case":	9,
									"scores":	[-8.37682132259995]
								}, {
									"case":	10,
									"scores":	[-8.37682132259995]
								}, {
									"case":	11,
									"scores":	[-8.37682132259995]
								}, {
									"case":	12,
									"scores":	[-8.37682132259995]
								}, {
									"case":	13,
									"scores":	[-8.37682132259995]
								}, {
									"case":	14,
									"scores":	[-8.37682132259995]
								}, {
									"case":	15,
									"scores":	[-8.37682132259995]
								}, {
									"case":	16,
									"scores":	[-8.37682132259995]
								}, {
									"case":	17,
									"scores":	[-8.37682132259995]
								}, {
									"case":	18,
									"scores":	[-8.37682132259995]
								}, {
									"case":	19,
									"scores":	[-8.37682132259995]
								}, {
									"case":	20,
									"scores":	[-8.37682132259995]
								}, {
									"case":	21,
									"scores":	[-8.37682132259995]
								}, {
									"case":	22,
									"scores":	[-8.37682132259995]
								}, {
									"case":	23,
									"scores":	[-8.37682132259995]
								}, {
									"case":	24,
									"scores":	[-8.37682132259995]
								}, {
									"case":	25,
									"scores":	[-8.37682132259995]
								}, {
									"case":	26,
									"scores":	[-8.37682132259995]
								}, {
									"case":	27,
									"scores":	[-8.37682132259995]
								}, {
									"case":	28,
									"scores":	[-8.37682132259995]
								}, {
									"case":	29,
									"scores":	[-8.37682132259995]
								}, {
									"case":	30,
									"scores":	[-8.37682132259995]
								}, {
									"case":	31,
									"scores":	[-8.37682132259995]
								}, {
									"case":	32,
									"scores":	[-8.37682132259995]
								}, {
									"case":	33,
									"scores":	[-8.37682132259995]
								}, {
									"case":	34,
									"scores":	[-8.37682132259995]
								}, {
									"case":	35,
									"scores":	[-8.37682132259995]
								}, {
									"case":	36,
									"scores":	[-8.37682132259995]
								}, {
									"case":	37,
									"scores":	[-8.37682132259995]
								}, {
									"case":	38,
									"scores":	[-8.37682132259995]
								}, {
									"case":	39,
									"scores":	[-8.37682132259995]
								}, {
									"case":	40,
									"scores":	[-8.37682132259995]
								}, {
									"case":	41,
									"scores":	[-8.37682132259995]
								}, {
									"case":	42,
									"scores":	[-8.37682132259995]
								}, {
									"case":	43,
									"scores":	[-8.37682132259995]
								}, {
									"case":	44,
									"scores":	[-8.37682132259995]
								}, {
									"case":	45,
									"scores":	[-8.37682132259995]
								}, {
									"case":	46,
									"scores":	[-8.37682132259995]
								}, {
									"case":	47,
									"scores":	[-8.37682132259995]
								}, {
									"case":	48,
									"scores":	[-8.37682132259995]
								}, {
									"case":	49,
									"scores":	[-8.37682132259995]
								}, {
									"case":	50,
									"scores":	[-8.37682132259995]
								}, {
									"case":	51,
									"scores":	[-8.37682132259995]
								}, {
									"case":	52,
									"scores":	[-8.37682132259995]
								}, {
									"case":	53,
									"scores":	[-8.37682132259995]
								}, {
									"case":	54,
									"scores":	[-8.37682132259995]
								}, {
									"case":	55,
									"scores":	[-8.37682132259995]
								}, {
									"case":	56,
									"scores":	[-8.37682132259995]
								}, {
									"case":	57,
									"scores":	[-8.37682132259995]
								}, {
									"case":	58,
									"scores":	[-8.37682132259995]
								}, {
									"case":	59,
									"scores":	[-8.37682132259995]
								}, {
									"case":	60,
									"scores":	[-8.37682132259995]
								}, {
									"case":	61,
									"scores":	[-8.37682132259995]
								}, {
									"case":	62,
									"scores":	[-8.37682132259995]
								}, {
									"case":	63,
									"scores":	[-8.37682132259995]
								}, {
									"case":	64,
									"scores":	[-8.37682132259995]
								}, {
									"case":	65,
									"scores":	[-8.37682132259995]
								}, {
									"case":	66,
									"scores":	[-8.37682132259995]
								}, {
									"case":	67,
									"scores":	[-8.37682132259995]
								}, {
									"case":	68,
									"scores":	[-8.37682132259995]
								}, {
									"case":	69,
									"scores":	[-8.37682132259995]
								}, {
									"case":	70,
									"scores":	[-8.37682132259995]
								}, {
									"case":	71,
									"scores":	[-8.37682132259995]
								}, {
									"case":	72,
									"scores":	[-8.37682132259995]
								}, {
									"case":	73,
									"scores":	[-8.37682132259995]
								}, {
									"case":	74,
									"scores":	[-8.37682132259995]
								}, {
									"case":	75,
									"scores":	[-8.37682132259995]
								}, {
									"case":	76,
									"scores":	[-8.37682132259995]
								}, {
									"case":	77,
									"scores":	[-8.37682132259995]
								}, {
									"case":	78,
									"scores":	[-8.37682132259995]
								}, {
									"case":	79,
									"scores":	[-8.37682132259995]
								}, {
									"case":	80,
									"scores":	[-8.37682132259995]
								}, {
									"case":	81,
									"scores":	[-8.37682132259995]
								}, {
									"case":	82,
									"scores":	[-8.37682132259995]
								}, {
									"case":	83,
									"scores":	[-8.37682132259995]
								}, {
									"case":	84,
									"scores":	[-8.37682132259995]
								}, {
									"case":	85,
									"scores":	[-8.37682132259995]
								}, {
									"case":	86,
									"scores":	[-8.37682132259995]
								}, {
									"case":	87,
									"scores":	[-8.37682132259995]
								}, {
									"case":	88,
									"scores":	[-8.37682132259995]
								}, {
									"case":	89,
									"scores":	[-8.37682132259995]
								}, {
									"case":	90,
									"scores":	[-8.37682132259995]
								}, {
									"case":	91,
									"scores":	[-8.37682132259995]
								}, {
									"case":	92,
									"scores":	[-8.37682132259995]
								}, {
									"case":	93,
									"scores":	[-8.37682132259995]
								}, {
									"case":	94,
									"scores":	[-8.37682132259995]
								}, {
									"case":	95,
									"scores":	[-8.37682132259995]
								}, {
									"case":	96,
									"scores":	[-8.37682132259995]
								}, {
									"case":	97,
									"scores":	[-8.37682132259995]
								}, {
									"case":	98,
									"scores":	[-8.37682132259995]
								}, {
									"case":	99,
									"scores":	[-8.37682132259995]
								}, {
									"case":	100,
									"scores":	[-8.37682132259995]
								}, {
									"case":	101,
									"scores":	[-8.37682132259995]
								}, {
									"case":	102,
									"scores":	[-8.37682132259995]
								}, {
									"case":	103,
									"scores":	[-8.37682132259995]
								}, {
									"case":	104,
									"scores":	[-8.37682132259995]
								}, {
									"case":	105,
									"scores":	[-8.37682132259995]
								}, {
									"case":	106,
									"scores":	[-8.37682132259995]
								}, {
									"case":	107,
									"scores":	[-8.37682132259995]
								}, {
									"case":	108,
									"scores":	[-8.37682132259995]
								}, {
									"case":	109,
									"scores":	[-8.37682132259995]
								}, {
									"case":	110,
									"scores":	[-8.37682132259995]
								}, {
									"case":	111,
									"scores":	[-11.032429701299948, -11.366867618599947, -11.329767218599947, -11.587352392599948, -11.833391306399948, -11.835341909599949]
								}]
						}, {
							"switch":	11,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	241,
							"begin_column":	3,
							"end_line":	241,
							"end_column":	29,
							"patch_codes":	["if (!__is_neg(\"\", \"L241\", 6, &(buf), sizeof (buf), &(options), sizeof (options), &(r), sizeof (r), &(i), sizeof (i), &(myht), sizeof (myht), &(val), sizeof (val)))\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('{'));\n    } while (0);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.201581602599948, -10.447339492599948, -10.152988692599948, -10.466786392599948, -11.224674492599949, -11.230397192599948]
								}]
						}]
				}, {
					"line":	237,
					"switches":	[{
							"switch":	9,
							"types":	[[], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	238,
							"begin_column":	2,
							"end_line":	242,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L238\", 6, &(r), sizeof (r), &(buf), sizeof (buf), &(options), sizeof (options), &(myht), sizeof (myht), &(i), sizeof (i), &(val), sizeof (val))) {\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('['));\n    } while (0);\n} else {\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('{'));\n    } while (0);\n}\n", "if ((r == 0) || __is_neg(\"\", \"L238\", 6, &(r), sizeof (r), &(buf), sizeof (buf), &(options), sizeof (options), &(myht), sizeof (myht), &(i), sizeof (i), &(val), sizeof (val))) {\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('['));\n    } while (0);\n} else {\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('{'));\n    } while (0);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.4756877174281442, -4.6466939964281471, -4.52188888642815, -4.9121230669281486, -4.7456166974281482, -5.43725763392815]
								}, {
									"case":	2,
									"scores":	[-2.991910146428145, -5.1629164254281452, -5.0381113154281465, -5.4283454959281459, -5.2618391264281463, -5.9534800629281452]
								}]
						}]
				}, {
					"line":	282,
					"switches":	[{
							"switch":	17,
							"types":	[[], [], [], [], [239, 240], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], [], [], [], [209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238], [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], [], [], [], [], [], []],
							"begin_line":	283,
							"begin_column":	5,
							"end_line":	283,
							"end_column":	5,
							"patch_codes":	["memset(&(**data).is_ref__gc, 0, sizeof (*(&(**data).is_ref__gc)))", "memset(&(**data).refcount__gc, 0, sizeof (*(&(**data).refcount__gc)))", "memset(&(**data).type, 0, sizeof (*(&(**data).type)))", "memset(&(**data).value, 0, sizeof (*(&(**data).value)))", "memset(&(**data).value.dval, 0, sizeof (*(&(**data).value.dval)))", "memset(&(**data).value.ht, 0, sizeof (*(&(**data).value.ht)))", "memset(&(**data).value.lval, 0, sizeof (*(&(**data).value.lval)))", "memset(&(**data).value.obj, 0, sizeof (*(&(**data).value.obj)))", "memset(&(**data).value.obj.handle, 0, sizeof (*(&(**data).value.obj.handle)))", "memset(&(**data).value.obj.handlers, 0, sizeof (*(&(**data).value.obj.handlers)))", "memset(&(**data).value.obj.handlers->add_ref, 0, sizeof (*(&(**data).value.obj.handlers->add_ref)))", "memset(&(**data).value.obj.handlers->call_method, 0, sizeof (*(&(**data).value.obj.handlers->call_method)))", "memset(&(**data).value.obj.handlers->cast_object, 0, sizeof (*(&(**data).value.obj.handlers->cast_object)))", "memset(&(**data).value.obj.handlers->clone_obj, 0, sizeof (*(&(**data).value.obj.handlers->clone_obj)))", "memset(&(**data).value.obj.handlers->compare_objects, 0, sizeof (*(&(**data).value.obj.handlers->compare_objects)))", "memset(&(**data).value.obj.handlers->count_elements, 0, sizeof (*(&(**data).value.obj.handlers->count_elements)))", "memset(&(**data).value.obj.handlers->del_ref, 0, sizeof (*(&(**data).value.obj.handlers->del_ref)))", "memset(&(**data).value.obj.handlers->get, 0, sizeof (*(&(**data).value.obj.handlers->get)))", "memset(&(**data).value.obj.handlers->get_class_entry, 0, sizeof (*(&(**data).value.obj.handlers->get_class_entry)))", "memset(&(**data).value.obj.handlers->get_class_name, 0, sizeof (*(&(**data).value.obj.handlers->get_class_name)))", "memset(&(**data).value.obj.handlers->get_closure, 0, sizeof (*(&(**data).value.obj.handlers->get_closure)))", "memset(&(**data).value.obj.handlers->get_constructor, 0, sizeof (*(&(**data).value.obj.handlers->get_constructor)))", "memset(&(**data).value.obj.handlers->get_debug_info, 0, sizeof (*(&(**data).value.obj.handlers->get_debug_info)))", "memset(&(**data).value.obj.handlers->get_method, 0, sizeof (*(&(**data).value.obj.handlers->get_method)))", "memset(&(**data).value.obj.handlers->get_properties, 0, sizeof (*(&(**data).value.obj.handlers->get_properties)))", "memset(&(**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(**data).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(**data).value.obj.handlers->has_dimension, 0, sizeof (*(&(**data).value.obj.handlers->has_dimension)))", "memset(&(**data).value.obj.handlers->has_property, 0, sizeof (*(&(**data).value.obj.handlers->has_property)))", "memset(&(**data).value.obj.handlers->read_dimension, 0, sizeof (*(&(**data).value.obj.handlers->read_dimension)))", "memset(&(**data).value.obj.handlers->read_property, 0, sizeof (*(&(**data).value.obj.handlers->read_property)))", "memset(&(**data).value.obj.handlers->set, 0, sizeof (*(&(**data).value.obj.handlers->set)))", "memset(&(**data).value.obj.handlers->unset_dimension, 0, sizeof (*(&(**data).value.obj.handlers->unset_dimension)))", "memset(&(**data).value.obj.handlers->unset_property, 0, sizeof (*(&(**data).value.obj.handlers->unset_property)))", "memset(&(**data).value.obj.handlers->write_dimension, 0, sizeof (*(&(**data).value.obj.handlers->write_dimension)))", "memset(&(**data).value.obj.handlers->write_property, 0, sizeof (*(&(**data).value.obj.handlers->write_property)))", "memset(&(**data).value.str, 0, sizeof (*(&(**data).value.str)))", "memset(&(**val), 0, sizeof (*(&(**val))))", "memset(&(**val).is_ref__gc, 0, sizeof (*(&(**val).is_ref__gc)))", "memset(&(**val).refcount__gc, 0, sizeof (*(&(**val).refcount__gc)))", "memset(&(**val).type, 0, sizeof (*(&(**val).type)))", "memset(&(**val).value, 0, sizeof (*(&(**val).value)))", "memset(&json_globals.encoder_depth, 0, sizeof (*(&json_globals.encoder_depth)))", "memset(&json_globals.error_code, 0, sizeof (*(&json_globals.error_code)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((**data).value.ht, 0, sizeof (*((**data).value.ht)))", "memset((**data).value.obj.handlers, 0, sizeof (*((**data).value.obj.handlers)))", "memset((**data).value.obj.handlers->add_ref, 0, sizeof (*((**data).value.obj.handlers->add_ref)))", "memset((**data).value.obj.handlers->call_method, 0, sizeof (*((**data).value.obj.handlers->call_method)))", "memset((**data).value.obj.handlers->cast_object, 0, sizeof (*((**data).value.obj.handlers->cast_object)))", "memset((**data).value.obj.handlers->clone_obj, 0, sizeof (*((**data).value.obj.handlers->clone_obj)))", "memset((**data).value.obj.handlers->compare_objects, 0, sizeof (*((**data).value.obj.handlers->compare_objects)))", "memset((**data).value.obj.handlers->count_elements, 0, sizeof (*((**data).value.obj.handlers->count_elements)))", "memset((**data).value.obj.handlers->del_ref, 0, sizeof (*((**data).value.obj.handlers->del_ref)))", "memset((**data).value.obj.handlers->get, 0, sizeof (*((**data).value.obj.handlers->get)))", "memset((**data).value.obj.handlers->get_class_entry, 0, sizeof (*((**data).value.obj.handlers->get_class_entry)))", "memset((**data).value.obj.handlers->get_class_name, 0, sizeof (*((**data).value.obj.handlers->get_class_name)))", "memset((**data).value.obj.handlers->get_closure, 0, sizeof (*((**data).value.obj.handlers->get_closure)))", "memset((**data).value.obj.handlers->get_constructor, 0, sizeof (*((**data).value.obj.handlers->get_constructor)))", "memset((**data).value.obj.handlers->get_debug_info, 0, sizeof (*((**data).value.obj.handlers->get_debug_info)))", "memset((**data).value.obj.handlers->get_method, 0, sizeof (*((**data).value.obj.handlers->get_method)))", "memset((**data).value.obj.handlers->get_properties, 0, sizeof (*((**data).value.obj.handlers->get_properties)))", "memset((**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((**data).value.obj.handlers->get_property_ptr_ptr)))", "memset((**data).value.obj.handlers->has_dimension, 0, sizeof (*((**data).value.obj.handlers->has_dimension)))", "memset((**data).value.obj.handlers->has_property, 0, sizeof (*((**data).value.obj.handlers->has_property)))", "memset((**data).value.obj.handlers->read_dimension, 0, sizeof (*((**data).value.obj.handlers->read_dimension)))", "memset((**data).value.obj.handlers->read_property, 0, sizeof (*((**data).value.obj.handlers->read_property)))", "memset((**data).value.obj.handlers->set, 0, sizeof (*((**data).value.obj.handlers->set)))", "memset((**data).value.obj.handlers->unset_dimension, 0, sizeof (*((**data).value.obj.handlers->unset_dimension)))", "memset((**data).value.obj.handlers->unset_property, 0, sizeof (*((**data).value.obj.handlers->unset_property)))", "memset((**data).value.obj.handlers->write_dimension, 0, sizeof (*((**data).value.obj.handlers->write_dimension)))", "memset((**data).value.obj.handlers->write_property, 0, sizeof (*((**data).value.obj.handlers->write_property)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (i)", "(json_globals.error_code) = (need_comma)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (r)", "(key)++", "(myht)->nApplyCount++", "(myht)->nApplyCount--", "(tmp_ht)->nApplyCount++", "(tmp_ht)->nApplyCount--", "_efree(((key)))", "i = (0)", "i = (1)", "i = (10)", "i = (128)", "i = (16)", "i = (2)", "i = (3)", "i = (32)", "i = (4)", "i = (5)", "i = (78)", "i = (i)", "i = (myht) ? zend_hash_num_elements(myht) : 0", "i = (need_comma)", "i = (options)", "i = (r)", "i = (tmp_ht) ? zend_hash_num_elements(myht) : 0", "i = myht ? zend_hash_num_elements((myht)) : 0", "i = myht ? zend_hash_num_elements((tmp_ht)) : 0", "i = zend_hash_get_current_key_ex((myht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex((tmp_ht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &(key), &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &(pos))", "json_escape_string((buf), key, key_len - 1, options)", "json_escape_string(buf, (key), key_len - 1, options)", "json_pretty_print_char((buf), options, ' ')", "json_pretty_print_char((buf), options, '\\n')", "json_pretty_print_indent((buf), options)", "myht = ((**(data))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(data)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**(val))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(val)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(data)))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(val)))", "myht = ((**val).type == 4 ? (**(data)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**(val)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(data)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(val)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(data)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(val)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "myht = (myht)", "myht = (tmp_ht)", "need_comma = (0)", "need_comma = (1)", "need_comma = (10)", "need_comma = (128)", "need_comma = (16)", "need_comma = (2)", "need_comma = (3)", "need_comma = (32)", "need_comma = (4)", "need_comma = (5)", "need_comma = (78)", "need_comma = (i)", "need_comma = (need_comma)", "need_comma = (options)", "need_comma = (r)", "php_json_encode((buf), *data, options)", "php_json_encode(buf, *(data), options)", "php_json_encode(buf, *(val), options)", "r = (0)", "r = (1)", "r = (10)", "r = (128)", "r = (16)", "r = (2)", "r = (3)", "r = (32)", "r = (4)", "r = (5)", "r = (78)", "r = (i)", "r = (need_comma)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((data))", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((val))", "r = (options)", "r = (r)", "tmp_ht = ((**(data)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**(val)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(data)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(val)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(data)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(val)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(data)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(val)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "tmp_ht = (myht)", "tmp_ht = (tmp_ht)", "zend_hash_internal_pointer_reset_ex((myht), &pos)", "zend_hash_internal_pointer_reset_ex((tmp_ht), &pos)", "zend_hash_internal_pointer_reset_ex(myht, &(pos))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "exit(1)", "i = myht ? zend_hash_num_elements(myht) : 0", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &pos)", "json_escape_string(buf, key, key_len - 1, options)", "json_pretty_print_char(buf, options, ' ')", "json_pretty_print_char(buf, options, '\\n')", "json_pretty_print_indent(buf, options)", "myht = ((**val)).value.obj.handlers->get_properties(&(**val))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "need_comma = 1", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "php_json_encode(buf, *data, options)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type(val)", "r = 1", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht->nApplyCount++", "tmp_ht->nApplyCount--", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_internal_pointer_reset_ex(myht, &pos)", "if (__is_neg(\"\", \"L283\", 16, &(val), sizeof (val), &(key), sizeof (key), &((**val).type), sizeof ((**val).type), &(i), sizeof (i), &(r), sizeof (r), &(tmp_ht), sizeof (tmp_ht), &(buf), sizeof (buf), &(options), sizeof (options), &(data), sizeof (data), &(need_comma), sizeof (need_comma), &(key_len), sizeof (key_len), &(myht), sizeof (myht), &(pos), sizeof (pos), &(index), sizeof (index), &((**val).refcount__gc), sizeof ((**val).refcount__gc), &((**val).is_ref__gc), sizeof ((**val).is_ref__gc)))\n    break;\n", "if (__is_neg(\"\", \"L283\", 16, &(val), sizeof (val), &(key), sizeof (key), &((**val).type), sizeof ((**val).type), &(i), sizeof (i), &(r), sizeof (r), &(tmp_ht), sizeof (tmp_ht), &(buf), sizeof (buf), &(options), sizeof (options), &(data), sizeof (data), &(need_comma), sizeof (need_comma), &(key_len), sizeof (key_len), &(myht), sizeof (myht), &(pos), sizeof (pos), &(index), sizeof (index), &((**val).refcount__gc), sizeof ((**val).refcount__gc), &((**val).is_ref__gc), sizeof ((**val).is_ref__gc)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.27580778601235]
								}, {
									"case":	2,
									"scores":	[-8.27580778601235]
								}, {
									"case":	3,
									"scores":	[-8.27580778601235]
								}, {
									"case":	4,
									"scores":	[-8.27580778601235]
								}, {
									"case":	5,
									"scores":	[-8.27580778601235]
								}, {
									"case":	6,
									"scores":	[-8.27580778601235]
								}, {
									"case":	7,
									"scores":	[-8.27580778601235]
								}, {
									"case":	8,
									"scores":	[-8.27580778601235]
								}, {
									"case":	9,
									"scores":	[-8.27580778601235]
								}, {
									"case":	10,
									"scores":	[-8.27580778601235]
								}, {
									"case":	11,
									"scores":	[-8.27580778601235]
								}, {
									"case":	12,
									"scores":	[-8.27580778601235]
								}, {
									"case":	13,
									"scores":	[-8.27580778601235]
								}, {
									"case":	14,
									"scores":	[-8.27580778601235]
								}, {
									"case":	15,
									"scores":	[-8.27580778601235]
								}, {
									"case":	16,
									"scores":	[-8.27580778601235]
								}, {
									"case":	17,
									"scores":	[-8.27580778601235]
								}, {
									"case":	18,
									"scores":	[-8.27580778601235]
								}, {
									"case":	19,
									"scores":	[-8.27580778601235]
								}, {
									"case":	20,
									"scores":	[-8.27580778601235]
								}, {
									"case":	21,
									"scores":	[-8.27580778601235]
								}, {
									"case":	22,
									"scores":	[-8.27580778601235]
								}, {
									"case":	23,
									"scores":	[-8.27580778601235]
								}, {
									"case":	24,
									"scores":	[-8.27580778601235]
								}, {
									"case":	25,
									"scores":	[-8.27580778601235]
								}, {
									"case":	26,
									"scores":	[-8.27580778601235]
								}, {
									"case":	27,
									"scores":	[-8.27580778601235]
								}, {
									"case":	28,
									"scores":	[-8.27580778601235]
								}, {
									"case":	29,
									"scores":	[-8.27580778601235]
								}, {
									"case":	30,
									"scores":	[-8.27580778601235]
								}, {
									"case":	31,
									"scores":	[-8.27580778601235]
								}, {
									"case":	32,
									"scores":	[-8.27580778601235]
								}, {
									"case":	33,
									"scores":	[-8.27580778601235]
								}, {
									"case":	34,
									"scores":	[-8.27580778601235]
								}, {
									"case":	35,
									"scores":	[-8.27580778601235]
								}, {
									"case":	36,
									"scores":	[-8.27580778601235]
								}, {
									"case":	37,
									"scores":	[-8.27580778601235]
								}, {
									"case":	38,
									"scores":	[-8.27580778601235]
								}, {
									"case":	39,
									"scores":	[-8.27580778601235]
								}, {
									"case":	40,
									"scores":	[-8.27580778601235]
								}, {
									"case":	41,
									"scores":	[-8.27580778601235]
								}, {
									"case":	42,
									"scores":	[-8.27580778601235]
								}, {
									"case":	43,
									"scores":	[-8.27580778601235]
								}, {
									"case":	44,
									"scores":	[-8.27580778601235]
								}, {
									"case":	45,
									"scores":	[-8.27580778601235]
								}, {
									"case":	46,
									"scores":	[-8.27580778601235]
								}, {
									"case":	47,
									"scores":	[-8.27580778601235]
								}, {
									"case":	48,
									"scores":	[-8.27580778601235]
								}, {
									"case":	49,
									"scores":	[-8.27580778601235]
								}, {
									"case":	50,
									"scores":	[-8.27580778601235]
								}, {
									"case":	51,
									"scores":	[-8.27580778601235]
								}, {
									"case":	52,
									"scores":	[-8.27580778601235]
								}, {
									"case":	53,
									"scores":	[-8.27580778601235]
								}, {
									"case":	54,
									"scores":	[-8.27580778601235]
								}, {
									"case":	55,
									"scores":	[-8.27580778601235]
								}, {
									"case":	56,
									"scores":	[-8.27580778601235]
								}, {
									"case":	57,
									"scores":	[-8.27580778601235]
								}, {
									"case":	58,
									"scores":	[-8.27580778601235]
								}, {
									"case":	59,
									"scores":	[-8.27580778601235]
								}, {
									"case":	60,
									"scores":	[-8.27580778601235]
								}, {
									"case":	61,
									"scores":	[-8.27580778601235]
								}, {
									"case":	62,
									"scores":	[-8.27580778601235]
								}, {
									"case":	63,
									"scores":	[-8.27580778601235]
								}, {
									"case":	64,
									"scores":	[-8.27580778601235]
								}, {
									"case":	65,
									"scores":	[-8.27580778601235]
								}, {
									"case":	66,
									"scores":	[-8.27580778601235]
								}, {
									"case":	67,
									"scores":	[-8.27580778601235]
								}, {
									"case":	68,
									"scores":	[-8.27580778601235]
								}, {
									"case":	69,
									"scores":	[-8.27580778601235]
								}, {
									"case":	70,
									"scores":	[-8.27580778601235]
								}, {
									"case":	71,
									"scores":	[-8.27580778601235]
								}, {
									"case":	72,
									"scores":	[-8.27580778601235]
								}, {
									"case":	73,
									"scores":	[-8.27580778601235]
								}, {
									"case":	74,
									"scores":	[-8.27580778601235]
								}, {
									"case":	75,
									"scores":	[-8.27580778601235]
								}, {
									"case":	76,
									"scores":	[-8.27580778601235]
								}, {
									"case":	77,
									"scores":	[-8.27580778601235]
								}, {
									"case":	78,
									"scores":	[-8.27580778601235]
								}, {
									"case":	79,
									"scores":	[-8.27580778601235]
								}, {
									"case":	80,
									"scores":	[-8.27580778601235]
								}, {
									"case":	81,
									"scores":	[-8.27580778601235]
								}, {
									"case":	82,
									"scores":	[-8.27580778601235]
								}, {
									"case":	83,
									"scores":	[-8.27580778601235]
								}, {
									"case":	84,
									"scores":	[-8.27580778601235]
								}, {
									"case":	85,
									"scores":	[-8.27580778601235]
								}, {
									"case":	86,
									"scores":	[-8.27580778601235]
								}, {
									"case":	87,
									"scores":	[-8.27580778601235]
								}, {
									"case":	88,
									"scores":	[-8.27580778601235]
								}, {
									"case":	89,
									"scores":	[-8.27580778601235]
								}, {
									"case":	90,
									"scores":	[-8.27580778601235]
								}, {
									"case":	91,
									"scores":	[-8.27580778601235]
								}, {
									"case":	92,
									"scores":	[-8.27580778601235]
								}, {
									"case":	93,
									"scores":	[-8.27580778601235]
								}, {
									"case":	94,
									"scores":	[-8.27580778601235]
								}, {
									"case":	95,
									"scores":	[-8.27580778601235]
								}, {
									"case":	96,
									"scores":	[-8.27580778601235]
								}, {
									"case":	97,
									"scores":	[-8.27580778601235]
								}, {
									"case":	98,
									"scores":	[-8.27580778601235]
								}, {
									"case":	99,
									"scores":	[-8.27580778601235]
								}, {
									"case":	100,
									"scores":	[-8.27580778601235]
								}, {
									"case":	101,
									"scores":	[-8.27580778601235]
								}, {
									"case":	102,
									"scores":	[-8.27580778601235]
								}, {
									"case":	103,
									"scores":	[-8.27580778601235]
								}, {
									"case":	104,
									"scores":	[-8.27580778601235]
								}, {
									"case":	105,
									"scores":	[-8.27580778601235]
								}, {
									"case":	106,
									"scores":	[-8.27580778601235]
								}, {
									"case":	107,
									"scores":	[-8.27580778601235]
								}, {
									"case":	108,
									"scores":	[-8.27580778601235]
								}, {
									"case":	109,
									"scores":	[-8.27580778601235]
								}, {
									"case":	110,
									"scores":	[-8.27580778601235]
								}, {
									"case":	111,
									"scores":	[-8.27580778601235]
								}, {
									"case":	112,
									"scores":	[-8.27580778601235]
								}, {
									"case":	113,
									"scores":	[-8.27580778601235]
								}, {
									"case":	114,
									"scores":	[-8.27580778601235]
								}, {
									"case":	115,
									"scores":	[-8.27580778601235]
								}, {
									"case":	116,
									"scores":	[-8.27580778601235]
								}, {
									"case":	117,
									"scores":	[-8.27580778601235]
								}, {
									"case":	118,
									"scores":	[-8.27580778601235]
								}, {
									"case":	119,
									"scores":	[-8.27580778601235]
								}, {
									"case":	120,
									"scores":	[-8.27580778601235]
								}, {
									"case":	121,
									"scores":	[-8.27580778601235]
								}, {
									"case":	122,
									"scores":	[-8.27580778601235]
								}, {
									"case":	123,
									"scores":	[-8.27580778601235]
								}, {
									"case":	124,
									"scores":	[-8.27580778601235]
								}, {
									"case":	125,
									"scores":	[-8.27580778601235]
								}, {
									"case":	126,
									"scores":	[-8.27580778601235]
								}, {
									"case":	127,
									"scores":	[-8.27580778601235]
								}, {
									"case":	128,
									"scores":	[-8.27580778601235]
								}, {
									"case":	129,
									"scores":	[-8.27580778601235]
								}, {
									"case":	130,
									"scores":	[-8.27580778601235]
								}, {
									"case":	131,
									"scores":	[-8.27580778601235]
								}, {
									"case":	132,
									"scores":	[-8.27580778601235]
								}, {
									"case":	133,
									"scores":	[-8.27580778601235]
								}, {
									"case":	134,
									"scores":	[-8.27580778601235]
								}, {
									"case":	135,
									"scores":	[-8.27580778601235]
								}, {
									"case":	136,
									"scores":	[-8.27580778601235]
								}, {
									"case":	137,
									"scores":	[-8.27580778601235]
								}, {
									"case":	138,
									"scores":	[-8.27580778601235]
								}, {
									"case":	139,
									"scores":	[-8.27580778601235]
								}, {
									"case":	140,
									"scores":	[-8.27580778601235]
								}, {
									"case":	141,
									"scores":	[-8.27580778601235]
								}, {
									"case":	142,
									"scores":	[-8.27580778601235]
								}, {
									"case":	143,
									"scores":	[-8.27580778601235]
								}, {
									"case":	144,
									"scores":	[-8.27580778601235]
								}, {
									"case":	145,
									"scores":	[-8.27580778601235]
								}, {
									"case":	146,
									"scores":	[-8.27580778601235]
								}, {
									"case":	147,
									"scores":	[-8.27580778601235]
								}, {
									"case":	148,
									"scores":	[-8.27580778601235]
								}, {
									"case":	149,
									"scores":	[-8.27580778601235]
								}, {
									"case":	150,
									"scores":	[-8.27580778601235]
								}, {
									"case":	151,
									"scores":	[-8.27580778601235]
								}, {
									"case":	152,
									"scores":	[-8.27580778601235]
								}, {
									"case":	153,
									"scores":	[-8.27580778601235]
								}, {
									"case":	154,
									"scores":	[-8.27580778601235]
								}, {
									"case":	155,
									"scores":	[-8.27580778601235]
								}, {
									"case":	156,
									"scores":	[-8.27580778601235]
								}, {
									"case":	157,
									"scores":	[-8.27580778601235]
								}, {
									"case":	158,
									"scores":	[-8.27580778601235]
								}, {
									"case":	159,
									"scores":	[-8.27580778601235]
								}, {
									"case":	160,
									"scores":	[-8.27580778601235]
								}, {
									"case":	161,
									"scores":	[-8.27580778601235]
								}, {
									"case":	162,
									"scores":	[-8.27580778601235]
								}, {
									"case":	163,
									"scores":	[-8.27580778601235]
								}, {
									"case":	164,
									"scores":	[-8.27580778601235]
								}, {
									"case":	165,
									"scores":	[-8.27580778601235]
								}, {
									"case":	166,
									"scores":	[-8.27580778601235]
								}, {
									"case":	167,
									"scores":	[-8.27580778601235]
								}, {
									"case":	168,
									"scores":	[-8.27580778601235]
								}, {
									"case":	169,
									"scores":	[-8.27580778601235]
								}, {
									"case":	170,
									"scores":	[-8.27580778601235]
								}, {
									"case":	171,
									"scores":	[-8.27580778601235]
								}, {
									"case":	172,
									"scores":	[-8.27580778601235]
								}, {
									"case":	173,
									"scores":	[-8.27580778601235]
								}, {
									"case":	174,
									"scores":	[-8.27580778601235]
								}, {
									"case":	175,
									"scores":	[-8.27580778601235]
								}, {
									"case":	176,
									"scores":	[-8.27580778601235]
								}, {
									"case":	177,
									"scores":	[-8.27580778601235]
								}, {
									"case":	178,
									"scores":	[-8.27580778601235]
								}, {
									"case":	179,
									"scores":	[-8.27580778601235]
								}, {
									"case":	180,
									"scores":	[-8.27580778601235]
								}, {
									"case":	181,
									"scores":	[-8.27580778601235]
								}, {
									"case":	182,
									"scores":	[-8.27580778601235]
								}, {
									"case":	183,
									"scores":	[-8.27580778601235]
								}, {
									"case":	184,
									"scores":	[-8.27580778601235]
								}, {
									"case":	185,
									"scores":	[-8.27580778601235]
								}, {
									"case":	186,
									"scores":	[-8.27580778601235]
								}, {
									"case":	187,
									"scores":	[-8.27580778601235]
								}, {
									"case":	188,
									"scores":	[-8.27580778601235]
								}, {
									"case":	189,
									"scores":	[-8.27580778601235]
								}, {
									"case":	190,
									"scores":	[-8.27580778601235]
								}, {
									"case":	191,
									"scores":	[-8.27580778601235]
								}, {
									"case":	192,
									"scores":	[-8.27580778601235]
								}, {
									"case":	193,
									"scores":	[-8.27580778601235]
								}, {
									"case":	194,
									"scores":	[-8.27580778601235]
								}, {
									"case":	195,
									"scores":	[-8.27580778601235]
								}, {
									"case":	196,
									"scores":	[-8.27580778601235]
								}, {
									"case":	197,
									"scores":	[-8.27580778601235]
								}, {
									"case":	198,
									"scores":	[-8.27580778601235]
								}, {
									"case":	199,
									"scores":	[-8.27580778601235]
								}, {
									"case":	200,
									"scores":	[-8.27580778601235]
								}, {
									"case":	201,
									"scores":	[-8.27580778601235]
								}, {
									"case":	202,
									"scores":	[-8.27580778601235]
								}, {
									"case":	203,
									"scores":	[-8.27580778601235]
								}, {
									"case":	204,
									"scores":	[-8.27580778601235]
								}, {
									"case":	205,
									"scores":	[-8.27580778601235]
								}, {
									"case":	206,
									"scores":	[-8.27580778601235]
								}, {
									"case":	207,
									"scores":	[-8.27580778601235]
								}, {
									"case":	208,
									"scores":	[-8.27580778601235]
								}, {
									"case":	209,
									"scores":	[-8.27580778601235]
								}, {
									"case":	210,
									"scores":	[-8.27580778601235]
								}, {
									"case":	211,
									"scores":	[-8.27580778601235]
								}, {
									"case":	212,
									"scores":	[-8.27580778601235]
								}, {
									"case":	213,
									"scores":	[-8.27580778601235]
								}, {
									"case":	214,
									"scores":	[-8.27580778601235]
								}, {
									"case":	215,
									"scores":	[-8.27580778601235]
								}, {
									"case":	216,
									"scores":	[-8.27580778601235]
								}, {
									"case":	217,
									"scores":	[-8.27580778601235]
								}, {
									"case":	218,
									"scores":	[-8.27580778601235]
								}, {
									"case":	219,
									"scores":	[-8.27580778601235]
								}, {
									"case":	220,
									"scores":	[-8.27580778601235]
								}, {
									"case":	221,
									"scores":	[-8.27580778601235]
								}, {
									"case":	222,
									"scores":	[-8.27580778601235]
								}, {
									"case":	223,
									"scores":	[-8.27580778601235]
								}, {
									"case":	224,
									"scores":	[-8.27580778601235]
								}, {
									"case":	225,
									"scores":	[-8.27580778601235]
								}, {
									"case":	226,
									"scores":	[-8.27580778601235]
								}, {
									"case":	227,
									"scores":	[-8.27580778601235]
								}, {
									"case":	228,
									"scores":	[-8.27580778601235]
								}, {
									"case":	229,
									"scores":	[-8.27580778601235]
								}, {
									"case":	230,
									"scores":	[-8.27580778601235]
								}, {
									"case":	231,
									"scores":	[-8.27580778601235]
								}, {
									"case":	232,
									"scores":	[-8.27580778601235]
								}, {
									"case":	233,
									"scores":	[-8.27580778601235]
								}, {
									"case":	234,
									"scores":	[-8.27580778601235]
								}, {
									"case":	235,
									"scores":	[-8.27580778601235]
								}, {
									"case":	236,
									"scores":	[-8.27580778601235]
								}, {
									"case":	237,
									"scores":	[-8.27580778601235]
								}, {
									"case":	238,
									"scores":	[-8.27580778601235]
								}, {
									"case":	239,
									"scores":	[-12.35801013441235, -12.46659238741235, -12.11121743741235, -11.587816817412349, -11.33023164341235, -12.847435348112352, -12.082519867112351, -11.51301469641235, -11.541120760412351, -11.42821163641235, -11.110547186412351, -11.833855731212351, -11.833855731212351, -11.587816817412349, -12.144377817412352, -12.144377817412352]
								}, {
									"case":	240,
									"scores":	[-12.35801013441235, -12.46659238741235, -12.11121743741235, -11.587816817412349, -11.33023164341235, -12.847435348112352, -12.082519867112351, -11.51301469641235, -11.541120760412351, -11.42821163641235, -11.110547186412351, -11.833855731212351, -11.833855731212351, -11.587816817412349, -12.144377817412352, -12.144377817412352]
								}]
						}, {
							"switch":	18,
							"types":	[[5], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [4]],
							"begin_line":	283,
							"begin_column":	7,
							"end_line":	289,
							"end_column":	7,
							"patch_codes":	["if (__is_neg(\"\", \"L283\", 16, &(val), sizeof (val), &(key), sizeof (key), &((**val).type), sizeof ((**val).type), &(i), sizeof (i), &(r), sizeof (r), &(tmp_ht), sizeof (tmp_ht), &(buf), sizeof (buf), &(options), sizeof (options), &(data), sizeof (data), &(need_comma), sizeof (need_comma), &(key_len), sizeof (key_len), &(myht), sizeof (myht), &(pos), sizeof (pos), &(index), sizeof (index), &((**val).refcount__gc), sizeof ((**val).refcount__gc), &((**val).is_ref__gc), sizeof ((**val).is_ref__gc))) {\n    if (tmp_ht) {\n        tmp_ht->nApplyCount--;\n    }\n    continue;\n}\n", "if (((key[0] == '\\x00') || __is_neg(\"\", \"L283\", 16, &(val), sizeof (val), &(key), sizeof (key), &((**val).type), sizeof ((**val).type), &(i), sizeof (i), &(r), sizeof (r), &(tmp_ht), sizeof (tmp_ht), &(buf), sizeof (buf), &(options), sizeof (options), &(data), sizeof (data), &(need_comma), sizeof (need_comma), &(key_len), sizeof (key_len), &(myht), sizeof (myht), &(pos), sizeof (pos), &(index), sizeof (index), &((**val).refcount__gc), sizeof ((**val).refcount__gc), &((**val).is_ref__gc), sizeof ((**val).is_ref__gc))) && (**val).type == 5) {\n    if (tmp_ht) {\n        tmp_ht->nApplyCount--;\n    }\n    continue;\n}\n", "if ((key[0] == '\\x00' && (**val).type == 5) || __is_neg(\"\", \"L283\", 16, &(val), sizeof (val), &(key), sizeof (key), &((**val).type), sizeof ((**val).type), &(i), sizeof (i), &(r), sizeof (r), &(tmp_ht), sizeof (tmp_ht), &(buf), sizeof (buf), &(options), sizeof (options), &(data), sizeof (data), &(need_comma), sizeof (need_comma), &(key_len), sizeof (key_len), &(myht), sizeof (myht), &(pos), sizeof (pos), &(index), sizeof (index), &((**val).refcount__gc), sizeof ((**val).refcount__gc), &((**val).is_ref__gc), sizeof ((**val).is_ref__gc))) {\n    if (tmp_ht) {\n        tmp_ht->nApplyCount--;\n    }\n    continue;\n}\n", "if (key[0] == '\\x00') {\n    if (tmp_ht) {\n        tmp_ht->nApplyCount--;\n    }\n    continue;\n}\n", "if ((key[0] == '\\x00' && (**val).type == 5) && !__is_neg(\"\", \"L283\", 16, &(val), sizeof (val), &(key), sizeof (key), &((**val).type), sizeof ((**val).type), &(i), sizeof (i), &(r), sizeof (r), &(tmp_ht), sizeof (tmp_ht), &(buf), sizeof (buf), &(options), sizeof (options), &(data), sizeof (data), &(need_comma), sizeof (need_comma), &(key_len), sizeof (key_len), &(myht), sizeof (myht), &(pos), sizeof (pos), &(index), sizeof (index), &((**val).refcount__gc), sizeof ((**val).refcount__gc), &((**val).is_ref__gc), sizeof ((**val).is_ref__gc))) {\n    if (tmp_ht) {\n        tmp_ht->nApplyCount--;\n    }\n    continue;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.026564310428145, -2.7653890194281456, -1.5483966204281452, -3.4613395104281461, -3.1475418104281463, -4.0127959104281459, -3.5500252173281455, -2.7616328194281454, -3.6168018104281461, -3.920789075428146, -2.9475927904281463, -4.2192276104281463, -4.2192276104281463, -3.4613395104281461, -3.6723866204281461, -3.6723866204281461]
								}, {
									"case":	2,
									"scores":	[-3.7752551524281452, -3.5140798614281454, -2.2970874624281459, -4.2100303524281459, -3.8962326524281456, -4.7614867524281461, -4.2987160593281448, -3.5103236614281457, -4.3654926524281459, -4.6694799174281458, -3.6962836324281461, -4.9679184524281457, -4.9679184524281457, -4.2100303524281459, -4.4210774624281459, -4.4210774624281459]
								}, {
									"case":	3,
									"scores":	[-3.7752551524281452, -3.5140798614281454, -2.2970874624281459, -4.2100303524281459, -3.8962326524281456, -4.7614867524281461, -4.2987160593281448, -3.5103236614281457, -4.3654926524281459, -4.6694799174281458, -3.6962836324281461, -4.9679184524281457, -4.9679184524281457, -4.2100303524281459, -4.4210774624281459, -4.4210774624281459]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.7752551524281452, -3.5140798614281454, -2.2970874624281459, -4.2100303524281459, -3.8962326524281456, -4.7614867524281461, -4.2987160593281448, -3.5103236614281457, -4.3654926524281459, -4.6694799174281458, -3.6962836324281461, -4.9679184524281457, -4.9679184524281457, -4.2100303524281459, -4.4210774624281459, -4.4210774624281459]
								}]
						}, {
							"switch":	19,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	283,
							"begin_column":	7,
							"end_line":	289,
							"end_column":	7,
							"patch_codes":	["if (!__is_neg(\"\", \"L283\", 16, &(val), sizeof (val), &(key), sizeof (key), &((**val).type), sizeof ((**val).type), &(i), sizeof (i), &(r), sizeof (r), &(tmp_ht), sizeof (tmp_ht), &(buf), sizeof (buf), &(options), sizeof (options), &(data), sizeof (data), &(need_comma), sizeof (need_comma), &(key_len), sizeof (key_len), &(myht), sizeof (myht), &(pos), sizeof (pos), &(index), sizeof (index), &((**val).refcount__gc), sizeof ((**val).refcount__gc), &((**val).is_ref__gc), sizeof ((**val).is_ref__gc)))\n    if (key[0] == '\\x00' && (**val).type == 5) {\n        if (tmp_ht) {\n            tmp_ht->nApplyCount--;\n        }\n        continue;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.70629894601235, -9.44512365501235, -8.22813125601235, -10.14107414601235, -9.82727644601235, -10.69253054601235, -10.22975985291235, -9.44136745501235, -10.29653644601235, -10.60052371101235, -9.62732742601235, -10.898962246012351, -10.898962246012351, -10.14107414601235, -10.352121256012349, -10.352121256012349]
								}]
						}]
				}, {
					"line":	291,
					"switches":	[{
							"switch":	22,
							"types":	[[], [], [], [], [238, 239], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], [], [], [], [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237], [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], [], [], [], [], [], []],
							"begin_line":	292,
							"begin_column":	6,
							"end_line":	292,
							"end_column":	6,
							"patch_codes":	["memset(&(**data).is_ref__gc, 0, sizeof (*(&(**data).is_ref__gc)))", "memset(&(**data).refcount__gc, 0, sizeof (*(&(**data).refcount__gc)))", "memset(&(**data).type, 0, sizeof (*(&(**data).type)))", "memset(&(**data).value, 0, sizeof (*(&(**data).value)))", "memset(&(**data).value.dval, 0, sizeof (*(&(**data).value.dval)))", "memset(&(**data).value.ht, 0, sizeof (*(&(**data).value.ht)))", "memset(&(**data).value.lval, 0, sizeof (*(&(**data).value.lval)))", "memset(&(**data).value.obj, 0, sizeof (*(&(**data).value.obj)))", "memset(&(**data).value.obj.handle, 0, sizeof (*(&(**data).value.obj.handle)))", "memset(&(**data).value.obj.handlers, 0, sizeof (*(&(**data).value.obj.handlers)))", "memset(&(**data).value.obj.handlers->add_ref, 0, sizeof (*(&(**data).value.obj.handlers->add_ref)))", "memset(&(**data).value.obj.handlers->call_method, 0, sizeof (*(&(**data).value.obj.handlers->call_method)))", "memset(&(**data).value.obj.handlers->cast_object, 0, sizeof (*(&(**data).value.obj.handlers->cast_object)))", "memset(&(**data).value.obj.handlers->clone_obj, 0, sizeof (*(&(**data).value.obj.handlers->clone_obj)))", "memset(&(**data).value.obj.handlers->compare_objects, 0, sizeof (*(&(**data).value.obj.handlers->compare_objects)))", "memset(&(**data).value.obj.handlers->count_elements, 0, sizeof (*(&(**data).value.obj.handlers->count_elements)))", "memset(&(**data).value.obj.handlers->del_ref, 0, sizeof (*(&(**data).value.obj.handlers->del_ref)))", "memset(&(**data).value.obj.handlers->get, 0, sizeof (*(&(**data).value.obj.handlers->get)))", "memset(&(**data).value.obj.handlers->get_class_entry, 0, sizeof (*(&(**data).value.obj.handlers->get_class_entry)))", "memset(&(**data).value.obj.handlers->get_class_name, 0, sizeof (*(&(**data).value.obj.handlers->get_class_name)))", "memset(&(**data).value.obj.handlers->get_closure, 0, sizeof (*(&(**data).value.obj.handlers->get_closure)))", "memset(&(**data).value.obj.handlers->get_constructor, 0, sizeof (*(&(**data).value.obj.handlers->get_constructor)))", "memset(&(**data).value.obj.handlers->get_debug_info, 0, sizeof (*(&(**data).value.obj.handlers->get_debug_info)))", "memset(&(**data).value.obj.handlers->get_method, 0, sizeof (*(&(**data).value.obj.handlers->get_method)))", "memset(&(**data).value.obj.handlers->get_properties, 0, sizeof (*(&(**data).value.obj.handlers->get_properties)))", "memset(&(**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(**data).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(**data).value.obj.handlers->has_dimension, 0, sizeof (*(&(**data).value.obj.handlers->has_dimension)))", "memset(&(**data).value.obj.handlers->has_property, 0, sizeof (*(&(**data).value.obj.handlers->has_property)))", "memset(&(**data).value.obj.handlers->read_dimension, 0, sizeof (*(&(**data).value.obj.handlers->read_dimension)))", "memset(&(**data).value.obj.handlers->read_property, 0, sizeof (*(&(**data).value.obj.handlers->read_property)))", "memset(&(**data).value.obj.handlers->set, 0, sizeof (*(&(**data).value.obj.handlers->set)))", "memset(&(**data).value.obj.handlers->unset_dimension, 0, sizeof (*(&(**data).value.obj.handlers->unset_dimension)))", "memset(&(**data).value.obj.handlers->unset_property, 0, sizeof (*(&(**data).value.obj.handlers->unset_property)))", "memset(&(**data).value.obj.handlers->write_dimension, 0, sizeof (*(&(**data).value.obj.handlers->write_dimension)))", "memset(&(**data).value.obj.handlers->write_property, 0, sizeof (*(&(**data).value.obj.handlers->write_property)))", "memset(&(**data).value.str, 0, sizeof (*(&(**data).value.str)))", "memset(&(**val).is_ref__gc, 0, sizeof (*(&(**val).is_ref__gc)))", "memset(&(**val).refcount__gc, 0, sizeof (*(&(**val).refcount__gc)))", "memset(&(**val).type, 0, sizeof (*(&(**val).type)))", "memset(&(**val).value, 0, sizeof (*(&(**val).value)))", "memset(&json_globals.encoder_depth, 0, sizeof (*(&json_globals.encoder_depth)))", "memset(&json_globals.error_code, 0, sizeof (*(&json_globals.error_code)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((**data).value.ht, 0, sizeof (*((**data).value.ht)))", "memset((**data).value.obj.handlers, 0, sizeof (*((**data).value.obj.handlers)))", "memset((**data).value.obj.handlers->add_ref, 0, sizeof (*((**data).value.obj.handlers->add_ref)))", "memset((**data).value.obj.handlers->call_method, 0, sizeof (*((**data).value.obj.handlers->call_method)))", "memset((**data).value.obj.handlers->cast_object, 0, sizeof (*((**data).value.obj.handlers->cast_object)))", "memset((**data).value.obj.handlers->clone_obj, 0, sizeof (*((**data).value.obj.handlers->clone_obj)))", "memset((**data).value.obj.handlers->compare_objects, 0, sizeof (*((**data).value.obj.handlers->compare_objects)))", "memset((**data).value.obj.handlers->count_elements, 0, sizeof (*((**data).value.obj.handlers->count_elements)))", "memset((**data).value.obj.handlers->del_ref, 0, sizeof (*((**data).value.obj.handlers->del_ref)))", "memset((**data).value.obj.handlers->get, 0, sizeof (*((**data).value.obj.handlers->get)))", "memset((**data).value.obj.handlers->get_class_entry, 0, sizeof (*((**data).value.obj.handlers->get_class_entry)))", "memset((**data).value.obj.handlers->get_class_name, 0, sizeof (*((**data).value.obj.handlers->get_class_name)))", "memset((**data).value.obj.handlers->get_closure, 0, sizeof (*((**data).value.obj.handlers->get_closure)))", "memset((**data).value.obj.handlers->get_constructor, 0, sizeof (*((**data).value.obj.handlers->get_constructor)))", "memset((**data).value.obj.handlers->get_debug_info, 0, sizeof (*((**data).value.obj.handlers->get_debug_info)))", "memset((**data).value.obj.handlers->get_method, 0, sizeof (*((**data).value.obj.handlers->get_method)))", "memset((**data).value.obj.handlers->get_properties, 0, sizeof (*((**data).value.obj.handlers->get_properties)))", "memset((**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((**data).value.obj.handlers->get_property_ptr_ptr)))", "memset((**data).value.obj.handlers->has_dimension, 0, sizeof (*((**data).value.obj.handlers->has_dimension)))", "memset((**data).value.obj.handlers->has_property, 0, sizeof (*((**data).value.obj.handlers->has_property)))", "memset((**data).value.obj.handlers->read_dimension, 0, sizeof (*((**data).value.obj.handlers->read_dimension)))", "memset((**data).value.obj.handlers->read_property, 0, sizeof (*((**data).value.obj.handlers->read_property)))", "memset((**data).value.obj.handlers->set, 0, sizeof (*((**data).value.obj.handlers->set)))", "memset((**data).value.obj.handlers->unset_dimension, 0, sizeof (*((**data).value.obj.handlers->unset_dimension)))", "memset((**data).value.obj.handlers->unset_property, 0, sizeof (*((**data).value.obj.handlers->unset_property)))", "memset((**data).value.obj.handlers->write_dimension, 0, sizeof (*((**data).value.obj.handlers->write_dimension)))", "memset((**data).value.obj.handlers->write_property, 0, sizeof (*((**data).value.obj.handlers->write_property)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (i)", "(json_globals.error_code) = (need_comma)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (r)", "(key)++", "(myht)->nApplyCount++", "(myht)->nApplyCount--", "(tmp_ht)->nApplyCount++", "(tmp_ht)->nApplyCount--", "_efree(((key)))", "i = (0)", "i = (1)", "i = (10)", "i = (128)", "i = (16)", "i = (2)", "i = (3)", "i = (32)", "i = (4)", "i = (5)", "i = (78)", "i = (i)", "i = (myht) ? zend_hash_num_elements(myht) : 0", "i = (need_comma)", "i = (options)", "i = (r)", "i = (tmp_ht) ? zend_hash_num_elements(myht) : 0", "i = myht ? zend_hash_num_elements((myht)) : 0", "i = myht ? zend_hash_num_elements((tmp_ht)) : 0", "i = zend_hash_get_current_key_ex((myht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex((tmp_ht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &(key), &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &(pos))", "json_escape_string((buf), key, key_len - 1, options)", "json_escape_string(buf, (key), key_len - 1, options)", "json_pretty_print_char((buf), options, ' ')", "json_pretty_print_char((buf), options, '\\n')", "json_pretty_print_indent((buf), options)", "myht = ((**(data))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(data)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**(val))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(val)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(data)))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(val)))", "myht = ((**val).type == 4 ? (**(data)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**(val)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(data)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(val)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(data)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(val)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "myht = (myht)", "myht = (tmp_ht)", "need_comma = (0)", "need_comma = (1)", "need_comma = (10)", "need_comma = (128)", "need_comma = (16)", "need_comma = (2)", "need_comma = (3)", "need_comma = (32)", "need_comma = (4)", "need_comma = (5)", "need_comma = (78)", "need_comma = (i)", "need_comma = (need_comma)", "need_comma = (options)", "need_comma = (r)", "php_json_encode((buf), *data, options)", "php_json_encode(buf, *(data), options)", "php_json_encode(buf, *(val), options)", "r = (0)", "r = (1)", "r = (10)", "r = (128)", "r = (16)", "r = (2)", "r = (3)", "r = (32)", "r = (4)", "r = (5)", "r = (78)", "r = (i)", "r = (need_comma)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((data))", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((val))", "r = (options)", "r = (r)", "tmp_ht = ((**(data)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**(val)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(data)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(val)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(data)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(val)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(data)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(val)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "tmp_ht = (myht)", "tmp_ht = (tmp_ht)", "zend_hash_internal_pointer_reset_ex((myht), &pos)", "zend_hash_internal_pointer_reset_ex((tmp_ht), &pos)", "zend_hash_internal_pointer_reset_ex(myht, &(pos))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "exit(1)", "i = myht ? zend_hash_num_elements(myht) : 0", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &pos)", "json_escape_string(buf, key, key_len - 1, options)", "json_pretty_print_char(buf, options, ' ')", "json_pretty_print_char(buf, options, '\\n')", "json_pretty_print_indent(buf, options)", "myht = ((**val)).value.obj.handlers->get_properties(&(**val))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "need_comma = 1", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "php_json_encode(buf, *data, options)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type(val)", "r = 1", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht->nApplyCount++", "tmp_ht->nApplyCount--", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_internal_pointer_reset_ex(myht, &pos)", "if (__is_neg(\"\", \"L292\", 13, &(buf), sizeof (buf), &(options), sizeof (options), &(need_comma), sizeof (need_comma), &(tmp_ht), sizeof (tmp_ht), &(key), sizeof (key), &(key_len), sizeof (key_len), &(val), sizeof (val), &(i), sizeof (i), &(r), sizeof (r), &(data), sizeof (data), &(index), sizeof (index), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    break;\n", "if (__is_neg(\"\", \"L292\", 13, &(buf), sizeof (buf), &(options), sizeof (options), &(need_comma), sizeof (need_comma), &(tmp_ht), sizeof (tmp_ht), &(key), sizeof (key), &(key_len), sizeof (key_len), &(val), sizeof (val), &(i), sizeof (i), &(r), sizeof (r), &(data), sizeof (data), &(index), sizeof (index), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.80101015183343]
								}, {
									"case":	2,
									"scores":	[-6.80101015183343]
								}, {
									"case":	3,
									"scores":	[-6.80101015183343]
								}, {
									"case":	4,
									"scores":	[-6.80101015183343]
								}, {
									"case":	5,
									"scores":	[-6.80101015183343]
								}, {
									"case":	6,
									"scores":	[-6.80101015183343]
								}, {
									"case":	7,
									"scores":	[-6.80101015183343]
								}, {
									"case":	8,
									"scores":	[-6.80101015183343]
								}, {
									"case":	9,
									"scores":	[-6.80101015183343]
								}, {
									"case":	10,
									"scores":	[-6.80101015183343]
								}, {
									"case":	11,
									"scores":	[-6.80101015183343]
								}, {
									"case":	12,
									"scores":	[-6.80101015183343]
								}, {
									"case":	13,
									"scores":	[-6.80101015183343]
								}, {
									"case":	14,
									"scores":	[-6.80101015183343]
								}, {
									"case":	15,
									"scores":	[-6.80101015183343]
								}, {
									"case":	16,
									"scores":	[-6.80101015183343]
								}, {
									"case":	17,
									"scores":	[-6.80101015183343]
								}, {
									"case":	18,
									"scores":	[-6.80101015183343]
								}, {
									"case":	19,
									"scores":	[-6.80101015183343]
								}, {
									"case":	20,
									"scores":	[-6.80101015183343]
								}, {
									"case":	21,
									"scores":	[-6.80101015183343]
								}, {
									"case":	22,
									"scores":	[-6.80101015183343]
								}, {
									"case":	23,
									"scores":	[-6.80101015183343]
								}, {
									"case":	24,
									"scores":	[-6.80101015183343]
								}, {
									"case":	25,
									"scores":	[-6.80101015183343]
								}, {
									"case":	26,
									"scores":	[-6.80101015183343]
								}, {
									"case":	27,
									"scores":	[-6.80101015183343]
								}, {
									"case":	28,
									"scores":	[-6.80101015183343]
								}, {
									"case":	29,
									"scores":	[-6.80101015183343]
								}, {
									"case":	30,
									"scores":	[-6.80101015183343]
								}, {
									"case":	31,
									"scores":	[-6.80101015183343]
								}, {
									"case":	32,
									"scores":	[-6.80101015183343]
								}, {
									"case":	33,
									"scores":	[-6.80101015183343]
								}, {
									"case":	34,
									"scores":	[-6.80101015183343]
								}, {
									"case":	35,
									"scores":	[-6.80101015183343]
								}, {
									"case":	36,
									"scores":	[-6.80101015183343]
								}, {
									"case":	37,
									"scores":	[-6.80101015183343]
								}, {
									"case":	38,
									"scores":	[-6.80101015183343]
								}, {
									"case":	39,
									"scores":	[-6.80101015183343]
								}, {
									"case":	40,
									"scores":	[-6.80101015183343]
								}, {
									"case":	41,
									"scores":	[-6.80101015183343]
								}, {
									"case":	42,
									"scores":	[-6.80101015183343]
								}, {
									"case":	43,
									"scores":	[-6.80101015183343]
								}, {
									"case":	44,
									"scores":	[-6.80101015183343]
								}, {
									"case":	45,
									"scores":	[-6.80101015183343]
								}, {
									"case":	46,
									"scores":	[-6.80101015183343]
								}, {
									"case":	47,
									"scores":	[-6.80101015183343]
								}, {
									"case":	48,
									"scores":	[-6.80101015183343]
								}, {
									"case":	49,
									"scores":	[-6.80101015183343]
								}, {
									"case":	50,
									"scores":	[-6.80101015183343]
								}, {
									"case":	51,
									"scores":	[-6.80101015183343]
								}, {
									"case":	52,
									"scores":	[-6.80101015183343]
								}, {
									"case":	53,
									"scores":	[-6.80101015183343]
								}, {
									"case":	54,
									"scores":	[-6.80101015183343]
								}, {
									"case":	55,
									"scores":	[-6.80101015183343]
								}, {
									"case":	56,
									"scores":	[-6.80101015183343]
								}, {
									"case":	57,
									"scores":	[-6.80101015183343]
								}, {
									"case":	58,
									"scores":	[-6.80101015183343]
								}, {
									"case":	59,
									"scores":	[-6.80101015183343]
								}, {
									"case":	60,
									"scores":	[-6.80101015183343]
								}, {
									"case":	61,
									"scores":	[-6.80101015183343]
								}, {
									"case":	62,
									"scores":	[-6.80101015183343]
								}, {
									"case":	63,
									"scores":	[-6.80101015183343]
								}, {
									"case":	64,
									"scores":	[-6.80101015183343]
								}, {
									"case":	65,
									"scores":	[-6.80101015183343]
								}, {
									"case":	66,
									"scores":	[-6.80101015183343]
								}, {
									"case":	67,
									"scores":	[-6.80101015183343]
								}, {
									"case":	68,
									"scores":	[-6.80101015183343]
								}, {
									"case":	69,
									"scores":	[-6.80101015183343]
								}, {
									"case":	70,
									"scores":	[-6.80101015183343]
								}, {
									"case":	71,
									"scores":	[-6.80101015183343]
								}, {
									"case":	72,
									"scores":	[-6.80101015183343]
								}, {
									"case":	73,
									"scores":	[-6.80101015183343]
								}, {
									"case":	74,
									"scores":	[-6.80101015183343]
								}, {
									"case":	75,
									"scores":	[-6.80101015183343]
								}, {
									"case":	76,
									"scores":	[-6.80101015183343]
								}, {
									"case":	77,
									"scores":	[-6.80101015183343]
								}, {
									"case":	78,
									"scores":	[-6.80101015183343]
								}, {
									"case":	79,
									"scores":	[-6.80101015183343]
								}, {
									"case":	80,
									"scores":	[-6.80101015183343]
								}, {
									"case":	81,
									"scores":	[-6.80101015183343]
								}, {
									"case":	82,
									"scores":	[-6.80101015183343]
								}, {
									"case":	83,
									"scores":	[-6.80101015183343]
								}, {
									"case":	84,
									"scores":	[-6.80101015183343]
								}, {
									"case":	85,
									"scores":	[-6.80101015183343]
								}, {
									"case":	86,
									"scores":	[-6.80101015183343]
								}, {
									"case":	87,
									"scores":	[-6.80101015183343]
								}, {
									"case":	88,
									"scores":	[-6.80101015183343]
								}, {
									"case":	89,
									"scores":	[-6.80101015183343]
								}, {
									"case":	90,
									"scores":	[-6.80101015183343]
								}, {
									"case":	91,
									"scores":	[-6.80101015183343]
								}, {
									"case":	92,
									"scores":	[-6.80101015183343]
								}, {
									"case":	93,
									"scores":	[-6.80101015183343]
								}, {
									"case":	94,
									"scores":	[-6.80101015183343]
								}, {
									"case":	95,
									"scores":	[-6.80101015183343]
								}, {
									"case":	96,
									"scores":	[-6.80101015183343]
								}, {
									"case":	97,
									"scores":	[-6.80101015183343]
								}, {
									"case":	98,
									"scores":	[-6.80101015183343]
								}, {
									"case":	99,
									"scores":	[-6.80101015183343]
								}, {
									"case":	100,
									"scores":	[-6.80101015183343]
								}, {
									"case":	101,
									"scores":	[-6.80101015183343]
								}, {
									"case":	102,
									"scores":	[-6.80101015183343]
								}, {
									"case":	103,
									"scores":	[-6.80101015183343]
								}, {
									"case":	104,
									"scores":	[-6.80101015183343]
								}, {
									"case":	105,
									"scores":	[-6.80101015183343]
								}, {
									"case":	106,
									"scores":	[-6.80101015183343]
								}, {
									"case":	107,
									"scores":	[-6.80101015183343]
								}, {
									"case":	108,
									"scores":	[-6.80101015183343]
								}, {
									"case":	109,
									"scores":	[-6.80101015183343]
								}, {
									"case":	110,
									"scores":	[-6.80101015183343]
								}, {
									"case":	111,
									"scores":	[-6.80101015183343]
								}, {
									"case":	112,
									"scores":	[-6.80101015183343]
								}, {
									"case":	113,
									"scores":	[-6.80101015183343]
								}, {
									"case":	114,
									"scores":	[-6.80101015183343]
								}, {
									"case":	115,
									"scores":	[-6.80101015183343]
								}, {
									"case":	116,
									"scores":	[-6.80101015183343]
								}, {
									"case":	117,
									"scores":	[-6.80101015183343]
								}, {
									"case":	118,
									"scores":	[-6.80101015183343]
								}, {
									"case":	119,
									"scores":	[-6.80101015183343]
								}, {
									"case":	120,
									"scores":	[-6.80101015183343]
								}, {
									"case":	121,
									"scores":	[-6.80101015183343]
								}, {
									"case":	122,
									"scores":	[-6.80101015183343]
								}, {
									"case":	123,
									"scores":	[-6.80101015183343]
								}, {
									"case":	124,
									"scores":	[-6.80101015183343]
								}, {
									"case":	125,
									"scores":	[-6.80101015183343]
								}, {
									"case":	126,
									"scores":	[-6.80101015183343]
								}, {
									"case":	127,
									"scores":	[-6.80101015183343]
								}, {
									"case":	128,
									"scores":	[-6.80101015183343]
								}, {
									"case":	129,
									"scores":	[-6.80101015183343]
								}, {
									"case":	130,
									"scores":	[-6.80101015183343]
								}, {
									"case":	131,
									"scores":	[-6.80101015183343]
								}, {
									"case":	132,
									"scores":	[-6.80101015183343]
								}, {
									"case":	133,
									"scores":	[-6.80101015183343]
								}, {
									"case":	134,
									"scores":	[-6.80101015183343]
								}, {
									"case":	135,
									"scores":	[-6.80101015183343]
								}, {
									"case":	136,
									"scores":	[-6.80101015183343]
								}, {
									"case":	137,
									"scores":	[-6.80101015183343]
								}, {
									"case":	138,
									"scores":	[-6.80101015183343]
								}, {
									"case":	139,
									"scores":	[-6.80101015183343]
								}, {
									"case":	140,
									"scores":	[-6.80101015183343]
								}, {
									"case":	141,
									"scores":	[-6.80101015183343]
								}, {
									"case":	142,
									"scores":	[-6.80101015183343]
								}, {
									"case":	143,
									"scores":	[-6.80101015183343]
								}, {
									"case":	144,
									"scores":	[-6.80101015183343]
								}, {
									"case":	145,
									"scores":	[-6.80101015183343]
								}, {
									"case":	146,
									"scores":	[-6.80101015183343]
								}, {
									"case":	147,
									"scores":	[-6.80101015183343]
								}, {
									"case":	148,
									"scores":	[-6.80101015183343]
								}, {
									"case":	149,
									"scores":	[-6.80101015183343]
								}, {
									"case":	150,
									"scores":	[-6.80101015183343]
								}, {
									"case":	151,
									"scores":	[-6.80101015183343]
								}, {
									"case":	152,
									"scores":	[-6.80101015183343]
								}, {
									"case":	153,
									"scores":	[-6.80101015183343]
								}, {
									"case":	154,
									"scores":	[-6.80101015183343]
								}, {
									"case":	155,
									"scores":	[-6.80101015183343]
								}, {
									"case":	156,
									"scores":	[-6.80101015183343]
								}, {
									"case":	157,
									"scores":	[-6.80101015183343]
								}, {
									"case":	158,
									"scores":	[-6.80101015183343]
								}, {
									"case":	159,
									"scores":	[-6.80101015183343]
								}, {
									"case":	160,
									"scores":	[-6.80101015183343]
								}, {
									"case":	161,
									"scores":	[-6.80101015183343]
								}, {
									"case":	162,
									"scores":	[-6.80101015183343]
								}, {
									"case":	163,
									"scores":	[-6.80101015183343]
								}, {
									"case":	164,
									"scores":	[-6.80101015183343]
								}, {
									"case":	165,
									"scores":	[-6.80101015183343]
								}, {
									"case":	166,
									"scores":	[-6.80101015183343]
								}, {
									"case":	167,
									"scores":	[-6.80101015183343]
								}, {
									"case":	168,
									"scores":	[-6.80101015183343]
								}, {
									"case":	169,
									"scores":	[-6.80101015183343]
								}, {
									"case":	170,
									"scores":	[-6.80101015183343]
								}, {
									"case":	171,
									"scores":	[-6.80101015183343]
								}, {
									"case":	172,
									"scores":	[-6.80101015183343]
								}, {
									"case":	173,
									"scores":	[-6.80101015183343]
								}, {
									"case":	174,
									"scores":	[-6.80101015183343]
								}, {
									"case":	175,
									"scores":	[-6.80101015183343]
								}, {
									"case":	176,
									"scores":	[-6.80101015183343]
								}, {
									"case":	177,
									"scores":	[-6.80101015183343]
								}, {
									"case":	178,
									"scores":	[-6.80101015183343]
								}, {
									"case":	179,
									"scores":	[-6.80101015183343]
								}, {
									"case":	180,
									"scores":	[-6.80101015183343]
								}, {
									"case":	181,
									"scores":	[-6.80101015183343]
								}, {
									"case":	182,
									"scores":	[-6.80101015183343]
								}, {
									"case":	183,
									"scores":	[-6.80101015183343]
								}, {
									"case":	184,
									"scores":	[-6.80101015183343]
								}, {
									"case":	185,
									"scores":	[-6.80101015183343]
								}, {
									"case":	186,
									"scores":	[-6.80101015183343]
								}, {
									"case":	187,
									"scores":	[-6.80101015183343]
								}, {
									"case":	188,
									"scores":	[-6.80101015183343]
								}, {
									"case":	189,
									"scores":	[-6.80101015183343]
								}, {
									"case":	190,
									"scores":	[-6.80101015183343]
								}, {
									"case":	191,
									"scores":	[-6.80101015183343]
								}, {
									"case":	192,
									"scores":	[-6.80101015183343]
								}, {
									"case":	193,
									"scores":	[-6.80101015183343]
								}, {
									"case":	194,
									"scores":	[-6.80101015183343]
								}, {
									"case":	195,
									"scores":	[-6.80101015183343]
								}, {
									"case":	196,
									"scores":	[-6.80101015183343]
								}, {
									"case":	197,
									"scores":	[-6.80101015183343]
								}, {
									"case":	198,
									"scores":	[-6.80101015183343]
								}, {
									"case":	199,
									"scores":	[-6.80101015183343]
								}, {
									"case":	200,
									"scores":	[-6.80101015183343]
								}, {
									"case":	201,
									"scores":	[-6.80101015183343]
								}, {
									"case":	202,
									"scores":	[-6.80101015183343]
								}, {
									"case":	203,
									"scores":	[-6.80101015183343]
								}, {
									"case":	204,
									"scores":	[-6.80101015183343]
								}, {
									"case":	205,
									"scores":	[-6.80101015183343]
								}, {
									"case":	206,
									"scores":	[-6.80101015183343]
								}, {
									"case":	207,
									"scores":	[-6.80101015183343]
								}, {
									"case":	208,
									"scores":	[-6.80101015183343]
								}, {
									"case":	209,
									"scores":	[-6.80101015183343]
								}, {
									"case":	210,
									"scores":	[-6.80101015183343]
								}, {
									"case":	211,
									"scores":	[-6.80101015183343]
								}, {
									"case":	212,
									"scores":	[-6.80101015183343]
								}, {
									"case":	213,
									"scores":	[-6.80101015183343]
								}, {
									"case":	214,
									"scores":	[-6.80101015183343]
								}, {
									"case":	215,
									"scores":	[-6.80101015183343]
								}, {
									"case":	216,
									"scores":	[-6.80101015183343]
								}, {
									"case":	217,
									"scores":	[-6.80101015183343]
								}, {
									"case":	218,
									"scores":	[-6.80101015183343]
								}, {
									"case":	219,
									"scores":	[-6.80101015183343]
								}, {
									"case":	220,
									"scores":	[-6.80101015183343]
								}, {
									"case":	221,
									"scores":	[-6.80101015183343]
								}, {
									"case":	222,
									"scores":	[-6.80101015183343]
								}, {
									"case":	223,
									"scores":	[-6.80101015183343]
								}, {
									"case":	224,
									"scores":	[-6.80101015183343]
								}, {
									"case":	225,
									"scores":	[-6.80101015183343]
								}, {
									"case":	226,
									"scores":	[-6.80101015183343]
								}, {
									"case":	227,
									"scores":	[-6.80101015183343]
								}, {
									"case":	228,
									"scores":	[-6.80101015183343]
								}, {
									"case":	229,
									"scores":	[-6.80101015183343]
								}, {
									"case":	230,
									"scores":	[-6.80101015183343]
								}, {
									"case":	231,
									"scores":	[-6.80101015183343]
								}, {
									"case":	232,
									"scores":	[-6.80101015183343]
								}, {
									"case":	233,
									"scores":	[-6.80101015183343]
								}, {
									"case":	234,
									"scores":	[-6.80101015183343]
								}, {
									"case":	235,
									"scores":	[-6.80101015183343]
								}, {
									"case":	236,
									"scores":	[-6.80101015183343]
								}, {
									"case":	237,
									"scores":	[-6.80101015183343]
								}, {
									"case":	238,
									"scores":	[-9.40755984493343, -10.019729762233428, -9.83694670923343, -10.08298562303343, -10.30542100023343, -9.59359688323343, -10.34252140023343, -10.094531883233429, -9.83694670923343, -10.047835826233429, -10.094531883233429, -10.340570797033429, -10.340570797033429]
								}, {
									"case":	239,
									"scores":	[-9.40755984493343, -10.019729762233428, -9.83694670923343, -10.08298562303343, -10.30542100023343, -9.59359688323343, -10.34252140023343, -10.094531883233429, -9.83694670923343, -10.047835826233429, -10.094531883233429, -10.340570797033429, -10.340570797033429]
								}]
						}, {
							"switch":	23,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	292,
							"begin_column":	8,
							"end_line":	292,
							"end_column":	34,
							"patch_codes":	["if (!__is_neg(\"\", \"L292\", 13, &(buf), sizeof (buf), &(options), sizeof (options), &(need_comma), sizeof (need_comma), &(tmp_ht), sizeof (tmp_ht), &(key), sizeof (key), &(key_len), sizeof (key_len), &(val), sizeof (val), &(i), sizeof (i), &(r), sizeof (r), &(data), sizeof (data), &(index), sizeof (index), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n    } while (0);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.19842024083343, -7.82807513083343, -8.21398412183343, -8.97187222183343, -8.99704182183343, -8.20577079183343, -9.29139262183343, -8.52778182183343, -8.21398412183343, -8.68324412183343, -8.52778182183343, -9.28566992183343, -9.28566992183343]
								}]
						}]
				}, {
					"line":	292,
					"switches":	[{
							"switch":	24,
							"types":	[[], [], [], [], [238, 239], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], [], [], [], [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237], [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], [], [], [], [], [], []],
							"begin_line":	293,
							"begin_column":	6,
							"end_line":	293,
							"end_column":	6,
							"patch_codes":	["memset(&(**data).is_ref__gc, 0, sizeof (*(&(**data).is_ref__gc)))", "memset(&(**data).refcount__gc, 0, sizeof (*(&(**data).refcount__gc)))", "memset(&(**data).type, 0, sizeof (*(&(**data).type)))", "memset(&(**data).value, 0, sizeof (*(&(**data).value)))", "memset(&(**data).value.dval, 0, sizeof (*(&(**data).value.dval)))", "memset(&(**data).value.ht, 0, sizeof (*(&(**data).value.ht)))", "memset(&(**data).value.lval, 0, sizeof (*(&(**data).value.lval)))", "memset(&(**data).value.obj, 0, sizeof (*(&(**data).value.obj)))", "memset(&(**data).value.obj.handle, 0, sizeof (*(&(**data).value.obj.handle)))", "memset(&(**data).value.obj.handlers, 0, sizeof (*(&(**data).value.obj.handlers)))", "memset(&(**data).value.obj.handlers->add_ref, 0, sizeof (*(&(**data).value.obj.handlers->add_ref)))", "memset(&(**data).value.obj.handlers->call_method, 0, sizeof (*(&(**data).value.obj.handlers->call_method)))", "memset(&(**data).value.obj.handlers->cast_object, 0, sizeof (*(&(**data).value.obj.handlers->cast_object)))", "memset(&(**data).value.obj.handlers->clone_obj, 0, sizeof (*(&(**data).value.obj.handlers->clone_obj)))", "memset(&(**data).value.obj.handlers->compare_objects, 0, sizeof (*(&(**data).value.obj.handlers->compare_objects)))", "memset(&(**data).value.obj.handlers->count_elements, 0, sizeof (*(&(**data).value.obj.handlers->count_elements)))", "memset(&(**data).value.obj.handlers->del_ref, 0, sizeof (*(&(**data).value.obj.handlers->del_ref)))", "memset(&(**data).value.obj.handlers->get, 0, sizeof (*(&(**data).value.obj.handlers->get)))", "memset(&(**data).value.obj.handlers->get_class_entry, 0, sizeof (*(&(**data).value.obj.handlers->get_class_entry)))", "memset(&(**data).value.obj.handlers->get_class_name, 0, sizeof (*(&(**data).value.obj.handlers->get_class_name)))", "memset(&(**data).value.obj.handlers->get_closure, 0, sizeof (*(&(**data).value.obj.handlers->get_closure)))", "memset(&(**data).value.obj.handlers->get_constructor, 0, sizeof (*(&(**data).value.obj.handlers->get_constructor)))", "memset(&(**data).value.obj.handlers->get_debug_info, 0, sizeof (*(&(**data).value.obj.handlers->get_debug_info)))", "memset(&(**data).value.obj.handlers->get_method, 0, sizeof (*(&(**data).value.obj.handlers->get_method)))", "memset(&(**data).value.obj.handlers->get_properties, 0, sizeof (*(&(**data).value.obj.handlers->get_properties)))", "memset(&(**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(**data).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(**data).value.obj.handlers->has_dimension, 0, sizeof (*(&(**data).value.obj.handlers->has_dimension)))", "memset(&(**data).value.obj.handlers->has_property, 0, sizeof (*(&(**data).value.obj.handlers->has_property)))", "memset(&(**data).value.obj.handlers->read_dimension, 0, sizeof (*(&(**data).value.obj.handlers->read_dimension)))", "memset(&(**data).value.obj.handlers->read_property, 0, sizeof (*(&(**data).value.obj.handlers->read_property)))", "memset(&(**data).value.obj.handlers->set, 0, sizeof (*(&(**data).value.obj.handlers->set)))", "memset(&(**data).value.obj.handlers->unset_dimension, 0, sizeof (*(&(**data).value.obj.handlers->unset_dimension)))", "memset(&(**data).value.obj.handlers->unset_property, 0, sizeof (*(&(**data).value.obj.handlers->unset_property)))", "memset(&(**data).value.obj.handlers->write_dimension, 0, sizeof (*(&(**data).value.obj.handlers->write_dimension)))", "memset(&(**data).value.obj.handlers->write_property, 0, sizeof (*(&(**data).value.obj.handlers->write_property)))", "memset(&(**data).value.str, 0, sizeof (*(&(**data).value.str)))", "memset(&(**val).is_ref__gc, 0, sizeof (*(&(**val).is_ref__gc)))", "memset(&(**val).refcount__gc, 0, sizeof (*(&(**val).refcount__gc)))", "memset(&(**val).type, 0, sizeof (*(&(**val).type)))", "memset(&(**val).value, 0, sizeof (*(&(**val).value)))", "memset(&json_globals.encoder_depth, 0, sizeof (*(&json_globals.encoder_depth)))", "memset(&json_globals.error_code, 0, sizeof (*(&json_globals.error_code)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((**data).value.ht, 0, sizeof (*((**data).value.ht)))", "memset((**data).value.obj.handlers, 0, sizeof (*((**data).value.obj.handlers)))", "memset((**data).value.obj.handlers->add_ref, 0, sizeof (*((**data).value.obj.handlers->add_ref)))", "memset((**data).value.obj.handlers->call_method, 0, sizeof (*((**data).value.obj.handlers->call_method)))", "memset((**data).value.obj.handlers->cast_object, 0, sizeof (*((**data).value.obj.handlers->cast_object)))", "memset((**data).value.obj.handlers->clone_obj, 0, sizeof (*((**data).value.obj.handlers->clone_obj)))", "memset((**data).value.obj.handlers->compare_objects, 0, sizeof (*((**data).value.obj.handlers->compare_objects)))", "memset((**data).value.obj.handlers->count_elements, 0, sizeof (*((**data).value.obj.handlers->count_elements)))", "memset((**data).value.obj.handlers->del_ref, 0, sizeof (*((**data).value.obj.handlers->del_ref)))", "memset((**data).value.obj.handlers->get, 0, sizeof (*((**data).value.obj.handlers->get)))", "memset((**data).value.obj.handlers->get_class_entry, 0, sizeof (*((**data).value.obj.handlers->get_class_entry)))", "memset((**data).value.obj.handlers->get_class_name, 0, sizeof (*((**data).value.obj.handlers->get_class_name)))", "memset((**data).value.obj.handlers->get_closure, 0, sizeof (*((**data).value.obj.handlers->get_closure)))", "memset((**data).value.obj.handlers->get_constructor, 0, sizeof (*((**data).value.obj.handlers->get_constructor)))", "memset((**data).value.obj.handlers->get_debug_info, 0, sizeof (*((**data).value.obj.handlers->get_debug_info)))", "memset((**data).value.obj.handlers->get_method, 0, sizeof (*((**data).value.obj.handlers->get_method)))", "memset((**data).value.obj.handlers->get_properties, 0, sizeof (*((**data).value.obj.handlers->get_properties)))", "memset((**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((**data).value.obj.handlers->get_property_ptr_ptr)))", "memset((**data).value.obj.handlers->has_dimension, 0, sizeof (*((**data).value.obj.handlers->has_dimension)))", "memset((**data).value.obj.handlers->has_property, 0, sizeof (*((**data).value.obj.handlers->has_property)))", "memset((**data).value.obj.handlers->read_dimension, 0, sizeof (*((**data).value.obj.handlers->read_dimension)))", "memset((**data).value.obj.handlers->read_property, 0, sizeof (*((**data).value.obj.handlers->read_property)))", "memset((**data).value.obj.handlers->set, 0, sizeof (*((**data).value.obj.handlers->set)))", "memset((**data).value.obj.handlers->unset_dimension, 0, sizeof (*((**data).value.obj.handlers->unset_dimension)))", "memset((**data).value.obj.handlers->unset_property, 0, sizeof (*((**data).value.obj.handlers->unset_property)))", "memset((**data).value.obj.handlers->write_dimension, 0, sizeof (*((**data).value.obj.handlers->write_dimension)))", "memset((**data).value.obj.handlers->write_property, 0, sizeof (*((**data).value.obj.handlers->write_property)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (i)", "(json_globals.error_code) = (need_comma)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (r)", "(key)++", "(myht)->nApplyCount++", "(myht)->nApplyCount--", "(tmp_ht)->nApplyCount++", "(tmp_ht)->nApplyCount--", "_efree(((key)))", "i = (0)", "i = (1)", "i = (10)", "i = (128)", "i = (16)", "i = (2)", "i = (3)", "i = (32)", "i = (4)", "i = (5)", "i = (78)", "i = (i)", "i = (myht) ? zend_hash_num_elements(myht) : 0", "i = (need_comma)", "i = (options)", "i = (r)", "i = (tmp_ht) ? zend_hash_num_elements(myht) : 0", "i = myht ? zend_hash_num_elements((myht)) : 0", "i = myht ? zend_hash_num_elements((tmp_ht)) : 0", "i = zend_hash_get_current_key_ex((myht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex((tmp_ht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &(key), &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &(pos))", "json_escape_string((buf), key, key_len - 1, options)", "json_escape_string(buf, (key), key_len - 1, options)", "json_pretty_print_char((buf), options, ' ')", "json_pretty_print_char((buf), options, '\\n')", "json_pretty_print_indent((buf), options)", "myht = ((**(data))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(data)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**(val))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(val)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(data)))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(val)))", "myht = ((**val).type == 4 ? (**(data)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**(val)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(data)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(val)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(data)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(val)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "myht = (myht)", "myht = (tmp_ht)", "need_comma = (0)", "need_comma = (1)", "need_comma = (10)", "need_comma = (128)", "need_comma = (16)", "need_comma = (2)", "need_comma = (3)", "need_comma = (32)", "need_comma = (4)", "need_comma = (5)", "need_comma = (78)", "need_comma = (i)", "need_comma = (need_comma)", "need_comma = (options)", "need_comma = (r)", "php_json_encode((buf), *data, options)", "php_json_encode(buf, *(data), options)", "php_json_encode(buf, *(val), options)", "r = (0)", "r = (1)", "r = (10)", "r = (128)", "r = (16)", "r = (2)", "r = (3)", "r = (32)", "r = (4)", "r = (5)", "r = (78)", "r = (i)", "r = (need_comma)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((data))", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((val))", "r = (options)", "r = (r)", "tmp_ht = ((**(data)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**(val)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(data)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(val)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(data)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(val)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(data)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(val)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "tmp_ht = (myht)", "tmp_ht = (tmp_ht)", "zend_hash_internal_pointer_reset_ex((myht), &pos)", "zend_hash_internal_pointer_reset_ex((tmp_ht), &pos)", "zend_hash_internal_pointer_reset_ex(myht, &(pos))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "exit(1)", "i = myht ? zend_hash_num_elements(myht) : 0", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &pos)", "json_escape_string(buf, key, key_len - 1, options)", "json_pretty_print_char(buf, options, ' ')", "json_pretty_print_char(buf, options, '\\n')", "json_pretty_print_indent(buf, options)", "myht = ((**val)).value.obj.handlers->get_properties(&(**val))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "need_comma = 1", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "php_json_encode(buf, *data, options)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type(val)", "r = 1", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht->nApplyCount++", "tmp_ht->nApplyCount--", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_internal_pointer_reset_ex(myht, &pos)", "if (__is_neg(\"\", \"L293\", 13, &(buf), sizeof (buf), &(options), sizeof (options), &(need_comma), sizeof (need_comma), &(key), sizeof (key), &(key_len), sizeof (key_len), &(tmp_ht), sizeof (tmp_ht), &(val), sizeof (val), &(i), sizeof (i), &(r), sizeof (r), &(data), sizeof (data), &(index), sizeof (index), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    break;\n", "if (__is_neg(\"\", \"L293\", 13, &(buf), sizeof (buf), &(options), sizeof (options), &(need_comma), sizeof (need_comma), &(key), sizeof (key), &(key_len), sizeof (key_len), &(tmp_ht), sizeof (tmp_ht), &(val), sizeof (val), &(i), sizeof (i), &(r), sizeof (r), &(data), sizeof (data), &(index), sizeof (index), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	2,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	3,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	4,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	5,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	6,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	7,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	8,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	9,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	10,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	11,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	12,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	13,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	14,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	15,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	16,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	17,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	18,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	19,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	20,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	21,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	22,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	23,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	24,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	25,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	26,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	27,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	28,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	29,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	30,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	31,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	32,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	33,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	34,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	35,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	36,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	37,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	38,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	39,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	40,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	41,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	42,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	43,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	44,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	45,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	46,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	47,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	48,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	49,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	50,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	51,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	52,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	53,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	54,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	55,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	56,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	57,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	58,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	59,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	60,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	61,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	62,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	63,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	64,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	65,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	66,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	67,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	68,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	69,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	70,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	71,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	72,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	73,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	74,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	75,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	76,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	77,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	78,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	79,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	80,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	81,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	82,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	83,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	84,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	85,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	86,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	87,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	88,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	89,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	90,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	91,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	92,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	93,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	94,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	95,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	96,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	97,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	98,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	99,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	100,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	101,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	102,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	103,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	104,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	105,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	106,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	107,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	108,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	109,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	110,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	111,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	112,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	113,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	114,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	115,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	116,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	117,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	118,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	119,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	120,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	121,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	122,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	123,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	124,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	125,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	126,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	127,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	128,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	129,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	130,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	131,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	132,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	133,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	134,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	135,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	136,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	137,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	138,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	139,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	140,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	141,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	142,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	143,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	144,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	145,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	146,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	147,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	148,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	149,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	150,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	151,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	152,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	153,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	154,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	155,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	156,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	157,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	158,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	159,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	160,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	161,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	162,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	163,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	164,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	165,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	166,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	167,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	168,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	169,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	170,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	171,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	172,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	173,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	174,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	175,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	176,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	177,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	178,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	179,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	180,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	181,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	182,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	183,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	184,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	185,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	186,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	187,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	188,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	189,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	190,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	191,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	192,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	193,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	194,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	195,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	196,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	197,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	198,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	199,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	200,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	201,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	202,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	203,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	204,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	205,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	206,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	207,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	208,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	209,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	210,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	211,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	212,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	213,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	214,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	215,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	216,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	217,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	218,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	219,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	220,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	221,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	222,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	223,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	224,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	225,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	226,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	227,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	228,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	229,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	230,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	231,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	232,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	233,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	234,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	235,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	236,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	237,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	238,
									"scores":	[-8.21305227012831, -7.6301586963283121, -8.44836626532831, -8.91684055632831, -8.20501643932831, -8.69440517912831, -8.9539409563283137, -8.7059514393283131, -8.44836626532831, -8.6592553823283129, -8.7059514393283131, -8.9519903531283127, -8.9519903531283127]
								}, {
									"case":	239,
									"scores":	[-8.21305227012831, -7.6301586963283121, -8.44836626532831, -8.91684055632831, -8.20501643932831, -8.69440517912831, -8.9539409563283137, -8.7059514393283131, -8.44836626532831, -8.6592553823283129, -8.7059514393283131, -8.9519903531283127, -8.9519903531283127]
								}]
						}, {
							"switch":	25,
							"types":	[[], [], [1], [], [], [], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166], [], [3, 4, 5, 6, 7, 8, 9, 10], [], [], [], [], [], [], [], [2]],
							"begin_line":	293,
							"begin_column":	8,
							"end_line":	293,
							"end_column":	59,
							"patch_codes":	["if (!__is_neg(\"\", \"L293\", 13, &(buf), sizeof (buf), &(options), sizeof (options), &(need_comma), sizeof (need_comma), &(key), sizeof (key), &(key_len), sizeof (key_len), &(tmp_ht), sizeof (tmp_ht), &(val), sizeof (val), &(i), sizeof (i), &(r), sizeof (r), &(data), sizeof (data), &(index), sizeof (index), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    json_pretty_print_char(buf, options, '\\n');\n", "{\n}\n", "Debug(buf, options, '\\n')", "php_printf(buf, options, '\\n')", "printf(buf, options, '\\n')", "virtual_open(buf, options, '\\n')", "zend_class_implements(buf, options, '\\n')", "zend_fcall_info_argn(buf, options, '\\n')", "zend_ptr_stack_n_pop(buf, options, '\\n')", "zend_ptr_stack_n_push(buf, options, '\\n')", "json_pretty_print_char((&buf), options, '\\n')", "json_pretty_print_char((&data), options, '\\n')", "json_pretty_print_char((&i), options, '\\n')", "json_pretty_print_char((&index), options, '\\n')", "json_pretty_print_char((&key), options, '\\n')", "json_pretty_print_char((&key_len), options, '\\n')", "json_pretty_print_char((&myht), options, '\\n')", "json_pretty_print_char((&need_comma), options, '\\n')", "json_pretty_print_char((&options), options, '\\n')", "json_pretty_print_char((&pos), options, '\\n')", "json_pretty_print_char((&r), options, '\\n')", "json_pretty_print_char((&tmp_ht), options, '\\n')", "json_pretty_print_char((&val), options, '\\n')", "json_pretty_print_char((buf), options, '\\n')", "json_pretty_print_char(buf, (0 * i), '\\n')", "json_pretty_print_char(buf, (0 * index), '\\n')", "json_pretty_print_char(buf, (0 * key_len), '\\n')", "json_pretty_print_char(buf, (0 * need_comma), '\\n')", "json_pretty_print_char(buf, (0 * options), '\\n')", "json_pretty_print_char(buf, (0 * r), '\\n')", "json_pretty_print_char(buf, (buf != 0), '\\n')", "json_pretty_print_char(buf, (buf == 0), '\\n')", "json_pretty_print_char(buf, (data != 0), '\\n')", "json_pretty_print_char(buf, (data == 0), '\\n')", "json_pretty_print_char(buf, (i != 0), '\\n')", "json_pretty_print_char(buf, (i != index), '\\n')", "json_pretty_print_char(buf, (i != key_len), '\\n')", "json_pretty_print_char(buf, (i != need_comma), '\\n')", "json_pretty_print_char(buf, (i != r), '\\n')", "json_pretty_print_char(buf, (i * index), '\\n')", "json_pretty_print_char(buf, (i * key_len), '\\n')", "json_pretty_print_char(buf, (i * need_comma), '\\n')", "json_pretty_print_char(buf, (i * options), '\\n')", "json_pretty_print_char(buf, (i * r), '\\n')", "json_pretty_print_char(buf, (i + 0), '\\n')", "json_pretty_print_char(buf, (i + index), '\\n')", "json_pretty_print_char(buf, (i + key_len), '\\n')", "json_pretty_print_char(buf, (i + need_comma), '\\n')", "json_pretty_print_char(buf, (i + r), '\\n')", "json_pretty_print_char(buf, (i - 0), '\\n')", "json_pretty_print_char(buf, (i - index), '\\n')", "json_pretty_print_char(buf, (i - key_len), '\\n')", "json_pretty_print_char(buf, (i - need_comma), '\\n')", "json_pretty_print_char(buf, (i - r), '\\n')", "json_pretty_print_char(buf, (i == 0), '\\n')", "json_pretty_print_char(buf, (i == index), '\\n')", "json_pretty_print_char(buf, (i == key_len), '\\n')", "json_pretty_print_char(buf, (i == need_comma), '\\n')", "json_pretty_print_char(buf, (i == r), '\\n')", "json_pretty_print_char(buf, (i), '\\n')", "json_pretty_print_char(buf, (index != 0), '\\n')", "json_pretty_print_char(buf, (index != key_len), '\\n')", "json_pretty_print_char(buf, (index != need_comma), '\\n')", "json_pretty_print_char(buf, (index * i), '\\n')", "json_pretty_print_char(buf, (index * key_len), '\\n')", "json_pretty_print_char(buf, (index * need_comma), '\\n')", "json_pretty_print_char(buf, (index * options), '\\n')", "json_pretty_print_char(buf, (index * r), '\\n')", "json_pretty_print_char(buf, (index + 0), '\\n')", "json_pretty_print_char(buf, (index + key_len), '\\n')", "json_pretty_print_char(buf, (index + need_comma), '\\n')", "json_pretty_print_char(buf, (index - 0), '\\n')", "json_pretty_print_char(buf, (index - key_len), '\\n')", "json_pretty_print_char(buf, (index - need_comma), '\\n')", "json_pretty_print_char(buf, (index == 0), '\\n')", "json_pretty_print_char(buf, (index == key_len), '\\n')", "json_pretty_print_char(buf, (index == need_comma), '\\n')", "json_pretty_print_char(buf, (key != 0), '\\n')", "json_pretty_print_char(buf, (key == 0), '\\n')", "json_pretty_print_char(buf, (key_len != 0), '\\n')", "json_pretty_print_char(buf, (key_len != need_comma), '\\n')", "json_pretty_print_char(buf, (key_len * i), '\\n')", "json_pretty_print_char(buf, (key_len * index), '\\n')", "json_pretty_print_char(buf, (key_len * need_comma), '\\n')", "json_pretty_print_char(buf, (key_len * options), '\\n')", "json_pretty_print_char(buf, (key_len * r), '\\n')", "json_pretty_print_char(buf, (key_len + 0), '\\n')", "json_pretty_print_char(buf, (key_len + need_comma), '\\n')", "json_pretty_print_char(buf, (key_len - 0), '\\n')", "json_pretty_print_char(buf, (key_len - need_comma), '\\n')", "json_pretty_print_char(buf, (key_len == 0), '\\n')", "json_pretty_print_char(buf, (key_len == need_comma), '\\n')", "json_pretty_print_char(buf, (myht != 0), '\\n')", "json_pretty_print_char(buf, (myht != tmp_ht), '\\n')", "json_pretty_print_char(buf, (myht == 0), '\\n')", "json_pretty_print_char(buf, (myht == tmp_ht), '\\n')", "json_pretty_print_char(buf, (need_comma != 0), '\\n')", "json_pretty_print_char(buf, (need_comma * i), '\\n')", "json_pretty_print_char(buf, (need_comma * index), '\\n')", "json_pretty_print_char(buf, (need_comma * key_len), '\\n')", "json_pretty_print_char(buf, (need_comma * options), '\\n')", "json_pretty_print_char(buf, (need_comma * r), '\\n')", "json_pretty_print_char(buf, (need_comma + 0), '\\n')", "json_pretty_print_char(buf, (need_comma - 0), '\\n')", "json_pretty_print_char(buf, (need_comma == 0), '\\n')", "json_pretty_print_char(buf, (need_comma), '\\n')", "json_pretty_print_char(buf, (options != 0), '\\n')", "json_pretty_print_char(buf, (options != i), '\\n')", "json_pretty_print_char(buf, (options != index), '\\n')", "json_pretty_print_char(buf, (options != key_len), '\\n')", "json_pretty_print_char(buf, (options != need_comma), '\\n')", "json_pretty_print_char(buf, (options != r), '\\n')", "json_pretty_print_char(buf, (options * i), '\\n')", "json_pretty_print_char(buf, (options * index), '\\n')", "json_pretty_print_char(buf, (options * key_len), '\\n')", "json_pretty_print_char(buf, (options * need_comma), '\\n')", "json_pretty_print_char(buf, (options * r), '\\n')", "json_pretty_print_char(buf, (options + 0), '\\n')", "json_pretty_print_char(buf, (options + i), '\\n')", "json_pretty_print_char(buf, (options + index), '\\n')", "json_pretty_print_char(buf, (options + key_len), '\\n')", "json_pretty_print_char(buf, (options + need_comma), '\\n')", "json_pretty_print_char(buf, (options + r), '\\n')", "json_pretty_print_char(buf, (options - 0), '\\n')", "json_pretty_print_char(buf, (options - i), '\\n')", "json_pretty_print_char(buf, (options - index), '\\n')", "json_pretty_print_char(buf, (options - key_len), '\\n')", "json_pretty_print_char(buf, (options - need_comma), '\\n')", "json_pretty_print_char(buf, (options - r), '\\n')", "json_pretty_print_char(buf, (options == 0), '\\n')", "json_pretty_print_char(buf, (options == i), '\\n')", "json_pretty_print_char(buf, (options == index), '\\n')", "json_pretty_print_char(buf, (options == key_len), '\\n')", "json_pretty_print_char(buf, (options == need_comma), '\\n')", "json_pretty_print_char(buf, (options == r), '\\n')", "json_pretty_print_char(buf, (options), '\\n')", "json_pretty_print_char(buf, (pos != 0), '\\n')", "json_pretty_print_char(buf, (pos == 0), '\\n')", "json_pretty_print_char(buf, (r != 0), '\\n')", "json_pretty_print_char(buf, (r != index), '\\n')", "json_pretty_print_char(buf, (r != key_len), '\\n')", "json_pretty_print_char(buf, (r != need_comma), '\\n')", "json_pretty_print_char(buf, (r * i), '\\n')", "json_pretty_print_char(buf, (r * index), '\\n')", "json_pretty_print_char(buf, (r * key_len), '\\n')", "json_pretty_print_char(buf, (r * need_comma), '\\n')", "json_pretty_print_char(buf, (r * options), '\\n')", "json_pretty_print_char(buf, (r + 0), '\\n')", "json_pretty_print_char(buf, (r + index), '\\n')", "json_pretty_print_char(buf, (r + key_len), '\\n')", "json_pretty_print_char(buf, (r + need_comma), '\\n')", "json_pretty_print_char(buf, (r - 0), '\\n')", "json_pretty_print_char(buf, (r - index), '\\n')", "json_pretty_print_char(buf, (r - key_len), '\\n')", "json_pretty_print_char(buf, (r - need_comma), '\\n')", "json_pretty_print_char(buf, (r == 0), '\\n')", "json_pretty_print_char(buf, (r == index), '\\n')", "json_pretty_print_char(buf, (r == key_len), '\\n')", "json_pretty_print_char(buf, (r == need_comma), '\\n')", "json_pretty_print_char(buf, (r), '\\n')", "json_pretty_print_char(buf, (tmp_ht != 0), '\\n')", "json_pretty_print_char(buf, (tmp_ht == 0), '\\n')", "json_pretty_print_char(buf, (val != 0), '\\n')", "json_pretty_print_char(buf, (val != data), '\\n')", "json_pretty_print_char(buf, (val == 0), '\\n')", "json_pretty_print_char(buf, (val == data), '\\n')"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.7235767684283125, -7.0101903779283123, -7.4292748779283118, -8.21233257792831, -7.4210615479283124, -8.18716297792831, -8.50668337792831, -7.7430725779283121, -7.4292748779283118, -7.898534877928312, -7.7430725779283121, -8.50096067792831, -8.50096067792831]
								}, {
									"case":	2,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	3,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	4,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	5,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	6,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	7,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	8,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	9,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	10,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	11,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	12,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	13,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	14,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	15,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	16,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	17,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	18,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	19,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	20,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	21,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	22,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	23,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	24,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	25,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	26,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	27,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	28,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	29,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	30,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	31,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	32,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	33,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	34,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	35,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	36,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	37,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	38,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	39,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	40,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	41,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	42,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	43,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	44,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	45,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	46,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	47,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	48,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	49,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	50,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	51,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	52,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	53,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	54,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	55,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	56,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	57,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	58,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	59,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	60,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	61,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	62,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	63,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	64,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	65,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	66,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	67,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	68,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	69,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	70,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	71,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	72,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	73,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	74,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	75,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	76,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	77,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	78,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	79,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	80,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	81,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	82,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	83,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	84,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	85,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	86,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	87,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	88,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	89,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	90,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	91,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	92,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	93,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	94,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	95,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	96,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	97,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	98,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	99,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	100,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	101,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	102,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	103,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	104,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	105,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	106,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	107,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	108,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	109,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	110,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	111,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	112,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	113,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	114,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	115,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	116,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	117,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	118,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	119,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	120,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	121,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	122,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	123,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	124,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	125,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	126,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	127,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	128,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	129,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	130,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	131,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	132,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	133,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	134,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	135,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	136,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	137,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	138,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	139,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	140,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	141,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	142,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	143,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	144,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	145,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	146,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	147,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	148,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	149,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	150,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	151,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	152,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	153,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	154,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	155,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	156,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	157,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	158,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	159,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	160,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	161,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	162,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	163,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	164,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	165,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	166,
									"scores":	[-6.6797939079283122]
								}]
						}]
				}, {
					"line":	294,
					"switches":	[{
							"switch":	26,
							"types":	[[], [], [], [], [238, 239], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], [], [], [], [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237], [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], [], [], [], [], [], []],
							"begin_line":	295,
							"begin_column":	6,
							"end_line":	295,
							"end_column":	6,
							"patch_codes":	["memset(&(**data).is_ref__gc, 0, sizeof (*(&(**data).is_ref__gc)))", "memset(&(**data).refcount__gc, 0, sizeof (*(&(**data).refcount__gc)))", "memset(&(**data).type, 0, sizeof (*(&(**data).type)))", "memset(&(**data).value, 0, sizeof (*(&(**data).value)))", "memset(&(**data).value.dval, 0, sizeof (*(&(**data).value.dval)))", "memset(&(**data).value.ht, 0, sizeof (*(&(**data).value.ht)))", "memset(&(**data).value.lval, 0, sizeof (*(&(**data).value.lval)))", "memset(&(**data).value.obj, 0, sizeof (*(&(**data).value.obj)))", "memset(&(**data).value.obj.handle, 0, sizeof (*(&(**data).value.obj.handle)))", "memset(&(**data).value.obj.handlers, 0, sizeof (*(&(**data).value.obj.handlers)))", "memset(&(**data).value.obj.handlers->add_ref, 0, sizeof (*(&(**data).value.obj.handlers->add_ref)))", "memset(&(**data).value.obj.handlers->call_method, 0, sizeof (*(&(**data).value.obj.handlers->call_method)))", "memset(&(**data).value.obj.handlers->cast_object, 0, sizeof (*(&(**data).value.obj.handlers->cast_object)))", "memset(&(**data).value.obj.handlers->clone_obj, 0, sizeof (*(&(**data).value.obj.handlers->clone_obj)))", "memset(&(**data).value.obj.handlers->compare_objects, 0, sizeof (*(&(**data).value.obj.handlers->compare_objects)))", "memset(&(**data).value.obj.handlers->count_elements, 0, sizeof (*(&(**data).value.obj.handlers->count_elements)))", "memset(&(**data).value.obj.handlers->del_ref, 0, sizeof (*(&(**data).value.obj.handlers->del_ref)))", "memset(&(**data).value.obj.handlers->get, 0, sizeof (*(&(**data).value.obj.handlers->get)))", "memset(&(**data).value.obj.handlers->get_class_entry, 0, sizeof (*(&(**data).value.obj.handlers->get_class_entry)))", "memset(&(**data).value.obj.handlers->get_class_name, 0, sizeof (*(&(**data).value.obj.handlers->get_class_name)))", "memset(&(**data).value.obj.handlers->get_closure, 0, sizeof (*(&(**data).value.obj.handlers->get_closure)))", "memset(&(**data).value.obj.handlers->get_constructor, 0, sizeof (*(&(**data).value.obj.handlers->get_constructor)))", "memset(&(**data).value.obj.handlers->get_debug_info, 0, sizeof (*(&(**data).value.obj.handlers->get_debug_info)))", "memset(&(**data).value.obj.handlers->get_method, 0, sizeof (*(&(**data).value.obj.handlers->get_method)))", "memset(&(**data).value.obj.handlers->get_properties, 0, sizeof (*(&(**data).value.obj.handlers->get_properties)))", "memset(&(**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(**data).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(**data).value.obj.handlers->has_dimension, 0, sizeof (*(&(**data).value.obj.handlers->has_dimension)))", "memset(&(**data).value.obj.handlers->has_property, 0, sizeof (*(&(**data).value.obj.handlers->has_property)))", "memset(&(**data).value.obj.handlers->read_dimension, 0, sizeof (*(&(**data).value.obj.handlers->read_dimension)))", "memset(&(**data).value.obj.handlers->read_property, 0, sizeof (*(&(**data).value.obj.handlers->read_property)))", "memset(&(**data).value.obj.handlers->set, 0, sizeof (*(&(**data).value.obj.handlers->set)))", "memset(&(**data).value.obj.handlers->unset_dimension, 0, sizeof (*(&(**data).value.obj.handlers->unset_dimension)))", "memset(&(**data).value.obj.handlers->unset_property, 0, sizeof (*(&(**data).value.obj.handlers->unset_property)))", "memset(&(**data).value.obj.handlers->write_dimension, 0, sizeof (*(&(**data).value.obj.handlers->write_dimension)))", "memset(&(**data).value.obj.handlers->write_property, 0, sizeof (*(&(**data).value.obj.handlers->write_property)))", "memset(&(**data).value.str, 0, sizeof (*(&(**data).value.str)))", "memset(&(**val).is_ref__gc, 0, sizeof (*(&(**val).is_ref__gc)))", "memset(&(**val).refcount__gc, 0, sizeof (*(&(**val).refcount__gc)))", "memset(&(**val).type, 0, sizeof (*(&(**val).type)))", "memset(&(**val).value, 0, sizeof (*(&(**val).value)))", "memset(&json_globals.encoder_depth, 0, sizeof (*(&json_globals.encoder_depth)))", "memset(&json_globals.error_code, 0, sizeof (*(&json_globals.error_code)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((**data).value.ht, 0, sizeof (*((**data).value.ht)))", "memset((**data).value.obj.handlers, 0, sizeof (*((**data).value.obj.handlers)))", "memset((**data).value.obj.handlers->add_ref, 0, sizeof (*((**data).value.obj.handlers->add_ref)))", "memset((**data).value.obj.handlers->call_method, 0, sizeof (*((**data).value.obj.handlers->call_method)))", "memset((**data).value.obj.handlers->cast_object, 0, sizeof (*((**data).value.obj.handlers->cast_object)))", "memset((**data).value.obj.handlers->clone_obj, 0, sizeof (*((**data).value.obj.handlers->clone_obj)))", "memset((**data).value.obj.handlers->compare_objects, 0, sizeof (*((**data).value.obj.handlers->compare_objects)))", "memset((**data).value.obj.handlers->count_elements, 0, sizeof (*((**data).value.obj.handlers->count_elements)))", "memset((**data).value.obj.handlers->del_ref, 0, sizeof (*((**data).value.obj.handlers->del_ref)))", "memset((**data).value.obj.handlers->get, 0, sizeof (*((**data).value.obj.handlers->get)))", "memset((**data).value.obj.handlers->get_class_entry, 0, sizeof (*((**data).value.obj.handlers->get_class_entry)))", "memset((**data).value.obj.handlers->get_class_name, 0, sizeof (*((**data).value.obj.handlers->get_class_name)))", "memset((**data).value.obj.handlers->get_closure, 0, sizeof (*((**data).value.obj.handlers->get_closure)))", "memset((**data).value.obj.handlers->get_constructor, 0, sizeof (*((**data).value.obj.handlers->get_constructor)))", "memset((**data).value.obj.handlers->get_debug_info, 0, sizeof (*((**data).value.obj.handlers->get_debug_info)))", "memset((**data).value.obj.handlers->get_method, 0, sizeof (*((**data).value.obj.handlers->get_method)))", "memset((**data).value.obj.handlers->get_properties, 0, sizeof (*((**data).value.obj.handlers->get_properties)))", "memset((**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((**data).value.obj.handlers->get_property_ptr_ptr)))", "memset((**data).value.obj.handlers->has_dimension, 0, sizeof (*((**data).value.obj.handlers->has_dimension)))", "memset((**data).value.obj.handlers->has_property, 0, sizeof (*((**data).value.obj.handlers->has_property)))", "memset((**data).value.obj.handlers->read_dimension, 0, sizeof (*((**data).value.obj.handlers->read_dimension)))", "memset((**data).value.obj.handlers->read_property, 0, sizeof (*((**data).value.obj.handlers->read_property)))", "memset((**data).value.obj.handlers->set, 0, sizeof (*((**data).value.obj.handlers->set)))", "memset((**data).value.obj.handlers->unset_dimension, 0, sizeof (*((**data).value.obj.handlers->unset_dimension)))", "memset((**data).value.obj.handlers->unset_property, 0, sizeof (*((**data).value.obj.handlers->unset_property)))", "memset((**data).value.obj.handlers->write_dimension, 0, sizeof (*((**data).value.obj.handlers->write_dimension)))", "memset((**data).value.obj.handlers->write_property, 0, sizeof (*((**data).value.obj.handlers->write_property)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (i)", "(json_globals.error_code) = (need_comma)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (r)", "(key)++", "(myht)->nApplyCount++", "(myht)->nApplyCount--", "(tmp_ht)->nApplyCount++", "(tmp_ht)->nApplyCount--", "_efree(((key)))", "i = (0)", "i = (1)", "i = (10)", "i = (128)", "i = (16)", "i = (2)", "i = (3)", "i = (32)", "i = (4)", "i = (5)", "i = (78)", "i = (i)", "i = (myht) ? zend_hash_num_elements(myht) : 0", "i = (need_comma)", "i = (options)", "i = (r)", "i = (tmp_ht) ? zend_hash_num_elements(myht) : 0", "i = myht ? zend_hash_num_elements((myht)) : 0", "i = myht ? zend_hash_num_elements((tmp_ht)) : 0", "i = zend_hash_get_current_key_ex((myht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex((tmp_ht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &(key), &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &(pos))", "json_escape_string((buf), key, key_len - 1, options)", "json_escape_string(buf, (key), key_len - 1, options)", "json_pretty_print_char((buf), options, ' ')", "json_pretty_print_char((buf), options, '\\n')", "json_pretty_print_indent((buf), options)", "myht = ((**(data))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(data)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**(val))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(val)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(data)))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(val)))", "myht = ((**val).type == 4 ? (**(data)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**(val)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(data)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(val)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(data)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(val)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "myht = (myht)", "myht = (tmp_ht)", "need_comma = (0)", "need_comma = (1)", "need_comma = (10)", "need_comma = (128)", "need_comma = (16)", "need_comma = (2)", "need_comma = (3)", "need_comma = (32)", "need_comma = (4)", "need_comma = (5)", "need_comma = (78)", "need_comma = (i)", "need_comma = (need_comma)", "need_comma = (options)", "need_comma = (r)", "php_json_encode((buf), *data, options)", "php_json_encode(buf, *(data), options)", "php_json_encode(buf, *(val), options)", "r = (0)", "r = (1)", "r = (10)", "r = (128)", "r = (16)", "r = (2)", "r = (3)", "r = (32)", "r = (4)", "r = (5)", "r = (78)", "r = (i)", "r = (need_comma)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((data))", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((val))", "r = (options)", "r = (r)", "tmp_ht = ((**(data)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**(val)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(data)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(val)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(data)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(val)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(data)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(val)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "tmp_ht = (myht)", "tmp_ht = (tmp_ht)", "zend_hash_internal_pointer_reset_ex((myht), &pos)", "zend_hash_internal_pointer_reset_ex((tmp_ht), &pos)", "zend_hash_internal_pointer_reset_ex(myht, &(pos))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "exit(1)", "i = myht ? zend_hash_num_elements(myht) : 0", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &pos)", "json_escape_string(buf, key, key_len - 1, options)", "json_pretty_print_char(buf, options, ' ')", "json_pretty_print_char(buf, options, '\\n')", "json_pretty_print_indent(buf, options)", "myht = ((**val)).value.obj.handlers->get_properties(&(**val))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "need_comma = 1", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "php_json_encode(buf, *data, options)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type(val)", "r = 1", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht->nApplyCount++", "tmp_ht->nApplyCount--", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_internal_pointer_reset_ex(myht, &pos)", "if (__is_neg(\"\", \"L295\", 13, &(need_comma), sizeof (need_comma), &(buf), sizeof (buf), &(options), sizeof (options), &(key), sizeof (key), &(key_len), sizeof (key_len), &(tmp_ht), sizeof (tmp_ht), &(data), sizeof (data), &(val), sizeof (val), &(i), sizeof (i), &(r), sizeof (r), &(index), sizeof (index), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    break;\n", "if (__is_neg(\"\", \"L295\", 13, &(need_comma), sizeof (need_comma), &(buf), sizeof (buf), &(options), sizeof (options), &(key), sizeof (key), &(key_len), sizeof (key_len), &(tmp_ht), sizeof (tmp_ht), &(data), sizeof (data), &(val), sizeof (val), &(i), sizeof (i), &(r), sizeof (r), &(index), sizeof (index), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	2,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	3,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	4,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	5,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	6,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	7,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	8,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	9,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	10,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	11,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	12,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	13,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	14,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	15,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	16,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	17,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	18,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	19,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	20,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	21,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	22,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	23,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	24,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	25,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	26,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	27,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	28,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	29,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	30,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	31,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	32,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	33,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	34,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	35,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	36,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	37,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	38,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	39,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	40,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	41,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	42,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	43,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	44,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	45,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	46,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	47,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	48,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	49,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	50,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	51,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	52,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	53,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	54,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	55,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	56,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	57,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	58,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	59,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	60,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	61,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	62,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	63,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	64,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	65,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	66,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	67,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	68,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	69,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	70,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	71,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	72,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	73,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	74,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	75,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	76,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	77,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	78,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	79,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	80,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	81,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	82,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	83,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	84,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	85,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	86,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	87,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	88,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	89,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	90,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	91,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	92,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	93,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	94,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	95,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	96,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	97,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	98,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	99,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	100,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	101,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	102,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	103,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	104,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	105,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	106,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	107,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	108,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	109,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	110,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	111,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	112,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	113,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	114,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	115,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	116,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	117,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	118,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	119,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	120,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	121,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	122,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	123,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	124,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	125,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	126,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	127,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	128,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	129,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	130,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	131,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	132,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	133,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	134,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	135,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	136,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	137,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	138,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	139,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	140,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	141,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	142,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	143,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	144,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	145,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	146,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	147,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	148,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	149,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	150,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	151,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	152,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	153,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	154,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	155,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	156,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	157,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	158,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	159,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	160,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	161,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	162,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	163,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	164,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	165,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	166,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	167,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	168,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	169,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	170,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	171,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	172,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	173,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	174,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	175,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	176,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	177,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	178,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	179,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	180,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	181,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	182,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	183,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	184,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	185,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	186,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	187,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	188,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	189,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	190,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	191,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	192,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	193,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	194,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	195,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	196,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	197,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	198,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	199,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	200,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	201,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	202,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	203,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	204,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	205,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	206,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	207,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	208,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	209,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	210,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	211,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	212,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	213,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	214,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	215,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	216,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	217,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	218,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	219,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	220,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	221,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	222,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	223,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	224,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	225,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	226,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	227,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	228,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	229,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	230,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	231,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	232,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	233,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	234,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	235,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	236,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	237,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	238,
									"scores":	[-8.8488768550889354, -9.3957653518889366, -9.1497264380889369, -9.5811003290889367, -8.8692762120889359, -9.3586649518889367, -9.3235151550889359, -9.6182007290889366, -9.370211212088936, -9.112626038088937, -9.370211212088936, -9.6162501258889357, -9.6162501258889357]
								}, {
									"case":	239,
									"scores":	[-8.8488768550889354, -9.3957653518889366, -9.1497264380889369, -9.5811003290889367, -8.8692762120889359, -9.3586649518889367, -9.3235151550889359, -9.6182007290889366, -9.370211212088936, -9.112626038088937, -9.370211212088936, -9.6162501258889357, -9.6162501258889357]
								}]
						}, {
							"switch":	27,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	295,
							"begin_column":	8,
							"end_line":	295,
							"end_column":	21,
							"patch_codes":	["if (!__is_neg(\"\", \"L295\", 13, &(need_comma), sizeof (need_comma), &(buf), sizeof (buf), &(options), sizeof (options), &(key), sizeof (key), &(key_len), sizeof (key_len), &(tmp_ht), sizeof (tmp_ht), &(data), sizeof (data), &(val), sizeof (val), &(i), sizeof (i), &(r), sizeof (r), &(index), sizeof (index), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    need_comma = 1;\n", "{\n}\n", "need_comma = (0 * i)", "need_comma = (0 * index)", "need_comma = (0 * key_len)", "need_comma = (0 * need_comma)", "need_comma = (0 * options)", "need_comma = (0 * r)", "need_comma = (0)", "need_comma = (1)", "need_comma = (10)", "need_comma = (128)", "need_comma = (16)", "need_comma = (2)", "need_comma = (3)", "need_comma = (32)", "need_comma = (4)", "need_comma = (5)", "need_comma = (78)", "need_comma = (buf != 0)", "need_comma = (buf == 0)", "need_comma = (data != 0)", "need_comma = (data == 0)", "need_comma = (i != 0)", "need_comma = (i != index)", "need_comma = (i != key_len)", "need_comma = (i != need_comma)", "need_comma = (i != r)", "need_comma = (i * index)", "need_comma = (i * key_len)", "need_comma = (i * need_comma)", "need_comma = (i * options)", "need_comma = (i * r)", "need_comma = (i + 0)", "need_comma = (i + index)", "need_comma = (i + key_len)", "need_comma = (i + need_comma)", "need_comma = (i + r)", "need_comma = (i - 0)", "need_comma = (i - index)", "need_comma = (i - key_len)", "need_comma = (i - need_comma)", "need_comma = (i - r)", "need_comma = (i == 0)", "need_comma = (i == index)", "need_comma = (i == key_len)", "need_comma = (i == need_comma)", "need_comma = (i == r)", "need_comma = (i)", "need_comma = (index != 0)", "need_comma = (index != key_len)", "need_comma = (index != need_comma)", "need_comma = (index * i)", "need_comma = (index * key_len)", "need_comma = (index * need_comma)", "need_comma = (index * options)", "need_comma = (index * r)", "need_comma = (index + 0)", "need_comma = (index + key_len)", "need_comma = (index + need_comma)", "need_comma = (index - 0)", "need_comma = (index - key_len)", "need_comma = (index - need_comma)", "need_comma = (index == 0)", "need_comma = (index == key_len)", "need_comma = (index == need_comma)", "need_comma = (key != 0)", "need_comma = (key == 0)", "need_comma = (key_len != 0)", "need_comma = (key_len != need_comma)", "need_comma = (key_len * i)", "need_comma = (key_len * index)", "need_comma = (key_len * need_comma)", "need_comma = (key_len * options)", "need_comma = (key_len * r)", "need_comma = (key_len + 0)", "need_comma = (key_len + need_comma)", "need_comma = (key_len - 0)", "need_comma = (key_len - need_comma)", "need_comma = (key_len == 0)", "need_comma = (key_len == need_comma)", "need_comma = (myht != 0)", "need_comma = (myht != tmp_ht)", "need_comma = (myht == 0)", "need_comma = (myht == tmp_ht)", "need_comma = (need_comma != 0)", "need_comma = (need_comma * i)", "need_comma = (need_comma * index)", "need_comma = (need_comma * key_len)", "need_comma = (need_comma * options)", "need_comma = (need_comma * r)", "need_comma = (need_comma + 0)", "need_comma = (need_comma - 0)", "need_comma = (need_comma == 0)", "need_comma = (need_comma)", "need_comma = (options != 0)", "need_comma = (options != i)", "need_comma = (options != index)", "need_comma = (options != key_len)", "need_comma = (options != need_comma)", "need_comma = (options != r)", "need_comma = (options * i)", "need_comma = (options * index)", "need_comma = (options * key_len)", "need_comma = (options * need_comma)", "need_comma = (options * r)", "need_comma = (options + 0)", "need_comma = (options + i)", "need_comma = (options + index)", "need_comma = (options + key_len)", "need_comma = (options + need_comma)", "need_comma = (options + r)", "need_comma = (options - 0)", "need_comma = (options - i)", "need_comma = (options - index)", "need_comma = (options - key_len)", "need_comma = (options - need_comma)", "need_comma = (options - r)", "need_comma = (options == 0)", "need_comma = (options == i)", "need_comma = (options == index)", "need_comma = (options == key_len)", "need_comma = (options == need_comma)", "need_comma = (options == r)", "need_comma = (options)", "need_comma = (pos != 0)", "need_comma = (pos == 0)", "need_comma = (r != 0)", "need_comma = (r != index)", "need_comma = (r != key_len)", "need_comma = (r != need_comma)", "need_comma = (r * i)", "need_comma = (r * index)", "need_comma = (r * key_len)", "need_comma = (r * need_comma)", "need_comma = (r * options)", "need_comma = (r + 0)", "need_comma = (r + index)", "need_comma = (r + key_len)", "need_comma = (r + need_comma)", "need_comma = (r - 0)", "need_comma = (r - index)", "need_comma = (r - key_len)", "need_comma = (r - need_comma)", "need_comma = (r == 0)", "need_comma = (r == index)", "need_comma = (r == key_len)", "need_comma = (r == need_comma)", "need_comma = (r)", "need_comma = (tmp_ht != 0)", "need_comma = (tmp_ht == 0)", "need_comma = (val != 0)", "need_comma = (val != data)", "need_comma = (val == 0)", "need_comma = (val == data)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.5137180330889368, -8.7892284120889368, -8.0313403120889362, -8.5200472120889366, -7.7287761820889358, -8.4948776120889367, -8.2062495120889363, -8.8143980120889367, -8.0507872120889363, -7.736989512088936, -8.0507872120889363, -8.8086753120889369, -8.8086753120889369]
								}, {
									"case":	2,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	3,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	4,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	5,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	6,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	7,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	8,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	9,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	10,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	11,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	12,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	13,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	14,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	15,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	16,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	17,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	18,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	19,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	20,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	21,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	22,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	23,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	24,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	25,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	26,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	27,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	28,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	29,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	30,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	31,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	32,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	33,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	34,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	35,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	36,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	37,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	38,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	39,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	40,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	41,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	42,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	43,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	44,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	45,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	46,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	47,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	48,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	49,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	50,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	51,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	52,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	53,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	54,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	55,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	56,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	57,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	58,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	59,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	60,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	61,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	62,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	63,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	64,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	65,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	66,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	67,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	68,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	69,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	70,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	71,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	72,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	73,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	74,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	75,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	76,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	77,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	78,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	79,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	80,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	81,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	82,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	83,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	84,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	85,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	86,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	87,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	88,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	89,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	90,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	91,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	92,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	93,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	94,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	95,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	96,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	97,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	98,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	99,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	100,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	101,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	102,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	103,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	104,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	105,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	106,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	107,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	108,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	109,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	110,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	111,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	112,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	113,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	114,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	115,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	116,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	117,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	118,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	119,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	120,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	121,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	122,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	123,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	124,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	125,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	126,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	127,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	128,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	129,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	130,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	131,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	132,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	133,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	134,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	135,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	136,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	137,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	138,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	139,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	140,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	141,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	142,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	143,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	144,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	145,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	146,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	147,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	148,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	149,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	150,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	151,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	152,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	153,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	154,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	155,
									"scores":	[-7.3262805420889361]
								}]
						}]
				}, {
					"line":	290,
					"switches":	[{
							"switch":	20,
							"types":	[[], [], [], [], [238, 239], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], [], [], [], [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237], [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], [], [], [], [], [], []],
							"begin_line":	291,
							"begin_column":	5,
							"end_line":	291,
							"end_column":	5,
							"patch_codes":	["memset(&(**data).is_ref__gc, 0, sizeof (*(&(**data).is_ref__gc)))", "memset(&(**data).refcount__gc, 0, sizeof (*(&(**data).refcount__gc)))", "memset(&(**data).type, 0, sizeof (*(&(**data).type)))", "memset(&(**data).value, 0, sizeof (*(&(**data).value)))", "memset(&(**data).value.dval, 0, sizeof (*(&(**data).value.dval)))", "memset(&(**data).value.ht, 0, sizeof (*(&(**data).value.ht)))", "memset(&(**data).value.lval, 0, sizeof (*(&(**data).value.lval)))", "memset(&(**data).value.obj, 0, sizeof (*(&(**data).value.obj)))", "memset(&(**data).value.obj.handle, 0, sizeof (*(&(**data).value.obj.handle)))", "memset(&(**data).value.obj.handlers, 0, sizeof (*(&(**data).value.obj.handlers)))", "memset(&(**data).value.obj.handlers->add_ref, 0, sizeof (*(&(**data).value.obj.handlers->add_ref)))", "memset(&(**data).value.obj.handlers->call_method, 0, sizeof (*(&(**data).value.obj.handlers->call_method)))", "memset(&(**data).value.obj.handlers->cast_object, 0, sizeof (*(&(**data).value.obj.handlers->cast_object)))", "memset(&(**data).value.obj.handlers->clone_obj, 0, sizeof (*(&(**data).value.obj.handlers->clone_obj)))", "memset(&(**data).value.obj.handlers->compare_objects, 0, sizeof (*(&(**data).value.obj.handlers->compare_objects)))", "memset(&(**data).value.obj.handlers->count_elements, 0, sizeof (*(&(**data).value.obj.handlers->count_elements)))", "memset(&(**data).value.obj.handlers->del_ref, 0, sizeof (*(&(**data).value.obj.handlers->del_ref)))", "memset(&(**data).value.obj.handlers->get, 0, sizeof (*(&(**data).value.obj.handlers->get)))", "memset(&(**data).value.obj.handlers->get_class_entry, 0, sizeof (*(&(**data).value.obj.handlers->get_class_entry)))", "memset(&(**data).value.obj.handlers->get_class_name, 0, sizeof (*(&(**data).value.obj.handlers->get_class_name)))", "memset(&(**data).value.obj.handlers->get_closure, 0, sizeof (*(&(**data).value.obj.handlers->get_closure)))", "memset(&(**data).value.obj.handlers->get_constructor, 0, sizeof (*(&(**data).value.obj.handlers->get_constructor)))", "memset(&(**data).value.obj.handlers->get_debug_info, 0, sizeof (*(&(**data).value.obj.handlers->get_debug_info)))", "memset(&(**data).value.obj.handlers->get_method, 0, sizeof (*(&(**data).value.obj.handlers->get_method)))", "memset(&(**data).value.obj.handlers->get_properties, 0, sizeof (*(&(**data).value.obj.handlers->get_properties)))", "memset(&(**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(**data).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(**data).value.obj.handlers->has_dimension, 0, sizeof (*(&(**data).value.obj.handlers->has_dimension)))", "memset(&(**data).value.obj.handlers->has_property, 0, sizeof (*(&(**data).value.obj.handlers->has_property)))", "memset(&(**data).value.obj.handlers->read_dimension, 0, sizeof (*(&(**data).value.obj.handlers->read_dimension)))", "memset(&(**data).value.obj.handlers->read_property, 0, sizeof (*(&(**data).value.obj.handlers->read_property)))", "memset(&(**data).value.obj.handlers->set, 0, sizeof (*(&(**data).value.obj.handlers->set)))", "memset(&(**data).value.obj.handlers->unset_dimension, 0, sizeof (*(&(**data).value.obj.handlers->unset_dimension)))", "memset(&(**data).value.obj.handlers->unset_property, 0, sizeof (*(&(**data).value.obj.handlers->unset_property)))", "memset(&(**data).value.obj.handlers->write_dimension, 0, sizeof (*(&(**data).value.obj.handlers->write_dimension)))", "memset(&(**data).value.obj.handlers->write_property, 0, sizeof (*(&(**data).value.obj.handlers->write_property)))", "memset(&(**data).value.str, 0, sizeof (*(&(**data).value.str)))", "memset(&(**val).is_ref__gc, 0, sizeof (*(&(**val).is_ref__gc)))", "memset(&(**val).refcount__gc, 0, sizeof (*(&(**val).refcount__gc)))", "memset(&(**val).type, 0, sizeof (*(&(**val).type)))", "memset(&(**val).value, 0, sizeof (*(&(**val).value)))", "memset(&json_globals.encoder_depth, 0, sizeof (*(&json_globals.encoder_depth)))", "memset(&json_globals.error_code, 0, sizeof (*(&json_globals.error_code)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((**data).value.ht, 0, sizeof (*((**data).value.ht)))", "memset((**data).value.obj.handlers, 0, sizeof (*((**data).value.obj.handlers)))", "memset((**data).value.obj.handlers->add_ref, 0, sizeof (*((**data).value.obj.handlers->add_ref)))", "memset((**data).value.obj.handlers->call_method, 0, sizeof (*((**data).value.obj.handlers->call_method)))", "memset((**data).value.obj.handlers->cast_object, 0, sizeof (*((**data).value.obj.handlers->cast_object)))", "memset((**data).value.obj.handlers->clone_obj, 0, sizeof (*((**data).value.obj.handlers->clone_obj)))", "memset((**data).value.obj.handlers->compare_objects, 0, sizeof (*((**data).value.obj.handlers->compare_objects)))", "memset((**data).value.obj.handlers->count_elements, 0, sizeof (*((**data).value.obj.handlers->count_elements)))", "memset((**data).value.obj.handlers->del_ref, 0, sizeof (*((**data).value.obj.handlers->del_ref)))", "memset((**data).value.obj.handlers->get, 0, sizeof (*((**data).value.obj.handlers->get)))", "memset((**data).value.obj.handlers->get_class_entry, 0, sizeof (*((**data).value.obj.handlers->get_class_entry)))", "memset((**data).value.obj.handlers->get_class_name, 0, sizeof (*((**data).value.obj.handlers->get_class_name)))", "memset((**data).value.obj.handlers->get_closure, 0, sizeof (*((**data).value.obj.handlers->get_closure)))", "memset((**data).value.obj.handlers->get_constructor, 0, sizeof (*((**data).value.obj.handlers->get_constructor)))", "memset((**data).value.obj.handlers->get_debug_info, 0, sizeof (*((**data).value.obj.handlers->get_debug_info)))", "memset((**data).value.obj.handlers->get_method, 0, sizeof (*((**data).value.obj.handlers->get_method)))", "memset((**data).value.obj.handlers->get_properties, 0, sizeof (*((**data).value.obj.handlers->get_properties)))", "memset((**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((**data).value.obj.handlers->get_property_ptr_ptr)))", "memset((**data).value.obj.handlers->has_dimension, 0, sizeof (*((**data).value.obj.handlers->has_dimension)))", "memset((**data).value.obj.handlers->has_property, 0, sizeof (*((**data).value.obj.handlers->has_property)))", "memset((**data).value.obj.handlers->read_dimension, 0, sizeof (*((**data).value.obj.handlers->read_dimension)))", "memset((**data).value.obj.handlers->read_property, 0, sizeof (*((**data).value.obj.handlers->read_property)))", "memset((**data).value.obj.handlers->set, 0, sizeof (*((**data).value.obj.handlers->set)))", "memset((**data).value.obj.handlers->unset_dimension, 0, sizeof (*((**data).value.obj.handlers->unset_dimension)))", "memset((**data).value.obj.handlers->unset_property, 0, sizeof (*((**data).value.obj.handlers->unset_property)))", "memset((**data).value.obj.handlers->write_dimension, 0, sizeof (*((**data).value.obj.handlers->write_dimension)))", "memset((**data).value.obj.handlers->write_property, 0, sizeof (*((**data).value.obj.handlers->write_property)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (i)", "(json_globals.error_code) = (need_comma)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (r)", "(key)++", "(myht)->nApplyCount++", "(myht)->nApplyCount--", "(tmp_ht)->nApplyCount++", "(tmp_ht)->nApplyCount--", "_efree(((key)))", "i = (0)", "i = (1)", "i = (10)", "i = (128)", "i = (16)", "i = (2)", "i = (3)", "i = (32)", "i = (4)", "i = (5)", "i = (78)", "i = (i)", "i = (myht) ? zend_hash_num_elements(myht) : 0", "i = (need_comma)", "i = (options)", "i = (r)", "i = (tmp_ht) ? zend_hash_num_elements(myht) : 0", "i = myht ? zend_hash_num_elements((myht)) : 0", "i = myht ? zend_hash_num_elements((tmp_ht)) : 0", "i = zend_hash_get_current_key_ex((myht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex((tmp_ht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &(key), &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &(pos))", "json_escape_string((buf), key, key_len - 1, options)", "json_escape_string(buf, (key), key_len - 1, options)", "json_pretty_print_char((buf), options, ' ')", "json_pretty_print_char((buf), options, '\\n')", "json_pretty_print_indent((buf), options)", "myht = ((**(data))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(data)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**(val))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(val)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(data)))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(val)))", "myht = ((**val).type == 4 ? (**(data)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**(val)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(data)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(val)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(data)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(val)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "myht = (myht)", "myht = (tmp_ht)", "need_comma = (0)", "need_comma = (1)", "need_comma = (10)", "need_comma = (128)", "need_comma = (16)", "need_comma = (2)", "need_comma = (3)", "need_comma = (32)", "need_comma = (4)", "need_comma = (5)", "need_comma = (78)", "need_comma = (i)", "need_comma = (need_comma)", "need_comma = (options)", "need_comma = (r)", "php_json_encode((buf), *data, options)", "php_json_encode(buf, *(data), options)", "php_json_encode(buf, *(val), options)", "r = (0)", "r = (1)", "r = (10)", "r = (128)", "r = (16)", "r = (2)", "r = (3)", "r = (32)", "r = (4)", "r = (5)", "r = (78)", "r = (i)", "r = (need_comma)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((data))", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((val))", "r = (options)", "r = (r)", "tmp_ht = ((**(data)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**(val)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(data)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(val)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(data)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(val)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(data)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(val)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "tmp_ht = (myht)", "tmp_ht = (tmp_ht)", "zend_hash_internal_pointer_reset_ex((myht), &pos)", "zend_hash_internal_pointer_reset_ex((tmp_ht), &pos)", "zend_hash_internal_pointer_reset_ex(myht, &(pos))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "exit(1)", "i = myht ? zend_hash_num_elements(myht) : 0", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &pos)", "json_escape_string(buf, key, key_len - 1, options)", "json_pretty_print_char(buf, options, ' ')", "json_pretty_print_char(buf, options, '\\n')", "json_pretty_print_indent(buf, options)", "myht = ((**val)).value.obj.handlers->get_properties(&(**val))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "need_comma = 1", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "php_json_encode(buf, *data, options)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type(val)", "r = 1", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht->nApplyCount++", "tmp_ht->nApplyCount--", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_internal_pointer_reset_ex(myht, &pos)", "if (__is_neg(\"\", \"L291\", 13, &(need_comma), sizeof (need_comma), &(buf), sizeof (buf), &(options), sizeof (options), &(tmp_ht), sizeof (tmp_ht), &(val), sizeof (val), &(key), sizeof (key), &(i), sizeof (i), &(key_len), sizeof (key_len), &(r), sizeof (r), &(data), sizeof (data), &(myht), sizeof (myht), &(index), sizeof (index), &(pos), sizeof (pos)))\n    break;\n", "if (__is_neg(\"\", \"L291\", 13, &(need_comma), sizeof (need_comma), &(buf), sizeof (buf), &(options), sizeof (options), &(tmp_ht), sizeof (tmp_ht), &(val), sizeof (val), &(key), sizeof (key), &(i), sizeof (i), &(key_len), sizeof (key_len), &(r), sizeof (r), &(data), sizeof (data), &(myht), sizeof (myht), &(index), sizeof (index), &(pos), sizeof (pos)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	2,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	3,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	4,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	5,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	6,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	7,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	8,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	9,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	10,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	11,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	12,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	13,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	14,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	15,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	16,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	17,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	18,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	19,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	20,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	21,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	22,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	23,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	24,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	25,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	26,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	27,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	28,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	29,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	30,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	31,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	32,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	33,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	34,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	35,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	36,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	37,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	38,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	39,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	40,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	41,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	42,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	43,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	44,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	45,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	46,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	47,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	48,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	49,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	50,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	51,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	52,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	53,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	54,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	55,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	56,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	57,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	58,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	59,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	60,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	61,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	62,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	63,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	64,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	65,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	66,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	67,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	68,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	69,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	70,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	71,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	72,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	73,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	74,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	75,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	76,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	77,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	78,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	79,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	80,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	81,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	82,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	83,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	84,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	85,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	86,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	87,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	88,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	89,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	90,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	91,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	92,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	93,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	94,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	95,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	96,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	97,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	98,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	99,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	100,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	101,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	102,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	103,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	104,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	105,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	106,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	107,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	108,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	109,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	110,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	111,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	112,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	113,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	114,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	115,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	116,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	117,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	118,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	119,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	120,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	121,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	122,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	123,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	124,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	125,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	126,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	127,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	128,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	129,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	130,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	131,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	132,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	133,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	134,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	135,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	136,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	137,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	138,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	139,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	140,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	141,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	142,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	143,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	144,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	145,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	146,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	147,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	148,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	149,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	150,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	151,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	152,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	153,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	154,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	155,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	156,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	157,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	158,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	159,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	160,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	161,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	162,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	163,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	164,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	165,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	166,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	167,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	168,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	169,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	170,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	171,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	172,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	173,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	174,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	175,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	176,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	177,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	178,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	179,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	180,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	181,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	182,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	183,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	184,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	185,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	186,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	187,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	188,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	189,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	190,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	191,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	192,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	193,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	194,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	195,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	196,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	197,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	198,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	199,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	200,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	201,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	202,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	203,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	204,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	205,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	206,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	207,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	208,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	209,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	210,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	211,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	212,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	213,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	214,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	215,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	216,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	217,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	218,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	219,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	220,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	221,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	222,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	223,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	224,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	225,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	226,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	227,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	228,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	229,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	230,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	231,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	232,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	233,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	234,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	235,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	236,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	237,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	238,
									"scores":	[-11.366972794554675, -10.613250113254676, -10.812514408554676, -12.412024591354676, -12.445350068554674, -12.553932321554676, -11.888307151554674, -11.411037520554675, -11.630721977554675, -11.841611094554676, -12.134346065354675, -11.888307151554674, -12.134346065354675]
								}, {
									"case":	239,
									"scores":	[-11.366972794554675, -10.613250113254676, -10.812514408554676, -12.412024591354676, -12.445350068554674, -12.553932321554676, -11.888307151554674, -11.411037520554675, -11.630721977554675, -11.841611094554676, -12.134346065354675, -11.888307151554674, -12.134346065354675]
								}]
						}, {
							"switch":	21,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	291,
							"begin_column":	7,
							"end_line":	296,
							"end_column":	7,
							"patch_codes":	["if (__is_neg(\"\", \"L291\", 13, &(need_comma), sizeof (need_comma), &(buf), sizeof (buf), &(options), sizeof (options), &(tmp_ht), sizeof (tmp_ht), &(val), sizeof (val), &(key), sizeof (key), &(i), sizeof (i), &(key_len), sizeof (key_len), &(r), sizeof (r), &(data), sizeof (data), &(myht), sizeof (myht), &(index), sizeof (index), &(pos), sizeof (pos))) {\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n    } while (0);\n    json_pretty_print_char(buf, options, '\\n');\n} else {\n    need_comma = 1;\n}\n", "if ((need_comma) || __is_neg(\"\", \"L291\", 13, &(need_comma), sizeof (need_comma), &(buf), sizeof (buf), &(options), sizeof (options), &(tmp_ht), sizeof (tmp_ht), &(val), sizeof (val), &(key), sizeof (key), &(i), sizeof (i), &(key_len), sizeof (key_len), &(r), sizeof (r), &(data), sizeof (data), &(myht), sizeof (myht), &(index), sizeof (index), &(pos), sizeof (pos))) {\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n    } while (0);\n    json_pretty_print_char(buf, options, '\\n');\n} else {\n    need_comma = 1;\n}\n", "if ((need_comma) && !__is_neg(\"\", \"L291\", 13, &(need_comma), sizeof (need_comma), &(buf), sizeof (buf), &(options), sizeof (options), &(tmp_ht), sizeof (tmp_ht), &(val), sizeof (val), &(key), sizeof (key), &(i), sizeof (i), &(key_len), sizeof (key_len), &(r), sizeof (r), &(data), sizeof (data), &(myht), sizeof (myht), &(index), sizeof (index), &(pos), sizeof (pos))) {\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n    } while (0);\n    json_pretty_print_char(buf, options, '\\n');\n} else {\n    need_comma = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.4512630960781463, -4.077017981978142, -3.2886255840781455, -4.67421016557815, -4.82844678557815, -4.5672714945781481, -3.98833227507815, -3.4745855550781486, -3.67453457507815, -4.14379457507815, -4.74622037507815, -3.98833227507815, -4.74622037507815]
								}, {
									"case":	2,
									"scores":	[-5.4832800334281462, -5.1090349193281455, -4.3206425214281454, -5.7062271029281462, -5.860463722928146, -5.5992884319281462, -5.0203492124281457, -4.5066024924281463, -4.7065515124281463, -5.1758115124281456, -5.7782373124281463, -5.0203492124281457, -5.7782373124281463]
								}, {
									"case":	3,
									"scores":	[-5.4832800334281462, -5.1090349193281455, -4.3206425214281454, -5.7062271029281462, -5.860463722928146, -5.5992884319281462, -5.0203492124281457, -4.5066024924281463, -4.7065515124281463, -5.1758115124281456, -5.7782373124281463, -5.0203492124281457, -5.7782373124281463]
								}]
						}, {
							"switch":	28,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	291,
							"begin_column":	7,
							"end_line":	296,
							"end_column":	7,
							"patch_codes":	["if (!__is_neg(\"\", \"L291\", 13, &(need_comma), sizeof (need_comma), &(buf), sizeof (buf), &(options), sizeof (options), &(tmp_ht), sizeof (tmp_ht), &(val), sizeof (val), &(key), sizeof (key), &(i), sizeof (i), &(key_len), sizeof (key_len), &(r), sizeof (r), &(data), sizeof (data), &(myht), sizeof (myht), &(index), sizeof (index), &(pos), sizeof (pos)))\n    if (need_comma) {\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n        } while (0);\n        json_pretty_print_char(buf, options, '\\n');\n    } else {\n        need_comma = 1;\n    }\n", "if (!__is_neg(\"\", \"L291\", 13, &(need_comma), sizeof (need_comma), &(buf), sizeof (buf), &(options), sizeof (options), &(tmp_ht), sizeof (tmp_ht), &(val), sizeof (val), &(key), sizeof (key), &(i), sizeof (i), &(key_len), sizeof (key_len), &(r), sizeof (r), &(data), sizeof (data), &(myht), sizeof (myht), &(index), sizeof (index), &(pos), sizeof (pos)) && (need_comma)) {\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n    } while (0);\n    json_pretty_print_char(buf, options, '\\n');\n} else {\n    need_comma = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.545546301154674, -10.171301187054675, -9.3829087891546745, -10.768493370654674, -10.922729990654675, -10.661554699654676, -10.082615480154676, -9.5688687601546754, -9.7688177801546754, -10.238077780154676, -10.840503580154675, -10.082615480154676, -10.840503580154675]
								}, {
									"case":	2,
									"scores":	[-10.348627301154675, -9.9743821870546761, -9.1859897891546751, -10.571574370654675, -10.725810990654676, -10.464635699654675, -9.8856964801546745, -9.3719497601546742, -9.571898780154676, -10.041158780154674, -10.643584580154675, -9.8856964801546745, -10.643584580154675]
								}]
						}]
				}, {
					"line":	297,
					"switches":	[{
							"switch":	29,
							"types":	[[], [], [], [], [238, 239], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], [], [], [], [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237], [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], [], [], [], [], [], []],
							"begin_line":	298,
							"begin_column":	5,
							"end_line":	298,
							"end_column":	5,
							"patch_codes":	["memset(&(**data).is_ref__gc, 0, sizeof (*(&(**data).is_ref__gc)))", "memset(&(**data).refcount__gc, 0, sizeof (*(&(**data).refcount__gc)))", "memset(&(**data).type, 0, sizeof (*(&(**data).type)))", "memset(&(**data).value, 0, sizeof (*(&(**data).value)))", "memset(&(**data).value.dval, 0, sizeof (*(&(**data).value.dval)))", "memset(&(**data).value.ht, 0, sizeof (*(&(**data).value.ht)))", "memset(&(**data).value.lval, 0, sizeof (*(&(**data).value.lval)))", "memset(&(**data).value.obj, 0, sizeof (*(&(**data).value.obj)))", "memset(&(**data).value.obj.handle, 0, sizeof (*(&(**data).value.obj.handle)))", "memset(&(**data).value.obj.handlers, 0, sizeof (*(&(**data).value.obj.handlers)))", "memset(&(**data).value.obj.handlers->add_ref, 0, sizeof (*(&(**data).value.obj.handlers->add_ref)))", "memset(&(**data).value.obj.handlers->call_method, 0, sizeof (*(&(**data).value.obj.handlers->call_method)))", "memset(&(**data).value.obj.handlers->cast_object, 0, sizeof (*(&(**data).value.obj.handlers->cast_object)))", "memset(&(**data).value.obj.handlers->clone_obj, 0, sizeof (*(&(**data).value.obj.handlers->clone_obj)))", "memset(&(**data).value.obj.handlers->compare_objects, 0, sizeof (*(&(**data).value.obj.handlers->compare_objects)))", "memset(&(**data).value.obj.handlers->count_elements, 0, sizeof (*(&(**data).value.obj.handlers->count_elements)))", "memset(&(**data).value.obj.handlers->del_ref, 0, sizeof (*(&(**data).value.obj.handlers->del_ref)))", "memset(&(**data).value.obj.handlers->get, 0, sizeof (*(&(**data).value.obj.handlers->get)))", "memset(&(**data).value.obj.handlers->get_class_entry, 0, sizeof (*(&(**data).value.obj.handlers->get_class_entry)))", "memset(&(**data).value.obj.handlers->get_class_name, 0, sizeof (*(&(**data).value.obj.handlers->get_class_name)))", "memset(&(**data).value.obj.handlers->get_closure, 0, sizeof (*(&(**data).value.obj.handlers->get_closure)))", "memset(&(**data).value.obj.handlers->get_constructor, 0, sizeof (*(&(**data).value.obj.handlers->get_constructor)))", "memset(&(**data).value.obj.handlers->get_debug_info, 0, sizeof (*(&(**data).value.obj.handlers->get_debug_info)))", "memset(&(**data).value.obj.handlers->get_method, 0, sizeof (*(&(**data).value.obj.handlers->get_method)))", "memset(&(**data).value.obj.handlers->get_properties, 0, sizeof (*(&(**data).value.obj.handlers->get_properties)))", "memset(&(**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(**data).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(**data).value.obj.handlers->has_dimension, 0, sizeof (*(&(**data).value.obj.handlers->has_dimension)))", "memset(&(**data).value.obj.handlers->has_property, 0, sizeof (*(&(**data).value.obj.handlers->has_property)))", "memset(&(**data).value.obj.handlers->read_dimension, 0, sizeof (*(&(**data).value.obj.handlers->read_dimension)))", "memset(&(**data).value.obj.handlers->read_property, 0, sizeof (*(&(**data).value.obj.handlers->read_property)))", "memset(&(**data).value.obj.handlers->set, 0, sizeof (*(&(**data).value.obj.handlers->set)))", "memset(&(**data).value.obj.handlers->unset_dimension, 0, sizeof (*(&(**data).value.obj.handlers->unset_dimension)))", "memset(&(**data).value.obj.handlers->unset_property, 0, sizeof (*(&(**data).value.obj.handlers->unset_property)))", "memset(&(**data).value.obj.handlers->write_dimension, 0, sizeof (*(&(**data).value.obj.handlers->write_dimension)))", "memset(&(**data).value.obj.handlers->write_property, 0, sizeof (*(&(**data).value.obj.handlers->write_property)))", "memset(&(**data).value.str, 0, sizeof (*(&(**data).value.str)))", "memset(&(**val).is_ref__gc, 0, sizeof (*(&(**val).is_ref__gc)))", "memset(&(**val).refcount__gc, 0, sizeof (*(&(**val).refcount__gc)))", "memset(&(**val).type, 0, sizeof (*(&(**val).type)))", "memset(&(**val).value, 0, sizeof (*(&(**val).value)))", "memset(&json_globals.encoder_depth, 0, sizeof (*(&json_globals.encoder_depth)))", "memset(&json_globals.error_code, 0, sizeof (*(&json_globals.error_code)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((**data).value.ht, 0, sizeof (*((**data).value.ht)))", "memset((**data).value.obj.handlers, 0, sizeof (*((**data).value.obj.handlers)))", "memset((**data).value.obj.handlers->add_ref, 0, sizeof (*((**data).value.obj.handlers->add_ref)))", "memset((**data).value.obj.handlers->call_method, 0, sizeof (*((**data).value.obj.handlers->call_method)))", "memset((**data).value.obj.handlers->cast_object, 0, sizeof (*((**data).value.obj.handlers->cast_object)))", "memset((**data).value.obj.handlers->clone_obj, 0, sizeof (*((**data).value.obj.handlers->clone_obj)))", "memset((**data).value.obj.handlers->compare_objects, 0, sizeof (*((**data).value.obj.handlers->compare_objects)))", "memset((**data).value.obj.handlers->count_elements, 0, sizeof (*((**data).value.obj.handlers->count_elements)))", "memset((**data).value.obj.handlers->del_ref, 0, sizeof (*((**data).value.obj.handlers->del_ref)))", "memset((**data).value.obj.handlers->get, 0, sizeof (*((**data).value.obj.handlers->get)))", "memset((**data).value.obj.handlers->get_class_entry, 0, sizeof (*((**data).value.obj.handlers->get_class_entry)))", "memset((**data).value.obj.handlers->get_class_name, 0, sizeof (*((**data).value.obj.handlers->get_class_name)))", "memset((**data).value.obj.handlers->get_closure, 0, sizeof (*((**data).value.obj.handlers->get_closure)))", "memset((**data).value.obj.handlers->get_constructor, 0, sizeof (*((**data).value.obj.handlers->get_constructor)))", "memset((**data).value.obj.handlers->get_debug_info, 0, sizeof (*((**data).value.obj.handlers->get_debug_info)))", "memset((**data).value.obj.handlers->get_method, 0, sizeof (*((**data).value.obj.handlers->get_method)))", "memset((**data).value.obj.handlers->get_properties, 0, sizeof (*((**data).value.obj.handlers->get_properties)))", "memset((**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((**data).value.obj.handlers->get_property_ptr_ptr)))", "memset((**data).value.obj.handlers->has_dimension, 0, sizeof (*((**data).value.obj.handlers->has_dimension)))", "memset((**data).value.obj.handlers->has_property, 0, sizeof (*((**data).value.obj.handlers->has_property)))", "memset((**data).value.obj.handlers->read_dimension, 0, sizeof (*((**data).value.obj.handlers->read_dimension)))", "memset((**data).value.obj.handlers->read_property, 0, sizeof (*((**data).value.obj.handlers->read_property)))", "memset((**data).value.obj.handlers->set, 0, sizeof (*((**data).value.obj.handlers->set)))", "memset((**data).value.obj.handlers->unset_dimension, 0, sizeof (*((**data).value.obj.handlers->unset_dimension)))", "memset((**data).value.obj.handlers->unset_property, 0, sizeof (*((**data).value.obj.handlers->unset_property)))", "memset((**data).value.obj.handlers->write_dimension, 0, sizeof (*((**data).value.obj.handlers->write_dimension)))", "memset((**data).value.obj.handlers->write_property, 0, sizeof (*((**data).value.obj.handlers->write_property)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (i)", "(json_globals.error_code) = (need_comma)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (r)", "(key)++", "(myht)->nApplyCount++", "(myht)->nApplyCount--", "(tmp_ht)->nApplyCount++", "(tmp_ht)->nApplyCount--", "_efree(((key)))", "i = (0)", "i = (1)", "i = (10)", "i = (128)", "i = (16)", "i = (2)", "i = (3)", "i = (32)", "i = (4)", "i = (5)", "i = (78)", "i = (i)", "i = (myht) ? zend_hash_num_elements(myht) : 0", "i = (need_comma)", "i = (options)", "i = (r)", "i = (tmp_ht) ? zend_hash_num_elements(myht) : 0", "i = myht ? zend_hash_num_elements((myht)) : 0", "i = myht ? zend_hash_num_elements((tmp_ht)) : 0", "i = zend_hash_get_current_key_ex((myht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex((tmp_ht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &(key), &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &(pos))", "json_escape_string((buf), key, key_len - 1, options)", "json_escape_string(buf, (key), key_len - 1, options)", "json_pretty_print_char((buf), options, ' ')", "json_pretty_print_char((buf), options, '\\n')", "json_pretty_print_indent((buf), options)", "myht = ((**(data))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(data)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**(val))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(val)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(data)))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(val)))", "myht = ((**val).type == 4 ? (**(data)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**(val)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(data)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(val)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(data)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(val)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "myht = (myht)", "myht = (tmp_ht)", "need_comma = (0)", "need_comma = (1)", "need_comma = (10)", "need_comma = (128)", "need_comma = (16)", "need_comma = (2)", "need_comma = (3)", "need_comma = (32)", "need_comma = (4)", "need_comma = (5)", "need_comma = (78)", "need_comma = (i)", "need_comma = (need_comma)", "need_comma = (options)", "need_comma = (r)", "php_json_encode((buf), *data, options)", "php_json_encode(buf, *(data), options)", "php_json_encode(buf, *(val), options)", "r = (0)", "r = (1)", "r = (10)", "r = (128)", "r = (16)", "r = (2)", "r = (3)", "r = (32)", "r = (4)", "r = (5)", "r = (78)", "r = (i)", "r = (need_comma)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((data))", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((val))", "r = (options)", "r = (r)", "tmp_ht = ((**(data)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**(val)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(data)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(val)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(data)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(val)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(data)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(val)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "tmp_ht = (myht)", "tmp_ht = (tmp_ht)", "zend_hash_internal_pointer_reset_ex((myht), &pos)", "zend_hash_internal_pointer_reset_ex((tmp_ht), &pos)", "zend_hash_internal_pointer_reset_ex(myht, &(pos))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "exit(1)", "i = myht ? zend_hash_num_elements(myht) : 0", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &pos)", "json_escape_string(buf, key, key_len - 1, options)", "json_pretty_print_char(buf, options, ' ')", "json_pretty_print_char(buf, options, '\\n')", "json_pretty_print_indent(buf, options)", "myht = ((**val)).value.obj.handlers->get_properties(&(**val))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "need_comma = 1", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "php_json_encode(buf, *data, options)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type(val)", "r = 1", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht->nApplyCount++", "tmp_ht->nApplyCount--", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_internal_pointer_reset_ex(myht, &pos)", "if (__is_neg(\"\", \"L298\", 13, &(buf), sizeof (buf), &(options), sizeof (options), &(key), sizeof (key), &(key_len), sizeof (key_len), &(need_comma), sizeof (need_comma), &(data), sizeof (data), &(tmp_ht), sizeof (tmp_ht), &(val), sizeof (val), &(i), sizeof (i), &(r), sizeof (r), &(index), sizeof (index), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    break;\n", "if (__is_neg(\"\", \"L298\", 13, &(buf), sizeof (buf), &(options), sizeof (options), &(key), sizeof (key), &(key_len), sizeof (key_len), &(need_comma), sizeof (need_comma), &(data), sizeof (data), &(tmp_ht), sizeof (tmp_ht), &(val), sizeof (val), &(i), sizeof (i), &(r), sizeof (r), &(index), sizeof (index), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	2,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	3,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	4,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	5,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	6,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	7,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	8,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	9,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	10,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	11,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	12,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	13,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	14,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	15,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	16,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	17,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	18,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	19,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	20,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	21,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	22,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	23,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	24,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	25,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	26,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	27,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	28,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	29,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	30,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	31,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	32,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	33,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	34,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	35,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	36,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	37,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	38,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	39,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	40,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	41,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	42,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	43,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	44,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	45,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	46,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	47,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	48,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	49,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	50,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	51,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	52,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	53,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	54,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	55,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	56,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	57,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	58,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	59,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	60,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	61,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	62,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	63,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	64,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	65,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	66,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	67,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	68,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	69,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	70,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	71,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	72,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	73,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	74,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	75,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	76,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	77,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	78,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	79,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	80,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	81,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	82,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	83,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	84,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	85,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	86,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	87,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	88,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	89,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	90,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	91,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	92,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	93,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	94,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	95,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	96,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	97,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	98,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	99,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	100,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	101,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	102,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	103,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	104,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	105,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	106,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	107,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	108,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	109,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	110,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	111,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	112,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	113,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	114,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	115,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	116,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	117,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	118,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	119,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	120,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	121,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	122,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	123,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	124,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	125,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	126,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	127,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	128,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	129,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	130,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	131,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	132,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	133,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	134,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	135,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	136,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	137,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	138,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	139,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	140,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	141,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	142,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	143,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	144,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	145,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	146,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	147,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	148,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	149,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	150,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	151,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	152,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	153,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	154,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	155,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	156,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	157,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	158,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	159,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	160,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	161,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	162,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	163,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	164,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	165,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	166,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	167,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	168,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	169,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	170,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	171,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	172,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	173,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	174,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	175,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	176,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	177,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	178,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	179,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	180,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	181,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	182,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	183,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	184,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	185,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	186,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	187,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	188,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	189,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	190,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	191,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	192,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	193,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	194,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	195,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	196,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	197,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	198,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	199,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	200,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	201,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	202,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	203,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	204,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	205,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	206,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	207,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	208,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	209,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	210,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	211,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	212,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	213,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	214,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	215,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	216,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	217,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	218,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	219,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	220,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	221,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	222,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	223,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	224,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	225,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	226,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	227,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	228,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	229,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	230,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	231,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	232,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	233,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	234,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	235,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	236,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	237,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	238,
									"scores":	[-10.964963171937155, -10.074269581237155, -11.795573414237156, -10.652678613237155, -9.6217049052371557, -11.083252187237155, -11.653665684037154, -11.686991161237156, -11.129948244237156, -10.872363070237155, -11.129948244237156, -11.375987158037155, -11.375987158037155]
								}, {
									"case":	239,
									"scores":	[-10.964963171937155, -10.074269581237155, -11.795573414237156, -10.652678613237155, -9.6217049052371557, -11.083252187237155, -11.653665684037154, -11.686991161237156, -11.129948244237156, -10.872363070237155, -11.129948244237156, -11.375987158037155, -11.375987158037155]
								}]
						}, {
							"switch":	30,
							"types":	[[], [], [1], [], [], [], [211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366], [], [153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151], [], [], [152]],
							"begin_line":	298,
							"begin_column":	7,
							"end_line":	298,
							"end_column":	54,
							"patch_codes":	["if (!__is_neg(\"\", \"L298\", 13, &(buf), sizeof (buf), &(options), sizeof (options), &(key), sizeof (key), &(key_len), sizeof (key_len), &(need_comma), sizeof (need_comma), &(data), sizeof (data), &(tmp_ht), sizeof (tmp_ht), &(val), sizeof (val), &(i), sizeof (i), &(r), sizeof (r), &(index), sizeof (index), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    json_pretty_print_indent(buf, options);\n", "_IO_padn(buf, options, 0)", "_IO_padn(buf, options, 1)", "_IO_padn(buf, options, 10)", "_IO_padn(buf, options, 128)", "_IO_padn(buf, options, 16)", "_IO_padn(buf, options, 2)", "_IO_padn(buf, options, 3)", "_IO_padn(buf, options, 32)", "_IO_padn(buf, options, 4)", "_IO_padn(buf, options, 5)", "_IO_padn(buf, options, 78)", "_php_glob_stream_get_path(buf, options, 0)", "_php_glob_stream_get_pattern(buf, options, 0)", "_php_stream_opendir(buf, options, 0)", "_php_stream_rmdir(buf, options, 0)", "fgets(buf, options, 0)", "json_pretty_print_char(buf, options, 0)", "json_pretty_print_char(buf, options, 1)", "json_pretty_print_char(buf, options, 10)", "json_pretty_print_char(buf, options, 128)", "json_pretty_print_char(buf, options, 16)", "json_pretty_print_char(buf, options, 2)", "json_pretty_print_char(buf, options, 3)", "json_pretty_print_char(buf, options, 32)", "json_pretty_print_char(buf, options, 4)", "json_pretty_print_char(buf, options, 5)", "json_pretty_print_char(buf, options, 78)", "memchr(buf, options, 0)", "memchr(buf, options, 1)", "memchr(buf, options, 10)", "memchr(buf, options, 128)", "memchr(buf, options, 16)", "memchr(buf, options, 2)", "memchr(buf, options, 3)", "memchr(buf, options, 32)", "memchr(buf, options, 4)", "memchr(buf, options, 5)", "memchr(buf, options, 78)", "memchr(buf, options, index)", "memset(buf, options, 0)", "memset(buf, options, 1)", "memset(buf, options, 10)", "memset(buf, options, 128)", "memset(buf, options, 16)", "memset(buf, options, 2)", "memset(buf, options, 3)", "memset(buf, options, 32)", "memset(buf, options, 4)", "memset(buf, options, 5)", "memset(buf, options, 78)", "memset(buf, options, index)", "php_ini_activate_config(buf, options, 0)", "php_ini_activate_config(buf, options, 1)", "php_ini_activate_config(buf, options, 10)", "php_ini_activate_config(buf, options, 128)", "php_ini_activate_config(buf, options, 16)", "php_ini_activate_config(buf, options, 2)", "php_ini_activate_config(buf, options, 3)", "php_ini_activate_config(buf, options, 32)", "php_ini_activate_config(buf, options, 4)", "php_ini_activate_config(buf, options, 5)", "php_ini_activate_config(buf, options, 78)", "php_ini_activate_config(buf, options, i)", "php_ini_activate_config(buf, options, le_index_ptr)", "php_ini_activate_config(buf, options, need_comma)", "php_ini_activate_config(buf, options, options)", "php_ini_activate_config(buf, options, r)", "php_resolve_path(buf, options, 0)", "php_stream_xport_listen(buf, options, 0)", "php_stream_xport_listen(buf, options, environ)", "realpath_cache_lookup(buf, options, 0)", "realpath_cache_lookup(buf, options, 1)", "realpath_cache_lookup(buf, options, 10)", "realpath_cache_lookup(buf, options, 128)", "realpath_cache_lookup(buf, options, 16)", "realpath_cache_lookup(buf, options, 2)", "realpath_cache_lookup(buf, options, 3)", "realpath_cache_lookup(buf, options, 32)", "realpath_cache_lookup(buf, options, 4)", "realpath_cache_lookup(buf, options, 5)", "realpath_cache_lookup(buf, options, 78)", "symlinkat(buf, options, 0)", "zend_delete_global_variable_ex(buf, options, 0)", "zend_delete_global_variable_ex(buf, options, 1)", "zend_delete_global_variable_ex(buf, options, 10)", "zend_delete_global_variable_ex(buf, options, 128)", "zend_delete_global_variable_ex(buf, options, 16)", "zend_delete_global_variable_ex(buf, options, 2)", "zend_delete_global_variable_ex(buf, options, 3)", "zend_delete_global_variable_ex(buf, options, 32)", "zend_delete_global_variable_ex(buf, options, 4)", "zend_delete_global_variable_ex(buf, options, 5)", "zend_delete_global_variable_ex(buf, options, 78)", "zend_delete_global_variable_ex(buf, options, index)", "zend_do_end_variable_parse(buf, options, 0)", "zend_do_end_variable_parse(buf, options, 1)", "zend_do_end_variable_parse(buf, options, 10)", "zend_do_end_variable_parse(buf, options, 128)", "zend_do_end_variable_parse(buf, options, 16)", "zend_do_end_variable_parse(buf, options, 2)", "zend_do_end_variable_parse(buf, options, 3)", "zend_do_end_variable_parse(buf, options, 32)", "zend_do_end_variable_parse(buf, options, 4)", "zend_do_end_variable_parse(buf, options, 5)", "zend_do_end_variable_parse(buf, options, 78)", "zend_do_end_variable_parse(buf, options, i)", "zend_do_end_variable_parse(buf, options, le_index_ptr)", "zend_do_end_variable_parse(buf, options, need_comma)", "zend_do_end_variable_parse(buf, options, options)", "zend_do_end_variable_parse(buf, options, r)", "zend_fcall_info_argp(buf, options, 0)", "zend_fcall_info_args_restore(buf, options, 0)", "zend_fcall_info_argv(buf, options, 0)", "zend_lookup_class(buf, options, 0)", "zend_memrchr(buf, options, 0)", "zend_memrchr(buf, options, 1)", "zend_memrchr(buf, options, 10)", "zend_memrchr(buf, options, 128)", "zend_memrchr(buf, options, 16)", "zend_memrchr(buf, options, 2)", "zend_memrchr(buf, options, 3)", "zend_memrchr(buf, options, 32)", "zend_memrchr(buf, options, 4)", "zend_memrchr(buf, options, 5)", "zend_memrchr(buf, options, 78)", "zend_memrchr(buf, options, index)", "zend_mm_shutdown(buf, options, 0)", "zend_mm_shutdown(buf, options, 1)", "zend_mm_shutdown(buf, options, 10)", "zend_mm_shutdown(buf, options, 128)", "zend_mm_shutdown(buf, options, 16)", "zend_mm_shutdown(buf, options, 2)", "zend_mm_shutdown(buf, options, 3)", "zend_mm_shutdown(buf, options, 32)", "zend_mm_shutdown(buf, options, 4)", "zend_mm_shutdown(buf, options, 5)", "zend_mm_shutdown(buf, options, 78)", "zend_mm_shutdown(buf, options, i)", "zend_mm_shutdown(buf, options, le_index_ptr)", "zend_mm_shutdown(buf, options, need_comma)", "zend_mm_shutdown(buf, options, options)", "zend_mm_shutdown(buf, options, r)", "zend_register_class_alias_ex(buf, options, 0)", "zend_register_class_alias_ex(buf, options, php_json_serializable_ce)", "zend_stack_apply(buf, options, 0)", "zend_stack_apply(buf, options, brk)", "zend_stack_apply(buf, options, dlclose)", "zend_unregister_functions(buf, options, 0)", "zend_unregister_functions(buf, options, myht)", "zend_unregister_functions(buf, options, tmp_ht)", "{\n}\n", "Debug(buf, options)", "__overflow(buf, options)", "__sigsetjmp(buf, options)", "_longjmp(buf, options)", "_php_stream_filter_flush(buf, options)", "_php_stream_flush(buf, options)", "_php_stream_free(buf, options)", "_php_stream_free_enclosed(buf, options)", "_php_stream_putc(buf, options)", "access(buf, options)", "add_next_index_bool(buf, options)", "add_next_index_resource(buf, options)", "compile_file(buf, options)", "convert_to_long_base(buf, options)", "display_link_numbers(buf, options)", "dlopen(buf, options)", "execute_internal(buf, options)", "getloadavg(buf, options)", "index(buf, options)", "longjmp(buf, options)", "mkstemps(buf, options)", "pathconf(buf, options)", "php_check_open_basedir_ex(buf, options)", "php_info_html_esc_write(buf, options)", "php_printf(buf, options)", "php_stream_filter_remove(buf, options)", "php_stream_xport_crypto_enable(buf, options)", "print_op_array(buf, options)", "printf(buf, options)", "realpath_cache_del(buf, options)", "rindex(buf, options)", "sigaddset(buf, options)", "sigdelset(buf, options)", "sigismember(buf, options)", "siglongjmp(buf, options)", "strchr(buf, options)", "strrchr(buf, options)", "timespec_get(buf, options)", "virtual_access(buf, options)", "virtual_open(buf, options)", "wctomb(buf, options)", "zend_atoi(buf, options)", "zend_atol(buf, options)", "zend_class_implements(buf, options)", "zend_delete_global_variable(buf, options)", "zend_do_begin_dynamic_function_call(buf, options)", "zend_do_return(buf, options)", "zend_exception_error(buf, options)", "zend_fcall_info_argn(buf, options)", "zend_fcall_info_args_clear(buf, options)", "zend_ini_boolean_displayer_cb(buf, options)", "zend_ini_color_displayer_cb(buf, options)", "zend_list_insert(buf, options)", "zend_print_zval(buf, options)", "zend_print_zval_r(buf, options)", "zend_ptr_stack_n_pop(buf, options)", "zend_ptr_stack_n_push(buf, options)", "zend_register_ini_entries(buf, options)", "json_pretty_print_indent((&buf), options)", "json_pretty_print_indent((&data), options)", "json_pretty_print_indent((&i), options)", "json_pretty_print_indent((&index), options)", "json_pretty_print_indent((&key), options)", "json_pretty_print_indent((&key_len), options)", "json_pretty_print_indent((&myht), options)", "json_pretty_print_indent((&need_comma), options)", "json_pretty_print_indent((&options), options)", "json_pretty_print_indent((&pos), options)", "json_pretty_print_indent((&r), options)", "json_pretty_print_indent((&tmp_ht), options)", "json_pretty_print_indent((&val), options)", "json_pretty_print_indent((buf), options)", "json_pretty_print_indent(buf, (0 * i))", "json_pretty_print_indent(buf, (0 * index))", "json_pretty_print_indent(buf, (0 * key_len))", "json_pretty_print_indent(buf, (0 * need_comma))", "json_pretty_print_indent(buf, (0 * options))", "json_pretty_print_indent(buf, (0 * r))", "json_pretty_print_indent(buf, (buf != 0))", "json_pretty_print_indent(buf, (buf == 0))", "json_pretty_print_indent(buf, (data != 0))", "json_pretty_print_indent(buf, (data == 0))", "json_pretty_print_indent(buf, (i != 0))", "json_pretty_print_indent(buf, (i != index))", "json_pretty_print_indent(buf, (i != key_len))", "json_pretty_print_indent(buf, (i != need_comma))", "json_pretty_print_indent(buf, (i != r))", "json_pretty_print_indent(buf, (i * index))", "json_pretty_print_indent(buf, (i * key_len))", "json_pretty_print_indent(buf, (i * need_comma))", "json_pretty_print_indent(buf, (i * options))", "json_pretty_print_indent(buf, (i * r))", "json_pretty_print_indent(buf, (i + 0))", "json_pretty_print_indent(buf, (i + index))", "json_pretty_print_indent(buf, (i + key_len))", "json_pretty_print_indent(buf, (i + need_comma))", "json_pretty_print_indent(buf, (i + r))", "json_pretty_print_indent(buf, (i - 0))", "json_pretty_print_indent(buf, (i - index))", "json_pretty_print_indent(buf, (i - key_len))", "json_pretty_print_indent(buf, (i - need_comma))", "json_pretty_print_indent(buf, (i - r))", "json_pretty_print_indent(buf, (i == 0))", "json_pretty_print_indent(buf, (i == index))", "json_pretty_print_indent(buf, (i == key_len))", "json_pretty_print_indent(buf, (i == need_comma))", "json_pretty_print_indent(buf, (i == r))", "json_pretty_print_indent(buf, (i))", "json_pretty_print_indent(buf, (index != 0))", "json_pretty_print_indent(buf, (index != key_len))", "json_pretty_print_indent(buf, (index != need_comma))", "json_pretty_print_indent(buf, (index * i))", "json_pretty_print_indent(buf, (index * key_len))", "json_pretty_print_indent(buf, (index * need_comma))", "json_pretty_print_indent(buf, (index * options))", "json_pretty_print_indent(buf, (index * r))", "json_pretty_print_indent(buf, (index + 0))", "json_pretty_print_indent(buf, (index + key_len))", "json_pretty_print_indent(buf, (index + need_comma))", "json_pretty_print_indent(buf, (index - 0))", "json_pretty_print_indent(buf, (index - key_len))", "json_pretty_print_indent(buf, (index - need_comma))", "json_pretty_print_indent(buf, (index == 0))", "json_pretty_print_indent(buf, (index == key_len))", "json_pretty_print_indent(buf, (index == need_comma))", "json_pretty_print_indent(buf, (key != 0))", "json_pretty_print_indent(buf, (key == 0))", "json_pretty_print_indent(buf, (key_len != 0))", "json_pretty_print_indent(buf, (key_len != need_comma))", "json_pretty_print_indent(buf, (key_len * i))", "json_pretty_print_indent(buf, (key_len * index))", "json_pretty_print_indent(buf, (key_len * need_comma))", "json_pretty_print_indent(buf, (key_len * options))", "json_pretty_print_indent(buf, (key_len * r))", "json_pretty_print_indent(buf, (key_len + 0))", "json_pretty_print_indent(buf, (key_len + need_comma))", "json_pretty_print_indent(buf, (key_len - 0))", "json_pretty_print_indent(buf, (key_len - need_comma))", "json_pretty_print_indent(buf, (key_len == 0))", "json_pretty_print_indent(buf, (key_len == need_comma))", "json_pretty_print_indent(buf, (myht != 0))", "json_pretty_print_indent(buf, (myht != tmp_ht))", "json_pretty_print_indent(buf, (myht == 0))", "json_pretty_print_indent(buf, (myht == tmp_ht))", "json_pretty_print_indent(buf, (need_comma != 0))", "json_pretty_print_indent(buf, (need_comma * i))", "json_pretty_print_indent(buf, (need_comma * index))", "json_pretty_print_indent(buf, (need_comma * key_len))", "json_pretty_print_indent(buf, (need_comma * options))", "json_pretty_print_indent(buf, (need_comma * r))", "json_pretty_print_indent(buf, (need_comma + 0))", "json_pretty_print_indent(buf, (need_comma - 0))", "json_pretty_print_indent(buf, (need_comma == 0))", "json_pretty_print_indent(buf, (need_comma))", "json_pretty_print_indent(buf, (options != 0))", "json_pretty_print_indent(buf, (options != i))", "json_pretty_print_indent(buf, (options != index))", "json_pretty_print_indent(buf, (options != key_len))", "json_pretty_print_indent(buf, (options != need_comma))", "json_pretty_print_indent(buf, (options != r))", "json_pretty_print_indent(buf, (options * i))", "json_pretty_print_indent(buf, (options * index))", "json_pretty_print_indent(buf, (options * key_len))", "json_pretty_print_indent(buf, (options * need_comma))", "json_pretty_print_indent(buf, (options * r))", "json_pretty_print_indent(buf, (options + 0))", "json_pretty_print_indent(buf, (options + i))", "json_pretty_print_indent(buf, (options + index))", "json_pretty_print_indent(buf, (options + key_len))", "json_pretty_print_indent(buf, (options + need_comma))", "json_pretty_print_indent(buf, (options + r))", "json_pretty_print_indent(buf, (options - 0))", "json_pretty_print_indent(buf, (options - i))", "json_pretty_print_indent(buf, (options - index))", "json_pretty_print_indent(buf, (options - key_len))", "json_pretty_print_indent(buf, (options - need_comma))", "json_pretty_print_indent(buf, (options - r))", "json_pretty_print_indent(buf, (options == 0))", "json_pretty_print_indent(buf, (options == i))", "json_pretty_print_indent(buf, (options == index))", "json_pretty_print_indent(buf, (options == key_len))", "json_pretty_print_indent(buf, (options == need_comma))", "json_pretty_print_indent(buf, (options == r))", "json_pretty_print_indent(buf, (options))", "json_pretty_print_indent(buf, (pos != 0))", "json_pretty_print_indent(buf, (pos == 0))", "json_pretty_print_indent(buf, (r != 0))", "json_pretty_print_indent(buf, (r != index))", "json_pretty_print_indent(buf, (r != key_len))", "json_pretty_print_indent(buf, (r != need_comma))", "json_pretty_print_indent(buf, (r * i))", "json_pretty_print_indent(buf, (r * index))", "json_pretty_print_indent(buf, (r * key_len))", "json_pretty_print_indent(buf, (r * need_comma))", "json_pretty_print_indent(buf, (r * options))", "json_pretty_print_indent(buf, (r + 0))", "json_pretty_print_indent(buf, (r + index))", "json_pretty_print_indent(buf, (r + key_len))", "json_pretty_print_indent(buf, (r + need_comma))", "json_pretty_print_indent(buf, (r - 0))", "json_pretty_print_indent(buf, (r - index))", "json_pretty_print_indent(buf, (r - key_len))", "json_pretty_print_indent(buf, (r - need_comma))", "json_pretty_print_indent(buf, (r == 0))", "json_pretty_print_indent(buf, (r == index))", "json_pretty_print_indent(buf, (r == key_len))", "json_pretty_print_indent(buf, (r == need_comma))", "json_pretty_print_indent(buf, (r))", "json_pretty_print_indent(buf, (tmp_ht != 0))", "json_pretty_print_indent(buf, (tmp_ht == 0))", "json_pretty_print_indent(buf, (val != 0))", "json_pretty_print_indent(buf, (val != data))", "json_pretty_print_indent(buf, (val == 0))", "json_pretty_print_indent(buf, (val == data))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.2472888062371545, -8.2001289278371559, -8.6763566923371549, -7.0766310528371559, -8.5318072128371565, -8.9663150728371566, -9.4967306633371553, -9.650967283337156, -8.8108527728371548, -8.4970550728371563, -8.8108527728371548, -9.5687408728371555, -9.5687408728371555]
								}, {
									"case":	2,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	3,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	4,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	5,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	6,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	7,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	8,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	9,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	10,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	11,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	12,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	13,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	14,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	15,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	16,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	17,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	18,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	19,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	20,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	21,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	22,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	23,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	24,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	25,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	26,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	27,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	28,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	29,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	30,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	31,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	32,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	33,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	34,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	35,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	36,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	37,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	38,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	39,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	40,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	41,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	42,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	43,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	44,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	45,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	46,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	47,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	48,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	49,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	50,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	51,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	52,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	53,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	54,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	55,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	56,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	57,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	58,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	59,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	60,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	61,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	62,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	63,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	64,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	65,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	66,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	67,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	68,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	69,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	70,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	71,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	72,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	73,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	74,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	75,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	76,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	77,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	78,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	79,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	80,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	81,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	82,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	83,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	84,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	85,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	86,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	87,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	88,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	89,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	90,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	91,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	92,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	93,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	94,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	95,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	96,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	97,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	98,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	99,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	100,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	101,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	102,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	103,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	104,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	105,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	106,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	107,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	108,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	109,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	110,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	111,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	112,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	113,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	114,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	115,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	116,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	117,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	118,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	119,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	120,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	121,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	122,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	123,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	124,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	125,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	126,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	127,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	128,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	129,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	130,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	131,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	132,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	133,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	134,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	135,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	136,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	137,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	138,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	139,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	140,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	141,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	142,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	143,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	144,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	145,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	146,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	147,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	148,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	149,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	150,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	151,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	152,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	153,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	154,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	155,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	156,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	157,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	158,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	159,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	160,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	161,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	162,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	163,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	164,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	165,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	166,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	167,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	168,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	169,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	170,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	171,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	172,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	173,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	174,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	175,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	176,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	177,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	178,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	179,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	180,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	181,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	182,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	183,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	184,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	185,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	186,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	187,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	188,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	189,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	190,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	191,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	192,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	193,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	194,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	195,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	196,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	197,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	198,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	199,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	200,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	201,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	202,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	203,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	204,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	205,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	206,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	207,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	208,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	209,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	210,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	211,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	212,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	213,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	214,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	215,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	216,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	217,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	218,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	219,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	220,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	221,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	222,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	223,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	224,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	225,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	226,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	227,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	228,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	229,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	230,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	231,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	232,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	233,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	234,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	235,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	236,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	237,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	238,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	239,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	240,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	241,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	242,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	243,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	244,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	245,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	246,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	247,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	248,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	249,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	250,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	251,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	252,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	253,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	254,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	255,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	256,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	257,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	258,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	259,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	260,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	261,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	262,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	263,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	264,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	265,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	266,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	267,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	268,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	269,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	270,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	271,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	272,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	273,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	274,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	275,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	276,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	277,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	278,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	279,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	280,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	281,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	282,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	283,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	284,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	285,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	286,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	287,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	288,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	289,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	290,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	291,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	292,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	293,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	294,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	295,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	296,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	297,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	298,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	299,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	300,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	301,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	302,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	303,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	304,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	305,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	306,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	307,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	308,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	309,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	310,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	311,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	312,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	313,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	314,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	315,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	316,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	317,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	318,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	319,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	320,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	321,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	322,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	323,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	324,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	325,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	326,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	327,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	328,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	329,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	330,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	331,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	332,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	333,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	334,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	335,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	336,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	337,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	338,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	339,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	340,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	341,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	342,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	343,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	344,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	345,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	346,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	347,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	348,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	349,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	350,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	351,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	352,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	353,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	354,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	355,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	356,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	357,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	358,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	359,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	360,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	361,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	362,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	363,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	364,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	365,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	366,
									"scores":	[-8.0737807128371557]
								}]
						}]
				}, {
					"line":	299,
					"switches":	[{
							"switch":	31,
							"types":	[[], [], [], [], [238, 239], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], [], [], [], [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237], [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], [], [], [], [], [], []],
							"begin_line":	300,
							"begin_column":	5,
							"end_line":	300,
							"end_column":	5,
							"patch_codes":	["memset(&(**data).is_ref__gc, 0, sizeof (*(&(**data).is_ref__gc)))", "memset(&(**data).refcount__gc, 0, sizeof (*(&(**data).refcount__gc)))", "memset(&(**data).type, 0, sizeof (*(&(**data).type)))", "memset(&(**data).value, 0, sizeof (*(&(**data).value)))", "memset(&(**data).value.dval, 0, sizeof (*(&(**data).value.dval)))", "memset(&(**data).value.ht, 0, sizeof (*(&(**data).value.ht)))", "memset(&(**data).value.lval, 0, sizeof (*(&(**data).value.lval)))", "memset(&(**data).value.obj, 0, sizeof (*(&(**data).value.obj)))", "memset(&(**data).value.obj.handle, 0, sizeof (*(&(**data).value.obj.handle)))", "memset(&(**data).value.obj.handlers, 0, sizeof (*(&(**data).value.obj.handlers)))", "memset(&(**data).value.obj.handlers->add_ref, 0, sizeof (*(&(**data).value.obj.handlers->add_ref)))", "memset(&(**data).value.obj.handlers->call_method, 0, sizeof (*(&(**data).value.obj.handlers->call_method)))", "memset(&(**data).value.obj.handlers->cast_object, 0, sizeof (*(&(**data).value.obj.handlers->cast_object)))", "memset(&(**data).value.obj.handlers->clone_obj, 0, sizeof (*(&(**data).value.obj.handlers->clone_obj)))", "memset(&(**data).value.obj.handlers->compare_objects, 0, sizeof (*(&(**data).value.obj.handlers->compare_objects)))", "memset(&(**data).value.obj.handlers->count_elements, 0, sizeof (*(&(**data).value.obj.handlers->count_elements)))", "memset(&(**data).value.obj.handlers->del_ref, 0, sizeof (*(&(**data).value.obj.handlers->del_ref)))", "memset(&(**data).value.obj.handlers->get, 0, sizeof (*(&(**data).value.obj.handlers->get)))", "memset(&(**data).value.obj.handlers->get_class_entry, 0, sizeof (*(&(**data).value.obj.handlers->get_class_entry)))", "memset(&(**data).value.obj.handlers->get_class_name, 0, sizeof (*(&(**data).value.obj.handlers->get_class_name)))", "memset(&(**data).value.obj.handlers->get_closure, 0, sizeof (*(&(**data).value.obj.handlers->get_closure)))", "memset(&(**data).value.obj.handlers->get_constructor, 0, sizeof (*(&(**data).value.obj.handlers->get_constructor)))", "memset(&(**data).value.obj.handlers->get_debug_info, 0, sizeof (*(&(**data).value.obj.handlers->get_debug_info)))", "memset(&(**data).value.obj.handlers->get_method, 0, sizeof (*(&(**data).value.obj.handlers->get_method)))", "memset(&(**data).value.obj.handlers->get_properties, 0, sizeof (*(&(**data).value.obj.handlers->get_properties)))", "memset(&(**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(**data).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(**data).value.obj.handlers->has_dimension, 0, sizeof (*(&(**data).value.obj.handlers->has_dimension)))", "memset(&(**data).value.obj.handlers->has_property, 0, sizeof (*(&(**data).value.obj.handlers->has_property)))", "memset(&(**data).value.obj.handlers->read_dimension, 0, sizeof (*(&(**data).value.obj.handlers->read_dimension)))", "memset(&(**data).value.obj.handlers->read_property, 0, sizeof (*(&(**data).value.obj.handlers->read_property)))", "memset(&(**data).value.obj.handlers->set, 0, sizeof (*(&(**data).value.obj.handlers->set)))", "memset(&(**data).value.obj.handlers->unset_dimension, 0, sizeof (*(&(**data).value.obj.handlers->unset_dimension)))", "memset(&(**data).value.obj.handlers->unset_property, 0, sizeof (*(&(**data).value.obj.handlers->unset_property)))", "memset(&(**data).value.obj.handlers->write_dimension, 0, sizeof (*(&(**data).value.obj.handlers->write_dimension)))", "memset(&(**data).value.obj.handlers->write_property, 0, sizeof (*(&(**data).value.obj.handlers->write_property)))", "memset(&(**data).value.str, 0, sizeof (*(&(**data).value.str)))", "memset(&(**val).is_ref__gc, 0, sizeof (*(&(**val).is_ref__gc)))", "memset(&(**val).refcount__gc, 0, sizeof (*(&(**val).refcount__gc)))", "memset(&(**val).type, 0, sizeof (*(&(**val).type)))", "memset(&(**val).value, 0, sizeof (*(&(**val).value)))", "memset(&json_globals.encoder_depth, 0, sizeof (*(&json_globals.encoder_depth)))", "memset(&json_globals.error_code, 0, sizeof (*(&json_globals.error_code)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((**data).value.ht, 0, sizeof (*((**data).value.ht)))", "memset((**data).value.obj.handlers, 0, sizeof (*((**data).value.obj.handlers)))", "memset((**data).value.obj.handlers->add_ref, 0, sizeof (*((**data).value.obj.handlers->add_ref)))", "memset((**data).value.obj.handlers->call_method, 0, sizeof (*((**data).value.obj.handlers->call_method)))", "memset((**data).value.obj.handlers->cast_object, 0, sizeof (*((**data).value.obj.handlers->cast_object)))", "memset((**data).value.obj.handlers->clone_obj, 0, sizeof (*((**data).value.obj.handlers->clone_obj)))", "memset((**data).value.obj.handlers->compare_objects, 0, sizeof (*((**data).value.obj.handlers->compare_objects)))", "memset((**data).value.obj.handlers->count_elements, 0, sizeof (*((**data).value.obj.handlers->count_elements)))", "memset((**data).value.obj.handlers->del_ref, 0, sizeof (*((**data).value.obj.handlers->del_ref)))", "memset((**data).value.obj.handlers->get, 0, sizeof (*((**data).value.obj.handlers->get)))", "memset((**data).value.obj.handlers->get_class_entry, 0, sizeof (*((**data).value.obj.handlers->get_class_entry)))", "memset((**data).value.obj.handlers->get_class_name, 0, sizeof (*((**data).value.obj.handlers->get_class_name)))", "memset((**data).value.obj.handlers->get_closure, 0, sizeof (*((**data).value.obj.handlers->get_closure)))", "memset((**data).value.obj.handlers->get_constructor, 0, sizeof (*((**data).value.obj.handlers->get_constructor)))", "memset((**data).value.obj.handlers->get_debug_info, 0, sizeof (*((**data).value.obj.handlers->get_debug_info)))", "memset((**data).value.obj.handlers->get_method, 0, sizeof (*((**data).value.obj.handlers->get_method)))", "memset((**data).value.obj.handlers->get_properties, 0, sizeof (*((**data).value.obj.handlers->get_properties)))", "memset((**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((**data).value.obj.handlers->get_property_ptr_ptr)))", "memset((**data).value.obj.handlers->has_dimension, 0, sizeof (*((**data).value.obj.handlers->has_dimension)))", "memset((**data).value.obj.handlers->has_property, 0, sizeof (*((**data).value.obj.handlers->has_property)))", "memset((**data).value.obj.handlers->read_dimension, 0, sizeof (*((**data).value.obj.handlers->read_dimension)))", "memset((**data).value.obj.handlers->read_property, 0, sizeof (*((**data).value.obj.handlers->read_property)))", "memset((**data).value.obj.handlers->set, 0, sizeof (*((**data).value.obj.handlers->set)))", "memset((**data).value.obj.handlers->unset_dimension, 0, sizeof (*((**data).value.obj.handlers->unset_dimension)))", "memset((**data).value.obj.handlers->unset_property, 0, sizeof (*((**data).value.obj.handlers->unset_property)))", "memset((**data).value.obj.handlers->write_dimension, 0, sizeof (*((**data).value.obj.handlers->write_dimension)))", "memset((**data).value.obj.handlers->write_property, 0, sizeof (*((**data).value.obj.handlers->write_property)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (i)", "(json_globals.error_code) = (need_comma)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (r)", "(key)++", "(myht)->nApplyCount++", "(myht)->nApplyCount--", "(tmp_ht)->nApplyCount++", "(tmp_ht)->nApplyCount--", "_efree(((key)))", "i = (0)", "i = (1)", "i = (10)", "i = (128)", "i = (16)", "i = (2)", "i = (3)", "i = (32)", "i = (4)", "i = (5)", "i = (78)", "i = (i)", "i = (myht) ? zend_hash_num_elements(myht) : 0", "i = (need_comma)", "i = (options)", "i = (r)", "i = (tmp_ht) ? zend_hash_num_elements(myht) : 0", "i = myht ? zend_hash_num_elements((myht)) : 0", "i = myht ? zend_hash_num_elements((tmp_ht)) : 0", "i = zend_hash_get_current_key_ex((myht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex((tmp_ht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &(key), &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &(pos))", "json_escape_string((buf), key, key_len - 1, options)", "json_escape_string(buf, (key), key_len - 1, options)", "json_pretty_print_char((buf), options, ' ')", "json_pretty_print_char((buf), options, '\\n')", "json_pretty_print_indent((buf), options)", "myht = ((**(data))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(data)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**(val))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(val)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(data)))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(val)))", "myht = ((**val).type == 4 ? (**(data)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**(val)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(data)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(val)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(data)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(val)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "myht = (myht)", "myht = (tmp_ht)", "need_comma = (0)", "need_comma = (1)", "need_comma = (10)", "need_comma = (128)", "need_comma = (16)", "need_comma = (2)", "need_comma = (3)", "need_comma = (32)", "need_comma = (4)", "need_comma = (5)", "need_comma = (78)", "need_comma = (i)", "need_comma = (need_comma)", "need_comma = (options)", "need_comma = (r)", "php_json_encode((buf), *data, options)", "php_json_encode(buf, *(data), options)", "php_json_encode(buf, *(val), options)", "r = (0)", "r = (1)", "r = (10)", "r = (128)", "r = (16)", "r = (2)", "r = (3)", "r = (32)", "r = (4)", "r = (5)", "r = (78)", "r = (i)", "r = (need_comma)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((data))", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((val))", "r = (options)", "r = (r)", "tmp_ht = ((**(data)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**(val)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(data)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(val)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(data)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(val)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(data)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(val)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "tmp_ht = (myht)", "tmp_ht = (tmp_ht)", "zend_hash_internal_pointer_reset_ex((myht), &pos)", "zend_hash_internal_pointer_reset_ex((tmp_ht), &pos)", "zend_hash_internal_pointer_reset_ex(myht, &(pos))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "exit(1)", "i = myht ? zend_hash_num_elements(myht) : 0", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &pos)", "json_escape_string(buf, key, key_len - 1, options)", "json_pretty_print_char(buf, options, ' ')", "json_pretty_print_char(buf, options, '\\n')", "json_pretty_print_indent(buf, options)", "myht = ((**val)).value.obj.handlers->get_properties(&(**val))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "need_comma = 1", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "php_json_encode(buf, *data, options)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type(val)", "r = 1", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht->nApplyCount++", "tmp_ht->nApplyCount--", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_internal_pointer_reset_ex(myht, &pos)", "if (__is_neg(\"\", \"L300\", 13, &(buf), sizeof (buf), &(options), sizeof (options), &(key), sizeof (key), &(key_len), sizeof (key_len), &(data), sizeof (data), &(need_comma), sizeof (need_comma), &(tmp_ht), sizeof (tmp_ht), &(val), sizeof (val), &(index), sizeof (index), &(i), sizeof (i), &(r), sizeof (r), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    break;\n", "if (__is_neg(\"\", \"L300\", 13, &(buf), sizeof (buf), &(options), sizeof (options), &(key), sizeof (key), &(key_len), sizeof (key_len), &(data), sizeof (data), &(need_comma), sizeof (need_comma), &(tmp_ht), sizeof (tmp_ht), &(val), sizeof (val), &(index), sizeof (index), &(i), sizeof (i), &(r), sizeof (r), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	2,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	3,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	4,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	5,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	6,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	7,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	8,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	9,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	10,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	11,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	12,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	13,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	14,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	15,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	16,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	17,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	18,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	19,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	20,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	21,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	22,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	23,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	24,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	25,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	26,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	27,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	28,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	29,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	30,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	31,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	32,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	33,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	34,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	35,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	36,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	37,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	38,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	39,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	40,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	41,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	42,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	43,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	44,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	45,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	46,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	47,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	48,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	49,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	50,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	51,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	52,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	53,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	54,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	55,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	56,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	57,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	58,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	59,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	60,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	61,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	62,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	63,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	64,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	65,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	66,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	67,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	68,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	69,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	70,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	71,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	72,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	73,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	74,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	75,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	76,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	77,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	78,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	79,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	80,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	81,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	82,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	83,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	84,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	85,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	86,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	87,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	88,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	89,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	90,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	91,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	92,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	93,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	94,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	95,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	96,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	97,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	98,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	99,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	100,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	101,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	102,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	103,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	104,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	105,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	106,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	107,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	108,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	109,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	110,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	111,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	112,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	113,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	114,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	115,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	116,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	117,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	118,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	119,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	120,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	121,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	122,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	123,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	124,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	125,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	126,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	127,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	128,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	129,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	130,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	131,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	132,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	133,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	134,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	135,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	136,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	137,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	138,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	139,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	140,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	141,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	142,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	143,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	144,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	145,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	146,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	147,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	148,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	149,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	150,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	151,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	152,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	153,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	154,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	155,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	156,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	157,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	158,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	159,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	160,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	161,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	162,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	163,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	164,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	165,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	166,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	167,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	168,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	169,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	170,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	171,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	172,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	173,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	174,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	175,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	176,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	177,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	178,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	179,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	180,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	181,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	182,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	183,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	184,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	185,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	186,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	187,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	188,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	189,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	190,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	191,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	192,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	193,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	194,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	195,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	196,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	197,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	198,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	199,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	200,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	201,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	202,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	203,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	204,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	205,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	206,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	207,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	208,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	209,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	210,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	211,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	212,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	213,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	214,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	215,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	216,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	217,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	218,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	219,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	220,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	221,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	222,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	223,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	224,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	225,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	226,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	227,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	228,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	229,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	230,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	231,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	232,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	233,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	234,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	235,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	236,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	237,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	238,
									"scores":	[-11.118865464619637, -10.228171873919635, -10.948485084919637, -9.8939602839196361, -12.380992479919636, -9.7756071979196371, -11.807567976719636, -11.840893453919637, -11.283850536919637, -11.283850536919637, -11.026265362919636, -11.529889450719637, -11.529889450719637]
								}, {
									"case":	239,
									"scores":	[-11.118865464619637, -10.228171873919635, -10.948485084919637, -9.8939602839196361, -12.380992479919636, -9.7756071979196371, -11.807567976719636, -11.840893453919637, -11.283850536919637, -11.283850536919637, -11.026265362919636, -11.529889450719637, -11.529889450719637]
								}]
						}, {
							"switch":	32,
							"types":	[[], [], [1], [], [], [], [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466], [], [14, 15, 16, 17, 18], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [], [], [13]],
							"begin_line":	300,
							"begin_column":	7,
							"end_line":	300,
							"end_column":	66,
							"patch_codes":	["if (!__is_neg(\"\", \"L300\", 13, &(buf), sizeof (buf), &(options), sizeof (options), &(key), sizeof (key), &(key_len), sizeof (key_len), &(data), sizeof (data), &(need_comma), sizeof (need_comma), &(tmp_ht), sizeof (tmp_ht), &(val), sizeof (val), &(index), sizeof (index), &(i), sizeof (i), &(r), sizeof (r), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    json_escape_string(buf, key, key_len - 1, options);\n", "php_json_decode_ex(buf, key, key_len - 1, options, 0)", "php_json_decode_ex(buf, key, key_len - 1, options, 1)", "php_json_decode_ex(buf, key, key_len - 1, options, 10)", "php_json_decode_ex(buf, key, key_len - 1, options, 128)", "php_json_decode_ex(buf, key, key_len - 1, options, 16)", "php_json_decode_ex(buf, key, key_len - 1, options, 2)", "php_json_decode_ex(buf, key, key_len - 1, options, 3)", "php_json_decode_ex(buf, key, key_len - 1, options, 32)", "php_json_decode_ex(buf, key, key_len - 1, options, 4)", "php_json_decode_ex(buf, key, key_len - 1, options, 5)", "php_json_decode_ex(buf, key, key_len - 1, options, 78)", "{\n}\n", "Debug(buf, key, key_len - 1, options)", "json_escape_string(buf, key, key_len - 1, options)", "php_printf(buf, key, key_len - 1, options)", "printf(buf, key, key_len - 1, options)", "zend_declare_property_null(buf, key, key_len - 1, options)", "json_escape_string((&buf), key, key_len - 1, options)", "json_escape_string((&data), key, key_len - 1, options)", "json_escape_string((&i), key, key_len - 1, options)", "json_escape_string((&index), key, key_len - 1, options)", "json_escape_string((&key), key, key_len - 1, options)", "json_escape_string((&key_len), key, key_len - 1, options)", "json_escape_string((&myht), key, key_len - 1, options)", "json_escape_string((&need_comma), key, key_len - 1, options)", "json_escape_string((&options), key, key_len - 1, options)", "json_escape_string((&pos), key, key_len - 1, options)", "json_escape_string((&r), key, key_len - 1, options)", "json_escape_string((&tmp_ht), key, key_len - 1, options)", "json_escape_string((&val), key, key_len - 1, options)", "json_escape_string((buf), key, key_len - 1, options)", "json_escape_string(buf, (&buf), key_len - 1, options)", "json_escape_string(buf, (&data), key_len - 1, options)", "json_escape_string(buf, (&i), key_len - 1, options)", "json_escape_string(buf, (&index), key_len - 1, options)", "json_escape_string(buf, (&key), key_len - 1, options)", "json_escape_string(buf, (&key_len), key_len - 1, options)", "json_escape_string(buf, (&myht), key_len - 1, options)", "json_escape_string(buf, (&need_comma), key_len - 1, options)", "json_escape_string(buf, (&options), key_len - 1, options)", "json_escape_string(buf, (&pos), key_len - 1, options)", "json_escape_string(buf, (&r), key_len - 1, options)", "json_escape_string(buf, (&tmp_ht), key_len - 1, options)", "json_escape_string(buf, (&val), key_len - 1, options)", "json_escape_string(buf, (key), key_len - 1, options)", "json_escape_string(buf, key, (0 * i) - 1, options)", "json_escape_string(buf, key, (0 * index) - 1, options)", "json_escape_string(buf, key, (0 * key_len) - 1, options)", "json_escape_string(buf, key, (0 * need_comma) - 1, options)", "json_escape_string(buf, key, (0 * options) - 1, options)", "json_escape_string(buf, key, (0 * r) - 1, options)", "json_escape_string(buf, key, (buf != 0) - 1, options)", "json_escape_string(buf, key, (buf == 0) - 1, options)", "json_escape_string(buf, key, (data != 0) - 1, options)", "json_escape_string(buf, key, (data == 0) - 1, options)", "json_escape_string(buf, key, (i != 0) - 1, options)", "json_escape_string(buf, key, (i != index) - 1, options)", "json_escape_string(buf, key, (i != key_len) - 1, options)", "json_escape_string(buf, key, (i != need_comma) - 1, options)", "json_escape_string(buf, key, (i != r) - 1, options)", "json_escape_string(buf, key, (i * index) - 1, options)", "json_escape_string(buf, key, (i * key_len) - 1, options)", "json_escape_string(buf, key, (i * need_comma) - 1, options)", "json_escape_string(buf, key, (i * options) - 1, options)", "json_escape_string(buf, key, (i * r) - 1, options)", "json_escape_string(buf, key, (i + 0) - 1, options)", "json_escape_string(buf, key, (i + index) - 1, options)", "json_escape_string(buf, key, (i + key_len) - 1, options)", "json_escape_string(buf, key, (i + need_comma) - 1, options)", "json_escape_string(buf, key, (i + r) - 1, options)", "json_escape_string(buf, key, (i - 0) - 1, options)", "json_escape_string(buf, key, (i - index) - 1, options)", "json_escape_string(buf, key, (i - key_len) - 1, options)", "json_escape_string(buf, key, (i - need_comma) - 1, options)", "json_escape_string(buf, key, (i - r) - 1, options)", "json_escape_string(buf, key, (i == 0) - 1, options)", "json_escape_string(buf, key, (i == index) - 1, options)", "json_escape_string(buf, key, (i == key_len) - 1, options)", "json_escape_string(buf, key, (i == need_comma) - 1, options)", "json_escape_string(buf, key, (i == r) - 1, options)", "json_escape_string(buf, key, (index != 0) - 1, options)", "json_escape_string(buf, key, (index != key_len) - 1, options)", "json_escape_string(buf, key, (index != need_comma) - 1, options)", "json_escape_string(buf, key, (index * i) - 1, options)", "json_escape_string(buf, key, (index * key_len) - 1, options)", "json_escape_string(buf, key, (index * need_comma) - 1, options)", "json_escape_string(buf, key, (index * options) - 1, options)", "json_escape_string(buf, key, (index * r) - 1, options)", "json_escape_string(buf, key, (index + 0) - 1, options)", "json_escape_string(buf, key, (index + key_len) - 1, options)", "json_escape_string(buf, key, (index + need_comma) - 1, options)", "json_escape_string(buf, key, (index - 0) - 1, options)", "json_escape_string(buf, key, (index - key_len) - 1, options)", "json_escape_string(buf, key, (index - need_comma) - 1, options)", "json_escape_string(buf, key, (index == 0) - 1, options)", "json_escape_string(buf, key, (index == key_len) - 1, options)", "json_escape_string(buf, key, (index == need_comma) - 1, options)", "json_escape_string(buf, key, (key != 0) - 1, options)", "json_escape_string(buf, key, (key == 0) - 1, options)", "json_escape_string(buf, key, (key_len != 0) - 1, options)", "json_escape_string(buf, key, (key_len != need_comma) - 1, options)", "json_escape_string(buf, key, (key_len * i) - 1, options)", "json_escape_string(buf, key, (key_len * index) - 1, options)", "json_escape_string(buf, key, (key_len * need_comma) - 1, options)", "json_escape_string(buf, key, (key_len * options) - 1, options)", "json_escape_string(buf, key, (key_len * r) - 1, options)", "json_escape_string(buf, key, (key_len + 0) - 1, options)", "json_escape_string(buf, key, (key_len + need_comma) - 1, options)", "json_escape_string(buf, key, (key_len - 0) - 1, options)", "json_escape_string(buf, key, (key_len - need_comma) - 1, options)", "json_escape_string(buf, key, (key_len == 0) - 1, options)", "json_escape_string(buf, key, (key_len == need_comma) - 1, options)", "json_escape_string(buf, key, (key_len) - 1, options)", "json_escape_string(buf, key, (myht != 0) - 1, options)", "json_escape_string(buf, key, (myht != tmp_ht) - 1, options)", "json_escape_string(buf, key, (myht == 0) - 1, options)", "json_escape_string(buf, key, (myht == tmp_ht) - 1, options)", "json_escape_string(buf, key, (need_comma != 0) - 1, options)", "json_escape_string(buf, key, (need_comma * i) - 1, options)", "json_escape_string(buf, key, (need_comma * index) - 1, options)", "json_escape_string(buf, key, (need_comma * key_len) - 1, options)", "json_escape_string(buf, key, (need_comma * options) - 1, options)", "json_escape_string(buf, key, (need_comma * r) - 1, options)", "json_escape_string(buf, key, (need_comma + 0) - 1, options)", "json_escape_string(buf, key, (need_comma - 0) - 1, options)", "json_escape_string(buf, key, (need_comma == 0) - 1, options)", "json_escape_string(buf, key, (options != 0) - 1, options)", "json_escape_string(buf, key, (options != i) - 1, options)", "json_escape_string(buf, key, (options != index) - 1, options)", "json_escape_string(buf, key, (options != key_len) - 1, options)", "json_escape_string(buf, key, (options != need_comma) - 1, options)", "json_escape_string(buf, key, (options != r) - 1, options)", "json_escape_string(buf, key, (options * i) - 1, options)", "json_escape_string(buf, key, (options * index) - 1, options)", "json_escape_string(buf, key, (options * key_len) - 1, options)", "json_escape_string(buf, key, (options * need_comma) - 1, options)", "json_escape_string(buf, key, (options * r) - 1, options)", "json_escape_string(buf, key, (options + 0) - 1, options)", "json_escape_string(buf, key, (options + i) - 1, options)", "json_escape_string(buf, key, (options + index) - 1, options)", "json_escape_string(buf, key, (options + key_len) - 1, options)", "json_escape_string(buf, key, (options + need_comma) - 1, options)", "json_escape_string(buf, key, (options + r) - 1, options)", "json_escape_string(buf, key, (options - 0) - 1, options)", "json_escape_string(buf, key, (options - i) - 1, options)", "json_escape_string(buf, key, (options - index) - 1, options)", "json_escape_string(buf, key, (options - key_len) - 1, options)", "json_escape_string(buf, key, (options - need_comma) - 1, options)", "json_escape_string(buf, key, (options - r) - 1, options)", "json_escape_string(buf, key, (options == 0) - 1, options)", "json_escape_string(buf, key, (options == i) - 1, options)", "json_escape_string(buf, key, (options == index) - 1, options)", "json_escape_string(buf, key, (options == key_len) - 1, options)", "json_escape_string(buf, key, (options == need_comma) - 1, options)", "json_escape_string(buf, key, (options == r) - 1, options)", "json_escape_string(buf, key, (pos != 0) - 1, options)", "json_escape_string(buf, key, (pos == 0) - 1, options)", "json_escape_string(buf, key, (r != 0) - 1, options)", "json_escape_string(buf, key, (r != index) - 1, options)", "json_escape_string(buf, key, (r != key_len) - 1, options)", "json_escape_string(buf, key, (r != need_comma) - 1, options)", "json_escape_string(buf, key, (r * i) - 1, options)", "json_escape_string(buf, key, (r * index) - 1, options)", "json_escape_string(buf, key, (r * key_len) - 1, options)", "json_escape_string(buf, key, (r * need_comma) - 1, options)", "json_escape_string(buf, key, (r * options) - 1, options)", "json_escape_string(buf, key, (r + 0) - 1, options)", "json_escape_string(buf, key, (r + index) - 1, options)", "json_escape_string(buf, key, (r + key_len) - 1, options)", "json_escape_string(buf, key, (r + need_comma) - 1, options)", "json_escape_string(buf, key, (r - 0) - 1, options)", "json_escape_string(buf, key, (r - index) - 1, options)", "json_escape_string(buf, key, (r - key_len) - 1, options)", "json_escape_string(buf, key, (r - need_comma) - 1, options)", "json_escape_string(buf, key, (r == 0) - 1, options)", "json_escape_string(buf, key, (r == index) - 1, options)", "json_escape_string(buf, key, (r == key_len) - 1, options)", "json_escape_string(buf, key, (r == need_comma) - 1, options)", "json_escape_string(buf, key, (tmp_ht != 0) - 1, options)", "json_escape_string(buf, key, (tmp_ht == 0) - 1, options)", "json_escape_string(buf, key, (val != 0) - 1, options)", "json_escape_string(buf, key, (val != data) - 1, options)", "json_escape_string(buf, key, (val == 0) - 1, options)", "json_escape_string(buf, key, (val == data) - 1, options)", "json_escape_string(buf, key, key_len - (0 * i), options)", "json_escape_string(buf, key, key_len - (0 * index), options)", "json_escape_string(buf, key, key_len - (0 * key_len), options)", "json_escape_string(buf, key, key_len - (0 * need_comma), options)", "json_escape_string(buf, key, key_len - (0 * options), options)", "json_escape_string(buf, key, key_len - (0 * r), options)", "json_escape_string(buf, key, key_len - (0), options)", "json_escape_string(buf, key, key_len - (buf != 0), options)", "json_escape_string(buf, key, key_len - (buf == 0), options)", "json_escape_string(buf, key, key_len - (data != 0), options)", "json_escape_string(buf, key, key_len - (data == 0), options)", "json_escape_string(buf, key, key_len - (i != 0), options)", "json_escape_string(buf, key, key_len - (i != index), options)", "json_escape_string(buf, key, key_len - (i != key_len), options)", "json_escape_string(buf, key, key_len - (i != need_comma), options)", "json_escape_string(buf, key, key_len - (i != r), options)", "json_escape_string(buf, key, key_len - (i * index), options)", "json_escape_string(buf, key, key_len - (i * key_len), options)", "json_escape_string(buf, key, key_len - (i * need_comma), options)", "json_escape_string(buf, key, key_len - (i * options), options)", "json_escape_string(buf, key, key_len - (i * r), options)", "json_escape_string(buf, key, key_len - (i + 0), options)", "json_escape_string(buf, key, key_len - (i + index), options)", "json_escape_string(buf, key, key_len - (i + key_len), options)", "json_escape_string(buf, key, key_len - (i + need_comma), options)", "json_escape_string(buf, key, key_len - (i + r), options)", "json_escape_string(buf, key, key_len - (i - 0), options)", "json_escape_string(buf, key, key_len - (i - index), options)", "json_escape_string(buf, key, key_len - (i - key_len), options)", "json_escape_string(buf, key, key_len - (i - need_comma), options)", "json_escape_string(buf, key, key_len - (i - r), options)", "json_escape_string(buf, key, key_len - (i == 0), options)", "json_escape_string(buf, key, key_len - (i == index), options)", "json_escape_string(buf, key, key_len - (i == key_len), options)", "json_escape_string(buf, key, key_len - (i == need_comma), options)", "json_escape_string(buf, key, key_len - (i == r), options)", "json_escape_string(buf, key, key_len - (index != 0), options)", "json_escape_string(buf, key, key_len - (index != key_len), options)", "json_escape_string(buf, key, key_len - (index != need_comma), options)", "json_escape_string(buf, key, key_len - (index * i), options)", "json_escape_string(buf, key, key_len - (index * key_len), options)", "json_escape_string(buf, key, key_len - (index * need_comma), options)", "json_escape_string(buf, key, key_len - (index * options), options)", "json_escape_string(buf, key, key_len - (index * r), options)", "json_escape_string(buf, key, key_len - (index + 0), options)", "json_escape_string(buf, key, key_len - (index + key_len), options)", "json_escape_string(buf, key, key_len - (index + need_comma), options)", "json_escape_string(buf, key, key_len - (index - 0), options)", "json_escape_string(buf, key, key_len - (index - key_len), options)", "json_escape_string(buf, key, key_len - (index - need_comma), options)", "json_escape_string(buf, key, key_len - (index == 0), options)", "json_escape_string(buf, key, key_len - (index == key_len), options)", "json_escape_string(buf, key, key_len - (index == need_comma), options)", "json_escape_string(buf, key, key_len - (key != 0), options)", "json_escape_string(buf, key, key_len - (key == 0), options)", "json_escape_string(buf, key, key_len - (key_len != 0), options)", "json_escape_string(buf, key, key_len - (key_len != need_comma), options)", "json_escape_string(buf, key, key_len - (key_len * i), options)", "json_escape_string(buf, key, key_len - (key_len * index), options)", "json_escape_string(buf, key, key_len - (key_len * need_comma), options)", "json_escape_string(buf, key, key_len - (key_len * options), options)", "json_escape_string(buf, key, key_len - (key_len * r), options)", "json_escape_string(buf, key, key_len - (key_len + 0), options)", "json_escape_string(buf, key, key_len - (key_len + need_comma), options)", "json_escape_string(buf, key, key_len - (key_len - 0), options)", "json_escape_string(buf, key, key_len - (key_len - need_comma), options)", "json_escape_string(buf, key, key_len - (key_len == 0), options)", "json_escape_string(buf, key, key_len - (key_len == need_comma), options)", "json_escape_string(buf, key, key_len - (myht != 0), options)", "json_escape_string(buf, key, key_len - (myht != tmp_ht), options)", "json_escape_string(buf, key, key_len - (myht == 0), options)", "json_escape_string(buf, key, key_len - (myht == tmp_ht), options)", "json_escape_string(buf, key, key_len - (need_comma != 0), options)", "json_escape_string(buf, key, key_len - (need_comma * i), options)", "json_escape_string(buf, key, key_len - (need_comma * index), options)", "json_escape_string(buf, key, key_len - (need_comma * key_len), options)", "json_escape_string(buf, key, key_len - (need_comma * options), options)", "json_escape_string(buf, key, key_len - (need_comma * r), options)", "json_escape_string(buf, key, key_len - (need_comma + 0), options)", "json_escape_string(buf, key, key_len - (need_comma - 0), options)", "json_escape_string(buf, key, key_len - (need_comma == 0), options)", "json_escape_string(buf, key, key_len - (options != 0), options)", "json_escape_string(buf, key, key_len - (options != i), options)", "json_escape_string(buf, key, key_len - (options != index), options)", "json_escape_string(buf, key, key_len - (options != key_len), options)", "json_escape_string(buf, key, key_len - (options != need_comma), options)", "json_escape_string(buf, key, key_len - (options != r), options)", "json_escape_string(buf, key, key_len - (options * i), options)", "json_escape_string(buf, key, key_len - (options * index), options)", "json_escape_string(buf, key, key_len - (options * key_len), options)", "json_escape_string(buf, key, key_len - (options * need_comma), options)", "json_escape_string(buf, key, key_len - (options * r), options)", "json_escape_string(buf, key, key_len - (options + 0), options)", "json_escape_string(buf, key, key_len - (options + i), options)", "json_escape_string(buf, key, key_len - (options + index), options)", "json_escape_string(buf, key, key_len - (options + key_len), options)", "json_escape_string(buf, key, key_len - (options + need_comma), options)", "json_escape_string(buf, key, key_len - (options + r), options)", "json_escape_string(buf, key, key_len - (options - 0), options)", "json_escape_string(buf, key, key_len - (options - i), options)", "json_escape_string(buf, key, key_len - (options - index), options)", "json_escape_string(buf, key, key_len - (options - key_len), options)", "json_escape_string(buf, key, key_len - (options - need_comma), options)", "json_escape_string(buf, key, key_len - (options - r), options)", "json_escape_string(buf, key, key_len - (options == 0), options)", "json_escape_string(buf, key, key_len - (options == i), options)", "json_escape_string(buf, key, key_len - (options == index), options)", "json_escape_string(buf, key, key_len - (options == key_len), options)", "json_escape_string(buf, key, key_len - (options == need_comma), options)", "json_escape_string(buf, key, key_len - (options == r), options)", "json_escape_string(buf, key, key_len - (pos != 0), options)", "json_escape_string(buf, key, key_len - (pos == 0), options)", "json_escape_string(buf, key, key_len - (r != 0), options)", "json_escape_string(buf, key, key_len - (r != index), options)", "json_escape_string(buf, key, key_len - (r != key_len), options)", "json_escape_string(buf, key, key_len - (r != need_comma), options)", "json_escape_string(buf, key, key_len - (r * i), options)", "json_escape_string(buf, key, key_len - (r * index), options)", "json_escape_string(buf, key, key_len - (r * key_len), options)", "json_escape_string(buf, key, key_len - (r * need_comma), options)", "json_escape_string(buf, key, key_len - (r * options), options)", "json_escape_string(buf, key, key_len - (r + 0), options)", "json_escape_string(buf, key, key_len - (r + index), options)", "json_escape_string(buf, key, key_len - (r + key_len), options)", "json_escape_string(buf, key, key_len - (r + need_comma), options)", "json_escape_string(buf, key, key_len - (r - 0), options)", "json_escape_string(buf, key, key_len - (r - index), options)", "json_escape_string(buf, key, key_len - (r - key_len), options)", "json_escape_string(buf, key, key_len - (r - need_comma), options)", "json_escape_string(buf, key, key_len - (r == 0), options)", "json_escape_string(buf, key, key_len - (r == index), options)", "json_escape_string(buf, key, key_len - (r == key_len), options)", "json_escape_string(buf, key, key_len - (r == need_comma), options)", "json_escape_string(buf, key, key_len - (tmp_ht != 0), options)", "json_escape_string(buf, key, key_len - (tmp_ht == 0), options)", "json_escape_string(buf, key, key_len - (val != 0), options)", "json_escape_string(buf, key, key_len - (val != data), options)", "json_escape_string(buf, key, key_len - (val == 0), options)", "json_escape_string(buf, key, key_len - (val == data), options)", "json_escape_string(buf, key, key_len - 1, (0 * i))", "json_escape_string(buf, key, key_len - 1, (0 * index))", "json_escape_string(buf, key, key_len - 1, (0 * key_len))", "json_escape_string(buf, key, key_len - 1, (0 * need_comma))", "json_escape_string(buf, key, key_len - 1, (0 * options))", "json_escape_string(buf, key, key_len - 1, (0 * r))", "json_escape_string(buf, key, key_len - 1, (buf != 0))", "json_escape_string(buf, key, key_len - 1, (buf == 0))", "json_escape_string(buf, key, key_len - 1, (data != 0))", "json_escape_string(buf, key, key_len - 1, (data == 0))", "json_escape_string(buf, key, key_len - 1, (i != 0))", "json_escape_string(buf, key, key_len - 1, (i != index))", "json_escape_string(buf, key, key_len - 1, (i != key_len))", "json_escape_string(buf, key, key_len - 1, (i != need_comma))", "json_escape_string(buf, key, key_len - 1, (i != r))", "json_escape_string(buf, key, key_len - 1, (i * index))", "json_escape_string(buf, key, key_len - 1, (i * key_len))", "json_escape_string(buf, key, key_len - 1, (i * need_comma))", "json_escape_string(buf, key, key_len - 1, (i * options))", "json_escape_string(buf, key, key_len - 1, (i * r))", "json_escape_string(buf, key, key_len - 1, (i + 0))", "json_escape_string(buf, key, key_len - 1, (i + index))", "json_escape_string(buf, key, key_len - 1, (i + key_len))", "json_escape_string(buf, key, key_len - 1, (i + need_comma))", "json_escape_string(buf, key, key_len - 1, (i + r))", "json_escape_string(buf, key, key_len - 1, (i - 0))", "json_escape_string(buf, key, key_len - 1, (i - index))", "json_escape_string(buf, key, key_len - 1, (i - key_len))", "json_escape_string(buf, key, key_len - 1, (i - need_comma))", "json_escape_string(buf, key, key_len - 1, (i - r))", "json_escape_string(buf, key, key_len - 1, (i == 0))", "json_escape_string(buf, key, key_len - 1, (i == index))", "json_escape_string(buf, key, key_len - 1, (i == key_len))", "json_escape_string(buf, key, key_len - 1, (i == need_comma))", "json_escape_string(buf, key, key_len - 1, (i == r))", "json_escape_string(buf, key, key_len - 1, (i))", "json_escape_string(buf, key, key_len - 1, (index != 0))", "json_escape_string(buf, key, key_len - 1, (index != key_len))", "json_escape_string(buf, key, key_len - 1, (index != need_comma))", "json_escape_string(buf, key, key_len - 1, (index * i))", "json_escape_string(buf, key, key_len - 1, (index * key_len))", "json_escape_string(buf, key, key_len - 1, (index * need_comma))", "json_escape_string(buf, key, key_len - 1, (index * options))", "json_escape_string(buf, key, key_len - 1, (index * r))", "json_escape_string(buf, key, key_len - 1, (index + 0))", "json_escape_string(buf, key, key_len - 1, (index + key_len))", "json_escape_string(buf, key, key_len - 1, (index + need_comma))", "json_escape_string(buf, key, key_len - 1, (index - 0))", "json_escape_string(buf, key, key_len - 1, (index - key_len))", "json_escape_string(buf, key, key_len - 1, (index - need_comma))", "json_escape_string(buf, key, key_len - 1, (index == 0))", "json_escape_string(buf, key, key_len - 1, (index == key_len))", "json_escape_string(buf, key, key_len - 1, (index == need_comma))", "json_escape_string(buf, key, key_len - 1, (key != 0))", "json_escape_string(buf, key, key_len - 1, (key == 0))", "json_escape_string(buf, key, key_len - 1, (key_len != 0))", "json_escape_string(buf, key, key_len - 1, (key_len != need_comma))", "json_escape_string(buf, key, key_len - 1, (key_len * i))", "json_escape_string(buf, key, key_len - 1, (key_len * index))", "json_escape_string(buf, key, key_len - 1, (key_len * need_comma))", "json_escape_string(buf, key, key_len - 1, (key_len * options))", "json_escape_string(buf, key, key_len - 1, (key_len * r))", "json_escape_string(buf, key, key_len - 1, (key_len + 0))", "json_escape_string(buf, key, key_len - 1, (key_len + need_comma))", "json_escape_string(buf, key, key_len - 1, (key_len - 0))", "json_escape_string(buf, key, key_len - 1, (key_len - need_comma))", "json_escape_string(buf, key, key_len - 1, (key_len == 0))", "json_escape_string(buf, key, key_len - 1, (key_len == need_comma))", "json_escape_string(buf, key, key_len - 1, (myht != 0))", "json_escape_string(buf, key, key_len - 1, (myht != tmp_ht))", "json_escape_string(buf, key, key_len - 1, (myht == 0))", "json_escape_string(buf, key, key_len - 1, (myht == tmp_ht))", "json_escape_string(buf, key, key_len - 1, (need_comma != 0))", "json_escape_string(buf, key, key_len - 1, (need_comma * i))", "json_escape_string(buf, key, key_len - 1, (need_comma * index))", "json_escape_string(buf, key, key_len - 1, (need_comma * key_len))", "json_escape_string(buf, key, key_len - 1, (need_comma * options))", "json_escape_string(buf, key, key_len - 1, (need_comma * r))", "json_escape_string(buf, key, key_len - 1, (need_comma + 0))", "json_escape_string(buf, key, key_len - 1, (need_comma - 0))", "json_escape_string(buf, key, key_len - 1, (need_comma == 0))", "json_escape_string(buf, key, key_len - 1, (need_comma))", "json_escape_string(buf, key, key_len - 1, (options != 0))", "json_escape_string(buf, key, key_len - 1, (options != i))", "json_escape_string(buf, key, key_len - 1, (options != index))", "json_escape_string(buf, key, key_len - 1, (options != key_len))", "json_escape_string(buf, key, key_len - 1, (options != need_comma))", "json_escape_string(buf, key, key_len - 1, (options != r))", "json_escape_string(buf, key, key_len - 1, (options * i))", "json_escape_string(buf, key, key_len - 1, (options * index))", "json_escape_string(buf, key, key_len - 1, (options * key_len))", "json_escape_string(buf, key, key_len - 1, (options * need_comma))", "json_escape_string(buf, key, key_len - 1, (options * r))", "json_escape_string(buf, key, key_len - 1, (options + 0))", "json_escape_string(buf, key, key_len - 1, (options + i))", "json_escape_string(buf, key, key_len - 1, (options + index))", "json_escape_string(buf, key, key_len - 1, (options + key_len))", "json_escape_string(buf, key, key_len - 1, (options + need_comma))", "json_escape_string(buf, key, key_len - 1, (options + r))", "json_escape_string(buf, key, key_len - 1, (options - 0))", "json_escape_string(buf, key, key_len - 1, (options - i))", "json_escape_string(buf, key, key_len - 1, (options - index))", "json_escape_string(buf, key, key_len - 1, (options - key_len))", "json_escape_string(buf, key, key_len - 1, (options - need_comma))", "json_escape_string(buf, key, key_len - 1, (options - r))", "json_escape_string(buf, key, key_len - 1, (options == 0))", "json_escape_string(buf, key, key_len - 1, (options == i))", "json_escape_string(buf, key, key_len - 1, (options == index))", "json_escape_string(buf, key, key_len - 1, (options == key_len))", "json_escape_string(buf, key, key_len - 1, (options == need_comma))", "json_escape_string(buf, key, key_len - 1, (options == r))", "json_escape_string(buf, key, key_len - 1, (options))", "json_escape_string(buf, key, key_len - 1, (pos != 0))", "json_escape_string(buf, key, key_len - 1, (pos == 0))", "json_escape_string(buf, key, key_len - 1, (r != 0))", "json_escape_string(buf, key, key_len - 1, (r != index))", "json_escape_string(buf, key, key_len - 1, (r != key_len))", "json_escape_string(buf, key, key_len - 1, (r != need_comma))", "json_escape_string(buf, key, key_len - 1, (r * i))", "json_escape_string(buf, key, key_len - 1, (r * index))", "json_escape_string(buf, key, key_len - 1, (r * key_len))", "json_escape_string(buf, key, key_len - 1, (r * need_comma))", "json_escape_string(buf, key, key_len - 1, (r * options))", "json_escape_string(buf, key, key_len - 1, (r + 0))", "json_escape_string(buf, key, key_len - 1, (r + index))", "json_escape_string(buf, key, key_len - 1, (r + key_len))", "json_escape_string(buf, key, key_len - 1, (r + need_comma))", "json_escape_string(buf, key, key_len - 1, (r - 0))", "json_escape_string(buf, key, key_len - 1, (r - index))", "json_escape_string(buf, key, key_len - 1, (r - key_len))", "json_escape_string(buf, key, key_len - 1, (r - need_comma))", "json_escape_string(buf, key, key_len - 1, (r == 0))", "json_escape_string(buf, key, key_len - 1, (r == index))", "json_escape_string(buf, key, key_len - 1, (r == key_len))", "json_escape_string(buf, key, key_len - 1, (r == need_comma))", "json_escape_string(buf, key, key_len - 1, (r))", "json_escape_string(buf, key, key_len - 1, (tmp_ht != 0))", "json_escape_string(buf, key, key_len - 1, (tmp_ht == 0))", "json_escape_string(buf, key, key_len - 1, (val != 0))", "json_escape_string(buf, key, key_len - 1, (val != data))", "json_escape_string(buf, key, key_len - 1, (val == 0))", "json_escape_string(buf, key, key_len - 1, (val == data))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.289407108919637, -9.6297902205196362, -10.072842476019636, -8.698028035519636, -11.245866475519636, -9.9614685055196368, -10.926391956019636, -11.080628576019636, -10.240514065519637, -10.240514065519637, -9.9267163655196367, -10.998402165519636, -10.998402165519636]
								}, {
									"case":	2,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	3,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	4,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	5,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	6,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	7,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	8,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	9,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	10,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	11,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	12,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	13,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	14,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	15,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	16,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	17,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	18,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	19,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	20,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	21,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	22,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	23,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	24,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	25,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	26,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	27,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	28,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	29,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	30,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	31,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	32,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	33,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	34,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	35,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	36,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	37,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	38,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	39,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	40,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	41,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	42,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	43,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	44,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	45,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	46,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	47,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	48,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	49,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	50,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	51,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	52,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	53,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	54,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	55,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	56,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	57,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	58,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	59,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	60,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	61,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	62,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	63,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	64,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	65,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	66,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	67,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	68,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	69,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	70,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	71,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	72,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	73,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	74,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	75,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	76,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	77,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	78,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	79,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	80,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	81,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	82,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	83,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	84,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	85,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	86,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	87,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	88,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	89,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	90,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	91,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	92,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	93,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	94,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	95,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	96,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	97,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	98,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	99,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	100,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	101,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	102,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	103,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	104,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	105,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	106,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	107,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	108,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	109,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	110,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	111,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	112,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	113,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	114,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	115,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	116,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	117,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	118,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	119,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	120,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	121,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	122,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	123,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	124,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	125,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	126,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	127,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	128,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	129,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	130,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	131,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	132,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	133,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	134,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	135,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	136,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	137,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	138,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	139,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	140,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	141,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	142,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	143,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	144,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	145,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	146,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	147,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	148,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	149,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	150,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	151,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	152,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	153,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	154,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	155,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	156,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	157,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	158,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	159,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	160,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	161,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	162,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	163,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	164,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	165,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	166,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	167,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	168,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	169,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	170,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	171,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	172,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	173,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	174,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	175,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	176,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	177,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	178,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	179,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	180,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	181,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	182,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	183,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	184,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	185,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	186,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	187,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	188,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	189,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	190,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	191,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	192,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	193,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	194,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	195,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	196,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	197,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	198,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	199,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	200,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	201,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	202,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	203,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	204,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	205,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	206,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	207,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	208,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	209,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	210,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	211,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	212,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	213,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	214,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	215,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	216,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	217,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	218,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	219,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	220,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	221,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	222,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	223,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	224,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	225,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	226,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	227,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	228,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	229,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	230,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	231,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	232,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	233,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	234,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	235,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	236,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	237,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	238,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	239,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	240,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	241,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	242,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	243,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	244,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	245,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	246,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	247,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	248,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	249,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	250,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	251,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	252,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	253,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	254,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	255,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	256,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	257,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	258,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	259,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	260,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	261,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	262,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	263,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	264,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	265,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	266,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	267,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	268,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	269,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	270,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	271,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	272,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	273,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	274,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	275,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	276,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	277,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	278,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	279,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	280,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	281,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	282,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	283,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	284,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	285,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	286,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	287,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	288,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	289,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	290,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	291,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	292,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	293,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	294,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	295,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	296,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	297,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	298,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	299,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	300,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	301,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	302,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	303,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	304,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	305,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	306,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	307,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	308,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	309,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	310,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	311,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	312,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	313,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	314,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	315,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	316,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	317,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	318,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	319,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	320,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	321,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	322,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	323,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	324,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	325,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	326,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	327,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	328,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	329,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	330,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	331,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	332,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	333,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	334,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	335,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	336,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	337,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	338,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	339,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	340,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	341,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	342,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	343,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	344,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	345,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	346,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	347,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	348,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	349,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	350,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	351,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	352,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	353,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	354,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	355,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	356,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	357,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	358,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	359,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	360,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	361,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	362,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	363,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	364,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	365,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	366,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	367,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	368,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	369,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	370,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	371,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	372,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	373,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	374,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	375,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	376,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	377,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	378,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	379,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	380,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	381,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	382,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	383,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	384,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	385,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	386,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	387,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	388,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	389,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	390,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	391,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	392,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	393,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	394,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	395,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	396,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	397,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	398,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	399,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	400,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	401,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	402,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	403,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	404,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	405,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	406,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	407,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	408,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	409,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	410,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	411,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	412,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	413,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	414,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	415,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	416,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	417,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	418,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	419,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	420,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	421,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	422,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	423,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	424,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	425,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	426,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	427,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	428,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	429,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	430,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	431,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	432,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	433,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	434,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	435,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	436,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	437,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	438,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	439,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	440,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	441,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	442,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	443,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	444,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	445,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	446,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	447,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	448,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	449,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	450,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	451,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	452,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	453,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	454,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	455,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	456,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	457,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	458,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	459,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	460,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	461,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	462,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	463,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	464,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	465,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	466,
									"scores":	[-8.0535780055196362]
								}]
						}]
				}, {
					"line":	300,
					"switches":	[{
							"switch":	33,
							"types":	[[], [], [], [], [238, 239], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], [], [], [], [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237], [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], [], [], [], [], [], []],
							"begin_line":	301,
							"begin_column":	5,
							"end_line":	301,
							"end_column":	5,
							"patch_codes":	["memset(&(**data).is_ref__gc, 0, sizeof (*(&(**data).is_ref__gc)))", "memset(&(**data).refcount__gc, 0, sizeof (*(&(**data).refcount__gc)))", "memset(&(**data).type, 0, sizeof (*(&(**data).type)))", "memset(&(**data).value, 0, sizeof (*(&(**data).value)))", "memset(&(**data).value.dval, 0, sizeof (*(&(**data).value.dval)))", "memset(&(**data).value.ht, 0, sizeof (*(&(**data).value.ht)))", "memset(&(**data).value.lval, 0, sizeof (*(&(**data).value.lval)))", "memset(&(**data).value.obj, 0, sizeof (*(&(**data).value.obj)))", "memset(&(**data).value.obj.handle, 0, sizeof (*(&(**data).value.obj.handle)))", "memset(&(**data).value.obj.handlers, 0, sizeof (*(&(**data).value.obj.handlers)))", "memset(&(**data).value.obj.handlers->add_ref, 0, sizeof (*(&(**data).value.obj.handlers->add_ref)))", "memset(&(**data).value.obj.handlers->call_method, 0, sizeof (*(&(**data).value.obj.handlers->call_method)))", "memset(&(**data).value.obj.handlers->cast_object, 0, sizeof (*(&(**data).value.obj.handlers->cast_object)))", "memset(&(**data).value.obj.handlers->clone_obj, 0, sizeof (*(&(**data).value.obj.handlers->clone_obj)))", "memset(&(**data).value.obj.handlers->compare_objects, 0, sizeof (*(&(**data).value.obj.handlers->compare_objects)))", "memset(&(**data).value.obj.handlers->count_elements, 0, sizeof (*(&(**data).value.obj.handlers->count_elements)))", "memset(&(**data).value.obj.handlers->del_ref, 0, sizeof (*(&(**data).value.obj.handlers->del_ref)))", "memset(&(**data).value.obj.handlers->get, 0, sizeof (*(&(**data).value.obj.handlers->get)))", "memset(&(**data).value.obj.handlers->get_class_entry, 0, sizeof (*(&(**data).value.obj.handlers->get_class_entry)))", "memset(&(**data).value.obj.handlers->get_class_name, 0, sizeof (*(&(**data).value.obj.handlers->get_class_name)))", "memset(&(**data).value.obj.handlers->get_closure, 0, sizeof (*(&(**data).value.obj.handlers->get_closure)))", "memset(&(**data).value.obj.handlers->get_constructor, 0, sizeof (*(&(**data).value.obj.handlers->get_constructor)))", "memset(&(**data).value.obj.handlers->get_debug_info, 0, sizeof (*(&(**data).value.obj.handlers->get_debug_info)))", "memset(&(**data).value.obj.handlers->get_method, 0, sizeof (*(&(**data).value.obj.handlers->get_method)))", "memset(&(**data).value.obj.handlers->get_properties, 0, sizeof (*(&(**data).value.obj.handlers->get_properties)))", "memset(&(**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(**data).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(**data).value.obj.handlers->has_dimension, 0, sizeof (*(&(**data).value.obj.handlers->has_dimension)))", "memset(&(**data).value.obj.handlers->has_property, 0, sizeof (*(&(**data).value.obj.handlers->has_property)))", "memset(&(**data).value.obj.handlers->read_dimension, 0, sizeof (*(&(**data).value.obj.handlers->read_dimension)))", "memset(&(**data).value.obj.handlers->read_property, 0, sizeof (*(&(**data).value.obj.handlers->read_property)))", "memset(&(**data).value.obj.handlers->set, 0, sizeof (*(&(**data).value.obj.handlers->set)))", "memset(&(**data).value.obj.handlers->unset_dimension, 0, sizeof (*(&(**data).value.obj.handlers->unset_dimension)))", "memset(&(**data).value.obj.handlers->unset_property, 0, sizeof (*(&(**data).value.obj.handlers->unset_property)))", "memset(&(**data).value.obj.handlers->write_dimension, 0, sizeof (*(&(**data).value.obj.handlers->write_dimension)))", "memset(&(**data).value.obj.handlers->write_property, 0, sizeof (*(&(**data).value.obj.handlers->write_property)))", "memset(&(**data).value.str, 0, sizeof (*(&(**data).value.str)))", "memset(&(**val).is_ref__gc, 0, sizeof (*(&(**val).is_ref__gc)))", "memset(&(**val).refcount__gc, 0, sizeof (*(&(**val).refcount__gc)))", "memset(&(**val).type, 0, sizeof (*(&(**val).type)))", "memset(&(**val).value, 0, sizeof (*(&(**val).value)))", "memset(&json_globals.encoder_depth, 0, sizeof (*(&json_globals.encoder_depth)))", "memset(&json_globals.error_code, 0, sizeof (*(&json_globals.error_code)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((**data).value.ht, 0, sizeof (*((**data).value.ht)))", "memset((**data).value.obj.handlers, 0, sizeof (*((**data).value.obj.handlers)))", "memset((**data).value.obj.handlers->add_ref, 0, sizeof (*((**data).value.obj.handlers->add_ref)))", "memset((**data).value.obj.handlers->call_method, 0, sizeof (*((**data).value.obj.handlers->call_method)))", "memset((**data).value.obj.handlers->cast_object, 0, sizeof (*((**data).value.obj.handlers->cast_object)))", "memset((**data).value.obj.handlers->clone_obj, 0, sizeof (*((**data).value.obj.handlers->clone_obj)))", "memset((**data).value.obj.handlers->compare_objects, 0, sizeof (*((**data).value.obj.handlers->compare_objects)))", "memset((**data).value.obj.handlers->count_elements, 0, sizeof (*((**data).value.obj.handlers->count_elements)))", "memset((**data).value.obj.handlers->del_ref, 0, sizeof (*((**data).value.obj.handlers->del_ref)))", "memset((**data).value.obj.handlers->get, 0, sizeof (*((**data).value.obj.handlers->get)))", "memset((**data).value.obj.handlers->get_class_entry, 0, sizeof (*((**data).value.obj.handlers->get_class_entry)))", "memset((**data).value.obj.handlers->get_class_name, 0, sizeof (*((**data).value.obj.handlers->get_class_name)))", "memset((**data).value.obj.handlers->get_closure, 0, sizeof (*((**data).value.obj.handlers->get_closure)))", "memset((**data).value.obj.handlers->get_constructor, 0, sizeof (*((**data).value.obj.handlers->get_constructor)))", "memset((**data).value.obj.handlers->get_debug_info, 0, sizeof (*((**data).value.obj.handlers->get_debug_info)))", "memset((**data).value.obj.handlers->get_method, 0, sizeof (*((**data).value.obj.handlers->get_method)))", "memset((**data).value.obj.handlers->get_properties, 0, sizeof (*((**data).value.obj.handlers->get_properties)))", "memset((**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((**data).value.obj.handlers->get_property_ptr_ptr)))", "memset((**data).value.obj.handlers->has_dimension, 0, sizeof (*((**data).value.obj.handlers->has_dimension)))", "memset((**data).value.obj.handlers->has_property, 0, sizeof (*((**data).value.obj.handlers->has_property)))", "memset((**data).value.obj.handlers->read_dimension, 0, sizeof (*((**data).value.obj.handlers->read_dimension)))", "memset((**data).value.obj.handlers->read_property, 0, sizeof (*((**data).value.obj.handlers->read_property)))", "memset((**data).value.obj.handlers->set, 0, sizeof (*((**data).value.obj.handlers->set)))", "memset((**data).value.obj.handlers->unset_dimension, 0, sizeof (*((**data).value.obj.handlers->unset_dimension)))", "memset((**data).value.obj.handlers->unset_property, 0, sizeof (*((**data).value.obj.handlers->unset_property)))", "memset((**data).value.obj.handlers->write_dimension, 0, sizeof (*((**data).value.obj.handlers->write_dimension)))", "memset((**data).value.obj.handlers->write_property, 0, sizeof (*((**data).value.obj.handlers->write_property)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (i)", "(json_globals.error_code) = (need_comma)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (r)", "(key)++", "(myht)->nApplyCount++", "(myht)->nApplyCount--", "(tmp_ht)->nApplyCount++", "(tmp_ht)->nApplyCount--", "_efree(((key)))", "i = (0)", "i = (1)", "i = (10)", "i = (128)", "i = (16)", "i = (2)", "i = (3)", "i = (32)", "i = (4)", "i = (5)", "i = (78)", "i = (i)", "i = (myht) ? zend_hash_num_elements(myht) : 0", "i = (need_comma)", "i = (options)", "i = (r)", "i = (tmp_ht) ? zend_hash_num_elements(myht) : 0", "i = myht ? zend_hash_num_elements((myht)) : 0", "i = myht ? zend_hash_num_elements((tmp_ht)) : 0", "i = zend_hash_get_current_key_ex((myht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex((tmp_ht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &(key), &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &(pos))", "json_escape_string((buf), key, key_len - 1, options)", "json_escape_string(buf, (key), key_len - 1, options)", "json_pretty_print_char((buf), options, ' ')", "json_pretty_print_char((buf), options, '\\n')", "json_pretty_print_indent((buf), options)", "myht = ((**(data))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(data)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**(val))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(val)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(data)))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(val)))", "myht = ((**val).type == 4 ? (**(data)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**(val)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(data)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(val)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(data)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(val)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "myht = (myht)", "myht = (tmp_ht)", "need_comma = (0)", "need_comma = (1)", "need_comma = (10)", "need_comma = (128)", "need_comma = (16)", "need_comma = (2)", "need_comma = (3)", "need_comma = (32)", "need_comma = (4)", "need_comma = (5)", "need_comma = (78)", "need_comma = (i)", "need_comma = (need_comma)", "need_comma = (options)", "need_comma = (r)", "php_json_encode((buf), *data, options)", "php_json_encode(buf, *(data), options)", "php_json_encode(buf, *(val), options)", "r = (0)", "r = (1)", "r = (10)", "r = (128)", "r = (16)", "r = (2)", "r = (3)", "r = (32)", "r = (4)", "r = (5)", "r = (78)", "r = (i)", "r = (need_comma)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((data))", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((val))", "r = (options)", "r = (r)", "tmp_ht = ((**(data)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**(val)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(data)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(val)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(data)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(val)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(data)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(val)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "tmp_ht = (myht)", "tmp_ht = (tmp_ht)", "zend_hash_internal_pointer_reset_ex((myht), &pos)", "zend_hash_internal_pointer_reset_ex((tmp_ht), &pos)", "zend_hash_internal_pointer_reset_ex(myht, &(pos))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "exit(1)", "i = myht ? zend_hash_num_elements(myht) : 0", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &pos)", "json_escape_string(buf, key, key_len - 1, options)", "json_pretty_print_char(buf, options, ' ')", "json_pretty_print_char(buf, options, '\\n')", "json_pretty_print_indent(buf, options)", "myht = ((**val)).value.obj.handlers->get_properties(&(**val))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "need_comma = 1", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "php_json_encode(buf, *data, options)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type(val)", "r = 1", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht->nApplyCount++", "tmp_ht->nApplyCount--", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_internal_pointer_reset_ex(myht, &pos)", "if (__is_neg(\"\", \"L301\", 13, &(buf), sizeof (buf), &(options), sizeof (options), &(key), sizeof (key), &(key_len), sizeof (key_len), &(data), sizeof (data), &(need_comma), sizeof (need_comma), &(tmp_ht), sizeof (tmp_ht), &(index), sizeof (index), &(val), sizeof (val), &(i), sizeof (i), &(r), sizeof (r), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    break;\n", "if (__is_neg(\"\", \"L301\", 13, &(buf), sizeof (buf), &(options), sizeof (options), &(key), sizeof (key), &(key_len), sizeof (key_len), &(data), sizeof (data), &(need_comma), sizeof (need_comma), &(tmp_ht), sizeof (tmp_ht), &(index), sizeof (index), &(val), sizeof (val), &(i), sizeof (i), &(r), sizeof (r), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	2,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	3,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	4,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	5,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	6,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	7,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	8,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	9,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	10,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	11,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	12,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	13,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	14,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	15,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	16,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	17,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	18,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	19,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	20,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	21,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	22,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	23,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	24,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	25,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	26,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	27,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	28,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	29,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	30,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	31,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	32,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	33,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	34,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	35,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	36,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	37,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	38,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	39,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	40,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	41,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	42,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	43,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	44,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	45,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	46,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	47,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	48,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	49,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	50,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	51,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	52,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	53,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	54,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	55,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	56,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	57,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	58,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	59,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	60,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	61,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	62,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	63,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	64,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	65,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	66,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	67,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	68,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	69,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	70,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	71,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	72,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	73,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	74,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	75,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	76,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	77,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	78,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	79,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	80,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	81,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	82,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	83,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	84,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	85,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	86,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	87,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	88,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	89,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	90,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	91,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	92,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	93,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	94,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	95,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	96,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	97,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	98,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	99,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	100,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	101,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	102,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	103,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	104,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	105,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	106,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	107,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	108,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	109,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	110,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	111,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	112,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	113,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	114,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	115,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	116,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	117,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	118,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	119,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	120,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	121,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	122,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	123,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	124,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	125,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	126,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	127,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	128,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	129,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	130,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	131,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	132,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	133,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	134,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	135,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	136,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	137,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	138,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	139,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	140,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	141,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	142,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	143,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	144,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	145,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	146,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	147,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	148,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	149,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	150,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	151,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	152,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	153,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	154,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	155,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	156,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	157,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	158,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	159,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	160,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	161,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	162,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	163,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	164,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	165,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	166,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	167,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	168,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	169,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	170,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	171,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	172,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	173,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	174,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	175,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	176,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	177,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	178,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	179,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	180,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	181,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	182,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	183,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	184,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	185,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	186,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	187,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	188,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	189,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	190,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	191,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	192,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	193,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	194,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	195,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	196,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	197,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	198,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	199,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	200,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	201,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	202,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	203,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	204,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	205,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	206,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	207,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	208,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	209,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	210,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	211,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	212,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	213,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	214,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	215,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	216,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	217,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	218,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	219,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	220,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	221,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	222,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	223,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	224,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	225,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	226,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	227,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	228,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	229,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	230,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	231,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	232,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	233,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	234,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	235,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	236,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	237,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	238,
									"scores":	[-11.615729076667078, -11.906710573967079, -12.192401811967077, -11.732033111967077, -13.058540557967078, -10.453155275967077, -11.949852354767078, -11.961398614967077, -12.209388131967078, -11.961398614967077, -11.703813440967076, -12.207437528767077, -12.207437528767077]
								}, {
									"case":	239,
									"scores":	[-11.615729076667078, -11.906710573967079, -12.192401811967077, -11.732033111967077, -13.058540557967078, -10.453155275967077, -11.949852354767078, -11.961398614967077, -12.209388131967078, -11.961398614967077, -11.703813440967076, -12.207437528767077, -12.207437528767077]
								}]
						}, {
							"switch":	34,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	301,
							"begin_column":	7,
							"end_line":	301,
							"end_column":	33,
							"patch_codes":	["if (!__is_neg(\"\", \"L301\", 13, &(buf), sizeof (buf), &(options), sizeof (options), &(key), sizeof (key), &(key_len), sizeof (key_len), &(data), sizeof (data), &(need_comma), sizeof (need_comma), &(tmp_ht), sizeof (tmp_ht), &(index), sizeof (index), &(val), sizeof (val), &(i), sizeof (i), &(r), sizeof (r), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n    } while (0);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.80455830906708, -9.56298870856708, -10.731955399567077, -10.281137023567076, -11.179064963567077, -9.89466699356708, -10.617802953567077, -10.173712553567078, -10.937323353567077, -10.173712553567078, -9.85991485356708, -10.931600653567077, -10.931600653567077]
								}]
						}]
				}, {
					"line":	302,
					"switches":	[{
							"switch":	35,
							"types":	[[], [], [], [], [238, 239], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], [], [], [], [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237], [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], [], [], [], [], [], []],
							"begin_line":	303,
							"begin_column":	5,
							"end_line":	303,
							"end_column":	5,
							"patch_codes":	["memset(&(**data).is_ref__gc, 0, sizeof (*(&(**data).is_ref__gc)))", "memset(&(**data).refcount__gc, 0, sizeof (*(&(**data).refcount__gc)))", "memset(&(**data).type, 0, sizeof (*(&(**data).type)))", "memset(&(**data).value, 0, sizeof (*(&(**data).value)))", "memset(&(**data).value.dval, 0, sizeof (*(&(**data).value.dval)))", "memset(&(**data).value.ht, 0, sizeof (*(&(**data).value.ht)))", "memset(&(**data).value.lval, 0, sizeof (*(&(**data).value.lval)))", "memset(&(**data).value.obj, 0, sizeof (*(&(**data).value.obj)))", "memset(&(**data).value.obj.handle, 0, sizeof (*(&(**data).value.obj.handle)))", "memset(&(**data).value.obj.handlers, 0, sizeof (*(&(**data).value.obj.handlers)))", "memset(&(**data).value.obj.handlers->add_ref, 0, sizeof (*(&(**data).value.obj.handlers->add_ref)))", "memset(&(**data).value.obj.handlers->call_method, 0, sizeof (*(&(**data).value.obj.handlers->call_method)))", "memset(&(**data).value.obj.handlers->cast_object, 0, sizeof (*(&(**data).value.obj.handlers->cast_object)))", "memset(&(**data).value.obj.handlers->clone_obj, 0, sizeof (*(&(**data).value.obj.handlers->clone_obj)))", "memset(&(**data).value.obj.handlers->compare_objects, 0, sizeof (*(&(**data).value.obj.handlers->compare_objects)))", "memset(&(**data).value.obj.handlers->count_elements, 0, sizeof (*(&(**data).value.obj.handlers->count_elements)))", "memset(&(**data).value.obj.handlers->del_ref, 0, sizeof (*(&(**data).value.obj.handlers->del_ref)))", "memset(&(**data).value.obj.handlers->get, 0, sizeof (*(&(**data).value.obj.handlers->get)))", "memset(&(**data).value.obj.handlers->get_class_entry, 0, sizeof (*(&(**data).value.obj.handlers->get_class_entry)))", "memset(&(**data).value.obj.handlers->get_class_name, 0, sizeof (*(&(**data).value.obj.handlers->get_class_name)))", "memset(&(**data).value.obj.handlers->get_closure, 0, sizeof (*(&(**data).value.obj.handlers->get_closure)))", "memset(&(**data).value.obj.handlers->get_constructor, 0, sizeof (*(&(**data).value.obj.handlers->get_constructor)))", "memset(&(**data).value.obj.handlers->get_debug_info, 0, sizeof (*(&(**data).value.obj.handlers->get_debug_info)))", "memset(&(**data).value.obj.handlers->get_method, 0, sizeof (*(&(**data).value.obj.handlers->get_method)))", "memset(&(**data).value.obj.handlers->get_properties, 0, sizeof (*(&(**data).value.obj.handlers->get_properties)))", "memset(&(**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(**data).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(**data).value.obj.handlers->has_dimension, 0, sizeof (*(&(**data).value.obj.handlers->has_dimension)))", "memset(&(**data).value.obj.handlers->has_property, 0, sizeof (*(&(**data).value.obj.handlers->has_property)))", "memset(&(**data).value.obj.handlers->read_dimension, 0, sizeof (*(&(**data).value.obj.handlers->read_dimension)))", "memset(&(**data).value.obj.handlers->read_property, 0, sizeof (*(&(**data).value.obj.handlers->read_property)))", "memset(&(**data).value.obj.handlers->set, 0, sizeof (*(&(**data).value.obj.handlers->set)))", "memset(&(**data).value.obj.handlers->unset_dimension, 0, sizeof (*(&(**data).value.obj.handlers->unset_dimension)))", "memset(&(**data).value.obj.handlers->unset_property, 0, sizeof (*(&(**data).value.obj.handlers->unset_property)))", "memset(&(**data).value.obj.handlers->write_dimension, 0, sizeof (*(&(**data).value.obj.handlers->write_dimension)))", "memset(&(**data).value.obj.handlers->write_property, 0, sizeof (*(&(**data).value.obj.handlers->write_property)))", "memset(&(**data).value.str, 0, sizeof (*(&(**data).value.str)))", "memset(&(**val).is_ref__gc, 0, sizeof (*(&(**val).is_ref__gc)))", "memset(&(**val).refcount__gc, 0, sizeof (*(&(**val).refcount__gc)))", "memset(&(**val).type, 0, sizeof (*(&(**val).type)))", "memset(&(**val).value, 0, sizeof (*(&(**val).value)))", "memset(&json_globals.encoder_depth, 0, sizeof (*(&json_globals.encoder_depth)))", "memset(&json_globals.error_code, 0, sizeof (*(&json_globals.error_code)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((**data).value.ht, 0, sizeof (*((**data).value.ht)))", "memset((**data).value.obj.handlers, 0, sizeof (*((**data).value.obj.handlers)))", "memset((**data).value.obj.handlers->add_ref, 0, sizeof (*((**data).value.obj.handlers->add_ref)))", "memset((**data).value.obj.handlers->call_method, 0, sizeof (*((**data).value.obj.handlers->call_method)))", "memset((**data).value.obj.handlers->cast_object, 0, sizeof (*((**data).value.obj.handlers->cast_object)))", "memset((**data).value.obj.handlers->clone_obj, 0, sizeof (*((**data).value.obj.handlers->clone_obj)))", "memset((**data).value.obj.handlers->compare_objects, 0, sizeof (*((**data).value.obj.handlers->compare_objects)))", "memset((**data).value.obj.handlers->count_elements, 0, sizeof (*((**data).value.obj.handlers->count_elements)))", "memset((**data).value.obj.handlers->del_ref, 0, sizeof (*((**data).value.obj.handlers->del_ref)))", "memset((**data).value.obj.handlers->get, 0, sizeof (*((**data).value.obj.handlers->get)))", "memset((**data).value.obj.handlers->get_class_entry, 0, sizeof (*((**data).value.obj.handlers->get_class_entry)))", "memset((**data).value.obj.handlers->get_class_name, 0, sizeof (*((**data).value.obj.handlers->get_class_name)))", "memset((**data).value.obj.handlers->get_closure, 0, sizeof (*((**data).value.obj.handlers->get_closure)))", "memset((**data).value.obj.handlers->get_constructor, 0, sizeof (*((**data).value.obj.handlers->get_constructor)))", "memset((**data).value.obj.handlers->get_debug_info, 0, sizeof (*((**data).value.obj.handlers->get_debug_info)))", "memset((**data).value.obj.handlers->get_method, 0, sizeof (*((**data).value.obj.handlers->get_method)))", "memset((**data).value.obj.handlers->get_properties, 0, sizeof (*((**data).value.obj.handlers->get_properties)))", "memset((**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((**data).value.obj.handlers->get_property_ptr_ptr)))", "memset((**data).value.obj.handlers->has_dimension, 0, sizeof (*((**data).value.obj.handlers->has_dimension)))", "memset((**data).value.obj.handlers->has_property, 0, sizeof (*((**data).value.obj.handlers->has_property)))", "memset((**data).value.obj.handlers->read_dimension, 0, sizeof (*((**data).value.obj.handlers->read_dimension)))", "memset((**data).value.obj.handlers->read_property, 0, sizeof (*((**data).value.obj.handlers->read_property)))", "memset((**data).value.obj.handlers->set, 0, sizeof (*((**data).value.obj.handlers->set)))", "memset((**data).value.obj.handlers->unset_dimension, 0, sizeof (*((**data).value.obj.handlers->unset_dimension)))", "memset((**data).value.obj.handlers->unset_property, 0, sizeof (*((**data).value.obj.handlers->unset_property)))", "memset((**data).value.obj.handlers->write_dimension, 0, sizeof (*((**data).value.obj.handlers->write_dimension)))", "memset((**data).value.obj.handlers->write_property, 0, sizeof (*((**data).value.obj.handlers->write_property)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (i)", "(json_globals.error_code) = (need_comma)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (r)", "(key)++", "(myht)->nApplyCount++", "(myht)->nApplyCount--", "(tmp_ht)->nApplyCount++", "(tmp_ht)->nApplyCount--", "_efree(((key)))", "i = (0)", "i = (1)", "i = (10)", "i = (128)", "i = (16)", "i = (2)", "i = (3)", "i = (32)", "i = (4)", "i = (5)", "i = (78)", "i = (i)", "i = (myht) ? zend_hash_num_elements(myht) : 0", "i = (need_comma)", "i = (options)", "i = (r)", "i = (tmp_ht) ? zend_hash_num_elements(myht) : 0", "i = myht ? zend_hash_num_elements((myht)) : 0", "i = myht ? zend_hash_num_elements((tmp_ht)) : 0", "i = zend_hash_get_current_key_ex((myht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex((tmp_ht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &(key), &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &(pos))", "json_escape_string((buf), key, key_len - 1, options)", "json_escape_string(buf, (key), key_len - 1, options)", "json_pretty_print_char((buf), options, ' ')", "json_pretty_print_char((buf), options, '\\n')", "json_pretty_print_indent((buf), options)", "myht = ((**(data))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(data)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**(val))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(val)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(data)))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(val)))", "myht = ((**val).type == 4 ? (**(data)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**(val)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(data)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(val)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(data)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(val)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "myht = (myht)", "myht = (tmp_ht)", "need_comma = (0)", "need_comma = (1)", "need_comma = (10)", "need_comma = (128)", "need_comma = (16)", "need_comma = (2)", "need_comma = (3)", "need_comma = (32)", "need_comma = (4)", "need_comma = (5)", "need_comma = (78)", "need_comma = (i)", "need_comma = (need_comma)", "need_comma = (options)", "need_comma = (r)", "php_json_encode((buf), *data, options)", "php_json_encode(buf, *(data), options)", "php_json_encode(buf, *(val), options)", "r = (0)", "r = (1)", "r = (10)", "r = (128)", "r = (16)", "r = (2)", "r = (3)", "r = (32)", "r = (4)", "r = (5)", "r = (78)", "r = (i)", "r = (need_comma)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((data))", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((val))", "r = (options)", "r = (r)", "tmp_ht = ((**(data)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**(val)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(data)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(val)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(data)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(val)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(data)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(val)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "tmp_ht = (myht)", "tmp_ht = (tmp_ht)", "zend_hash_internal_pointer_reset_ex((myht), &pos)", "zend_hash_internal_pointer_reset_ex((tmp_ht), &pos)", "zend_hash_internal_pointer_reset_ex(myht, &(pos))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "exit(1)", "i = myht ? zend_hash_num_elements(myht) : 0", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &pos)", "json_escape_string(buf, key, key_len - 1, options)", "json_pretty_print_char(buf, options, ' ')", "json_pretty_print_char(buf, options, '\\n')", "json_pretty_print_indent(buf, options)", "myht = ((**val)).value.obj.handlers->get_properties(&(**val))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "need_comma = 1", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "php_json_encode(buf, *data, options)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type(val)", "r = 1", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht->nApplyCount++", "tmp_ht->nApplyCount--", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_internal_pointer_reset_ex(myht, &pos)", "if (__is_neg(\"\", \"L303\", 13, &(buf), sizeof (buf), &(options), sizeof (options), &(data), sizeof (data), &(key), sizeof (key), &(key_len), sizeof (key_len), &(need_comma), sizeof (need_comma), &(index), sizeof (index), &(tmp_ht), sizeof (tmp_ht), &(val), sizeof (val), &(i), sizeof (i), &(r), sizeof (r), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    break;\n", "if (__is_neg(\"\", \"L303\", 13, &(buf), sizeof (buf), &(options), sizeof (options), &(data), sizeof (data), &(key), sizeof (key), &(key_len), sizeof (key_len), &(need_comma), sizeof (need_comma), &(index), sizeof (index), &(tmp_ht), sizeof (tmp_ht), &(val), sizeof (val), &(i), sizeof (i), &(r), sizeof (r), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.87175363966196]
								}, {
									"case":	2,
									"scores":	[-7.87175363966196]
								}, {
									"case":	3,
									"scores":	[-7.87175363966196]
								}, {
									"case":	4,
									"scores":	[-7.87175363966196]
								}, {
									"case":	5,
									"scores":	[-7.87175363966196]
								}, {
									"case":	6,
									"scores":	[-7.87175363966196]
								}, {
									"case":	7,
									"scores":	[-7.87175363966196]
								}, {
									"case":	8,
									"scores":	[-7.87175363966196]
								}, {
									"case":	9,
									"scores":	[-7.87175363966196]
								}, {
									"case":	10,
									"scores":	[-7.87175363966196]
								}, {
									"case":	11,
									"scores":	[-7.87175363966196]
								}, {
									"case":	12,
									"scores":	[-7.87175363966196]
								}, {
									"case":	13,
									"scores":	[-7.87175363966196]
								}, {
									"case":	14,
									"scores":	[-7.87175363966196]
								}, {
									"case":	15,
									"scores":	[-7.87175363966196]
								}, {
									"case":	16,
									"scores":	[-7.87175363966196]
								}, {
									"case":	17,
									"scores":	[-7.87175363966196]
								}, {
									"case":	18,
									"scores":	[-7.87175363966196]
								}, {
									"case":	19,
									"scores":	[-7.87175363966196]
								}, {
									"case":	20,
									"scores":	[-7.87175363966196]
								}, {
									"case":	21,
									"scores":	[-7.87175363966196]
								}, {
									"case":	22,
									"scores":	[-7.87175363966196]
								}, {
									"case":	23,
									"scores":	[-7.87175363966196]
								}, {
									"case":	24,
									"scores":	[-7.87175363966196]
								}, {
									"case":	25,
									"scores":	[-7.87175363966196]
								}, {
									"case":	26,
									"scores":	[-7.87175363966196]
								}, {
									"case":	27,
									"scores":	[-7.87175363966196]
								}, {
									"case":	28,
									"scores":	[-7.87175363966196]
								}, {
									"case":	29,
									"scores":	[-7.87175363966196]
								}, {
									"case":	30,
									"scores":	[-7.87175363966196]
								}, {
									"case":	31,
									"scores":	[-7.87175363966196]
								}, {
									"case":	32,
									"scores":	[-7.87175363966196]
								}, {
									"case":	33,
									"scores":	[-7.87175363966196]
								}, {
									"case":	34,
									"scores":	[-7.87175363966196]
								}, {
									"case":	35,
									"scores":	[-7.87175363966196]
								}, {
									"case":	36,
									"scores":	[-7.87175363966196]
								}, {
									"case":	37,
									"scores":	[-7.87175363966196]
								}, {
									"case":	38,
									"scores":	[-7.87175363966196]
								}, {
									"case":	39,
									"scores":	[-7.87175363966196]
								}, {
									"case":	40,
									"scores":	[-7.87175363966196]
								}, {
									"case":	41,
									"scores":	[-7.87175363966196]
								}, {
									"case":	42,
									"scores":	[-7.87175363966196]
								}, {
									"case":	43,
									"scores":	[-7.87175363966196]
								}, {
									"case":	44,
									"scores":	[-7.87175363966196]
								}, {
									"case":	45,
									"scores":	[-7.87175363966196]
								}, {
									"case":	46,
									"scores":	[-7.87175363966196]
								}, {
									"case":	47,
									"scores":	[-7.87175363966196]
								}, {
									"case":	48,
									"scores":	[-7.87175363966196]
								}, {
									"case":	49,
									"scores":	[-7.87175363966196]
								}, {
									"case":	50,
									"scores":	[-7.87175363966196]
								}, {
									"case":	51,
									"scores":	[-7.87175363966196]
								}, {
									"case":	52,
									"scores":	[-7.87175363966196]
								}, {
									"case":	53,
									"scores":	[-7.87175363966196]
								}, {
									"case":	54,
									"scores":	[-7.87175363966196]
								}, {
									"case":	55,
									"scores":	[-7.87175363966196]
								}, {
									"case":	56,
									"scores":	[-7.87175363966196]
								}, {
									"case":	57,
									"scores":	[-7.87175363966196]
								}, {
									"case":	58,
									"scores":	[-7.87175363966196]
								}, {
									"case":	59,
									"scores":	[-7.87175363966196]
								}, {
									"case":	60,
									"scores":	[-7.87175363966196]
								}, {
									"case":	61,
									"scores":	[-7.87175363966196]
								}, {
									"case":	62,
									"scores":	[-7.87175363966196]
								}, {
									"case":	63,
									"scores":	[-7.87175363966196]
								}, {
									"case":	64,
									"scores":	[-7.87175363966196]
								}, {
									"case":	65,
									"scores":	[-7.87175363966196]
								}, {
									"case":	66,
									"scores":	[-7.87175363966196]
								}, {
									"case":	67,
									"scores":	[-7.87175363966196]
								}, {
									"case":	68,
									"scores":	[-7.87175363966196]
								}, {
									"case":	69,
									"scores":	[-7.87175363966196]
								}, {
									"case":	70,
									"scores":	[-7.87175363966196]
								}, {
									"case":	71,
									"scores":	[-7.87175363966196]
								}, {
									"case":	72,
									"scores":	[-7.87175363966196]
								}, {
									"case":	73,
									"scores":	[-7.87175363966196]
								}, {
									"case":	74,
									"scores":	[-7.87175363966196]
								}, {
									"case":	75,
									"scores":	[-7.87175363966196]
								}, {
									"case":	76,
									"scores":	[-7.87175363966196]
								}, {
									"case":	77,
									"scores":	[-7.87175363966196]
								}, {
									"case":	78,
									"scores":	[-7.87175363966196]
								}, {
									"case":	79,
									"scores":	[-7.87175363966196]
								}, {
									"case":	80,
									"scores":	[-7.87175363966196]
								}, {
									"case":	81,
									"scores":	[-7.87175363966196]
								}, {
									"case":	82,
									"scores":	[-7.87175363966196]
								}, {
									"case":	83,
									"scores":	[-7.87175363966196]
								}, {
									"case":	84,
									"scores":	[-7.87175363966196]
								}, {
									"case":	85,
									"scores":	[-7.87175363966196]
								}, {
									"case":	86,
									"scores":	[-7.87175363966196]
								}, {
									"case":	87,
									"scores":	[-7.87175363966196]
								}, {
									"case":	88,
									"scores":	[-7.87175363966196]
								}, {
									"case":	89,
									"scores":	[-7.87175363966196]
								}, {
									"case":	90,
									"scores":	[-7.87175363966196]
								}, {
									"case":	91,
									"scores":	[-7.87175363966196]
								}, {
									"case":	92,
									"scores":	[-7.87175363966196]
								}, {
									"case":	93,
									"scores":	[-7.87175363966196]
								}, {
									"case":	94,
									"scores":	[-7.87175363966196]
								}, {
									"case":	95,
									"scores":	[-7.87175363966196]
								}, {
									"case":	96,
									"scores":	[-7.87175363966196]
								}, {
									"case":	97,
									"scores":	[-7.87175363966196]
								}, {
									"case":	98,
									"scores":	[-7.87175363966196]
								}, {
									"case":	99,
									"scores":	[-7.87175363966196]
								}, {
									"case":	100,
									"scores":	[-7.87175363966196]
								}, {
									"case":	101,
									"scores":	[-7.87175363966196]
								}, {
									"case":	102,
									"scores":	[-7.87175363966196]
								}, {
									"case":	103,
									"scores":	[-7.87175363966196]
								}, {
									"case":	104,
									"scores":	[-7.87175363966196]
								}, {
									"case":	105,
									"scores":	[-7.87175363966196]
								}, {
									"case":	106,
									"scores":	[-7.87175363966196]
								}, {
									"case":	107,
									"scores":	[-7.87175363966196]
								}, {
									"case":	108,
									"scores":	[-7.87175363966196]
								}, {
									"case":	109,
									"scores":	[-7.87175363966196]
								}, {
									"case":	110,
									"scores":	[-7.87175363966196]
								}, {
									"case":	111,
									"scores":	[-7.87175363966196]
								}, {
									"case":	112,
									"scores":	[-7.87175363966196]
								}, {
									"case":	113,
									"scores":	[-7.87175363966196]
								}, {
									"case":	114,
									"scores":	[-7.87175363966196]
								}, {
									"case":	115,
									"scores":	[-7.87175363966196]
								}, {
									"case":	116,
									"scores":	[-7.87175363966196]
								}, {
									"case":	117,
									"scores":	[-7.87175363966196]
								}, {
									"case":	118,
									"scores":	[-7.87175363966196]
								}, {
									"case":	119,
									"scores":	[-7.87175363966196]
								}, {
									"case":	120,
									"scores":	[-7.87175363966196]
								}, {
									"case":	121,
									"scores":	[-7.87175363966196]
								}, {
									"case":	122,
									"scores":	[-7.87175363966196]
								}, {
									"case":	123,
									"scores":	[-7.87175363966196]
								}, {
									"case":	124,
									"scores":	[-7.87175363966196]
								}, {
									"case":	125,
									"scores":	[-7.87175363966196]
								}, {
									"case":	126,
									"scores":	[-7.87175363966196]
								}, {
									"case":	127,
									"scores":	[-7.87175363966196]
								}, {
									"case":	128,
									"scores":	[-7.87175363966196]
								}, {
									"case":	129,
									"scores":	[-7.87175363966196]
								}, {
									"case":	130,
									"scores":	[-7.87175363966196]
								}, {
									"case":	131,
									"scores":	[-7.87175363966196]
								}, {
									"case":	132,
									"scores":	[-7.87175363966196]
								}, {
									"case":	133,
									"scores":	[-7.87175363966196]
								}, {
									"case":	134,
									"scores":	[-7.87175363966196]
								}, {
									"case":	135,
									"scores":	[-7.87175363966196]
								}, {
									"case":	136,
									"scores":	[-7.87175363966196]
								}, {
									"case":	137,
									"scores":	[-7.87175363966196]
								}, {
									"case":	138,
									"scores":	[-7.87175363966196]
								}, {
									"case":	139,
									"scores":	[-7.87175363966196]
								}, {
									"case":	140,
									"scores":	[-7.87175363966196]
								}, {
									"case":	141,
									"scores":	[-7.87175363966196]
								}, {
									"case":	142,
									"scores":	[-7.87175363966196]
								}, {
									"case":	143,
									"scores":	[-7.87175363966196]
								}, {
									"case":	144,
									"scores":	[-7.87175363966196]
								}, {
									"case":	145,
									"scores":	[-7.87175363966196]
								}, {
									"case":	146,
									"scores":	[-7.87175363966196]
								}, {
									"case":	147,
									"scores":	[-7.87175363966196]
								}, {
									"case":	148,
									"scores":	[-7.87175363966196]
								}, {
									"case":	149,
									"scores":	[-7.87175363966196]
								}, {
									"case":	150,
									"scores":	[-7.87175363966196]
								}, {
									"case":	151,
									"scores":	[-7.87175363966196]
								}, {
									"case":	152,
									"scores":	[-7.87175363966196]
								}, {
									"case":	153,
									"scores":	[-7.87175363966196]
								}, {
									"case":	154,
									"scores":	[-7.87175363966196]
								}, {
									"case":	155,
									"scores":	[-7.87175363966196]
								}, {
									"case":	156,
									"scores":	[-7.87175363966196]
								}, {
									"case":	157,
									"scores":	[-7.87175363966196]
								}, {
									"case":	158,
									"scores":	[-7.87175363966196]
								}, {
									"case":	159,
									"scores":	[-7.87175363966196]
								}, {
									"case":	160,
									"scores":	[-7.87175363966196]
								}, {
									"case":	161,
									"scores":	[-7.87175363966196]
								}, {
									"case":	162,
									"scores":	[-7.87175363966196]
								}, {
									"case":	163,
									"scores":	[-7.87175363966196]
								}, {
									"case":	164,
									"scores":	[-7.87175363966196]
								}, {
									"case":	165,
									"scores":	[-7.87175363966196]
								}, {
									"case":	166,
									"scores":	[-7.87175363966196]
								}, {
									"case":	167,
									"scores":	[-7.87175363966196]
								}, {
									"case":	168,
									"scores":	[-7.87175363966196]
								}, {
									"case":	169,
									"scores":	[-7.87175363966196]
								}, {
									"case":	170,
									"scores":	[-7.87175363966196]
								}, {
									"case":	171,
									"scores":	[-7.87175363966196]
								}, {
									"case":	172,
									"scores":	[-7.87175363966196]
								}, {
									"case":	173,
									"scores":	[-7.87175363966196]
								}, {
									"case":	174,
									"scores":	[-7.87175363966196]
								}, {
									"case":	175,
									"scores":	[-7.87175363966196]
								}, {
									"case":	176,
									"scores":	[-7.87175363966196]
								}, {
									"case":	177,
									"scores":	[-7.87175363966196]
								}, {
									"case":	178,
									"scores":	[-7.87175363966196]
								}, {
									"case":	179,
									"scores":	[-7.87175363966196]
								}, {
									"case":	180,
									"scores":	[-7.87175363966196]
								}, {
									"case":	181,
									"scores":	[-7.87175363966196]
								}, {
									"case":	182,
									"scores":	[-7.87175363966196]
								}, {
									"case":	183,
									"scores":	[-7.87175363966196]
								}, {
									"case":	184,
									"scores":	[-7.87175363966196]
								}, {
									"case":	185,
									"scores":	[-7.87175363966196]
								}, {
									"case":	186,
									"scores":	[-7.87175363966196]
								}, {
									"case":	187,
									"scores":	[-7.87175363966196]
								}, {
									"case":	188,
									"scores":	[-7.87175363966196]
								}, {
									"case":	189,
									"scores":	[-7.87175363966196]
								}, {
									"case":	190,
									"scores":	[-7.87175363966196]
								}, {
									"case":	191,
									"scores":	[-7.87175363966196]
								}, {
									"case":	192,
									"scores":	[-7.87175363966196]
								}, {
									"case":	193,
									"scores":	[-7.87175363966196]
								}, {
									"case":	194,
									"scores":	[-7.87175363966196]
								}, {
									"case":	195,
									"scores":	[-7.87175363966196]
								}, {
									"case":	196,
									"scores":	[-7.87175363966196]
								}, {
									"case":	197,
									"scores":	[-7.87175363966196]
								}, {
									"case":	198,
									"scores":	[-7.87175363966196]
								}, {
									"case":	199,
									"scores":	[-7.87175363966196]
								}, {
									"case":	200,
									"scores":	[-7.87175363966196]
								}, {
									"case":	201,
									"scores":	[-7.87175363966196]
								}, {
									"case":	202,
									"scores":	[-7.87175363966196]
								}, {
									"case":	203,
									"scores":	[-7.87175363966196]
								}, {
									"case":	204,
									"scores":	[-7.87175363966196]
								}, {
									"case":	205,
									"scores":	[-7.87175363966196]
								}, {
									"case":	206,
									"scores":	[-7.87175363966196]
								}, {
									"case":	207,
									"scores":	[-7.87175363966196]
								}, {
									"case":	208,
									"scores":	[-7.87175363966196]
								}, {
									"case":	209,
									"scores":	[-7.87175363966196]
								}, {
									"case":	210,
									"scores":	[-7.87175363966196]
								}, {
									"case":	211,
									"scores":	[-7.87175363966196]
								}, {
									"case":	212,
									"scores":	[-7.87175363966196]
								}, {
									"case":	213,
									"scores":	[-7.87175363966196]
								}, {
									"case":	214,
									"scores":	[-7.87175363966196]
								}, {
									"case":	215,
									"scores":	[-7.87175363966196]
								}, {
									"case":	216,
									"scores":	[-7.87175363966196]
								}, {
									"case":	217,
									"scores":	[-7.87175363966196]
								}, {
									"case":	218,
									"scores":	[-7.87175363966196]
								}, {
									"case":	219,
									"scores":	[-7.87175363966196]
								}, {
									"case":	220,
									"scores":	[-7.87175363966196]
								}, {
									"case":	221,
									"scores":	[-7.87175363966196]
								}, {
									"case":	222,
									"scores":	[-7.87175363966196]
								}, {
									"case":	223,
									"scores":	[-7.87175363966196]
								}, {
									"case":	224,
									"scores":	[-7.87175363966196]
								}, {
									"case":	225,
									"scores":	[-7.87175363966196]
								}, {
									"case":	226,
									"scores":	[-7.87175363966196]
								}, {
									"case":	227,
									"scores":	[-7.87175363966196]
								}, {
									"case":	228,
									"scores":	[-7.87175363966196]
								}, {
									"case":	229,
									"scores":	[-7.87175363966196]
								}, {
									"case":	230,
									"scores":	[-7.87175363966196]
								}, {
									"case":	231,
									"scores":	[-7.87175363966196]
								}, {
									"case":	232,
									"scores":	[-7.87175363966196]
								}, {
									"case":	233,
									"scores":	[-7.87175363966196]
								}, {
									"case":	234,
									"scores":	[-7.87175363966196]
								}, {
									"case":	235,
									"scores":	[-7.87175363966196]
								}, {
									"case":	236,
									"scores":	[-7.87175363966196]
								}, {
									"case":	237,
									"scores":	[-7.87175363966196]
								}, {
									"case":	238,
									"scores":	[-9.58356484186196, -9.01633750806196, -11.169158114061961, -10.30301936806196, -9.84265066806196, -9.81443099706196, -10.072016171061961, -10.060469910861961, -10.320005688061961, -10.072016171061961, -9.81443099706196, -10.31805508486196, -10.31805508486196]
								}, {
									"case":	239,
									"scores":	[-9.58356484186196, -9.01633750806196, -11.169158114061961, -10.30301936806196, -9.84265066806196, -9.81443099706196, -10.072016171061961, -10.060469910861961, -10.320005688061961, -10.072016171061961, -9.81443099706196, -10.31805508486196, -10.31805508486196]
								}]
						}, {
							"switch":	36,
							"types":	[[], [], [1], [], [], [], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166], [], [3, 4, 5, 6, 7, 8, 9, 10], [], [], [], [], [], [], [], [2]],
							"begin_line":	303,
							"begin_column":	7,
							"end_line":	303,
							"end_column":	57,
							"patch_codes":	["if (!__is_neg(\"\", \"L303\", 13, &(buf), sizeof (buf), &(options), sizeof (options), &(data), sizeof (data), &(key), sizeof (key), &(key_len), sizeof (key_len), &(need_comma), sizeof (need_comma), &(index), sizeof (index), &(tmp_ht), sizeof (tmp_ht), &(val), sizeof (val), &(i), sizeof (i), &(r), sizeof (r), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    json_pretty_print_char(buf, options, ' ');\n", "{\n}\n", "Debug(buf, options, ' ')", "php_printf(buf, options, ' ')", "printf(buf, options, ' ')", "virtual_open(buf, options, ' ')", "zend_class_implements(buf, options, ' ')", "zend_fcall_info_argn(buf, options, ' ')", "zend_ptr_stack_n_pop(buf, options, ' ')", "zend_ptr_stack_n_push(buf, options, ' ')", "json_pretty_print_char((&buf), options, ' ')", "json_pretty_print_char((&data), options, ' ')", "json_pretty_print_char((&i), options, ' ')", "json_pretty_print_char((&index), options, ' ')", "json_pretty_print_char((&key), options, ' ')", "json_pretty_print_char((&key_len), options, ' ')", "json_pretty_print_char((&myht), options, ' ')", "json_pretty_print_char((&need_comma), options, ' ')", "json_pretty_print_char((&options), options, ' ')", "json_pretty_print_char((&pos), options, ' ')", "json_pretty_print_char((&r), options, ' ')", "json_pretty_print_char((&tmp_ht), options, ' ')", "json_pretty_print_char((&val), options, ' ')", "json_pretty_print_char((buf), options, ' ')", "json_pretty_print_char(buf, (0 * i), ' ')", "json_pretty_print_char(buf, (0 * index), ' ')", "json_pretty_print_char(buf, (0 * key_len), ' ')", "json_pretty_print_char(buf, (0 * need_comma), ' ')", "json_pretty_print_char(buf, (0 * options), ' ')", "json_pretty_print_char(buf, (0 * r), ' ')", "json_pretty_print_char(buf, (buf != 0), ' ')", "json_pretty_print_char(buf, (buf == 0), ' ')", "json_pretty_print_char(buf, (data != 0), ' ')", "json_pretty_print_char(buf, (data == 0), ' ')", "json_pretty_print_char(buf, (i != 0), ' ')", "json_pretty_print_char(buf, (i != index), ' ')", "json_pretty_print_char(buf, (i != key_len), ' ')", "json_pretty_print_char(buf, (i != need_comma), ' ')", "json_pretty_print_char(buf, (i != r), ' ')", "json_pretty_print_char(buf, (i * index), ' ')", "json_pretty_print_char(buf, (i * key_len), ' ')", "json_pretty_print_char(buf, (i * need_comma), ' ')", "json_pretty_print_char(buf, (i * options), ' ')", "json_pretty_print_char(buf, (i * r), ' ')", "json_pretty_print_char(buf, (i + 0), ' ')", "json_pretty_print_char(buf, (i + index), ' ')", "json_pretty_print_char(buf, (i + key_len), ' ')", "json_pretty_print_char(buf, (i + need_comma), ' ')", "json_pretty_print_char(buf, (i + r), ' ')", "json_pretty_print_char(buf, (i - 0), ' ')", "json_pretty_print_char(buf, (i - index), ' ')", "json_pretty_print_char(buf, (i - key_len), ' ')", "json_pretty_print_char(buf, (i - need_comma), ' ')", "json_pretty_print_char(buf, (i - r), ' ')", "json_pretty_print_char(buf, (i == 0), ' ')", "json_pretty_print_char(buf, (i == index), ' ')", "json_pretty_print_char(buf, (i == key_len), ' ')", "json_pretty_print_char(buf, (i == need_comma), ' ')", "json_pretty_print_char(buf, (i == r), ' ')", "json_pretty_print_char(buf, (i), ' ')", "json_pretty_print_char(buf, (index != 0), ' ')", "json_pretty_print_char(buf, (index != key_len), ' ')", "json_pretty_print_char(buf, (index != need_comma), ' ')", "json_pretty_print_char(buf, (index * i), ' ')", "json_pretty_print_char(buf, (index * key_len), ' ')", "json_pretty_print_char(buf, (index * need_comma), ' ')", "json_pretty_print_char(buf, (index * options), ' ')", "json_pretty_print_char(buf, (index * r), ' ')", "json_pretty_print_char(buf, (index + 0), ' ')", "json_pretty_print_char(buf, (index + key_len), ' ')", "json_pretty_print_char(buf, (index + need_comma), ' ')", "json_pretty_print_char(buf, (index - 0), ' ')", "json_pretty_print_char(buf, (index - key_len), ' ')", "json_pretty_print_char(buf, (index - need_comma), ' ')", "json_pretty_print_char(buf, (index == 0), ' ')", "json_pretty_print_char(buf, (index == key_len), ' ')", "json_pretty_print_char(buf, (index == need_comma), ' ')", "json_pretty_print_char(buf, (key != 0), ' ')", "json_pretty_print_char(buf, (key == 0), ' ')", "json_pretty_print_char(buf, (key_len != 0), ' ')", "json_pretty_print_char(buf, (key_len != need_comma), ' ')", "json_pretty_print_char(buf, (key_len * i), ' ')", "json_pretty_print_char(buf, (key_len * index), ' ')", "json_pretty_print_char(buf, (key_len * need_comma), ' ')", "json_pretty_print_char(buf, (key_len * options), ' ')", "json_pretty_print_char(buf, (key_len * r), ' ')", "json_pretty_print_char(buf, (key_len + 0), ' ')", "json_pretty_print_char(buf, (key_len + need_comma), ' ')", "json_pretty_print_char(buf, (key_len - 0), ' ')", "json_pretty_print_char(buf, (key_len - need_comma), ' ')", "json_pretty_print_char(buf, (key_len == 0), ' ')", "json_pretty_print_char(buf, (key_len == need_comma), ' ')", "json_pretty_print_char(buf, (myht != 0), ' ')", "json_pretty_print_char(buf, (myht != tmp_ht), ' ')", "json_pretty_print_char(buf, (myht == 0), ' ')", "json_pretty_print_char(buf, (myht == tmp_ht), ' ')", "json_pretty_print_char(buf, (need_comma != 0), ' ')", "json_pretty_print_char(buf, (need_comma * i), ' ')", "json_pretty_print_char(buf, (need_comma * index), ' ')", "json_pretty_print_char(buf, (need_comma * key_len), ' ')", "json_pretty_print_char(buf, (need_comma * options), ' ')", "json_pretty_print_char(buf, (need_comma * r), ' ')", "json_pretty_print_char(buf, (need_comma + 0), ' ')", "json_pretty_print_char(buf, (need_comma - 0), ' ')", "json_pretty_print_char(buf, (need_comma == 0), ' ')", "json_pretty_print_char(buf, (need_comma), ' ')", "json_pretty_print_char(buf, (options != 0), ' ')", "json_pretty_print_char(buf, (options != i), ' ')", "json_pretty_print_char(buf, (options != index), ' ')", "json_pretty_print_char(buf, (options != key_len), ' ')", "json_pretty_print_char(buf, (options != need_comma), ' ')", "json_pretty_print_char(buf, (options != r), ' ')", "json_pretty_print_char(buf, (options * i), ' ')", "json_pretty_print_char(buf, (options * index), ' ')", "json_pretty_print_char(buf, (options * key_len), ' ')", "json_pretty_print_char(buf, (options * need_comma), ' ')", "json_pretty_print_char(buf, (options * r), ' ')", "json_pretty_print_char(buf, (options + 0), ' ')", "json_pretty_print_char(buf, (options + i), ' ')", "json_pretty_print_char(buf, (options + index), ' ')", "json_pretty_print_char(buf, (options + key_len), ' ')", "json_pretty_print_char(buf, (options + need_comma), ' ')", "json_pretty_print_char(buf, (options + r), ' ')", "json_pretty_print_char(buf, (options - 0), ' ')", "json_pretty_print_char(buf, (options - i), ' ')", "json_pretty_print_char(buf, (options - index), ' ')", "json_pretty_print_char(buf, (options - key_len), ' ')", "json_pretty_print_char(buf, (options - need_comma), ' ')", "json_pretty_print_char(buf, (options - r), ' ')", "json_pretty_print_char(buf, (options == 0), ' ')", "json_pretty_print_char(buf, (options == i), ' ')", "json_pretty_print_char(buf, (options == index), ' ')", "json_pretty_print_char(buf, (options == key_len), ' ')", "json_pretty_print_char(buf, (options == need_comma), ' ')", "json_pretty_print_char(buf, (options == r), ' ')", "json_pretty_print_char(buf, (options), ' ')", "json_pretty_print_char(buf, (pos != 0), ' ')", "json_pretty_print_char(buf, (pos == 0), ' ')", "json_pretty_print_char(buf, (r != 0), ' ')", "json_pretty_print_char(buf, (r != index), ' ')", "json_pretty_print_char(buf, (r != key_len), ' ')", "json_pretty_print_char(buf, (r != need_comma), ' ')", "json_pretty_print_char(buf, (r * i), ' ')", "json_pretty_print_char(buf, (r * index), ' ')", "json_pretty_print_char(buf, (r * key_len), ' ')", "json_pretty_print_char(buf, (r * need_comma), ' ')", "json_pretty_print_char(buf, (r * options), ' ')", "json_pretty_print_char(buf, (r + 0), ' ')", "json_pretty_print_char(buf, (r + index), ' ')", "json_pretty_print_char(buf, (r + key_len), ' ')", "json_pretty_print_char(buf, (r + need_comma), ' ')", "json_pretty_print_char(buf, (r - 0), ' ')", "json_pretty_print_char(buf, (r - index), ' ')", "json_pretty_print_char(buf, (r - key_len), ' ')", "json_pretty_print_char(buf, (r - need_comma), ' ')", "json_pretty_print_char(buf, (r == 0), ' ')", "json_pretty_print_char(buf, (r == index), ' ')", "json_pretty_print_char(buf, (r == key_len), ' ')", "json_pretty_print_char(buf, (r == need_comma), ' ')", "json_pretty_print_char(buf, (r), ' ')", "json_pretty_print_char(buf, (tmp_ht != 0), ' ')", "json_pretty_print_char(buf, (tmp_ht == 0), ' ')", "json_pretty_print_char(buf, (val != 0), ' ')", "json_pretty_print_char(buf, (val != data), ' ')", "json_pretty_print_char(buf, (val == 0), ' ')", "json_pretty_print_char(buf, (val == data), ' ')"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.81932505516196, -8.19021246466196, -7.99179971966196, -9.35917915566196, -8.90836077966196, -8.48713860966196, -8.80093630966196, -9.24502670966196, -9.56454710966196, -8.80093630966196, -8.48713860966196, -9.55882440966196, -9.55882440966196]
								}, {
									"case":	2,
									"scores":	[-7.87175363966196]
								}, {
									"case":	3,
									"scores":	[-7.87175363966196]
								}, {
									"case":	4,
									"scores":	[-7.87175363966196]
								}, {
									"case":	5,
									"scores":	[-7.87175363966196]
								}, {
									"case":	6,
									"scores":	[-7.87175363966196]
								}, {
									"case":	7,
									"scores":	[-7.87175363966196]
								}, {
									"case":	8,
									"scores":	[-7.87175363966196]
								}, {
									"case":	9,
									"scores":	[-7.87175363966196]
								}, {
									"case":	10,
									"scores":	[-7.87175363966196]
								}, {
									"case":	11,
									"scores":	[-7.87175363966196]
								}, {
									"case":	12,
									"scores":	[-7.87175363966196]
								}, {
									"case":	13,
									"scores":	[-7.87175363966196]
								}, {
									"case":	14,
									"scores":	[-7.87175363966196]
								}, {
									"case":	15,
									"scores":	[-7.87175363966196]
								}, {
									"case":	16,
									"scores":	[-7.87175363966196]
								}, {
									"case":	17,
									"scores":	[-7.87175363966196]
								}, {
									"case":	18,
									"scores":	[-7.87175363966196]
								}, {
									"case":	19,
									"scores":	[-7.87175363966196]
								}, {
									"case":	20,
									"scores":	[-7.87175363966196]
								}, {
									"case":	21,
									"scores":	[-7.87175363966196]
								}, {
									"case":	22,
									"scores":	[-7.87175363966196]
								}, {
									"case":	23,
									"scores":	[-7.87175363966196]
								}, {
									"case":	24,
									"scores":	[-7.87175363966196]
								}, {
									"case":	25,
									"scores":	[-7.87175363966196]
								}, {
									"case":	26,
									"scores":	[-7.87175363966196]
								}, {
									"case":	27,
									"scores":	[-7.87175363966196]
								}, {
									"case":	28,
									"scores":	[-7.87175363966196]
								}, {
									"case":	29,
									"scores":	[-7.87175363966196]
								}, {
									"case":	30,
									"scores":	[-7.87175363966196]
								}, {
									"case":	31,
									"scores":	[-7.87175363966196]
								}, {
									"case":	32,
									"scores":	[-7.87175363966196]
								}, {
									"case":	33,
									"scores":	[-7.87175363966196]
								}, {
									"case":	34,
									"scores":	[-7.87175363966196]
								}, {
									"case":	35,
									"scores":	[-7.87175363966196]
								}, {
									"case":	36,
									"scores":	[-7.87175363966196]
								}, {
									"case":	37,
									"scores":	[-7.87175363966196]
								}, {
									"case":	38,
									"scores":	[-7.87175363966196]
								}, {
									"case":	39,
									"scores":	[-7.87175363966196]
								}, {
									"case":	40,
									"scores":	[-7.87175363966196]
								}, {
									"case":	41,
									"scores":	[-7.87175363966196]
								}, {
									"case":	42,
									"scores":	[-7.87175363966196]
								}, {
									"case":	43,
									"scores":	[-7.87175363966196]
								}, {
									"case":	44,
									"scores":	[-7.87175363966196]
								}, {
									"case":	45,
									"scores":	[-7.87175363966196]
								}, {
									"case":	46,
									"scores":	[-7.87175363966196]
								}, {
									"case":	47,
									"scores":	[-7.87175363966196]
								}, {
									"case":	48,
									"scores":	[-7.87175363966196]
								}, {
									"case":	49,
									"scores":	[-7.87175363966196]
								}, {
									"case":	50,
									"scores":	[-7.87175363966196]
								}, {
									"case":	51,
									"scores":	[-7.87175363966196]
								}, {
									"case":	52,
									"scores":	[-7.87175363966196]
								}, {
									"case":	53,
									"scores":	[-7.87175363966196]
								}, {
									"case":	54,
									"scores":	[-7.87175363966196]
								}, {
									"case":	55,
									"scores":	[-7.87175363966196]
								}, {
									"case":	56,
									"scores":	[-7.87175363966196]
								}, {
									"case":	57,
									"scores":	[-7.87175363966196]
								}, {
									"case":	58,
									"scores":	[-7.87175363966196]
								}, {
									"case":	59,
									"scores":	[-7.87175363966196]
								}, {
									"case":	60,
									"scores":	[-7.87175363966196]
								}, {
									"case":	61,
									"scores":	[-7.87175363966196]
								}, {
									"case":	62,
									"scores":	[-7.87175363966196]
								}, {
									"case":	63,
									"scores":	[-7.87175363966196]
								}, {
									"case":	64,
									"scores":	[-7.87175363966196]
								}, {
									"case":	65,
									"scores":	[-7.87175363966196]
								}, {
									"case":	66,
									"scores":	[-7.87175363966196]
								}, {
									"case":	67,
									"scores":	[-7.87175363966196]
								}, {
									"case":	68,
									"scores":	[-7.87175363966196]
								}, {
									"case":	69,
									"scores":	[-7.87175363966196]
								}, {
									"case":	70,
									"scores":	[-7.87175363966196]
								}, {
									"case":	71,
									"scores":	[-7.87175363966196]
								}, {
									"case":	72,
									"scores":	[-7.87175363966196]
								}, {
									"case":	73,
									"scores":	[-7.87175363966196]
								}, {
									"case":	74,
									"scores":	[-7.87175363966196]
								}, {
									"case":	75,
									"scores":	[-7.87175363966196]
								}, {
									"case":	76,
									"scores":	[-7.87175363966196]
								}, {
									"case":	77,
									"scores":	[-7.87175363966196]
								}, {
									"case":	78,
									"scores":	[-7.87175363966196]
								}, {
									"case":	79,
									"scores":	[-7.87175363966196]
								}, {
									"case":	80,
									"scores":	[-7.87175363966196]
								}, {
									"case":	81,
									"scores":	[-7.87175363966196]
								}, {
									"case":	82,
									"scores":	[-7.87175363966196]
								}, {
									"case":	83,
									"scores":	[-7.87175363966196]
								}, {
									"case":	84,
									"scores":	[-7.87175363966196]
								}, {
									"case":	85,
									"scores":	[-7.87175363966196]
								}, {
									"case":	86,
									"scores":	[-7.87175363966196]
								}, {
									"case":	87,
									"scores":	[-7.87175363966196]
								}, {
									"case":	88,
									"scores":	[-7.87175363966196]
								}, {
									"case":	89,
									"scores":	[-7.87175363966196]
								}, {
									"case":	90,
									"scores":	[-7.87175363966196]
								}, {
									"case":	91,
									"scores":	[-7.87175363966196]
								}, {
									"case":	92,
									"scores":	[-7.87175363966196]
								}, {
									"case":	93,
									"scores":	[-7.87175363966196]
								}, {
									"case":	94,
									"scores":	[-7.87175363966196]
								}, {
									"case":	95,
									"scores":	[-7.87175363966196]
								}, {
									"case":	96,
									"scores":	[-7.87175363966196]
								}, {
									"case":	97,
									"scores":	[-7.87175363966196]
								}, {
									"case":	98,
									"scores":	[-7.87175363966196]
								}, {
									"case":	99,
									"scores":	[-7.87175363966196]
								}, {
									"case":	100,
									"scores":	[-7.87175363966196]
								}, {
									"case":	101,
									"scores":	[-7.87175363966196]
								}, {
									"case":	102,
									"scores":	[-7.87175363966196]
								}, {
									"case":	103,
									"scores":	[-7.87175363966196]
								}, {
									"case":	104,
									"scores":	[-7.87175363966196]
								}, {
									"case":	105,
									"scores":	[-7.87175363966196]
								}, {
									"case":	106,
									"scores":	[-7.87175363966196]
								}, {
									"case":	107,
									"scores":	[-7.87175363966196]
								}, {
									"case":	108,
									"scores":	[-7.87175363966196]
								}, {
									"case":	109,
									"scores":	[-7.87175363966196]
								}, {
									"case":	110,
									"scores":	[-7.87175363966196]
								}, {
									"case":	111,
									"scores":	[-7.87175363966196]
								}, {
									"case":	112,
									"scores":	[-7.87175363966196]
								}, {
									"case":	113,
									"scores":	[-7.87175363966196]
								}, {
									"case":	114,
									"scores":	[-7.87175363966196]
								}, {
									"case":	115,
									"scores":	[-7.87175363966196]
								}, {
									"case":	116,
									"scores":	[-7.87175363966196]
								}, {
									"case":	117,
									"scores":	[-7.87175363966196]
								}, {
									"case":	118,
									"scores":	[-7.87175363966196]
								}, {
									"case":	119,
									"scores":	[-7.87175363966196]
								}, {
									"case":	120,
									"scores":	[-7.87175363966196]
								}, {
									"case":	121,
									"scores":	[-7.87175363966196]
								}, {
									"case":	122,
									"scores":	[-7.87175363966196]
								}, {
									"case":	123,
									"scores":	[-7.87175363966196]
								}, {
									"case":	124,
									"scores":	[-7.87175363966196]
								}, {
									"case":	125,
									"scores":	[-7.87175363966196]
								}, {
									"case":	126,
									"scores":	[-7.87175363966196]
								}, {
									"case":	127,
									"scores":	[-7.87175363966196]
								}, {
									"case":	128,
									"scores":	[-7.87175363966196]
								}, {
									"case":	129,
									"scores":	[-7.87175363966196]
								}, {
									"case":	130,
									"scores":	[-7.87175363966196]
								}, {
									"case":	131,
									"scores":	[-7.87175363966196]
								}, {
									"case":	132,
									"scores":	[-7.87175363966196]
								}, {
									"case":	133,
									"scores":	[-7.87175363966196]
								}, {
									"case":	134,
									"scores":	[-7.87175363966196]
								}, {
									"case":	135,
									"scores":	[-7.87175363966196]
								}, {
									"case":	136,
									"scores":	[-7.87175363966196]
								}, {
									"case":	137,
									"scores":	[-7.87175363966196]
								}, {
									"case":	138,
									"scores":	[-7.87175363966196]
								}, {
									"case":	139,
									"scores":	[-7.87175363966196]
								}, {
									"case":	140,
									"scores":	[-7.87175363966196]
								}, {
									"case":	141,
									"scores":	[-7.87175363966196]
								}, {
									"case":	142,
									"scores":	[-7.87175363966196]
								}, {
									"case":	143,
									"scores":	[-7.87175363966196]
								}, {
									"case":	144,
									"scores":	[-7.87175363966196]
								}, {
									"case":	145,
									"scores":	[-7.87175363966196]
								}, {
									"case":	146,
									"scores":	[-7.87175363966196]
								}, {
									"case":	147,
									"scores":	[-7.87175363966196]
								}, {
									"case":	148,
									"scores":	[-7.87175363966196]
								}, {
									"case":	149,
									"scores":	[-7.87175363966196]
								}, {
									"case":	150,
									"scores":	[-7.87175363966196]
								}, {
									"case":	151,
									"scores":	[-7.87175363966196]
								}, {
									"case":	152,
									"scores":	[-7.87175363966196]
								}, {
									"case":	153,
									"scores":	[-7.87175363966196]
								}, {
									"case":	154,
									"scores":	[-7.87175363966196]
								}, {
									"case":	155,
									"scores":	[-7.87175363966196]
								}, {
									"case":	156,
									"scores":	[-7.87175363966196]
								}, {
									"case":	157,
									"scores":	[-7.87175363966196]
								}, {
									"case":	158,
									"scores":	[-7.87175363966196]
								}, {
									"case":	159,
									"scores":	[-7.87175363966196]
								}, {
									"case":	160,
									"scores":	[-7.87175363966196]
								}, {
									"case":	161,
									"scores":	[-7.87175363966196]
								}, {
									"case":	162,
									"scores":	[-7.87175363966196]
								}, {
									"case":	163,
									"scores":	[-7.87175363966196]
								}, {
									"case":	164,
									"scores":	[-7.87175363966196]
								}, {
									"case":	165,
									"scores":	[-7.87175363966196]
								}, {
									"case":	166,
									"scores":	[-7.87175363966196]
								}]
						}]
				}, {
					"line":	304,
					"switches":	[{
							"switch":	37,
							"types":	[[], [], [], [], [238, 239], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], [], [], [], [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237], [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], [], [], [], [], [], []],
							"begin_line":	305,
							"begin_column":	5,
							"end_line":	305,
							"end_column":	5,
							"patch_codes":	["memset(&(**data).is_ref__gc, 0, sizeof (*(&(**data).is_ref__gc)))", "memset(&(**data).refcount__gc, 0, sizeof (*(&(**data).refcount__gc)))", "memset(&(**data).type, 0, sizeof (*(&(**data).type)))", "memset(&(**data).value, 0, sizeof (*(&(**data).value)))", "memset(&(**data).value.dval, 0, sizeof (*(&(**data).value.dval)))", "memset(&(**data).value.ht, 0, sizeof (*(&(**data).value.ht)))", "memset(&(**data).value.lval, 0, sizeof (*(&(**data).value.lval)))", "memset(&(**data).value.obj, 0, sizeof (*(&(**data).value.obj)))", "memset(&(**data).value.obj.handle, 0, sizeof (*(&(**data).value.obj.handle)))", "memset(&(**data).value.obj.handlers, 0, sizeof (*(&(**data).value.obj.handlers)))", "memset(&(**data).value.obj.handlers->add_ref, 0, sizeof (*(&(**data).value.obj.handlers->add_ref)))", "memset(&(**data).value.obj.handlers->call_method, 0, sizeof (*(&(**data).value.obj.handlers->call_method)))", "memset(&(**data).value.obj.handlers->cast_object, 0, sizeof (*(&(**data).value.obj.handlers->cast_object)))", "memset(&(**data).value.obj.handlers->clone_obj, 0, sizeof (*(&(**data).value.obj.handlers->clone_obj)))", "memset(&(**data).value.obj.handlers->compare_objects, 0, sizeof (*(&(**data).value.obj.handlers->compare_objects)))", "memset(&(**data).value.obj.handlers->count_elements, 0, sizeof (*(&(**data).value.obj.handlers->count_elements)))", "memset(&(**data).value.obj.handlers->del_ref, 0, sizeof (*(&(**data).value.obj.handlers->del_ref)))", "memset(&(**data).value.obj.handlers->get, 0, sizeof (*(&(**data).value.obj.handlers->get)))", "memset(&(**data).value.obj.handlers->get_class_entry, 0, sizeof (*(&(**data).value.obj.handlers->get_class_entry)))", "memset(&(**data).value.obj.handlers->get_class_name, 0, sizeof (*(&(**data).value.obj.handlers->get_class_name)))", "memset(&(**data).value.obj.handlers->get_closure, 0, sizeof (*(&(**data).value.obj.handlers->get_closure)))", "memset(&(**data).value.obj.handlers->get_constructor, 0, sizeof (*(&(**data).value.obj.handlers->get_constructor)))", "memset(&(**data).value.obj.handlers->get_debug_info, 0, sizeof (*(&(**data).value.obj.handlers->get_debug_info)))", "memset(&(**data).value.obj.handlers->get_method, 0, sizeof (*(&(**data).value.obj.handlers->get_method)))", "memset(&(**data).value.obj.handlers->get_properties, 0, sizeof (*(&(**data).value.obj.handlers->get_properties)))", "memset(&(**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(**data).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(**data).value.obj.handlers->has_dimension, 0, sizeof (*(&(**data).value.obj.handlers->has_dimension)))", "memset(&(**data).value.obj.handlers->has_property, 0, sizeof (*(&(**data).value.obj.handlers->has_property)))", "memset(&(**data).value.obj.handlers->read_dimension, 0, sizeof (*(&(**data).value.obj.handlers->read_dimension)))", "memset(&(**data).value.obj.handlers->read_property, 0, sizeof (*(&(**data).value.obj.handlers->read_property)))", "memset(&(**data).value.obj.handlers->set, 0, sizeof (*(&(**data).value.obj.handlers->set)))", "memset(&(**data).value.obj.handlers->unset_dimension, 0, sizeof (*(&(**data).value.obj.handlers->unset_dimension)))", "memset(&(**data).value.obj.handlers->unset_property, 0, sizeof (*(&(**data).value.obj.handlers->unset_property)))", "memset(&(**data).value.obj.handlers->write_dimension, 0, sizeof (*(&(**data).value.obj.handlers->write_dimension)))", "memset(&(**data).value.obj.handlers->write_property, 0, sizeof (*(&(**data).value.obj.handlers->write_property)))", "memset(&(**data).value.str, 0, sizeof (*(&(**data).value.str)))", "memset(&(**val).is_ref__gc, 0, sizeof (*(&(**val).is_ref__gc)))", "memset(&(**val).refcount__gc, 0, sizeof (*(&(**val).refcount__gc)))", "memset(&(**val).type, 0, sizeof (*(&(**val).type)))", "memset(&(**val).value, 0, sizeof (*(&(**val).value)))", "memset(&json_globals.encoder_depth, 0, sizeof (*(&json_globals.encoder_depth)))", "memset(&json_globals.error_code, 0, sizeof (*(&json_globals.error_code)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((**data).value.ht, 0, sizeof (*((**data).value.ht)))", "memset((**data).value.obj.handlers, 0, sizeof (*((**data).value.obj.handlers)))", "memset((**data).value.obj.handlers->add_ref, 0, sizeof (*((**data).value.obj.handlers->add_ref)))", "memset((**data).value.obj.handlers->call_method, 0, sizeof (*((**data).value.obj.handlers->call_method)))", "memset((**data).value.obj.handlers->cast_object, 0, sizeof (*((**data).value.obj.handlers->cast_object)))", "memset((**data).value.obj.handlers->clone_obj, 0, sizeof (*((**data).value.obj.handlers->clone_obj)))", "memset((**data).value.obj.handlers->compare_objects, 0, sizeof (*((**data).value.obj.handlers->compare_objects)))", "memset((**data).value.obj.handlers->count_elements, 0, sizeof (*((**data).value.obj.handlers->count_elements)))", "memset((**data).value.obj.handlers->del_ref, 0, sizeof (*((**data).value.obj.handlers->del_ref)))", "memset((**data).value.obj.handlers->get, 0, sizeof (*((**data).value.obj.handlers->get)))", "memset((**data).value.obj.handlers->get_class_entry, 0, sizeof (*((**data).value.obj.handlers->get_class_entry)))", "memset((**data).value.obj.handlers->get_class_name, 0, sizeof (*((**data).value.obj.handlers->get_class_name)))", "memset((**data).value.obj.handlers->get_closure, 0, sizeof (*((**data).value.obj.handlers->get_closure)))", "memset((**data).value.obj.handlers->get_constructor, 0, sizeof (*((**data).value.obj.handlers->get_constructor)))", "memset((**data).value.obj.handlers->get_debug_info, 0, sizeof (*((**data).value.obj.handlers->get_debug_info)))", "memset((**data).value.obj.handlers->get_method, 0, sizeof (*((**data).value.obj.handlers->get_method)))", "memset((**data).value.obj.handlers->get_properties, 0, sizeof (*((**data).value.obj.handlers->get_properties)))", "memset((**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((**data).value.obj.handlers->get_property_ptr_ptr)))", "memset((**data).value.obj.handlers->has_dimension, 0, sizeof (*((**data).value.obj.handlers->has_dimension)))", "memset((**data).value.obj.handlers->has_property, 0, sizeof (*((**data).value.obj.handlers->has_property)))", "memset((**data).value.obj.handlers->read_dimension, 0, sizeof (*((**data).value.obj.handlers->read_dimension)))", "memset((**data).value.obj.handlers->read_property, 0, sizeof (*((**data).value.obj.handlers->read_property)))", "memset((**data).value.obj.handlers->set, 0, sizeof (*((**data).value.obj.handlers->set)))", "memset((**data).value.obj.handlers->unset_dimension, 0, sizeof (*((**data).value.obj.handlers->unset_dimension)))", "memset((**data).value.obj.handlers->unset_property, 0, sizeof (*((**data).value.obj.handlers->unset_property)))", "memset((**data).value.obj.handlers->write_dimension, 0, sizeof (*((**data).value.obj.handlers->write_dimension)))", "memset((**data).value.obj.handlers->write_property, 0, sizeof (*((**data).value.obj.handlers->write_property)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (i)", "(json_globals.error_code) = (need_comma)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (r)", "(key)++", "(myht)->nApplyCount++", "(myht)->nApplyCount--", "(tmp_ht)->nApplyCount++", "(tmp_ht)->nApplyCount--", "_efree(((key)))", "i = (0)", "i = (1)", "i = (10)", "i = (128)", "i = (16)", "i = (2)", "i = (3)", "i = (32)", "i = (4)", "i = (5)", "i = (78)", "i = (i)", "i = (myht) ? zend_hash_num_elements(myht) : 0", "i = (need_comma)", "i = (options)", "i = (r)", "i = (tmp_ht) ? zend_hash_num_elements(myht) : 0", "i = myht ? zend_hash_num_elements((myht)) : 0", "i = myht ? zend_hash_num_elements((tmp_ht)) : 0", "i = zend_hash_get_current_key_ex((myht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex((tmp_ht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &(key), &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &(pos))", "json_escape_string((buf), key, key_len - 1, options)", "json_escape_string(buf, (key), key_len - 1, options)", "json_pretty_print_char((buf), options, ' ')", "json_pretty_print_char((buf), options, '\\n')", "json_pretty_print_indent((buf), options)", "myht = ((**(data))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(data)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**(val))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(val)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(data)))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(val)))", "myht = ((**val).type == 4 ? (**(data)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**(val)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(data)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(val)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(data)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(val)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "myht = (myht)", "myht = (tmp_ht)", "need_comma = (0)", "need_comma = (1)", "need_comma = (10)", "need_comma = (128)", "need_comma = (16)", "need_comma = (2)", "need_comma = (3)", "need_comma = (32)", "need_comma = (4)", "need_comma = (5)", "need_comma = (78)", "need_comma = (i)", "need_comma = (need_comma)", "need_comma = (options)", "need_comma = (r)", "php_json_encode((buf), *data, options)", "php_json_encode(buf, *(data), options)", "php_json_encode(buf, *(val), options)", "r = (0)", "r = (1)", "r = (10)", "r = (128)", "r = (16)", "r = (2)", "r = (3)", "r = (32)", "r = (4)", "r = (5)", "r = (78)", "r = (i)", "r = (need_comma)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((data))", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((val))", "r = (options)", "r = (r)", "tmp_ht = ((**(data)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**(val)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(data)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(val)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(data)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(val)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(data)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(val)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "tmp_ht = (myht)", "tmp_ht = (tmp_ht)", "zend_hash_internal_pointer_reset_ex((myht), &pos)", "zend_hash_internal_pointer_reset_ex((tmp_ht), &pos)", "zend_hash_internal_pointer_reset_ex(myht, &(pos))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "exit(1)", "i = myht ? zend_hash_num_elements(myht) : 0", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &pos)", "json_escape_string(buf, key, key_len - 1, options)", "json_pretty_print_char(buf, options, ' ')", "json_pretty_print_char(buf, options, '\\n')", "json_pretty_print_indent(buf, options)", "myht = ((**val)).value.obj.handlers->get_properties(&(**val))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "need_comma = 1", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "php_json_encode(buf, *data, options)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type(val)", "r = 1", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht->nApplyCount++", "tmp_ht->nApplyCount--", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_internal_pointer_reset_ex(myht, &pos)", "if (__is_neg(\"\", \"L305\", 13, &(buf), sizeof (buf), &(options), sizeof (options), &(data), sizeof (data), &(need_comma), sizeof (need_comma), &(key), sizeof (key), &(key_len), sizeof (key_len), &(index), sizeof (index), &(tmp_ht), sizeof (tmp_ht), &(val), sizeof (val), &(i), sizeof (i), &(r), sizeof (r), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    break;\n", "if (__is_neg(\"\", \"L305\", 13, &(buf), sizeof (buf), &(options), sizeof (options), &(data), sizeof (data), &(need_comma), sizeof (need_comma), &(key), sizeof (key), &(key_len), sizeof (key_len), &(index), sizeof (index), &(tmp_ht), sizeof (tmp_ht), &(val), sizeof (val), &(i), sizeof (i), &(r), sizeof (r), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.85155093234444]
								}, {
									"case":	2,
									"scores":	[-7.85155093234444]
								}, {
									"case":	3,
									"scores":	[-7.85155093234444]
								}, {
									"case":	4,
									"scores":	[-7.85155093234444]
								}, {
									"case":	5,
									"scores":	[-7.85155093234444]
								}, {
									"case":	6,
									"scores":	[-7.85155093234444]
								}, {
									"case":	7,
									"scores":	[-7.85155093234444]
								}, {
									"case":	8,
									"scores":	[-7.85155093234444]
								}, {
									"case":	9,
									"scores":	[-7.85155093234444]
								}, {
									"case":	10,
									"scores":	[-7.85155093234444]
								}, {
									"case":	11,
									"scores":	[-7.85155093234444]
								}, {
									"case":	12,
									"scores":	[-7.85155093234444]
								}, {
									"case":	13,
									"scores":	[-7.85155093234444]
								}, {
									"case":	14,
									"scores":	[-7.85155093234444]
								}, {
									"case":	15,
									"scores":	[-7.85155093234444]
								}, {
									"case":	16,
									"scores":	[-7.85155093234444]
								}, {
									"case":	17,
									"scores":	[-7.85155093234444]
								}, {
									"case":	18,
									"scores":	[-7.85155093234444]
								}, {
									"case":	19,
									"scores":	[-7.85155093234444]
								}, {
									"case":	20,
									"scores":	[-7.85155093234444]
								}, {
									"case":	21,
									"scores":	[-7.85155093234444]
								}, {
									"case":	22,
									"scores":	[-7.85155093234444]
								}, {
									"case":	23,
									"scores":	[-7.85155093234444]
								}, {
									"case":	24,
									"scores":	[-7.85155093234444]
								}, {
									"case":	25,
									"scores":	[-7.85155093234444]
								}, {
									"case":	26,
									"scores":	[-7.85155093234444]
								}, {
									"case":	27,
									"scores":	[-7.85155093234444]
								}, {
									"case":	28,
									"scores":	[-7.85155093234444]
								}, {
									"case":	29,
									"scores":	[-7.85155093234444]
								}, {
									"case":	30,
									"scores":	[-7.85155093234444]
								}, {
									"case":	31,
									"scores":	[-7.85155093234444]
								}, {
									"case":	32,
									"scores":	[-7.85155093234444]
								}, {
									"case":	33,
									"scores":	[-7.85155093234444]
								}, {
									"case":	34,
									"scores":	[-7.85155093234444]
								}, {
									"case":	35,
									"scores":	[-7.85155093234444]
								}, {
									"case":	36,
									"scores":	[-7.85155093234444]
								}, {
									"case":	37,
									"scores":	[-7.85155093234444]
								}, {
									"case":	38,
									"scores":	[-7.85155093234444]
								}, {
									"case":	39,
									"scores":	[-7.85155093234444]
								}, {
									"case":	40,
									"scores":	[-7.85155093234444]
								}, {
									"case":	41,
									"scores":	[-7.85155093234444]
								}, {
									"case":	42,
									"scores":	[-7.85155093234444]
								}, {
									"case":	43,
									"scores":	[-7.85155093234444]
								}, {
									"case":	44,
									"scores":	[-7.85155093234444]
								}, {
									"case":	45,
									"scores":	[-7.85155093234444]
								}, {
									"case":	46,
									"scores":	[-7.85155093234444]
								}, {
									"case":	47,
									"scores":	[-7.85155093234444]
								}, {
									"case":	48,
									"scores":	[-7.85155093234444]
								}, {
									"case":	49,
									"scores":	[-7.85155093234444]
								}, {
									"case":	50,
									"scores":	[-7.85155093234444]
								}, {
									"case":	51,
									"scores":	[-7.85155093234444]
								}, {
									"case":	52,
									"scores":	[-7.85155093234444]
								}, {
									"case":	53,
									"scores":	[-7.85155093234444]
								}, {
									"case":	54,
									"scores":	[-7.85155093234444]
								}, {
									"case":	55,
									"scores":	[-7.85155093234444]
								}, {
									"case":	56,
									"scores":	[-7.85155093234444]
								}, {
									"case":	57,
									"scores":	[-7.85155093234444]
								}, {
									"case":	58,
									"scores":	[-7.85155093234444]
								}, {
									"case":	59,
									"scores":	[-7.85155093234444]
								}, {
									"case":	60,
									"scores":	[-7.85155093234444]
								}, {
									"case":	61,
									"scores":	[-7.85155093234444]
								}, {
									"case":	62,
									"scores":	[-7.85155093234444]
								}, {
									"case":	63,
									"scores":	[-7.85155093234444]
								}, {
									"case":	64,
									"scores":	[-7.85155093234444]
								}, {
									"case":	65,
									"scores":	[-7.85155093234444]
								}, {
									"case":	66,
									"scores":	[-7.85155093234444]
								}, {
									"case":	67,
									"scores":	[-7.85155093234444]
								}, {
									"case":	68,
									"scores":	[-7.85155093234444]
								}, {
									"case":	69,
									"scores":	[-7.85155093234444]
								}, {
									"case":	70,
									"scores":	[-7.85155093234444]
								}, {
									"case":	71,
									"scores":	[-7.85155093234444]
								}, {
									"case":	72,
									"scores":	[-7.85155093234444]
								}, {
									"case":	73,
									"scores":	[-7.85155093234444]
								}, {
									"case":	74,
									"scores":	[-7.85155093234444]
								}, {
									"case":	75,
									"scores":	[-7.85155093234444]
								}, {
									"case":	76,
									"scores":	[-7.85155093234444]
								}, {
									"case":	77,
									"scores":	[-7.85155093234444]
								}, {
									"case":	78,
									"scores":	[-7.85155093234444]
								}, {
									"case":	79,
									"scores":	[-7.85155093234444]
								}, {
									"case":	80,
									"scores":	[-7.85155093234444]
								}, {
									"case":	81,
									"scores":	[-7.85155093234444]
								}, {
									"case":	82,
									"scores":	[-7.85155093234444]
								}, {
									"case":	83,
									"scores":	[-7.85155093234444]
								}, {
									"case":	84,
									"scores":	[-7.85155093234444]
								}, {
									"case":	85,
									"scores":	[-7.85155093234444]
								}, {
									"case":	86,
									"scores":	[-7.85155093234444]
								}, {
									"case":	87,
									"scores":	[-7.85155093234444]
								}, {
									"case":	88,
									"scores":	[-7.85155093234444]
								}, {
									"case":	89,
									"scores":	[-7.85155093234444]
								}, {
									"case":	90,
									"scores":	[-7.85155093234444]
								}, {
									"case":	91,
									"scores":	[-7.85155093234444]
								}, {
									"case":	92,
									"scores":	[-7.85155093234444]
								}, {
									"case":	93,
									"scores":	[-7.85155093234444]
								}, {
									"case":	94,
									"scores":	[-7.85155093234444]
								}, {
									"case":	95,
									"scores":	[-7.85155093234444]
								}, {
									"case":	96,
									"scores":	[-7.85155093234444]
								}, {
									"case":	97,
									"scores":	[-7.85155093234444]
								}, {
									"case":	98,
									"scores":	[-7.85155093234444]
								}, {
									"case":	99,
									"scores":	[-7.85155093234444]
								}, {
									"case":	100,
									"scores":	[-7.85155093234444]
								}, {
									"case":	101,
									"scores":	[-7.85155093234444]
								}, {
									"case":	102,
									"scores":	[-7.85155093234444]
								}, {
									"case":	103,
									"scores":	[-7.85155093234444]
								}, {
									"case":	104,
									"scores":	[-7.85155093234444]
								}, {
									"case":	105,
									"scores":	[-7.85155093234444]
								}, {
									"case":	106,
									"scores":	[-7.85155093234444]
								}, {
									"case":	107,
									"scores":	[-7.85155093234444]
								}, {
									"case":	108,
									"scores":	[-7.85155093234444]
								}, {
									"case":	109,
									"scores":	[-7.85155093234444]
								}, {
									"case":	110,
									"scores":	[-7.85155093234444]
								}, {
									"case":	111,
									"scores":	[-7.85155093234444]
								}, {
									"case":	112,
									"scores":	[-7.85155093234444]
								}, {
									"case":	113,
									"scores":	[-7.85155093234444]
								}, {
									"case":	114,
									"scores":	[-7.85155093234444]
								}, {
									"case":	115,
									"scores":	[-7.85155093234444]
								}, {
									"case":	116,
									"scores":	[-7.85155093234444]
								}, {
									"case":	117,
									"scores":	[-7.85155093234444]
								}, {
									"case":	118,
									"scores":	[-7.85155093234444]
								}, {
									"case":	119,
									"scores":	[-7.85155093234444]
								}, {
									"case":	120,
									"scores":	[-7.85155093234444]
								}, {
									"case":	121,
									"scores":	[-7.85155093234444]
								}, {
									"case":	122,
									"scores":	[-7.85155093234444]
								}, {
									"case":	123,
									"scores":	[-7.85155093234444]
								}, {
									"case":	124,
									"scores":	[-7.85155093234444]
								}, {
									"case":	125,
									"scores":	[-7.85155093234444]
								}, {
									"case":	126,
									"scores":	[-7.85155093234444]
								}, {
									"case":	127,
									"scores":	[-7.85155093234444]
								}, {
									"case":	128,
									"scores":	[-7.85155093234444]
								}, {
									"case":	129,
									"scores":	[-7.85155093234444]
								}, {
									"case":	130,
									"scores":	[-7.85155093234444]
								}, {
									"case":	131,
									"scores":	[-7.85155093234444]
								}, {
									"case":	132,
									"scores":	[-7.85155093234444]
								}, {
									"case":	133,
									"scores":	[-7.85155093234444]
								}, {
									"case":	134,
									"scores":	[-7.85155093234444]
								}, {
									"case":	135,
									"scores":	[-7.85155093234444]
								}, {
									"case":	136,
									"scores":	[-7.85155093234444]
								}, {
									"case":	137,
									"scores":	[-7.85155093234444]
								}, {
									"case":	138,
									"scores":	[-7.85155093234444]
								}, {
									"case":	139,
									"scores":	[-7.85155093234444]
								}, {
									"case":	140,
									"scores":	[-7.85155093234444]
								}, {
									"case":	141,
									"scores":	[-7.85155093234444]
								}, {
									"case":	142,
									"scores":	[-7.85155093234444]
								}, {
									"case":	143,
									"scores":	[-7.85155093234444]
								}, {
									"case":	144,
									"scores":	[-7.85155093234444]
								}, {
									"case":	145,
									"scores":	[-7.85155093234444]
								}, {
									"case":	146,
									"scores":	[-7.85155093234444]
								}, {
									"case":	147,
									"scores":	[-7.85155093234444]
								}, {
									"case":	148,
									"scores":	[-7.85155093234444]
								}, {
									"case":	149,
									"scores":	[-7.85155093234444]
								}, {
									"case":	150,
									"scores":	[-7.85155093234444]
								}, {
									"case":	151,
									"scores":	[-7.85155093234444]
								}, {
									"case":	152,
									"scores":	[-7.85155093234444]
								}, {
									"case":	153,
									"scores":	[-7.85155093234444]
								}, {
									"case":	154,
									"scores":	[-7.85155093234444]
								}, {
									"case":	155,
									"scores":	[-7.85155093234444]
								}, {
									"case":	156,
									"scores":	[-7.85155093234444]
								}, {
									"case":	157,
									"scores":	[-7.85155093234444]
								}, {
									"case":	158,
									"scores":	[-7.85155093234444]
								}, {
									"case":	159,
									"scores":	[-7.85155093234444]
								}, {
									"case":	160,
									"scores":	[-7.85155093234444]
								}, {
									"case":	161,
									"scores":	[-7.85155093234444]
								}, {
									"case":	162,
									"scores":	[-7.85155093234444]
								}, {
									"case":	163,
									"scores":	[-7.85155093234444]
								}, {
									"case":	164,
									"scores":	[-7.85155093234444]
								}, {
									"case":	165,
									"scores":	[-7.85155093234444]
								}, {
									"case":	166,
									"scores":	[-7.85155093234444]
								}, {
									"case":	167,
									"scores":	[-7.85155093234444]
								}, {
									"case":	168,
									"scores":	[-7.85155093234444]
								}, {
									"case":	169,
									"scores":	[-7.85155093234444]
								}, {
									"case":	170,
									"scores":	[-7.85155093234444]
								}, {
									"case":	171,
									"scores":	[-7.85155093234444]
								}, {
									"case":	172,
									"scores":	[-7.85155093234444]
								}, {
									"case":	173,
									"scores":	[-7.85155093234444]
								}, {
									"case":	174,
									"scores":	[-7.85155093234444]
								}, {
									"case":	175,
									"scores":	[-7.85155093234444]
								}, {
									"case":	176,
									"scores":	[-7.85155093234444]
								}, {
									"case":	177,
									"scores":	[-7.85155093234444]
								}, {
									"case":	178,
									"scores":	[-7.85155093234444]
								}, {
									"case":	179,
									"scores":	[-7.85155093234444]
								}, {
									"case":	180,
									"scores":	[-7.85155093234444]
								}, {
									"case":	181,
									"scores":	[-7.85155093234444]
								}, {
									"case":	182,
									"scores":	[-7.85155093234444]
								}, {
									"case":	183,
									"scores":	[-7.85155093234444]
								}, {
									"case":	184,
									"scores":	[-7.85155093234444]
								}, {
									"case":	185,
									"scores":	[-7.85155093234444]
								}, {
									"case":	186,
									"scores":	[-7.85155093234444]
								}, {
									"case":	187,
									"scores":	[-7.85155093234444]
								}, {
									"case":	188,
									"scores":	[-7.85155093234444]
								}, {
									"case":	189,
									"scores":	[-7.85155093234444]
								}, {
									"case":	190,
									"scores":	[-7.85155093234444]
								}, {
									"case":	191,
									"scores":	[-7.85155093234444]
								}, {
									"case":	192,
									"scores":	[-7.85155093234444]
								}, {
									"case":	193,
									"scores":	[-7.85155093234444]
								}, {
									"case":	194,
									"scores":	[-7.85155093234444]
								}, {
									"case":	195,
									"scores":	[-7.85155093234444]
								}, {
									"case":	196,
									"scores":	[-7.85155093234444]
								}, {
									"case":	197,
									"scores":	[-7.85155093234444]
								}, {
									"case":	198,
									"scores":	[-7.85155093234444]
								}, {
									"case":	199,
									"scores":	[-7.85155093234444]
								}, {
									"case":	200,
									"scores":	[-7.85155093234444]
								}, {
									"case":	201,
									"scores":	[-7.85155093234444]
								}, {
									"case":	202,
									"scores":	[-7.85155093234444]
								}, {
									"case":	203,
									"scores":	[-7.85155093234444]
								}, {
									"case":	204,
									"scores":	[-7.85155093234444]
								}, {
									"case":	205,
									"scores":	[-7.85155093234444]
								}, {
									"case":	206,
									"scores":	[-7.85155093234444]
								}, {
									"case":	207,
									"scores":	[-7.85155093234444]
								}, {
									"case":	208,
									"scores":	[-7.85155093234444]
								}, {
									"case":	209,
									"scores":	[-7.85155093234444]
								}, {
									"case":	210,
									"scores":	[-7.85155093234444]
								}, {
									"case":	211,
									"scores":	[-7.85155093234444]
								}, {
									"case":	212,
									"scores":	[-7.85155093234444]
								}, {
									"case":	213,
									"scores":	[-7.85155093234444]
								}, {
									"case":	214,
									"scores":	[-7.85155093234444]
								}, {
									"case":	215,
									"scores":	[-7.85155093234444]
								}, {
									"case":	216,
									"scores":	[-7.85155093234444]
								}, {
									"case":	217,
									"scores":	[-7.85155093234444]
								}, {
									"case":	218,
									"scores":	[-7.85155093234444]
								}, {
									"case":	219,
									"scores":	[-7.85155093234444]
								}, {
									"case":	220,
									"scores":	[-7.85155093234444]
								}, {
									"case":	221,
									"scores":	[-7.85155093234444]
								}, {
									"case":	222,
									"scores":	[-7.85155093234444]
								}, {
									"case":	223,
									"scores":	[-7.85155093234444]
								}, {
									"case":	224,
									"scores":	[-7.85155093234444]
								}, {
									"case":	225,
									"scores":	[-7.85155093234444]
								}, {
									"case":	226,
									"scores":	[-7.85155093234444]
								}, {
									"case":	227,
									"scores":	[-7.85155093234444]
								}, {
									"case":	228,
									"scores":	[-7.85155093234444]
								}, {
									"case":	229,
									"scores":	[-7.85155093234444]
								}, {
									"case":	230,
									"scores":	[-7.85155093234444]
								}, {
									"case":	231,
									"scores":	[-7.85155093234444]
								}, {
									"case":	232,
									"scores":	[-7.85155093234444]
								}, {
									"case":	233,
									"scores":	[-7.85155093234444]
								}, {
									"case":	234,
									"scores":	[-7.85155093234444]
								}, {
									"case":	235,
									"scores":	[-7.85155093234444]
								}, {
									"case":	236,
									"scores":	[-7.85155093234444]
								}, {
									"case":	237,
									"scores":	[-7.85155093234444]
								}, {
									"case":	238,
									"scores":	[-9.56336213454444, -8.99613480074444, -10.392147584744441, -9.79422828974444, -10.282816660744441, -9.82244796074444, -10.051813463744441, -10.040267203544442, -10.299802980744442, -10.051813463744441, -9.79422828974444, -10.297852377544441, -10.297852377544441]
								}, {
									"case":	239,
									"scores":	[-9.56336213454444, -8.99613480074444, -10.392147584744441, -9.79422828974444, -10.282816660744441, -9.82244796074444, -10.051813463744441, -10.040267203544442, -10.299802980744442, -10.051813463744441, -9.79422828974444, -10.297852377544441, -10.297852377544441]
								}]
						}, {
							"switch":	38,
							"types":	[[], [], [1], [], [], [], [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200], [], [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [18]],
							"begin_line":	305,
							"begin_column":	7,
							"end_line":	305,
							"end_column":	52,
							"patch_codes":	["if (!__is_neg(\"\", \"L305\", 13, &(buf), sizeof (buf), &(options), sizeof (options), &(data), sizeof (data), &(need_comma), sizeof (need_comma), &(key), sizeof (key), &(key_len), sizeof (key_len), &(index), sizeof (index), &(tmp_ht), sizeof (tmp_ht), &(val), sizeof (val), &(i), sizeof (i), &(r), sizeof (r), &(myht), sizeof (myht), &(pos), sizeof (pos)))\n    php_json_encode(buf, *data, options);\n", "json_escape_string(buf, *data, options, 0)", "json_escape_string(buf, *data, options, 1)", "json_escape_string(buf, *data, options, 10)", "json_escape_string(buf, *data, options, 128)", "json_escape_string(buf, *data, options, 16)", "json_escape_string(buf, *data, options, 2)", "json_escape_string(buf, *data, options, 3)", "json_escape_string(buf, *data, options, 32)", "json_escape_string(buf, *data, options, 4)", "json_escape_string(buf, *data, options, 5)", "json_escape_string(buf, *data, options, 78)", "json_escape_string(buf, *data, options, i)", "json_escape_string(buf, *data, options, le_index_ptr)", "json_escape_string(buf, *data, options, need_comma)", "json_escape_string(buf, *data, options, options)", "json_escape_string(buf, *data, options, r)", "{\n}\n", "Debug(buf, *data, options)", "json_encode_array(buf, *data, options)", "json_encode_serializable_object(buf, *data, options)", "php_json_encode(buf, *data, options)", "php_printf(buf, *data, options)", "php_stream_filter_create(buf, *data, options)", "printf(buf, *data, options)", "zend_get_property_info(buf, *data, options)", "zend_print_zval_ex(buf, *data, options)", "zend_print_zval_r_ex(buf, *data, options)", "zend_std_cast_object_tostring(buf, *data, options)", "php_json_encode((&buf), *data, options)", "php_json_encode((&data), *data, options)", "php_json_encode((&i), *data, options)", "php_json_encode((&index), *data, options)", "php_json_encode((&key), *data, options)", "php_json_encode((&key_len), *data, options)", "php_json_encode((&myht), *data, options)", "php_json_encode((&need_comma), *data, options)", "php_json_encode((&options), *data, options)", "php_json_encode((&pos), *data, options)", "php_json_encode((&r), *data, options)", "php_json_encode((&tmp_ht), *data, options)", "php_json_encode((&val), *data, options)", "php_json_encode((buf), *data, options)", "php_json_encode(buf, *(&buf), options)", "php_json_encode(buf, *(&data), options)", "php_json_encode(buf, *(&i), options)", "php_json_encode(buf, *(&index), options)", "php_json_encode(buf, *(&key), options)", "php_json_encode(buf, *(&key_len), options)", "php_json_encode(buf, *(&myht), options)", "php_json_encode(buf, *(&need_comma), options)", "php_json_encode(buf, *(&options), options)", "php_json_encode(buf, *(&pos), options)", "php_json_encode(buf, *(&r), options)", "php_json_encode(buf, *(&tmp_ht), options)", "php_json_encode(buf, *(&val), options)", "php_json_encode(buf, *(data), options)", "php_json_encode(buf, *(val), options)", "php_json_encode(buf, *data, (0 * i))", "php_json_encode(buf, *data, (0 * index))", "php_json_encode(buf, *data, (0 * key_len))", "php_json_encode(buf, *data, (0 * need_comma))", "php_json_encode(buf, *data, (0 * options))", "php_json_encode(buf, *data, (0 * r))", "php_json_encode(buf, *data, (buf != 0))", "php_json_encode(buf, *data, (buf == 0))", "php_json_encode(buf, *data, (data != 0))", "php_json_encode(buf, *data, (data == 0))", "php_json_encode(buf, *data, (i != 0))", "php_json_encode(buf, *data, (i != index))", "php_json_encode(buf, *data, (i != key_len))", "php_json_encode(buf, *data, (i != need_comma))", "php_json_encode(buf, *data, (i != r))", "php_json_encode(buf, *data, (i * index))", "php_json_encode(buf, *data, (i * key_len))", "php_json_encode(buf, *data, (i * need_comma))", "php_json_encode(buf, *data, (i * options))", "php_json_encode(buf, *data, (i * r))", "php_json_encode(buf, *data, (i + 0))", "php_json_encode(buf, *data, (i + index))", "php_json_encode(buf, *data, (i + key_len))", "php_json_encode(buf, *data, (i + need_comma))", "php_json_encode(buf, *data, (i + r))", "php_json_encode(buf, *data, (i - 0))", "php_json_encode(buf, *data, (i - index))", "php_json_encode(buf, *data, (i - key_len))", "php_json_encode(buf, *data, (i - need_comma))", "php_json_encode(buf, *data, (i - r))", "php_json_encode(buf, *data, (i == 0))", "php_json_encode(buf, *data, (i == index))", "php_json_encode(buf, *data, (i == key_len))", "php_json_encode(buf, *data, (i == need_comma))", "php_json_encode(buf, *data, (i == r))", "php_json_encode(buf, *data, (i))", "php_json_encode(buf, *data, (index != 0))", "php_json_encode(buf, *data, (index != key_len))", "php_json_encode(buf, *data, (index != need_comma))", "php_json_encode(buf, *data, (index * i))", "php_json_encode(buf, *data, (index * key_len))", "php_json_encode(buf, *data, (index * need_comma))", "php_json_encode(buf, *data, (index * options))", "php_json_encode(buf, *data, (index * r))", "php_json_encode(buf, *data, (index + 0))", "php_json_encode(buf, *data, (index + key_len))", "php_json_encode(buf, *data, (index + need_comma))", "php_json_encode(buf, *data, (index - 0))", "php_json_encode(buf, *data, (index - key_len))", "php_json_encode(buf, *data, (index - need_comma))", "php_json_encode(buf, *data, (index == 0))", "php_json_encode(buf, *data, (index == key_len))", "php_json_encode(buf, *data, (index == need_comma))", "php_json_encode(buf, *data, (key != 0))", "php_json_encode(buf, *data, (key == 0))", "php_json_encode(buf, *data, (key_len != 0))", "php_json_encode(buf, *data, (key_len != need_comma))", "php_json_encode(buf, *data, (key_len * i))", "php_json_encode(buf, *data, (key_len * index))", "php_json_encode(buf, *data, (key_len * need_comma))", "php_json_encode(buf, *data, (key_len * options))", "php_json_encode(buf, *data, (key_len * r))", "php_json_encode(buf, *data, (key_len + 0))", "php_json_encode(buf, *data, (key_len + need_comma))", "php_json_encode(buf, *data, (key_len - 0))", "php_json_encode(buf, *data, (key_len - need_comma))", "php_json_encode(buf, *data, (key_len == 0))", "php_json_encode(buf, *data, (key_len == need_comma))", "php_json_encode(buf, *data, (myht != 0))", "php_json_encode(buf, *data, (myht != tmp_ht))", "php_json_encode(buf, *data, (myht == 0))", "php_json_encode(buf, *data, (myht == tmp_ht))", "php_json_encode(buf, *data, (need_comma != 0))", "php_json_encode(buf, *data, (need_comma * i))", "php_json_encode(buf, *data, (need_comma * index))", "php_json_encode(buf, *data, (need_comma * key_len))", "php_json_encode(buf, *data, (need_comma * options))", "php_json_encode(buf, *data, (need_comma * r))", "php_json_encode(buf, *data, (need_comma + 0))", "php_json_encode(buf, *data, (need_comma - 0))", "php_json_encode(buf, *data, (need_comma == 0))", "php_json_encode(buf, *data, (need_comma))", "php_json_encode(buf, *data, (options != 0))", "php_json_encode(buf, *data, (options != i))", "php_json_encode(buf, *data, (options != index))", "php_json_encode(buf, *data, (options != key_len))", "php_json_encode(buf, *data, (options != need_comma))", "php_json_encode(buf, *data, (options != r))", "php_json_encode(buf, *data, (options * i))", "php_json_encode(buf, *data, (options * index))", "php_json_encode(buf, *data, (options * key_len))", "php_json_encode(buf, *data, (options * need_comma))", "php_json_encode(buf, *data, (options * r))", "php_json_encode(buf, *data, (options + 0))", "php_json_encode(buf, *data, (options + i))", "php_json_encode(buf, *data, (options + index))", "php_json_encode(buf, *data, (options + key_len))", "php_json_encode(buf, *data, (options + need_comma))", "php_json_encode(buf, *data, (options + r))", "php_json_encode(buf, *data, (options - 0))", "php_json_encode(buf, *data, (options - i))", "php_json_encode(buf, *data, (options - index))", "php_json_encode(buf, *data, (options - key_len))", "php_json_encode(buf, *data, (options - need_comma))", "php_json_encode(buf, *data, (options - r))", "php_json_encode(buf, *data, (options == 0))", "php_json_encode(buf, *data, (options == i))", "php_json_encode(buf, *data, (options == index))", "php_json_encode(buf, *data, (options == key_len))", "php_json_encode(buf, *data, (options == need_comma))", "php_json_encode(buf, *data, (options == r))", "php_json_encode(buf, *data, (options))", "php_json_encode(buf, *data, (pos != 0))", "php_json_encode(buf, *data, (pos == 0))", "php_json_encode(buf, *data, (r != 0))", "php_json_encode(buf, *data, (r != index))", "php_json_encode(buf, *data, (r != key_len))", "php_json_encode(buf, *data, (r != need_comma))", "php_json_encode(buf, *data, (r * i))", "php_json_encode(buf, *data, (r * index))", "php_json_encode(buf, *data, (r * key_len))", "php_json_encode(buf, *data, (r * need_comma))", "php_json_encode(buf, *data, (r * options))", "php_json_encode(buf, *data, (r + 0))", "php_json_encode(buf, *data, (r + index))", "php_json_encode(buf, *data, (r + key_len))", "php_json_encode(buf, *data, (r + need_comma))", "php_json_encode(buf, *data, (r - 0))", "php_json_encode(buf, *data, (r - index))", "php_json_encode(buf, *data, (r - key_len))", "php_json_encode(buf, *data, (r - need_comma))", "php_json_encode(buf, *data, (r == 0))", "php_json_encode(buf, *data, (r == index))", "php_json_encode(buf, *data, (r == key_len))", "php_json_encode(buf, *data, (r == need_comma))", "php_json_encode(buf, *data, (r))", "php_json_encode(buf, *data, (tmp_ht != 0))", "php_json_encode(buf, *data, (tmp_ht == 0))", "php_json_encode(buf, *data, (val != 0))", "php_json_encode(buf, *data, (val != data))", "php_json_encode(buf, *data, (val == 0))", "php_json_encode(buf, *data, (val == data))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.09834683884444, -8.46923424834444, -7.45410690234444, -8.79933590234444, -9.67137644834444, -9.22055807234444, -9.11313360234444, -9.55722400234444, -9.87674440234444, -9.11313360234444, -8.79933590234444, -9.87102170234444, -9.87102170234444]
								}, {
									"case":	2,
									"scores":	[-7.85155093234444]
								}, {
									"case":	3,
									"scores":	[-7.85155093234444]
								}, {
									"case":	4,
									"scores":	[-7.85155093234444]
								}, {
									"case":	5,
									"scores":	[-7.85155093234444]
								}, {
									"case":	6,
									"scores":	[-7.85155093234444]
								}, {
									"case":	7,
									"scores":	[-7.85155093234444]
								}, {
									"case":	8,
									"scores":	[-7.85155093234444]
								}, {
									"case":	9,
									"scores":	[-7.85155093234444]
								}, {
									"case":	10,
									"scores":	[-7.85155093234444]
								}, {
									"case":	11,
									"scores":	[-7.85155093234444]
								}, {
									"case":	12,
									"scores":	[-7.85155093234444]
								}, {
									"case":	13,
									"scores":	[-7.85155093234444]
								}, {
									"case":	14,
									"scores":	[-7.85155093234444]
								}, {
									"case":	15,
									"scores":	[-7.85155093234444]
								}, {
									"case":	16,
									"scores":	[-7.85155093234444]
								}, {
									"case":	17,
									"scores":	[-7.85155093234444]
								}, {
									"case":	18,
									"scores":	[-7.85155093234444]
								}, {
									"case":	19,
									"scores":	[-7.85155093234444]
								}, {
									"case":	20,
									"scores":	[-7.85155093234444]
								}, {
									"case":	21,
									"scores":	[-7.85155093234444]
								}, {
									"case":	22,
									"scores":	[-7.85155093234444]
								}, {
									"case":	23,
									"scores":	[-7.85155093234444]
								}, {
									"case":	24,
									"scores":	[-7.85155093234444]
								}, {
									"case":	25,
									"scores":	[-7.85155093234444]
								}, {
									"case":	26,
									"scores":	[-7.85155093234444]
								}, {
									"case":	27,
									"scores":	[-7.85155093234444]
								}, {
									"case":	28,
									"scores":	[-7.85155093234444]
								}, {
									"case":	29,
									"scores":	[-7.85155093234444]
								}, {
									"case":	30,
									"scores":	[-7.85155093234444]
								}, {
									"case":	31,
									"scores":	[-7.85155093234444]
								}, {
									"case":	32,
									"scores":	[-7.85155093234444]
								}, {
									"case":	33,
									"scores":	[-7.85155093234444]
								}, {
									"case":	34,
									"scores":	[-7.85155093234444]
								}, {
									"case":	35,
									"scores":	[-7.85155093234444]
								}, {
									"case":	36,
									"scores":	[-7.85155093234444]
								}, {
									"case":	37,
									"scores":	[-7.85155093234444]
								}, {
									"case":	38,
									"scores":	[-7.85155093234444]
								}, {
									"case":	39,
									"scores":	[-7.85155093234444]
								}, {
									"case":	40,
									"scores":	[-7.85155093234444]
								}, {
									"case":	41,
									"scores":	[-7.85155093234444]
								}, {
									"case":	42,
									"scores":	[-7.85155093234444]
								}, {
									"case":	43,
									"scores":	[-7.85155093234444]
								}, {
									"case":	44,
									"scores":	[-7.85155093234444]
								}, {
									"case":	45,
									"scores":	[-7.85155093234444]
								}, {
									"case":	46,
									"scores":	[-7.85155093234444]
								}, {
									"case":	47,
									"scores":	[-7.85155093234444]
								}, {
									"case":	48,
									"scores":	[-7.85155093234444]
								}, {
									"case":	49,
									"scores":	[-7.85155093234444]
								}, {
									"case":	50,
									"scores":	[-7.85155093234444]
								}, {
									"case":	51,
									"scores":	[-7.85155093234444]
								}, {
									"case":	52,
									"scores":	[-7.85155093234444]
								}, {
									"case":	53,
									"scores":	[-7.85155093234444]
								}, {
									"case":	54,
									"scores":	[-7.85155093234444]
								}, {
									"case":	55,
									"scores":	[-7.85155093234444]
								}, {
									"case":	56,
									"scores":	[-7.85155093234444]
								}, {
									"case":	57,
									"scores":	[-7.85155093234444]
								}, {
									"case":	58,
									"scores":	[-7.85155093234444]
								}, {
									"case":	59,
									"scores":	[-7.85155093234444]
								}, {
									"case":	60,
									"scores":	[-7.85155093234444]
								}, {
									"case":	61,
									"scores":	[-7.85155093234444]
								}, {
									"case":	62,
									"scores":	[-7.85155093234444]
								}, {
									"case":	63,
									"scores":	[-7.85155093234444]
								}, {
									"case":	64,
									"scores":	[-7.85155093234444]
								}, {
									"case":	65,
									"scores":	[-7.85155093234444]
								}, {
									"case":	66,
									"scores":	[-7.85155093234444]
								}, {
									"case":	67,
									"scores":	[-7.85155093234444]
								}, {
									"case":	68,
									"scores":	[-7.85155093234444]
								}, {
									"case":	69,
									"scores":	[-7.85155093234444]
								}, {
									"case":	70,
									"scores":	[-7.85155093234444]
								}, {
									"case":	71,
									"scores":	[-7.85155093234444]
								}, {
									"case":	72,
									"scores":	[-7.85155093234444]
								}, {
									"case":	73,
									"scores":	[-7.85155093234444]
								}, {
									"case":	74,
									"scores":	[-7.85155093234444]
								}, {
									"case":	75,
									"scores":	[-7.85155093234444]
								}, {
									"case":	76,
									"scores":	[-7.85155093234444]
								}, {
									"case":	77,
									"scores":	[-7.85155093234444]
								}, {
									"case":	78,
									"scores":	[-7.85155093234444]
								}, {
									"case":	79,
									"scores":	[-7.85155093234444]
								}, {
									"case":	80,
									"scores":	[-7.85155093234444]
								}, {
									"case":	81,
									"scores":	[-7.85155093234444]
								}, {
									"case":	82,
									"scores":	[-7.85155093234444]
								}, {
									"case":	83,
									"scores":	[-7.85155093234444]
								}, {
									"case":	84,
									"scores":	[-7.85155093234444]
								}, {
									"case":	85,
									"scores":	[-7.85155093234444]
								}, {
									"case":	86,
									"scores":	[-7.85155093234444]
								}, {
									"case":	87,
									"scores":	[-7.85155093234444]
								}, {
									"case":	88,
									"scores":	[-7.85155093234444]
								}, {
									"case":	89,
									"scores":	[-7.85155093234444]
								}, {
									"case":	90,
									"scores":	[-7.85155093234444]
								}, {
									"case":	91,
									"scores":	[-7.85155093234444]
								}, {
									"case":	92,
									"scores":	[-7.85155093234444]
								}, {
									"case":	93,
									"scores":	[-7.85155093234444]
								}, {
									"case":	94,
									"scores":	[-7.85155093234444]
								}, {
									"case":	95,
									"scores":	[-7.85155093234444]
								}, {
									"case":	96,
									"scores":	[-7.85155093234444]
								}, {
									"case":	97,
									"scores":	[-7.85155093234444]
								}, {
									"case":	98,
									"scores":	[-7.85155093234444]
								}, {
									"case":	99,
									"scores":	[-7.85155093234444]
								}, {
									"case":	100,
									"scores":	[-7.85155093234444]
								}, {
									"case":	101,
									"scores":	[-7.85155093234444]
								}, {
									"case":	102,
									"scores":	[-7.85155093234444]
								}, {
									"case":	103,
									"scores":	[-7.85155093234444]
								}, {
									"case":	104,
									"scores":	[-7.85155093234444]
								}, {
									"case":	105,
									"scores":	[-7.85155093234444]
								}, {
									"case":	106,
									"scores":	[-7.85155093234444]
								}, {
									"case":	107,
									"scores":	[-7.85155093234444]
								}, {
									"case":	108,
									"scores":	[-7.85155093234444]
								}, {
									"case":	109,
									"scores":	[-7.85155093234444]
								}, {
									"case":	110,
									"scores":	[-7.85155093234444]
								}, {
									"case":	111,
									"scores":	[-7.85155093234444]
								}, {
									"case":	112,
									"scores":	[-7.85155093234444]
								}, {
									"case":	113,
									"scores":	[-7.85155093234444]
								}, {
									"case":	114,
									"scores":	[-7.85155093234444]
								}, {
									"case":	115,
									"scores":	[-7.85155093234444]
								}, {
									"case":	116,
									"scores":	[-7.85155093234444]
								}, {
									"case":	117,
									"scores":	[-7.85155093234444]
								}, {
									"case":	118,
									"scores":	[-7.85155093234444]
								}, {
									"case":	119,
									"scores":	[-7.85155093234444]
								}, {
									"case":	120,
									"scores":	[-7.85155093234444]
								}, {
									"case":	121,
									"scores":	[-7.85155093234444]
								}, {
									"case":	122,
									"scores":	[-7.85155093234444]
								}, {
									"case":	123,
									"scores":	[-7.85155093234444]
								}, {
									"case":	124,
									"scores":	[-7.85155093234444]
								}, {
									"case":	125,
									"scores":	[-7.85155093234444]
								}, {
									"case":	126,
									"scores":	[-7.85155093234444]
								}, {
									"case":	127,
									"scores":	[-7.85155093234444]
								}, {
									"case":	128,
									"scores":	[-7.85155093234444]
								}, {
									"case":	129,
									"scores":	[-7.85155093234444]
								}, {
									"case":	130,
									"scores":	[-7.85155093234444]
								}, {
									"case":	131,
									"scores":	[-7.85155093234444]
								}, {
									"case":	132,
									"scores":	[-7.85155093234444]
								}, {
									"case":	133,
									"scores":	[-7.85155093234444]
								}, {
									"case":	134,
									"scores":	[-7.85155093234444]
								}, {
									"case":	135,
									"scores":	[-7.85155093234444]
								}, {
									"case":	136,
									"scores":	[-7.85155093234444]
								}, {
									"case":	137,
									"scores":	[-7.85155093234444]
								}, {
									"case":	138,
									"scores":	[-7.85155093234444]
								}, {
									"case":	139,
									"scores":	[-7.85155093234444]
								}, {
									"case":	140,
									"scores":	[-7.85155093234444]
								}, {
									"case":	141,
									"scores":	[-7.85155093234444]
								}, {
									"case":	142,
									"scores":	[-7.85155093234444]
								}, {
									"case":	143,
									"scores":	[-7.85155093234444]
								}, {
									"case":	144,
									"scores":	[-7.85155093234444]
								}, {
									"case":	145,
									"scores":	[-7.85155093234444]
								}, {
									"case":	146,
									"scores":	[-7.85155093234444]
								}, {
									"case":	147,
									"scores":	[-7.85155093234444]
								}, {
									"case":	148,
									"scores":	[-7.85155093234444]
								}, {
									"case":	149,
									"scores":	[-7.85155093234444]
								}, {
									"case":	150,
									"scores":	[-7.85155093234444]
								}, {
									"case":	151,
									"scores":	[-7.85155093234444]
								}, {
									"case":	152,
									"scores":	[-7.85155093234444]
								}, {
									"case":	153,
									"scores":	[-7.85155093234444]
								}, {
									"case":	154,
									"scores":	[-7.85155093234444]
								}, {
									"case":	155,
									"scores":	[-7.85155093234444]
								}, {
									"case":	156,
									"scores":	[-7.85155093234444]
								}, {
									"case":	157,
									"scores":	[-7.85155093234444]
								}, {
									"case":	158,
									"scores":	[-7.85155093234444]
								}, {
									"case":	159,
									"scores":	[-7.85155093234444]
								}, {
									"case":	160,
									"scores":	[-7.85155093234444]
								}, {
									"case":	161,
									"scores":	[-7.85155093234444]
								}, {
									"case":	162,
									"scores":	[-7.85155093234444]
								}, {
									"case":	163,
									"scores":	[-7.85155093234444]
								}, {
									"case":	164,
									"scores":	[-7.85155093234444]
								}, {
									"case":	165,
									"scores":	[-7.85155093234444]
								}, {
									"case":	166,
									"scores":	[-7.85155093234444]
								}, {
									"case":	167,
									"scores":	[-7.85155093234444]
								}, {
									"case":	168,
									"scores":	[-7.85155093234444]
								}, {
									"case":	169,
									"scores":	[-7.85155093234444]
								}, {
									"case":	170,
									"scores":	[-7.85155093234444]
								}, {
									"case":	171,
									"scores":	[-7.85155093234444]
								}, {
									"case":	172,
									"scores":	[-7.85155093234444]
								}, {
									"case":	173,
									"scores":	[-7.85155093234444]
								}, {
									"case":	174,
									"scores":	[-7.85155093234444]
								}, {
									"case":	175,
									"scores":	[-7.85155093234444]
								}, {
									"case":	176,
									"scores":	[-7.85155093234444]
								}, {
									"case":	177,
									"scores":	[-7.85155093234444]
								}, {
									"case":	178,
									"scores":	[-7.85155093234444]
								}, {
									"case":	179,
									"scores":	[-7.85155093234444]
								}, {
									"case":	180,
									"scores":	[-7.85155093234444]
								}, {
									"case":	181,
									"scores":	[-7.85155093234444]
								}, {
									"case":	182,
									"scores":	[-7.85155093234444]
								}, {
									"case":	183,
									"scores":	[-7.85155093234444]
								}, {
									"case":	184,
									"scores":	[-7.85155093234444]
								}, {
									"case":	185,
									"scores":	[-7.85155093234444]
								}, {
									"case":	186,
									"scores":	[-7.85155093234444]
								}, {
									"case":	187,
									"scores":	[-7.85155093234444]
								}, {
									"case":	188,
									"scores":	[-7.85155093234444]
								}, {
									"case":	189,
									"scores":	[-7.85155093234444]
								}, {
									"case":	190,
									"scores":	[-7.85155093234444]
								}, {
									"case":	191,
									"scores":	[-7.85155093234444]
								}, {
									"case":	192,
									"scores":	[-7.85155093234444]
								}, {
									"case":	193,
									"scores":	[-7.85155093234444]
								}, {
									"case":	194,
									"scores":	[-7.85155093234444]
								}, {
									"case":	195,
									"scores":	[-7.85155093234444]
								}, {
									"case":	196,
									"scores":	[-7.85155093234444]
								}, {
									"case":	197,
									"scores":	[-7.85155093234444]
								}, {
									"case":	198,
									"scores":	[-7.85155093234444]
								}, {
									"case":	199,
									"scores":	[-7.85155093234444]
								}, {
									"case":	200,
									"scores":	[-7.85155093234444]
								}]
						}]
				}, {
					"line":	281,
					"switches":	[{
							"switch":	15,
							"types":	[[], [], [], [], [239, 240], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], [], [], [], [209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238], [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], [], [], [], [], [], []],
							"begin_line":	282,
							"begin_column":	4,
							"end_line":	282,
							"end_column":	4,
							"patch_codes":	["memset(&(**data).is_ref__gc, 0, sizeof (*(&(**data).is_ref__gc)))", "memset(&(**data).refcount__gc, 0, sizeof (*(&(**data).refcount__gc)))", "memset(&(**data).type, 0, sizeof (*(&(**data).type)))", "memset(&(**data).value, 0, sizeof (*(&(**data).value)))", "memset(&(**data).value.dval, 0, sizeof (*(&(**data).value.dval)))", "memset(&(**data).value.ht, 0, sizeof (*(&(**data).value.ht)))", "memset(&(**data).value.lval, 0, sizeof (*(&(**data).value.lval)))", "memset(&(**data).value.obj, 0, sizeof (*(&(**data).value.obj)))", "memset(&(**data).value.obj.handle, 0, sizeof (*(&(**data).value.obj.handle)))", "memset(&(**data).value.obj.handlers, 0, sizeof (*(&(**data).value.obj.handlers)))", "memset(&(**data).value.obj.handlers->add_ref, 0, sizeof (*(&(**data).value.obj.handlers->add_ref)))", "memset(&(**data).value.obj.handlers->call_method, 0, sizeof (*(&(**data).value.obj.handlers->call_method)))", "memset(&(**data).value.obj.handlers->cast_object, 0, sizeof (*(&(**data).value.obj.handlers->cast_object)))", "memset(&(**data).value.obj.handlers->clone_obj, 0, sizeof (*(&(**data).value.obj.handlers->clone_obj)))", "memset(&(**data).value.obj.handlers->compare_objects, 0, sizeof (*(&(**data).value.obj.handlers->compare_objects)))", "memset(&(**data).value.obj.handlers->count_elements, 0, sizeof (*(&(**data).value.obj.handlers->count_elements)))", "memset(&(**data).value.obj.handlers->del_ref, 0, sizeof (*(&(**data).value.obj.handlers->del_ref)))", "memset(&(**data).value.obj.handlers->get, 0, sizeof (*(&(**data).value.obj.handlers->get)))", "memset(&(**data).value.obj.handlers->get_class_entry, 0, sizeof (*(&(**data).value.obj.handlers->get_class_entry)))", "memset(&(**data).value.obj.handlers->get_class_name, 0, sizeof (*(&(**data).value.obj.handlers->get_class_name)))", "memset(&(**data).value.obj.handlers->get_closure, 0, sizeof (*(&(**data).value.obj.handlers->get_closure)))", "memset(&(**data).value.obj.handlers->get_constructor, 0, sizeof (*(&(**data).value.obj.handlers->get_constructor)))", "memset(&(**data).value.obj.handlers->get_debug_info, 0, sizeof (*(&(**data).value.obj.handlers->get_debug_info)))", "memset(&(**data).value.obj.handlers->get_method, 0, sizeof (*(&(**data).value.obj.handlers->get_method)))", "memset(&(**data).value.obj.handlers->get_properties, 0, sizeof (*(&(**data).value.obj.handlers->get_properties)))", "memset(&(**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(**data).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(**data).value.obj.handlers->has_dimension, 0, sizeof (*(&(**data).value.obj.handlers->has_dimension)))", "memset(&(**data).value.obj.handlers->has_property, 0, sizeof (*(&(**data).value.obj.handlers->has_property)))", "memset(&(**data).value.obj.handlers->read_dimension, 0, sizeof (*(&(**data).value.obj.handlers->read_dimension)))", "memset(&(**data).value.obj.handlers->read_property, 0, sizeof (*(&(**data).value.obj.handlers->read_property)))", "memset(&(**data).value.obj.handlers->set, 0, sizeof (*(&(**data).value.obj.handlers->set)))", "memset(&(**data).value.obj.handlers->unset_dimension, 0, sizeof (*(&(**data).value.obj.handlers->unset_dimension)))", "memset(&(**data).value.obj.handlers->unset_property, 0, sizeof (*(&(**data).value.obj.handlers->unset_property)))", "memset(&(**data).value.obj.handlers->write_dimension, 0, sizeof (*(&(**data).value.obj.handlers->write_dimension)))", "memset(&(**data).value.obj.handlers->write_property, 0, sizeof (*(&(**data).value.obj.handlers->write_property)))", "memset(&(**data).value.str, 0, sizeof (*(&(**data).value.str)))", "memset(&(**val), 0, sizeof (*(&(**val))))", "memset(&(**val).is_ref__gc, 0, sizeof (*(&(**val).is_ref__gc)))", "memset(&(**val).refcount__gc, 0, sizeof (*(&(**val).refcount__gc)))", "memset(&(**val).type, 0, sizeof (*(&(**val).type)))", "memset(&(**val).value, 0, sizeof (*(&(**val).value)))", "memset(&json_globals.encoder_depth, 0, sizeof (*(&json_globals.encoder_depth)))", "memset(&json_globals.error_code, 0, sizeof (*(&json_globals.error_code)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((**data).value.ht, 0, sizeof (*((**data).value.ht)))", "memset((**data).value.obj.handlers, 0, sizeof (*((**data).value.obj.handlers)))", "memset((**data).value.obj.handlers->add_ref, 0, sizeof (*((**data).value.obj.handlers->add_ref)))", "memset((**data).value.obj.handlers->call_method, 0, sizeof (*((**data).value.obj.handlers->call_method)))", "memset((**data).value.obj.handlers->cast_object, 0, sizeof (*((**data).value.obj.handlers->cast_object)))", "memset((**data).value.obj.handlers->clone_obj, 0, sizeof (*((**data).value.obj.handlers->clone_obj)))", "memset((**data).value.obj.handlers->compare_objects, 0, sizeof (*((**data).value.obj.handlers->compare_objects)))", "memset((**data).value.obj.handlers->count_elements, 0, sizeof (*((**data).value.obj.handlers->count_elements)))", "memset((**data).value.obj.handlers->del_ref, 0, sizeof (*((**data).value.obj.handlers->del_ref)))", "memset((**data).value.obj.handlers->get, 0, sizeof (*((**data).value.obj.handlers->get)))", "memset((**data).value.obj.handlers->get_class_entry, 0, sizeof (*((**data).value.obj.handlers->get_class_entry)))", "memset((**data).value.obj.handlers->get_class_name, 0, sizeof (*((**data).value.obj.handlers->get_class_name)))", "memset((**data).value.obj.handlers->get_closure, 0, sizeof (*((**data).value.obj.handlers->get_closure)))", "memset((**data).value.obj.handlers->get_constructor, 0, sizeof (*((**data).value.obj.handlers->get_constructor)))", "memset((**data).value.obj.handlers->get_debug_info, 0, sizeof (*((**data).value.obj.handlers->get_debug_info)))", "memset((**data).value.obj.handlers->get_method, 0, sizeof (*((**data).value.obj.handlers->get_method)))", "memset((**data).value.obj.handlers->get_properties, 0, sizeof (*((**data).value.obj.handlers->get_properties)))", "memset((**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((**data).value.obj.handlers->get_property_ptr_ptr)))", "memset((**data).value.obj.handlers->has_dimension, 0, sizeof (*((**data).value.obj.handlers->has_dimension)))", "memset((**data).value.obj.handlers->has_property, 0, sizeof (*((**data).value.obj.handlers->has_property)))", "memset((**data).value.obj.handlers->read_dimension, 0, sizeof (*((**data).value.obj.handlers->read_dimension)))", "memset((**data).value.obj.handlers->read_property, 0, sizeof (*((**data).value.obj.handlers->read_property)))", "memset((**data).value.obj.handlers->set, 0, sizeof (*((**data).value.obj.handlers->set)))", "memset((**data).value.obj.handlers->unset_dimension, 0, sizeof (*((**data).value.obj.handlers->unset_dimension)))", "memset((**data).value.obj.handlers->unset_property, 0, sizeof (*((**data).value.obj.handlers->unset_property)))", "memset((**data).value.obj.handlers->write_dimension, 0, sizeof (*((**data).value.obj.handlers->write_dimension)))", "memset((**data).value.obj.handlers->write_property, 0, sizeof (*((**data).value.obj.handlers->write_property)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (i)", "(json_globals.error_code) = (need_comma)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (r)", "(key)++", "(myht)->nApplyCount++", "(myht)->nApplyCount--", "(tmp_ht)->nApplyCount++", "(tmp_ht)->nApplyCount--", "_efree(((key)))", "i = (0)", "i = (1)", "i = (10)", "i = (128)", "i = (16)", "i = (2)", "i = (3)", "i = (32)", "i = (4)", "i = (5)", "i = (78)", "i = (i)", "i = (myht) ? zend_hash_num_elements(myht) : 0", "i = (need_comma)", "i = (options)", "i = (r)", "i = (tmp_ht) ? zend_hash_num_elements(myht) : 0", "i = myht ? zend_hash_num_elements((myht)) : 0", "i = myht ? zend_hash_num_elements((tmp_ht)) : 0", "i = zend_hash_get_current_key_ex((myht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex((tmp_ht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &(key), &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &(pos))", "json_escape_string((buf), key, key_len - 1, options)", "json_escape_string(buf, (key), key_len - 1, options)", "json_pretty_print_char((buf), options, ' ')", "json_pretty_print_char((buf), options, '\\n')", "json_pretty_print_indent((buf), options)", "myht = ((**(data))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(data)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**(val))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(val)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(data)))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(val)))", "myht = ((**val).type == 4 ? (**(data)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**(val)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(data)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(val)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(data)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(val)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "myht = (myht)", "myht = (tmp_ht)", "need_comma = (0)", "need_comma = (1)", "need_comma = (10)", "need_comma = (128)", "need_comma = (16)", "need_comma = (2)", "need_comma = (3)", "need_comma = (32)", "need_comma = (4)", "need_comma = (5)", "need_comma = (78)", "need_comma = (i)", "need_comma = (need_comma)", "need_comma = (options)", "need_comma = (r)", "php_json_encode((buf), *data, options)", "php_json_encode(buf, *(data), options)", "php_json_encode(buf, *(val), options)", "r = (0)", "r = (1)", "r = (10)", "r = (128)", "r = (16)", "r = (2)", "r = (3)", "r = (32)", "r = (4)", "r = (5)", "r = (78)", "r = (i)", "r = (need_comma)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((data))", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((val))", "r = (options)", "r = (r)", "tmp_ht = ((**(data)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**(val)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(data)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(val)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(data)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(val)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(data)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(val)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "tmp_ht = (myht)", "tmp_ht = (tmp_ht)", "zend_hash_internal_pointer_reset_ex((myht), &pos)", "zend_hash_internal_pointer_reset_ex((tmp_ht), &pos)", "zend_hash_internal_pointer_reset_ex(myht, &(pos))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "exit(1)", "i = myht ? zend_hash_num_elements(myht) : 0", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &pos)", "json_escape_string(buf, key, key_len - 1, options)", "json_pretty_print_char(buf, options, ' ')", "json_pretty_print_char(buf, options, '\\n')", "json_pretty_print_indent(buf, options)", "myht = ((**val)).value.obj.handlers->get_properties(&(**val))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "need_comma = 1", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "php_json_encode(buf, *data, options)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type(val)", "r = 1", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht->nApplyCount++", "tmp_ht->nApplyCount--", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_internal_pointer_reset_ex(myht, &pos)", "if (__is_neg(\"\", \"L282\", 16, &(i), sizeof (i), &(val), sizeof (val), &(r), sizeof (r), &(key), sizeof (key), &((**val).type), sizeof ((**val).type), &(buf), sizeof (buf), &(options), sizeof (options), &(data), sizeof (data), &(tmp_ht), sizeof (tmp_ht), &(need_comma), sizeof (need_comma), &(myht), sizeof (myht), &(pos), sizeof (pos), &(key_len), sizeof (key_len), &(index), sizeof (index), &((**val).refcount__gc), sizeof ((**val).refcount__gc), &((**val).is_ref__gc), sizeof ((**val).is_ref__gc)))\n    break;\n", "if (__is_neg(\"\", \"L282\", 16, &(i), sizeof (i), &(val), sizeof (val), &(r), sizeof (r), &(key), sizeof (key), &((**val).type), sizeof ((**val).type), &(buf), sizeof (buf), &(options), sizeof (options), &(data), sizeof (data), &(tmp_ht), sizeof (tmp_ht), &(need_comma), sizeof (need_comma), &(myht), sizeof (myht), &(pos), sizeof (pos), &(key_len), sizeof (key_len), &(index), sizeof (index), &((**val).refcount__gc), sizeof ((**val).refcount__gc), &((**val).is_ref__gc), sizeof ((**val).is_ref__gc)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.29601049332987]
								}, {
									"case":	2,
									"scores":	[-8.29601049332987]
								}, {
									"case":	3,
									"scores":	[-8.29601049332987]
								}, {
									"case":	4,
									"scores":	[-8.29601049332987]
								}, {
									"case":	5,
									"scores":	[-8.29601049332987]
								}, {
									"case":	6,
									"scores":	[-8.29601049332987]
								}, {
									"case":	7,
									"scores":	[-8.29601049332987]
								}, {
									"case":	8,
									"scores":	[-8.29601049332987]
								}, {
									"case":	9,
									"scores":	[-8.29601049332987]
								}, {
									"case":	10,
									"scores":	[-8.29601049332987]
								}, {
									"case":	11,
									"scores":	[-8.29601049332987]
								}, {
									"case":	12,
									"scores":	[-8.29601049332987]
								}, {
									"case":	13,
									"scores":	[-8.29601049332987]
								}, {
									"case":	14,
									"scores":	[-8.29601049332987]
								}, {
									"case":	15,
									"scores":	[-8.29601049332987]
								}, {
									"case":	16,
									"scores":	[-8.29601049332987]
								}, {
									"case":	17,
									"scores":	[-8.29601049332987]
								}, {
									"case":	18,
									"scores":	[-8.29601049332987]
								}, {
									"case":	19,
									"scores":	[-8.29601049332987]
								}, {
									"case":	20,
									"scores":	[-8.29601049332987]
								}, {
									"case":	21,
									"scores":	[-8.29601049332987]
								}, {
									"case":	22,
									"scores":	[-8.29601049332987]
								}, {
									"case":	23,
									"scores":	[-8.29601049332987]
								}, {
									"case":	24,
									"scores":	[-8.29601049332987]
								}, {
									"case":	25,
									"scores":	[-8.29601049332987]
								}, {
									"case":	26,
									"scores":	[-8.29601049332987]
								}, {
									"case":	27,
									"scores":	[-8.29601049332987]
								}, {
									"case":	28,
									"scores":	[-8.29601049332987]
								}, {
									"case":	29,
									"scores":	[-8.29601049332987]
								}, {
									"case":	30,
									"scores":	[-8.29601049332987]
								}, {
									"case":	31,
									"scores":	[-8.29601049332987]
								}, {
									"case":	32,
									"scores":	[-8.29601049332987]
								}, {
									"case":	33,
									"scores":	[-8.29601049332987]
								}, {
									"case":	34,
									"scores":	[-8.29601049332987]
								}, {
									"case":	35,
									"scores":	[-8.29601049332987]
								}, {
									"case":	36,
									"scores":	[-8.29601049332987]
								}, {
									"case":	37,
									"scores":	[-8.29601049332987]
								}, {
									"case":	38,
									"scores":	[-8.29601049332987]
								}, {
									"case":	39,
									"scores":	[-8.29601049332987]
								}, {
									"case":	40,
									"scores":	[-8.29601049332987]
								}, {
									"case":	41,
									"scores":	[-8.29601049332987]
								}, {
									"case":	42,
									"scores":	[-8.29601049332987]
								}, {
									"case":	43,
									"scores":	[-8.29601049332987]
								}, {
									"case":	44,
									"scores":	[-8.29601049332987]
								}, {
									"case":	45,
									"scores":	[-8.29601049332987]
								}, {
									"case":	46,
									"scores":	[-8.29601049332987]
								}, {
									"case":	47,
									"scores":	[-8.29601049332987]
								}, {
									"case":	48,
									"scores":	[-8.29601049332987]
								}, {
									"case":	49,
									"scores":	[-8.29601049332987]
								}, {
									"case":	50,
									"scores":	[-8.29601049332987]
								}, {
									"case":	51,
									"scores":	[-8.29601049332987]
								}, {
									"case":	52,
									"scores":	[-8.29601049332987]
								}, {
									"case":	53,
									"scores":	[-8.29601049332987]
								}, {
									"case":	54,
									"scores":	[-8.29601049332987]
								}, {
									"case":	55,
									"scores":	[-8.29601049332987]
								}, {
									"case":	56,
									"scores":	[-8.29601049332987]
								}, {
									"case":	57,
									"scores":	[-8.29601049332987]
								}, {
									"case":	58,
									"scores":	[-8.29601049332987]
								}, {
									"case":	59,
									"scores":	[-8.29601049332987]
								}, {
									"case":	60,
									"scores":	[-8.29601049332987]
								}, {
									"case":	61,
									"scores":	[-8.29601049332987]
								}, {
									"case":	62,
									"scores":	[-8.29601049332987]
								}, {
									"case":	63,
									"scores":	[-8.29601049332987]
								}, {
									"case":	64,
									"scores":	[-8.29601049332987]
								}, {
									"case":	65,
									"scores":	[-8.29601049332987]
								}, {
									"case":	66,
									"scores":	[-8.29601049332987]
								}, {
									"case":	67,
									"scores":	[-8.29601049332987]
								}, {
									"case":	68,
									"scores":	[-8.29601049332987]
								}, {
									"case":	69,
									"scores":	[-8.29601049332987]
								}, {
									"case":	70,
									"scores":	[-8.29601049332987]
								}, {
									"case":	71,
									"scores":	[-8.29601049332987]
								}, {
									"case":	72,
									"scores":	[-8.29601049332987]
								}, {
									"case":	73,
									"scores":	[-8.29601049332987]
								}, {
									"case":	74,
									"scores":	[-8.29601049332987]
								}, {
									"case":	75,
									"scores":	[-8.29601049332987]
								}, {
									"case":	76,
									"scores":	[-8.29601049332987]
								}, {
									"case":	77,
									"scores":	[-8.29601049332987]
								}, {
									"case":	78,
									"scores":	[-8.29601049332987]
								}, {
									"case":	79,
									"scores":	[-8.29601049332987]
								}, {
									"case":	80,
									"scores":	[-8.29601049332987]
								}, {
									"case":	81,
									"scores":	[-8.29601049332987]
								}, {
									"case":	82,
									"scores":	[-8.29601049332987]
								}, {
									"case":	83,
									"scores":	[-8.29601049332987]
								}, {
									"case":	84,
									"scores":	[-8.29601049332987]
								}, {
									"case":	85,
									"scores":	[-8.29601049332987]
								}, {
									"case":	86,
									"scores":	[-8.29601049332987]
								}, {
									"case":	87,
									"scores":	[-8.29601049332987]
								}, {
									"case":	88,
									"scores":	[-8.29601049332987]
								}, {
									"case":	89,
									"scores":	[-8.29601049332987]
								}, {
									"case":	90,
									"scores":	[-8.29601049332987]
								}, {
									"case":	91,
									"scores":	[-8.29601049332987]
								}, {
									"case":	92,
									"scores":	[-8.29601049332987]
								}, {
									"case":	93,
									"scores":	[-8.29601049332987]
								}, {
									"case":	94,
									"scores":	[-8.29601049332987]
								}, {
									"case":	95,
									"scores":	[-8.29601049332987]
								}, {
									"case":	96,
									"scores":	[-8.29601049332987]
								}, {
									"case":	97,
									"scores":	[-8.29601049332987]
								}, {
									"case":	98,
									"scores":	[-8.29601049332987]
								}, {
									"case":	99,
									"scores":	[-8.29601049332987]
								}, {
									"case":	100,
									"scores":	[-8.29601049332987]
								}, {
									"case":	101,
									"scores":	[-8.29601049332987]
								}, {
									"case":	102,
									"scores":	[-8.29601049332987]
								}, {
									"case":	103,
									"scores":	[-8.29601049332987]
								}, {
									"case":	104,
									"scores":	[-8.29601049332987]
								}, {
									"case":	105,
									"scores":	[-8.29601049332987]
								}, {
									"case":	106,
									"scores":	[-8.29601049332987]
								}, {
									"case":	107,
									"scores":	[-8.29601049332987]
								}, {
									"case":	108,
									"scores":	[-8.29601049332987]
								}, {
									"case":	109,
									"scores":	[-8.29601049332987]
								}, {
									"case":	110,
									"scores":	[-8.29601049332987]
								}, {
									"case":	111,
									"scores":	[-8.29601049332987]
								}, {
									"case":	112,
									"scores":	[-8.29601049332987]
								}, {
									"case":	113,
									"scores":	[-8.29601049332987]
								}, {
									"case":	114,
									"scores":	[-8.29601049332987]
								}, {
									"case":	115,
									"scores":	[-8.29601049332987]
								}, {
									"case":	116,
									"scores":	[-8.29601049332987]
								}, {
									"case":	117,
									"scores":	[-8.29601049332987]
								}, {
									"case":	118,
									"scores":	[-8.29601049332987]
								}, {
									"case":	119,
									"scores":	[-8.29601049332987]
								}, {
									"case":	120,
									"scores":	[-8.29601049332987]
								}, {
									"case":	121,
									"scores":	[-8.29601049332987]
								}, {
									"case":	122,
									"scores":	[-8.29601049332987]
								}, {
									"case":	123,
									"scores":	[-8.29601049332987]
								}, {
									"case":	124,
									"scores":	[-8.29601049332987]
								}, {
									"case":	125,
									"scores":	[-8.29601049332987]
								}, {
									"case":	126,
									"scores":	[-8.29601049332987]
								}, {
									"case":	127,
									"scores":	[-8.29601049332987]
								}, {
									"case":	128,
									"scores":	[-8.29601049332987]
								}, {
									"case":	129,
									"scores":	[-8.29601049332987]
								}, {
									"case":	130,
									"scores":	[-8.29601049332987]
								}, {
									"case":	131,
									"scores":	[-8.29601049332987]
								}, {
									"case":	132,
									"scores":	[-8.29601049332987]
								}, {
									"case":	133,
									"scores":	[-8.29601049332987]
								}, {
									"case":	134,
									"scores":	[-8.29601049332987]
								}, {
									"case":	135,
									"scores":	[-8.29601049332987]
								}, {
									"case":	136,
									"scores":	[-8.29601049332987]
								}, {
									"case":	137,
									"scores":	[-8.29601049332987]
								}, {
									"case":	138,
									"scores":	[-8.29601049332987]
								}, {
									"case":	139,
									"scores":	[-8.29601049332987]
								}, {
									"case":	140,
									"scores":	[-8.29601049332987]
								}, {
									"case":	141,
									"scores":	[-8.29601049332987]
								}, {
									"case":	142,
									"scores":	[-8.29601049332987]
								}, {
									"case":	143,
									"scores":	[-8.29601049332987]
								}, {
									"case":	144,
									"scores":	[-8.29601049332987]
								}, {
									"case":	145,
									"scores":	[-8.29601049332987]
								}, {
									"case":	146,
									"scores":	[-8.29601049332987]
								}, {
									"case":	147,
									"scores":	[-8.29601049332987]
								}, {
									"case":	148,
									"scores":	[-8.29601049332987]
								}, {
									"case":	149,
									"scores":	[-8.29601049332987]
								}, {
									"case":	150,
									"scores":	[-8.29601049332987]
								}, {
									"case":	151,
									"scores":	[-8.29601049332987]
								}, {
									"case":	152,
									"scores":	[-8.29601049332987]
								}, {
									"case":	153,
									"scores":	[-8.29601049332987]
								}, {
									"case":	154,
									"scores":	[-8.29601049332987]
								}, {
									"case":	155,
									"scores":	[-8.29601049332987]
								}, {
									"case":	156,
									"scores":	[-8.29601049332987]
								}, {
									"case":	157,
									"scores":	[-8.29601049332987]
								}, {
									"case":	158,
									"scores":	[-8.29601049332987]
								}, {
									"case":	159,
									"scores":	[-8.29601049332987]
								}, {
									"case":	160,
									"scores":	[-8.29601049332987]
								}, {
									"case":	161,
									"scores":	[-8.29601049332987]
								}, {
									"case":	162,
									"scores":	[-8.29601049332987]
								}, {
									"case":	163,
									"scores":	[-8.29601049332987]
								}, {
									"case":	164,
									"scores":	[-8.29601049332987]
								}, {
									"case":	165,
									"scores":	[-8.29601049332987]
								}, {
									"case":	166,
									"scores":	[-8.29601049332987]
								}, {
									"case":	167,
									"scores":	[-8.29601049332987]
								}, {
									"case":	168,
									"scores":	[-8.29601049332987]
								}, {
									"case":	169,
									"scores":	[-8.29601049332987]
								}, {
									"case":	170,
									"scores":	[-8.29601049332987]
								}, {
									"case":	171,
									"scores":	[-8.29601049332987]
								}, {
									"case":	172,
									"scores":	[-8.29601049332987]
								}, {
									"case":	173,
									"scores":	[-8.29601049332987]
								}, {
									"case":	174,
									"scores":	[-8.29601049332987]
								}, {
									"case":	175,
									"scores":	[-8.29601049332987]
								}, {
									"case":	176,
									"scores":	[-8.29601049332987]
								}, {
									"case":	177,
									"scores":	[-8.29601049332987]
								}, {
									"case":	178,
									"scores":	[-8.29601049332987]
								}, {
									"case":	179,
									"scores":	[-8.29601049332987]
								}, {
									"case":	180,
									"scores":	[-8.29601049332987]
								}, {
									"case":	181,
									"scores":	[-8.29601049332987]
								}, {
									"case":	182,
									"scores":	[-8.29601049332987]
								}, {
									"case":	183,
									"scores":	[-8.29601049332987]
								}, {
									"case":	184,
									"scores":	[-8.29601049332987]
								}, {
									"case":	185,
									"scores":	[-8.29601049332987]
								}, {
									"case":	186,
									"scores":	[-8.29601049332987]
								}, {
									"case":	187,
									"scores":	[-8.29601049332987]
								}, {
									"case":	188,
									"scores":	[-8.29601049332987]
								}, {
									"case":	189,
									"scores":	[-8.29601049332987]
								}, {
									"case":	190,
									"scores":	[-8.29601049332987]
								}, {
									"case":	191,
									"scores":	[-8.29601049332987]
								}, {
									"case":	192,
									"scores":	[-8.29601049332987]
								}, {
									"case":	193,
									"scores":	[-8.29601049332987]
								}, {
									"case":	194,
									"scores":	[-8.29601049332987]
								}, {
									"case":	195,
									"scores":	[-8.29601049332987]
								}, {
									"case":	196,
									"scores":	[-8.29601049332987]
								}, {
									"case":	197,
									"scores":	[-8.29601049332987]
								}, {
									"case":	198,
									"scores":	[-8.29601049332987]
								}, {
									"case":	199,
									"scores":	[-8.29601049332987]
								}, {
									"case":	200,
									"scores":	[-8.29601049332987]
								}, {
									"case":	201,
									"scores":	[-8.29601049332987]
								}, {
									"case":	202,
									"scores":	[-8.29601049332987]
								}, {
									"case":	203,
									"scores":	[-8.29601049332987]
								}, {
									"case":	204,
									"scores":	[-8.29601049332987]
								}, {
									"case":	205,
									"scores":	[-8.29601049332987]
								}, {
									"case":	206,
									"scores":	[-8.29601049332987]
								}, {
									"case":	207,
									"scores":	[-8.29601049332987]
								}, {
									"case":	208,
									"scores":	[-8.29601049332987]
								}, {
									"case":	209,
									"scores":	[-8.29601049332987]
								}, {
									"case":	210,
									"scores":	[-8.29601049332987]
								}, {
									"case":	211,
									"scores":	[-8.29601049332987]
								}, {
									"case":	212,
									"scores":	[-8.29601049332987]
								}, {
									"case":	213,
									"scores":	[-8.29601049332987]
								}, {
									"case":	214,
									"scores":	[-8.29601049332987]
								}, {
									"case":	215,
									"scores":	[-8.29601049332987]
								}, {
									"case":	216,
									"scores":	[-8.29601049332987]
								}, {
									"case":	217,
									"scores":	[-8.29601049332987]
								}, {
									"case":	218,
									"scores":	[-8.29601049332987]
								}, {
									"case":	219,
									"scores":	[-8.29601049332987]
								}, {
									"case":	220,
									"scores":	[-8.29601049332987]
								}, {
									"case":	221,
									"scores":	[-8.29601049332987]
								}, {
									"case":	222,
									"scores":	[-8.29601049332987]
								}, {
									"case":	223,
									"scores":	[-8.29601049332987]
								}, {
									"case":	224,
									"scores":	[-8.29601049332987]
								}, {
									"case":	225,
									"scores":	[-8.29601049332987]
								}, {
									"case":	226,
									"scores":	[-8.29601049332987]
								}, {
									"case":	227,
									"scores":	[-8.29601049332987]
								}, {
									"case":	228,
									"scores":	[-8.29601049332987]
								}, {
									"case":	229,
									"scores":	[-8.29601049332987]
								}, {
									"case":	230,
									"scores":	[-8.29601049332987]
								}, {
									"case":	231,
									"scores":	[-8.29601049332987]
								}, {
									"case":	232,
									"scores":	[-8.29601049332987]
								}, {
									"case":	233,
									"scores":	[-8.29601049332987]
								}, {
									"case":	234,
									"scores":	[-8.29601049332987]
								}, {
									"case":	235,
									"scores":	[-8.29601049332987]
								}, {
									"case":	236,
									"scores":	[-8.29601049332987]
								}, {
									"case":	237,
									"scores":	[-8.29601049332987]
								}, {
									"case":	238,
									"scores":	[-8.29601049332987]
								}, {
									"case":	239,
									"scores":	[-11.57488908332987, -12.37824278032987, -11.350464289329869, -11.48583441132987, -12.13145008332987, -10.332992425029872, -10.532256720329871, -11.948383584329871, -12.867667994029871, -11.086715106329871, -11.85408837712987, -11.85408837712987, -10.218159210329871, -11.60804946332987, -12.16461046332987, -12.16461046332987]
								}, {
									"case":	240,
									"scores":	[-11.57488908332987, -12.37824278032987, -11.350464289329869, -11.48583441132987, -12.13145008332987, -10.332992425029872, -10.532256720329871, -11.948383584329871, -12.867667994029871, -11.086715106329871, -11.85408837712987, -11.85408837712987, -10.218159210329871, -11.60804946332987, -12.16461046332987, -12.16461046332987]
								}]
						}, {
							"switch":	16,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	282,
							"begin_column":	6,
							"end_line":	324,
							"end_column":	6,
							"patch_codes":	["if (__is_neg(\"\", \"L282\", 16, &(i), sizeof (i), &(val), sizeof (val), &(r), sizeof (r), &(key), sizeof (key), &((**val).type), sizeof ((**val).type), &(buf), sizeof (buf), &(options), sizeof (options), &(data), sizeof (data), &(tmp_ht), sizeof (tmp_ht), &(need_comma), sizeof (need_comma), &(myht), sizeof (myht), &(pos), sizeof (pos), &(key_len), sizeof (key_len), &(index), sizeof (index), &((**val).refcount__gc), sizeof ((**val).refcount__gc), &((**val).is_ref__gc), sizeof ((**val).is_ref__gc))) {\n    if (key[0] == '\\x00' && (**val).type == 5) {\n        if (tmp_ht) {\n            tmp_ht->nApplyCount--;\n        }\n        continue;\n    }\n    if (need_comma) {\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n        } while (0);\n        json_pretty_print_char(buf, options, '\\n');\n    } else {\n        need_comma = 1;\n    }\n    json_pretty_print_indent(buf, options);\n    json_escape_string(buf, key, key_len - 1, options);\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n    } while (0);\n    json_pretty_print_char(buf, options, ' ');\n    php_json_encode(buf, *data, options);\n} else {\n    if (need_comma) {\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n        } while (0);\n        json_pretty_print_char(buf, options, '\\n');\n    } else {\n        need_comma = 1;\n    }\n    json_pretty_print_indent(buf, options);\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n    } while (0);\n    do {\n        char __b[32];\n        char *__t;\n        do {\n            if (((((long)index))) < 0) {\n                do {\n                    char *__p = ((__b + sizeof (__b) - 1));\n                    unsigned long __num = (-(((((long)index)))));\n                    *__p = '\\x00';\n                    do {\n                        *--__p = (char)(__num % 10) + '0';\n                        __num /= 10;\n                    } while (__num > 0);\n                    (__t) = __p;\n                } while (0);\n                *--(__t) = '-';\n            } else {\n                do {\n                    char *__p = ((__b + sizeof (__b) - 1));\n                    unsigned long __num = ((((((long)index)))));\n                    *__p = '\\x00';\n                    do {\n                        *--__p = (char)(__num % 10) + '0';\n                        __num /= 10;\n                    } while (__num > 0);\n                    (__t) = __p;\n                } while (0);\n            }\n        } while (0);\n        do {\n            register size_t __nl;\n            smart_str *__dest = (smart_str *)((((buf))));\n            do {\n                if (!(__dest)->c) {\n                    (__dest)->len = 0;\n                    __nl = ((__b + sizeof (__b) - 1 - __t));\n                    (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                    (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                } else {\n                    __nl = (__dest)->len + ((__b + sizeof (__b) - 1 - __t));\n                    if (__nl >= (__dest)->a) {\n                        (__dest)->a = __nl + 128;\n                        (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            memcpy(__dest->c + __dest->len, (__t), (__b + sizeof (__b) - 1 - __t));\n            __dest->len = __nl;\n        } while (0);\n    } while (0);\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n    } while (0);\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n    } while (0);\n    json_pretty_print_char(buf, options, ' ');\n    php_json_encode(buf, *data, options);\n}\n", "if ((i == 1) || __is_neg(\"\", \"L282\", 16, &(i), sizeof (i), &(val), sizeof (val), &(r), sizeof (r), &(key), sizeof (key), &((**val).type), sizeof ((**val).type), &(buf), sizeof (buf), &(options), sizeof (options), &(data), sizeof (data), &(tmp_ht), sizeof (tmp_ht), &(need_comma), sizeof (need_comma), &(myht), sizeof (myht), &(pos), sizeof (pos), &(key_len), sizeof (key_len), &(index), sizeof (index), &((**val).refcount__gc), sizeof ((**val).refcount__gc), &((**val).is_ref__gc), sizeof ((**val).is_ref__gc))) {\n    if (key[0] == '\\x00' && (**val).type == 5) {\n        if (tmp_ht) {\n            tmp_ht->nApplyCount--;\n        }\n        continue;\n    }\n    if (need_comma) {\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n        } while (0);\n        json_pretty_print_char(buf, options, '\\n');\n    } else {\n        need_comma = 1;\n    }\n    json_pretty_print_indent(buf, options);\n    json_escape_string(buf, key, key_len - 1, options);\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n    } while (0);\n    json_pretty_print_char(buf, options, ' ');\n    php_json_encode(buf, *data, options);\n} else {\n    if (need_comma) {\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n        } while (0);\n        json_pretty_print_char(buf, options, '\\n');\n    } else {\n        need_comma = 1;\n    }\n    json_pretty_print_indent(buf, options);\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n    } while (0);\n    do {\n        char __b[32];\n        char *__t;\n        do {\n            if (((((long)index))) < 0) {\n                do {\n                    char *__p = ((__b + sizeof (__b) - 1));\n                    unsigned long __num = (-(((((long)index)))));\n                    *__p = '\\x00';\n                    do {\n                        *--__p = (char)(__num % 10) + '0';\n                        __num /= 10;\n                    } while (__num > 0);\n                    (__t) = __p;\n                } while (0);\n                *--(__t) = '-';\n            } else {\n                do {\n                    char *__p = ((__b + sizeof (__b) - 1));\n                    unsigned long __num = ((((((long)index)))));\n                    *__p = '\\x00';\n                    do {\n                        *--__p = (char)(__num % 10) + '0';\n                        __num /= 10;\n                    } while (__num > 0);\n                    (__t) = __p;\n                } while (0);\n            }\n        } while (0);\n        do {\n            register size_t __nl;\n            smart_str *__dest = (smart_str *)((((buf))));\n            do {\n                if (!(__dest)->c) {\n                    (__dest)->len = 0;\n                    __nl = ((__b + sizeof (__b) - 1 - __t));\n                    (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                    (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                } else {\n                    __nl = (__dest)->len + ((__b + sizeof (__b) - 1 - __t));\n                    if (__nl >= (__dest)->a) {\n                        (__dest)->a = __nl + 128;\n                        (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            memcpy(__dest->c + __dest->len, (__t), (__b + sizeof (__b) - 1 - __t));\n            __dest->len = __nl;\n        } while (0);\n    } while (0);\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n    } while (0);\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n    } while (0);\n    json_pretty_print_char(buf, options, ' ');\n    php_json_encode(buf, *data, options);\n}\n", "if ((i == 1) && !__is_neg(\"\", \"L282\", 16, &(i), sizeof (i), &(val), sizeof (val), &(r), sizeof (r), &(key), sizeof (key), &((**val).type), sizeof ((**val).type), &(buf), sizeof (buf), &(options), sizeof (options), &(data), sizeof (data), &(tmp_ht), sizeof (tmp_ht), &(need_comma), sizeof (need_comma), &(myht), sizeof (myht), &(pos), sizeof (pos), &(key_len), sizeof (key_len), &(index), sizeof (index), &((**val).refcount__gc), sizeof ((**val).refcount__gc), &((**val).is_ref__gc), sizeof ((**val).is_ref__gc))) {\n    if (key[0] == '\\x00' && (**val).type == 5) {\n        if (tmp_ht) {\n            tmp_ht->nApplyCount--;\n        }\n        continue;\n    }\n    if (need_comma) {\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n        } while (0);\n        json_pretty_print_char(buf, options, '\\n');\n    } else {\n        need_comma = 1;\n    }\n    json_pretty_print_indent(buf, options);\n    json_escape_string(buf, key, key_len - 1, options);\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n    } while (0);\n    json_pretty_print_char(buf, options, ' ');\n    php_json_encode(buf, *data, options);\n} else {\n    if (need_comma) {\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n        } while (0);\n        json_pretty_print_char(buf, options, '\\n');\n    } else {\n        need_comma = 1;\n    }\n    json_pretty_print_indent(buf, options);\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n    } while (0);\n    do {\n        char __b[32];\n        char *__t;\n        do {\n            if (((((long)index))) < 0) {\n                do {\n                    char *__p = ((__b + sizeof (__b) - 1));\n                    unsigned long __num = (-(((((long)index)))));\n                    *__p = '\\x00';\n                    do {\n                        *--__p = (char)(__num % 10) + '0';\n                        __num /= 10;\n                    } while (__num > 0);\n                    (__t) = __p;\n                } while (0);\n                *--(__t) = '-';\n            } else {\n                do {\n                    char *__p = ((__b + sizeof (__b) - 1));\n                    unsigned long __num = ((((((long)index)))));\n                    *__p = '\\x00';\n                    do {\n                        *--__p = (char)(__num % 10) + '0';\n                        __num /= 10;\n                    } while (__num > 0);\n                    (__t) = __p;\n                } while (0);\n            }\n        } while (0);\n        do {\n            register size_t __nl;\n            smart_str *__dest = (smart_str *)((((buf))));\n            do {\n                if (!(__dest)->c) {\n                    (__dest)->len = 0;\n                    __nl = ((__b + sizeof (__b) - 1 - __t));\n                    (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                    (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                } else {\n                    __nl = (__dest)->len + ((__b + sizeof (__b) - 1 - __t));\n                    if (__nl >= (__dest)->a) {\n                        (__dest)->a = __nl + 128;\n                        (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            memcpy(__dest->c + __dest->len, (__t), (__b + sizeof (__b) - 1 - __t));\n            __dest->len = __nl;\n        } while (0);\n    } while (0);\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n    } while (0);\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n    } while (0);\n    json_pretty_print_char(buf, options, ' ');\n    php_json_encode(buf, *data, options);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.8043061703281458, -5.4935209703281451, -5.6144984703281473, -4.4857348703281454, -4.0153532803281458, -5.565759080328144, -5.1954139703281434, -4.2692694703281449, -6.4797525703281451, -6.3912269913281481, -6.6861842703281473, -6.6861842703281473, -4.3858101403281431, -5.9282961703281476, -6.1393432803281476, -6.1393432803281476]
								}, {
									"case":	2,
									"scores":	[-1.3517896754281451, -3.0410044754281458, -3.1619819754281457, -2.0332183754281457, -1.5628367854281451, -3.1132425854281456, -2.7428974754281459, -1.8167529754281451, -4.0272360754281458, -3.9387104964281461, -4.2336677754281462, -4.2336677754281462, -1.933293645428146, -3.4757796754281456, -3.6868267854281456, -3.6868267854281456]
								}, {
									"case":	3,
									"scores":	[-1.3517896754281451, -3.0410044754281458, -3.1619819754281457, -2.0332183754281457, -1.5628367854281451, -3.1132425854281456, -2.7428974754281459, -1.8167529754281451, -4.0272360754281458, -3.9387104964281461, -4.2336677754281462, -4.2336677754281462, -1.933293645428146, -3.4757796754281456, -3.6868267854281456, -3.6868267854281456]
								}]
						}, {
							"switch":	39,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	282,
							"begin_column":	6,
							"end_line":	324,
							"end_column":	6,
							"patch_codes":	["if (!__is_neg(\"\", \"L282\", 16, &(i), sizeof (i), &(val), sizeof (val), &(r), sizeof (r), &(key), sizeof (key), &((**val).type), sizeof ((**val).type), &(buf), sizeof (buf), &(options), sizeof (options), &(data), sizeof (data), &(tmp_ht), sizeof (tmp_ht), &(need_comma), sizeof (need_comma), &(myht), sizeof (myht), &(pos), sizeof (pos), &(key_len), sizeof (key_len), &(index), sizeof (index), &((**val).refcount__gc), sizeof ((**val).refcount__gc), &((**val).is_ref__gc), sizeof ((**val).is_ref__gc)))\n    if (i == 1) {\n        if (key[0] == '\\x00' && (**val).type == 5) {\n            if (tmp_ht) {\n                tmp_ht->nApplyCount--;\n            }\n            continue;\n        }\n        if (need_comma) {\n            do {\n                register size_t __nl;\n                do {\n                    if (!(((buf)))->c) {\n                        (((buf)))->len = 0;\n                        __nl = (1);\n                        (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    } else {\n                        __nl = (((buf)))->len + (1);\n                        if (__nl >= (((buf)))->a) {\n                            (((buf)))->a = __nl + 128;\n                            (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                ((buf))->len = __nl;\n                ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n            } while (0);\n            json_pretty_print_char(buf, options, '\\n');\n        } else {\n            need_comma = 1;\n        }\n        json_pretty_print_indent(buf, options);\n        json_escape_string(buf, key, key_len - 1, options);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n        } while (0);\n        json_pretty_print_char(buf, options, ' ');\n        php_json_encode(buf, *data, options);\n    } else {\n        if (need_comma) {\n            do {\n                register size_t __nl;\n                do {\n                    if (!(((buf)))->c) {\n                        (((buf)))->len = 0;\n                        __nl = (1);\n                        (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    } else {\n                        __nl = (((buf)))->len + (1);\n                        if (__nl >= (((buf)))->a) {\n                            (((buf)))->a = __nl + 128;\n                            (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                ((buf))->len = __nl;\n                ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n            } while (0);\n            json_pretty_print_char(buf, options, '\\n');\n        } else {\n            need_comma = 1;\n        }\n        json_pretty_print_indent(buf, options);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n        } while (0);\n        do {\n            char __b[32];\n            char *__t;\n            do {\n                if (((((long)index))) < 0) {\n                    do {\n                        char *__p = ((__b + sizeof (__b) - 1));\n                        unsigned long __num = (-(((((long)index)))));\n                        *__p = '\\x00';\n                        do {\n                            *--__p = (char)(__num % 10) + '0';\n                            __num /= 10;\n                        } while (__num > 0);\n                        (__t) = __p;\n                    } while (0);\n                    *--(__t) = '-';\n                } else {\n                    do {\n                        char *__p = ((__b + sizeof (__b) - 1));\n                        unsigned long __num = ((((((long)index)))));\n                        *__p = '\\x00';\n                        do {\n                            *--__p = (char)(__num % 10) + '0';\n                            __num /= 10;\n                        } while (__num > 0);\n                        (__t) = __p;\n                    } while (0);\n                }\n            } while (0);\n            do {\n                register size_t __nl;\n                smart_str *__dest = (smart_str *)((((buf))));\n                do {\n                    if (!(__dest)->c) {\n                        (__dest)->len = 0;\n                        __nl = ((__b + sizeof (__b) - 1 - __t));\n                        (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                        (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                    } else {\n                        __nl = (__dest)->len + ((__b + sizeof (__b) - 1 - __t));\n                        if (__nl >= (__dest)->a) {\n                            (__dest)->a = __nl + 128;\n                            (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                memcpy(__dest->c + __dest->len, (__t), (__b + sizeof (__b) - 1 - __t));\n                __dest->len = __nl;\n            } while (0);\n        } while (0);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n        } while (0);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n        } while (0);\n        json_pretty_print_char(buf, options, ' ');\n        php_json_encode(buf, *data, options);\n    }\n", "if (!__is_neg(\"\", \"L282\", 16, &(i), sizeof (i), &(val), sizeof (val), &(r), sizeof (r), &(key), sizeof (key), &((**val).type), sizeof ((**val).type), &(buf), sizeof (buf), &(options), sizeof (options), &(data), sizeof (data), &(tmp_ht), sizeof (tmp_ht), &(need_comma), sizeof (need_comma), &(myht), sizeof (myht), &(pos), sizeof (pos), &(key_len), sizeof (key_len), &(index), sizeof (index), &((**val).refcount__gc), sizeof ((**val).refcount__gc), &((**val).is_ref__gc), sizeof ((**val).is_ref__gc)) && (i == 1)) {\n    if (key[0] == '\\x00' && (**val).type == 5) {\n        if (tmp_ht) {\n            tmp_ht->nApplyCount--;\n        }\n        continue;\n    }\n    if (need_comma) {\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n        } while (0);\n        json_pretty_print_char(buf, options, '\\n');\n    } else {\n        need_comma = 1;\n    }\n    json_pretty_print_indent(buf, options);\n    json_escape_string(buf, key, key_len - 1, options);\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n    } while (0);\n    json_pretty_print_char(buf, options, ' ');\n    php_json_encode(buf, *data, options);\n} else {\n    if (need_comma) {\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n        } while (0);\n        json_pretty_print_char(buf, options, '\\n');\n    } else {\n        need_comma = 1;\n    }\n    json_pretty_print_indent(buf, options);\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n    } while (0);\n    do {\n        char __b[32];\n        char *__t;\n        do {\n            if (((((long)index))) < 0) {\n                do {\n                    char *__p = ((__b + sizeof (__b) - 1));\n                    unsigned long __num = (-(((((long)index)))));\n                    *__p = '\\x00';\n                    do {\n                        *--__p = (char)(__num % 10) + '0';\n                        __num /= 10;\n                    } while (__num > 0);\n                    (__t) = __p;\n                } while (0);\n                *--(__t) = '-';\n            } else {\n                do {\n                    char *__p = ((__b + sizeof (__b) - 1));\n                    unsigned long __num = ((((((long)index)))));\n                    *__p = '\\x00';\n                    do {\n                        *--__p = (char)(__num % 10) + '0';\n                        __num /= 10;\n                    } while (__num > 0);\n                    (__t) = __p;\n                } while (0);\n            }\n        } while (0);\n        do {\n            register size_t __nl;\n            smart_str *__dest = (smart_str *)((((buf))));\n            do {\n                if (!(__dest)->c) {\n                    (__dest)->len = 0;\n                    __nl = ((__b + sizeof (__b) - 1 - __t));\n                    (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                    (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                } else {\n                    __nl = (__dest)->len + ((__b + sizeof (__b) - 1 - __t));\n                    if (__nl >= (__dest)->a) {\n                        (__dest)->a = __nl + 128;\n                        (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            memcpy(__dest->c + __dest->len, (__t), (__b + sizeof (__b) - 1 - __t));\n            __dest->len = __nl;\n        } while (0);\n    } while (0);\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n    } while (0);\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n    } while (0);\n    json_pretty_print_char(buf, options, ' ');\n    php_json_encode(buf, *data, options);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.36349346332987, -10.052708263329871, -10.173685763329871, -9.04492216332987, -8.57454057332987, -10.12494637332987, -9.75460126332987, -8.82845676332987, -11.038939863329871, -10.95041428432987, -11.24537156332987, -11.24537156332987, -8.94499743332987, -10.48748346332987, -10.698530573329871, -10.698530573329871]
								}, {
									"case":	2,
									"scores":	[-6.98651746332987, -8.67573226332987, -8.79670976332987, -7.66794616332987, -7.19756457332987, -8.74797037332987, -8.37762526332987, -7.45148076332987, -9.66196386332987, -9.57343828432987, -9.86839556332987, -9.86839556332987, -7.56802143332987, -9.11050746332987, -9.32155457332987, -9.32155457332987]
								}]
						}]
				}, {
					"line":	280,
					"switches":	[{
							"switch":	13,
							"types":	[[], [], [], [], [239, 240], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], [], [], [], [209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238], [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], [], [], [], [], [], []],
							"begin_line":	281,
							"begin_column":	10,
							"end_line":	281,
							"end_column":	10,
							"patch_codes":	["memset(&(**data).is_ref__gc, 0, sizeof (*(&(**data).is_ref__gc)))", "memset(&(**data).refcount__gc, 0, sizeof (*(&(**data).refcount__gc)))", "memset(&(**data).type, 0, sizeof (*(&(**data).type)))", "memset(&(**data).value, 0, sizeof (*(&(**data).value)))", "memset(&(**data).value.dval, 0, sizeof (*(&(**data).value.dval)))", "memset(&(**data).value.ht, 0, sizeof (*(&(**data).value.ht)))", "memset(&(**data).value.lval, 0, sizeof (*(&(**data).value.lval)))", "memset(&(**data).value.obj, 0, sizeof (*(&(**data).value.obj)))", "memset(&(**data).value.obj.handle, 0, sizeof (*(&(**data).value.obj.handle)))", "memset(&(**data).value.obj.handlers, 0, sizeof (*(&(**data).value.obj.handlers)))", "memset(&(**data).value.obj.handlers->add_ref, 0, sizeof (*(&(**data).value.obj.handlers->add_ref)))", "memset(&(**data).value.obj.handlers->call_method, 0, sizeof (*(&(**data).value.obj.handlers->call_method)))", "memset(&(**data).value.obj.handlers->cast_object, 0, sizeof (*(&(**data).value.obj.handlers->cast_object)))", "memset(&(**data).value.obj.handlers->clone_obj, 0, sizeof (*(&(**data).value.obj.handlers->clone_obj)))", "memset(&(**data).value.obj.handlers->compare_objects, 0, sizeof (*(&(**data).value.obj.handlers->compare_objects)))", "memset(&(**data).value.obj.handlers->count_elements, 0, sizeof (*(&(**data).value.obj.handlers->count_elements)))", "memset(&(**data).value.obj.handlers->del_ref, 0, sizeof (*(&(**data).value.obj.handlers->del_ref)))", "memset(&(**data).value.obj.handlers->get, 0, sizeof (*(&(**data).value.obj.handlers->get)))", "memset(&(**data).value.obj.handlers->get_class_entry, 0, sizeof (*(&(**data).value.obj.handlers->get_class_entry)))", "memset(&(**data).value.obj.handlers->get_class_name, 0, sizeof (*(&(**data).value.obj.handlers->get_class_name)))", "memset(&(**data).value.obj.handlers->get_closure, 0, sizeof (*(&(**data).value.obj.handlers->get_closure)))", "memset(&(**data).value.obj.handlers->get_constructor, 0, sizeof (*(&(**data).value.obj.handlers->get_constructor)))", "memset(&(**data).value.obj.handlers->get_debug_info, 0, sizeof (*(&(**data).value.obj.handlers->get_debug_info)))", "memset(&(**data).value.obj.handlers->get_method, 0, sizeof (*(&(**data).value.obj.handlers->get_method)))", "memset(&(**data).value.obj.handlers->get_properties, 0, sizeof (*(&(**data).value.obj.handlers->get_properties)))", "memset(&(**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(**data).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(**data).value.obj.handlers->has_dimension, 0, sizeof (*(&(**data).value.obj.handlers->has_dimension)))", "memset(&(**data).value.obj.handlers->has_property, 0, sizeof (*(&(**data).value.obj.handlers->has_property)))", "memset(&(**data).value.obj.handlers->read_dimension, 0, sizeof (*(&(**data).value.obj.handlers->read_dimension)))", "memset(&(**data).value.obj.handlers->read_property, 0, sizeof (*(&(**data).value.obj.handlers->read_property)))", "memset(&(**data).value.obj.handlers->set, 0, sizeof (*(&(**data).value.obj.handlers->set)))", "memset(&(**data).value.obj.handlers->unset_dimension, 0, sizeof (*(&(**data).value.obj.handlers->unset_dimension)))", "memset(&(**data).value.obj.handlers->unset_property, 0, sizeof (*(&(**data).value.obj.handlers->unset_property)))", "memset(&(**data).value.obj.handlers->write_dimension, 0, sizeof (*(&(**data).value.obj.handlers->write_dimension)))", "memset(&(**data).value.obj.handlers->write_property, 0, sizeof (*(&(**data).value.obj.handlers->write_property)))", "memset(&(**data).value.str, 0, sizeof (*(&(**data).value.str)))", "memset(&(**val), 0, sizeof (*(&(**val))))", "memset(&(**val).is_ref__gc, 0, sizeof (*(&(**val).is_ref__gc)))", "memset(&(**val).refcount__gc, 0, sizeof (*(&(**val).refcount__gc)))", "memset(&(**val).type, 0, sizeof (*(&(**val).type)))", "memset(&(**val).value, 0, sizeof (*(&(**val).value)))", "memset(&json_globals.encoder_depth, 0, sizeof (*(&json_globals.encoder_depth)))", "memset(&json_globals.error_code, 0, sizeof (*(&json_globals.error_code)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((**data).value.ht, 0, sizeof (*((**data).value.ht)))", "memset((**data).value.obj.handlers, 0, sizeof (*((**data).value.obj.handlers)))", "memset((**data).value.obj.handlers->add_ref, 0, sizeof (*((**data).value.obj.handlers->add_ref)))", "memset((**data).value.obj.handlers->call_method, 0, sizeof (*((**data).value.obj.handlers->call_method)))", "memset((**data).value.obj.handlers->cast_object, 0, sizeof (*((**data).value.obj.handlers->cast_object)))", "memset((**data).value.obj.handlers->clone_obj, 0, sizeof (*((**data).value.obj.handlers->clone_obj)))", "memset((**data).value.obj.handlers->compare_objects, 0, sizeof (*((**data).value.obj.handlers->compare_objects)))", "memset((**data).value.obj.handlers->count_elements, 0, sizeof (*((**data).value.obj.handlers->count_elements)))", "memset((**data).value.obj.handlers->del_ref, 0, sizeof (*((**data).value.obj.handlers->del_ref)))", "memset((**data).value.obj.handlers->get, 0, sizeof (*((**data).value.obj.handlers->get)))", "memset((**data).value.obj.handlers->get_class_entry, 0, sizeof (*((**data).value.obj.handlers->get_class_entry)))", "memset((**data).value.obj.handlers->get_class_name, 0, sizeof (*((**data).value.obj.handlers->get_class_name)))", "memset((**data).value.obj.handlers->get_closure, 0, sizeof (*((**data).value.obj.handlers->get_closure)))", "memset((**data).value.obj.handlers->get_constructor, 0, sizeof (*((**data).value.obj.handlers->get_constructor)))", "memset((**data).value.obj.handlers->get_debug_info, 0, sizeof (*((**data).value.obj.handlers->get_debug_info)))", "memset((**data).value.obj.handlers->get_method, 0, sizeof (*((**data).value.obj.handlers->get_method)))", "memset((**data).value.obj.handlers->get_properties, 0, sizeof (*((**data).value.obj.handlers->get_properties)))", "memset((**data).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((**data).value.obj.handlers->get_property_ptr_ptr)))", "memset((**data).value.obj.handlers->has_dimension, 0, sizeof (*((**data).value.obj.handlers->has_dimension)))", "memset((**data).value.obj.handlers->has_property, 0, sizeof (*((**data).value.obj.handlers->has_property)))", "memset((**data).value.obj.handlers->read_dimension, 0, sizeof (*((**data).value.obj.handlers->read_dimension)))", "memset((**data).value.obj.handlers->read_property, 0, sizeof (*((**data).value.obj.handlers->read_property)))", "memset((**data).value.obj.handlers->set, 0, sizeof (*((**data).value.obj.handlers->set)))", "memset((**data).value.obj.handlers->unset_dimension, 0, sizeof (*((**data).value.obj.handlers->unset_dimension)))", "memset((**data).value.obj.handlers->unset_property, 0, sizeof (*((**data).value.obj.handlers->unset_property)))", "memset((**data).value.obj.handlers->write_dimension, 0, sizeof (*((**data).value.obj.handlers->write_dimension)))", "memset((**data).value.obj.handlers->write_property, 0, sizeof (*((**data).value.obj.handlers->write_property)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (i)", "(json_globals.error_code) = (need_comma)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (r)", "(key)++", "(myht)->nApplyCount++", "(myht)->nApplyCount--", "(tmp_ht)->nApplyCount++", "(tmp_ht)->nApplyCount--", "_efree(((key)))", "i = (0)", "i = (1)", "i = (10)", "i = (128)", "i = (16)", "i = (2)", "i = (3)", "i = (32)", "i = (4)", "i = (5)", "i = (78)", "i = (i)", "i = (myht) ? zend_hash_num_elements(myht) : 0", "i = (need_comma)", "i = (options)", "i = (r)", "i = (tmp_ht) ? zend_hash_num_elements(myht) : 0", "i = myht ? zend_hash_num_elements((myht)) : 0", "i = myht ? zend_hash_num_elements((tmp_ht)) : 0", "i = zend_hash_get_current_key_ex((myht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex((tmp_ht), &key, &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &(key), &key_len, &index, 0, &pos)", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &(pos))", "json_escape_string((buf), key, key_len - 1, options)", "json_escape_string(buf, (key), key_len - 1, options)", "json_pretty_print_char((buf), options, ' ')", "json_pretty_print_char((buf), options, '\\n')", "json_pretty_print_indent((buf), options)", "myht = ((**(data))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(data)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**(val))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(val)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(data)))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(val)))", "myht = ((**val).type == 4 ? (**(data)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**(val)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(data)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(val)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(data)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(val)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "myht = (myht)", "myht = (tmp_ht)", "need_comma = (0)", "need_comma = (1)", "need_comma = (10)", "need_comma = (128)", "need_comma = (16)", "need_comma = (2)", "need_comma = (3)", "need_comma = (32)", "need_comma = (4)", "need_comma = (5)", "need_comma = (78)", "need_comma = (i)", "need_comma = (need_comma)", "need_comma = (options)", "need_comma = (r)", "php_json_encode((buf), *data, options)", "php_json_encode(buf, *(data), options)", "php_json_encode(buf, *(val), options)", "r = (0)", "r = (1)", "r = (10)", "r = (128)", "r = (16)", "r = (2)", "r = (3)", "r = (32)", "r = (4)", "r = (5)", "r = (78)", "r = (i)", "r = (need_comma)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((data))", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((val))", "r = (options)", "r = (r)", "tmp_ht = ((**(data)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**(val)).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(data)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**(val)).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(data)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**(val)).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(data)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**(val)).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(data))) : ((void *)0))))", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "tmp_ht = (myht)", "tmp_ht = (tmp_ht)", "zend_hash_internal_pointer_reset_ex((myht), &pos)", "zend_hash_internal_pointer_reset_ex((tmp_ht), &pos)", "zend_hash_internal_pointer_reset_ex(myht, &(pos))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "exit(1)", "i = myht ? zend_hash_num_elements(myht) : 0", "i = zend_hash_get_current_key_ex(myht, &key, &key_len, &index, 0, &pos)", "json_escape_string(buf, key, key_len - 1, options)", "json_pretty_print_char(buf, options, ' ')", "json_pretty_print_char(buf, options, '\\n')", "json_pretty_print_indent(buf, options)", "myht = ((**val)).value.obj.handlers->get_properties(&(**val))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "need_comma = 1", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "php_json_encode(buf, *data, options)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type(val)", "r = 1", "tmp_ht = ((**data).type == 4 ? (**data).value.ht : (((**data).type == 5 ? (**data).value.obj.handlers->get_properties((*data)) : ((void *)0))))", "tmp_ht->nApplyCount++", "tmp_ht->nApplyCount--", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_internal_pointer_reset_ex(myht, &pos)", "if (__is_neg(\"\", \"L281\", 13, &(r), sizeof (r), &(buf), sizeof (buf), &(options), sizeof (options), &(i), sizeof (i), &(data), sizeof (data), &(val), sizeof (val), &(key), sizeof (key), &(tmp_ht), sizeof (tmp_ht), &(need_comma), sizeof (need_comma), &(myht), sizeof (myht), &(pos), sizeof (pos), &(key_len), sizeof (key_len), &(index), sizeof (index)))\n    break;\n", "if (__is_neg(\"\", \"L281\", 13, &(r), sizeof (r), &(buf), sizeof (buf), &(options), sizeof (options), &(i), sizeof (i), &(data), sizeof (data), &(val), sizeof (val), &(key), sizeof (key), &(tmp_ht), sizeof (tmp_ht), &(need_comma), sizeof (need_comma), &(myht), sizeof (myht), &(pos), sizeof (pos), &(key_len), sizeof (key_len), &(index), sizeof (index)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.31621320064739]
								}, {
									"case":	2,
									"scores":	[-8.31621320064739]
								}, {
									"case":	3,
									"scores":	[-8.31621320064739]
								}, {
									"case":	4,
									"scores":	[-8.31621320064739]
								}, {
									"case":	5,
									"scores":	[-8.31621320064739]
								}, {
									"case":	6,
									"scores":	[-8.31621320064739]
								}, {
									"case":	7,
									"scores":	[-8.31621320064739]
								}, {
									"case":	8,
									"scores":	[-8.31621320064739]
								}, {
									"case":	9,
									"scores":	[-8.31621320064739]
								}, {
									"case":	10,
									"scores":	[-8.31621320064739]
								}, {
									"case":	11,
									"scores":	[-8.31621320064739]
								}, {
									"case":	12,
									"scores":	[-8.31621320064739]
								}, {
									"case":	13,
									"scores":	[-8.31621320064739]
								}, {
									"case":	14,
									"scores":	[-8.31621320064739]
								}, {
									"case":	15,
									"scores":	[-8.31621320064739]
								}, {
									"case":	16,
									"scores":	[-8.31621320064739]
								}, {
									"case":	17,
									"scores":	[-8.31621320064739]
								}, {
									"case":	18,
									"scores":	[-8.31621320064739]
								}, {
									"case":	19,
									"scores":	[-8.31621320064739]
								}, {
									"case":	20,
									"scores":	[-8.31621320064739]
								}, {
									"case":	21,
									"scores":	[-8.31621320064739]
								}, {
									"case":	22,
									"scores":	[-8.31621320064739]
								}, {
									"case":	23,
									"scores":	[-8.31621320064739]
								}, {
									"case":	24,
									"scores":	[-8.31621320064739]
								}, {
									"case":	25,
									"scores":	[-8.31621320064739]
								}, {
									"case":	26,
									"scores":	[-8.31621320064739]
								}, {
									"case":	27,
									"scores":	[-8.31621320064739]
								}, {
									"case":	28,
									"scores":	[-8.31621320064739]
								}, {
									"case":	29,
									"scores":	[-8.31621320064739]
								}, {
									"case":	30,
									"scores":	[-8.31621320064739]
								}, {
									"case":	31,
									"scores":	[-8.31621320064739]
								}, {
									"case":	32,
									"scores":	[-8.31621320064739]
								}, {
									"case":	33,
									"scores":	[-8.31621320064739]
								}, {
									"case":	34,
									"scores":	[-8.31621320064739]
								}, {
									"case":	35,
									"scores":	[-8.31621320064739]
								}, {
									"case":	36,
									"scores":	[-8.31621320064739]
								}, {
									"case":	37,
									"scores":	[-8.31621320064739]
								}, {
									"case":	38,
									"scores":	[-8.31621320064739]
								}, {
									"case":	39,
									"scores":	[-8.31621320064739]
								}, {
									"case":	40,
									"scores":	[-8.31621320064739]
								}, {
									"case":	41,
									"scores":	[-8.31621320064739]
								}, {
									"case":	42,
									"scores":	[-8.31621320064739]
								}, {
									"case":	43,
									"scores":	[-8.31621320064739]
								}, {
									"case":	44,
									"scores":	[-8.31621320064739]
								}, {
									"case":	45,
									"scores":	[-8.31621320064739]
								}, {
									"case":	46,
									"scores":	[-8.31621320064739]
								}, {
									"case":	47,
									"scores":	[-8.31621320064739]
								}, {
									"case":	48,
									"scores":	[-8.31621320064739]
								}, {
									"case":	49,
									"scores":	[-8.31621320064739]
								}, {
									"case":	50,
									"scores":	[-8.31621320064739]
								}, {
									"case":	51,
									"scores":	[-8.31621320064739]
								}, {
									"case":	52,
									"scores":	[-8.31621320064739]
								}, {
									"case":	53,
									"scores":	[-8.31621320064739]
								}, {
									"case":	54,
									"scores":	[-8.31621320064739]
								}, {
									"case":	55,
									"scores":	[-8.31621320064739]
								}, {
									"case":	56,
									"scores":	[-8.31621320064739]
								}, {
									"case":	57,
									"scores":	[-8.31621320064739]
								}, {
									"case":	58,
									"scores":	[-8.31621320064739]
								}, {
									"case":	59,
									"scores":	[-8.31621320064739]
								}, {
									"case":	60,
									"scores":	[-8.31621320064739]
								}, {
									"case":	61,
									"scores":	[-8.31621320064739]
								}, {
									"case":	62,
									"scores":	[-8.31621320064739]
								}, {
									"case":	63,
									"scores":	[-8.31621320064739]
								}, {
									"case":	64,
									"scores":	[-8.31621320064739]
								}, {
									"case":	65,
									"scores":	[-8.31621320064739]
								}, {
									"case":	66,
									"scores":	[-8.31621320064739]
								}, {
									"case":	67,
									"scores":	[-8.31621320064739]
								}, {
									"case":	68,
									"scores":	[-8.31621320064739]
								}, {
									"case":	69,
									"scores":	[-8.31621320064739]
								}, {
									"case":	70,
									"scores":	[-8.31621320064739]
								}, {
									"case":	71,
									"scores":	[-8.31621320064739]
								}, {
									"case":	72,
									"scores":	[-8.31621320064739]
								}, {
									"case":	73,
									"scores":	[-8.31621320064739]
								}, {
									"case":	74,
									"scores":	[-8.31621320064739]
								}, {
									"case":	75,
									"scores":	[-8.31621320064739]
								}, {
									"case":	76,
									"scores":	[-8.31621320064739]
								}, {
									"case":	77,
									"scores":	[-8.31621320064739]
								}, {
									"case":	78,
									"scores":	[-8.31621320064739]
								}, {
									"case":	79,
									"scores":	[-8.31621320064739]
								}, {
									"case":	80,
									"scores":	[-8.31621320064739]
								}, {
									"case":	81,
									"scores":	[-8.31621320064739]
								}, {
									"case":	82,
									"scores":	[-8.31621320064739]
								}, {
									"case":	83,
									"scores":	[-8.31621320064739]
								}, {
									"case":	84,
									"scores":	[-8.31621320064739]
								}, {
									"case":	85,
									"scores":	[-8.31621320064739]
								}, {
									"case":	86,
									"scores":	[-8.31621320064739]
								}, {
									"case":	87,
									"scores":	[-8.31621320064739]
								}, {
									"case":	88,
									"scores":	[-8.31621320064739]
								}, {
									"case":	89,
									"scores":	[-8.31621320064739]
								}, {
									"case":	90,
									"scores":	[-8.31621320064739]
								}, {
									"case":	91,
									"scores":	[-8.31621320064739]
								}, {
									"case":	92,
									"scores":	[-8.31621320064739]
								}, {
									"case":	93,
									"scores":	[-8.31621320064739]
								}, {
									"case":	94,
									"scores":	[-8.31621320064739]
								}, {
									"case":	95,
									"scores":	[-8.31621320064739]
								}, {
									"case":	96,
									"scores":	[-8.31621320064739]
								}, {
									"case":	97,
									"scores":	[-8.31621320064739]
								}, {
									"case":	98,
									"scores":	[-8.31621320064739]
								}, {
									"case":	99,
									"scores":	[-8.31621320064739]
								}, {
									"case":	100,
									"scores":	[-8.31621320064739]
								}, {
									"case":	101,
									"scores":	[-8.31621320064739]
								}, {
									"case":	102,
									"scores":	[-8.31621320064739]
								}, {
									"case":	103,
									"scores":	[-8.31621320064739]
								}, {
									"case":	104,
									"scores":	[-8.31621320064739]
								}, {
									"case":	105,
									"scores":	[-8.31621320064739]
								}, {
									"case":	106,
									"scores":	[-8.31621320064739]
								}, {
									"case":	107,
									"scores":	[-8.31621320064739]
								}, {
									"case":	108,
									"scores":	[-8.31621320064739]
								}, {
									"case":	109,
									"scores":	[-8.31621320064739]
								}, {
									"case":	110,
									"scores":	[-8.31621320064739]
								}, {
									"case":	111,
									"scores":	[-8.31621320064739]
								}, {
									"case":	112,
									"scores":	[-8.31621320064739]
								}, {
									"case":	113,
									"scores":	[-8.31621320064739]
								}, {
									"case":	114,
									"scores":	[-8.31621320064739]
								}, {
									"case":	115,
									"scores":	[-8.31621320064739]
								}, {
									"case":	116,
									"scores":	[-8.31621320064739]
								}, {
									"case":	117,
									"scores":	[-8.31621320064739]
								}, {
									"case":	118,
									"scores":	[-8.31621320064739]
								}, {
									"case":	119,
									"scores":	[-8.31621320064739]
								}, {
									"case":	120,
									"scores":	[-8.31621320064739]
								}, {
									"case":	121,
									"scores":	[-8.31621320064739]
								}, {
									"case":	122,
									"scores":	[-8.31621320064739]
								}, {
									"case":	123,
									"scores":	[-8.31621320064739]
								}, {
									"case":	124,
									"scores":	[-8.31621320064739]
								}, {
									"case":	125,
									"scores":	[-8.31621320064739]
								}, {
									"case":	126,
									"scores":	[-8.31621320064739]
								}, {
									"case":	127,
									"scores":	[-8.31621320064739]
								}, {
									"case":	128,
									"scores":	[-8.31621320064739]
								}, {
									"case":	129,
									"scores":	[-8.31621320064739]
								}, {
									"case":	130,
									"scores":	[-8.31621320064739]
								}, {
									"case":	131,
									"scores":	[-8.31621320064739]
								}, {
									"case":	132,
									"scores":	[-8.31621320064739]
								}, {
									"case":	133,
									"scores":	[-8.31621320064739]
								}, {
									"case":	134,
									"scores":	[-8.31621320064739]
								}, {
									"case":	135,
									"scores":	[-8.31621320064739]
								}, {
									"case":	136,
									"scores":	[-8.31621320064739]
								}, {
									"case":	137,
									"scores":	[-8.31621320064739]
								}, {
									"case":	138,
									"scores":	[-8.31621320064739]
								}, {
									"case":	139,
									"scores":	[-8.31621320064739]
								}, {
									"case":	140,
									"scores":	[-8.31621320064739]
								}, {
									"case":	141,
									"scores":	[-8.31621320064739]
								}, {
									"case":	142,
									"scores":	[-8.31621320064739]
								}, {
									"case":	143,
									"scores":	[-8.31621320064739]
								}, {
									"case":	144,
									"scores":	[-8.31621320064739]
								}, {
									"case":	145,
									"scores":	[-8.31621320064739]
								}, {
									"case":	146,
									"scores":	[-8.31621320064739]
								}, {
									"case":	147,
									"scores":	[-8.31621320064739]
								}, {
									"case":	148,
									"scores":	[-8.31621320064739]
								}, {
									"case":	149,
									"scores":	[-8.31621320064739]
								}, {
									"case":	150,
									"scores":	[-8.31621320064739]
								}, {
									"case":	151,
									"scores":	[-8.31621320064739]
								}, {
									"case":	152,
									"scores":	[-8.31621320064739]
								}, {
									"case":	153,
									"scores":	[-8.31621320064739]
								}, {
									"case":	154,
									"scores":	[-8.31621320064739]
								}, {
									"case":	155,
									"scores":	[-8.31621320064739]
								}, {
									"case":	156,
									"scores":	[-8.31621320064739]
								}, {
									"case":	157,
									"scores":	[-8.31621320064739]
								}, {
									"case":	158,
									"scores":	[-8.31621320064739]
								}, {
									"case":	159,
									"scores":	[-8.31621320064739]
								}, {
									"case":	160,
									"scores":	[-8.31621320064739]
								}, {
									"case":	161,
									"scores":	[-8.31621320064739]
								}, {
									"case":	162,
									"scores":	[-8.31621320064739]
								}, {
									"case":	163,
									"scores":	[-8.31621320064739]
								}, {
									"case":	164,
									"scores":	[-8.31621320064739]
								}, {
									"case":	165,
									"scores":	[-8.31621320064739]
								}, {
									"case":	166,
									"scores":	[-8.31621320064739]
								}, {
									"case":	167,
									"scores":	[-8.31621320064739]
								}, {
									"case":	168,
									"scores":	[-8.31621320064739]
								}, {
									"case":	169,
									"scores":	[-8.31621320064739]
								}, {
									"case":	170,
									"scores":	[-8.31621320064739]
								}, {
									"case":	171,
									"scores":	[-8.31621320064739]
								}, {
									"case":	172,
									"scores":	[-8.31621320064739]
								}, {
									"case":	173,
									"scores":	[-8.31621320064739]
								}, {
									"case":	174,
									"scores":	[-8.31621320064739]
								}, {
									"case":	175,
									"scores":	[-8.31621320064739]
								}, {
									"case":	176,
									"scores":	[-8.31621320064739]
								}, {
									"case":	177,
									"scores":	[-8.31621320064739]
								}, {
									"case":	178,
									"scores":	[-8.31621320064739]
								}, {
									"case":	179,
									"scores":	[-8.31621320064739]
								}, {
									"case":	180,
									"scores":	[-8.31621320064739]
								}, {
									"case":	181,
									"scores":	[-8.31621320064739]
								}, {
									"case":	182,
									"scores":	[-8.31621320064739]
								}, {
									"case":	183,
									"scores":	[-8.31621320064739]
								}, {
									"case":	184,
									"scores":	[-8.31621320064739]
								}, {
									"case":	185,
									"scores":	[-8.31621320064739]
								}, {
									"case":	186,
									"scores":	[-8.31621320064739]
								}, {
									"case":	187,
									"scores":	[-8.31621320064739]
								}, {
									"case":	188,
									"scores":	[-8.31621320064739]
								}, {
									"case":	189,
									"scores":	[-8.31621320064739]
								}, {
									"case":	190,
									"scores":	[-8.31621320064739]
								}, {
									"case":	191,
									"scores":	[-8.31621320064739]
								}, {
									"case":	192,
									"scores":	[-8.31621320064739]
								}, {
									"case":	193,
									"scores":	[-8.31621320064739]
								}, {
									"case":	194,
									"scores":	[-8.31621320064739]
								}, {
									"case":	195,
									"scores":	[-8.31621320064739]
								}, {
									"case":	196,
									"scores":	[-8.31621320064739]
								}, {
									"case":	197,
									"scores":	[-8.31621320064739]
								}, {
									"case":	198,
									"scores":	[-8.31621320064739]
								}, {
									"case":	199,
									"scores":	[-8.31621320064739]
								}, {
									"case":	200,
									"scores":	[-8.31621320064739]
								}, {
									"case":	201,
									"scores":	[-8.31621320064739]
								}, {
									"case":	202,
									"scores":	[-8.31621320064739]
								}, {
									"case":	203,
									"scores":	[-8.31621320064739]
								}, {
									"case":	204,
									"scores":	[-8.31621320064739]
								}, {
									"case":	205,
									"scores":	[-8.31621320064739]
								}, {
									"case":	206,
									"scores":	[-8.31621320064739]
								}, {
									"case":	207,
									"scores":	[-8.31621320064739]
								}, {
									"case":	208,
									"scores":	[-8.31621320064739]
								}, {
									"case":	209,
									"scores":	[-8.31621320064739]
								}, {
									"case":	210,
									"scores":	[-8.31621320064739]
								}, {
									"case":	211,
									"scores":	[-8.31621320064739]
								}, {
									"case":	212,
									"scores":	[-8.31621320064739]
								}, {
									"case":	213,
									"scores":	[-8.31621320064739]
								}, {
									"case":	214,
									"scores":	[-8.31621320064739]
								}, {
									"case":	215,
									"scores":	[-8.31621320064739]
								}, {
									"case":	216,
									"scores":	[-8.31621320064739]
								}, {
									"case":	217,
									"scores":	[-8.31621320064739]
								}, {
									"case":	218,
									"scores":	[-8.31621320064739]
								}, {
									"case":	219,
									"scores":	[-8.31621320064739]
								}, {
									"case":	220,
									"scores":	[-8.31621320064739]
								}, {
									"case":	221,
									"scores":	[-8.31621320064739]
								}, {
									"case":	222,
									"scores":	[-8.31621320064739]
								}, {
									"case":	223,
									"scores":	[-8.31621320064739]
								}, {
									"case":	224,
									"scores":	[-8.31621320064739]
								}, {
									"case":	225,
									"scores":	[-8.31621320064739]
								}, {
									"case":	226,
									"scores":	[-8.31621320064739]
								}, {
									"case":	227,
									"scores":	[-8.31621320064739]
								}, {
									"case":	228,
									"scores":	[-8.31621320064739]
								}, {
									"case":	229,
									"scores":	[-8.31621320064739]
								}, {
									"case":	230,
									"scores":	[-8.31621320064739]
								}, {
									"case":	231,
									"scores":	[-8.31621320064739]
								}, {
									"case":	232,
									"scores":	[-8.31621320064739]
								}, {
									"case":	233,
									"scores":	[-8.31621320064739]
								}, {
									"case":	234,
									"scores":	[-8.31621320064739]
								}, {
									"case":	235,
									"scores":	[-8.31621320064739]
								}, {
									"case":	236,
									"scores":	[-8.31621320064739]
								}, {
									"case":	237,
									"scores":	[-8.31621320064739]
								}, {
									"case":	238,
									"scores":	[-8.31621320064739]
								}, {
									"case":	239,
									"scores":	[-11.31901931664739, -10.334707832347391, -10.53397212764739, -11.576604490647391, -11.950098991647391, -12.379958187647389, -11.487549818647389, -12.86938340134739, -11.08843051364739, -11.85580378444739, -11.85580378444739, -10.21987461764739, -11.609764870647389]
								}, {
									"case":	240,
									"scores":	[-11.31901931664739, -10.334707832347391, -10.53397212764739, -11.576604490647391, -11.950098991647391, -12.379958187647389, -11.487549818647389, -12.86938340134739, -11.08843051364739, -11.85580378444739, -11.85580378444739, -10.21987461764739, -11.609764870647389]
								}]
						}, {
							"switch":	14,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	281,
							"begin_column":	12,
							"end_line":	325,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L281\", 13, &(r), sizeof (r), &(buf), sizeof (buf), &(options), sizeof (options), &(i), sizeof (i), &(data), sizeof (data), &(val), sizeof (val), &(key), sizeof (key), &(tmp_ht), sizeof (tmp_ht), &(need_comma), sizeof (need_comma), &(myht), sizeof (myht), &(pos), sizeof (pos), &(key_len), sizeof (key_len), &(index), sizeof (index))) {\n    if (i == 1) {\n        if (key[0] == '\\x00' && (**val).type == 5) {\n            if (tmp_ht) {\n                tmp_ht->nApplyCount--;\n            }\n            continue;\n        }\n        if (need_comma) {\n            do {\n                register size_t __nl;\n                do {\n                    if (!(((buf)))->c) {\n                        (((buf)))->len = 0;\n                        __nl = (1);\n                        (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    } else {\n                        __nl = (((buf)))->len + (1);\n                        if (__nl >= (((buf)))->a) {\n                            (((buf)))->a = __nl + 128;\n                            (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                ((buf))->len = __nl;\n                ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n            } while (0);\n            json_pretty_print_char(buf, options, '\\n');\n        } else {\n            need_comma = 1;\n        }\n        json_pretty_print_indent(buf, options);\n        json_escape_string(buf, key, key_len - 1, options);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n        } while (0);\n        json_pretty_print_char(buf, options, ' ');\n        php_json_encode(buf, *data, options);\n    } else {\n        if (need_comma) {\n            do {\n                register size_t __nl;\n                do {\n                    if (!(((buf)))->c) {\n                        (((buf)))->len = 0;\n                        __nl = (1);\n                        (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    } else {\n                        __nl = (((buf)))->len + (1);\n                        if (__nl >= (((buf)))->a) {\n                            (((buf)))->a = __nl + 128;\n                            (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                ((buf))->len = __nl;\n                ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n            } while (0);\n            json_pretty_print_char(buf, options, '\\n');\n        } else {\n            need_comma = 1;\n        }\n        json_pretty_print_indent(buf, options);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n        } while (0);\n        do {\n            char __b[32];\n            char *__t;\n            do {\n                if (((((long)index))) < 0) {\n                    do {\n                        char *__p = ((__b + sizeof (__b) - 1));\n                        unsigned long __num = (-(((((long)index)))));\n                        *__p = '\\x00';\n                        do {\n                            *--__p = (char)(__num % 10) + '0';\n                            __num /= 10;\n                        } while (__num > 0);\n                        (__t) = __p;\n                    } while (0);\n                    *--(__t) = '-';\n                } else {\n                    do {\n                        char *__p = ((__b + sizeof (__b) - 1));\n                        unsigned long __num = ((((((long)index)))));\n                        *__p = '\\x00';\n                        do {\n                            *--__p = (char)(__num % 10) + '0';\n                            __num /= 10;\n                        } while (__num > 0);\n                        (__t) = __p;\n                    } while (0);\n                }\n            } while (0);\n            do {\n                register size_t __nl;\n                smart_str *__dest = (smart_str *)((((buf))));\n                do {\n                    if (!(__dest)->c) {\n                        (__dest)->len = 0;\n                        __nl = ((__b + sizeof (__b) - 1 - __t));\n                        (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                        (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                    } else {\n                        __nl = (__dest)->len + ((__b + sizeof (__b) - 1 - __t));\n                        if (__nl >= (__dest)->a) {\n                            (__dest)->a = __nl + 128;\n                            (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                memcpy(__dest->c + __dest->len, (__t), (__b + sizeof (__b) - 1 - __t));\n                __dest->len = __nl;\n            } while (0);\n        } while (0);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n        } while (0);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n        } while (0);\n        json_pretty_print_char(buf, options, ' ');\n        php_json_encode(buf, *data, options);\n    }\n}\n", "if ((r == 1) || __is_neg(\"\", \"L281\", 13, &(r), sizeof (r), &(buf), sizeof (buf), &(options), sizeof (options), &(i), sizeof (i), &(data), sizeof (data), &(val), sizeof (val), &(key), sizeof (key), &(tmp_ht), sizeof (tmp_ht), &(need_comma), sizeof (need_comma), &(myht), sizeof (myht), &(pos), sizeof (pos), &(key_len), sizeof (key_len), &(index), sizeof (index))) {\n    if (i == 1) {\n        if (key[0] == '\\x00' && (**val).type == 5) {\n            if (tmp_ht) {\n                tmp_ht->nApplyCount--;\n            }\n            continue;\n        }\n        if (need_comma) {\n            do {\n                register size_t __nl;\n                do {\n                    if (!(((buf)))->c) {\n                        (((buf)))->len = 0;\n                        __nl = (1);\n                        (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    } else {\n                        __nl = (((buf)))->len + (1);\n                        if (__nl >= (((buf)))->a) {\n                            (((buf)))->a = __nl + 128;\n                            (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                ((buf))->len = __nl;\n                ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n            } while (0);\n            json_pretty_print_char(buf, options, '\\n');\n        } else {\n            need_comma = 1;\n        }\n        json_pretty_print_indent(buf, options);\n        json_escape_string(buf, key, key_len - 1, options);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n        } while (0);\n        json_pretty_print_char(buf, options, ' ');\n        php_json_encode(buf, *data, options);\n    } else {\n        if (need_comma) {\n            do {\n                register size_t __nl;\n                do {\n                    if (!(((buf)))->c) {\n                        (((buf)))->len = 0;\n                        __nl = (1);\n                        (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    } else {\n                        __nl = (((buf)))->len + (1);\n                        if (__nl >= (((buf)))->a) {\n                            (((buf)))->a = __nl + 128;\n                            (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                ((buf))->len = __nl;\n                ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n            } while (0);\n            json_pretty_print_char(buf, options, '\\n');\n        } else {\n            need_comma = 1;\n        }\n        json_pretty_print_indent(buf, options);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n        } while (0);\n        do {\n            char __b[32];\n            char *__t;\n            do {\n                if (((((long)index))) < 0) {\n                    do {\n                        char *__p = ((__b + sizeof (__b) - 1));\n                        unsigned long __num = (-(((((long)index)))));\n                        *__p = '\\x00';\n                        do {\n                            *--__p = (char)(__num % 10) + '0';\n                            __num /= 10;\n                        } while (__num > 0);\n                        (__t) = __p;\n                    } while (0);\n                    *--(__t) = '-';\n                } else {\n                    do {\n                        char *__p = ((__b + sizeof (__b) - 1));\n                        unsigned long __num = ((((((long)index)))));\n                        *__p = '\\x00';\n                        do {\n                            *--__p = (char)(__num % 10) + '0';\n                            __num /= 10;\n                        } while (__num > 0);\n                        (__t) = __p;\n                    } while (0);\n                }\n            } while (0);\n            do {\n                register size_t __nl;\n                smart_str *__dest = (smart_str *)((((buf))));\n                do {\n                    if (!(__dest)->c) {\n                        (__dest)->len = 0;\n                        __nl = ((__b + sizeof (__b) - 1 - __t));\n                        (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                        (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                    } else {\n                        __nl = (__dest)->len + ((__b + sizeof (__b) - 1 - __t));\n                        if (__nl >= (__dest)->a) {\n                            (__dest)->a = __nl + 128;\n                            (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                memcpy(__dest->c + __dest->len, (__t), (__b + sizeof (__b) - 1 - __t));\n                __dest->len = __nl;\n            } while (0);\n        } while (0);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n        } while (0);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n        } while (0);\n        json_pretty_print_char(buf, options, ' ');\n        php_json_encode(buf, *data, options);\n    }\n}\n", "if ((r == 1) && !__is_neg(\"\", \"L281\", 13, &(r), sizeof (r), &(buf), sizeof (buf), &(options), sizeof (options), &(i), sizeof (i), &(data), sizeof (data), &(val), sizeof (val), &(key), sizeof (key), &(tmp_ht), sizeof (tmp_ht), &(need_comma), sizeof (need_comma), &(myht), sizeof (myht), &(pos), sizeof (pos), &(key_len), sizeof (key_len), &(index), sizeof (index))) {\n    if (i == 1) {\n        if (key[0] == '\\x00' && (**val).type == 5) {\n            if (tmp_ht) {\n                tmp_ht->nApplyCount--;\n            }\n            continue;\n        }\n        if (need_comma) {\n            do {\n                register size_t __nl;\n                do {\n                    if (!(((buf)))->c) {\n                        (((buf)))->len = 0;\n                        __nl = (1);\n                        (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    } else {\n                        __nl = (((buf)))->len + (1);\n                        if (__nl >= (((buf)))->a) {\n                            (((buf)))->a = __nl + 128;\n                            (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                ((buf))->len = __nl;\n                ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n            } while (0);\n            json_pretty_print_char(buf, options, '\\n');\n        } else {\n            need_comma = 1;\n        }\n        json_pretty_print_indent(buf, options);\n        json_escape_string(buf, key, key_len - 1, options);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n        } while (0);\n        json_pretty_print_char(buf, options, ' ');\n        php_json_encode(buf, *data, options);\n    } else {\n        if (need_comma) {\n            do {\n                register size_t __nl;\n                do {\n                    if (!(((buf)))->c) {\n                        (((buf)))->len = 0;\n                        __nl = (1);\n                        (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    } else {\n                        __nl = (((buf)))->len + (1);\n                        if (__nl >= (((buf)))->a) {\n                            (((buf)))->a = __nl + 128;\n                            (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                ((buf))->len = __nl;\n                ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n            } while (0);\n            json_pretty_print_char(buf, options, '\\n');\n        } else {\n            need_comma = 1;\n        }\n        json_pretty_print_indent(buf, options);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n        } while (0);\n        do {\n            char __b[32];\n            char *__t;\n            do {\n                if (((((long)index))) < 0) {\n                    do {\n                        char *__p = ((__b + sizeof (__b) - 1));\n                        unsigned long __num = (-(((((long)index)))));\n                        *__p = '\\x00';\n                        do {\n                            *--__p = (char)(__num % 10) + '0';\n                            __num /= 10;\n                        } while (__num > 0);\n                        (__t) = __p;\n                    } while (0);\n                    *--(__t) = '-';\n                } else {\n                    do {\n                        char *__p = ((__b + sizeof (__b) - 1));\n                        unsigned long __num = ((((((long)index)))));\n                        *__p = '\\x00';\n                        do {\n                            *--__p = (char)(__num % 10) + '0';\n                            __num /= 10;\n                        } while (__num > 0);\n                        (__t) = __p;\n                    } while (0);\n                }\n            } while (0);\n            do {\n                register size_t __nl;\n                smart_str *__dest = (smart_str *)((((buf))));\n                do {\n                    if (!(__dest)->c) {\n                        (__dest)->len = 0;\n                        __nl = ((__b + sizeof (__b) - 1 - __t));\n                        (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                        (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                    } else {\n                        __nl = (__dest)->len + ((__b + sizeof (__b) - 1 - __t));\n                        if (__nl >= (__dest)->a) {\n                            (__dest)->a = __nl + 128;\n                            (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                memcpy(__dest->c + __dest->len, (__t), (__b + sizeof (__b) - 1 - __t));\n                __dest->len = __nl;\n            } while (0);\n        } while (0);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n        } while (0);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n        } while (0);\n        json_pretty_print_char(buf, options, ' ');\n        php_json_encode(buf, *data, options);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.35004347032815, -5.4252940803281486, -5.0549489703281481, -3.66384117032815, -4.12880447032815, -5.3530559703281479, -4.34526987032815, -6.3392875703281515, -6.2507619913281527, -6.54571927032815, -6.54571927032815, -4.2453451403281477, -5.78783117032815]
								}, {
									"case":	2,
									"scores":	[-2.0018896754281457, -4.077140285428146, -3.7067951754281454, -2.315687375428146, -2.7806506754281459, -4.0049021754281453, -2.9971160754281461, -4.9911337754281462, -4.9026081964281456, -5.1975654754281457, -5.1975654754281457, -2.8971913454281455, -4.439677375428146]
								}, {
									"case":	3,
									"scores":	[-2.0018896754281457, -4.077140285428146, -3.7067951754281454, -2.315687375428146, -2.7806506754281459, -4.0049021754281453, -2.9971160754281461, -4.9911337754281462, -4.9026081964281456, -5.1975654754281457, -5.1975654754281457, -2.8971913454281455, -4.439677375428146]
								}]
						}, {
							"switch":	40,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	281,
							"begin_column":	12,
							"end_line":	325,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L281\", 13, &(r), sizeof (r), &(buf), sizeof (buf), &(options), sizeof (options), &(i), sizeof (i), &(data), sizeof (data), &(val), sizeof (val), &(key), sizeof (key), &(tmp_ht), sizeof (tmp_ht), &(need_comma), sizeof (need_comma), &(myht), sizeof (myht), &(pos), sizeof (pos), &(key_len), sizeof (key_len), &(index), sizeof (index)))\n    if (r == 1) {\n        if (i == 1) {\n            if (key[0] == '\\x00' && (**val).type == 5) {\n                if (tmp_ht) {\n                    tmp_ht->nApplyCount--;\n                }\n                continue;\n            }\n            if (need_comma) {\n                do {\n                    register size_t __nl;\n                    do {\n                        if (!(((buf)))->c) {\n                            (((buf)))->len = 0;\n                            __nl = (1);\n                            (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                            (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                        } else {\n                            __nl = (((buf)))->len + (1);\n                            if (__nl >= (((buf)))->a) {\n                                (((buf)))->a = __nl + 128;\n                                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                            }\n                        }\n                    } while (0);\n                    ((buf))->len = __nl;\n                    ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n                } while (0);\n                json_pretty_print_char(buf, options, '\\n');\n            } else {\n                need_comma = 1;\n            }\n            json_pretty_print_indent(buf, options);\n            json_escape_string(buf, key, key_len - 1, options);\n            do {\n                register size_t __nl;\n                do {\n                    if (!(((buf)))->c) {\n                        (((buf)))->len = 0;\n                        __nl = (1);\n                        (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    } else {\n                        __nl = (((buf)))->len + (1);\n                        if (__nl >= (((buf)))->a) {\n                            (((buf)))->a = __nl + 128;\n                            (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                ((buf))->len = __nl;\n                ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n            } while (0);\n            json_pretty_print_char(buf, options, ' ');\n            php_json_encode(buf, *data, options);\n        } else {\n            if (need_comma) {\n                do {\n                    register size_t __nl;\n                    do {\n                        if (!(((buf)))->c) {\n                            (((buf)))->len = 0;\n                            __nl = (1);\n                            (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                            (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                        } else {\n                            __nl = (((buf)))->len + (1);\n                            if (__nl >= (((buf)))->a) {\n                                (((buf)))->a = __nl + 128;\n                                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                            }\n                        }\n                    } while (0);\n                    ((buf))->len = __nl;\n                    ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n                } while (0);\n                json_pretty_print_char(buf, options, '\\n');\n            } else {\n                need_comma = 1;\n            }\n            json_pretty_print_indent(buf, options);\n            do {\n                register size_t __nl;\n                do {\n                    if (!(((buf)))->c) {\n                        (((buf)))->len = 0;\n                        __nl = (1);\n                        (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    } else {\n                        __nl = (((buf)))->len + (1);\n                        if (__nl >= (((buf)))->a) {\n                            (((buf)))->a = __nl + 128;\n                            (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                ((buf))->len = __nl;\n                ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n            } while (0);\n            do {\n                char __b[32];\n                char *__t;\n                do {\n                    if (((((long)index))) < 0) {\n                        do {\n                            char *__p = ((__b + sizeof (__b) - 1));\n                            unsigned long __num = (-(((((long)index)))));\n                            *__p = '\\x00';\n                            do {\n                                *--__p = (char)(__num % 10) + '0';\n                                __num /= 10;\n                            } while (__num > 0);\n                            (__t) = __p;\n                        } while (0);\n                        *--(__t) = '-';\n                    } else {\n                        do {\n                            char *__p = ((__b + sizeof (__b) - 1));\n                            unsigned long __num = ((((((long)index)))));\n                            *__p = '\\x00';\n                            do {\n                                *--__p = (char)(__num % 10) + '0';\n                                __num /= 10;\n                            } while (__num > 0);\n                            (__t) = __p;\n                        } while (0);\n                    }\n                } while (0);\n                do {\n                    register size_t __nl;\n                    smart_str *__dest = (smart_str *)((((buf))));\n                    do {\n                        if (!(__dest)->c) {\n                            (__dest)->len = 0;\n                            __nl = ((__b + sizeof (__b) - 1 - __t));\n                            (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                            (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                        } else {\n                            __nl = (__dest)->len + ((__b + sizeof (__b) - 1 - __t));\n                            if (__nl >= (__dest)->a) {\n                                (__dest)->a = __nl + 128;\n                                (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                            }\n                        }\n                    } while (0);\n                    memcpy(__dest->c + __dest->len, (__t), (__b + sizeof (__b) - 1 - __t));\n                    __dest->len = __nl;\n                } while (0);\n            } while (0);\n            do {\n                register size_t __nl;\n                do {\n                    if (!(((buf)))->c) {\n                        (((buf)))->len = 0;\n                        __nl = (1);\n                        (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    } else {\n                        __nl = (((buf)))->len + (1);\n                        if (__nl >= (((buf)))->a) {\n                            (((buf)))->a = __nl + 128;\n                            (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                ((buf))->len = __nl;\n                ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n            } while (0);\n            do {\n                register size_t __nl;\n                do {\n                    if (!(((buf)))->c) {\n                        (((buf)))->len = 0;\n                        __nl = (1);\n                        (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    } else {\n                        __nl = (((buf)))->len + (1);\n                        if (__nl >= (((buf)))->a) {\n                            (((buf)))->a = __nl + 128;\n                            (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                ((buf))->len = __nl;\n                ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n            } while (0);\n            json_pretty_print_char(buf, options, ' ');\n            php_json_encode(buf, *data, options);\n        }\n    }\n", "if (!__is_neg(\"\", \"L281\", 13, &(r), sizeof (r), &(buf), sizeof (buf), &(options), sizeof (options), &(i), sizeof (i), &(data), sizeof (data), &(val), sizeof (val), &(key), sizeof (key), &(tmp_ht), sizeof (tmp_ht), &(need_comma), sizeof (need_comma), &(myht), sizeof (myht), &(pos), sizeof (pos), &(key_len), sizeof (key_len), &(index), sizeof (index)) && (r == 1)) {\n    if (i == 1) {\n        if (key[0] == '\\x00' && (**val).type == 5) {\n            if (tmp_ht) {\n                tmp_ht->nApplyCount--;\n            }\n            continue;\n        }\n        if (need_comma) {\n            do {\n                register size_t __nl;\n                do {\n                    if (!(((buf)))->c) {\n                        (((buf)))->len = 0;\n                        __nl = (1);\n                        (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    } else {\n                        __nl = (((buf)))->len + (1);\n                        if (__nl >= (((buf)))->a) {\n                            (((buf)))->a = __nl + 128;\n                            (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                ((buf))->len = __nl;\n                ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n            } while (0);\n            json_pretty_print_char(buf, options, '\\n');\n        } else {\n            need_comma = 1;\n        }\n        json_pretty_print_indent(buf, options);\n        json_escape_string(buf, key, key_len - 1, options);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n        } while (0);\n        json_pretty_print_char(buf, options, ' ');\n        php_json_encode(buf, *data, options);\n    } else {\n        if (need_comma) {\n            do {\n                register size_t __nl;\n                do {\n                    if (!(((buf)))->c) {\n                        (((buf)))->len = 0;\n                        __nl = (1);\n                        (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    } else {\n                        __nl = (((buf)))->len + (1);\n                        if (__nl >= (((buf)))->a) {\n                            (((buf)))->a = __nl + 128;\n                            (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                ((buf))->len = __nl;\n                ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n            } while (0);\n            json_pretty_print_char(buf, options, '\\n');\n        } else {\n            need_comma = 1;\n        }\n        json_pretty_print_indent(buf, options);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n        } while (0);\n        do {\n            char __b[32];\n            char *__t;\n            do {\n                if (((((long)index))) < 0) {\n                    do {\n                        char *__p = ((__b + sizeof (__b) - 1));\n                        unsigned long __num = (-(((((long)index)))));\n                        *__p = '\\x00';\n                        do {\n                            *--__p = (char)(__num % 10) + '0';\n                            __num /= 10;\n                        } while (__num > 0);\n                        (__t) = __p;\n                    } while (0);\n                    *--(__t) = '-';\n                } else {\n                    do {\n                        char *__p = ((__b + sizeof (__b) - 1));\n                        unsigned long __num = ((((((long)index)))));\n                        *__p = '\\x00';\n                        do {\n                            *--__p = (char)(__num % 10) + '0';\n                            __num /= 10;\n                        } while (__num > 0);\n                        (__t) = __p;\n                    } while (0);\n                }\n            } while (0);\n            do {\n                register size_t __nl;\n                smart_str *__dest = (smart_str *)((((buf))));\n                do {\n                    if (!(__dest)->c) {\n                        (__dest)->len = 0;\n                        __nl = ((__b + sizeof (__b) - 1 - __t));\n                        (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                        (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                    } else {\n                        __nl = (__dest)->len + ((__b + sizeof (__b) - 1 - __t));\n                        if (__nl >= (__dest)->a) {\n                            (__dest)->a = __nl + 128;\n                            (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                memcpy(__dest->c + __dest->len, (__t), (__b + sizeof (__b) - 1 - __t));\n                __dest->len = __nl;\n            } while (0);\n        } while (0);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n        } while (0);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n        } while (0);\n        json_pretty_print_char(buf, options, ' ');\n        php_json_encode(buf, *data, options);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.05141117064739, -10.126661780647391, -9.75631667064739, -8.36520887064739, -8.83017217064739, -10.05442367064739, -9.04663757064739, -11.04065527064739, -10.952129691647389, -11.247086970647389, -11.247086970647389, -8.94671284064739, -10.489198870647389]
								}, {
									"case":	2,
									"scores":	[-7.91109917064739, -9.98634978064739, -9.61600467064739, -8.22489687064739, -8.68986017064739, -9.91411167064739, -8.90632557064739, -10.90034327064739, -10.81181769164739, -11.10677497064739, -11.10677497064739, -8.80640084064739, -10.348886870647389]
								}]
						}]
				}, {
					"line":	270,
					"switches":	[{
							"switch":	12,
							"types":	[[], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	271,
							"begin_column":	5,
							"end_line":	325,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L271\", 13, &(r), sizeof (r), &(need_comma), sizeof (need_comma), &(buf), sizeof (buf), &(options), sizeof (options), &(tmp_ht), sizeof (tmp_ht), &(data), sizeof (data), &(myht), sizeof (myht), &(pos), sizeof (pos), &(i), sizeof (i), &(key), sizeof (key), &(index), sizeof (index), &(key_len), sizeof (key_len), &(val), sizeof (val))) {\n    if (need_comma) {\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n        } while (0);\n        json_pretty_print_char(buf, options, '\\n');\n    } else {\n        need_comma = 1;\n    }\n    json_pretty_print_indent(buf, options);\n    php_json_encode(buf, *data, options);\n} else if (r == 1) {\n    if (i == 1) {\n        if (key[0] == '\\x00' && (**val).type == 5) {\n            if (tmp_ht) {\n                tmp_ht->nApplyCount--;\n            }\n            continue;\n        }\n        if (need_comma) {\n            do {\n                register size_t __nl;\n                do {\n                    if (!(((buf)))->c) {\n                        (((buf)))->len = 0;\n                        __nl = (1);\n                        (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    } else {\n                        __nl = (((buf)))->len + (1);\n                        if (__nl >= (((buf)))->a) {\n                            (((buf)))->a = __nl + 128;\n                            (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                ((buf))->len = __nl;\n                ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n            } while (0);\n            json_pretty_print_char(buf, options, '\\n');\n        } else {\n            need_comma = 1;\n        }\n        json_pretty_print_indent(buf, options);\n        json_escape_string(buf, key, key_len - 1, options);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n        } while (0);\n        json_pretty_print_char(buf, options, ' ');\n        php_json_encode(buf, *data, options);\n    } else {\n        if (need_comma) {\n            do {\n                register size_t __nl;\n                do {\n                    if (!(((buf)))->c) {\n                        (((buf)))->len = 0;\n                        __nl = (1);\n                        (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    } else {\n                        __nl = (((buf)))->len + (1);\n                        if (__nl >= (((buf)))->a) {\n                            (((buf)))->a = __nl + 128;\n                            (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                ((buf))->len = __nl;\n                ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n            } while (0);\n            json_pretty_print_char(buf, options, '\\n');\n        } else {\n            need_comma = 1;\n        }\n        json_pretty_print_indent(buf, options);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n        } while (0);\n        do {\n            char __b[32];\n            char *__t;\n            do {\n                if (((((long)index))) < 0) {\n                    do {\n                        char *__p = ((__b + sizeof (__b) - 1));\n                        unsigned long __num = (-(((((long)index)))));\n                        *__p = '\\x00';\n                        do {\n                            *--__p = (char)(__num % 10) + '0';\n                            __num /= 10;\n                        } while (__num > 0);\n                        (__t) = __p;\n                    } while (0);\n                    *--(__t) = '-';\n                } else {\n                    do {\n                        char *__p = ((__b + sizeof (__b) - 1));\n                        unsigned long __num = ((((((long)index)))));\n                        *__p = '\\x00';\n                        do {\n                            *--__p = (char)(__num % 10) + '0';\n                            __num /= 10;\n                        } while (__num > 0);\n                        (__t) = __p;\n                    } while (0);\n                }\n            } while (0);\n            do {\n                register size_t __nl;\n                smart_str *__dest = (smart_str *)((((buf))));\n                do {\n                    if (!(__dest)->c) {\n                        (__dest)->len = 0;\n                        __nl = ((__b + sizeof (__b) - 1 - __t));\n                        (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                        (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                    } else {\n                        __nl = (__dest)->len + ((__b + sizeof (__b) - 1 - __t));\n                        if (__nl >= (__dest)->a) {\n                            (__dest)->a = __nl + 128;\n                            (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                memcpy(__dest->c + __dest->len, (__t), (__b + sizeof (__b) - 1 - __t));\n                __dest->len = __nl;\n            } while (0);\n        } while (0);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n        } while (0);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n        } while (0);\n        json_pretty_print_char(buf, options, ' ');\n        php_json_encode(buf, *data, options);\n    }\n}\n", "if ((r == 0) || __is_neg(\"\", \"L271\", 13, &(r), sizeof (r), &(need_comma), sizeof (need_comma), &(buf), sizeof (buf), &(options), sizeof (options), &(tmp_ht), sizeof (tmp_ht), &(data), sizeof (data), &(myht), sizeof (myht), &(pos), sizeof (pos), &(i), sizeof (i), &(key), sizeof (key), &(index), sizeof (index), &(key_len), sizeof (key_len), &(val), sizeof (val))) {\n    if (need_comma) {\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n        } while (0);\n        json_pretty_print_char(buf, options, '\\n');\n    } else {\n        need_comma = 1;\n    }\n    json_pretty_print_indent(buf, options);\n    php_json_encode(buf, *data, options);\n} else if (r == 1) {\n    if (i == 1) {\n        if (key[0] == '\\x00' && (**val).type == 5) {\n            if (tmp_ht) {\n                tmp_ht->nApplyCount--;\n            }\n            continue;\n        }\n        if (need_comma) {\n            do {\n                register size_t __nl;\n                do {\n                    if (!(((buf)))->c) {\n                        (((buf)))->len = 0;\n                        __nl = (1);\n                        (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    } else {\n                        __nl = (((buf)))->len + (1);\n                        if (__nl >= (((buf)))->a) {\n                            (((buf)))->a = __nl + 128;\n                            (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                ((buf))->len = __nl;\n                ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n            } while (0);\n            json_pretty_print_char(buf, options, '\\n');\n        } else {\n            need_comma = 1;\n        }\n        json_pretty_print_indent(buf, options);\n        json_escape_string(buf, key, key_len - 1, options);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n        } while (0);\n        json_pretty_print_char(buf, options, ' ');\n        php_json_encode(buf, *data, options);\n    } else {\n        if (need_comma) {\n            do {\n                register size_t __nl;\n                do {\n                    if (!(((buf)))->c) {\n                        (((buf)))->len = 0;\n                        __nl = (1);\n                        (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    } else {\n                        __nl = (((buf)))->len + (1);\n                        if (__nl >= (((buf)))->a) {\n                            (((buf)))->a = __nl + 128;\n                            (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                ((buf))->len = __nl;\n                ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((','));\n            } while (0);\n            json_pretty_print_char(buf, options, '\\n');\n        } else {\n            need_comma = 1;\n        }\n        json_pretty_print_indent(buf, options);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n        } while (0);\n        do {\n            char __b[32];\n            char *__t;\n            do {\n                if (((((long)index))) < 0) {\n                    do {\n                        char *__p = ((__b + sizeof (__b) - 1));\n                        unsigned long __num = (-(((((long)index)))));\n                        *__p = '\\x00';\n                        do {\n                            *--__p = (char)(__num % 10) + '0';\n                            __num /= 10;\n                        } while (__num > 0);\n                        (__t) = __p;\n                    } while (0);\n                    *--(__t) = '-';\n                } else {\n                    do {\n                        char *__p = ((__b + sizeof (__b) - 1));\n                        unsigned long __num = ((((((long)index)))));\n                        *__p = '\\x00';\n                        do {\n                            *--__p = (char)(__num % 10) + '0';\n                            __num /= 10;\n                        } while (__num > 0);\n                        (__t) = __p;\n                    } while (0);\n                }\n            } while (0);\n            do {\n                register size_t __nl;\n                smart_str *__dest = (smart_str *)((((buf))));\n                do {\n                    if (!(__dest)->c) {\n                        (__dest)->len = 0;\n                        __nl = ((__b + sizeof (__b) - 1 - __t));\n                        (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                        (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                    } else {\n                        __nl = (__dest)->len + ((__b + sizeof (__b) - 1 - __t));\n                        if (__nl >= (__dest)->a) {\n                            (__dest)->a = __nl + 128;\n                            (__dest)->c = (((((((0)))))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                        }\n                    }\n                } while (0);\n                memcpy(__dest->c + __dest->len, (__t), (__b + sizeof (__b) - 1 - __t));\n                __dest->len = __nl;\n            } while (0);\n        } while (0);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('\"'));\n        } while (0);\n        do {\n            register size_t __nl;\n            do {\n                if (!(((buf)))->c) {\n                    (((buf)))->len = 0;\n                    __nl = (1);\n                    (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                } else {\n                    __nl = (((buf)))->len + (1);\n                    if (__nl >= (((buf)))->a) {\n                        (((buf)))->a = __nl + 128;\n                        (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            ((buf))->len = __nl;\n            ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((':'));\n        } while (0);\n        json_pretty_print_char(buf, options, ' ');\n        php_json_encode(buf, *data, options);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5948141393281468, -9.4955326603281449, -8.6700647493281462, -8.2997196393281438, -9.4819906077281448, -7.1637896498281473, -9.790489939328145, -9.790489939328145, -6.908611839328147, -7.5900405393281458, -9.0326018393281444, -7.4901158093281452, -8.5978266393281455]
								}, {
									"case":	2,
									"scores":	[-3.9455847754281459, -6.8463032964281449, -6.0208353854281462, -5.6504902754281456, -6.8327612438281458, -4.5145602859281464, -7.141260575428146, -7.141260575428146, -4.2593824754281453, -4.9408111754281459, -6.3833724754281462, -4.8408864454281462, -5.9485972754281455]
								}]
						}]
				}, {
					"line":	340,
					"switches":	[{
							"switch":	42,
							"types":	[[], [], [], [], [111], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [], [], [], [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110], [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88], [], [], [], [], [], []],
							"begin_line":	341,
							"begin_column":	1,
							"end_line":	341,
							"end_column":	1,
							"patch_codes":	["memset(&(**val).is_ref__gc, 0, sizeof (*(&(**val).is_ref__gc)))", "memset(&(**val).refcount__gc, 0, sizeof (*(&(**val).refcount__gc)))", "memset(&(**val).type, 0, sizeof (*(&(**val).type)))", "memset(&(**val).value, 0, sizeof (*(&(**val).value)))", "memset(&json_globals.encoder_depth, 0, sizeof (*(&json_globals.encoder_depth)))", "memset(&json_globals.error_code, 0, sizeof (*(&json_globals.error_code)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (i)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (r)", "(myht)->nApplyCount++", "(myht)->nApplyCount--", "i = (0)", "i = (1)", "i = (10)", "i = (128)", "i = (16)", "i = (2)", "i = (3)", "i = (32)", "i = (4)", "i = (5)", "i = (78)", "i = (i)", "i = (myht) ? zend_hash_num_elements(myht) : 0", "i = (options)", "i = (r)", "i = myht ? zend_hash_num_elements((myht)) : 0", "json_pretty_print_char((buf), options, ' ')", "json_pretty_print_char((buf), options, '\\n')", "json_pretty_print_indent((buf), options)", "myht = ((**(val))).value.obj.handlers->get_properties(&(**val))", "myht = ((**(val)).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val)).value.obj.handlers->get_properties(&(**(val)))", "myht = ((**val).type == 4 ? (**(val)).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**(val)).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**(val)).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*(val))) : ((void *)0))))", "myht = (myht)", "php_json_encode(buf, *(val), options)", "r = (0)", "r = (1)", "r = (10)", "r = (128)", "r = (16)", "r = (2)", "r = (3)", "r = (32)", "r = (4)", "r = (5)", "r = (78)", "r = (i)", "r = (options & (1 << 4)) ? 1 : json_determine_array_type((val))", "r = (options)", "r = (r)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "exit(1)", "i = myht ? zend_hash_num_elements(myht) : 0", "json_pretty_print_char(buf, options, ' ')", "json_pretty_print_char(buf, options, '\\n')", "json_pretty_print_indent(buf, options)", "myht = ((**val)).value.obj.handlers->get_properties(&(**val))", "myht = ((**val).type == 4 ? (**val).value.ht : (((**val).type == 5 ? (**val).value.obj.handlers->get_properties((*val)) : ((void *)0))))", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "r = (options & (1 << 4)) ? 1 : json_determine_array_type(val)", "r = 1", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L341\", 6, &(buf), sizeof (buf), &(r), sizeof (r), &(options), sizeof (options), &(val), sizeof (val), &(i), sizeof (i), &(myht), sizeof (myht)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.21519966405979]
								}, {
									"case":	2,
									"scores":	[-8.21519966405979]
								}, {
									"case":	3,
									"scores":	[-8.21519966405979]
								}, {
									"case":	4,
									"scores":	[-8.21519966405979]
								}, {
									"case":	5,
									"scores":	[-8.21519966405979]
								}, {
									"case":	6,
									"scores":	[-8.21519966405979]
								}, {
									"case":	7,
									"scores":	[-8.21519966405979]
								}, {
									"case":	8,
									"scores":	[-8.21519966405979]
								}, {
									"case":	9,
									"scores":	[-8.21519966405979]
								}, {
									"case":	10,
									"scores":	[-8.21519966405979]
								}, {
									"case":	11,
									"scores":	[-8.21519966405979]
								}, {
									"case":	12,
									"scores":	[-8.21519966405979]
								}, {
									"case":	13,
									"scores":	[-8.21519966405979]
								}, {
									"case":	14,
									"scores":	[-8.21519966405979]
								}, {
									"case":	15,
									"scores":	[-8.21519966405979]
								}, {
									"case":	16,
									"scores":	[-8.21519966405979]
								}, {
									"case":	17,
									"scores":	[-8.21519966405979]
								}, {
									"case":	18,
									"scores":	[-8.21519966405979]
								}, {
									"case":	19,
									"scores":	[-8.21519966405979]
								}, {
									"case":	20,
									"scores":	[-8.21519966405979]
								}, {
									"case":	21,
									"scores":	[-8.21519966405979]
								}, {
									"case":	22,
									"scores":	[-8.21519966405979]
								}, {
									"case":	23,
									"scores":	[-8.21519966405979]
								}, {
									"case":	24,
									"scores":	[-8.21519966405979]
								}, {
									"case":	25,
									"scores":	[-8.21519966405979]
								}, {
									"case":	26,
									"scores":	[-8.21519966405979]
								}, {
									"case":	27,
									"scores":	[-8.21519966405979]
								}, {
									"case":	28,
									"scores":	[-8.21519966405979]
								}, {
									"case":	29,
									"scores":	[-8.21519966405979]
								}, {
									"case":	30,
									"scores":	[-8.21519966405979]
								}, {
									"case":	31,
									"scores":	[-8.21519966405979]
								}, {
									"case":	32,
									"scores":	[-8.21519966405979]
								}, {
									"case":	33,
									"scores":	[-8.21519966405979]
								}, {
									"case":	34,
									"scores":	[-8.21519966405979]
								}, {
									"case":	35,
									"scores":	[-8.21519966405979]
								}, {
									"case":	36,
									"scores":	[-8.21519966405979]
								}, {
									"case":	37,
									"scores":	[-8.21519966405979]
								}, {
									"case":	38,
									"scores":	[-8.21519966405979]
								}, {
									"case":	39,
									"scores":	[-8.21519966405979]
								}, {
									"case":	40,
									"scores":	[-8.21519966405979]
								}, {
									"case":	41,
									"scores":	[-8.21519966405979]
								}, {
									"case":	42,
									"scores":	[-8.21519966405979]
								}, {
									"case":	43,
									"scores":	[-8.21519966405979]
								}, {
									"case":	44,
									"scores":	[-8.21519966405979]
								}, {
									"case":	45,
									"scores":	[-8.21519966405979]
								}, {
									"case":	46,
									"scores":	[-8.21519966405979]
								}, {
									"case":	47,
									"scores":	[-8.21519966405979]
								}, {
									"case":	48,
									"scores":	[-8.21519966405979]
								}, {
									"case":	49,
									"scores":	[-8.21519966405979]
								}, {
									"case":	50,
									"scores":	[-8.21519966405979]
								}, {
									"case":	51,
									"scores":	[-8.21519966405979]
								}, {
									"case":	52,
									"scores":	[-8.21519966405979]
								}, {
									"case":	53,
									"scores":	[-8.21519966405979]
								}, {
									"case":	54,
									"scores":	[-8.21519966405979]
								}, {
									"case":	55,
									"scores":	[-8.21519966405979]
								}, {
									"case":	56,
									"scores":	[-8.21519966405979]
								}, {
									"case":	57,
									"scores":	[-8.21519966405979]
								}, {
									"case":	58,
									"scores":	[-8.21519966405979]
								}, {
									"case":	59,
									"scores":	[-8.21519966405979]
								}, {
									"case":	60,
									"scores":	[-8.21519966405979]
								}, {
									"case":	61,
									"scores":	[-8.21519966405979]
								}, {
									"case":	62,
									"scores":	[-8.21519966405979]
								}, {
									"case":	63,
									"scores":	[-8.21519966405979]
								}, {
									"case":	64,
									"scores":	[-8.21519966405979]
								}, {
									"case":	65,
									"scores":	[-8.21519966405979]
								}, {
									"case":	66,
									"scores":	[-8.21519966405979]
								}, {
									"case":	67,
									"scores":	[-8.21519966405979]
								}, {
									"case":	68,
									"scores":	[-8.21519966405979]
								}, {
									"case":	69,
									"scores":	[-8.21519966405979]
								}, {
									"case":	70,
									"scores":	[-8.21519966405979]
								}, {
									"case":	71,
									"scores":	[-8.21519966405979]
								}, {
									"case":	72,
									"scores":	[-8.21519966405979]
								}, {
									"case":	73,
									"scores":	[-8.21519966405979]
								}, {
									"case":	74,
									"scores":	[-8.21519966405979]
								}, {
									"case":	75,
									"scores":	[-8.21519966405979]
								}, {
									"case":	76,
									"scores":	[-8.21519966405979]
								}, {
									"case":	77,
									"scores":	[-8.21519966405979]
								}, {
									"case":	78,
									"scores":	[-8.21519966405979]
								}, {
									"case":	79,
									"scores":	[-8.21519966405979]
								}, {
									"case":	80,
									"scores":	[-8.21519966405979]
								}, {
									"case":	81,
									"scores":	[-8.21519966405979]
								}, {
									"case":	82,
									"scores":	[-8.21519966405979]
								}, {
									"case":	83,
									"scores":	[-8.21519966405979]
								}, {
									"case":	84,
									"scores":	[-8.21519966405979]
								}, {
									"case":	85,
									"scores":	[-8.21519966405979]
								}, {
									"case":	86,
									"scores":	[-8.21519966405979]
								}, {
									"case":	87,
									"scores":	[-8.21519966405979]
								}, {
									"case":	88,
									"scores":	[-8.21519966405979]
								}, {
									"case":	89,
									"scores":	[-8.21519966405979]
								}, {
									"case":	90,
									"scores":	[-8.21519966405979]
								}, {
									"case":	91,
									"scores":	[-8.21519966405979]
								}, {
									"case":	92,
									"scores":	[-8.21519966405979]
								}, {
									"case":	93,
									"scores":	[-8.21519966405979]
								}, {
									"case":	94,
									"scores":	[-8.21519966405979]
								}, {
									"case":	95,
									"scores":	[-8.21519966405979]
								}, {
									"case":	96,
									"scores":	[-8.21519966405979]
								}, {
									"case":	97,
									"scores":	[-8.21519966405979]
								}, {
									"case":	98,
									"scores":	[-8.21519966405979]
								}, {
									"case":	99,
									"scores":	[-8.21519966405979]
								}, {
									"case":	100,
									"scores":	[-8.21519966405979]
								}, {
									"case":	101,
									"scores":	[-8.21519966405979]
								}, {
									"case":	102,
									"scores":	[-8.21519966405979]
								}, {
									"case":	103,
									"scores":	[-8.21519966405979]
								}, {
									"case":	104,
									"scores":	[-8.21519966405979]
								}, {
									"case":	105,
									"scores":	[-8.21519966405979]
								}, {
									"case":	106,
									"scores":	[-8.21519966405979]
								}, {
									"case":	107,
									"scores":	[-8.21519966405979]
								}, {
									"case":	108,
									"scores":	[-8.21519966405979]
								}, {
									"case":	109,
									"scores":	[-8.21519966405979]
								}, {
									"case":	110,
									"scores":	[-8.21519966405979]
								}, {
									"case":	111,
									"scores":	[-10.870808042759792, -11.168145560059791, -11.205245960059791, -11.673720251059793, -11.425730734059792, -11.671769647859792]
								}]
						}, {
							"switch":	43,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	341,
							"begin_column":	3,
							"end_line":	341,
							"end_column":	29,
							"patch_codes":	["if (!__is_neg(\"\", \"L341\", 6, &(buf), sizeof (buf), &(r), sizeof (r), &(options), sizeof (options), &(val), sizeof (val), &(i), sizeof (i), &(myht), sizeof (myht)))\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('}'));\n    } while (0);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.039959944059792, -9.99136703405979, -10.285717834059792, -11.068775534059792, -10.305164734059792, -11.063052834059793]
								}]
						}]
				}, {
					"line":	337,
					"switches":	[{
							"switch":	41,
							"types":	[[], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	338,
							"begin_column":	2,
							"end_line":	342,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L338\", 6, &(r), sizeof (r), &(buf), sizeof (buf), &(options), sizeof (options), &(val), sizeof (val), &(i), sizeof (i), &(myht), sizeof (myht))) {\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((']'));\n    } while (0);\n} else {\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('}'));\n    } while (0);\n}\n", "if ((r == 0) || __is_neg(\"\", \"L338\", 6, &(r), sizeof (r), &(buf), sizeof (buf), &(options), sizeof (options), &(val), sizeof (val), &(i), sizeof (i), &(myht), sizeof (myht))) {\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = ((']'));\n    } while (0);\n} else {\n    do {\n        register size_t __nl;\n        do {\n            if (!(((buf)))->c) {\n                (((buf)))->len = 0;\n                __nl = (1);\n                (((buf)))->a = __nl < 78 ? 78 : __nl + 128;\n                (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n            } else {\n                __nl = (((buf)))->len + (1);\n                if (__nl >= (((buf)))->a) {\n                    (((buf)))->a = __nl + 128;\n                    (((buf)))->c = (((((0)))) ? __zend_realloc((((((buf)))->c)), (((((buf)))->a + 1))) : _erealloc(((((((buf)))->c))), ((((((buf)))->a + 1))), 0));\n                }\n            }\n        } while (0);\n        ((buf))->len = __nl;\n        ((unsigned char *)((buf))->c)[((buf))->len - 1] = (('}'));\n    } while (0);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-0.16186296442814374, -2.4234287204281415, -2.669186610428147, -3.3632614644281476, -2.5996506644281476, -3.3575387644281474]
								}, {
									"case":	2,
									"scores":	[-2.8147997984281456, -5.0763655544281461, -5.3221234444281453, -6.0161982984281455, -5.252587498428146, -6.0104755984281457]
								}]
						}]
				}, {
					"line":	387,
					"switches":	[{
							"switch":	48,
							"types":	[[], [], [], [], [91], [], [], [], [], [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], [], [], [], [], [], []],
							"begin_line":	388,
							"begin_column":	2,
							"end_line":	388,
							"end_column":	2,
							"patch_codes":	["(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (12)", "(json_globals.error_code) = (127)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (15)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (6)", "(json_globals.error_code) = (64)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (8)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (len)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (pos)", "(s)++", "_efree(((s)))", "_efree(((utf16)))", "len = (0)", "len = (1)", "len = (10)", "len = (12)", "len = (127)", "len = (128)", "len = (15)", "len = (16)", "len = (2)", "len = (3)", "len = (32)", "len = (4)", "len = (5)", "len = (6)", "len = (64)", "len = (78)", "len = (8)", "len = (len)", "len = (options)", "len = (pos)", "len = utf8_to_utf16((utf16), s, len)", "len = utf8_to_utf16(utf16, (s), len)", "us = (0)", "us = (1)", "us = (10)", "us = (12)", "us = (127)", "us = (128)", "us = (15)", "us = (16)", "us = (2)", "us = (3)", "us = (32)", "us = (4)", "us = (5)", "us = (6)", "us = (64)", "us = (78)", "us = (8)", "us = (us)", "us = (utf16)[pos++]", "utf16 = (utf16)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "_efree((utf16))", "exit(1)", "len = utf8_to_utf16(utf16, s, len)", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "us = (((us & 15) << 12) | (((us >> 4) & 15) << 8) | (((us >> 8) & 15) << 4) | ((us >> 12) & 15))", "us = utf16[pos++]", "utf16 = (unsigned short *)_safe_emalloc((len), (sizeof(unsigned short)), (0))", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L388\", 7, &(utf16), sizeof (utf16), &(len), sizeof (len), &(s), sizeof (s), &(buf), sizeof (buf), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.92215837130412]
								}, {
									"case":	2,
									"scores":	[-4.92215837130412]
								}, {
									"case":	3,
									"scores":	[-4.92215837130412]
								}, {
									"case":	4,
									"scores":	[-4.92215837130412]
								}, {
									"case":	5,
									"scores":	[-4.92215837130412]
								}, {
									"case":	6,
									"scores":	[-4.92215837130412]
								}, {
									"case":	7,
									"scores":	[-4.92215837130412]
								}, {
									"case":	8,
									"scores":	[-4.92215837130412]
								}, {
									"case":	9,
									"scores":	[-4.92215837130412]
								}, {
									"case":	10,
									"scores":	[-4.92215837130412]
								}, {
									"case":	11,
									"scores":	[-4.92215837130412]
								}, {
									"case":	12,
									"scores":	[-4.92215837130412]
								}, {
									"case":	13,
									"scores":	[-4.92215837130412]
								}, {
									"case":	14,
									"scores":	[-4.92215837130412]
								}, {
									"case":	15,
									"scores":	[-4.92215837130412]
								}, {
									"case":	16,
									"scores":	[-4.92215837130412]
								}, {
									"case":	17,
									"scores":	[-4.92215837130412]
								}, {
									"case":	18,
									"scores":	[-4.92215837130412]
								}, {
									"case":	19,
									"scores":	[-4.92215837130412]
								}, {
									"case":	20,
									"scores":	[-4.92215837130412]
								}, {
									"case":	21,
									"scores":	[-4.92215837130412]
								}, {
									"case":	22,
									"scores":	[-4.92215837130412]
								}, {
									"case":	23,
									"scores":	[-4.92215837130412]
								}, {
									"case":	24,
									"scores":	[-4.92215837130412]
								}, {
									"case":	25,
									"scores":	[-4.92215837130412]
								}, {
									"case":	26,
									"scores":	[-4.92215837130412]
								}, {
									"case":	27,
									"scores":	[-4.92215837130412]
								}, {
									"case":	28,
									"scores":	[-4.92215837130412]
								}, {
									"case":	29,
									"scores":	[-4.92215837130412]
								}, {
									"case":	30,
									"scores":	[-4.92215837130412]
								}, {
									"case":	31,
									"scores":	[-4.92215837130412]
								}, {
									"case":	32,
									"scores":	[-4.92215837130412]
								}, {
									"case":	33,
									"scores":	[-4.92215837130412]
								}, {
									"case":	34,
									"scores":	[-4.92215837130412]
								}, {
									"case":	35,
									"scores":	[-4.92215837130412]
								}, {
									"case":	36,
									"scores":	[-4.92215837130412]
								}, {
									"case":	37,
									"scores":	[-4.92215837130412]
								}, {
									"case":	38,
									"scores":	[-4.92215837130412]
								}, {
									"case":	39,
									"scores":	[-4.92215837130412]
								}, {
									"case":	40,
									"scores":	[-4.92215837130412]
								}, {
									"case":	41,
									"scores":	[-4.92215837130412]
								}, {
									"case":	42,
									"scores":	[-4.92215837130412]
								}, {
									"case":	43,
									"scores":	[-4.92215837130412]
								}, {
									"case":	44,
									"scores":	[-4.92215837130412]
								}, {
									"case":	45,
									"scores":	[-4.92215837130412]
								}, {
									"case":	46,
									"scores":	[-4.92215837130412]
								}, {
									"case":	47,
									"scores":	[-4.92215837130412]
								}, {
									"case":	48,
									"scores":	[-4.92215837130412]
								}, {
									"case":	49,
									"scores":	[-4.92215837130412]
								}, {
									"case":	50,
									"scores":	[-4.92215837130412]
								}, {
									"case":	51,
									"scores":	[-4.92215837130412]
								}, {
									"case":	52,
									"scores":	[-4.92215837130412]
								}, {
									"case":	53,
									"scores":	[-4.92215837130412]
								}, {
									"case":	54,
									"scores":	[-4.92215837130412]
								}, {
									"case":	55,
									"scores":	[-4.92215837130412]
								}, {
									"case":	56,
									"scores":	[-4.92215837130412]
								}, {
									"case":	57,
									"scores":	[-4.92215837130412]
								}, {
									"case":	58,
									"scores":	[-4.92215837130412]
								}, {
									"case":	59,
									"scores":	[-4.92215837130412]
								}, {
									"case":	60,
									"scores":	[-4.92215837130412]
								}, {
									"case":	61,
									"scores":	[-4.92215837130412]
								}, {
									"case":	62,
									"scores":	[-4.92215837130412]
								}, {
									"case":	63,
									"scores":	[-4.92215837130412]
								}, {
									"case":	64,
									"scores":	[-4.92215837130412]
								}, {
									"case":	65,
									"scores":	[-4.92215837130412]
								}, {
									"case":	66,
									"scores":	[-4.92215837130412]
								}, {
									"case":	67,
									"scores":	[-4.92215837130412]
								}, {
									"case":	68,
									"scores":	[-4.92215837130412]
								}, {
									"case":	69,
									"scores":	[-4.92215837130412]
								}, {
									"case":	70,
									"scores":	[-4.92215837130412]
								}, {
									"case":	71,
									"scores":	[-4.92215837130412]
								}, {
									"case":	72,
									"scores":	[-4.92215837130412]
								}, {
									"case":	73,
									"scores":	[-4.92215837130412]
								}, {
									"case":	74,
									"scores":	[-4.92215837130412]
								}, {
									"case":	75,
									"scores":	[-4.92215837130412]
								}, {
									"case":	76,
									"scores":	[-4.92215837130412]
								}, {
									"case":	77,
									"scores":	[-4.92215837130412]
								}, {
									"case":	78,
									"scores":	[-4.92215837130412]
								}, {
									"case":	79,
									"scores":	[-4.92215837130412]
								}, {
									"case":	80,
									"scores":	[-4.92215837130412]
								}, {
									"case":	81,
									"scores":	[-4.92215837130412]
								}, {
									"case":	82,
									"scores":	[-4.92215837130412]
								}, {
									"case":	83,
									"scores":	[-4.92215837130412]
								}, {
									"case":	84,
									"scores":	[-4.92215837130412]
								}, {
									"case":	85,
									"scores":	[-4.92215837130412]
								}, {
									"case":	86,
									"scores":	[-4.92215837130412]
								}, {
									"case":	87,
									"scores":	[-4.92215837130412]
								}, {
									"case":	88,
									"scores":	[-4.92215837130412]
								}, {
									"case":	89,
									"scores":	[-4.92215837130412]
								}, {
									"case":	90,
									"scores":	[-4.92215837130412]
								}, {
									"case":	91,
									"scores":	[-5.54550987670412, -5.72609412870412, -6.43791824570412, -6.73065321650412, -6.69355281650412, -6.18992872870412, -6.48461430270412]
								}]
						}, {
							"switch":	49,
							"types":	[[], [], [1], [], [], [], [140, 141, 142, 143, 144, 145, 146, 147], [], [130, 131, 132, 133, 134, 135, 136, 137, 138, 139], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128], [], [], [129]],
							"begin_line":	388,
							"begin_column":	4,
							"end_line":	388,
							"end_column":	15,
							"patch_codes":	["if (!__is_neg(\"\", \"L388\", 7, &(utf16), sizeof (utf16), &(len), sizeof (len), &(s), sizeof (s), &(buf), sizeof (buf), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options)))\n    _efree((utf16));\n", "__zend_realloc((utf16), 0)", "__zend_realloc((utf16), 1)", "__zend_realloc((utf16), 10)", "__zend_realloc((utf16), 12)", "__zend_realloc((utf16), 127)", "__zend_realloc((utf16), 128)", "__zend_realloc((utf16), 15)", "__zend_realloc((utf16), 16)", "__zend_realloc((utf16), 2)", "__zend_realloc((utf16), 3)", "__zend_realloc((utf16), 32)", "__zend_realloc((utf16), 4)", "__zend_realloc((utf16), 5)", "__zend_realloc((utf16), 6)", "__zend_realloc((utf16), 64)", "__zend_realloc((utf16), 78)", "__zend_realloc((utf16), 8)", "bzero((utf16), 0)", "bzero((utf16), 1)", "bzero((utf16), 10)", "bzero((utf16), 12)", "bzero((utf16), 127)", "bzero((utf16), 128)", "bzero((utf16), 15)", "bzero((utf16), 16)", "bzero((utf16), 2)", "bzero((utf16), 3)", "bzero((utf16), 32)", "bzero((utf16), 4)", "bzero((utf16), 5)", "bzero((utf16), 6)", "bzero((utf16), 64)", "bzero((utf16), 78)", "bzero((utf16), 8)", "dlsym((utf16), 0)", "explicit_bzero((utf16), 0)", "explicit_bzero((utf16), 1)", "explicit_bzero((utf16), 10)", "explicit_bzero((utf16), 12)", "explicit_bzero((utf16), 127)", "explicit_bzero((utf16), 128)", "explicit_bzero((utf16), 15)", "explicit_bzero((utf16), 16)", "explicit_bzero((utf16), 2)", "explicit_bzero((utf16), 3)", "explicit_bzero((utf16), 32)", "explicit_bzero((utf16), 4)", "explicit_bzero((utf16), 5)", "explicit_bzero((utf16), 6)", "explicit_bzero((utf16), 64)", "explicit_bzero((utf16), 78)", "explicit_bzero((utf16), 8)", "getentropy((utf16), 0)", "getentropy((utf16), 1)", "getentropy((utf16), 10)", "getentropy((utf16), 12)", "getentropy((utf16), 127)", "getentropy((utf16), 128)", "getentropy((utf16), 15)", "getentropy((utf16), 16)", "getentropy((utf16), 2)", "getentropy((utf16), 3)", "getentropy((utf16), 32)", "getentropy((utf16), 4)", "getentropy((utf16), 5)", "getentropy((utf16), 6)", "getentropy((utf16), 64)", "getentropy((utf16), 78)", "getentropy((utf16), 8)", "php_write((utf16), 0)", "php_write((utf16), 1)", "php_write((utf16), 10)", "php_write((utf16), 12)", "php_write((utf16), 127)", "php_write((utf16), 128)", "php_write((utf16), 15)", "php_write((utf16), 16)", "php_write((utf16), 2)", "php_write((utf16), 3)", "php_write((utf16), 32)", "php_write((utf16), 4)", "php_write((utf16), 5)", "php_write((utf16), 6)", "php_write((utf16), 64)", "php_write((utf16), 78)", "php_write((utf16), 8)", "realloc((utf16), 0)", "realloc((utf16), 1)", "realloc((utf16), 10)", "realloc((utf16), 12)", "realloc((utf16), 127)", "realloc((utf16), 128)", "realloc((utf16), 15)", "realloc((utf16), 16)", "realloc((utf16), 2)", "realloc((utf16), 3)", "realloc((utf16), 32)", "realloc((utf16), 4)", "realloc((utf16), 5)", "realloc((utf16), 6)", "realloc((utf16), 64)", "realloc((utf16), 78)", "realloc((utf16), 8)", "timer_gettime((utf16), 0)", "zend_add_to_list((utf16), 0)", "zend_init_list((utf16), 0)", "zend_list_insert((utf16), 0)", "zend_list_insert((utf16), 1)", "zend_list_insert((utf16), 10)", "zend_list_insert((utf16), 12)", "zend_list_insert((utf16), 127)", "zend_list_insert((utf16), 128)", "zend_list_insert((utf16), 15)", "zend_list_insert((utf16), 16)", "zend_list_insert((utf16), 2)", "zend_list_insert((utf16), 3)", "zend_list_insert((utf16), 32)", "zend_list_insert((utf16), 4)", "zend_list_insert((utf16), 5)", "zend_list_insert((utf16), 6)", "zend_list_insert((utf16), 64)", "zend_list_insert((utf16), 78)", "zend_list_insert((utf16), 8)", "zend_list_insert((utf16), le_index_ptr)", "zend_list_insert((utf16), len)", "zend_list_insert((utf16), options)", "zend_list_insert((utf16), pos)", "{\n}\n", "_zend_mem_block_size((utf16))", "brk((utf16))", "dlclose((utf16))", "free((utf16))", "list_entry_destructor((utf16))", "plist_entry_destructor((utf16))", "zend_vm_stack_free((utf16))", "zend_vm_stack_free_int((utf16))", "zend_vm_stack_push((utf16))", "zend_vm_stack_push_nocheck((utf16))", "_efree(((&buf)))", "_efree(((&len)))", "_efree(((&options)))", "_efree(((&pos)))", "_efree(((&s)))", "_efree(((&us)))", "_efree(((&utf16)))", "_efree(((utf16)))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.17179704130412, -5.38831211130412, -6.17958314130412, -6.78200894130412, -6.48765814130412, -5.41597234130412, -6.02412084130412]
								}, {
									"case":	2,
									"scores":	[-4.92215837130412]
								}, {
									"case":	3,
									"scores":	[-4.92215837130412]
								}, {
									"case":	4,
									"scores":	[-4.92215837130412]
								}, {
									"case":	5,
									"scores":	[-4.92215837130412]
								}, {
									"case":	6,
									"scores":	[-4.92215837130412]
								}, {
									"case":	7,
									"scores":	[-4.92215837130412]
								}, {
									"case":	8,
									"scores":	[-4.92215837130412]
								}, {
									"case":	9,
									"scores":	[-4.92215837130412]
								}, {
									"case":	10,
									"scores":	[-4.92215837130412]
								}, {
									"case":	11,
									"scores":	[-4.92215837130412]
								}, {
									"case":	12,
									"scores":	[-4.92215837130412]
								}, {
									"case":	13,
									"scores":	[-4.92215837130412]
								}, {
									"case":	14,
									"scores":	[-4.92215837130412]
								}, {
									"case":	15,
									"scores":	[-4.92215837130412]
								}, {
									"case":	16,
									"scores":	[-4.92215837130412]
								}, {
									"case":	17,
									"scores":	[-4.92215837130412]
								}, {
									"case":	18,
									"scores":	[-4.92215837130412]
								}, {
									"case":	19,
									"scores":	[-4.92215837130412]
								}, {
									"case":	20,
									"scores":	[-4.92215837130412]
								}, {
									"case":	21,
									"scores":	[-4.92215837130412]
								}, {
									"case":	22,
									"scores":	[-4.92215837130412]
								}, {
									"case":	23,
									"scores":	[-4.92215837130412]
								}, {
									"case":	24,
									"scores":	[-4.92215837130412]
								}, {
									"case":	25,
									"scores":	[-4.92215837130412]
								}, {
									"case":	26,
									"scores":	[-4.92215837130412]
								}, {
									"case":	27,
									"scores":	[-4.92215837130412]
								}, {
									"case":	28,
									"scores":	[-4.92215837130412]
								}, {
									"case":	29,
									"scores":	[-4.92215837130412]
								}, {
									"case":	30,
									"scores":	[-4.92215837130412]
								}, {
									"case":	31,
									"scores":	[-4.92215837130412]
								}, {
									"case":	32,
									"scores":	[-4.92215837130412]
								}, {
									"case":	33,
									"scores":	[-4.92215837130412]
								}, {
									"case":	34,
									"scores":	[-4.92215837130412]
								}, {
									"case":	35,
									"scores":	[-4.92215837130412]
								}, {
									"case":	36,
									"scores":	[-4.92215837130412]
								}, {
									"case":	37,
									"scores":	[-4.92215837130412]
								}, {
									"case":	38,
									"scores":	[-4.92215837130412]
								}, {
									"case":	39,
									"scores":	[-4.92215837130412]
								}, {
									"case":	40,
									"scores":	[-4.92215837130412]
								}, {
									"case":	41,
									"scores":	[-4.92215837130412]
								}, {
									"case":	42,
									"scores":	[-4.92215837130412]
								}, {
									"case":	43,
									"scores":	[-4.92215837130412]
								}, {
									"case":	44,
									"scores":	[-4.92215837130412]
								}, {
									"case":	45,
									"scores":	[-4.92215837130412]
								}, {
									"case":	46,
									"scores":	[-4.92215837130412]
								}, {
									"case":	47,
									"scores":	[-4.92215837130412]
								}, {
									"case":	48,
									"scores":	[-4.92215837130412]
								}, {
									"case":	49,
									"scores":	[-4.92215837130412]
								}, {
									"case":	50,
									"scores":	[-4.92215837130412]
								}, {
									"case":	51,
									"scores":	[-4.92215837130412]
								}, {
									"case":	52,
									"scores":	[-4.92215837130412]
								}, {
									"case":	53,
									"scores":	[-4.92215837130412]
								}, {
									"case":	54,
									"scores":	[-4.92215837130412]
								}, {
									"case":	55,
									"scores":	[-4.92215837130412]
								}, {
									"case":	56,
									"scores":	[-4.92215837130412]
								}, {
									"case":	57,
									"scores":	[-4.92215837130412]
								}, {
									"case":	58,
									"scores":	[-4.92215837130412]
								}, {
									"case":	59,
									"scores":	[-4.92215837130412]
								}, {
									"case":	60,
									"scores":	[-4.92215837130412]
								}, {
									"case":	61,
									"scores":	[-4.92215837130412]
								}, {
									"case":	62,
									"scores":	[-4.92215837130412]
								}, {
									"case":	63,
									"scores":	[-4.92215837130412]
								}, {
									"case":	64,
									"scores":	[-4.92215837130412]
								}, {
									"case":	65,
									"scores":	[-4.92215837130412]
								}, {
									"case":	66,
									"scores":	[-4.92215837130412]
								}, {
									"case":	67,
									"scores":	[-4.92215837130412]
								}, {
									"case":	68,
									"scores":	[-4.92215837130412]
								}, {
									"case":	69,
									"scores":	[-4.92215837130412]
								}, {
									"case":	70,
									"scores":	[-4.92215837130412]
								}, {
									"case":	71,
									"scores":	[-4.92215837130412]
								}, {
									"case":	72,
									"scores":	[-4.92215837130412]
								}, {
									"case":	73,
									"scores":	[-4.92215837130412]
								}, {
									"case":	74,
									"scores":	[-4.92215837130412]
								}, {
									"case":	75,
									"scores":	[-4.92215837130412]
								}, {
									"case":	76,
									"scores":	[-4.92215837130412]
								}, {
									"case":	77,
									"scores":	[-4.92215837130412]
								}, {
									"case":	78,
									"scores":	[-4.92215837130412]
								}, {
									"case":	79,
									"scores":	[-4.92215837130412]
								}, {
									"case":	80,
									"scores":	[-4.92215837130412]
								}, {
									"case":	81,
									"scores":	[-4.92215837130412]
								}, {
									"case":	82,
									"scores":	[-4.92215837130412]
								}, {
									"case":	83,
									"scores":	[-4.92215837130412]
								}, {
									"case":	84,
									"scores":	[-4.92215837130412]
								}, {
									"case":	85,
									"scores":	[-4.92215837130412]
								}, {
									"case":	86,
									"scores":	[-4.92215837130412]
								}, {
									"case":	87,
									"scores":	[-4.92215837130412]
								}, {
									"case":	88,
									"scores":	[-4.92215837130412]
								}, {
									"case":	89,
									"scores":	[-4.92215837130412]
								}, {
									"case":	90,
									"scores":	[-4.92215837130412]
								}, {
									"case":	91,
									"scores":	[-4.92215837130412]
								}, {
									"case":	92,
									"scores":	[-4.92215837130412]
								}, {
									"case":	93,
									"scores":	[-4.92215837130412]
								}, {
									"case":	94,
									"scores":	[-4.92215837130412]
								}, {
									"case":	95,
									"scores":	[-4.92215837130412]
								}, {
									"case":	96,
									"scores":	[-4.92215837130412]
								}, {
									"case":	97,
									"scores":	[-4.92215837130412]
								}, {
									"case":	98,
									"scores":	[-4.92215837130412]
								}, {
									"case":	99,
									"scores":	[-4.92215837130412]
								}, {
									"case":	100,
									"scores":	[-4.92215837130412]
								}, {
									"case":	101,
									"scores":	[-4.92215837130412]
								}, {
									"case":	102,
									"scores":	[-4.92215837130412]
								}, {
									"case":	103,
									"scores":	[-4.92215837130412]
								}, {
									"case":	104,
									"scores":	[-4.92215837130412]
								}, {
									"case":	105,
									"scores":	[-4.92215837130412]
								}, {
									"case":	106,
									"scores":	[-4.92215837130412]
								}, {
									"case":	107,
									"scores":	[-4.92215837130412]
								}, {
									"case":	108,
									"scores":	[-4.92215837130412]
								}, {
									"case":	109,
									"scores":	[-4.92215837130412]
								}, {
									"case":	110,
									"scores":	[-4.92215837130412]
								}, {
									"case":	111,
									"scores":	[-4.92215837130412]
								}, {
									"case":	112,
									"scores":	[-4.92215837130412]
								}, {
									"case":	113,
									"scores":	[-4.92215837130412]
								}, {
									"case":	114,
									"scores":	[-4.92215837130412]
								}, {
									"case":	115,
									"scores":	[-4.92215837130412]
								}, {
									"case":	116,
									"scores":	[-4.92215837130412]
								}, {
									"case":	117,
									"scores":	[-4.92215837130412]
								}, {
									"case":	118,
									"scores":	[-4.92215837130412]
								}, {
									"case":	119,
									"scores":	[-4.92215837130412]
								}, {
									"case":	120,
									"scores":	[-4.92215837130412]
								}, {
									"case":	121,
									"scores":	[-4.92215837130412]
								}, {
									"case":	122,
									"scores":	[-4.92215837130412]
								}, {
									"case":	123,
									"scores":	[-4.92215837130412]
								}, {
									"case":	124,
									"scores":	[-4.92215837130412]
								}, {
									"case":	125,
									"scores":	[-4.92215837130412]
								}, {
									"case":	126,
									"scores":	[-4.92215837130412]
								}, {
									"case":	127,
									"scores":	[-4.92215837130412]
								}, {
									"case":	128,
									"scores":	[-4.92215837130412]
								}, {
									"case":	129,
									"scores":	[-4.92215837130412]
								}, {
									"case":	130,
									"scores":	[-4.92215837130412]
								}, {
									"case":	131,
									"scores":	[-4.92215837130412]
								}, {
									"case":	132,
									"scores":	[-4.92215837130412]
								}, {
									"case":	133,
									"scores":	[-4.92215837130412]
								}, {
									"case":	134,
									"scores":	[-4.92215837130412]
								}, {
									"case":	135,
									"scores":	[-4.92215837130412]
								}, {
									"case":	136,
									"scores":	[-4.92215837130412]
								}, {
									"case":	137,
									"scores":	[-4.92215837130412]
								}, {
									"case":	138,
									"scores":	[-4.92215837130412]
								}, {
									"case":	139,
									"scores":	[-4.92215837130412]
								}, {
									"case":	140,
									"scores":	[-4.92215837130412]
								}, {
									"case":	141,
									"scores":	[-4.92215837130412]
								}, {
									"case":	142,
									"scores":	[-4.92215837130412]
								}, {
									"case":	143,
									"scores":	[-4.92215837130412]
								}, {
									"case":	144,
									"scores":	[-4.92215837130412]
								}, {
									"case":	145,
									"scores":	[-4.92215837130412]
								}, {
									"case":	146,
									"scores":	[-4.92215837130412]
								}, {
									"case":	147,
									"scores":	[-4.92215837130412]
								}]
						}]
				}, {
					"line":	386,
					"switches":	[{
							"switch":	46,
							"types":	[[], [], [], [], [91], [], [], [], [], [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], [], [], [], [], [], []],
							"begin_line":	387,
							"begin_column":	1,
							"end_line":	387,
							"end_column":	1,
							"patch_codes":	["(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (12)", "(json_globals.error_code) = (127)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (15)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (6)", "(json_globals.error_code) = (64)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (8)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (len)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (pos)", "(s)++", "_efree(((s)))", "_efree(((utf16)))", "len = (0)", "len = (1)", "len = (10)", "len = (12)", "len = (127)", "len = (128)", "len = (15)", "len = (16)", "len = (2)", "len = (3)", "len = (32)", "len = (4)", "len = (5)", "len = (6)", "len = (64)", "len = (78)", "len = (8)", "len = (len)", "len = (options)", "len = (pos)", "len = utf8_to_utf16((utf16), s, len)", "len = utf8_to_utf16(utf16, (s), len)", "us = (0)", "us = (1)", "us = (10)", "us = (12)", "us = (127)", "us = (128)", "us = (15)", "us = (16)", "us = (2)", "us = (3)", "us = (32)", "us = (4)", "us = (5)", "us = (6)", "us = (64)", "us = (78)", "us = (8)", "us = (us)", "us = (utf16)[pos++]", "utf16 = (utf16)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "_efree((utf16))", "exit(1)", "len = utf8_to_utf16(utf16, s, len)", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "us = (((us & 15) << 12) | (((us >> 4) & 15) << 8) | (((us >> 8) & 15) << 4) | ((us >> 12) & 15))", "us = utf16[pos++]", "utf16 = (unsigned short *)_safe_emalloc((len), (sizeof(unsigned short)), (0))", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L387\", 7, &(utf16), sizeof (utf16), &(len), sizeof (len), &(s), sizeof (s), &(buf), sizeof (buf), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.94236107862164]
								}, {
									"case":	2,
									"scores":	[-4.94236107862164]
								}, {
									"case":	3,
									"scores":	[-4.94236107862164]
								}, {
									"case":	4,
									"scores":	[-4.94236107862164]
								}, {
									"case":	5,
									"scores":	[-4.94236107862164]
								}, {
									"case":	6,
									"scores":	[-4.94236107862164]
								}, {
									"case":	7,
									"scores":	[-4.94236107862164]
								}, {
									"case":	8,
									"scores":	[-4.94236107862164]
								}, {
									"case":	9,
									"scores":	[-4.94236107862164]
								}, {
									"case":	10,
									"scores":	[-4.94236107862164]
								}, {
									"case":	11,
									"scores":	[-4.94236107862164]
								}, {
									"case":	12,
									"scores":	[-4.94236107862164]
								}, {
									"case":	13,
									"scores":	[-4.94236107862164]
								}, {
									"case":	14,
									"scores":	[-4.94236107862164]
								}, {
									"case":	15,
									"scores":	[-4.94236107862164]
								}, {
									"case":	16,
									"scores":	[-4.94236107862164]
								}, {
									"case":	17,
									"scores":	[-4.94236107862164]
								}, {
									"case":	18,
									"scores":	[-4.94236107862164]
								}, {
									"case":	19,
									"scores":	[-4.94236107862164]
								}, {
									"case":	20,
									"scores":	[-4.94236107862164]
								}, {
									"case":	21,
									"scores":	[-4.94236107862164]
								}, {
									"case":	22,
									"scores":	[-4.94236107862164]
								}, {
									"case":	23,
									"scores":	[-4.94236107862164]
								}, {
									"case":	24,
									"scores":	[-4.94236107862164]
								}, {
									"case":	25,
									"scores":	[-4.94236107862164]
								}, {
									"case":	26,
									"scores":	[-4.94236107862164]
								}, {
									"case":	27,
									"scores":	[-4.94236107862164]
								}, {
									"case":	28,
									"scores":	[-4.94236107862164]
								}, {
									"case":	29,
									"scores":	[-4.94236107862164]
								}, {
									"case":	30,
									"scores":	[-4.94236107862164]
								}, {
									"case":	31,
									"scores":	[-4.94236107862164]
								}, {
									"case":	32,
									"scores":	[-4.94236107862164]
								}, {
									"case":	33,
									"scores":	[-4.94236107862164]
								}, {
									"case":	34,
									"scores":	[-4.94236107862164]
								}, {
									"case":	35,
									"scores":	[-4.94236107862164]
								}, {
									"case":	36,
									"scores":	[-4.94236107862164]
								}, {
									"case":	37,
									"scores":	[-4.94236107862164]
								}, {
									"case":	38,
									"scores":	[-4.94236107862164]
								}, {
									"case":	39,
									"scores":	[-4.94236107862164]
								}, {
									"case":	40,
									"scores":	[-4.94236107862164]
								}, {
									"case":	41,
									"scores":	[-4.94236107862164]
								}, {
									"case":	42,
									"scores":	[-4.94236107862164]
								}, {
									"case":	43,
									"scores":	[-4.94236107862164]
								}, {
									"case":	44,
									"scores":	[-4.94236107862164]
								}, {
									"case":	45,
									"scores":	[-4.94236107862164]
								}, {
									"case":	46,
									"scores":	[-4.94236107862164]
								}, {
									"case":	47,
									"scores":	[-4.94236107862164]
								}, {
									"case":	48,
									"scores":	[-4.94236107862164]
								}, {
									"case":	49,
									"scores":	[-4.94236107862164]
								}, {
									"case":	50,
									"scores":	[-4.94236107862164]
								}, {
									"case":	51,
									"scores":	[-4.94236107862164]
								}, {
									"case":	52,
									"scores":	[-4.94236107862164]
								}, {
									"case":	53,
									"scores":	[-4.94236107862164]
								}, {
									"case":	54,
									"scores":	[-4.94236107862164]
								}, {
									"case":	55,
									"scores":	[-4.94236107862164]
								}, {
									"case":	56,
									"scores":	[-4.94236107862164]
								}, {
									"case":	57,
									"scores":	[-4.94236107862164]
								}, {
									"case":	58,
									"scores":	[-4.94236107862164]
								}, {
									"case":	59,
									"scores":	[-4.94236107862164]
								}, {
									"case":	60,
									"scores":	[-4.94236107862164]
								}, {
									"case":	61,
									"scores":	[-4.94236107862164]
								}, {
									"case":	62,
									"scores":	[-4.94236107862164]
								}, {
									"case":	63,
									"scores":	[-4.94236107862164]
								}, {
									"case":	64,
									"scores":	[-4.94236107862164]
								}, {
									"case":	65,
									"scores":	[-4.94236107862164]
								}, {
									"case":	66,
									"scores":	[-4.94236107862164]
								}, {
									"case":	67,
									"scores":	[-4.94236107862164]
								}, {
									"case":	68,
									"scores":	[-4.94236107862164]
								}, {
									"case":	69,
									"scores":	[-4.94236107862164]
								}, {
									"case":	70,
									"scores":	[-4.94236107862164]
								}, {
									"case":	71,
									"scores":	[-4.94236107862164]
								}, {
									"case":	72,
									"scores":	[-4.94236107862164]
								}, {
									"case":	73,
									"scores":	[-4.94236107862164]
								}, {
									"case":	74,
									"scores":	[-4.94236107862164]
								}, {
									"case":	75,
									"scores":	[-4.94236107862164]
								}, {
									"case":	76,
									"scores":	[-4.94236107862164]
								}, {
									"case":	77,
									"scores":	[-4.94236107862164]
								}, {
									"case":	78,
									"scores":	[-4.94236107862164]
								}, {
									"case":	79,
									"scores":	[-4.94236107862164]
								}, {
									"case":	80,
									"scores":	[-4.94236107862164]
								}, {
									"case":	81,
									"scores":	[-4.94236107862164]
								}, {
									"case":	82,
									"scores":	[-4.94236107862164]
								}, {
									"case":	83,
									"scores":	[-4.94236107862164]
								}, {
									"case":	84,
									"scores":	[-4.94236107862164]
								}, {
									"case":	85,
									"scores":	[-4.94236107862164]
								}, {
									"case":	86,
									"scores":	[-4.94236107862164]
								}, {
									"case":	87,
									"scores":	[-4.94236107862164]
								}, {
									"case":	88,
									"scores":	[-4.94236107862164]
								}, {
									"case":	89,
									"scores":	[-4.94236107862164]
								}, {
									"case":	90,
									"scores":	[-4.94236107862164]
								}, {
									"case":	91,
									"scores":	[-7.61375272262164, -7.7950519726216383, -8.50616109162164, -8.79889606242164, -8.76179566242164, -8.25817157462164, -8.55285714862164]
								}]
						}, {
							"switch":	47,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	387,
							"begin_column":	3,
							"end_line":	389,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L387\", 7, &(utf16), sizeof (utf16), &(len), sizeof (len), &(s), sizeof (s), &(buf), sizeof (buf), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options))) {\n    _efree((utf16));\n}\n", "if ((utf16) || __is_neg(\"\", \"L387\", 7, &(utf16), sizeof (utf16), &(len), sizeof (len), &(s), sizeof (s), &(buf), sizeof (buf), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options))) {\n    _efree((utf16));\n}\n", "if ((utf16) && !__is_neg(\"\", \"L387\", 7, &(utf16), sizeof (utf16), &(len), sizeof (len), &(s), sizeof (s), &(buf), sizeof (buf), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options))) {\n    _efree((utf16));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.666258575428146, -3.0800613734281459, -4.6740446754281457, -5.2764704754281455, -4.9821196754281454, -3.9104338754281458, -4.5185823754281458]
								}, {
									"case":	2,
									"scores":	[-4.473054475428146, -3.8868572734281459, -5.4808405754281457, -6.0832663754281455, -5.7889155754281454, -4.7172297754281463, -5.3253782754281458]
								}, {
									"case":	3,
									"scores":	[-4.473054475428146, -3.8868572734281459, -5.4808405754281457, -6.0832663754281455, -5.7889155754281454, -4.7172297754281463, -5.3253782754281458]
								}]
						}, {
							"switch":	50,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	387,
							"begin_column":	3,
							"end_line":	389,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L387\", 7, &(utf16), sizeof (utf16), &(len), sizeof (len), &(s), sizeof (s), &(buf), sizeof (buf), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options)))\n    if (utf16) {\n        _efree((utf16));\n    }\n", "if (!__is_neg(\"\", \"L387\", 7, &(utf16), sizeof (utf16), &(len), sizeof (len), &(s), sizeof (s), &(buf), sizeof (buf), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options)) && (utf16)) {\n    _efree((utf16));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.17865513862164, -5.59245793662164, -7.18644123862164, -7.78886703862164, -7.49451623862164, -6.42283043862164, -7.0309789386216384]
								}, {
									"case":	2,
									"scores":	[-6.06484113862164, -5.47864393662164, -7.07262723862164, -7.67505303862164, -7.38070223862164, -6.30901643862164, -6.91716493862164]
								}]
						}]
				}, {
					"line":	390,
					"switches":	[{
							"switch":	53,
							"types":	[[], [], [], [], [189], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [], [], [], [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188], [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169], [], [], [], [], [], []],
							"begin_line":	391,
							"begin_column":	2,
							"end_line":	391,
							"end_column":	2,
							"patch_codes":	["memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&json_globals, 0, sizeof (*(&json_globals)))", "memset(&json_globals.encoder_depth, 0, sizeof (*(&json_globals.encoder_depth)))", "memset(&json_globals.error_code, 0, sizeof (*(&json_globals.error_code)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (12)", "(json_globals.error_code) = (127)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (15)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (6)", "(json_globals.error_code) = (64)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (8)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (len)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (pos)", "(s)++", "_efree(((s)))", "_efree(((utf16)))", "len = (0)", "len = (1)", "len = (10)", "len = (12)", "len = (127)", "len = (128)", "len = (15)", "len = (16)", "len = (2)", "len = (3)", "len = (32)", "len = (4)", "len = (5)", "len = (6)", "len = (64)", "len = (78)", "len = (8)", "len = (len)", "len = (options)", "len = (pos)", "len = utf8_to_utf16((utf16), s, len)", "len = utf8_to_utf16(utf16, (s), len)", "us = (0)", "us = (1)", "us = (10)", "us = (12)", "us = (127)", "us = (128)", "us = (15)", "us = (16)", "us = (2)", "us = (3)", "us = (32)", "us = (4)", "us = (5)", "us = (6)", "us = (64)", "us = (78)", "us = (8)", "us = (us)", "us = (utf16)[pos++]", "utf16 = (utf16)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "_efree((utf16))", "exit(1)", "len = utf8_to_utf16(utf16, s, len)", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "us = (((us & 15) << 12) | (((us >> 4) & 15) << 8) | (((us >> 8) & 15) << 4) | ((us >> 12) & 15))", "us = utf16[pos++]", "utf16 = (unsigned short *)_safe_emalloc((len), (sizeof(unsigned short)), (0))", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L391\", 145, &(json_globals.error_code), sizeof (json_globals.error_code), &(json_globals.error_code), sizeof (json_globals.error_code), &(len), sizeof (len), &(core_globals.display_errors), sizeof (core_globals.display_errors), &(core_globals.display_errors), sizeof (core_globals.display_errors), &(utf16), sizeof (utf16), &(buf), sizeof (buf), &(s), sizeof (s), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options), &(json_globals.encoder_depth), sizeof (json_globals.encoder_depth), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log), &(json_globals.encoder_depth), sizeof (json_globals.encoder_depth)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.88175295666908]
								}, {
									"case":	2,
									"scores":	[-4.88175295666908]
								}, {
									"case":	3,
									"scores":	[-4.88175295666908]
								}, {
									"case":	4,
									"scores":	[-4.88175295666908]
								}, {
									"case":	5,
									"scores":	[-4.88175295666908]
								}, {
									"case":	6,
									"scores":	[-4.88175295666908]
								}, {
									"case":	7,
									"scores":	[-4.88175295666908]
								}, {
									"case":	8,
									"scores":	[-4.88175295666908]
								}, {
									"case":	9,
									"scores":	[-4.88175295666908]
								}, {
									"case":	10,
									"scores":	[-4.88175295666908]
								}, {
									"case":	11,
									"scores":	[-4.88175295666908]
								}, {
									"case":	12,
									"scores":	[-4.88175295666908]
								}, {
									"case":	13,
									"scores":	[-4.88175295666908]
								}, {
									"case":	14,
									"scores":	[-4.88175295666908]
								}, {
									"case":	15,
									"scores":	[-4.88175295666908]
								}, {
									"case":	16,
									"scores":	[-4.88175295666908]
								}, {
									"case":	17,
									"scores":	[-4.88175295666908]
								}, {
									"case":	18,
									"scores":	[-4.88175295666908]
								}, {
									"case":	19,
									"scores":	[-4.88175295666908]
								}, {
									"case":	20,
									"scores":	[-4.88175295666908]
								}, {
									"case":	21,
									"scores":	[-4.88175295666908]
								}, {
									"case":	22,
									"scores":	[-4.88175295666908]
								}, {
									"case":	23,
									"scores":	[-4.88175295666908]
								}, {
									"case":	24,
									"scores":	[-4.88175295666908]
								}, {
									"case":	25,
									"scores":	[-4.88175295666908]
								}, {
									"case":	26,
									"scores":	[-4.88175295666908]
								}, {
									"case":	27,
									"scores":	[-4.88175295666908]
								}, {
									"case":	28,
									"scores":	[-4.88175295666908]
								}, {
									"case":	29,
									"scores":	[-4.88175295666908]
								}, {
									"case":	30,
									"scores":	[-4.88175295666908]
								}, {
									"case":	31,
									"scores":	[-4.88175295666908]
								}, {
									"case":	32,
									"scores":	[-4.88175295666908]
								}, {
									"case":	33,
									"scores":	[-4.88175295666908]
								}, {
									"case":	34,
									"scores":	[-4.88175295666908]
								}, {
									"case":	35,
									"scores":	[-4.88175295666908]
								}, {
									"case":	36,
									"scores":	[-4.88175295666908]
								}, {
									"case":	37,
									"scores":	[-4.88175295666908]
								}, {
									"case":	38,
									"scores":	[-4.88175295666908]
								}, {
									"case":	39,
									"scores":	[-4.88175295666908]
								}, {
									"case":	40,
									"scores":	[-4.88175295666908]
								}, {
									"case":	41,
									"scores":	[-4.88175295666908]
								}, {
									"case":	42,
									"scores":	[-4.88175295666908]
								}, {
									"case":	43,
									"scores":	[-4.88175295666908]
								}, {
									"case":	44,
									"scores":	[-4.88175295666908]
								}, {
									"case":	45,
									"scores":	[-4.88175295666908]
								}, {
									"case":	46,
									"scores":	[-4.88175295666908]
								}, {
									"case":	47,
									"scores":	[-4.88175295666908]
								}, {
									"case":	48,
									"scores":	[-4.88175295666908]
								}, {
									"case":	49,
									"scores":	[-4.88175295666908]
								}, {
									"case":	50,
									"scores":	[-4.88175295666908]
								}, {
									"case":	51,
									"scores":	[-4.88175295666908]
								}, {
									"case":	52,
									"scores":	[-4.88175295666908]
								}, {
									"case":	53,
									"scores":	[-4.88175295666908]
								}, {
									"case":	54,
									"scores":	[-4.88175295666908]
								}, {
									"case":	55,
									"scores":	[-4.88175295666908]
								}, {
									"case":	56,
									"scores":	[-4.88175295666908]
								}, {
									"case":	57,
									"scores":	[-4.88175295666908]
								}, {
									"case":	58,
									"scores":	[-4.88175295666908]
								}, {
									"case":	59,
									"scores":	[-4.88175295666908]
								}, {
									"case":	60,
									"scores":	[-4.88175295666908]
								}, {
									"case":	61,
									"scores":	[-4.88175295666908]
								}, {
									"case":	62,
									"scores":	[-4.88175295666908]
								}, {
									"case":	63,
									"scores":	[-4.88175295666908]
								}, {
									"case":	64,
									"scores":	[-4.88175295666908]
								}, {
									"case":	65,
									"scores":	[-4.88175295666908]
								}, {
									"case":	66,
									"scores":	[-4.88175295666908]
								}, {
									"case":	67,
									"scores":	[-4.88175295666908]
								}, {
									"case":	68,
									"scores":	[-4.88175295666908]
								}, {
									"case":	69,
									"scores":	[-4.88175295666908]
								}, {
									"case":	70,
									"scores":	[-4.88175295666908]
								}, {
									"case":	71,
									"scores":	[-4.88175295666908]
								}, {
									"case":	72,
									"scores":	[-4.88175295666908]
								}, {
									"case":	73,
									"scores":	[-4.88175295666908]
								}, {
									"case":	74,
									"scores":	[-4.88175295666908]
								}, {
									"case":	75,
									"scores":	[-4.88175295666908]
								}, {
									"case":	76,
									"scores":	[-4.88175295666908]
								}, {
									"case":	77,
									"scores":	[-4.88175295666908]
								}, {
									"case":	78,
									"scores":	[-4.88175295666908]
								}, {
									"case":	79,
									"scores":	[-4.88175295666908]
								}, {
									"case":	80,
									"scores":	[-4.88175295666908]
								}, {
									"case":	81,
									"scores":	[-4.88175295666908]
								}, {
									"case":	82,
									"scores":	[-4.88175295666908]
								}, {
									"case":	83,
									"scores":	[-4.88175295666908]
								}, {
									"case":	84,
									"scores":	[-4.88175295666908]
								}, {
									"case":	85,
									"scores":	[-4.88175295666908]
								}, {
									"case":	86,
									"scores":	[-4.88175295666908]
								}, {
									"case":	87,
									"scores":	[-4.88175295666908]
								}, {
									"case":	88,
									"scores":	[-4.88175295666908]
								}, {
									"case":	89,
									"scores":	[-4.88175295666908]
								}, {
									"case":	90,
									"scores":	[-4.88175295666908]
								}, {
									"case":	91,
									"scores":	[-4.88175295666908]
								}, {
									"case":	92,
									"scores":	[-4.88175295666908]
								}, {
									"case":	93,
									"scores":	[-4.88175295666908]
								}, {
									"case":	94,
									"scores":	[-4.88175295666908]
								}, {
									"case":	95,
									"scores":	[-4.88175295666908]
								}, {
									"case":	96,
									"scores":	[-4.88175295666908]
								}, {
									"case":	97,
									"scores":	[-4.88175295666908]
								}, {
									"case":	98,
									"scores":	[-4.88175295666908]
								}, {
									"case":	99,
									"scores":	[-4.88175295666908]
								}, {
									"case":	100,
									"scores":	[-4.88175295666908]
								}, {
									"case":	101,
									"scores":	[-4.88175295666908]
								}, {
									"case":	102,
									"scores":	[-4.88175295666908]
								}, {
									"case":	103,
									"scores":	[-4.88175295666908]
								}, {
									"case":	104,
									"scores":	[-4.88175295666908]
								}, {
									"case":	105,
									"scores":	[-4.88175295666908]
								}, {
									"case":	106,
									"scores":	[-4.88175295666908]
								}, {
									"case":	107,
									"scores":	[-4.88175295666908]
								}, {
									"case":	108,
									"scores":	[-4.88175295666908]
								}, {
									"case":	109,
									"scores":	[-4.88175295666908]
								}, {
									"case":	110,
									"scores":	[-4.88175295666908]
								}, {
									"case":	111,
									"scores":	[-4.88175295666908]
								}, {
									"case":	112,
									"scores":	[-4.88175295666908]
								}, {
									"case":	113,
									"scores":	[-4.88175295666908]
								}, {
									"case":	114,
									"scores":	[-4.88175295666908]
								}, {
									"case":	115,
									"scores":	[-4.88175295666908]
								}, {
									"case":	116,
									"scores":	[-4.88175295666908]
								}, {
									"case":	117,
									"scores":	[-4.88175295666908]
								}, {
									"case":	118,
									"scores":	[-4.88175295666908]
								}, {
									"case":	119,
									"scores":	[-4.88175295666908]
								}, {
									"case":	120,
									"scores":	[-4.88175295666908]
								}, {
									"case":	121,
									"scores":	[-4.88175295666908]
								}, {
									"case":	122,
									"scores":	[-4.88175295666908]
								}, {
									"case":	123,
									"scores":	[-4.88175295666908]
								}, {
									"case":	124,
									"scores":	[-4.88175295666908]
								}, {
									"case":	125,
									"scores":	[-4.88175295666908]
								}, {
									"case":	126,
									"scores":	[-4.88175295666908]
								}, {
									"case":	127,
									"scores":	[-4.88175295666908]
								}, {
									"case":	128,
									"scores":	[-4.88175295666908]
								}, {
									"case":	129,
									"scores":	[-4.88175295666908]
								}, {
									"case":	130,
									"scores":	[-4.88175295666908]
								}, {
									"case":	131,
									"scores":	[-4.88175295666908]
								}, {
									"case":	132,
									"scores":	[-4.88175295666908]
								}, {
									"case":	133,
									"scores":	[-4.88175295666908]
								}, {
									"case":	134,
									"scores":	[-4.88175295666908]
								}, {
									"case":	135,
									"scores":	[-4.88175295666908]
								}, {
									"case":	136,
									"scores":	[-4.88175295666908]
								}, {
									"case":	137,
									"scores":	[-4.88175295666908]
								}, {
									"case":	138,
									"scores":	[-4.88175295666908]
								}, {
									"case":	139,
									"scores":	[-4.88175295666908]
								}, {
									"case":	140,
									"scores":	[-4.88175295666908]
								}, {
									"case":	141,
									"scores":	[-4.88175295666908]
								}, {
									"case":	142,
									"scores":	[-4.88175295666908]
								}, {
									"case":	143,
									"scores":	[-4.88175295666908]
								}, {
									"case":	144,
									"scores":	[-4.88175295666908]
								}, {
									"case":	145,
									"scores":	[-4.88175295666908]
								}, {
									"case":	146,
									"scores":	[-4.88175295666908]
								}, {
									"case":	147,
									"scores":	[-4.88175295666908]
								}, {
									"case":	148,
									"scores":	[-4.88175295666908]
								}, {
									"case":	149,
									"scores":	[-4.88175295666908]
								}, {
									"case":	150,
									"scores":	[-4.88175295666908]
								}, {
									"case":	151,
									"scores":	[-4.88175295666908]
								}, {
									"case":	152,
									"scores":	[-4.88175295666908]
								}, {
									"case":	153,
									"scores":	[-4.88175295666908]
								}, {
									"case":	154,
									"scores":	[-4.88175295666908]
								}, {
									"case":	155,
									"scores":	[-4.88175295666908]
								}, {
									"case":	156,
									"scores":	[-4.88175295666908]
								}, {
									"case":	157,
									"scores":	[-4.88175295666908]
								}, {
									"case":	158,
									"scores":	[-4.88175295666908]
								}, {
									"case":	159,
									"scores":	[-4.88175295666908]
								}, {
									"case":	160,
									"scores":	[-4.88175295666908]
								}, {
									"case":	161,
									"scores":	[-4.88175295666908]
								}, {
									"case":	162,
									"scores":	[-4.88175295666908]
								}, {
									"case":	163,
									"scores":	[-4.88175295666908]
								}, {
									"case":	164,
									"scores":	[-4.88175295666908]
								}, {
									"case":	165,
									"scores":	[-4.88175295666908]
								}, {
									"case":	166,
									"scores":	[-4.88175295666908]
								}, {
									"case":	167,
									"scores":	[-4.88175295666908]
								}, {
									"case":	168,
									"scores":	[-4.88175295666908]
								}, {
									"case":	169,
									"scores":	[-4.88175295666908]
								}, {
									"case":	170,
									"scores":	[-4.88175295666908]
								}, {
									"case":	171,
									"scores":	[-4.88175295666908]
								}, {
									"case":	172,
									"scores":	[-4.88175295666908]
								}, {
									"case":	173,
									"scores":	[-4.88175295666908]
								}, {
									"case":	174,
									"scores":	[-4.88175295666908]
								}, {
									"case":	175,
									"scores":	[-4.88175295666908]
								}, {
									"case":	176,
									"scores":	[-4.88175295666908]
								}, {
									"case":	177,
									"scores":	[-4.88175295666908]
								}, {
									"case":	178,
									"scores":	[-4.88175295666908]
								}, {
									"case":	179,
									"scores":	[-4.88175295666908]
								}, {
									"case":	180,
									"scores":	[-4.88175295666908]
								}, {
									"case":	181,
									"scores":	[-4.88175295666908]
								}, {
									"case":	182,
									"scores":	[-4.88175295666908]
								}, {
									"case":	183,
									"scores":	[-4.88175295666908]
								}, {
									"case":	184,
									"scores":	[-4.88175295666908]
								}, {
									"case":	185,
									"scores":	[-4.88175295666908]
								}, {
									"case":	186,
									"scores":	[-4.88175295666908]
								}, {
									"case":	187,
									"scores":	[-4.88175295666908]
								}, {
									"case":	188,
									"scores":	[-4.88175295666908]
								}, {
									"case":	189,
									"scores":	[-7.64071516766908, -7.64071516766908, -7.25276115266908, -8.53074192666908, -8.53074192666908, -7.92748486966908, -8.25732024046908, -7.96458526966908, -8.22021984046908, -7.71659575266908, -8.01128132666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.74163104366908, -8.74163104366908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.02980692666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.74163104366908, -8.74163104366908, -8.74163104366908, -8.74163104366908, -8.74163104366908, -8.74163104366908, -8.74163104366908, -8.53074192666908, -8.74163104366908, -8.74163104366908, -8.74163104366908, -8.74163104366908, -8.74163104366908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.74163104366908, -8.74163104366908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.74163104366908, -8.74163104366908, -8.53074192666908, -8.74163104366908, -8.74163104366908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.24069604366908, -8.53074192666908, -8.74163104366908, -8.53074192666908, -8.74163104366908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.74163104366908, -8.74163104366908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.02980692666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.74163104366908, -8.74163104366908, -8.74163104366908, -8.74163104366908, -8.74163104366908, -8.74163104366908, -8.74163104366908, -8.53074192666908, -8.74163104366908, -8.74163104366908, -8.74163104366908, -8.74163104366908, -8.74163104366908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.74163104366908, -8.74163104366908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.74163104366908, -8.74163104366908, -8.53074192666908, -8.74163104366908, -8.74163104366908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.53074192666908, -8.24069604366908, -8.53074192666908, -8.74163104366908, -8.53074192666908, -8.74163104366908, -8.53074192666908, -8.53074192666908]
								}]
						}, {
							"switch":	54,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	391,
							"begin_column":	4,
							"end_line":	391,
							"end_column":	21,
							"patch_codes":	["if (!__is_neg(\"\", \"L391\", 145, &(json_globals.error_code), sizeof (json_globals.error_code), &(json_globals.error_code), sizeof (json_globals.error_code), &(len), sizeof (len), &(core_globals.display_errors), sizeof (core_globals.display_errors), &(core_globals.display_errors), sizeof (core_globals.display_errors), &(utf16), sizeof (utf16), &(buf), sizeof (buf), &(s), sizeof (s), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options), &(json_globals.encoder_depth), sizeof (json_globals.encoder_depth), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log), &(json_globals.encoder_depth), sizeof (json_globals.encoder_depth)))\n    (json_globals.error_code) = PHP_JSON_ERROR_UTF8;\n", "{\n}\n", "(json_globals.error_code) = (0 * len)", "(json_globals.error_code) = (0 * options)", "(json_globals.error_code) = (0 * pos)", "(json_globals.error_code) = (0 * us)", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (12)", "(json_globals.error_code) = (127)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (15)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (6)", "(json_globals.error_code) = (64)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (8)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (buf != 0)", "(json_globals.error_code) = (buf == 0)", "(json_globals.error_code) = (len != 0)", "(json_globals.error_code) = (len != options)", "(json_globals.error_code) = (len != pos)", "(json_globals.error_code) = (len != us)", "(json_globals.error_code) = (len * options)", "(json_globals.error_code) = (len * pos)", "(json_globals.error_code) = (len * us)", "(json_globals.error_code) = (len + 0)", "(json_globals.error_code) = (len + options)", "(json_globals.error_code) = (len + pos)", "(json_globals.error_code) = (len + us)", "(json_globals.error_code) = (len - 0)", "(json_globals.error_code) = (len - options)", "(json_globals.error_code) = (len - pos)", "(json_globals.error_code) = (len - us)", "(json_globals.error_code) = (len == 0)", "(json_globals.error_code) = (len == options)", "(json_globals.error_code) = (len == pos)", "(json_globals.error_code) = (len == us)", "(json_globals.error_code) = (len)", "(json_globals.error_code) = (options != 0)", "(json_globals.error_code) = (options != pos)", "(json_globals.error_code) = (options != us)", "(json_globals.error_code) = (options * len)", "(json_globals.error_code) = (options * pos)", "(json_globals.error_code) = (options * us)", "(json_globals.error_code) = (options + 0)", "(json_globals.error_code) = (options + pos)", "(json_globals.error_code) = (options + us)", "(json_globals.error_code) = (options - 0)", "(json_globals.error_code) = (options - pos)", "(json_globals.error_code) = (options - us)", "(json_globals.error_code) = (options == 0)", "(json_globals.error_code) = (options == pos)", "(json_globals.error_code) = (options == us)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (pos != 0)", "(json_globals.error_code) = (pos != us)", "(json_globals.error_code) = (pos * len)", "(json_globals.error_code) = (pos * options)", "(json_globals.error_code) = (pos * us)", "(json_globals.error_code) = (pos + 0)", "(json_globals.error_code) = (pos + us)", "(json_globals.error_code) = (pos - 0)", "(json_globals.error_code) = (pos - us)", "(json_globals.error_code) = (pos == 0)", "(json_globals.error_code) = (pos == us)", "(json_globals.error_code) = (pos)", "(json_globals.error_code) = (s != 0)", "(json_globals.error_code) = (s == 0)", "(json_globals.error_code) = (us != 0)", "(json_globals.error_code) = (us * len)", "(json_globals.error_code) = (us * options)", "(json_globals.error_code) = (us * pos)", "(json_globals.error_code) = (us + 0)", "(json_globals.error_code) = (us - 0)", "(json_globals.error_code) = (us == 0)", "(json_globals.error_code) = (utf16 != 0)", "(json_globals.error_code) = (utf16 == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.96048994766908, -6.96048994766908, -6.54104238666908, -7.09354742666908, -7.09354742666908, -7.03796261666908, -7.93473921666908, -7.33231341666908, -7.64038841666908, -6.56870261666908, -7.17685111666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.56280742666908, -7.56280742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -6.77153639666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.56280742666908, -7.56280742666908, -7.56280742666908, -7.56280742666908, -7.56280742666908, -7.56280742666908, -7.56280742666908, -7.09354742666908, -7.56280742666908, -7.56280742666908, -7.56280742666908, -7.56280742666908, -7.56280742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.56280742666908, -7.56280742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.56280742666908, -7.56280742666908, -7.09354742666908, -7.56280742666908, -7.56280742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.24079639666908, -7.09354742666908, -7.56280742666908, -7.09354742666908, -7.56280742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.56280742666908, -7.56280742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -6.77153639666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.56280742666908, -7.56280742666908, -7.56280742666908, -7.56280742666908, -7.56280742666908, -7.56280742666908, -7.56280742666908, -7.09354742666908, -7.56280742666908, -7.56280742666908, -7.56280742666908, -7.56280742666908, -7.56280742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.56280742666908, -7.56280742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.56280742666908, -7.56280742666908, -7.09354742666908, -7.56280742666908, -7.56280742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.09354742666908, -7.24079639666908, -7.09354742666908, -7.56280742666908, -7.09354742666908, -7.56280742666908, -7.09354742666908, -7.09354742666908]
								}, {
									"case":	2,
									"scores":	[-4.88175295666908]
								}, {
									"case":	3,
									"scores":	[-4.88175295666908]
								}, {
									"case":	4,
									"scores":	[-4.88175295666908]
								}, {
									"case":	5,
									"scores":	[-4.88175295666908]
								}, {
									"case":	6,
									"scores":	[-4.88175295666908]
								}, {
									"case":	7,
									"scores":	[-4.88175295666908]
								}, {
									"case":	8,
									"scores":	[-4.88175295666908]
								}, {
									"case":	9,
									"scores":	[-4.88175295666908]
								}, {
									"case":	10,
									"scores":	[-4.88175295666908]
								}, {
									"case":	11,
									"scores":	[-4.88175295666908]
								}, {
									"case":	12,
									"scores":	[-4.88175295666908]
								}, {
									"case":	13,
									"scores":	[-4.88175295666908]
								}, {
									"case":	14,
									"scores":	[-4.88175295666908]
								}, {
									"case":	15,
									"scores":	[-4.88175295666908]
								}, {
									"case":	16,
									"scores":	[-4.88175295666908]
								}, {
									"case":	17,
									"scores":	[-4.88175295666908]
								}, {
									"case":	18,
									"scores":	[-4.88175295666908]
								}, {
									"case":	19,
									"scores":	[-4.88175295666908]
								}, {
									"case":	20,
									"scores":	[-4.88175295666908]
								}, {
									"case":	21,
									"scores":	[-4.88175295666908]
								}, {
									"case":	22,
									"scores":	[-4.88175295666908]
								}, {
									"case":	23,
									"scores":	[-4.88175295666908]
								}, {
									"case":	24,
									"scores":	[-4.88175295666908]
								}, {
									"case":	25,
									"scores":	[-4.88175295666908]
								}, {
									"case":	26,
									"scores":	[-4.88175295666908]
								}, {
									"case":	27,
									"scores":	[-4.88175295666908]
								}, {
									"case":	28,
									"scores":	[-4.88175295666908]
								}, {
									"case":	29,
									"scores":	[-4.88175295666908]
								}, {
									"case":	30,
									"scores":	[-4.88175295666908]
								}, {
									"case":	31,
									"scores":	[-4.88175295666908]
								}, {
									"case":	32,
									"scores":	[-4.88175295666908]
								}, {
									"case":	33,
									"scores":	[-4.88175295666908]
								}, {
									"case":	34,
									"scores":	[-4.88175295666908]
								}, {
									"case":	35,
									"scores":	[-4.88175295666908]
								}, {
									"case":	36,
									"scores":	[-4.88175295666908]
								}, {
									"case":	37,
									"scores":	[-4.88175295666908]
								}, {
									"case":	38,
									"scores":	[-4.88175295666908]
								}, {
									"case":	39,
									"scores":	[-4.88175295666908]
								}, {
									"case":	40,
									"scores":	[-4.88175295666908]
								}, {
									"case":	41,
									"scores":	[-4.88175295666908]
								}, {
									"case":	42,
									"scores":	[-4.88175295666908]
								}, {
									"case":	43,
									"scores":	[-4.88175295666908]
								}, {
									"case":	44,
									"scores":	[-4.88175295666908]
								}, {
									"case":	45,
									"scores":	[-4.88175295666908]
								}, {
									"case":	46,
									"scores":	[-4.88175295666908]
								}, {
									"case":	47,
									"scores":	[-4.88175295666908]
								}, {
									"case":	48,
									"scores":	[-4.88175295666908]
								}, {
									"case":	49,
									"scores":	[-4.88175295666908]
								}, {
									"case":	50,
									"scores":	[-4.88175295666908]
								}, {
									"case":	51,
									"scores":	[-4.88175295666908]
								}, {
									"case":	52,
									"scores":	[-4.88175295666908]
								}, {
									"case":	53,
									"scores":	[-4.88175295666908]
								}, {
									"case":	54,
									"scores":	[-4.88175295666908]
								}, {
									"case":	55,
									"scores":	[-4.88175295666908]
								}, {
									"case":	56,
									"scores":	[-4.88175295666908]
								}, {
									"case":	57,
									"scores":	[-4.88175295666908]
								}, {
									"case":	58,
									"scores":	[-4.88175295666908]
								}, {
									"case":	59,
									"scores":	[-4.88175295666908]
								}, {
									"case":	60,
									"scores":	[-4.88175295666908]
								}, {
									"case":	61,
									"scores":	[-4.88175295666908]
								}, {
									"case":	62,
									"scores":	[-4.88175295666908]
								}, {
									"case":	63,
									"scores":	[-4.88175295666908]
								}, {
									"case":	64,
									"scores":	[-4.88175295666908]
								}, {
									"case":	65,
									"scores":	[-4.88175295666908]
								}, {
									"case":	66,
									"scores":	[-4.88175295666908]
								}, {
									"case":	67,
									"scores":	[-4.88175295666908]
								}, {
									"case":	68,
									"scores":	[-4.88175295666908]
								}, {
									"case":	69,
									"scores":	[-4.88175295666908]
								}, {
									"case":	70,
									"scores":	[-4.88175295666908]
								}, {
									"case":	71,
									"scores":	[-4.88175295666908]
								}, {
									"case":	72,
									"scores":	[-4.88175295666908]
								}, {
									"case":	73,
									"scores":	[-4.88175295666908]
								}, {
									"case":	74,
									"scores":	[-4.88175295666908]
								}, {
									"case":	75,
									"scores":	[-4.88175295666908]
								}, {
									"case":	76,
									"scores":	[-4.88175295666908]
								}, {
									"case":	77,
									"scores":	[-4.88175295666908]
								}, {
									"case":	78,
									"scores":	[-4.88175295666908]
								}, {
									"case":	79,
									"scores":	[-4.88175295666908]
								}, {
									"case":	80,
									"scores":	[-4.88175295666908]
								}, {
									"case":	81,
									"scores":	[-4.88175295666908]
								}, {
									"case":	82,
									"scores":	[-4.88175295666908]
								}, {
									"case":	83,
									"scores":	[-4.88175295666908]
								}, {
									"case":	84,
									"scores":	[-4.88175295666908]
								}, {
									"case":	85,
									"scores":	[-4.88175295666908]
								}, {
									"case":	86,
									"scores":	[-4.88175295666908]
								}, {
									"case":	87,
									"scores":	[-4.88175295666908]
								}, {
									"case":	88,
									"scores":	[-4.88175295666908]
								}, {
									"case":	89,
									"scores":	[-4.88175295666908]
								}, {
									"case":	90,
									"scores":	[-4.88175295666908]
								}]
						}]
				}, {
					"line":	391,
					"switches":	[{
							"switch":	55,
							"types":	[[], [], [], [], [189], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [], [], [], [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188], [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169], [], [], [], [], [], []],
							"begin_line":	392,
							"begin_column":	2,
							"end_line":	392,
							"end_column":	2,
							"patch_codes":	["memset(&core_globals, 0, sizeof (*(&core_globals)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&json_globals.encoder_depth, 0, sizeof (*(&json_globals.encoder_depth)))", "memset(&json_globals.error_code, 0, sizeof (*(&json_globals.error_code)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (12)", "(json_globals.error_code) = (127)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (15)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (6)", "(json_globals.error_code) = (64)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (8)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (len)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (pos)", "(s)++", "_efree(((s)))", "_efree(((utf16)))", "len = (0)", "len = (1)", "len = (10)", "len = (12)", "len = (127)", "len = (128)", "len = (15)", "len = (16)", "len = (2)", "len = (3)", "len = (32)", "len = (4)", "len = (5)", "len = (6)", "len = (64)", "len = (78)", "len = (8)", "len = (len)", "len = (options)", "len = (pos)", "len = utf8_to_utf16((utf16), s, len)", "len = utf8_to_utf16(utf16, (s), len)", "us = (0)", "us = (1)", "us = (10)", "us = (12)", "us = (127)", "us = (128)", "us = (15)", "us = (16)", "us = (2)", "us = (3)", "us = (32)", "us = (4)", "us = (5)", "us = (6)", "us = (64)", "us = (78)", "us = (8)", "us = (us)", "us = (utf16)[pos++]", "utf16 = (utf16)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "_efree((utf16))", "exit(1)", "len = utf8_to_utf16(utf16, s, len)", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "us = (((us & 15) << 12) | (((us >> 4) & 15) << 8) | (((us >> 8) & 15) << 4) | ((us >> 12) & 15))", "us = utf16[pos++]", "utf16 = (unsigned short *)_safe_emalloc((len), (sizeof(unsigned short)), (0))", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L392\", 145, &(core_globals.display_errors), sizeof (core_globals.display_errors), &(core_globals.display_errors), sizeof (core_globals.display_errors), &(json_globals.error_code), sizeof (json_globals.error_code), &(json_globals.error_code), sizeof (json_globals.error_code), &(len), sizeof (len), &(buf), sizeof (buf), &(utf16), sizeof (utf16), &(s), sizeof (s), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options), &(json_globals.encoder_depth), sizeof (json_globals.encoder_depth), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log), &(json_globals.encoder_depth), sizeof (json_globals.encoder_depth)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.86155024935156]
								}, {
									"case":	2,
									"scores":	[-4.86155024935156]
								}, {
									"case":	3,
									"scores":	[-4.86155024935156]
								}, {
									"case":	4,
									"scores":	[-4.86155024935156]
								}, {
									"case":	5,
									"scores":	[-4.86155024935156]
								}, {
									"case":	6,
									"scores":	[-4.86155024935156]
								}, {
									"case":	7,
									"scores":	[-4.86155024935156]
								}, {
									"case":	8,
									"scores":	[-4.86155024935156]
								}, {
									"case":	9,
									"scores":	[-4.86155024935156]
								}, {
									"case":	10,
									"scores":	[-4.86155024935156]
								}, {
									"case":	11,
									"scores":	[-4.86155024935156]
								}, {
									"case":	12,
									"scores":	[-4.86155024935156]
								}, {
									"case":	13,
									"scores":	[-4.86155024935156]
								}, {
									"case":	14,
									"scores":	[-4.86155024935156]
								}, {
									"case":	15,
									"scores":	[-4.86155024935156]
								}, {
									"case":	16,
									"scores":	[-4.86155024935156]
								}, {
									"case":	17,
									"scores":	[-4.86155024935156]
								}, {
									"case":	18,
									"scores":	[-4.86155024935156]
								}, {
									"case":	19,
									"scores":	[-4.86155024935156]
								}, {
									"case":	20,
									"scores":	[-4.86155024935156]
								}, {
									"case":	21,
									"scores":	[-4.86155024935156]
								}, {
									"case":	22,
									"scores":	[-4.86155024935156]
								}, {
									"case":	23,
									"scores":	[-4.86155024935156]
								}, {
									"case":	24,
									"scores":	[-4.86155024935156]
								}, {
									"case":	25,
									"scores":	[-4.86155024935156]
								}, {
									"case":	26,
									"scores":	[-4.86155024935156]
								}, {
									"case":	27,
									"scores":	[-4.86155024935156]
								}, {
									"case":	28,
									"scores":	[-4.86155024935156]
								}, {
									"case":	29,
									"scores":	[-4.86155024935156]
								}, {
									"case":	30,
									"scores":	[-4.86155024935156]
								}, {
									"case":	31,
									"scores":	[-4.86155024935156]
								}, {
									"case":	32,
									"scores":	[-4.86155024935156]
								}, {
									"case":	33,
									"scores":	[-4.86155024935156]
								}, {
									"case":	34,
									"scores":	[-4.86155024935156]
								}, {
									"case":	35,
									"scores":	[-4.86155024935156]
								}, {
									"case":	36,
									"scores":	[-4.86155024935156]
								}, {
									"case":	37,
									"scores":	[-4.86155024935156]
								}, {
									"case":	38,
									"scores":	[-4.86155024935156]
								}, {
									"case":	39,
									"scores":	[-4.86155024935156]
								}, {
									"case":	40,
									"scores":	[-4.86155024935156]
								}, {
									"case":	41,
									"scores":	[-4.86155024935156]
								}, {
									"case":	42,
									"scores":	[-4.86155024935156]
								}, {
									"case":	43,
									"scores":	[-4.86155024935156]
								}, {
									"case":	44,
									"scores":	[-4.86155024935156]
								}, {
									"case":	45,
									"scores":	[-4.86155024935156]
								}, {
									"case":	46,
									"scores":	[-4.86155024935156]
								}, {
									"case":	47,
									"scores":	[-4.86155024935156]
								}, {
									"case":	48,
									"scores":	[-4.86155024935156]
								}, {
									"case":	49,
									"scores":	[-4.86155024935156]
								}, {
									"case":	50,
									"scores":	[-4.86155024935156]
								}, {
									"case":	51,
									"scores":	[-4.86155024935156]
								}, {
									"case":	52,
									"scores":	[-4.86155024935156]
								}, {
									"case":	53,
									"scores":	[-4.86155024935156]
								}, {
									"case":	54,
									"scores":	[-4.86155024935156]
								}, {
									"case":	55,
									"scores":	[-4.86155024935156]
								}, {
									"case":	56,
									"scores":	[-4.86155024935156]
								}, {
									"case":	57,
									"scores":	[-4.86155024935156]
								}, {
									"case":	58,
									"scores":	[-4.86155024935156]
								}, {
									"case":	59,
									"scores":	[-4.86155024935156]
								}, {
									"case":	60,
									"scores":	[-4.86155024935156]
								}, {
									"case":	61,
									"scores":	[-4.86155024935156]
								}, {
									"case":	62,
									"scores":	[-4.86155024935156]
								}, {
									"case":	63,
									"scores":	[-4.86155024935156]
								}, {
									"case":	64,
									"scores":	[-4.86155024935156]
								}, {
									"case":	65,
									"scores":	[-4.86155024935156]
								}, {
									"case":	66,
									"scores":	[-4.86155024935156]
								}, {
									"case":	67,
									"scores":	[-4.86155024935156]
								}, {
									"case":	68,
									"scores":	[-4.86155024935156]
								}, {
									"case":	69,
									"scores":	[-4.86155024935156]
								}, {
									"case":	70,
									"scores":	[-4.86155024935156]
								}, {
									"case":	71,
									"scores":	[-4.86155024935156]
								}, {
									"case":	72,
									"scores":	[-4.86155024935156]
								}, {
									"case":	73,
									"scores":	[-4.86155024935156]
								}, {
									"case":	74,
									"scores":	[-4.86155024935156]
								}, {
									"case":	75,
									"scores":	[-4.86155024935156]
								}, {
									"case":	76,
									"scores":	[-4.86155024935156]
								}, {
									"case":	77,
									"scores":	[-4.86155024935156]
								}, {
									"case":	78,
									"scores":	[-4.86155024935156]
								}, {
									"case":	79,
									"scores":	[-4.86155024935156]
								}, {
									"case":	80,
									"scores":	[-4.86155024935156]
								}, {
									"case":	81,
									"scores":	[-4.86155024935156]
								}, {
									"case":	82,
									"scores":	[-4.86155024935156]
								}, {
									"case":	83,
									"scores":	[-4.86155024935156]
								}, {
									"case":	84,
									"scores":	[-4.86155024935156]
								}, {
									"case":	85,
									"scores":	[-4.86155024935156]
								}, {
									"case":	86,
									"scores":	[-4.86155024935156]
								}, {
									"case":	87,
									"scores":	[-4.86155024935156]
								}, {
									"case":	88,
									"scores":	[-4.86155024935156]
								}, {
									"case":	89,
									"scores":	[-4.86155024935156]
								}, {
									"case":	90,
									"scores":	[-4.86155024935156]
								}, {
									"case":	91,
									"scores":	[-4.86155024935156]
								}, {
									"case":	92,
									"scores":	[-4.86155024935156]
								}, {
									"case":	93,
									"scores":	[-4.86155024935156]
								}, {
									"case":	94,
									"scores":	[-4.86155024935156]
								}, {
									"case":	95,
									"scores":	[-4.86155024935156]
								}, {
									"case":	96,
									"scores":	[-4.86155024935156]
								}, {
									"case":	97,
									"scores":	[-4.86155024935156]
								}, {
									"case":	98,
									"scores":	[-4.86155024935156]
								}, {
									"case":	99,
									"scores":	[-4.86155024935156]
								}, {
									"case":	100,
									"scores":	[-4.86155024935156]
								}, {
									"case":	101,
									"scores":	[-4.86155024935156]
								}, {
									"case":	102,
									"scores":	[-4.86155024935156]
								}, {
									"case":	103,
									"scores":	[-4.86155024935156]
								}, {
									"case":	104,
									"scores":	[-4.86155024935156]
								}, {
									"case":	105,
									"scores":	[-4.86155024935156]
								}, {
									"case":	106,
									"scores":	[-4.86155024935156]
								}, {
									"case":	107,
									"scores":	[-4.86155024935156]
								}, {
									"case":	108,
									"scores":	[-4.86155024935156]
								}, {
									"case":	109,
									"scores":	[-4.86155024935156]
								}, {
									"case":	110,
									"scores":	[-4.86155024935156]
								}, {
									"case":	111,
									"scores":	[-4.86155024935156]
								}, {
									"case":	112,
									"scores":	[-4.86155024935156]
								}, {
									"case":	113,
									"scores":	[-4.86155024935156]
								}, {
									"case":	114,
									"scores":	[-4.86155024935156]
								}, {
									"case":	115,
									"scores":	[-4.86155024935156]
								}, {
									"case":	116,
									"scores":	[-4.86155024935156]
								}, {
									"case":	117,
									"scores":	[-4.86155024935156]
								}, {
									"case":	118,
									"scores":	[-4.86155024935156]
								}, {
									"case":	119,
									"scores":	[-4.86155024935156]
								}, {
									"case":	120,
									"scores":	[-4.86155024935156]
								}, {
									"case":	121,
									"scores":	[-4.86155024935156]
								}, {
									"case":	122,
									"scores":	[-4.86155024935156]
								}, {
									"case":	123,
									"scores":	[-4.86155024935156]
								}, {
									"case":	124,
									"scores":	[-4.86155024935156]
								}, {
									"case":	125,
									"scores":	[-4.86155024935156]
								}, {
									"case":	126,
									"scores":	[-4.86155024935156]
								}, {
									"case":	127,
									"scores":	[-4.86155024935156]
								}, {
									"case":	128,
									"scores":	[-4.86155024935156]
								}, {
									"case":	129,
									"scores":	[-4.86155024935156]
								}, {
									"case":	130,
									"scores":	[-4.86155024935156]
								}, {
									"case":	131,
									"scores":	[-4.86155024935156]
								}, {
									"case":	132,
									"scores":	[-4.86155024935156]
								}, {
									"case":	133,
									"scores":	[-4.86155024935156]
								}, {
									"case":	134,
									"scores":	[-4.86155024935156]
								}, {
									"case":	135,
									"scores":	[-4.86155024935156]
								}, {
									"case":	136,
									"scores":	[-4.86155024935156]
								}, {
									"case":	137,
									"scores":	[-4.86155024935156]
								}, {
									"case":	138,
									"scores":	[-4.86155024935156]
								}, {
									"case":	139,
									"scores":	[-4.86155024935156]
								}, {
									"case":	140,
									"scores":	[-4.86155024935156]
								}, {
									"case":	141,
									"scores":	[-4.86155024935156]
								}, {
									"case":	142,
									"scores":	[-4.86155024935156]
								}, {
									"case":	143,
									"scores":	[-4.86155024935156]
								}, {
									"case":	144,
									"scores":	[-4.86155024935156]
								}, {
									"case":	145,
									"scores":	[-4.86155024935156]
								}, {
									"case":	146,
									"scores":	[-4.86155024935156]
								}, {
									"case":	147,
									"scores":	[-4.86155024935156]
								}, {
									"case":	148,
									"scores":	[-4.86155024935156]
								}, {
									"case":	149,
									"scores":	[-4.86155024935156]
								}, {
									"case":	150,
									"scores":	[-4.86155024935156]
								}, {
									"case":	151,
									"scores":	[-4.86155024935156]
								}, {
									"case":	152,
									"scores":	[-4.86155024935156]
								}, {
									"case":	153,
									"scores":	[-4.86155024935156]
								}, {
									"case":	154,
									"scores":	[-4.86155024935156]
								}, {
									"case":	155,
									"scores":	[-4.86155024935156]
								}, {
									"case":	156,
									"scores":	[-4.86155024935156]
								}, {
									"case":	157,
									"scores":	[-4.86155024935156]
								}, {
									"case":	158,
									"scores":	[-4.86155024935156]
								}, {
									"case":	159,
									"scores":	[-4.86155024935156]
								}, {
									"case":	160,
									"scores":	[-4.86155024935156]
								}, {
									"case":	161,
									"scores":	[-4.86155024935156]
								}, {
									"case":	162,
									"scores":	[-4.86155024935156]
								}, {
									"case":	163,
									"scores":	[-4.86155024935156]
								}, {
									"case":	164,
									"scores":	[-4.86155024935156]
								}, {
									"case":	165,
									"scores":	[-4.86155024935156]
								}, {
									"case":	166,
									"scores":	[-4.86155024935156]
								}, {
									"case":	167,
									"scores":	[-4.86155024935156]
								}, {
									"case":	168,
									"scores":	[-4.86155024935156]
								}, {
									"case":	169,
									"scores":	[-4.86155024935156]
								}, {
									"case":	170,
									"scores":	[-4.86155024935156]
								}, {
									"case":	171,
									"scores":	[-4.86155024935156]
								}, {
									"case":	172,
									"scores":	[-4.86155024935156]
								}, {
									"case":	173,
									"scores":	[-4.86155024935156]
								}, {
									"case":	174,
									"scores":	[-4.86155024935156]
								}, {
									"case":	175,
									"scores":	[-4.86155024935156]
								}, {
									"case":	176,
									"scores":	[-4.86155024935156]
								}, {
									"case":	177,
									"scores":	[-4.86155024935156]
								}, {
									"case":	178,
									"scores":	[-4.86155024935156]
								}, {
									"case":	179,
									"scores":	[-4.86155024935156]
								}, {
									"case":	180,
									"scores":	[-4.86155024935156]
								}, {
									"case":	181,
									"scores":	[-4.86155024935156]
								}, {
									"case":	182,
									"scores":	[-4.86155024935156]
								}, {
									"case":	183,
									"scores":	[-4.86155024935156]
								}, {
									"case":	184,
									"scores":	[-4.86155024935156]
								}, {
									"case":	185,
									"scores":	[-4.86155024935156]
								}, {
									"case":	186,
									"scores":	[-4.86155024935156]
								}, {
									"case":	187,
									"scores":	[-4.86155024935156]
								}, {
									"case":	188,
									"scores":	[-4.86155024935156]
								}, {
									"case":	189,
									"scores":	[-9.33740421935156, -9.33740421935156, -7.5325727393515614, -7.5325727393515614, -8.05942344535156, -9.06398253315156, -8.73414716235156, -8.77124756235156, -9.02688213315156, -8.52325804535156, -8.81794361935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.54829333635156, -9.54829333635156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -8.83646921935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.54829333635156, -9.54829333635156, -9.54829333635156, -9.54829333635156, -9.54829333635156, -9.54829333635156, -9.54829333635156, -9.33740421935156, -9.54829333635156, -9.54829333635156, -9.54829333635156, -9.54829333635156, -9.54829333635156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.54829333635156, -9.54829333635156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.54829333635156, -9.54829333635156, -9.33740421935156, -9.54829333635156, -9.54829333635156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.04735833635156, -9.33740421935156, -9.54829333635156, -9.33740421935156, -9.54829333635156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.54829333635156, -9.54829333635156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -8.83646921935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.54829333635156, -9.54829333635156, -9.54829333635156, -9.54829333635156, -9.54829333635156, -9.54829333635156, -9.54829333635156, -9.33740421935156, -9.54829333635156, -9.54829333635156, -9.54829333635156, -9.54829333635156, -9.54829333635156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.54829333635156, -9.54829333635156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.54829333635156, -9.54829333635156, -9.33740421935156, -9.54829333635156, -9.54829333635156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.33740421935156, -9.04735833635156, -9.33740421935156, -9.54829333635156, -9.33740421935156, -9.54829333635156, -9.33740421935156, -9.33740421935156]
								}]
						}, {
							"switch":	56,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	392,
							"begin_column":	4,
							"end_line":	394,
							"end_column":	4,
							"patch_codes":	["if (__is_neg(\"\", \"L392\", 145, &(core_globals.display_errors), sizeof (core_globals.display_errors), &(core_globals.display_errors), sizeof (core_globals.display_errors), &(json_globals.error_code), sizeof (json_globals.error_code), &(json_globals.error_code), sizeof (json_globals.error_code), &(len), sizeof (len), &(buf), sizeof (buf), &(utf16), sizeof (utf16), &(s), sizeof (s), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options), &(json_globals.encoder_depth), sizeof (json_globals.encoder_depth), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log), &(json_globals.encoder_depth), sizeof (json_globals.encoder_depth))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\");\n}\n", "if ((!(core_globals.display_errors)) || __is_neg(\"\", \"L392\", 145, &(core_globals.display_errors), sizeof (core_globals.display_errors), &(core_globals.display_errors), sizeof (core_globals.display_errors), &(json_globals.error_code), sizeof (json_globals.error_code), &(json_globals.error_code), sizeof (json_globals.error_code), &(len), sizeof (len), &(buf), sizeof (buf), &(utf16), sizeof (utf16), &(s), sizeof (s), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options), &(json_globals.encoder_depth), sizeof (json_globals.encoder_depth), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log), &(json_globals.encoder_depth), sizeof (json_globals.encoder_depth))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\");\n}\n", "if ((!(core_globals.display_errors)) && !__is_neg(\"\", \"L392\", 145, &(core_globals.display_errors), sizeof (core_globals.display_errors), &(core_globals.display_errors), sizeof (core_globals.display_errors), &(json_globals.error_code), sizeof (json_globals.error_code), &(json_globals.error_code), sizeof (json_globals.error_code), &(len), sizeof (len), &(buf), sizeof (buf), &(utf16), sizeof (utf16), &(s), sizeof (s), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options), &(json_globals.encoder_depth), sizeof (json_globals.encoder_depth), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log), &(json_globals.encoder_depth), sizeof (json_globals.encoder_depth))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\");\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.1230943754281455, -5.1230943754281455, -4.242417515428146, -4.242417515428146, -4.5705893354281457, -5.9642861654281454, -5.0675095654281463, -5.3618603654281465, -5.6699353654281461, -4.5982495654281461, -5.2063980654281456, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.5923543754281457, -5.5923543754281457, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -4.8010833454281459, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.5923543754281457, -5.5923543754281457, -5.5923543754281457, -5.5923543754281457, -5.5923543754281457, -5.5923543754281457, -5.5923543754281457, -5.1230943754281455, -5.5923543754281457, -5.5923543754281457, -5.5923543754281457, -5.5923543754281457, -5.5923543754281457, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.5923543754281457, -5.5923543754281457, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.5923543754281457, -5.5923543754281457, -5.1230943754281455, -5.5923543754281457, -5.5923543754281457, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.2703433454281461, -5.1230943754281455, -5.5923543754281457, -5.1230943754281455, -5.5923543754281457, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.5923543754281457, -5.5923543754281457, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -4.8010833454281459, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.5923543754281457, -5.5923543754281457, -5.5923543754281457, -5.5923543754281457, -5.5923543754281457, -5.5923543754281457, -5.5923543754281457, -5.1230943754281455, -5.5923543754281457, -5.5923543754281457, -5.5923543754281457, -5.5923543754281457, -5.5923543754281457, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.5923543754281457, -5.5923543754281457, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.5923543754281457, -5.5923543754281457, -5.1230943754281455, -5.5923543754281457, -5.5923543754281457, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.1230943754281455, -5.2703433454281461, -5.1230943754281455, -5.5923543754281457, -5.1230943754281455, -5.5923543754281457, -5.1230943754281455, -5.1230943754281455]
								}, {
									"case":	2,
									"scores":	[-5.1507520424281461, -5.1507520424281461, -4.2700751824281458, -4.2700751824281458, -4.5982470024281463, -5.991943832428146, -5.0951672324281461, -5.3895180324281462, -5.6975930324281459, -4.6259072324281458, -5.2340557324281463, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -4.8287410124281456, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.2980010124281458, -5.1507520424281461, -5.6200120424281454, -5.1507520424281461, -5.6200120424281454, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -4.8287410124281456, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.2980010124281458, -5.1507520424281461, -5.6200120424281454, -5.1507520424281461, -5.6200120424281454, -5.1507520424281461, -5.1507520424281461]
								}, {
									"case":	3,
									"scores":	[-5.1507520424281461, -5.1507520424281461, -4.2700751824281458, -4.2700751824281458, -4.5982470024281463, -5.991943832428146, -5.0951672324281461, -5.3895180324281462, -5.6975930324281459, -4.6259072324281458, -5.2340557324281463, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -4.8287410124281456, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.2980010124281458, -5.1507520424281461, -5.6200120424281454, -5.1507520424281461, -5.6200120424281454, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -4.8287410124281456, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.6200120424281454, -5.6200120424281454, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.1507520424281461, -5.2980010124281458, -5.1507520424281461, -5.6200120424281454, -5.1507520424281461, -5.6200120424281454, -5.1507520424281461, -5.1507520424281461]
								}]
						}, {
							"switch":	57,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	392,
							"begin_column":	4,
							"end_line":	394,
							"end_column":	4,
							"patch_codes":	["if (!__is_neg(\"\", \"L392\", 145, &(core_globals.display_errors), sizeof (core_globals.display_errors), &(core_globals.display_errors), sizeof (core_globals.display_errors), &(json_globals.error_code), sizeof (json_globals.error_code), &(json_globals.error_code), sizeof (json_globals.error_code), &(len), sizeof (len), &(buf), sizeof (buf), &(utf16), sizeof (utf16), &(s), sizeof (s), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options), &(json_globals.encoder_depth), sizeof (json_globals.encoder_depth), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log), &(json_globals.encoder_depth), sizeof (json_globals.encoder_depth)))\n    if (!(core_globals.display_errors)) {\n        php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\");\n    }\n", "if (!__is_neg(\"\", \"L392\", 145, &(core_globals.display_errors), sizeof (core_globals.display_errors), &(core_globals.display_errors), sizeof (core_globals.display_errors), &(json_globals.error_code), sizeof (json_globals.error_code), &(json_globals.error_code), sizeof (json_globals.error_code), &(len), sizeof (len), &(buf), sizeof (buf), &(utf16), sizeof (utf16), &(s), sizeof (s), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options), &(json_globals.encoder_depth), sizeof (json_globals.encoder_depth), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log), &(json_globals.encoder_depth), sizeof (json_globals.encoder_depth)) && (!(core_globals.display_errors))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\");\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.75147871935156, -7.75147871935156, -6.87080185935156, -6.87080185935156, -7.19897367935156, -8.59267050935156, -7.69589390935156, -7.99024470935156, -8.29831970935156, -7.22663390935156, -7.83478240935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -8.22073871935156, -8.22073871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.4294676893515614, -7.75147871935156, -7.75147871935156, -7.75147871935156, -8.22073871935156, -8.22073871935156, -8.22073871935156, -8.22073871935156, -8.22073871935156, -8.22073871935156, -8.22073871935156, -7.75147871935156, -8.22073871935156, -8.22073871935156, -8.22073871935156, -8.22073871935156, -8.22073871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -8.22073871935156, -8.22073871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -8.22073871935156, -8.22073871935156, -7.75147871935156, -8.22073871935156, -8.22073871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.8987276893515617, -7.75147871935156, -8.22073871935156, -7.75147871935156, -8.22073871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -8.22073871935156, -8.22073871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.4294676893515614, -7.75147871935156, -7.75147871935156, -7.75147871935156, -8.22073871935156, -8.22073871935156, -8.22073871935156, -8.22073871935156, -8.22073871935156, -8.22073871935156, -8.22073871935156, -7.75147871935156, -8.22073871935156, -8.22073871935156, -8.22073871935156, -8.22073871935156, -8.22073871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -8.22073871935156, -8.22073871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -8.22073871935156, -8.22073871935156, -7.75147871935156, -8.22073871935156, -8.22073871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.75147871935156, -7.8987276893515617, -7.75147871935156, -8.22073871935156, -7.75147871935156, -8.22073871935156, -7.75147871935156, -7.75147871935156]
								}, {
									"case":	2,
									"scores":	[-7.00905497635156, -7.00905497635156, -6.12837811635156, -6.12837811635156, -6.45654993635156, -7.85024676635156, -6.95347016635156, -7.2478209663515614, -7.55589596635156, -6.48421016635156, -7.0923586663515614, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.47831497635156, -7.47831497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -6.68704394635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.47831497635156, -7.47831497635156, -7.47831497635156, -7.47831497635156, -7.47831497635156, -7.47831497635156, -7.47831497635156, -7.00905497635156, -7.47831497635156, -7.47831497635156, -7.47831497635156, -7.47831497635156, -7.47831497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.47831497635156, -7.47831497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.47831497635156, -7.47831497635156, -7.00905497635156, -7.47831497635156, -7.47831497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.15630394635156, -7.00905497635156, -7.47831497635156, -7.00905497635156, -7.47831497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.47831497635156, -7.47831497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -6.68704394635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.47831497635156, -7.47831497635156, -7.47831497635156, -7.47831497635156, -7.47831497635156, -7.47831497635156, -7.47831497635156, -7.00905497635156, -7.47831497635156, -7.47831497635156, -7.47831497635156, -7.47831497635156, -7.47831497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.47831497635156, -7.47831497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.47831497635156, -7.47831497635156, -7.00905497635156, -7.47831497635156, -7.47831497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.00905497635156, -7.15630394635156, -7.00905497635156, -7.47831497635156, -7.00905497635156, -7.47831497635156, -7.00905497635156, -7.00905497635156]
								}]
						}]
				}, {
					"line":	394,
					"switches":	[{
							"switch":	58,
							"types":	[[], [], [], [], [188], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97], [], [], [], [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], [98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], [], [], [], [], [], []],
							"begin_line":	395,
							"begin_column":	2,
							"end_line":	395,
							"end_column":	2,
							"patch_codes":	["memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&json_globals.encoder_depth, 0, sizeof (*(&json_globals.encoder_depth)))", "memset(&json_globals.error_code, 0, sizeof (*(&json_globals.error_code)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (12)", "(json_globals.error_code) = (127)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (15)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (6)", "(json_globals.error_code) = (64)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (8)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (len)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (pos)", "(s)++", "_efree(((s)))", "_efree(((utf16)))", "len = (0)", "len = (1)", "len = (10)", "len = (12)", "len = (127)", "len = (128)", "len = (15)", "len = (16)", "len = (2)", "len = (3)", "len = (32)", "len = (4)", "len = (5)", "len = (6)", "len = (64)", "len = (78)", "len = (8)", "len = (len)", "len = (options)", "len = (pos)", "len = utf8_to_utf16((utf16), s, len)", "len = utf8_to_utf16(utf16, (s), len)", "us = (0)", "us = (1)", "us = (10)", "us = (12)", "us = (127)", "us = (128)", "us = (15)", "us = (16)", "us = (2)", "us = (3)", "us = (32)", "us = (4)", "us = (5)", "us = (6)", "us = (64)", "us = (78)", "us = (8)", "us = (us)", "us = (utf16)[pos++]", "utf16 = (utf16)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "_efree((utf16))", "exit(1)", "len = utf8_to_utf16(utf16, s, len)", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "us = (((us & 15) << 12) | (((us >> 4) & 15) << 8) | (((us >> 8) & 15) << 4) | ((us >> 12) & 15))", "us = utf16[pos++]", "utf16 = (unsigned short *)_safe_emalloc((len), (sizeof(unsigned short)), (0))", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L395\", 7, &(buf), sizeof (buf), &(len), sizeof (len), &(utf16), sizeof (utf16), &(pos), sizeof (pos), &(s), sizeof (s), &(us), sizeof (us), &(options), sizeof (options)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	2,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	3,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	4,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	5,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	6,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	7,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	8,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	9,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	10,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	11,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	12,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	13,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	14,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	15,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	16,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	17,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	18,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	19,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	20,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	21,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	22,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	23,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	24,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	25,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	26,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	27,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	28,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	29,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	30,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	31,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	32,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	33,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	34,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	35,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	36,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	37,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	38,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	39,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	40,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	41,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	42,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	43,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	44,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	45,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	46,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	47,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	48,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	49,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	50,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	51,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	52,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	53,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	54,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	55,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	56,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	57,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	58,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	59,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	60,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	61,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	62,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	63,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	64,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	65,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	66,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	67,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	68,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	69,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	70,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	71,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	72,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	73,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	74,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	75,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	76,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	77,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	78,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	79,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	80,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	81,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	82,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	83,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	84,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	85,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	86,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	87,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	88,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	89,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	90,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	91,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	92,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	93,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	94,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	95,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	96,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	97,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	98,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	99,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	100,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	101,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	102,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	103,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	104,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	105,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	106,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	107,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	108,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	109,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	110,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	111,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	112,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	113,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	114,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	115,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	116,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	117,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	118,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	119,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	120,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	121,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	122,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	123,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	124,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	125,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	126,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	127,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	128,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	129,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	130,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	131,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	132,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	133,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	134,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	135,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	136,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	137,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	138,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	139,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	140,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	141,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	142,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	143,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	144,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	145,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	146,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	147,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	148,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	149,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	150,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	151,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	152,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	153,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	154,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	155,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	156,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	157,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	158,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	159,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	160,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	161,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	162,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	163,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	164,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	165,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	166,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	167,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	168,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	169,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	170,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	171,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	172,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	173,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	174,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	175,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	176,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	177,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	178,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	179,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	180,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	181,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	182,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	183,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	184,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	185,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	186,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	187,
									"scores":	[-5.1645908591143526]
								}, {
									"case":	188,
									"scores":	[-9.84933784291435, -8.84477875511435, -9.51950247211435, -9.81223744291435, -9.55660287211435, -9.3086133551143533, -9.60329892911435]
								}]
						}, {
							"switch":	59,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	395,
							"begin_column":	4,
							"end_line":	395,
							"end_column":	36,
							"patch_codes":	["if (!__is_neg(\"\", \"L395\", 7, &(buf), sizeof (buf), &(len), sizeof (len), &(utf16), sizeof (utf16), &(pos), sizeof (pos), &(s), sizeof (s), &(us), sizeof (us), &(options), sizeof (options)))\n    do {\n        register size_t __nl;\n        smart_str *__dest = (smart_str *)((buf));\n        do {\n            if (!(__dest)->c) {\n                (__dest)->len = 0;\n                __nl = (((4)));\n                (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n            } else {\n                __nl = (__dest)->len + (((4)));\n                if (__nl >= (__dest)->a) {\n                    (__dest)->a = __nl + 128;\n                    (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                }\n            }\n        } while (0);\n        memcpy(__dest->c + __dest->len, ((\"null\")), ((4)));\n        __dest->len = __nl;\n    } while (0);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.126697429114353, -7.7330005991143516, -8.22992082911435, -8.8323466291143529, -8.52427162911435, -7.760660829114352, -8.36880932911435]
								}]
						}]
				}, {
					"line":	389,
					"switches":	[{
							"switch":	51,
							"types":	[[], [], [], [], [91], [], [], [], [], [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], [], [], [], [], [], []],
							"begin_line":	390,
							"begin_column":	1,
							"end_line":	390,
							"end_column":	1,
							"patch_codes":	["(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (12)", "(json_globals.error_code) = (127)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (15)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (6)", "(json_globals.error_code) = (64)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (8)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (len)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (pos)", "(s)++", "_efree(((s)))", "_efree(((utf16)))", "len = (0)", "len = (1)", "len = (10)", "len = (12)", "len = (127)", "len = (128)", "len = (15)", "len = (16)", "len = (2)", "len = (3)", "len = (32)", "len = (4)", "len = (5)", "len = (6)", "len = (64)", "len = (78)", "len = (8)", "len = (len)", "len = (options)", "len = (pos)", "len = utf8_to_utf16((utf16), s, len)", "len = utf8_to_utf16(utf16, (s), len)", "us = (0)", "us = (1)", "us = (10)", "us = (12)", "us = (127)", "us = (128)", "us = (15)", "us = (16)", "us = (2)", "us = (3)", "us = (32)", "us = (4)", "us = (5)", "us = (6)", "us = (64)", "us = (78)", "us = (8)", "us = (us)", "us = (utf16)[pos++]", "utf16 = (utf16)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "_efree((utf16))", "exit(1)", "len = utf8_to_utf16(utf16, s, len)", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "us = (((us & 15) << 12) | (((us >> 4) & 15) << 8) | (((us >> 8) & 15) << 4) | ((us >> 12) & 15))", "us = utf16[pos++]", "utf16 = (unsigned short *)_safe_emalloc((len), (sizeof(unsigned short)), (0))", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L390\", 9, &(len), sizeof (len), &(json_globals.error_code), sizeof (json_globals.error_code), &(utf16), sizeof (utf16), &(buf), sizeof (buf), &(s), sizeof (s), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options), &(json_globals.encoder_depth), sizeof (json_globals.encoder_depth)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.9019556639866]
								}, {
									"case":	2,
									"scores":	[-4.9019556639866]
								}, {
									"case":	3,
									"scores":	[-4.9019556639866]
								}, {
									"case":	4,
									"scores":	[-4.9019556639866]
								}, {
									"case":	5,
									"scores":	[-4.9019556639866]
								}, {
									"case":	6,
									"scores":	[-4.9019556639866]
								}, {
									"case":	7,
									"scores":	[-4.9019556639866]
								}, {
									"case":	8,
									"scores":	[-4.9019556639866]
								}, {
									"case":	9,
									"scores":	[-4.9019556639866]
								}, {
									"case":	10,
									"scores":	[-4.9019556639866]
								}, {
									"case":	11,
									"scores":	[-4.9019556639866]
								}, {
									"case":	12,
									"scores":	[-4.9019556639866]
								}, {
									"case":	13,
									"scores":	[-4.9019556639866]
								}, {
									"case":	14,
									"scores":	[-4.9019556639866]
								}, {
									"case":	15,
									"scores":	[-4.9019556639866]
								}, {
									"case":	16,
									"scores":	[-4.9019556639866]
								}, {
									"case":	17,
									"scores":	[-4.9019556639866]
								}, {
									"case":	18,
									"scores":	[-4.9019556639866]
								}, {
									"case":	19,
									"scores":	[-4.9019556639866]
								}, {
									"case":	20,
									"scores":	[-4.9019556639866]
								}, {
									"case":	21,
									"scores":	[-4.9019556639866]
								}, {
									"case":	22,
									"scores":	[-4.9019556639866]
								}, {
									"case":	23,
									"scores":	[-4.9019556639866]
								}, {
									"case":	24,
									"scores":	[-4.9019556639866]
								}, {
									"case":	25,
									"scores":	[-4.9019556639866]
								}, {
									"case":	26,
									"scores":	[-4.9019556639866]
								}, {
									"case":	27,
									"scores":	[-4.9019556639866]
								}, {
									"case":	28,
									"scores":	[-4.9019556639866]
								}, {
									"case":	29,
									"scores":	[-4.9019556639866]
								}, {
									"case":	30,
									"scores":	[-4.9019556639866]
								}, {
									"case":	31,
									"scores":	[-4.9019556639866]
								}, {
									"case":	32,
									"scores":	[-4.9019556639866]
								}, {
									"case":	33,
									"scores":	[-4.9019556639866]
								}, {
									"case":	34,
									"scores":	[-4.9019556639866]
								}, {
									"case":	35,
									"scores":	[-4.9019556639866]
								}, {
									"case":	36,
									"scores":	[-4.9019556639866]
								}, {
									"case":	37,
									"scores":	[-4.9019556639866]
								}, {
									"case":	38,
									"scores":	[-4.9019556639866]
								}, {
									"case":	39,
									"scores":	[-4.9019556639866]
								}, {
									"case":	40,
									"scores":	[-4.9019556639866]
								}, {
									"case":	41,
									"scores":	[-4.9019556639866]
								}, {
									"case":	42,
									"scores":	[-4.9019556639866]
								}, {
									"case":	43,
									"scores":	[-4.9019556639866]
								}, {
									"case":	44,
									"scores":	[-4.9019556639866]
								}, {
									"case":	45,
									"scores":	[-4.9019556639866]
								}, {
									"case":	46,
									"scores":	[-4.9019556639866]
								}, {
									"case":	47,
									"scores":	[-4.9019556639866]
								}, {
									"case":	48,
									"scores":	[-4.9019556639866]
								}, {
									"case":	49,
									"scores":	[-4.9019556639866]
								}, {
									"case":	50,
									"scores":	[-4.9019556639866]
								}, {
									"case":	51,
									"scores":	[-4.9019556639866]
								}, {
									"case":	52,
									"scores":	[-4.9019556639866]
								}, {
									"case":	53,
									"scores":	[-4.9019556639866]
								}, {
									"case":	54,
									"scores":	[-4.9019556639866]
								}, {
									"case":	55,
									"scores":	[-4.9019556639866]
								}, {
									"case":	56,
									"scores":	[-4.9019556639866]
								}, {
									"case":	57,
									"scores":	[-4.9019556639866]
								}, {
									"case":	58,
									"scores":	[-4.9019556639866]
								}, {
									"case":	59,
									"scores":	[-4.9019556639866]
								}, {
									"case":	60,
									"scores":	[-4.9019556639866]
								}, {
									"case":	61,
									"scores":	[-4.9019556639866]
								}, {
									"case":	62,
									"scores":	[-4.9019556639866]
								}, {
									"case":	63,
									"scores":	[-4.9019556639866]
								}, {
									"case":	64,
									"scores":	[-4.9019556639866]
								}, {
									"case":	65,
									"scores":	[-4.9019556639866]
								}, {
									"case":	66,
									"scores":	[-4.9019556639866]
								}, {
									"case":	67,
									"scores":	[-4.9019556639866]
								}, {
									"case":	68,
									"scores":	[-4.9019556639866]
								}, {
									"case":	69,
									"scores":	[-4.9019556639866]
								}, {
									"case":	70,
									"scores":	[-4.9019556639866]
								}, {
									"case":	71,
									"scores":	[-4.9019556639866]
								}, {
									"case":	72,
									"scores":	[-4.9019556639866]
								}, {
									"case":	73,
									"scores":	[-4.9019556639866]
								}, {
									"case":	74,
									"scores":	[-4.9019556639866]
								}, {
									"case":	75,
									"scores":	[-4.9019556639866]
								}, {
									"case":	76,
									"scores":	[-4.9019556639866]
								}, {
									"case":	77,
									"scores":	[-4.9019556639866]
								}, {
									"case":	78,
									"scores":	[-4.9019556639866]
								}, {
									"case":	79,
									"scores":	[-4.9019556639866]
								}, {
									"case":	80,
									"scores":	[-4.9019556639866]
								}, {
									"case":	81,
									"scores":	[-4.9019556639866]
								}, {
									"case":	82,
									"scores":	[-4.9019556639866]
								}, {
									"case":	83,
									"scores":	[-4.9019556639866]
								}, {
									"case":	84,
									"scores":	[-4.9019556639866]
								}, {
									"case":	85,
									"scores":	[-4.9019556639866]
								}, {
									"case":	86,
									"scores":	[-4.9019556639866]
								}, {
									"case":	87,
									"scores":	[-4.9019556639866]
								}, {
									"case":	88,
									"scores":	[-4.9019556639866]
								}, {
									"case":	89,
									"scores":	[-4.9019556639866]
								}, {
									"case":	90,
									"scores":	[-4.9019556639866]
								}, {
									"case":	91,
									"scores":	[-8.0217552069866, -8.6611748749866, -8.9680586569866, -9.2777799477866, -8.9850449769866, -9.2406795477866, -8.7370554599866, -9.0317410339866, -9.5512016339866]
								}]
						}, {
							"switch":	52,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	390,
							"begin_column":	3,
							"end_line":	398,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L390\", 9, &(len), sizeof (len), &(json_globals.error_code), sizeof (json_globals.error_code), &(utf16), sizeof (utf16), &(buf), sizeof (buf), &(s), sizeof (s), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options), &(json_globals.encoder_depth), sizeof (json_globals.encoder_depth))) {\n    (json_globals.error_code) = PHP_JSON_ERROR_UTF8;\n    if (!(core_globals.display_errors)) {\n        php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\");\n    }\n    do {\n        register size_t __nl;\n        smart_str *__dest = (smart_str *)((buf));\n        do {\n            if (!(__dest)->c) {\n                (__dest)->len = 0;\n                __nl = (((4)));\n                (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n            } else {\n                __nl = (__dest)->len + (((4)));\n                if (__nl >= (__dest)->a) {\n                    (__dest)->a = __nl + 128;\n                    (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                }\n            }\n        } while (0);\n        memcpy(__dest->c + __dest->len, ((\"null\")), ((4)));\n        __dest->len = __nl;\n    } while (0);\n} else {\n    do {\n        register size_t __nl;\n        smart_str *__dest = (smart_str *)((buf));\n        do {\n            if (!(__dest)->c) {\n                (__dest)->len = 0;\n                __nl = (((2)));\n                (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n            } else {\n                __nl = (__dest)->len + (((2)));\n                if (__nl >= (__dest)->a) {\n                    (__dest)->a = __nl + 128;\n                    (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                }\n            }\n        } while (0);\n        memcpy(__dest->c + __dest->len, ((\"\\\"\\\"\")), ((2)));\n        __dest->len = __nl;\n    } while (0);\n}\n", "if ((len < 0) || __is_neg(\"\", \"L390\", 9, &(len), sizeof (len), &(json_globals.error_code), sizeof (json_globals.error_code), &(utf16), sizeof (utf16), &(buf), sizeof (buf), &(s), sizeof (s), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options), &(json_globals.encoder_depth), sizeof (json_globals.encoder_depth))) {\n    (json_globals.error_code) = PHP_JSON_ERROR_UTF8;\n    if (!(core_globals.display_errors)) {\n        php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\");\n    }\n    do {\n        register size_t __nl;\n        smart_str *__dest = (smart_str *)((buf));\n        do {\n            if (!(__dest)->c) {\n                (__dest)->len = 0;\n                __nl = (((4)));\n                (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n            } else {\n                __nl = (__dest)->len + (((4)));\n                if (__nl >= (__dest)->a) {\n                    (__dest)->a = __nl + 128;\n                    (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                }\n            }\n        } while (0);\n        memcpy(__dest->c + __dest->len, ((\"null\")), ((4)));\n        __dest->len = __nl;\n    } while (0);\n} else {\n    do {\n        register size_t __nl;\n        smart_str *__dest = (smart_str *)((buf));\n        do {\n            if (!(__dest)->c) {\n                (__dest)->len = 0;\n                __nl = (((2)));\n                (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n            } else {\n                __nl = (__dest)->len + (((2)));\n                if (__nl >= (__dest)->a) {\n                    (__dest)->a = __nl + 128;\n                    (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                }\n            }\n        } while (0);\n        memcpy(__dest->c + __dest->len, ((\"\\\"\\\"\")), ((2)));\n        __dest->len = __nl;\n    } while (0);\n}\n", "if ((len < 0) && !__is_neg(\"\", \"L390\", 9, &(len), sizeof (len), &(json_globals.error_code), sizeof (json_globals.error_code), &(utf16), sizeof (utf16), &(buf), sizeof (buf), &(s), sizeof (s), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options), &(json_globals.encoder_depth), sizeof (json_globals.encoder_depth))) {\n    (json_globals.error_code) = PHP_JSON_ERROR_UTF8;\n    if (!(core_globals.display_errors)) {\n        php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\");\n    }\n    do {\n        register size_t __nl;\n        smart_str *__dest = (smart_str *)((buf));\n        do {\n            if (!(__dest)->c) {\n                (__dest)->len = 0;\n                __nl = (((4)));\n                (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n            } else {\n                __nl = (__dest)->len + (((4)));\n                if (__nl >= (__dest)->a) {\n                    (__dest)->a = __nl + 128;\n                    (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                }\n            }\n        } while (0);\n        memcpy(__dest->c + __dest->len, ((\"null\")), ((4)));\n        __dest->len = __nl;\n    } while (0);\n} else {\n    do {\n        register size_t __nl;\n        smart_str *__dest = (smart_str *)((buf));\n        do {\n            if (!(__dest)->c) {\n                (__dest)->len = 0;\n                __nl = (((2)));\n                (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n            } else {\n                __nl = (__dest)->len + (((2)));\n                if (__nl >= (__dest)->a) {\n                    (__dest)->a = __nl + 128;\n                    (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                }\n            }\n        } while (0);\n        memcpy(__dest->c + __dest->len, ((\"\\\"\\\"\")), ((2)));\n        __dest->len = __nl;\n    } while (0);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.3916094561281458, -3.4643580171281458, -3.6308135321281467, -4.4386072861281463, -3.8361814861281465, -4.1442564861281461, -3.0725706861281461, -3.6807191861281461, -3.5974154961281464]
								}, {
									"case":	2,
									"scores":	[-3.3635000444281458, -4.4362486054281458, -4.6027041204281458, -5.4104978744281453, -4.8080720744281455, -5.1161470744281452, -4.0444612744281461, -4.6526097744281456, -4.5693060844281455]
								}, {
									"case":	3,
									"scores":	[-3.3635000444281458, -4.4362486054281458, -4.6027041204281458, -5.4104978744281453, -4.8080720744281455, -5.1161470744281452, -4.0444612744281461, -4.6526097744281456, -4.5693060844281455]
								}]
						}, {
							"switch":	60,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	390,
							"begin_column":	3,
							"end_line":	398,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L390\", 9, &(len), sizeof (len), &(json_globals.error_code), sizeof (json_globals.error_code), &(utf16), sizeof (utf16), &(buf), sizeof (buf), &(s), sizeof (s), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options), &(json_globals.encoder_depth), sizeof (json_globals.encoder_depth)))\n    if (len < 0) {\n        (json_globals.error_code) = PHP_JSON_ERROR_UTF8;\n        if (!(core_globals.display_errors)) {\n            php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\");\n        }\n        do {\n            register size_t __nl;\n            smart_str *__dest = (smart_str *)((buf));\n            do {\n                if (!(__dest)->c) {\n                    (__dest)->len = 0;\n                    __nl = (((4)));\n                    (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                    (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                } else {\n                    __nl = (__dest)->len + (((4)));\n                    if (__nl >= (__dest)->a) {\n                        (__dest)->a = __nl + 128;\n                        (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            memcpy(__dest->c + __dest->len, ((\"null\")), ((4)));\n            __dest->len = __nl;\n        } while (0);\n    } else {\n        do {\n            register size_t __nl;\n            smart_str *__dest = (smart_str *)((buf));\n            do {\n                if (!(__dest)->c) {\n                    (__dest)->len = 0;\n                    __nl = (((2)));\n                    (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                    (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                } else {\n                    __nl = (__dest)->len + (((2)));\n                    if (__nl >= (__dest)->a) {\n                        (__dest)->a = __nl + 128;\n                        (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            memcpy(__dest->c + __dest->len, ((\"\\\"\\\"\")), ((2)));\n            __dest->len = __nl;\n        } while (0);\n    }\n", "if (!__is_neg(\"\", \"L390\", 9, &(len), sizeof (len), &(json_globals.error_code), sizeof (json_globals.error_code), &(utf16), sizeof (utf16), &(buf), sizeof (buf), &(s), sizeof (s), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options), &(json_globals.encoder_depth), sizeof (json_globals.encoder_depth)) && (len < 0)) {\n    (json_globals.error_code) = PHP_JSON_ERROR_UTF8;\n    if (!(core_globals.display_errors)) {\n        php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\");\n    }\n    do {\n        register size_t __nl;\n        smart_str *__dest = (smart_str *)((buf));\n        do {\n            if (!(__dest)->c) {\n                (__dest)->len = 0;\n                __nl = (((4)));\n                (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n            } else {\n                __nl = (__dest)->len + (((4)));\n                if (__nl >= (__dest)->a) {\n                    (__dest)->a = __nl + 128;\n                    (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                }\n            }\n        } while (0);\n        memcpy(__dest->c + __dest->len, ((\"null\")), ((4)));\n        __dest->len = __nl;\n    } while (0);\n} else {\n    do {\n        register size_t __nl;\n        smart_str *__dest = (smart_str *)((buf));\n        do {\n            if (!(__dest)->c) {\n                (__dest)->len = 0;\n                __nl = (((2)));\n                (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n            } else {\n                __nl = (__dest)->len + (((2)));\n                if (__nl >= (__dest)->a) {\n                    (__dest)->a = __nl + 128;\n                    (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                }\n            }\n        } while (0);\n        memcpy(__dest->c + __dest->len, ((\"\\\"\\\"\")), ((2)));\n        __dest->len = __nl;\n    } while (0);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.0217493039866, -7.0944978649866, -7.2609533799866, -8.0687471339866, -7.4663213339866, -7.7743963339866, -6.7027105339866, -7.3108590339866, -7.2275553439866]
								}, {
									"case":	2,
									"scores":	[-5.3433134029866, -6.4160619639866, -6.5825174789866, -7.3903112329866, -6.7878854329866, -7.0959604329866, -6.0242746329866, -6.6324231329866, -6.5491194429866]
								}]
						}]
				}, {
					"line":	398,
					"switches":	[{
							"switch":	61,
							"types":	[[], [], [], [], [91], [], [], [], [], [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], [], [], [], [], [], []],
							"begin_line":	399,
							"begin_column":	1,
							"end_line":	399,
							"end_column":	1,
							"patch_codes":	["(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (12)", "(json_globals.error_code) = (127)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (15)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (6)", "(json_globals.error_code) = (64)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (8)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (len)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (pos)", "(s)++", "_efree(((s)))", "_efree(((utf16)))", "len = (0)", "len = (1)", "len = (10)", "len = (12)", "len = (127)", "len = (128)", "len = (15)", "len = (16)", "len = (2)", "len = (3)", "len = (32)", "len = (4)", "len = (5)", "len = (6)", "len = (64)", "len = (78)", "len = (8)", "len = (len)", "len = (options)", "len = (pos)", "len = utf8_to_utf16((utf16), s, len)", "len = utf8_to_utf16(utf16, (s), len)", "us = (0)", "us = (1)", "us = (10)", "us = (12)", "us = (127)", "us = (128)", "us = (15)", "us = (16)", "us = (2)", "us = (3)", "us = (32)", "us = (4)", "us = (5)", "us = (6)", "us = (64)", "us = (78)", "us = (8)", "us = (us)", "us = (utf16)[pos++]", "utf16 = (utf16)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "_efree((utf16))", "exit(1)", "len = utf8_to_utf16(utf16, s, len)", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "us = (((us & 15) << 12) | (((us >> 4) & 15) << 8) | (((us >> 8) & 15) << 4) | ((us >> 12) & 15))", "us = utf16[pos++]", "utf16 = (unsigned short *)_safe_emalloc((len), (sizeof(unsigned short)), (0))", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L399\", 7, &(buf), sizeof (buf), &(len), sizeof (len), &(pos), sizeof (pos), &(us), sizeof (us), &(utf16), sizeof (utf16), &(options), sizeof (options), &(s), sizeof (s)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.659523176176366]
								}, {
									"case":	2,
									"scores":	[-4.659523176176366]
								}, {
									"case":	3,
									"scores":	[-4.659523176176366]
								}, {
									"case":	4,
									"scores":	[-4.659523176176366]
								}, {
									"case":	5,
									"scores":	[-4.659523176176366]
								}, {
									"case":	6,
									"scores":	[-4.659523176176366]
								}, {
									"case":	7,
									"scores":	[-4.659523176176366]
								}, {
									"case":	8,
									"scores":	[-4.659523176176366]
								}, {
									"case":	9,
									"scores":	[-4.659523176176366]
								}, {
									"case":	10,
									"scores":	[-4.659523176176366]
								}, {
									"case":	11,
									"scores":	[-4.659523176176366]
								}, {
									"case":	12,
									"scores":	[-4.659523176176366]
								}, {
									"case":	13,
									"scores":	[-4.659523176176366]
								}, {
									"case":	14,
									"scores":	[-4.659523176176366]
								}, {
									"case":	15,
									"scores":	[-4.659523176176366]
								}, {
									"case":	16,
									"scores":	[-4.659523176176366]
								}, {
									"case":	17,
									"scores":	[-4.659523176176366]
								}, {
									"case":	18,
									"scores":	[-4.659523176176366]
								}, {
									"case":	19,
									"scores":	[-4.659523176176366]
								}, {
									"case":	20,
									"scores":	[-4.659523176176366]
								}, {
									"case":	21,
									"scores":	[-4.659523176176366]
								}, {
									"case":	22,
									"scores":	[-4.659523176176366]
								}, {
									"case":	23,
									"scores":	[-4.659523176176366]
								}, {
									"case":	24,
									"scores":	[-4.659523176176366]
								}, {
									"case":	25,
									"scores":	[-4.659523176176366]
								}, {
									"case":	26,
									"scores":	[-4.659523176176366]
								}, {
									"case":	27,
									"scores":	[-4.659523176176366]
								}, {
									"case":	28,
									"scores":	[-4.659523176176366]
								}, {
									"case":	29,
									"scores":	[-4.659523176176366]
								}, {
									"case":	30,
									"scores":	[-4.659523176176366]
								}, {
									"case":	31,
									"scores":	[-4.659523176176366]
								}, {
									"case":	32,
									"scores":	[-4.659523176176366]
								}, {
									"case":	33,
									"scores":	[-4.659523176176366]
								}, {
									"case":	34,
									"scores":	[-4.659523176176366]
								}, {
									"case":	35,
									"scores":	[-4.659523176176366]
								}, {
									"case":	36,
									"scores":	[-4.659523176176366]
								}, {
									"case":	37,
									"scores":	[-4.659523176176366]
								}, {
									"case":	38,
									"scores":	[-4.659523176176366]
								}, {
									"case":	39,
									"scores":	[-4.659523176176366]
								}, {
									"case":	40,
									"scores":	[-4.659523176176366]
								}, {
									"case":	41,
									"scores":	[-4.659523176176366]
								}, {
									"case":	42,
									"scores":	[-4.659523176176366]
								}, {
									"case":	43,
									"scores":	[-4.659523176176366]
								}, {
									"case":	44,
									"scores":	[-4.659523176176366]
								}, {
									"case":	45,
									"scores":	[-4.659523176176366]
								}, {
									"case":	46,
									"scores":	[-4.659523176176366]
								}, {
									"case":	47,
									"scores":	[-4.659523176176366]
								}, {
									"case":	48,
									"scores":	[-4.659523176176366]
								}, {
									"case":	49,
									"scores":	[-4.659523176176366]
								}, {
									"case":	50,
									"scores":	[-4.659523176176366]
								}, {
									"case":	51,
									"scores":	[-4.659523176176366]
								}, {
									"case":	52,
									"scores":	[-4.659523176176366]
								}, {
									"case":	53,
									"scores":	[-4.659523176176366]
								}, {
									"case":	54,
									"scores":	[-4.659523176176366]
								}, {
									"case":	55,
									"scores":	[-4.659523176176366]
								}, {
									"case":	56,
									"scores":	[-4.659523176176366]
								}, {
									"case":	57,
									"scores":	[-4.659523176176366]
								}, {
									"case":	58,
									"scores":	[-4.659523176176366]
								}, {
									"case":	59,
									"scores":	[-4.659523176176366]
								}, {
									"case":	60,
									"scores":	[-4.659523176176366]
								}, {
									"case":	61,
									"scores":	[-4.659523176176366]
								}, {
									"case":	62,
									"scores":	[-4.659523176176366]
								}, {
									"case":	63,
									"scores":	[-4.659523176176366]
								}, {
									"case":	64,
									"scores":	[-4.659523176176366]
								}, {
									"case":	65,
									"scores":	[-4.659523176176366]
								}, {
									"case":	66,
									"scores":	[-4.659523176176366]
								}, {
									"case":	67,
									"scores":	[-4.659523176176366]
								}, {
									"case":	68,
									"scores":	[-4.659523176176366]
								}, {
									"case":	69,
									"scores":	[-4.659523176176366]
								}, {
									"case":	70,
									"scores":	[-4.659523176176366]
								}, {
									"case":	71,
									"scores":	[-4.659523176176366]
								}, {
									"case":	72,
									"scores":	[-4.659523176176366]
								}, {
									"case":	73,
									"scores":	[-4.659523176176366]
								}, {
									"case":	74,
									"scores":	[-4.659523176176366]
								}, {
									"case":	75,
									"scores":	[-4.659523176176366]
								}, {
									"case":	76,
									"scores":	[-4.659523176176366]
								}, {
									"case":	77,
									"scores":	[-4.659523176176366]
								}, {
									"case":	78,
									"scores":	[-4.659523176176366]
								}, {
									"case":	79,
									"scores":	[-4.659523176176366]
								}, {
									"case":	80,
									"scores":	[-4.659523176176366]
								}, {
									"case":	81,
									"scores":	[-4.659523176176366]
								}, {
									"case":	82,
									"scores":	[-4.659523176176366]
								}, {
									"case":	83,
									"scores":	[-4.659523176176366]
								}, {
									"case":	84,
									"scores":	[-4.659523176176366]
								}, {
									"case":	85,
									"scores":	[-4.659523176176366]
								}, {
									"case":	86,
									"scores":	[-4.659523176176366]
								}, {
									"case":	87,
									"scores":	[-4.659523176176366]
								}, {
									"case":	88,
									"scores":	[-4.659523176176366]
								}, {
									"case":	89,
									"scores":	[-4.659523176176366]
								}, {
									"case":	90,
									"scores":	[-4.659523176176366]
								}, {
									"case":	91,
									"scores":	[-7.0169661599763664, -6.0150615221763655, -6.9798657599763665, -6.476241672176366, -6.7072448691763658, -6.7709272461763668, -6.7242311891763666]
								}]
						}, {
							"switch":	62,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	399,
							"begin_column":	3,
							"end_line":	399,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L399\", 7, &(buf), sizeof (buf), &(len), sizeof (len), &(pos), sizeof (pos), &(us), sizeof (us), &(utf16), sizeof (utf16), &(options), sizeof (options), &(s), sizeof (s)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.9411793461763658, -5.5479223311763661, -6.6468285461763656, -5.5751427461763656, -6.1333855921763663, -6.1832912461763661, -6.338753546176366]
								}]
						}]
				}, {
					"line":	385,
					"switches":	[{
							"switch":	44,
							"types":	[[], [], [], [], [], [], [], [], [], [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], [], [], [], [], [], []],
							"begin_line":	386,
							"begin_column":	0,
							"end_line":	386,
							"end_column":	0,
							"patch_codes":	["(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (12)", "(json_globals.error_code) = (127)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (15)", "(json_globals.error_code) = (16)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (6)", "(json_globals.error_code) = (64)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (8)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (len)", "(json_globals.error_code) = (options)", "(json_globals.error_code) = (pos)", "(s)++", "_efree(((s)))", "_efree(((utf16)))", "len = (0)", "len = (1)", "len = (10)", "len = (12)", "len = (127)", "len = (128)", "len = (15)", "len = (16)", "len = (2)", "len = (3)", "len = (32)", "len = (4)", "len = (5)", "len = (6)", "len = (64)", "len = (78)", "len = (8)", "len = (len)", "len = (options)", "len = (pos)", "len = utf8_to_utf16((utf16), s, len)", "len = utf8_to_utf16(utf16, (s), len)", "us = (0)", "us = (1)", "us = (10)", "us = (12)", "us = (127)", "us = (128)", "us = (15)", "us = (16)", "us = (2)", "us = (3)", "us = (32)", "us = (4)", "us = (5)", "us = (6)", "us = (64)", "us = (78)", "us = (8)", "us = (us)", "us = (utf16)[pos++]", "utf16 = (utf16)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "_efree((utf16))", "exit(1)", "len = utf8_to_utf16(utf16, s, len)", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "us = (((us & 15) << 12) | (((us >> 4) & 15) << 8) | (((us >> 8) & 15) << 4) | ((us >> 12) & 15))", "us = utf16[pos++]", "utf16 = (unsigned short *)_safe_emalloc((len), (sizeof(unsigned short)), (0))", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.94236107862164]
								}, {
									"case":	2,
									"scores":	[-4.94236107862164]
								}, {
									"case":	3,
									"scores":	[-4.94236107862164]
								}, {
									"case":	4,
									"scores":	[-4.94236107862164]
								}, {
									"case":	5,
									"scores":	[-4.94236107862164]
								}, {
									"case":	6,
									"scores":	[-4.94236107862164]
								}, {
									"case":	7,
									"scores":	[-4.94236107862164]
								}, {
									"case":	8,
									"scores":	[-4.94236107862164]
								}, {
									"case":	9,
									"scores":	[-4.94236107862164]
								}, {
									"case":	10,
									"scores":	[-4.94236107862164]
								}, {
									"case":	11,
									"scores":	[-4.94236107862164]
								}, {
									"case":	12,
									"scores":	[-4.94236107862164]
								}, {
									"case":	13,
									"scores":	[-4.94236107862164]
								}, {
									"case":	14,
									"scores":	[-4.94236107862164]
								}, {
									"case":	15,
									"scores":	[-4.94236107862164]
								}, {
									"case":	16,
									"scores":	[-4.94236107862164]
								}, {
									"case":	17,
									"scores":	[-4.94236107862164]
								}, {
									"case":	18,
									"scores":	[-4.94236107862164]
								}, {
									"case":	19,
									"scores":	[-4.94236107862164]
								}, {
									"case":	20,
									"scores":	[-4.94236107862164]
								}, {
									"case":	21,
									"scores":	[-4.94236107862164]
								}, {
									"case":	22,
									"scores":	[-4.94236107862164]
								}, {
									"case":	23,
									"scores":	[-4.94236107862164]
								}, {
									"case":	24,
									"scores":	[-4.94236107862164]
								}, {
									"case":	25,
									"scores":	[-4.94236107862164]
								}, {
									"case":	26,
									"scores":	[-4.94236107862164]
								}, {
									"case":	27,
									"scores":	[-4.94236107862164]
								}, {
									"case":	28,
									"scores":	[-4.94236107862164]
								}, {
									"case":	29,
									"scores":	[-4.94236107862164]
								}, {
									"case":	30,
									"scores":	[-4.94236107862164]
								}, {
									"case":	31,
									"scores":	[-4.94236107862164]
								}, {
									"case":	32,
									"scores":	[-4.94236107862164]
								}, {
									"case":	33,
									"scores":	[-4.94236107862164]
								}, {
									"case":	34,
									"scores":	[-4.94236107862164]
								}, {
									"case":	35,
									"scores":	[-4.94236107862164]
								}, {
									"case":	36,
									"scores":	[-4.94236107862164]
								}, {
									"case":	37,
									"scores":	[-4.94236107862164]
								}, {
									"case":	38,
									"scores":	[-4.94236107862164]
								}, {
									"case":	39,
									"scores":	[-4.94236107862164]
								}, {
									"case":	40,
									"scores":	[-4.94236107862164]
								}, {
									"case":	41,
									"scores":	[-4.94236107862164]
								}, {
									"case":	42,
									"scores":	[-4.94236107862164]
								}, {
									"case":	43,
									"scores":	[-4.94236107862164]
								}, {
									"case":	44,
									"scores":	[-4.94236107862164]
								}, {
									"case":	45,
									"scores":	[-4.94236107862164]
								}, {
									"case":	46,
									"scores":	[-4.94236107862164]
								}, {
									"case":	47,
									"scores":	[-4.94236107862164]
								}, {
									"case":	48,
									"scores":	[-4.94236107862164]
								}, {
									"case":	49,
									"scores":	[-4.94236107862164]
								}, {
									"case":	50,
									"scores":	[-4.94236107862164]
								}, {
									"case":	51,
									"scores":	[-4.94236107862164]
								}, {
									"case":	52,
									"scores":	[-4.94236107862164]
								}, {
									"case":	53,
									"scores":	[-4.94236107862164]
								}, {
									"case":	54,
									"scores":	[-4.94236107862164]
								}, {
									"case":	55,
									"scores":	[-4.94236107862164]
								}, {
									"case":	56,
									"scores":	[-4.94236107862164]
								}, {
									"case":	57,
									"scores":	[-4.94236107862164]
								}, {
									"case":	58,
									"scores":	[-4.94236107862164]
								}, {
									"case":	59,
									"scores":	[-4.94236107862164]
								}, {
									"case":	60,
									"scores":	[-4.94236107862164]
								}, {
									"case":	61,
									"scores":	[-4.94236107862164]
								}, {
									"case":	62,
									"scores":	[-4.94236107862164]
								}, {
									"case":	63,
									"scores":	[-4.94236107862164]
								}, {
									"case":	64,
									"scores":	[-4.94236107862164]
								}, {
									"case":	65,
									"scores":	[-4.94236107862164]
								}, {
									"case":	66,
									"scores":	[-4.94236107862164]
								}, {
									"case":	67,
									"scores":	[-4.94236107862164]
								}, {
									"case":	68,
									"scores":	[-4.94236107862164]
								}, {
									"case":	69,
									"scores":	[-4.94236107862164]
								}, {
									"case":	70,
									"scores":	[-4.94236107862164]
								}, {
									"case":	71,
									"scores":	[-4.94236107862164]
								}, {
									"case":	72,
									"scores":	[-4.94236107862164]
								}, {
									"case":	73,
									"scores":	[-4.94236107862164]
								}, {
									"case":	74,
									"scores":	[-4.94236107862164]
								}, {
									"case":	75,
									"scores":	[-4.94236107862164]
								}, {
									"case":	76,
									"scores":	[-4.94236107862164]
								}, {
									"case":	77,
									"scores":	[-4.94236107862164]
								}, {
									"case":	78,
									"scores":	[-4.94236107862164]
								}, {
									"case":	79,
									"scores":	[-4.94236107862164]
								}, {
									"case":	80,
									"scores":	[-4.94236107862164]
								}, {
									"case":	81,
									"scores":	[-4.94236107862164]
								}, {
									"case":	82,
									"scores":	[-4.94236107862164]
								}, {
									"case":	83,
									"scores":	[-4.94236107862164]
								}, {
									"case":	84,
									"scores":	[-4.94236107862164]
								}, {
									"case":	85,
									"scores":	[-4.94236107862164]
								}, {
									"case":	86,
									"scores":	[-4.94236107862164]
								}, {
									"case":	87,
									"scores":	[-4.94236107862164]
								}, {
									"case":	88,
									"scores":	[-4.94236107862164]
								}, {
									"case":	89,
									"scores":	[-4.94236107862164]
								}, {
									"case":	90,
									"scores":	[-4.94236107862164]
								}]
						}, {
							"switch":	45,
							"types":	[[2], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	386,
							"begin_column":	2,
							"end_line":	400,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L386\", 7, &(len), sizeof (len), &(s), sizeof (s), &(utf16), sizeof (utf16), &(buf), sizeof (buf), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options))) {\n    if (utf16) {\n        _efree((utf16));\n    }\n    if (len < 0) {\n        (json_globals.error_code) = PHP_JSON_ERROR_UTF8;\n        if (!(core_globals.display_errors)) {\n            php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\");\n        }\n        do {\n            register size_t __nl;\n            smart_str *__dest = (smart_str *)((buf));\n            do {\n                if (!(__dest)->c) {\n                    (__dest)->len = 0;\n                    __nl = (((4)));\n                    (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                    (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                } else {\n                    __nl = (__dest)->len + (((4)));\n                    if (__nl >= (__dest)->a) {\n                        (__dest)->a = __nl + 128;\n                        (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            memcpy(__dest->c + __dest->len, ((\"null\")), ((4)));\n            __dest->len = __nl;\n        } while (0);\n    } else {\n        do {\n            register size_t __nl;\n            smart_str *__dest = (smart_str *)((buf));\n            do {\n                if (!(__dest)->c) {\n                    (__dest)->len = 0;\n                    __nl = (((2)));\n                    (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                    (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                } else {\n                    __nl = (__dest)->len + (((2)));\n                    if (__nl >= (__dest)->a) {\n                        (__dest)->a = __nl + 128;\n                        (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            memcpy(__dest->c + __dest->len, ((\"\\\"\\\"\")), ((2)));\n            __dest->len = __nl;\n        } while (0);\n    }\n    return;\n}\n", "if ((len <= 0) && !__is_neg(\"\", \"L386\", 7, &(len), sizeof (len), &(s), sizeof (s), &(utf16), sizeof (utf16), &(buf), sizeof (buf), &(pos), sizeof (pos), &(us), sizeof (us), &(options), sizeof (options))) {\n    if (utf16) {\n        _efree((utf16));\n    }\n    if (len < 0) {\n        (json_globals.error_code) = PHP_JSON_ERROR_UTF8;\n        if (!(core_globals.display_errors)) {\n            php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\");\n        }\n        do {\n            register size_t __nl;\n            smart_str *__dest = (smart_str *)((buf));\n            do {\n                if (!(__dest)->c) {\n                    (__dest)->len = 0;\n                    __nl = (((4)));\n                    (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                    (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                } else {\n                    __nl = (__dest)->len + (((4)));\n                    if (__nl >= (__dest)->a) {\n                        (__dest)->a = __nl + 128;\n                        (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            memcpy(__dest->c + __dest->len, ((\"null\")), ((4)));\n            __dest->len = __nl;\n        } while (0);\n    } else {\n        do {\n            register size_t __nl;\n            smart_str *__dest = (smart_str *)((buf));\n            do {\n                if (!(__dest)->c) {\n                    (__dest)->len = 0;\n                    __nl = (((2)));\n                    (__dest)->a = __nl < 78 ? 78 : __nl + 128;\n                    (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                } else {\n                    __nl = (__dest)->len + (((2)));\n                    if (__nl >= (__dest)->a) {\n                        (__dest)->a = __nl + 128;\n                        (__dest)->c = (((((0)))) ? __zend_realloc((((__dest)->c)), (((__dest)->a + 1))) : _erealloc(((((__dest)->c))), ((((__dest)->a + 1))), 0));\n                    }\n                }\n            } while (0);\n            memcpy(__dest->c + __dest->len, ((\"\\\"\\\"\")), ((2)));\n            __dest->len = __nl;\n        } while (0);\n    }\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.2951720226781465, -5.6621800812781444, -4.7106684712781473, -6.080812933678148, -5.7066852126781455, -6.7787358552781445, -5.7882979352781447]
								}, {
									"case":	2,
									"scores":	[-3.2026279367281463, -5.569635995328146, -4.6181243853281453, -5.988268847728146, -5.6141411267281462, -6.6861917693281452, -5.6957538493281454]
								}]
						}]
				}, {
					"line":	558,
					"switches":	[{
							"switch":	63,
							"types":	[[], [], [], [], [62], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [], [], [], [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [], [], [], [], [], []],
							"begin_line":	559,
							"begin_column":	2,
							"end_line":	559,
							"end_column":	2,
							"patch_codes":	["memset(&(*val).is_ref__gc, 0, sizeof (*(&(*val).is_ref__gc)))", "memset(&(*val).refcount__gc, 0, sizeof (*(&(*val).refcount__gc)))", "memset(&(*val).type, 0, sizeof (*(&(*val).type)))", "memset(&(*val).value, 0, sizeof (*(&(*val).value)))", "memset(&(*val).value.dval, 0, sizeof (*(&(*val).value.dval)))", "memset(&(*val).value.ht, 0, sizeof (*(&(*val).value.ht)))", "memset(&(*val).value.lval, 0, sizeof (*(&(*val).value.lval)))", "memset(&(*val).value.obj, 0, sizeof (*(&(*val).value.obj)))", "memset(&(*val).value.str, 0, sizeof (*(&(*val).value.str)))", "memset(&(*val).value.str.len, 0, sizeof (*(&(*val).value.str.len)))", "memset(&(*val).value.str.val, 0, sizeof (*(&(*val).value.str.val)))", "memset(&json_globals.encoder_depth, 0, sizeof (*(&json_globals.encoder_depth)))", "memset(&json_globals.error_code, 0, sizeof (*(&json_globals.error_code)))", "memset((*val).value.ht, 0, sizeof (*((*val).value.ht)))", "memset((*val).value.str.val, 0, sizeof (*((*val).value.str.val)))", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (6)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (options)", "_efree(((val)))", "_zval_copy_ctor_func((val))", "_zval_dtor(((val)))", "_zval_dtor_func((val))", "_zval_ptr_dtor((&(val)))", "convert_to_boolean((val))", "gc_remove_zval_from_buffer((val))", "gc_zval_check_possible_root(((val)))", "gc_zval_possible_root((val))", "i_zval_ptr_dtor((val))", "json_encode_serializable_object((buf), val, options)", "json_encode_serializable_object(buf, (val), options)", "zval_unset_isref_p((val))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "exit(1)", "json_encode_serializable_object(buf, val, options)", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L559\", 8, &(buf), sizeof (buf), &(val), sizeof (val), &((*val).type), sizeof ((*val).type), &(options), sizeof (options), &(php_json_serializable_ce), sizeof (php_json_serializable_ce), &(php_json_serializable_ce), sizeof (php_json_serializable_ce), &((*val).refcount__gc), sizeof ((*val).refcount__gc), &((*val).is_ref__gc), sizeof ((*val).is_ref__gc)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	2,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	3,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	4,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	5,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	6,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	7,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	8,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	9,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	10,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	11,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	12,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	13,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	14,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	15,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	16,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	17,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	18,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	19,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	20,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	21,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	22,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	23,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	24,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	25,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	26,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	27,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	28,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	29,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	30,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	31,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	32,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	33,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	34,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	35,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	36,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	37,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	38,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	39,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	40,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	41,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	42,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	43,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	44,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	45,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	46,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	47,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	48,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	49,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	50,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	51,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	52,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	53,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	54,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	55,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	56,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	57,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	58,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	59,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	60,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	61,
									"scores":	[-6.8818209811035072]
								}, {
									"case":	62,
									"scores":	[-10.125459636203509, -11.074052329503505, -9.92973241250351, -9.55595446550351, -9.620697360303506, -9.620697360303506, -9.92973241250351, -9.92973241250351]
								}]
						}]
				}, {
					"line":	587,
					"switches":	[{
							"switch":	64,
							"types":	[[], [], [], [], [62], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [], [], [], [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [], [], [], [], [], []],
							"begin_line":	588,
							"begin_column":	1,
							"end_line":	588,
							"end_column":	1,
							"patch_codes":	["memset(&(*val).is_ref__gc, 0, sizeof (*(&(*val).is_ref__gc)))", "memset(&(*val).refcount__gc, 0, sizeof (*(&(*val).refcount__gc)))", "memset(&(*val).type, 0, sizeof (*(&(*val).type)))", "memset(&(*val).value, 0, sizeof (*(&(*val).value)))", "memset(&(*val).value.dval, 0, sizeof (*(&(*val).value.dval)))", "memset(&(*val).value.ht, 0, sizeof (*(&(*val).value.ht)))", "memset(&(*val).value.lval, 0, sizeof (*(&(*val).value.lval)))", "memset(&(*val).value.obj, 0, sizeof (*(&(*val).value.obj)))", "memset(&(*val).value.str, 0, sizeof (*(&(*val).value.str)))", "memset(&(*val).value.str.len, 0, sizeof (*(&(*val).value.str.len)))", "memset(&(*val).value.str.val, 0, sizeof (*(&(*val).value.str.val)))", "memset(&json_globals.encoder_depth, 0, sizeof (*(&json_globals.encoder_depth)))", "memset(&json_globals.error_code, 0, sizeof (*(&json_globals.error_code)))", "memset((*val).value.ht, 0, sizeof (*((*val).value.ht)))", "memset((*val).value.str.val, 0, sizeof (*((*val).value.str.val)))", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (10)", "(json_globals.error_code) = (128)", "(json_globals.error_code) = (2)", "(json_globals.error_code) = (3)", "(json_globals.error_code) = (32)", "(json_globals.error_code) = (4)", "(json_globals.error_code) = (5)", "(json_globals.error_code) = (6)", "(json_globals.error_code) = (78)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (options)", "_efree(((val)))", "_zval_copy_ctor_func((val))", "_zval_dtor(((val)))", "_zval_dtor_func((val))", "_zval_ptr_dtor((&(val)))", "convert_to_boolean((val))", "gc_remove_zval_from_buffer((val))", "gc_zval_check_possible_root(((val)))", "gc_zval_possible_root((val))", "i_zval_ptr_dtor((val))", "json_encode_serializable_object((buf), val, options)", "json_encode_serializable_object(buf, (val), options)", "zval_unset_isref_p((val))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "exit(1)", "json_encode_serializable_object(buf, val, options)", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L588\", 5, &(buf), sizeof (buf), &(val), sizeof (val), &(options), sizeof (options), &(php_json_serializable_ce), sizeof (php_json_serializable_ce), &(php_json_serializable_ce), sizeof (php_json_serializable_ce)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	2,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	3,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	4,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	5,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	6,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	7,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	8,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	9,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	10,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	11,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	12,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	13,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	14,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	15,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	16,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	17,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	18,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	19,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	20,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	21,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	22,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	23,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	24,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	25,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	26,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	27,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	28,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	29,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	30,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	31,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	32,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	33,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	34,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	35,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	36,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	37,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	38,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	39,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	40,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	41,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	42,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	43,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	44,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	45,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	46,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	47,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	48,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	49,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	50,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	51,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	52,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	53,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	54,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	55,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	56,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	57,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	58,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	59,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	60,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	61,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	62,
									"scores":	[-10.1377868739094, -11.5110417761094, -9.8917479601094, -10.9574814769094, -10.9574814769094]
								}]
						}]
				}, {
					"line":	724,
					"switches":	[{
							"switch":	65,
							"types":	[[], [], [], [], [48], [], [], [], [], [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [], [], [], [], [], []],
							"begin_line":	725,
							"begin_column":	0,
							"end_line":	725,
							"end_column":	0,
							"patch_codes":	["(json_globals.error_code) = (-1)", "(json_globals.error_code) = (0)", "(json_globals.error_code) = (1)", "(json_globals.error_code) = (PHP_JSON_ERROR_CTRL_CHAR)", "(json_globals.error_code) = (PHP_JSON_ERROR_DEPTH)", "(json_globals.error_code) = (PHP_JSON_ERROR_NONE)", "(json_globals.error_code) = (PHP_JSON_ERROR_STATE_MISMATCH)", "(json_globals.error_code) = (PHP_JSON_ERROR_SYNTAX)", "(json_globals.error_code) = (PHP_JSON_ERROR_UTF8)", "(json_globals.error_code) = (ht)", "(json_globals.error_code) = (return_value_used)", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(json_globals.error_code) = PHP_JSON_ERROR_NONE", "(json_globals.error_code) = PHP_JSON_ERROR_UTF8", "++(json_globals.encoder_depth)", "--(json_globals.encoder_depth)", "exit(1)", "php_error_docref0(((void *)0), (1 << 1L), \"Depth must be greater than zero\")", "php_error_docref0(((void *)0), (1 << 1L), \"Invalid UTF-8 sequence in argument\")", "php_error_docref0(((void *)0), (1 << 1L), \"recursion detected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"json support\", \"enabled\")", "php_info_print_table_row(2, \"json version\", \"1.2.1\")", "php_info_print_table_start()", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L725\", 2, &(ht), sizeof (ht), &(return_value), sizeof (return_value)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	2,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	3,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	4,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	5,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	6,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	7,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	8,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	9,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	10,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	11,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	12,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	13,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	14,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	15,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	16,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	17,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-7.1964837958588461, -8.2978306786588458]
								}]
						}, {
							"switch":	66,
							"types":	[[39], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], []],
							"begin_line":	725,
							"begin_column":	2,
							"end_line":	727,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L725\", 2, &(ht), sizeof (ht), &(return_value), sizeof (return_value))) {\n    return;\n}\n", "if ((zend_parse_parameters((ht), \"\") == -1) || __is_neg(\"\", \"L725\", 2, &(ht), sizeof (ht), &(return_value), sizeof (return_value))) {\n    return;\n}\n", "if (_IO_putc((ht), \"\") == -1) {\n    return;\n}\n", "if (__tolower_l((ht), \"\") == -1) {\n    return;\n}\n", "if (__toupper_l((ht), \"\") == -1) {\n    return;\n}\n", "if (_zend_get_parameters_array_ex((ht), \"\") == -1) {\n    return;\n}\n", "if (clock_getcpuclockid((ht), \"\") == -1) {\n    return;\n}\n", "if (clock_getres((ht), \"\") == -1) {\n    return;\n}\n", "if (clock_gettime((ht), \"\") == -1) {\n    return;\n}\n", "if (clock_settime((ht), \"\") == -1) {\n    return;\n}\n", "if (dprintf((ht), \"\") == -1) {\n    return;\n}\n", "if (fputc((ht), \"\") == -1) {\n    return;\n}\n", "if (fputc_unlocked((ht), \"\") == -1) {\n    return;\n}\n", "if (fstat((ht), \"\") == -1) {\n    return;\n}\n", "if (futimens((ht), \"\") == -1) {\n    return;\n}\n", "if (futimes((ht), \"\") == -1) {\n    return;\n}\n", "if (getgroups((ht), \"\") == -1) {\n    return;\n}\n", "if (getitimer((ht), \"\") == -1) {\n    return;\n}\n", "if (isalnum_l((ht), \"\") == -1) {\n    return;\n}\n", "if (isalpha_l((ht), \"\") == -1) {\n    return;\n}\n", "if (isblank_l((ht), \"\") == -1) {\n    return;\n}\n", "if (iscntrl_l((ht), \"\") == -1) {\n    return;\n}\n", "if (isdigit_l((ht), \"\") == -1) {\n    return;\n}\n", "if (isgraph_l((ht), \"\") == -1) {\n    return;\n}\n", "if (islower_l((ht), \"\") == -1) {\n    return;\n}\n", "if (isprint_l((ht), \"\") == -1) {\n    return;\n}\n", "if (ispunct_l((ht), \"\") == -1) {\n    return;\n}\n", "if (isspace_l((ht), \"\") == -1) {\n    return;\n}\n", "if (isupper_l((ht), \"\") == -1) {\n    return;\n}\n", "if (isxdigit_l((ht), \"\") == -1) {\n    return;\n}\n", "if (putc((ht), \"\") == -1) {\n    return;\n}\n", "if (putc_unlocked((ht), \"\") == -1) {\n    return;\n}\n", "if (putw((ht), \"\") == -1) {\n    return;\n}\n", "if (tolower_l((ht), \"\") == -1) {\n    return;\n}\n", "if (toupper_l((ht), \"\") == -1) {\n    return;\n}\n", "if (ungetc((ht), \"\") == -1) {\n    return;\n}\n", "if (zend_copy_parameters_array((ht), \"\") == -1) {\n    return;\n}\n", "if (zend_get_parameters_ex((ht), \"\") == -1) {\n    return;\n}\n", "if ((zend_parse_parameters((ht), \"\") == -1) && !__is_neg(\"\", \"L725\", 2, &(ht), sizeof (ht), &(return_value), sizeof (return_value))) {\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.8842886754281456, -5.3556120754281462]
								}, {
									"case":	2,
									"scores":	[-2.6207907654281457, -4.0921141654281454]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-2.6207907654281457, -4.0921141654281454]
								}]
						}, {
							"switch":	67,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	725,
							"begin_column":	2,
							"end_line":	727,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L725\", 2, &(ht), sizeof (ht), &(return_value), sizeof (return_value)))\n    if (zend_parse_parameters((ht), \"\") == -1) {\n        return;\n    }\n", "if (!__is_neg(\"\", \"L725\", 2, &(ht), sizeof (ht), &(return_value), sizeof (return_value)) && (zend_parse_parameters((ht), \"\") == -1)) {\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8540829388588467, -7.325406338858846]
								}, {
									"case":	2,
									"scores":	[-4.5905850288588468, -6.0619084288588461]
								}]
						}]
				}]
		}],
	"sizes":	[{
			"switch":	1,
			"case":	1,
			"size":	8
		}, {
			"switch":	1,
			"case":	2,
			"size":	8
		}, {
			"switch":	2,
			"case":	119,
			"size":	8
		}, {
			"switch":	2,
			"case":	120,
			"size":	8
		}, {
			"switch":	2,
			"case":	121,
			"size":	8
		}, {
			"switch":	2,
			"case":	122,
			"size":	8
		}, {
			"switch":	2,
			"case":	123,
			"size":	8
		}, {
			"switch":	2,
			"case":	124,
			"size":	8
		}, {
			"switch":	3,
			"case":	1,
			"size":	8
		}, {
			"switch":	4,
			"case":	1,
			"size":	21
		}, {
			"switch":	4,
			"case":	2,
			"size":	21
		}, {
			"switch":	5,
			"case":	177,
			"size":	51
		}, {
			"switch":	6,
			"case":	1,
			"size":	51
		}, {
			"switch":	7,
			"case":	174,
			"size":	51
		}, {
			"switch":	8,
			"case":	1,
			"size":	51
		}, {
			"switch":	9,
			"case":	1,
			"size":	6
		}, {
			"switch":	9,
			"case":	2,
			"size":	6
		}, {
			"switch":	10,
			"case":	111,
			"size":	6
		}, {
			"switch":	11,
			"case":	1,
			"size":	6
		}, {
			"switch":	12,
			"case":	1,
			"size":	13
		}, {
			"switch":	12,
			"case":	2,
			"size":	13
		}, {
			"switch":	13,
			"case":	239,
			"size":	13
		}, {
			"switch":	13,
			"case":	240,
			"size":	13
		}, {
			"switch":	14,
			"case":	1,
			"size":	13
		}, {
			"switch":	14,
			"case":	2,
			"size":	13
		}, {
			"switch":	14,
			"case":	3,
			"size":	13
		}, {
			"switch":	15,
			"case":	239,
			"size":	16
		}, {
			"switch":	15,
			"case":	240,
			"size":	16
		}, {
			"switch":	16,
			"case":	1,
			"size":	16
		}, {
			"switch":	16,
			"case":	2,
			"size":	16
		}, {
			"switch":	16,
			"case":	3,
			"size":	16
		}, {
			"switch":	17,
			"case":	239,
			"size":	16
		}, {
			"switch":	17,
			"case":	240,
			"size":	16
		}, {
			"switch":	18,
			"case":	1,
			"size":	16
		}, {
			"switch":	18,
			"case":	2,
			"size":	16
		}, {
			"switch":	18,
			"case":	3,
			"size":	16
		}, {
			"switch":	18,
			"case":	5,
			"size":	16
		}, {
			"switch":	19,
			"case":	1,
			"size":	16
		}, {
			"switch":	20,
			"case":	238,
			"size":	13
		}, {
			"switch":	20,
			"case":	239,
			"size":	13
		}, {
			"switch":	21,
			"case":	1,
			"size":	13
		}, {
			"switch":	21,
			"case":	2,
			"size":	13
		}, {
			"switch":	21,
			"case":	3,
			"size":	13
		}, {
			"switch":	22,
			"case":	238,
			"size":	13
		}, {
			"switch":	22,
			"case":	239,
			"size":	13
		}, {
			"switch":	23,
			"case":	1,
			"size":	13
		}, {
			"switch":	24,
			"case":	238,
			"size":	13
		}, {
			"switch":	24,
			"case":	239,
			"size":	13
		}, {
			"switch":	25,
			"case":	1,
			"size":	13
		}, {
			"switch":	26,
			"case":	238,
			"size":	13
		}, {
			"switch":	26,
			"case":	239,
			"size":	13
		}, {
			"switch":	27,
			"case":	1,
			"size":	13
		}, {
			"switch":	28,
			"case":	1,
			"size":	13
		}, {
			"switch":	28,
			"case":	2,
			"size":	13
		}, {
			"switch":	29,
			"case":	238,
			"size":	13
		}, {
			"switch":	29,
			"case":	239,
			"size":	13
		}, {
			"switch":	30,
			"case":	1,
			"size":	13
		}, {
			"switch":	31,
			"case":	238,
			"size":	13
		}, {
			"switch":	31,
			"case":	239,
			"size":	13
		}, {
			"switch":	32,
			"case":	1,
			"size":	13
		}, {
			"switch":	33,
			"case":	238,
			"size":	13
		}, {
			"switch":	33,
			"case":	239,
			"size":	13
		}, {
			"switch":	34,
			"case":	1,
			"size":	13
		}, {
			"switch":	35,
			"case":	238,
			"size":	13
		}, {
			"switch":	35,
			"case":	239,
			"size":	13
		}, {
			"switch":	36,
			"case":	1,
			"size":	13
		}, {
			"switch":	37,
			"case":	238,
			"size":	13
		}, {
			"switch":	37,
			"case":	239,
			"size":	13
		}, {
			"switch":	38,
			"case":	1,
			"size":	13
		}, {
			"switch":	39,
			"case":	1,
			"size":	16
		}, {
			"switch":	39,
			"case":	2,
			"size":	16
		}, {
			"switch":	40,
			"case":	1,
			"size":	13
		}, {
			"switch":	40,
			"case":	2,
			"size":	13
		}, {
			"switch":	41,
			"case":	1,
			"size":	6
		}, {
			"switch":	41,
			"case":	2,
			"size":	6
		}, {
			"switch":	42,
			"case":	111,
			"size":	6
		}, {
			"switch":	43,
			"case":	1,
			"size":	6
		}, {
			"switch":	45,
			"case":	1,
			"size":	7
		}, {
			"switch":	45,
			"case":	2,
			"size":	7
		}, {
			"switch":	46,
			"case":	91,
			"size":	7
		}, {
			"switch":	47,
			"case":	1,
			"size":	7
		}, {
			"switch":	47,
			"case":	2,
			"size":	7
		}, {
			"switch":	47,
			"case":	3,
			"size":	7
		}, {
			"switch":	48,
			"case":	91,
			"size":	7
		}, {
			"switch":	49,
			"case":	1,
			"size":	7
		}, {
			"switch":	50,
			"case":	1,
			"size":	7
		}, {
			"switch":	50,
			"case":	2,
			"size":	7
		}, {
			"switch":	51,
			"case":	91,
			"size":	9
		}, {
			"switch":	52,
			"case":	1,
			"size":	9
		}, {
			"switch":	52,
			"case":	2,
			"size":	9
		}, {
			"switch":	52,
			"case":	3,
			"size":	9
		}, {
			"switch":	53,
			"case":	189,
			"size":	145
		}, {
			"switch":	54,
			"case":	1,
			"size":	145
		}, {
			"switch":	55,
			"case":	189,
			"size":	145
		}, {
			"switch":	56,
			"case":	1,
			"size":	145
		}, {
			"switch":	56,
			"case":	2,
			"size":	145
		}, {
			"switch":	56,
			"case":	3,
			"size":	145
		}, {
			"switch":	57,
			"case":	1,
			"size":	145
		}, {
			"switch":	57,
			"case":	2,
			"size":	145
		}, {
			"switch":	58,
			"case":	188,
			"size":	7
		}, {
			"switch":	59,
			"case":	1,
			"size":	7
		}, {
			"switch":	60,
			"case":	1,
			"size":	9
		}, {
			"switch":	60,
			"case":	2,
			"size":	9
		}, {
			"switch":	61,
			"case":	91,
			"size":	7
		}, {
			"switch":	62,
			"case":	1,
			"size":	7
		}, {
			"switch":	63,
			"case":	62,
			"size":	8
		}, {
			"switch":	64,
			"case":	62,
			"size":	5
		}, {
			"switch":	65,
			"case":	48,
			"size":	2
		}, {
			"switch":	66,
			"case":	1,
			"size":	2
		}, {
			"switch":	66,
			"case":	2,
			"size":	2
		}, {
			"switch":	66,
			"case":	39,
			"size":	2
		}, {
			"switch":	67,
			"case":	1,
			"size":	2
		}, {
			"switch":	67,
			"case":	2,
			"size":	2
		}],
	"func_locations":	[{
			"file":	"ext/json/json.c",
			"functions":	[{
					"function":	"__cmsg_nxthdr",
					"begin":	308,
					"end":	324
				}, {
					"function":	"__uint16_identity",
					"begin":	32,
					"end":	36
				}, {
					"function":	"__uint32_identity",
					"begin":	38,
					"end":	42
				}, {
					"function":	"__uint64_identity",
					"begin":	44,
					"end":	48
				}, {
					"function":	"__zend_calloc",
					"begin":	103,
					"end":	108
				}, {
					"function":	"__zend_malloc",
					"begin":	93,
					"end":	101
				}, {
					"function":	"__zend_realloc",
					"begin":	110,
					"end":	118
				}, {
					"function":	"_zval_copy_ctor",
					"begin":	40,
					"end":	46
				}, {
					"function":	"_zval_dtor",
					"begin":	30,
					"end":	36
				}, {
					"function":	"atof",
					"begin":	24,
					"end":	28
				}, {
					"function":	"atoi",
					"begin":	360,
					"end":	364
				}, {
					"function":	"atol",
					"begin":	365,
					"end":	369
				}, {
					"function":	"atoll",
					"begin":	372,
					"end":	376
				}, {
					"function":	"bsearch",
					"begin":	19,
					"end":	43
				}, {
					"function":	"feof_unlocked",
					"begin":	124,
					"end":	128
				}, {
					"function":	"ferror_unlocked",
					"begin":	131,
					"end":	135
				}, {
					"function":	"fgetc_unlocked",
					"begin":	52,
					"end":	56
				}, {
					"function":	"fputc_unlocked",
					"begin":	87,
					"end":	91
				}, {
					"function":	"fstat",
					"begin":	462,
					"end":	466
				}, {
					"function":	"fstatat",
					"begin":	469,
					"end":	474
				}, {
					"function":	"gc_remove_from_buffer",
					"begin":	187,
					"end":	194
				}, {
					"function":	"gc_zval_check_possible_root",
					"begin":	180,
					"end":	185
				}, {
					"function":	"getc_unlocked",
					"begin":	62,
					"end":	66
				}, {
					"function":	"getchar",
					"begin":	43,
					"end":	47
				}, {
					"function":	"getchar_unlocked",
					"begin":	69,
					"end":	73
				}, {
					"function":	"gnu_dev_major",
					"begin":	79,
					"end":	79
				}, {
					"function":	"gnu_dev_makedev",
					"begin":	81,
					"end":	81
				}, {
					"function":	"gnu_dev_minor",
					"begin":	80,
					"end":	80
				}, {
					"function":	"i_zend_is_true",
					"begin":	101,
					"end":	156
				}, {
					"function":	"i_zval_ptr_dtor",
					"begin":	80,
					"end":	99
				}, {
					"function":	"is_numeric_string",
					"begin":	102,
					"end":	224
				}, {
					"function":	"json_determine_array_type",
					"begin":	161,
					"end":	192
				}, {
					"function":	"json_encode_array",
					"begin":	219,
					"end":	343
				}, {
					"function":	"json_encode_serializable_object",
					"begin":	507,
					"end":	537
				}, {
					"function":	"json_escape_string",
					"begin":	348,
					"end":	503
				}, {
					"function":	"json_pretty_print_char",
					"begin":	197,
					"end":	202
				}, {
					"function":	"json_pretty_print_indent",
					"begin":	205,
					"end":	214
				}, {
					"function":	"lstat",
					"begin":	455,
					"end":	459
				}, {
					"function":	"mknod",
					"begin":	478,
					"end":	482
				}, {
					"function":	"mknodat",
					"begin":	486,
					"end":	491
				}, {
					"function":	"parse_JSON",
					"begin":	35,
					"end":	38
				}, {
					"function":	"php_json_decode",
					"begin":	74,
					"end":	77
				}, {
					"function":	"php_json_decode_ex",
					"begin":	602,
					"end":	668
				}, {
					"function":	"php_json_encode",
					"begin":	540,
					"end":	599
				}, {
					"function":	"php_set_error_handling",
					"begin":	292,
					"end":	295
				}, {
					"function":	"php_std_error_handling",
					"begin":	296,
					"end":	296
				}, {
					"function":	"putc_unlocked",
					"begin":	97,
					"end":	101
				}, {
					"function":	"putchar",
					"begin":	78,
					"end":	82
				}, {
					"function":	"putchar_unlocked",
					"begin":	104,
					"end":	108
				}, {
					"function":	"safe_free_zval_ptr_rel",
					"begin":	62,
					"end":	69
				}, {
					"function":	"smart_str_print_long",
					"begin":	153,
					"end":	157
				}, {
					"function":	"smart_str_print_unsigned",
					"begin":	159,
					"end":	163
				}, {
					"function":	"stat",
					"begin":	448,
					"end":	452
				}, {
					"function":	"tolower",
					"begin":	206,
					"end":	210
				}, {
					"function":	"toupper",
					"begin":	212,
					"end":	216
				}, {
					"function":	"vprintf",
					"begin":	35,
					"end":	39
				}, {
					"function":	"zend_arg_types_stack_2_pop",
					"begin":	355,
					"end":	363
				}, {
					"function":	"zend_arg_types_stack_3_pop",
					"begin":	365,
					"end":	374
				}, {
					"function":	"zend_dval_to_lval",
					"begin":	77,
					"end":	83
				}, {
					"function":	"zend_inline_hash_func",
					"begin":	261,
					"end":	288
				}, {
					"function":	"zend_memnstr",
					"begin":	226,
					"end":	257
				}, {
					"function":	"zend_memrchr",
					"begin":	259,
					"end":	274
				}, {
					"function":	"zend_objects_store_del_ref_by_handle",
					"begin":	71,
					"end":	73
				}, {
					"function":	"zend_ptr_stack_2_pop",
					"begin":	93,
					"end":	98
				}, {
					"function":	"zend_ptr_stack_2_push",
					"begin":	72,
					"end":	83
				}, {
					"function":	"zend_ptr_stack_3_pop",
					"begin":	85,
					"end":	91
				}, {
					"function":	"zend_ptr_stack_3_push",
					"begin":	58,
					"end":	70
				}, {
					"function":	"zend_ptr_stack_pop",
					"begin":	108,
					"end":	112
				}, {
					"function":	"zend_ptr_stack_push",
					"begin":	100,
					"end":	106
				}, {
					"function":	"zend_symtable_del",
					"begin":	355,
					"end":	359
				}, {
					"function":	"zend_symtable_exists",
					"begin":	369,
					"end":	373
				}, {
					"function":	"zend_symtable_find",
					"begin":	362,
					"end":	366
				}, {
					"function":	"zend_symtable_update",
					"begin":	348,
					"end":	352
				}, {
					"function":	"zend_symtable_update_current_key_ex",
					"begin":	375,
					"end":	379
				}, {
					"function":	"zend_vm_stack_alloc",
					"begin":	243,
					"end":	270
				}, {
					"function":	"zend_vm_stack_clear_multiple",
					"begin":	331,
					"end":	342
				}, {
					"function":	"zend_vm_stack_destroy",
					"begin":	197,
					"end":	206
				}, {
					"function":	"zend_vm_stack_extend",
					"begin":	208,
					"end":	213
				}, {
					"function":	"zend_vm_stack_free",
					"begin":	284,
					"end":	300
				}, {
					"function":	"zend_vm_stack_free_int",
					"begin":	272,
					"end":	282
				}, {
					"function":	"zend_vm_stack_get_arg",
					"begin":	344,
					"end":	353
				}, {
					"function":	"zend_vm_stack_init",
					"begin":	192,
					"end":	195
				}, {
					"function":	"zend_vm_stack_new_page",
					"begin":	183,
					"end":	190
				}, {
					"function":	"zend_vm_stack_pop",
					"begin":	231,
					"end":	241
				}, {
					"function":	"zend_vm_stack_push",
					"begin":	220,
					"end":	224
				}, {
					"function":	"zend_vm_stack_push_args",
					"begin":	302,
					"end":	329
				}, {
					"function":	"zend_vm_stack_push_nocheck",
					"begin":	226,
					"end":	229
				}, {
					"function":	"zend_vm_stack_top",
					"begin":	215,
					"end":	218
				}, {
					"function":	"zif_json_decode",
					"begin":	694,
					"end":	718
				}, {
					"function":	"zif_json_encode",
					"begin":	674,
					"end":	689
				}, {
					"function":	"zif_json_last_error",
					"begin":	723,
					"end":	730
				}, {
					"function":	"zm_globals_ctor_json",
					"begin":	116,
					"end":	120
				}, {
					"function":	"zm_info_json",
					"begin":	150,
					"end":	156
				}, {
					"function":	"zm_startup_json",
					"begin":	84,
					"end":	111
				}, {
					"function":	"zval_addref_p",
					"begin":	386,
					"end":	388
				}, {
					"function":	"zval_delref_p",
					"begin":	390,
					"end":	392
				}, {
					"function":	"zval_isref_p",
					"begin":	394,
					"end":	396
				}, {
					"function":	"zval_refcount_p",
					"begin":	378,
					"end":	380
				}, {
					"function":	"zval_set_isref_p",
					"begin":	398,
					"end":	400
				}, {
					"function":	"zval_set_isref_to_p",
					"begin":	406,
					"end":	408
				}, {
					"function":	"zval_set_refcount_p",
					"begin":	382,
					"end":	384
				}, {
					"function":	"zval_unset_isref_p",
					"begin":	402,
					"end":	404
				}]
		}]
}
