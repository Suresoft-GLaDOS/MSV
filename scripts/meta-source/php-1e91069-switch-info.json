{
	"switch_num":	77,
	"case_num":	[338, 337, 337, 338, 297, 6, 2, 298, 4, 298, 3, 2, 298, 4, 298, 3, 2, 299, 41, 298, 27, 259, 6, 2, 260, 4, 260, 3, 2, 260, 111, 260, 111, 260, 111, 260, 33, 259, 6, 2, 260, 4, 260, 3, 2, 260, 111, 260, 111, 260, 111, 260, 33, 285, 6, 2, 286, 4, 286, 3, 2, 286, 111, 286, 108, 286, 108, 286, 322, 286, 108, 286, 33, 104, 2, 108, 3],
	"switch_cluster":	[[6, 8, 11, 13, 16, 18, 20, 23, 25, 28, 30, 32, 34, 36, 39, 41, 44, 46, 48, 50, 52, 55, 57, 60, 62, 64, 66, 68, 70, 72, 76], [5, 10, 15, 22, 27, 38, 43, 54, 59, 74], [0, 1, 2, 3, 4, 7, 9, 12, 14, 17, 19, 21, 24, 26, 29, 31, 33, 35, 37, 40, 42, 45, 47, 49, 51, 53, 56, 58, 61, 63, 65, 67, 69, 71, 73, 75], []],
	"priority":	[{
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	428,
			"primary_score":	999640,
			"second_score":	3110
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	429,
			"primary_score":	999640,
			"second_score":	3108
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	479,
			"primary_score":	999640,
			"second_score":	3111
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	485,
			"primary_score":	999640,
			"second_score":	2
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	590,
			"primary_score":	999640,
			"second_score":	3107
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	592,
			"primary_score":	999640,
			"second_score":	3106
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	593,
			"primary_score":	999640,
			"second_score":	6
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	594,
			"primary_score":	999640,
			"second_score":	5
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	595,
			"primary_score":	999640,
			"second_score":	739
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	596,
			"primary_score":	999640,
			"second_score":	738
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	597,
			"primary_score":	999640,
			"second_score":	737
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	599,
			"primary_score":	999640,
			"second_score":	4
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	601,
			"primary_score":	999640,
			"second_score":	3
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	692,
			"primary_score":	999640,
			"second_score":	121676
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	697,
			"primary_score":	999640,
			"second_score":	121675
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	699,
			"primary_score":	999640,
			"second_score":	121674
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	812,
			"primary_score":	999640,
			"second_score":	121673
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	816,
			"primary_score":	999640,
			"second_score":	121672
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	819,
			"primary_score":	999640,
			"second_score":	121671
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	820,
			"primary_score":	999640,
			"second_score":	121670
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1897,
			"primary_score":	999640,
			"second_score":	121892
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1898,
			"primary_score":	999640,
			"second_score":	121891
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1901,
			"primary_score":	999640,
			"second_score":	121890
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1902,
			"primary_score":	999640,
			"second_score":	121889
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1903,
			"primary_score":	999640,
			"second_score":	121888
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1904,
			"primary_score":	999640,
			"second_score":	121887
		}, {
			"file":	"Zend/zend.c",
			"line":	227,
			"primary_score":	999640,
			"second_score":	158277
		}, {
			"file":	"Zend/zend.c",
			"line":	228,
			"primary_score":	999640,
			"second_score":	119653
		}, {
			"file":	"Zend/zend.c",
			"line":	229,
			"primary_score":	999640,
			"second_score":	119652
		}, {
			"file":	"Zend/zend.c",
			"line":	231,
			"primary_score":	999960,
			"second_score":	158276
		}, {
			"file":	"Zend/zend.c",
			"line":	294,
			"primary_score":	999963,
			"second_score":	158275
		}, {
			"file":	"Zend/zend.c",
			"line":	295,
			"primary_score":	999963,
			"second_score":	158272
		}, {
			"file":	"Zend/zend.c",
			"line":	296,
			"primary_score":	999963,
			"second_score":	158036
		}, {
			"file":	"Zend/zend.c",
			"line":	298,
			"primary_score":	999960,
			"second_score":	158035
		}, {
			"file":	"Zend/zend.c",
			"line":	299,
			"primary_score":	999960,
			"second_score":	158034
		}, {
			"file":	"Zend/zend.c",
			"line":	305,
			"primary_score":	999640,
			"second_score":	119658
		}, {
			"file":	"Zend/zend.c",
			"line":	311,
			"primary_score":	999640,
			"second_score":	119657
		}, {
			"file":	"Zend/zend.c",
			"line":	312,
			"primary_score":	999640,
			"second_score":	119656
		}, {
			"file":	"Zend/zend.c",
			"line":	314,
			"primary_score":	999640,
			"second_score":	119655
		}, {
			"file":	"Zend/zend.c",
			"line":	315,
			"primary_score":	999640,
			"second_score":	119651
		}, {
			"file":	"Zend/zend.c",
			"line":	318,
			"primary_score":	999640,
			"second_score":	119650
		}, {
			"file":	"Zend/zend.c",
			"line":	319,
			"primary_score":	999640,
			"second_score":	119649
		}, {
			"file":	"Zend/zend.c",
			"line":	322,
			"primary_score":	999640,
			"second_score":	119648
		}, {
			"file":	"Zend/zend.c",
			"line":	324,
			"primary_score":	999640,
			"second_score":	121305
		}, {
			"file":	"Zend/zend.c",
			"line":	325,
			"primary_score":	999640,
			"second_score":	121257
		}, {
			"file":	"Zend/zend.c",
			"line":	328,
			"primary_score":	999640,
			"second_score":	121256
		}, {
			"file":	"Zend/zend.c",
			"line":	797,
			"primary_score":	999640,
			"second_score":	103391
		}, {
			"file":	"Zend/zend.c",
			"line":	798,
			"primary_score":	999640,
			"second_score":	103383
		}, {
			"file":	"Zend/zend.c",
			"line":	800,
			"primary_score":	999640,
			"second_score":	47188
		}, {
			"file":	"Zend/zend.c",
			"line":	801,
			"primary_score":	999640,
			"second_score":	47169
		}, {
			"file":	"Zend/zend.c",
			"line":	803,
			"primary_score":	999640,
			"second_score":	14813
		}, {
			"file":	"Zend/zend.c",
			"line":	804,
			"primary_score":	999640,
			"second_score":	14750
		}, {
			"file":	"Zend/zend.c",
			"line":	806,
			"primary_score":	999640,
			"second_score":	14749
		}, {
			"file":	"Zend/zend.c",
			"line":	807,
			"primary_score":	999640,
			"second_score":	14741
		}, {
			"file":	"Zend/zend.c",
			"line":	809,
			"primary_score":	999640,
			"second_score":	14740
		}, {
			"file":	"Zend/zend.c",
			"line":	810,
			"primary_score":	999640,
			"second_score":	14739
		}, {
			"file":	"Zend/zend.c",
			"line":	812,
			"primary_score":	999640,
			"second_score":	14738
		}, {
			"file":	"Zend/zend.c",
			"line":	813,
			"primary_score":	999640,
			"second_score":	6281
		}, {
			"file":	"Zend/zend.c",
			"line":	814,
			"primary_score":	999640,
			"second_score":	6280
		}, {
			"file":	"Zend/zend.c",
			"line":	822,
			"primary_score":	999640,
			"second_score":	6224
		}, {
			"file":	"Zend/zend.c",
			"line":	824,
			"primary_score":	999640,
			"second_score":	6124
		}, {
			"file":	"Zend/zend.c",
			"line":	898,
			"primary_score":	999640,
			"second_score":	119650
		}, {
			"file":	"Zend/zend.c",
			"line":	899,
			"primary_score":	999640,
			"second_score":	119644
		}, {
			"file":	"Zend/zend.c",
			"line":	900,
			"primary_score":	999640,
			"second_score":	119294
		}, {
			"file":	"Zend/zend.c",
			"line":	907,
			"primary_score":	999640,
			"second_score":	118341
		}, {
			"file":	"Zend/zend.c",
			"line":	908,
			"primary_score":	999640,
			"second_score":	118340
		}, {
			"file":	"Zend/zend.c",
			"line":	910,
			"primary_score":	999640,
			"second_score":	118339
		}, {
			"file":	"Zend/zend.c",
			"line":	911,
			"primary_score":	999640,
			"second_score":	118333
		}, {
			"file":	"Zend/zend.c",
			"line":	912,
			"primary_score":	999640,
			"second_score":	118323
		}, {
			"file":	"Zend/zend.c",
			"line":	915,
			"primary_score":	999640,
			"second_score":	118321
		}, {
			"file":	"Zend/zend.c",
			"line":	917,
			"primary_score":	999640,
			"second_score":	113539
		}, {
			"file":	"Zend/zend.c",
			"line":	918,
			"primary_score":	999640,
			"second_score":	113533
		}, {
			"file":	"Zend/zend.c",
			"line":	919,
			"primary_score":	999640,
			"second_score":	113365
		}, {
			"file":	"Zend/zend.c",
			"line":	921,
			"primary_score":	999640,
			"second_score":	113363
		}, {
			"file":	"Zend/zend.c",
			"line":	924,
			"primary_score":	999640,
			"second_score":	113336
		}, {
			"file":	"Zend/zend.c",
			"line":	925,
			"primary_score":	999640,
			"second_score":	113335
		}, {
			"file":	"Zend/zend.c",
			"line":	943,
			"primary_score":	999640,
			"second_score":	113331
		}, {
			"file":	"Zend/zend.c",
			"line":	944,
			"primary_score":	999640,
			"second_score":	113325
		}, {
			"file":	"Zend/zend.c",
			"line":	945,
			"primary_score":	999640,
			"second_score":	113322
		}, {
			"file":	"Zend/zend.c",
			"line":	1200,
			"primary_score":	999640,
			"second_score":	119698
		}, {
			"file":	"Zend/zend.c",
			"line":	1201,
			"primary_score":	999640,
			"second_score":	119697
		}, {
			"file":	"Zend/zend.c",
			"line":	1202,
			"primary_score":	999640,
			"second_score":	119696
		}, {
			"file":	"Zend/zend.c",
			"line":	1205,
			"primary_score":	999640,
			"second_score":	161641
		}, {
			"file":	"Zend/zend.c",
			"line":	1206,
			"primary_score":	999640,
			"second_score":	161640
		}, {
			"file":	"Zend/zend.c",
			"line":	1207,
			"primary_score":	999640,
			"second_score":	161639
		}, {
			"file":	"Zend/zend.c",
			"line":	1209,
			"primary_score":	999640,
			"second_score":	161517
		}, {
			"file":	"Zend/zend.c",
			"line":	1210,
			"primary_score":	999640,
			"second_score":	161438
		}, {
			"file":	"Zend/zend.c",
			"line":	1211,
			"primary_score":	999640,
			"second_score":	161437
		}, {
			"file":	"Zend/zend.c",
			"line":	1212,
			"primary_score":	999640,
			"second_score":	161436
		}, {
			"file":	"Zend/zend.c",
			"line":	1213,
			"primary_score":	999640,
			"second_score":	120286
		}, {
			"file":	"Zend/zend.c",
			"line":	1214,
			"primary_score":	999640,
			"second_score":	120284
		}, {
			"file":	"Zend/zend.c",
			"line":	1239,
			"primary_score":	999640,
			"second_score":	120283
		}, {
			"file":	"Zend/zend.c",
			"line":	1240,
			"primary_score":	999640,
			"second_score":	119717
		}, {
			"file":	"Zend/zend.c",
			"line":	1248,
			"primary_score":	999640,
			"second_score":	119695
		}, {
			"file":	"Zend/zend.c",
			"line":	1249,
			"primary_score":	999640,
			"second_score":	119694
		}, {
			"file":	"Zend/zend.c",
			"line":	1250,
			"primary_score":	999640,
			"second_score":	119693
		}, {
			"file":	"Zend/zend.c",
			"line":	1252,
			"primary_score":	999640,
			"second_score":	119692
		}, {
			"file":	"Zend/zend.c",
			"line":	1282,
			"primary_score":	999640,
			"second_score":	113433
		}, {
			"file":	"Zend/zend.h",
			"line":	379,
			"primary_score":	999640,
			"second_score":	15289
		}, {
			"file":	"Zend/zend.h",
			"line":	383,
			"primary_score":	999640,
			"second_score":	121081
		}, {
			"file":	"Zend/zend.h",
			"line":	387,
			"primary_score":	999640,
			"second_score":	125003
		}, {
			"file":	"Zend/zend.h",
			"line":	391,
			"primary_score":	999640,
			"second_score":	15291
		}, {
			"file":	"Zend/zend.h",
			"line":	395,
			"primary_score":	999640,
			"second_score":	123100
		}, {
			"file":	"Zend/zend.h",
			"line":	399,
			"primary_score":	999640,
			"second_score":	162417
		}, {
			"file":	"Zend/zend.h",
			"line":	403,
			"primary_score":	999640,
			"second_score":	17648
		}, {
			"file":	"Zend/zend.h",
			"line":	407,
			"primary_score":	999911,
			"second_score":	123468
		}, {
			"file":	"Zend/zend_API.c",
			"line":	241,
			"primary_score":	999870,
			"second_score":	123038
		}, {
			"file":	"Zend/zend_API.c",
			"line":	242,
			"primary_score":	999870,
			"second_score":	123037
		}, {
			"file":	"Zend/zend_API.c",
			"line":	307,
			"primary_score":	999640,
			"second_score":	122993
		}, {
			"file":	"Zend/zend_API.c",
			"line":	308,
			"primary_score":	999640,
			"second_score":	122992
		}, {
			"file":	"Zend/zend_API.c",
			"line":	309,
			"primary_score":	999640,
			"second_score":	122991
		}, {
			"file":	"Zend/zend_API.c",
			"line":	312,
			"primary_score":	999640,
			"second_score":	122990
		}, {
			"file":	"Zend/zend_API.c",
			"line":	313,
			"primary_score":	999640,
			"second_score":	122989
		}, {
			"file":	"Zend/zend_API.c",
			"line":	315,
			"primary_score":	999640,
			"second_score":	122988
		}, {
			"file":	"Zend/zend_API.c",
			"line":	320,
			"primary_score":	999640,
			"second_score":	122987
		}, {
			"file":	"Zend/zend_API.c",
			"line":	325,
			"primary_score":	999640,
			"second_score":	122986
		}, {
			"file":	"Zend/zend_API.c",
			"line":	329,
			"primary_score":	999815,
			"second_score":	123960
		}, {
			"file":	"Zend/zend_API.c",
			"line":	330,
			"primary_score":	999815,
			"second_score":	123959
		}, {
			"file":	"Zend/zend_API.c",
			"line":	367,
			"primary_score":	999816,
			"second_score":	123958
		}, {
			"file":	"Zend/zend_API.c",
			"line":	368,
			"primary_score":	999816,
			"second_score":	123957
		}, {
			"file":	"Zend/zend_API.c",
			"line":	369,
			"primary_score":	999816,
			"second_score":	123956
		}, {
			"file":	"Zend/zend_API.c",
			"line":	378,
			"primary_score":	999815,
			"second_score":	123955
		}, {
			"file":	"Zend/zend_API.c",
			"line":	416,
			"primary_score":	999640,
			"second_score":	122985
		}, {
			"file":	"Zend/zend_API.c",
			"line":	417,
			"primary_score":	999640,
			"second_score":	122984
		}, {
			"file":	"Zend/zend_API.c",
			"line":	418,
			"primary_score":	999640,
			"second_score":	122983
		}, {
			"file":	"Zend/zend_API.c",
			"line":	431,
			"primary_score":	999640,
			"second_score":	122982
		}, {
			"file":	"Zend/zend_API.c",
			"line":	432,
			"primary_score":	999640,
			"second_score":	122981
		}, {
			"file":	"Zend/zend_API.c",
			"line":	438,
			"primary_score":	999640,
			"second_score":	122979
		}, {
			"file":	"Zend/zend_API.c",
			"line":	439,
			"primary_score":	999640,
			"second_score":	122978
		}, {
			"file":	"Zend/zend_API.c",
			"line":	440,
			"primary_score":	999640,
			"second_score":	122977
		}, {
			"file":	"Zend/zend_API.c",
			"line":	453,
			"primary_score":	999640,
			"second_score":	122976
		}, {
			"file":	"Zend/zend_API.c",
			"line":	544,
			"primary_score":	999937,
			"second_score":	146054
		}, {
			"file":	"Zend/zend_API.c",
			"line":	545,
			"primary_score":	999937,
			"second_score":	146053
		}, {
			"file":	"Zend/zend_API.c",
			"line":	547,
			"primary_score":	999937,
			"second_score":	146052
		}, {
			"file":	"Zend/zend_API.c",
			"line":	551,
			"primary_score":	999938,
			"second_score":	146051
		}, {
			"file":	"Zend/zend_API.c",
			"line":	553,
			"primary_score":	999956,
			"second_score":	146038
		}, {
			"file":	"Zend/zend_API.c",
			"line":	562,
			"primary_score":	999956,
			"second_score":	146037
		}, {
			"file":	"Zend/zend_API.c",
			"line":	643,
			"primary_score":	999640,
			"second_score":	122781
		}, {
			"file":	"Zend/zend_API.c",
			"line":	644,
			"primary_score":	999640,
			"second_score":	122780
		}, {
			"file":	"Zend/zend_API.c",
			"line":	647,
			"primary_score":	999640,
			"second_score":	122779
		}, {
			"file":	"Zend/zend_API.c",
			"line":	650,
			"primary_score":	999640,
			"second_score":	122778
		}, {
			"file":	"Zend/zend_API.c",
			"line":	656,
			"primary_score":	999640,
			"second_score":	122975
		}, {
			"file":	"Zend/zend_API.c",
			"line":	658,
			"primary_score":	999640,
			"second_score":	122974
		}, {
			"file":	"Zend/zend_API.c",
			"line":	664,
			"primary_score":	999640,
			"second_score":	122996
		}, {
			"file":	"Zend/zend_API.c",
			"line":	665,
			"primary_score":	999640,
			"second_score":	122995
		}, {
			"file":	"Zend/zend_API.c",
			"line":	667,
			"primary_score":	999640,
			"second_score":	122994
		}, {
			"file":	"Zend/zend_API.c",
			"line":	668,
			"primary_score":	999640,
			"second_score":	122973
		}, {
			"file":	"Zend/zend_API.c",
			"line":	688,
			"primary_score":	999640,
			"second_score":	122972
		}, {
			"file":	"Zend/zend_API.c",
			"line":	694,
			"primary_score":	999640,
			"second_score":	122852
		}, {
			"file":	"Zend/zend_API.c",
			"line":	695,
			"primary_score":	999640,
			"second_score":	122851
		}, {
			"file":	"Zend/zend_API.c",
			"line":	696,
			"primary_score":	999640,
			"second_score":	122850
		}, {
			"file":	"Zend/zend_API.c",
			"line":	697,
			"primary_score":	999640,
			"second_score":	122849
		}, {
			"file":	"Zend/zend_API.c",
			"line":	698,
			"primary_score":	999640,
			"second_score":	122848
		}, {
			"file":	"Zend/zend_API.c",
			"line":	699,
			"primary_score":	999640,
			"second_score":	122847
		}, {
			"file":	"Zend/zend_API.c",
			"line":	700,
			"primary_score":	999640,
			"second_score":	122846
		}, {
			"file":	"Zend/zend_API.c",
			"line":	701,
			"primary_score":	999640,
			"second_score":	122845
		}, {
			"file":	"Zend/zend_API.c",
			"line":	702,
			"primary_score":	999640,
			"second_score":	122844
		}, {
			"file":	"Zend/zend_API.c",
			"line":	703,
			"primary_score":	999640,
			"second_score":	122843
		}, {
			"file":	"Zend/zend_API.c",
			"line":	704,
			"primary_score":	999640,
			"second_score":	122842
		}, {
			"file":	"Zend/zend_API.c",
			"line":	706,
			"primary_score":	999640,
			"second_score":	122841
		}, {
			"file":	"Zend/zend_API.c",
			"line":	707,
			"primary_score":	999640,
			"second_score":	122834
		}, {
			"file":	"Zend/zend_API.c",
			"line":	708,
			"primary_score":	999640,
			"second_score":	122833
		}, {
			"file":	"Zend/zend_API.c",
			"line":	718,
			"primary_score":	999640,
			"second_score":	123011
		}, {
			"file":	"Zend/zend_API.c",
			"line":	722,
			"primary_score":	999640,
			"second_score":	124043
		}, {
			"file":	"Zend/zend_API.c",
			"line":	742,
			"primary_score":	999749,
			"second_score":	120926
		}, {
			"file":	"Zend/zend_API.c",
			"line":	744,
			"primary_score":	999749,
			"second_score":	120925
		}, {
			"file":	"Zend/zend_API.c",
			"line":	745,
			"primary_score":	999749,
			"second_score":	120924
		}, {
			"file":	"Zend/zend_API.c",
			"line":	748,
			"primary_score":	999749,
			"second_score":	120923
		}, {
			"file":	"Zend/zend_API.c",
			"line":	749,
			"primary_score":	999749,
			"second_score":	120922
		}, {
			"file":	"Zend/zend_API.c",
			"line":	764,
			"primary_score":	999640,
			"second_score":	122831
		}, {
			"file":	"Zend/zend_API.c",
			"line":	765,
			"primary_score":	999640,
			"second_score":	120920
		}, {
			"file":	"Zend/zend_API.c",
			"line":	768,
			"primary_score":	999640,
			"second_score":	122830
		}, {
			"file":	"Zend/zend_API.c",
			"line":	770,
			"primary_score":	999749,
			"second_score":	120918
		}, {
			"file":	"Zend/zend_API.c",
			"line":	771,
			"primary_score":	999749,
			"second_score":	120917
		}, {
			"file":	"Zend/zend_API.c",
			"line":	774,
			"primary_score":	999640,
			"second_score":	122829
		}, {
			"file":	"Zend/zend_API.c",
			"line":	775,
			"primary_score":	999912,
			"second_score":	160061
		}, {
			"file":	"Zend/zend_API.c",
			"line":	787,
			"primary_score":	999912,
			"second_score":	160060
		}, {
			"file":	"Zend/zend_API.c",
			"line":	790,
			"primary_score":	999640,
			"second_score":	122828
		}, {
			"file":	"Zend/zend_API.c",
			"line":	792,
			"primary_score":	999640,
			"second_score":	122826
		}, {
			"file":	"Zend/zend_API.c",
			"line":	798,
			"primary_score":	999640,
			"second_score":	122825
		}, {
			"file":	"Zend/zend_API.c",
			"line":	799,
			"primary_score":	999640,
			"second_score":	122824
		}, {
			"file":	"Zend/zend_API.c",
			"line":	800,
			"primary_score":	999640,
			"second_score":	122798
		}, {
			"file":	"Zend/zend_API.c",
			"line":	801,
			"primary_score":	999640,
			"second_score":	123976
		}, {
			"file":	"Zend/zend_API.c",
			"line":	804,
			"primary_score":	999640,
			"second_score":	122796
		}, {
			"file":	"Zend/zend_API.c",
			"line":	805,
			"primary_score":	999749,
			"second_score":	120908
		}, {
			"file":	"Zend/zend_API.c",
			"line":	808,
			"primary_score":	999749,
			"second_score":	120907
		}, {
			"file":	"Zend/zend_API.c",
			"line":	809,
			"primary_score":	999749,
			"second_score":	120906
		}, {
			"file":	"Zend/zend_API.c",
			"line":	810,
			"primary_score":	999749,
			"second_score":	120905
		}, {
			"file":	"Zend/zend_API.c",
			"line":	812,
			"primary_score":	999749,
			"second_score":	120904
		}, {
			"file":	"Zend/zend_API.c",
			"line":	813,
			"primary_score":	999749,
			"second_score":	120903
		}, {
			"file":	"Zend/zend_API.c",
			"line":	814,
			"primary_score":	999749,
			"second_score":	120902
		}, {
			"file":	"Zend/zend_API.c",
			"line":	816,
			"primary_score":	999749,
			"second_score":	120900
		}, {
			"file":	"Zend/zend_API.c",
			"line":	819,
			"primary_score":	999749,
			"second_score":	120899
		}, {
			"file":	"Zend/zend_API.c",
			"line":	820,
			"primary_score":	999749,
			"second_score":	120871
		}, {
			"file":	"Zend/zend_API.c",
			"line":	821,
			"primary_score":	999749,
			"second_score":	120870
		}, {
			"file":	"Zend/zend_API.c",
			"line":	825,
			"primary_score":	999749,
			"second_score":	120869
		}, {
			"file":	"Zend/zend_API.c",
			"line":	826,
			"primary_score":	999749,
			"second_score":	120868
		}, {
			"file":	"Zend/zend_API.c",
			"line":	827,
			"primary_score":	999749,
			"second_score":	120867
		}, {
			"file":	"Zend/zend_API.c",
			"line":	834,
			"primary_score":	999640,
			"second_score":	122999
		}, {
			"file":	"Zend/zend_API.c",
			"line":	836,
			"primary_score":	999640,
			"second_score":	122997
		}, {
			"file":	"Zend/zend_API.c",
			"line":	844,
			"primary_score":	999640,
			"second_score":	122971
		}, {
			"file":	"Zend/zend_API.c",
			"line":	847,
			"primary_score":	999640,
			"second_score":	122772
		}, {
			"file":	"Zend/zend_API.c",
			"line":	866,
			"primary_score":	999934,
			"second_score":	160091
		}, {
			"file":	"Zend/zend_API.c",
			"line":	867,
			"primary_score":	999934,
			"second_score":	160090
		}, {
			"file":	"Zend/zend_API.c",
			"line":	869,
			"primary_score":	999934,
			"second_score":	160089
		}, {
			"file":	"Zend/zend_API.c",
			"line":	871,
			"primary_score":	999934,
			"second_score":	160085
		}, {
			"file":	"Zend/zend_API.c",
			"line":	872,
			"primary_score":	999934,
			"second_score":	160084
		}, {
			"file":	"Zend/zend_API.c",
			"line":	873,
			"primary_score":	999934,
			"second_score":	160059
		}, {
			"file":	"Zend/zend_API.c",
			"line":	875,
			"primary_score":	999934,
			"second_score":	160058
		}, {
			"file":	"Zend/zend_API.c",
			"line":	881,
			"primary_score":	999640,
			"second_score":	122860
		}, {
			"file":	"Zend/zend_API.c",
			"line":	882,
			"primary_score":	999640,
			"second_score":	122859
		}, {
			"file":	"Zend/zend_API.c",
			"line":	884,
			"primary_score":	999640,
			"second_score":	122858
		}, {
			"file":	"Zend/zend_API.c",
			"line":	886,
			"primary_score":	999640,
			"second_score":	122854
		}, {
			"file":	"Zend/zend_API.c",
			"line":	887,
			"primary_score":	999640,
			"second_score":	122853
		}, {
			"file":	"Zend/zend_API.c",
			"line":	888,
			"primary_score":	999640,
			"second_score":	122771
		}, {
			"file":	"Zend/zend_API.c",
			"line":	890,
			"primary_score":	999640,
			"second_score":	122770
		}, {
			"file":	"Zend/zend_API.c",
			"line":	896,
			"primary_score":	999893,
			"second_score":	123054
		}, {
			"file":	"Zend/zend_API.c",
			"line":	897,
			"primary_score":	999893,
			"second_score":	123053
		}, {
			"file":	"Zend/zend_API.c",
			"line":	898,
			"primary_score":	999893,
			"second_score":	123052
		}, {
			"file":	"Zend/zend_API.c",
			"line":	899,
			"primary_score":	999893,
			"second_score":	123051
		}, {
			"file":	"Zend/zend_API.c",
			"line":	900,
			"primary_score":	999893,
			"second_score":	123050
		}, {
			"file":	"Zend/zend_API.c",
			"line":	902,
			"primary_score":	999893,
			"second_score":	123049
		}, {
			"file":	"Zend/zend_API.c",
			"line":	909,
			"primary_score":	999930,
			"second_score":	123048
		}, {
			"file":	"Zend/zend_API.c",
			"line":	910,
			"primary_score":	999932,
			"second_score":	123044
		}, {
			"file":	"Zend/zend_API.c",
			"line":	912,
			"primary_score":	999932,
			"second_score":	123043
		}, {
			"file":	"Zend/zend_API.c",
			"line":	914,
			"primary_score":	999932,
			"second_score":	123042
		}, {
			"file":	"Zend/zend_API.c",
			"line":	915,
			"primary_score":	999932,
			"second_score":	123041
		}, {
			"file":	"Zend/zend_API.c",
			"line":	916,
			"primary_score":	999932,
			"second_score":	123040
		}, {
			"file":	"Zend/zend_API.c",
			"line":	918,
			"primary_score":	999932,
			"second_score":	123039
		}, {
			"file":	"Zend/zend_API.c",
			"line":	923,
			"primary_score":	999932,
			"second_score":	123026
		}, {
			"file":	"Zend/zend_API.c",
			"line":	924,
			"primary_score":	999932,
			"second_score":	122969
		}, {
			"file":	"Zend/zend_API.c",
			"line":	926,
			"primary_score":	999895,
			"second_score":	122968
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1018,
			"primary_score":	999831,
			"second_score":	147023
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1019,
			"primary_score":	999831,
			"second_score":	147022
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1020,
			"primary_score":	999831,
			"second_score":	147021
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1021,
			"primary_score":	999831,
			"second_score":	147020
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1023,
			"primary_score":	999831,
			"second_score":	147019
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1024,
			"primary_score":	999831,
			"second_score":	147018
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1026,
			"primary_score":	999831,
			"second_score":	146827
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1032,
			"primary_score":	999831,
			"second_score":	146826
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1068,
			"primary_score":	999831,
			"second_score":	146825
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1072,
			"primary_score":	999831,
			"second_score":	146824
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1073,
			"primary_score":	999831,
			"second_score":	146823
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1080,
			"primary_score":	999832,
			"second_score":	146727
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1082,
			"primary_score":	999832,
			"second_score":	146726
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1101,
			"primary_score":	999831,
			"second_score":	147026
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1103,
			"primary_score":	999831,
			"second_score":	147025
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1108,
			"primary_score":	999831,
			"second_score":	147024
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1110,
			"primary_score":	999831,
			"second_score":	146822
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1111,
			"primary_score":	999831,
			"second_score":	146821
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1120,
			"primary_score":	999878,
			"second_score":	146820
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1122,
			"primary_score":	999831,
			"second_score":	146706
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1128,
			"primary_score":	999831,
			"second_score":	147027
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1368,
			"primary_score":	999640,
			"second_score":	123521
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1370,
			"primary_score":	999640,
			"second_score":	123520
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1371,
			"primary_score":	999640,
			"second_score":	123410
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1373,
			"primary_score":	999640,
			"second_score":	123295
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1779,
			"primary_score":	999640,
			"second_score":	103382
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1780,
			"primary_score":	999640,
			"second_score":	103381
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1781,
			"primary_score":	999640,
			"second_score":	103380
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2171,
			"primary_score":	999640,
			"second_score":	50133
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2172,
			"primary_score":	999640,
			"second_score":	50132
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2173,
			"primary_score":	999640,
			"second_score":	50131
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2175,
			"primary_score":	999640,
			"second_score":	50130
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2176,
			"primary_score":	999640,
			"second_score":	50129
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2178,
			"primary_score":	999640,
			"second_score":	50128
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2179,
			"primary_score":	999640,
			"second_score":	47249
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2185,
			"primary_score":	999640,
			"second_score":	47248
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2186,
			"primary_score":	999640,
			"second_score":	47200
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2187,
			"primary_score":	999640,
			"second_score":	47199
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2213,
			"primary_score":	999640,
			"second_score":	50140
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2215,
			"primary_score":	999640,
			"second_score":	50139
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2220,
			"primary_score":	999640,
			"second_score":	50138
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2224,
			"primary_score":	999640,
			"second_score":	53380
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2228,
			"primary_score":	999640,
			"second_score":	50137
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2232,
			"primary_score":	999640,
			"second_score":	52697
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2233,
			"primary_score":	999640,
			"second_score":	53765
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2238,
			"primary_score":	999640,
			"second_score":	50136
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2239,
			"primary_score":	999640,
			"second_score":	50135
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2240,
			"primary_score":	999640,
			"second_score":	50134
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2245,
			"primary_score":	999640,
			"second_score":	47198
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2284,
			"primary_score":	999640,
			"second_score":	119257
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2286,
			"primary_score":	999640,
			"second_score":	119256
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2287,
			"primary_score":	999640,
			"second_score":	119250
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2290,
			"primary_score":	999640,
			"second_score":	119249
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2292,
			"primary_score":	999640,
			"second_score":	119248
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2293,
			"primary_score":	999640,
			"second_score":	118666
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2295,
			"primary_score":	999640,
			"second_score":	118665
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2296,
			"primary_score":	999640,
			"second_score":	118532
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2299,
			"primary_score":	999640,
			"second_score":	118531
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2305,
			"primary_score":	999640,
			"second_score":	114564
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2307,
			"primary_score":	999640,
			"second_score":	114563
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2331,
			"primary_score":	999640,
			"second_score":	113313
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2335,
			"primary_score":	999640,
			"second_score":	113312
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2337,
			"primary_score":	999640,
			"second_score":	113311
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3782,
			"primary_score":	999920,
			"second_score":	146499
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3783,
			"primary_score":	999920,
			"second_score":	146498
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3784,
			"primary_score":	999920,
			"second_score":	146497
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3785,
			"primary_score":	999920,
			"second_score":	146496
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3793,
			"primary_score":	999920,
			"second_score":	146501
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3794,
			"primary_score":	999920,
			"second_score":	146500
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3795,
			"primary_score":	999920,
			"second_score":	146495
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3800,
			"primary_score":	999920,
			"second_score":	146494
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3801,
			"primary_score":	999920,
			"second_score":	146493
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3807,
			"primary_score":	999920,
			"second_score":	146378
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3808,
			"primary_score":	999920,
			"second_score":	146377
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3809,
			"primary_score":	999920,
			"second_score":	146376
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3814,
			"primary_score":	999920,
			"second_score":	146375
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3817,
			"primary_score":	999920,
			"second_score":	146374
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	144,
			"primary_score":	999640,
			"second_score":	3194
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	293,
			"primary_score":	999640,
			"second_score":	3197
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	669,
			"primary_score":	999640,
			"second_score":	112836
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	671,
			"primary_score":	999640,
			"second_score":	112835
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	672,
			"primary_score":	999640,
			"second_score":	112834
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	695,
			"primary_score":	999640,
			"second_score":	112894
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	697,
			"primary_score":	999640,
			"second_score":	112893
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	698,
			"primary_score":	999640,
			"second_score":	112892
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	721,
			"primary_score":	999640,
			"second_score":	112843
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	722,
			"primary_score":	999640,
			"second_score":	112842
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	724,
			"primary_score":	999640,
			"second_score":	112841
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	726,
			"primary_score":	999640,
			"second_score":	112840
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	727,
			"primary_score":	999640,
			"second_score":	112839
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	728,
			"primary_score":	999640,
			"second_score":	112838
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	730,
			"primary_score":	999640,
			"second_score":	112837
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	731,
			"primary_score":	999640,
			"second_score":	112833
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	732,
			"primary_score":	999640,
			"second_score":	112832
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	733,
			"primary_score":	999640,
			"second_score":	112831
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	734,
			"primary_score":	999640,
			"second_score":	112830
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	735,
			"primary_score":	999640,
			"second_score":	112829
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	736,
			"primary_score":	999640,
			"second_score":	112828
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	737,
			"primary_score":	999640,
			"second_score":	112827
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	739,
			"primary_score":	999640,
			"second_score":	116651
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	741,
			"primary_score":	999640,
			"second_score":	116650
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	742,
			"primary_score":	999640,
			"second_score":	116649
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	744,
			"primary_score":	999640,
			"second_score":	116648
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	745,
			"primary_score":	999640,
			"second_score":	116647
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	746,
			"primary_score":	999640,
			"second_score":	116646
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	747,
			"primary_score":	999640,
			"second_score":	116645
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	748,
			"primary_score":	999640,
			"second_score":	116644
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	749,
			"primary_score":	999640,
			"second_score":	116643
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	750,
			"primary_score":	999640,
			"second_score":	116642
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	764,
			"primary_score":	999640,
			"second_score":	141895
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	766,
			"primary_score":	999640,
			"second_score":	141894
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	768,
			"primary_score":	999640,
			"second_score":	141893
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	769,
			"primary_score":	999640,
			"second_score":	141892
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	770,
			"primary_score":	999640,
			"second_score":	141891
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	772,
			"primary_score":	999640,
			"second_score":	141890
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	774,
			"primary_score":	999640,
			"second_score":	141889
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	775,
			"primary_score":	999640,
			"second_score":	141888
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	776,
			"primary_score":	999640,
			"second_score":	141887
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	782,
			"primary_score":	999640,
			"second_score":	112880
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	783,
			"primary_score":	999640,
			"second_score":	112879
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	785,
			"primary_score":	999640,
			"second_score":	112878
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	787,
			"primary_score":	999640,
			"second_score":	112877
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	788,
			"primary_score":	999640,
			"second_score":	112876
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	791,
			"primary_score":	999640,
			"second_score":	112875
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	796,
			"primary_score":	999640,
			"second_score":	112874
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	797,
			"primary_score":	999640,
			"second_score":	112873
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	798,
			"primary_score":	999640,
			"second_score":	112872
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	799,
			"primary_score":	999640,
			"second_score":	112871
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	801,
			"primary_score":	999640,
			"second_score":	112867
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	802,
			"primary_score":	999640,
			"second_score":	112865
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	803,
			"primary_score":	999640,
			"second_score":	112864
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	804,
			"primary_score":	999640,
			"second_score":	112863
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	829,
			"primary_score":	999640,
			"second_score":	141927
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	834,
			"primary_score":	999640,
			"second_score":	141926
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	835,
			"primary_score":	999640,
			"second_score":	141925
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	837,
			"primary_score":	999640,
			"second_score":	141924
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	838,
			"primary_score":	999640,
			"second_score":	141923
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	839,
			"primary_score":	999640,
			"second_score":	141922
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	841,
			"primary_score":	999640,
			"second_score":	141921
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	842,
			"primary_score":	999640,
			"second_score":	141920
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	886,
			"primary_score":	999640,
			"second_score":	113218
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	887,
			"primary_score":	999640,
			"second_score":	113217
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	889,
			"primary_score":	999640,
			"second_score":	113216
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	890,
			"primary_score":	999640,
			"second_score":	113215
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	892,
			"primary_score":	999640,
			"second_score":	113214
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	893,
			"primary_score":	999640,
			"second_score":	113213
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	900,
			"primary_score":	999640,
			"second_score":	113212
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	901,
			"primary_score":	999640,
			"second_score":	113211
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	902,
			"primary_score":	999640,
			"second_score":	112958
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	903,
			"primary_score":	999640,
			"second_score":	112957
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	904,
			"primary_score":	999640,
			"second_score":	112956
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	905,
			"primary_score":	999640,
			"second_score":	112955
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	907,
			"primary_score":	999640,
			"second_score":	112954
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	908,
			"primary_score":	999640,
			"second_score":	112953
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1589,
			"primary_score":	999640,
			"second_score":	3212
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1590,
			"primary_score":	999640,
			"second_score":	3211
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1591,
			"primary_score":	999640,
			"second_score":	3210
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1592,
			"primary_score":	999640,
			"second_score":	3209
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1594,
			"primary_score":	999640,
			"second_score":	3208
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1598,
			"primary_score":	999640,
			"second_score":	3207
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1604,
			"primary_score":	999640,
			"second_score":	3206
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1659,
			"primary_score":	999640,
			"second_score":	3205
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1660,
			"primary_score":	999640,
			"second_score":	3204
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1661,
			"primary_score":	999640,
			"second_score":	3203
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1662,
			"primary_score":	999640,
			"second_score":	3202
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1663,
			"primary_score":	999640,
			"second_score":	3201
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1664,
			"primary_score":	999640,
			"second_score":	3200
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1665,
			"primary_score":	999640,
			"second_score":	3199
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1666,
			"primary_score":	999640,
			"second_score":	3198
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1668,
			"primary_score":	999640,
			"second_score":	3196
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1669,
			"primary_score":	999640,
			"second_score":	3195
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1670,
			"primary_score":	999640,
			"second_score":	3193
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1671,
			"primary_score":	999640,
			"second_score":	3192
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1674,
			"primary_score":	999640,
			"second_score":	113224
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1676,
			"primary_score":	999640,
			"second_score":	113223
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1677,
			"primary_score":	999640,
			"second_score":	113222
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1682,
			"primary_score":	999640,
			"second_score":	113221
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1695,
			"primary_score":	999640,
			"second_score":	113220
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1699,
			"primary_score":	999640,
			"second_score":	113219
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1700,
			"primary_score":	999640,
			"second_score":	112952
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1701,
			"primary_score":	999640,
			"second_score":	112951
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1702,
			"primary_score":	999640,
			"second_score":	112950
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1707,
			"primary_score":	999640,
			"second_score":	112949
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1708,
			"primary_score":	999640,
			"second_score":	112948
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1709,
			"primary_score":	999640,
			"second_score":	112947
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1711,
			"primary_score":	999640,
			"second_score":	112946
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1712,
			"primary_score":	999640,
			"second_score":	112945
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1714,
			"primary_score":	999640,
			"second_score":	112944
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1715,
			"primary_score":	999640,
			"second_score":	112943
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1716,
			"primary_score":	999640,
			"second_score":	112939
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1717,
			"primary_score":	999640,
			"second_score":	112933
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1719,
			"primary_score":	999640,
			"second_score":	112915
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1720,
			"primary_score":	999640,
			"second_score":	112914
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1722,
			"primary_score":	999640,
			"second_score":	112819
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1792,
			"primary_score":	999640,
			"second_score":	112904
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1793,
			"primary_score":	999640,
			"second_score":	112903
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1794,
			"primary_score":	999640,
			"second_score":	112899
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1795,
			"primary_score":	999640,
			"second_score":	112898
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1797,
			"primary_score":	999640,
			"second_score":	112897
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1801,
			"primary_score":	999640,
			"second_score":	112896
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1854,
			"primary_score":	999640,
			"second_score":	112895
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1855,
			"primary_score":	999640,
			"second_score":	112891
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1860,
			"primary_score":	999640,
			"second_score":	112890
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1865,
			"primary_score":	999640,
			"second_score":	112913
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1866,
			"primary_score":	999640,
			"second_score":	112912
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1867,
			"primary_score":	999640,
			"second_score":	112911
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1868,
			"primary_score":	999640,
			"second_score":	112910
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1869,
			"primary_score":	999640,
			"second_score":	112909
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1870,
			"primary_score":	999640,
			"second_score":	112908
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1871,
			"primary_score":	999640,
			"second_score":	112907
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1873,
			"primary_score":	999640,
			"second_score":	112906
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1874,
			"primary_score":	999640,
			"second_score":	120774
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1875,
			"primary_score":	999640,
			"second_score":	120773
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1877,
			"primary_score":	999640,
			"second_score":	120772
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1881,
			"primary_score":	999640,
			"second_score":	120771
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1887,
			"primary_score":	999640,
			"second_score":	120770
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1888,
			"primary_score":	999640,
			"second_score":	120769
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1889,
			"primary_score":	999640,
			"second_score":	120768
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1890,
			"primary_score":	999640,
			"second_score":	120767
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1891,
			"primary_score":	999640,
			"second_score":	120766
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1892,
			"primary_score":	999640,
			"second_score":	120765
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1899,
			"primary_score":	999640,
			"second_score":	141945
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1900,
			"primary_score":	999640,
			"second_score":	141944
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1902,
			"primary_score":	999640,
			"second_score":	141943
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1903,
			"primary_score":	999640,
			"second_score":	141939
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1907,
			"primary_score":	999640,
			"second_score":	141938
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1915,
			"primary_score":	999640,
			"second_score":	112905
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1917,
			"primary_score":	999640,
			"second_score":	112889
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1934,
			"primary_score":	999640,
			"second_score":	112888
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1995,
			"primary_score":	999640,
			"second_score":	112887
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1997,
			"primary_score":	999640,
			"second_score":	112886
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1998,
			"primary_score":	999640,
			"second_score":	112885
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1999,
			"primary_score":	999640,
			"second_score":	112884
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2000,
			"primary_score":	999640,
			"second_score":	112883
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2001,
			"primary_score":	999640,
			"second_score":	112881
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2003,
			"primary_score":	999640,
			"second_score":	112862
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2006,
			"primary_score":	999640,
			"second_score":	112861
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2008,
			"primary_score":	999640,
			"second_score":	112860
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2009,
			"primary_score":	999640,
			"second_score":	157907
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2010,
			"primary_score":	999640,
			"second_score":	157906
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2012,
			"primary_score":	999640,
			"second_score":	112859
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2015,
			"primary_score":	999640,
			"second_score":	112858
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2016,
			"primary_score":	999640,
			"second_score":	112852
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2017,
			"primary_score":	999640,
			"second_score":	112851
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2020,
			"primary_score":	999640,
			"second_score":	112845
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2021,
			"primary_score":	999640,
			"second_score":	112844
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2027,
			"primary_score":	999640,
			"second_score":	112826
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2029,
			"primary_score":	999640,
			"second_score":	112825
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2030,
			"primary_score":	999640,
			"second_score":	112824
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2031,
			"primary_score":	999640,
			"second_score":	112823
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2034,
			"primary_score":	999640,
			"second_score":	112822
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2036,
			"primary_score":	999640,
			"second_score":	112820
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2042,
			"primary_score":	999640,
			"second_score":	113278
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2043,
			"primary_score":	999640,
			"second_score":	113277
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2044,
			"primary_score":	999640,
			"second_score":	113276
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2046,
			"primary_score":	999640,
			"second_score":	113275
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2050,
			"primary_score":	999640,
			"second_score":	113274
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2051,
			"primary_score":	999640,
			"second_score":	113273
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2052,
			"primary_score":	999640,
			"second_score":	113272
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2059,
			"primary_score":	999640,
			"second_score":	113271
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2060,
			"primary_score":	999640,
			"second_score":	113270
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2061,
			"primary_score":	999640,
			"second_score":	113269
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2063,
			"primary_score":	999640,
			"second_score":	113268
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2064,
			"primary_score":	999640,
			"second_score":	113267
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2065,
			"primary_score":	999640,
			"second_score":	113266
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2066,
			"primary_score":	999640,
			"second_score":	113265
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2072,
			"primary_score":	999640,
			"second_score":	113264
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2076,
			"primary_score":	999640,
			"second_score":	113603
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2078,
			"primary_score":	999640,
			"second_score":	113601
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2080,
			"primary_score":	999640,
			"second_score":	113600
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2081,
			"primary_score":	999640,
			"second_score":	113599
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2085,
			"primary_score":	999640,
			"second_score":	113598
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2086,
			"primary_score":	999640,
			"second_score":	113597
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2087,
			"primary_score":	999640,
			"second_score":	113596
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2088,
			"primary_score":	999640,
			"second_score":	113577
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2090,
			"primary_score":	999640,
			"second_score":	113576
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2094,
			"primary_score":	999640,
			"second_score":	113575
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2095,
			"primary_score":	999640,
			"second_score":	113569
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2097,
			"primary_score":	999640,
			"second_score":	113551
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2102,
			"primary_score":	999640,
			"second_score":	124602
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2103,
			"primary_score":	999640,
			"second_score":	124601
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2104,
			"primary_score":	999640,
			"second_score":	124600
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2105,
			"primary_score":	999640,
			"second_score":	124599
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2106,
			"primary_score":	999640,
			"second_score":	124598
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2108,
			"primary_score":	999640,
			"second_score":	124597
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2109,
			"primary_score":	999640,
			"second_score":	124596
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2111,
			"primary_score":	999640,
			"second_score":	162247
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2112,
			"primary_score":	999640,
			"second_score":	162246
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2113,
			"primary_score":	999640,
			"second_score":	162245
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2114,
			"primary_score":	999640,
			"second_score":	162244
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2116,
			"primary_score":	999640,
			"second_score":	162243
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2120,
			"primary_score":	999640,
			"second_score":	162242
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2121,
			"primary_score":	999640,
			"second_score":	162241
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2123,
			"primary_score":	999640,
			"second_score":	162240
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2124,
			"primary_score":	999640,
			"second_score":	162239
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2126,
			"primary_score":	999640,
			"second_score":	162238
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2127,
			"primary_score":	999640,
			"second_score":	162236
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2128,
			"primary_score":	999640,
			"second_score":	162235
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2129,
			"primary_score":	999640,
			"second_score":	162234
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2130,
			"primary_score":	999640,
			"second_score":	162233
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2134,
			"primary_score":	999640,
			"second_score":	162214
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2135,
			"primary_score":	999640,
			"second_score":	162208
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2137,
			"primary_score":	999640,
			"second_score":	162207
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2140,
			"primary_score":	999640,
			"second_score":	162201
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2141,
			"primary_score":	999640,
			"second_score":	162183
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2142,
			"primary_score":	999640,
			"second_score":	162182
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2144,
			"primary_score":	999640,
			"second_score":	162180
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2145,
			"primary_score":	999640,
			"second_score":	162179
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2153,
			"primary_score":	999640,
			"second_score":	126730
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2154,
			"primary_score":	999640,
			"second_score":	126729
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2160,
			"primary_score":	999640,
			"second_score":	126728
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2161,
			"primary_score":	999640,
			"second_score":	126727
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2162,
			"primary_score":	999640,
			"second_score":	126726
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2163,
			"primary_score":	999640,
			"second_score":	126725
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2165,
			"primary_score":	999640,
			"second_score":	126724
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2170,
			"primary_score":	999640,
			"second_score":	126723
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2173,
			"primary_score":	999640,
			"second_score":	126722
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2175,
			"primary_score":	999640,
			"second_score":	126721
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2176,
			"primary_score":	999640,
			"second_score":	126720
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2178,
			"primary_score":	999640,
			"second_score":	126719
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2179,
			"primary_score":	999640,
			"second_score":	126718
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2180,
			"primary_score":	999640,
			"second_score":	126717
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2187,
			"primary_score":	999640,
			"second_score":	126716
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2398,
			"primary_score":	999640,
			"second_score":	120892
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2400,
			"primary_score":	999640,
			"second_score":	120891
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2403,
			"primary_score":	999640,
			"second_score":	120890
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2408,
			"primary_score":	999640,
			"second_score":	113281
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2410,
			"primary_score":	999640,
			"second_score":	113280
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2414,
			"primary_score":	999640,
			"second_score":	113279
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2419,
			"primary_score":	999640,
			"second_score":	124605
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2421,
			"primary_score":	999640,
			"second_score":	124604
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2424,
			"primary_score":	999640,
			"second_score":	124603
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2459,
			"primary_score":	999640,
			"second_score":	132720
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2460,
			"primary_score":	999640,
			"second_score":	132719
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2462,
			"primary_score":	999640,
			"second_score":	132718
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2468,
			"primary_score":	999640,
			"second_score":	132717
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2472,
			"primary_score":	999640,
			"second_score":	132716
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2507,
			"primary_score":	999640,
			"second_score":	132721
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2517,
			"primary_score":	999640,
			"second_score":	121504
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2528,
			"primary_score":	999640,
			"second_score":	160335
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2530,
			"primary_score":	999640,
			"second_score":	160334
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2531,
			"primary_score":	999640,
			"second_score":	160247
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2534,
			"primary_score":	999640,
			"second_score":	160246
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2535,
			"primary_score":	999640,
			"second_score":	160245
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2554,
			"primary_score":	999640,
			"second_score":	160869
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2556,
			"primary_score":	999640,
			"second_score":	160868
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2557,
			"primary_score":	999640,
			"second_score":	160846
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2560,
			"primary_score":	999640,
			"second_score":	160845
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2561,
			"primary_score":	999640,
			"second_score":	160844
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2562,
			"primary_score":	999640,
			"second_score":	160843
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2615,
			"primary_score":	999640,
			"second_score":	3213
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	346,
			"primary_score":	999640,
			"second_score":	124065
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1335,
			"primary_score":	999640,
			"second_score":	121095
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1336,
			"primary_score":	999640,
			"second_score":	121094
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1337,
			"primary_score":	999640,
			"second_score":	121093
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1338,
			"primary_score":	999640,
			"second_score":	121092
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1339,
			"primary_score":	999640,
			"second_score":	121091
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1341,
			"primary_score":	999640,
			"second_score":	121090
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1345,
			"primary_score":	999640,
			"second_score":	121023
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1348,
			"primary_score":	999640,
			"second_score":	120847
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1349,
			"primary_score":	999640,
			"second_score":	120846
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1354,
			"primary_score":	999640,
			"second_score":	120845
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1356,
			"primary_score":	999640,
			"second_score":	120805
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1362,
			"primary_score":	999640,
			"second_score":	120786
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1367,
			"primary_score":	999640,
			"second_score":	120785
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1891,
			"primary_score":	999640,
			"second_score":	123523
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1892,
			"primary_score":	999640,
			"second_score":	123522
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1893,
			"primary_score":	999640,
			"second_score":	123147
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1921,
			"primary_score":	999640,
			"second_score":	132945
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1923,
			"primary_score":	999640,
			"second_score":	132944
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1927,
			"primary_score":	999640,
			"second_score":	132906
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1929,
			"primary_score":	999640,
			"second_score":	132804
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1932,
			"primary_score":	999640,
			"second_score":	132803
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	131,
			"primary_score":	999640,
			"second_score":	18912
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	208,
			"primary_score":	999640,
			"second_score":	161502
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	210,
			"primary_score":	999640,
			"second_score":	161501
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	229,
			"primary_score":	999640,
			"second_score":	113532
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	230,
			"primary_score":	999640,
			"second_score":	113507
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	231,
			"primary_score":	999640,
			"second_score":	113482
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	232,
			"primary_score":	999640,
			"second_score":	113478
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	233,
			"primary_score":	999640,
			"second_score":	113474
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	234,
			"primary_score":	999640,
			"second_score":	113451
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	235,
			"primary_score":	999640,
			"second_score":	113447
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	236,
			"primary_score":	999640,
			"second_score":	113443
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	237,
			"primary_score":	999640,
			"second_score":	113373
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	238,
			"primary_score":	999640,
			"second_score":	113369
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	262,
			"primary_score":	999640,
			"second_score":	161657
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	283,
			"primary_score":	999640,
			"second_score":	142552
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	296,
			"primary_score":	999722,
			"second_score":	165484
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	297,
			"primary_score":	999722,
			"second_score":	165483
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	299,
			"primary_score":	999722,
			"second_score":	165475
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	300,
			"primary_score":	999722,
			"second_score":	165470
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	304,
			"primary_score":	999723,
			"second_score":	165469
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	305,
			"primary_score":	999723,
			"second_score":	165448
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	307,
			"primary_score":	999787,
			"second_score":	165471
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	309,
			"primary_score":	999722,
			"second_score":	191471
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	310,
			"primary_score":	999722,
			"second_score":	191470
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	311,
			"primary_score":	999722,
			"second_score":	191469
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	312,
			"primary_score":	999722,
			"second_score":	197125
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	313,
			"primary_score":	999722,
			"second_score":	197124
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	315,
			"primary_score":	999722,
			"second_score":	191468
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	316,
			"primary_score":	999722,
			"second_score":	191406
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	317,
			"primary_score":	999722,
			"second_score":	191405
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	318,
			"primary_score":	999722,
			"second_score":	191404
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	335,
			"primary_score":	999640,
			"second_score":	162425
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	336,
			"primary_score":	999640,
			"second_score":	162424
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	337,
			"primary_score":	999640,
			"second_score":	162423
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	341,
			"primary_score":	999640,
			"second_score":	162422
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	348,
			"primary_score":	999640,
			"second_score":	162421
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	349,
			"primary_score":	999640,
			"second_score":	162420
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	350,
			"primary_score":	999640,
			"second_score":	162418
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	351,
			"primary_score":	999640,
			"second_score":	162416
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	352,
			"primary_score":	999640,
			"second_score":	162415
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	353,
			"primary_score":	999640,
			"second_score":	162414
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	359,
			"primary_score":	999919,
			"second_score":	164563
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	360,
			"primary_score":	999919,
			"second_score":	164562
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	361,
			"primary_score":	999919,
			"second_score":	164561
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	362,
			"primary_score":	999919,
			"second_score":	164560
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	364,
			"primary_score":	999919,
			"second_score":	164559
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	370,
			"primary_score":	999919,
			"second_score":	164558
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	373,
			"primary_score":	999919,
			"second_score":	164537
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	374,
			"primary_score":	999919,
			"second_score":	164466
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	375,
			"primary_score":	999919,
			"second_score":	164459
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	376,
			"primary_score":	999919,
			"second_score":	164399
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	378,
			"primary_score":	999919,
			"second_score":	164396
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	417,
			"primary_score":	999849,
			"second_score":	186716
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	418,
			"primary_score":	999849,
			"second_score":	186715
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	419,
			"primary_score":	999849,
			"second_score":	186714
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	420,
			"primary_score":	999849,
			"second_score":	186713
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	421,
			"primary_score":	999849,
			"second_score":	186712
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	423,
			"primary_score":	999849,
			"second_score":	186711
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	429,
			"primary_score":	999849,
			"second_score":	186710
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	432,
			"primary_score":	999849,
			"second_score":	186646
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	436,
			"primary_score":	999849,
			"second_score":	186645
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	437,
			"primary_score":	999849,
			"second_score":	186644
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	439,
			"primary_score":	999849,
			"second_score":	186531
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	440,
			"primary_score":	999849,
			"second_score":	186524
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	441,
			"primary_score":	999849,
			"second_score":	186460
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	443,
			"primary_score":	999849,
			"second_score":	186457
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	445,
			"primary_score":	999849,
			"second_score":	186455
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	554,
			"primary_score":	999913,
			"second_score":	189707
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	556,
			"primary_score":	999913,
			"second_score":	189697
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	557,
			"primary_score":	999913,
			"second_score":	189696
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	558,
			"primary_score":	999913,
			"second_score":	189695
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	559,
			"primary_score":	999913,
			"second_score":	189693
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	560,
			"primary_score":	999913,
			"second_score":	189614
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	561,
			"primary_score":	999913,
			"second_score":	189610
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	632,
			"primary_score":	999715,
			"second_score":	165515
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	633,
			"primary_score":	999715,
			"second_score":	165514
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	634,
			"primary_score":	999715,
			"second_score":	165513
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	636,
			"primary_score":	999715,
			"second_score":	165512
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	637,
			"primary_score":	999715,
			"second_score":	165511
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	640,
			"primary_score":	999715,
			"second_score":	165510
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	645,
			"primary_score":	999723,
			"second_score":	165486
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	646,
			"primary_score":	999723,
			"second_score":	165485
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	647,
			"primary_score":	999723,
			"second_score":	165447
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	648,
			"primary_score":	999723,
			"second_score":	165446
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	649,
			"primary_score":	999723,
			"second_score":	165445
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	685,
			"primary_score":	999715,
			"second_score":	165516
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	841,
			"primary_score":	999640,
			"second_score":	134218
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	843,
			"primary_score":	999640,
			"second_score":	134208
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	844,
			"primary_score":	999640,
			"second_score":	134207
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	845,
			"primary_score":	999640,
			"second_score":	134203
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	884,
			"primary_score":	999842,
			"second_score":	164682
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	890,
			"primary_score":	999842,
			"second_score":	164681
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	897,
			"primary_score":	999720,
			"second_score":	189283
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	898,
			"primary_score":	999720,
			"second_score":	189282
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	900,
			"primary_score":	999720,
			"second_score":	189281
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	927,
			"primary_score":	999720,
			"second_score":	189280
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	929,
			"primary_score":	999720,
			"second_score":	189242
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	930,
			"primary_score":	999720,
			"second_score":	189240
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	932,
			"primary_score":	999720,
			"second_score":	189230
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	933,
			"primary_score":	999725,
			"second_score":	189229
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	989,
			"primary_score":	999725,
			"second_score":	189228
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	990,
			"primary_score":	999725,
			"second_score":	189227
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	991,
			"primary_score":	999725,
			"second_score":	189223
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	992,
			"primary_score":	999725,
			"second_score":	189219
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	993,
			"primary_score":	999725,
			"second_score":	189218
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	994,
			"primary_score":	999725,
			"second_score":	189216
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1251,
			"primary_score":	999719,
			"second_score":	189287
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1253,
			"primary_score":	999719,
			"second_score":	189286
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1256,
			"primary_score":	999719,
			"second_score":	189285
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1286,
			"primary_score":	999842,
			"second_score":	164684
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1287,
			"primary_score":	999842,
			"second_score":	164683
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1310,
			"primary_score":	999842,
			"second_score":	164680
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1311,
			"primary_score":	999842,
			"second_score":	164679
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1312,
			"primary_score":	999842,
			"second_score":	164678
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1320,
			"primary_score":	999842,
			"second_score":	164677
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1321,
			"primary_score":	999842,
			"second_score":	164667
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1322,
			"primary_score":	999842,
			"second_score":	164666
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1327,
			"primary_score":	999842,
			"second_score":	164665
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1332,
			"primary_score":	999847,
			"second_score":	164664
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1333,
			"primary_score":	999847,
			"second_score":	164663
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1356,
			"primary_score":	999842,
			"second_score":	164662
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1358,
			"primary_score":	999842,
			"second_score":	164661
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1421,
			"primary_score":	999649,
			"second_score":	162878
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1427,
			"primary_score":	999649,
			"second_score":	162877
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1428,
			"primary_score":	999649,
			"second_score":	162876
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1430,
			"primary_score":	999649,
			"second_score":	162875
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1433,
			"primary_score":	999649,
			"second_score":	162874
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1435,
			"primary_score":	999649,
			"second_score":	162873
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1446,
			"primary_score":	999649,
			"second_score":	162872
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1952,
			"primary_score":	999924,
			"second_score":	164699
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1953,
			"primary_score":	999924,
			"second_score":	164698
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1954,
			"primary_score":	999924,
			"second_score":	164697
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1956,
			"primary_score":	999924,
			"second_score":	164696
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1957,
			"primary_score":	999924,
			"second_score":	164612
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1959,
			"primary_score":	999924,
			"second_score":	164577
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1960,
			"primary_score":	999924,
			"second_score":	164575
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1962,
			"primary_score":	999924,
			"second_score":	164574
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1967,
			"primary_score":	999924,
			"second_score":	164573
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1968,
			"primary_score":	999924,
			"second_score":	164572
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1969,
			"primary_score":	999924,
			"second_score":	164571
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1971,
			"primary_score":	999924,
			"second_score":	164570
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1972,
			"primary_score":	999924,
			"second_score":	164569
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1975,
			"primary_score":	999924,
			"second_score":	164568
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1976,
			"primary_score":	999924,
			"second_score":	164564
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1978,
			"primary_score":	999924,
			"second_score":	164395
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1980,
			"primary_score":	999924,
			"second_score":	164392
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1981,
			"primary_score":	999924,
			"second_score":	164391
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1982,
			"primary_score":	999924,
			"second_score":	164390
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1996,
			"primary_score":	999924,
			"second_score":	164389
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1997,
			"primary_score":	999924,
			"second_score":	164363
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2098,
			"primary_score":	999849,
			"second_score":	186726
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2099,
			"primary_score":	999849,
			"second_score":	186725
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2100,
			"primary_score":	999849,
			"second_score":	186724
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2101,
			"primary_score":	999849,
			"second_score":	186723
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2102,
			"primary_score":	999849,
			"second_score":	186722
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2104,
			"primary_score":	999849,
			"second_score":	186721
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2105,
			"primary_score":	999849,
			"second_score":	186720
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2147,
			"primary_score":	999849,
			"second_score":	186719
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2172,
			"primary_score":	999854,
			"second_score":	186753
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2173,
			"primary_score":	999854,
			"second_score":	186752
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2175,
			"primary_score":	999854,
			"second_score":	186751
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2184,
			"primary_score":	999854,
			"second_score":	186750
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2185,
			"primary_score":	999854,
			"second_score":	186748
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2187,
			"primary_score":	999854,
			"second_score":	186738
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2188,
			"primary_score":	999854,
			"second_score":	186737
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2189,
			"primary_score":	999854,
			"second_score":	186736
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2190,
			"primary_score":	999854,
			"second_score":	186735
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2191,
			"primary_score":	999854,
			"second_score":	186734
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2192,
			"primary_score":	999854,
			"second_score":	186733
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2194,
			"primary_score":	999854,
			"second_score":	186732
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2195,
			"primary_score":	999854,
			"second_score":	186727
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2205,
			"primary_score":	999854,
			"second_score":	186718
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2206,
			"primary_score":	999854,
			"second_score":	186717
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2208,
			"primary_score":	999854,
			"second_score":	186454
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2213,
			"primary_score":	999854,
			"second_score":	186453
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2214,
			"primary_score":	999854,
			"second_score":	186451
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2215,
			"primary_score":	999854,
			"second_score":	186450
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2216,
			"primary_score":	999854,
			"second_score":	186445
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2315,
			"primary_score":	999640,
			"second_score":	161698
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2319,
			"primary_score":	999640,
			"second_score":	161697
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2430,
			"primary_score":	999842,
			"second_score":	163652
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2431,
			"primary_score":	999842,
			"second_score":	163651
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2488,
			"primary_score":	999909,
			"second_score":	163929
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2496,
			"primary_score":	999985,
			"second_score":	185623
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2519,
			"primary_score":	999767,
			"second_score":	194667
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2521,
			"primary_score":	999964,
			"second_score":	185926
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2523,
			"primary_score":	999750,
			"second_score":	185888
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2536,
			"primary_score":	999993,
			"second_score":	185608
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2542,
			"primary_score":	999909,
			"second_score":	163912
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2601,
			"primary_score":	999640,
			"second_score":	162457
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2602,
			"primary_score":	999640,
			"second_score":	162456
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2604,
			"primary_score":	999640,
			"second_score":	162455
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2612,
			"primary_score":	999640,
			"second_score":	162454
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2618,
			"primary_score":	999640,
			"second_score":	162452
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2619,
			"primary_score":	999640,
			"second_score":	162448
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2622,
			"primary_score":	999640,
			"second_score":	162444
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2623,
			"primary_score":	999640,
			"second_score":	162442
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2628,
			"primary_score":	999640,
			"second_score":	162441
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2630,
			"primary_score":	999640,
			"second_score":	162431
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2632,
			"primary_score":	999640,
			"second_score":	162430
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2633,
			"primary_score":	999640,
			"second_score":	162429
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2635,
			"primary_score":	999640,
			"second_score":	162413
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2639,
			"primary_score":	999640,
			"second_score":	119531
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2640,
			"primary_score":	999640,
			"second_score":	119530
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2643,
			"primary_score":	999640,
			"second_score":	162412
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4935,
			"primary_score":	999921,
			"second_score":	165017
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4936,
			"primary_score":	999921,
			"second_score":	165016
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4938,
			"primary_score":	999921,
			"second_score":	165015
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4940,
			"primary_score":	999921,
			"second_score":	165011
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4941,
			"primary_score":	999926,
			"second_score":	165010
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4982,
			"primary_score":	999922,
			"second_score":	165009
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4992,
			"primary_score":	999922,
			"second_score":	165006
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4993,
			"primary_score":	999922,
			"second_score":	165002
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4994,
			"primary_score":	999922,
			"second_score":	165001
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4995,
			"primary_score":	999922,
			"second_score":	165000
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4996,
			"primary_score":	999922,
			"second_score":	164998
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4997,
			"primary_score":	999922,
			"second_score":	164994
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4998,
			"primary_score":	999922,
			"second_score":	164931
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4999,
			"primary_score":	999922,
			"second_score":	164930
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5000,
			"primary_score":	999922,
			"second_score":	164927
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5002,
			"primary_score":	999922,
			"second_score":	164924
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5004,
			"primary_score":	999922,
			"second_score":	164919
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5023,
			"primary_score":	999921,
			"second_score":	163550
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5029,
			"primary_score":	999921,
			"second_score":	163472
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5030,
			"primary_score":	999921,
			"second_score":	163471
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5032,
			"primary_score":	999921,
			"second_score":	163470
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5033,
			"primary_score":	999921,
			"second_score":	163466
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5035,
			"primary_score":	999921,
			"second_score":	163465
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5041,
			"primary_score":	999855,
			"second_score":	186417
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5042,
			"primary_score":	999855,
			"second_score":	186416
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5044,
			"primary_score":	999855,
			"second_score":	186415
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5045,
			"primary_score":	999855,
			"second_score":	186413
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5046,
			"primary_score":	999855,
			"second_score":	186403
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5047,
			"primary_score":	999855,
			"second_score":	186402
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5048,
			"primary_score":	999855,
			"second_score":	186401
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5049,
			"primary_score":	999855,
			"second_score":	186399
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5050,
			"primary_score":	999855,
			"second_score":	186395
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5052,
			"primary_score":	999855,
			"second_score":	186394
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5058,
			"primary_score":	999855,
			"second_score":	185771
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5060,
			"primary_score":	999855,
			"second_score":	185770
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5061,
			"primary_score":	999855,
			"second_score":	185722
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5063,
			"primary_score":	999855,
			"second_score":	185714
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5064,
			"primary_score":	999855,
			"second_score":	185712
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5070,
			"primary_score":	999640,
			"second_score":	137237
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5072,
			"primary_score":	999640,
			"second_score":	137236
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5085,
			"primary_score":	999640,
			"second_score":	137235
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5097,
			"primary_score":	999640,
			"second_score":	137208
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5100,
			"primary_score":	999640,
			"second_score":	137207
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5105,
			"primary_score":	999640,
			"second_score":	137206
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5113,
			"primary_score":	999640,
			"second_score":	137238
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5115,
			"primary_score":	999640,
			"second_score":	137205
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5116,
			"primary_score":	999640,
			"second_score":	137204
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5117,
			"primary_score":	999640,
			"second_score":	137178
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5118,
			"primary_score":	999640,
			"second_score":	137177
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5119,
			"primary_score":	999640,
			"second_score":	137176
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5120,
			"primary_score":	999640,
			"second_score":	137142
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5121,
			"primary_score":	999640,
			"second_score":	137139
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5129,
			"primary_score":	999640,
			"second_score":	137255
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5130,
			"primary_score":	999640,
			"second_score":	137254
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5131,
			"primary_score":	999640,
			"second_score":	137253
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5132,
			"primary_score":	999640,
			"second_score":	137252
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5133,
			"primary_score":	999640,
			"second_score":	137251
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5135,
			"primary_score":	999640,
			"second_score":	137250
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5182,
			"primary_score":	999640,
			"second_score":	137249
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5203,
			"primary_score":	999640,
			"second_score":	137248
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5205,
			"primary_score":	999640,
			"second_score":	137239
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5206,
			"primary_score":	999640,
			"second_score":	137138
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6096,
			"primary_score":	999640,
			"second_score":	129827
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6097,
			"primary_score":	999640,
			"second_score":	129825
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6099,
			"primary_score":	999640,
			"second_score":	129824
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6101,
			"primary_score":	999640,
			"second_score":	129814
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6102,
			"primary_score":	999640,
			"second_score":	129813
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6103,
			"primary_score":	999640,
			"second_score":	129809
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6104,
			"primary_score":	999640,
			"second_score":	129808
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6105,
			"primary_score":	999640,
			"second_score":	129807
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6107,
			"primary_score":	999640,
			"second_score":	129802
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6113,
			"primary_score":	999640,
			"second_score":	127000
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6115,
			"primary_score":	999640,
			"second_score":	126990
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6117,
			"primary_score":	999640,
			"second_score":	126988
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6118,
			"primary_score":	999640,
			"second_score":	126987
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6119,
			"primary_score":	999640,
			"second_score":	126986
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6120,
			"primary_score":	999640,
			"second_score":	126984
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6121,
			"primary_score":	999640,
			"second_score":	126980
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6123,
			"primary_score":	999640,
			"second_score":	126979
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6124,
			"primary_score":	999640,
			"second_score":	126974
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6126,
			"primary_score":	999640,
			"second_score":	126972
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6127,
			"primary_score":	999640,
			"second_score":	126962
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6128,
			"primary_score":	999640,
			"second_score":	126961
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6129,
			"primary_score":	999640,
			"second_score":	126960
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6135,
			"primary_score":	999640,
			"second_score":	126570
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6137,
			"primary_score":	999640,
			"second_score":	126560
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6138,
			"primary_score":	999640,
			"second_score":	126559
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6139,
			"primary_score":	999640,
			"second_score":	126555
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6140,
			"primary_score":	999640,
			"second_score":	126457
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6142,
			"primary_score":	999640,
			"second_score":	126456
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6144,
			"primary_score":	999640,
			"second_score":	126454
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6146,
			"primary_score":	999640,
			"second_score":	126449
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6221,
			"primary_score":	999722,
			"second_score":	165487
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6262,
			"primary_score":	999649,
			"second_score":	162548
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6263,
			"primary_score":	999649,
			"second_score":	162547
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6278,
			"primary_score":	999649,
			"second_score":	162707
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6373,
			"primary_score":	999849,
			"second_score":	186731
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6376,
			"primary_score":	999849,
			"second_score":	186730
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6379,
			"primary_score":	999849,
			"second_score":	186729
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6383,
			"primary_score":	999849,
			"second_score":	186728
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	32,
			"primary_score":	999640,
			"second_score":	6291
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	33,
			"primary_score":	999640,
			"second_score":	113948
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	35,
			"primary_score":	999640,
			"second_score":	6290
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	60,
			"primary_score":	999640,
			"second_score":	113730
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	171,
			"primary_score":	999640,
			"second_score":	114464
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	174,
			"primary_score":	999640,
			"second_score":	114463
		}, {
			"file":	"Zend/zend_exceptions.c",
			"line":	73,
			"primary_score":	999640,
			"second_score":	120285
		}, {
			"file":	"Zend/zend_exceptions.c",
			"line":	541,
			"primary_score":	999878,
			"second_score":	158266
		}, {
			"file":	"Zend/zend_exceptions.c",
			"line":	542,
			"primary_score":	999878,
			"second_score":	158265
		}, {
			"file":	"Zend/zend_exceptions.c",
			"line":	544,
			"primary_score":	999878,
			"second_score":	158264
		}, {
			"file":	"Zend/zend_exceptions.c",
			"line":	545,
			"primary_score":	999878,
			"second_score":	158263
		}, {
			"file":	"Zend/zend_exceptions.c",
			"line":	546,
			"primary_score":	999878,
			"second_score":	158041
		}, {
			"file":	"Zend/zend_exceptions.c",
			"line":	547,
			"primary_score":	999878,
			"second_score":	158040
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	71,
			"primary_score":	999640,
			"second_score":	121084
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	72,
			"primary_score":	999640,
			"second_score":	121082
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	73,
			"primary_score":	999640,
			"second_score":	121080
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	74,
			"primary_score":	999640,
			"second_score":	121078
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	177,
			"primary_score":	999640,
			"second_score":	157954
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	182,
			"primary_score":	999640,
			"second_score":	121086
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	184,
			"primary_score":	999640,
			"second_score":	121085
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	185,
			"primary_score":	999640,
			"second_score":	121077
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	273,
			"primary_score":	999723,
			"second_score":	147386
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	275,
			"primary_score":	999723,
			"second_score":	147385
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	279,
			"primary_score":	999724,
			"second_score":	147384
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	280,
			"primary_score":	999724,
			"second_score":	147375
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	281,
			"primary_score":	999724,
			"second_score":	147373
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	283,
			"primary_score":	999723,
			"second_score":	147230
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	298,
			"primary_score":	999728,
			"second_score":	123253
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	300,
			"primary_score":	999728,
			"second_score":	123252
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	303,
			"primary_score":	999728,
			"second_score":	123251
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	439,
			"primary_score":	999723,
			"second_score":	147389
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	441,
			"primary_score":	999723,
			"second_score":	147388
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	442,
			"primary_score":	999723,
			"second_score":	147387
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	602,
			"primary_score":	999640,
			"second_score":	122873
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	603,
			"primary_score":	999640,
			"second_score":	122872
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	604,
			"primary_score":	999640,
			"second_score":	122871
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	606,
			"primary_score":	999640,
			"second_score":	122870
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	611,
			"primary_score":	999640,
			"second_score":	122869
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	613,
			"primary_score":	999640,
			"second_score":	122868
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	629,
			"primary_score":	999640,
			"second_score":	122867
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	638,
			"primary_score":	999640,
			"second_score":	122866
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	820,
			"primary_score":	999857,
			"second_score":	161212
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	821,
			"primary_score":	999857,
			"second_score":	161211
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	823,
			"primary_score":	999857,
			"second_score":	161210
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	829,
			"primary_score":	999857,
			"second_score":	161209
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	832,
			"primary_score":	999857,
			"second_score":	161206
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	833,
			"primary_score":	999857,
			"second_score":	161204
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	834,
			"primary_score":	999857,
			"second_score":	161202
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	835,
			"primary_score":	999857,
			"second_score":	161178
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	836,
			"primary_score":	999857,
			"second_score":	161170
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	837,
			"primary_score":	999857,
			"second_score":	161164
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	838,
			"primary_score":	999857,
			"second_score":	161163
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	856,
			"primary_score":	999755,
			"second_score":	147224
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	857,
			"primary_score":	999755,
			"second_score":	147223
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	859,
			"primary_score":	999755,
			"second_score":	147222
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	865,
			"primary_score":	999755,
			"second_score":	147221
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	866,
			"primary_score":	999756,
			"second_score":	147219
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	884,
			"primary_score":	999756,
			"second_score":	147217
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	885,
			"primary_score":	999756,
			"second_score":	147215
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	886,
			"primary_score":	999756,
			"second_score":	147213
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	893,
			"primary_score":	999756,
			"second_score":	147211
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	894,
			"primary_score":	999756,
			"second_score":	147210
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	895,
			"primary_score":	999756,
			"second_score":	147208
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	896,
			"primary_score":	999756,
			"second_score":	147206
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	82,
			"primary_score":	999640,
			"second_score":	120367
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	83,
			"primary_score":	999640,
			"second_score":	120365
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	85,
			"primary_score":	999640,
			"second_score":	120364
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	86,
			"primary_score":	999640,
			"second_score":	121684
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	87,
			"primary_score":	999640,
			"second_score":	120361
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	88,
			"primary_score":	999640,
			"second_score":	120335
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	91,
			"primary_score":	999640,
			"second_score":	123089
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	93,
			"primary_score":	999640,
			"second_score":	123088
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	94,
			"primary_score":	999640,
			"second_score":	123086
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	97,
			"primary_score":	999640,
			"second_score":	123084
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	103,
			"primary_score":	999640,
			"second_score":	120708
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	105,
			"primary_score":	999640,
			"second_score":	120707
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	113,
			"primary_score":	999640,
			"second_score":	120706
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	155,
			"primary_score":	999640,
			"second_score":	120705
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	199,
			"primary_score":	999640,
			"second_score":	114561
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	201,
			"primary_score":	999640,
			"second_score":	114560
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	202,
			"primary_score":	999640,
			"second_score":	114559
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	203,
			"primary_score":	999640,
			"second_score":	114558
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	204,
			"primary_score":	999640,
			"second_score":	114513
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	217,
			"primary_score":	999640,
			"second_score":	122794
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	222,
			"primary_score":	999640,
			"second_score":	148354
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	223,
			"primary_score":	999640,
			"second_score":	148352
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	245,
			"primary_score":	999640,
			"second_score":	161429
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	247,
			"primary_score":	999640,
			"second_score":	161428
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	250,
			"primary_score":	999640,
			"second_score":	161427
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	265,
			"primary_score":	999640,
			"second_score":	161426
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	267,
			"primary_score":	999640,
			"second_score":	161424
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	268,
			"primary_score":	999640,
			"second_score":	161423
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	269,
			"primary_score":	999640,
			"second_score":	161422
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	274,
			"primary_score":	999640,
			"second_score":	120315
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	280,
			"primary_score":	999640,
			"second_score":	120314
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	286,
			"primary_score":	999640,
			"second_score":	120294
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	293,
			"primary_score":	999640,
			"second_score":	120293
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	297,
			"primary_score":	999640,
			"second_score":	120292
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	305,
			"primary_score":	999640,
			"second_score":	123010
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	327,
			"primary_score":	999640,
			"second_score":	123009
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	328,
			"primary_score":	999640,
			"second_score":	123008
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	333,
			"primary_score":	999640,
			"second_score":	121695
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	334,
			"primary_score":	999640,
			"second_score":	121694
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	336,
			"primary_score":	999640,
			"second_score":	121693
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	337,
			"primary_score":	999640,
			"second_score":	120370
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	338,
			"primary_score":	999640,
			"second_score":	120369
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	339,
			"primary_score":	999640,
			"second_score":	120368
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	341,
			"primary_score":	999640,
			"second_score":	120316
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	367,
			"primary_score":	999640,
			"second_score":	123020
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	369,
			"primary_score":	999640,
			"second_score":	123019
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	371,
			"primary_score":	999640,
			"second_score":	123014
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	372,
			"primary_score":	999640,
			"second_score":	123013
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	373,
			"primary_score":	999640,
			"second_score":	123012
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	107,
			"primary_score":	999640,
			"second_score":	114498
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	119,
			"primary_score":	999640,
			"second_score":	114482
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	203,
			"primary_score":	999640,
			"second_score":	119312
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	204,
			"primary_score":	999891,
			"second_score":	119621
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	206,
			"primary_score":	999640,
			"second_score":	119311
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	213,
			"primary_score":	999640,
			"second_score":	119643
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	214,
			"primary_score":	999640,
			"second_score":	119637
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	215,
			"primary_score":	999640,
			"second_score":	119636
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	216,
			"primary_score":	999640,
			"second_score":	119380
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	217,
			"primary_score":	999640,
			"second_score":	119377
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	219,
			"primary_score":	999640,
			"second_score":	119301
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	223,
			"primary_score":	999640,
			"second_score":	119296
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	229,
			"primary_score":	999640,
			"second_score":	118320
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	246,
			"primary_score":	999640,
			"second_score":	118314
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	247,
			"primary_score":	999640,
			"second_score":	118311
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	248,
			"primary_score":	999640,
			"second_score":	114646
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	250,
			"primary_score":	999640,
			"second_score":	114644
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	251,
			"primary_score":	999640,
			"second_score":	114638
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	254,
			"primary_score":	999640,
			"second_score":	114637
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	261,
			"primary_score":	999640,
			"second_score":	114636
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	268,
			"primary_score":	999640,
			"second_score":	114635
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	269,
			"primary_score":	999640,
			"second_score":	114631
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	270,
			"primary_score":	999640,
			"second_score":	114626
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	271,
			"primary_score":	999640,
			"second_score":	114617
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	272,
			"primary_score":	999640,
			"second_score":	114608
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	274,
			"primary_score":	999640,
			"second_score":	114606
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	284,
			"primary_score":	999640,
			"second_score":	114600
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	288,
			"primary_score":	999640,
			"second_score":	114599
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	289,
			"primary_score":	999640,
			"second_score":	114582
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	290,
			"primary_score":	999640,
			"second_score":	114565
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	293,
			"primary_score":	999640,
			"second_score":	114562
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	295,
			"primary_score":	999640,
			"second_score":	114512
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	298,
			"primary_score":	999640,
			"second_score":	114507
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	302,
			"primary_score":	999640,
			"second_score":	114506
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	303,
			"primary_score":	999640,
			"second_score":	114490
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	306,
			"primary_score":	999640,
			"second_score":	114474
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	311,
			"primary_score":	999640,
			"second_score":	114473
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	313,
			"primary_score":	999640,
			"second_score":	114471
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	314,
			"primary_score":	999640,
			"second_score":	114465
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	315,
			"primary_score":	999640,
			"second_score":	113722
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	317,
			"primary_score":	999640,
			"second_score":	113720
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	322,
			"primary_score":	999640,
			"second_score":	113714
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	324,
			"primary_score":	999640,
			"second_score":	113645
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	325,
			"primary_score":	999640,
			"second_score":	113624
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	326,
			"primary_score":	999640,
			"second_score":	113620
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	327,
			"primary_score":	999640,
			"second_score":	113618
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	328,
			"primary_score":	999640,
			"second_score":	113616
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	329,
			"primary_score":	999640,
			"second_score":	113548
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	333,
			"primary_score":	999640,
			"second_score":	113547
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	335,
			"primary_score":	999640,
			"second_score":	113545
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	337,
			"primary_score":	999640,
			"second_score":	113540
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	397,
			"primary_score":	999640,
			"second_score":	142548
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	398,
			"primary_score":	999640,
			"second_score":	142547
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	407,
			"primary_score":	999640,
			"second_score":	142545
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	411,
			"primary_score":	999640,
			"second_score":	142544
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	412,
			"primary_score":	999640,
			"second_score":	142543
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	421,
			"primary_score":	999640,
			"second_score":	142550
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	430,
			"primary_score":	999640,
			"second_score":	114762
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	431,
			"primary_score":	999640,
			"second_score":	114760
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	432,
			"primary_score":	999640,
			"second_score":	114758
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	434,
			"primary_score":	999640,
			"second_score":	114757
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	435,
			"primary_score":	999640,
			"second_score":	114756
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	436,
			"primary_score":	999640,
			"second_score":	114743
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	437,
			"primary_score":	999640,
			"second_score":	114709
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	440,
			"primary_score":	999640,
			"second_score":	115516
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	442,
			"primary_score":	999640,
			"second_score":	115515
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	443,
			"primary_score":	999640,
			"second_score":	115513
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	446,
			"primary_score":	999640,
			"second_score":	115511
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	456,
			"primary_score":	999640,
			"second_score":	15292
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	457,
			"primary_score":	999640,
			"second_score":	15290
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	458,
			"primary_score":	999640,
			"second_score":	15288
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	459,
			"primary_score":	999640,
			"second_score":	15286
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	460,
			"primary_score":	999640,
			"second_score":	17651
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	461,
			"primary_score":	999640,
			"second_score":	17649
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	494,
			"primary_score":	999877,
			"second_score":	146840
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	495,
			"primary_score":	999877,
			"second_score":	146839
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	496,
			"primary_score":	999877,
			"second_score":	146838
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	497,
			"primary_score":	999877,
			"second_score":	146837
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	499,
			"primary_score":	999877,
			"second_score":	146836
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	501,
			"primary_score":	999877,
			"second_score":	146835
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	582,
			"primary_score":	999877,
			"second_score":	146834
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	683,
			"primary_score":	999877,
			"second_score":	146833
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	701,
			"primary_score":	999877,
			"second_score":	146841
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1032,
			"primary_score":	999848,
			"second_score":	147094
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1033,
			"primary_score":	999848,
			"second_score":	147093
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1034,
			"primary_score":	999848,
			"second_score":	147092
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1035,
			"primary_score":	999848,
			"second_score":	147091
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1036,
			"primary_score":	999848,
			"second_score":	147090
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1037,
			"primary_score":	999848,
			"second_score":	147089
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1038,
			"primary_score":	999848,
			"second_score":	147088
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1039,
			"primary_score":	999848,
			"second_score":	147087
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1040,
			"primary_score":	999848,
			"second_score":	147086
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1041,
			"primary_score":	999848,
			"second_score":	147085
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1042,
			"primary_score":	999848,
			"second_score":	147084
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1043,
			"primary_score":	999848,
			"second_score":	147083
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1045,
			"primary_score":	999848,
			"second_score":	147082
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1046,
			"primary_score":	999849,
			"second_score":	147081
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1047,
			"primary_score":	999849,
			"second_score":	147080
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1048,
			"primary_score":	999849,
			"second_score":	147079
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1066,
			"primary_score":	999848,
			"second_score":	147078
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1067,
			"primary_score":	999849,
			"second_score":	147067
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1070,
			"primary_score":	999849,
			"second_score":	147066
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1155,
			"primary_score":	999640,
			"second_score":	121778
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1156,
			"primary_score":	999640,
			"second_score":	121777
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1157,
			"primary_score":	999640,
			"second_score":	121776
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1158,
			"primary_score":	999640,
			"second_score":	121775
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1159,
			"primary_score":	999640,
			"second_score":	121774
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1161,
			"primary_score":	999640,
			"second_score":	121773
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1169,
			"primary_score":	999640,
			"second_score":	121772
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1170,
			"primary_score":	999640,
			"second_score":	121771
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1172,
			"primary_score":	999640,
			"second_score":	121770
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1176,
			"primary_score":	999640,
			"second_score":	121769
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1177,
			"primary_score":	999640,
			"second_score":	121768
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1178,
			"primary_score":	999640,
			"second_score":	121767
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1179,
			"primary_score":	999640,
			"second_score":	119280
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1181,
			"primary_score":	999640,
			"second_score":	119279
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1182,
			"primary_score":	999640,
			"second_score":	119278
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1183,
			"primary_score":	999640,
			"second_score":	119277
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1184,
			"primary_score":	999640,
			"second_score":	119276
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1185,
			"primary_score":	999640,
			"second_score":	119275
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1187,
			"primary_score":	999640,
			"second_score":	119274
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1188,
			"primary_score":	999640,
			"second_score":	119273
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1189,
			"primary_score":	999640,
			"second_score":	119272
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1190,
			"primary_score":	999640,
			"second_score":	119271
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1193,
			"primary_score":	999640,
			"second_score":	119270
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1195,
			"primary_score":	999640,
			"second_score":	119269
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1197,
			"primary_score":	999640,
			"second_score":	118905
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1198,
			"primary_score":	999640,
			"second_score":	118904
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1199,
			"primary_score":	999640,
			"second_score":	118903
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1202,
			"primary_score":	999640,
			"second_score":	118902
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1210,
			"primary_score":	999640,
			"second_score":	118871
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1211,
			"primary_score":	999640,
			"second_score":	118870
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1212,
			"primary_score":	999640,
			"second_score":	118869
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1213,
			"primary_score":	999640,
			"second_score":	118868
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1214,
			"primary_score":	999640,
			"second_score":	118779
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1215,
			"primary_score":	999640,
			"second_score":	118760
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1216,
			"primary_score":	999640,
			"second_score":	118759
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1220,
			"primary_score":	999640,
			"second_score":	118758
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1223,
			"primary_score":	999640,
			"second_score":	118757
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1235,
			"primary_score":	999640,
			"second_score":	121780
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1237,
			"primary_score":	999640,
			"second_score":	121779
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1238,
			"primary_score":	999640,
			"second_score":	118756
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1242,
			"primary_score":	999640,
			"second_score":	118755
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1248,
			"primary_score":	999640,
			"second_score":	121781
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1510,
			"primary_score":	999640,
			"second_score":	103410
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1583,
			"primary_score":	999849,
			"second_score":	147097
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1584,
			"primary_score":	999849,
			"second_score":	147096
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1586,
			"primary_score":	999849,
			"second_score":	147095
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1600,
			"primary_score":	999849,
			"second_score":	147065
		}, {
			"file":	"Zend/zend_extensions.c",
			"line":	182,
			"primary_score":	999640,
			"second_score":	14748
		}, {
			"file":	"Zend/zend_extensions.c",
			"line":	183,
			"primary_score":	999640,
			"second_score":	14745
		}, {
			"file":	"Zend/zend_float.c",
			"line":	44,
			"primary_score":	999640,
			"second_score":	113544
		}, {
			"file":	"Zend/zend_float.c",
			"line":	45,
			"primary_score":	999640,
			"second_score":	113543
		}, {
			"file":	"Zend/zend_float.c",
			"line":	48,
			"primary_score":	999640,
			"second_score":	113541
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	35,
			"primary_score":	999640,
			"second_score":	3139
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	36,
			"primary_score":	999640,
			"second_score":	3138
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	37,
			"primary_score":	999640,
			"second_score":	3137
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	84,
			"primary_score":	999640,
			"second_score":	3140
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	132,
			"primary_score":	999640,
			"second_score":	115548
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	142,
			"primary_score":	999640,
			"second_score":	115547
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	143,
			"primary_score":	999832,
			"second_score":	121158
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	144,
			"primary_score":	999832,
			"second_score":	121150
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	147,
			"primary_score":	999640,
			"second_score":	115546
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	149,
			"primary_score":	999640,
			"second_score":	115545
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	150,
			"primary_score":	999640,
			"second_score":	118363
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	152,
			"primary_score":	999640,
			"second_score":	118362
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	153,
			"primary_score":	999640,
			"second_score":	118361
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	155,
			"primary_score":	999640,
			"second_score":	118360
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	156,
			"primary_score":	999640,
			"second_score":	118463
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	157,
			"primary_score":	999640,
			"second_score":	118359
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	158,
			"primary_score":	999640,
			"second_score":	118358
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	159,
			"primary_score":	999640,
			"second_score":	118357
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	176,
			"primary_score":	999640,
			"second_score":	118356
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	177,
			"primary_score":	999640,
			"second_score":	118355
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	178,
			"primary_score":	999640,
			"second_score":	118354
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	179,
			"primary_score":	999640,
			"second_score":	118353
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	181,
			"primary_score":	999640,
			"second_score":	118352
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	183,
			"primary_score":	999640,
			"second_score":	118351
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	184,
			"primary_score":	999640,
			"second_score":	118350
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	186,
			"primary_score":	999640,
			"second_score":	118349
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	187,
			"primary_score":	999640,
			"second_score":	118348
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	188,
			"primary_score":	999640,
			"second_score":	118347
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	195,
			"primary_score":	999832,
			"second_score":	121155
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	197,
			"primary_score":	999832,
			"second_score":	121154
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	202,
			"primary_score":	999832,
			"second_score":	121153
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	204,
			"primary_score":	999832,
			"second_score":	121152
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	205,
			"primary_score":	999832,
			"second_score":	121151
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	206,
			"primary_score":	999832,
			"second_score":	146317
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	207,
			"primary_score":	999832,
			"second_score":	146316
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	208,
			"primary_score":	999832,
			"second_score":	146315
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	210,
			"primary_score":	999832,
			"second_score":	146314
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	212,
			"primary_score":	999833,
			"second_score":	146313
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	213,
			"primary_score":	999833,
			"second_score":	146312
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	214,
			"primary_score":	999833,
			"second_score":	146311
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	232,
			"primary_score":	999832,
			"second_score":	146310
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	233,
			"primary_score":	999832,
			"second_score":	146309
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	234,
			"primary_score":	999832,
			"second_score":	146308
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	235,
			"primary_score":	999832,
			"second_score":	146307
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	237,
			"primary_score":	999832,
			"second_score":	146306
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	239,
			"primary_score":	999832,
			"second_score":	146305
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	240,
			"primary_score":	999832,
			"second_score":	146304
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	242,
			"primary_score":	999832,
			"second_score":	146303
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	243,
			"primary_score":	999832,
			"second_score":	146302
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	244,
			"primary_score":	999832,
			"second_score":	146301
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	251,
			"primary_score":	999640,
			"second_score":	114754
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	253,
			"primary_score":	999640,
			"second_score":	114753
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	264,
			"primary_score":	999640,
			"second_score":	114752
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	265,
			"primary_score":	999640,
			"second_score":	114751
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	266,
			"primary_score":	999640,
			"second_score":	114745
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	653,
			"primary_score":	999640,
			"second_score":	113334
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	655,
			"primary_score":	999640,
			"second_score":	113333
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	728,
			"primary_score":	999640,
			"second_score":	113332
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	182,
			"primary_score":	999640,
			"second_score":	115510
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	183,
			"primary_score":	999640,
			"second_score":	115549
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	189,
			"primary_score":	999640,
			"second_score":	114750
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	190,
			"primary_score":	999640,
			"second_score":	114749
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	191,
			"primary_score":	999640,
			"second_score":	114748
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	192,
			"primary_score":	999640,
			"second_score":	114747
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	193,
			"primary_score":	999640,
			"second_score":	114746
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	150,
			"primary_score":	999640,
			"second_score":	160522
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	152,
			"primary_score":	999640,
			"second_score":	160521
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	154,
			"primary_score":	999640,
			"second_score":	160520
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	158,
			"primary_score":	999640,
			"second_score":	160519
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	161,
			"primary_score":	999640,
			"second_score":	160518
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	164,
			"primary_score":	999640,
			"second_score":	160517
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	165,
			"primary_score":	999640,
			"second_score":	160516
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	166,
			"primary_score":	999640,
			"second_score":	160515
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	167,
			"primary_score":	999640,
			"second_score":	160514
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	168,
			"primary_score":	999640,
			"second_score":	160513
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	169,
			"primary_score":	999640,
			"second_score":	160512
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	170,
			"primary_score":	999640,
			"second_score":	160511
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	171,
			"primary_score":	999640,
			"second_score":	160510
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	172,
			"primary_score":	999640,
			"second_score":	160509
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	173,
			"primary_score":	999640,
			"second_score":	160508
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	174,
			"primary_score":	999640,
			"second_score":	160507
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	175,
			"primary_score":	999640,
			"second_score":	160506
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	197,
			"primary_score":	999640,
			"second_score":	160344
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	198,
			"primary_score":	999640,
			"second_score":	160343
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	199,
			"primary_score":	999640,
			"second_score":	160342
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	201,
			"primary_score":	999640,
			"second_score":	160341
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	203,
			"primary_score":	999640,
			"second_score":	160340
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	210,
			"primary_score":	999640,
			"second_score":	160339
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	212,
			"primary_score":	999640,
			"second_score":	160244
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	213,
			"primary_score":	999640,
			"second_score":	160235
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	215,
			"primary_score":	999640,
			"second_score":	160234
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	216,
			"primary_score":	999640,
			"second_score":	160233
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	217,
			"primary_score":	999640,
			"second_score":	161520
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	220,
			"primary_score":	999640,
			"second_score":	161518
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	243,
			"primary_score":	999640,
			"second_score":	160232
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	250,
			"primary_score":	999640,
			"second_score":	160231
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	251,
			"primary_score":	999640,
			"second_score":	160128
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	254,
			"primary_score":	999640,
			"second_score":	160127
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	255,
			"primary_score":	999640,
			"second_score":	160126
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	257,
			"primary_score":	999640,
			"second_score":	160125
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	258,
			"primary_score":	999640,
			"second_score":	160124
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	259,
			"primary_score":	999640,
			"second_score":	160119
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	260,
			"primary_score":	999640,
			"second_score":	160118
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	261,
			"primary_score":	999640,
			"second_score":	160114
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	265,
			"primary_score":	999640,
			"second_score":	160113
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	266,
			"primary_score":	999640,
			"second_score":	160111
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	267,
			"primary_score":	999640,
			"second_score":	160102
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	268,
			"primary_score":	999640,
			"second_score":	160101
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	270,
			"primary_score":	999640,
			"second_score":	160099
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	271,
			"primary_score":	999640,
			"second_score":	160098
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	272,
			"primary_score":	999640,
			"second_score":	160096
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	376,
			"primary_score":	999640,
			"second_score":	126891
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	401,
			"primary_score":	999640,
			"second_score":	126890
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	415,
			"primary_score":	999640,
			"second_score":	126772
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	426,
			"primary_score":	999640,
			"second_score":	126753
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	476,
			"primary_score":	999640,
			"second_score":	47247
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	477,
			"primary_score":	999640,
			"second_score":	47246
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	479,
			"primary_score":	999640,
			"second_score":	47245
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	481,
			"primary_score":	999640,
			"second_score":	47244
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	482,
			"primary_score":	999640,
			"second_score":	47243
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	484,
			"primary_score":	999640,
			"second_score":	47227
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	486,
			"primary_score":	999640,
			"second_score":	47226
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	487,
			"primary_score":	999640,
			"second_score":	47225
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	488,
			"primary_score":	999640,
			"second_score":	47224
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	492,
			"primary_score":	999640,
			"second_score":	47223
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	493,
			"primary_score":	999640,
			"second_score":	47221
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	494,
			"primary_score":	999640,
			"second_score":	47220
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	496,
			"primary_score":	999640,
			"second_score":	47271
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	498,
			"primary_score":	999640,
			"second_score":	47219
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	499,
			"primary_score":	999640,
			"second_score":	51598
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	501,
			"primary_score":	999640,
			"second_score":	47218
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	502,
			"primary_score":	999640,
			"second_score":	50185
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	505,
			"primary_score":	999640,
			"second_score":	47217
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	507,
			"primary_score":	999640,
			"second_score":	47216
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	508,
			"primary_score":	999640,
			"second_score":	47215
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	510,
			"primary_score":	999640,
			"second_score":	62017
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	512,
			"primary_score":	999640,
			"second_score":	47214
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	513,
			"primary_score":	999640,
			"second_score":	47213
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	515,
			"primary_score":	999640,
			"second_score":	47212
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	516,
			"primary_score":	999640,
			"second_score":	47211
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	518,
			"primary_score":	999640,
			"second_score":	47207
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	519,
			"primary_score":	999640,
			"second_score":	47206
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	521,
			"primary_score":	999640,
			"second_score":	47205
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	522,
			"primary_score":	999640,
			"second_score":	47204
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	523,
			"primary_score":	999640,
			"second_score":	47202
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	524,
			"primary_score":	999640,
			"second_score":	47201
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	526,
			"primary_score":	999640,
			"second_score":	47276
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	534,
			"primary_score":	999640,
			"second_score":	3133
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	536,
			"primary_score":	999640,
			"second_score":	3132
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	538,
			"primary_score":	999640,
			"second_score":	3131
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	540,
			"primary_score":	999640,
			"second_score":	3130
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	541,
			"primary_score":	999640,
			"second_score":	3129
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	542,
			"primary_score":	999640,
			"second_score":	3122
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	543,
			"primary_score":	999640,
			"second_score":	3121
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	544,
			"primary_score":	999640,
			"second_score":	3120
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	545,
			"primary_score":	999640,
			"second_score":	3257
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	547,
			"primary_score":	999640,
			"second_score":	3119
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	548,
			"primary_score":	999640,
			"second_score":	3118
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	550,
			"primary_score":	999640,
			"second_score":	3117
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	552,
			"primary_score":	999640,
			"second_score":	3116
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	553,
			"primary_score":	999640,
			"second_score":	3115
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	556,
			"primary_score":	999640,
			"second_score":	3114
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	599,
			"primary_score":	999640,
			"second_score":	3611
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	601,
			"primary_score":	999640,
			"second_score":	3610
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	602,
			"primary_score":	999640,
			"second_score":	3608
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	603,
			"primary_score":	999640,
			"second_score":	3924
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	605,
			"primary_score":	999640,
			"second_score":	3607
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	607,
			"primary_score":	999640,
			"second_score":	3606
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	608,
			"primary_score":	999640,
			"second_score":	3605
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	610,
			"primary_score":	999640,
			"second_score":	3604
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	611,
			"primary_score":	999640,
			"second_score":	52792
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	616,
			"primary_score":	999640,
			"second_score":	3603
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	617,
			"primary_score":	999640,
			"second_score":	52734
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	620,
			"primary_score":	999640,
			"second_score":	3602
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	622,
			"primary_score":	999640,
			"second_score":	3601
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	623,
			"primary_score":	999640,
			"second_score":	3600
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	625,
			"primary_score":	999640,
			"second_score":	50148
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	627,
			"primary_score":	999640,
			"second_score":	3599
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	628,
			"primary_score":	999640,
			"second_score":	3598
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	630,
			"primary_score":	999640,
			"second_score":	3597
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	631,
			"primary_score":	999640,
			"second_score":	3596
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	633,
			"primary_score":	999640,
			"second_score":	3594
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	634,
			"primary_score":	999640,
			"second_score":	50141
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	636,
			"primary_score":	999640,
			"second_score":	3593
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	637,
			"primary_score":	999640,
			"second_score":	3592
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	639,
			"primary_score":	999640,
			"second_score":	3591
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	640,
			"primary_score":	999640,
			"second_score":	3590
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	642,
			"primary_score":	999640,
			"second_score":	3589
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	665,
			"primary_score":	999640,
			"second_score":	103379
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	667,
			"primary_score":	999640,
			"second_score":	103378
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	669,
			"primary_score":	999640,
			"second_score":	103377
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	670,
			"primary_score":	999640,
			"second_score":	103376
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	671,
			"primary_score":	999640,
			"second_score":	50160
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	672,
			"primary_score":	999640,
			"second_score":	47192
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	675,
			"primary_score":	999640,
			"second_score":	47191
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	676,
			"primary_score":	999640,
			"second_score":	47190
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	679,
			"primary_score":	999640,
			"second_score":	47189
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	693,
			"primary_score":	999640,
			"second_score":	119201
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	695,
			"primary_score":	999640,
			"second_score":	119200
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	697,
			"primary_score":	999640,
			"second_score":	119199
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	698,
			"primary_score":	999640,
			"second_score":	119197
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	699,
			"primary_score":	999640,
			"second_score":	119196
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	711,
			"primary_score":	999640,
			"second_score":	119195
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	717,
			"primary_score":	999640,
			"second_score":	6024
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	719,
			"primary_score":	999640,
			"second_score":	6023
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	721,
			"primary_score":	999640,
			"second_score":	6022
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	722,
			"primary_score":	999640,
			"second_score":	6020
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	723,
			"primary_score":	999640,
			"second_score":	6019
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	724,
			"primary_score":	999640,
			"second_score":	3575
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	726,
			"primary_score":	999640,
			"second_score":	3572
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	727,
			"primary_score":	999640,
			"second_score":	3612
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	729,
			"primary_score":	999640,
			"second_score":	3571
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	731,
			"primary_score":	999640,
			"second_score":	3570
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	735,
			"primary_score":	999640,
			"second_score":	3569
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	775,
			"primary_score":	999640,
			"second_score":	114462
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	777,
			"primary_score":	999640,
			"second_score":	114461
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	779,
			"primary_score":	999640,
			"second_score":	119373
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	780,
			"primary_score":	999640,
			"second_score":	114458
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	781,
			"primary_score":	999640,
			"second_score":	114457
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	782,
			"primary_score":	999640,
			"second_score":	113731
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	784,
			"primary_score":	999640,
			"second_score":	113729
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	785,
			"primary_score":	999640,
			"second_score":	113728
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	786,
			"primary_score":	999640,
			"second_score":	113727
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	787,
			"primary_score":	999640,
			"second_score":	113969
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	789,
			"primary_score":	999640,
			"second_score":	113726
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	790,
			"primary_score":	999640,
			"second_score":	113725
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	793,
			"primary_score":	999640,
			"second_score":	119305
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	898,
			"primary_score":	999640,
			"second_score":	97488
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	899,
			"primary_score":	999640,
			"second_score":	97487
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	900,
			"primary_score":	999640,
			"second_score":	97486
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	902,
			"primary_score":	999640,
			"second_score":	97485
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	904,
			"primary_score":	999640,
			"second_score":	97484
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	905,
			"primary_score":	999640,
			"second_score":	97470
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	907,
			"primary_score":	999640,
			"second_score":	97469
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	908,
			"primary_score":	999640,
			"second_score":	97468
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	909,
			"primary_score":	999640,
			"second_score":	97465
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	911,
			"primary_score":	999640,
			"second_score":	97464
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	912,
			"primary_score":	999640,
			"second_score":	97463
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	914,
			"primary_score":	999640,
			"second_score":	97466
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	916,
			"primary_score":	999640,
			"second_score":	160488
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	948,
			"primary_score":	999640,
			"second_score":	64575
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	949,
			"primary_score":	999640,
			"second_score":	64574
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	950,
			"primary_score":	999640,
			"second_score":	64573
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	952,
			"primary_score":	999640,
			"second_score":	64572
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	954,
			"primary_score":	999640,
			"second_score":	64571
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	955,
			"primary_score":	999640,
			"second_score":	64562
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	957,
			"primary_score":	999640,
			"second_score":	64561
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	958,
			"primary_score":	999640,
			"second_score":	64560
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	959,
			"primary_score":	999640,
			"second_score":	64559
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	961,
			"primary_score":	999640,
			"second_score":	64558
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	997,
			"primary_score":	999640,
			"second_score":	113904
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	998,
			"primary_score":	999640,
			"second_score":	113903
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1000,
			"primary_score":	999640,
			"second_score":	113902
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1002,
			"primary_score":	999640,
			"second_score":	113901
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1004,
			"primary_score":	999640,
			"second_score":	113900
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1005,
			"primary_score":	999640,
			"second_score":	113899
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1006,
			"primary_score":	999640,
			"second_score":	113898
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1007,
			"primary_score":	999640,
			"second_score":	113897
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1008,
			"primary_score":	999640,
			"second_score":	113896
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1038,
			"primary_score":	999640,
			"second_score":	119303
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1040,
			"primary_score":	999640,
			"second_score":	119302
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	263,
			"primary_score":	999640,
			"second_score":	47242
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	266,
			"primary_score":	999640,
			"second_score":	47241
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	267,
			"primary_score":	999640,
			"second_score":	47240
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	268,
			"primary_score":	999640,
			"second_score":	47239
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	269,
			"primary_score":	999640,
			"second_score":	47238
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	270,
			"primary_score":	999640,
			"second_score":	47237
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	271,
			"primary_score":	999640,
			"second_score":	47236
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	272,
			"primary_score":	999640,
			"second_score":	47235
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	273,
			"primary_score":	999640,
			"second_score":	47234
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	274,
			"primary_score":	999640,
			"second_score":	47233
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	276,
			"primary_score":	999640,
			"second_score":	47232
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	278,
			"primary_score":	999640,
			"second_score":	48691
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	279,
			"primary_score":	999640,
			"second_score":	47446
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	280,
			"primary_score":	999640,
			"second_score":	47445
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	281,
			"primary_score":	999640,
			"second_score":	47444
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	282,
			"primary_score":	999640,
			"second_score":	47231
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	283,
			"primary_score":	999640,
			"second_score":	47230
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	287,
			"primary_score":	999640,
			"second_score":	47228
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	39,
			"primary_score":	999640,
			"second_score":	3574
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	40,
			"primary_score":	999640,
			"second_score":	3614
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	42,
			"primary_score":	999640,
			"second_score":	3573
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	105,
			"primary_score":	999640,
			"second_score":	3243
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	106,
			"primary_score":	999640,
			"second_score":	3216
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	107,
			"primary_score":	999640,
			"second_score":	3215
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	121,
			"primary_score":	999640,
			"second_score":	113324
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	127,
			"primary_score":	999640,
			"second_score":	113323
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	226,
			"primary_score":	999640,
			"second_score":	6025
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	384,
			"primary_score":	999640,
			"second_score":	97491
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	385,
			"primary_score":	999640,
			"second_score":	97490
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	387,
			"primary_score":	999640,
			"second_score":	97489
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	388,
			"primary_score":	999640,
			"second_score":	97462
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	392,
			"primary_score":	999640,
			"second_score":	97461
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	395,
			"primary_score":	999640,
			"second_score":	97460
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3151,
			"primary_score":	999640,
			"second_score":	162466
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3153,
			"primary_score":	999640,
			"second_score":	162465
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3155,
			"primary_score":	999640,
			"second_score":	162464
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3157,
			"primary_score":	999640,
			"second_score":	162463
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3294,
			"primary_score":	999640,
			"second_score":	162486
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3297,
			"primary_score":	999640,
			"second_score":	162485
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3362,
			"primary_score":	999640,
			"second_score":	162484
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3364,
			"primary_score":	999640,
			"second_score":	162483
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3376,
			"primary_score":	999640,
			"second_score":	162482
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3382,
			"primary_score":	999640,
			"second_score":	162481
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3388,
			"primary_score":	999640,
			"second_score":	162480
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3390,
			"primary_score":	999640,
			"second_score":	162479
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3391,
			"primary_score":	999640,
			"second_score":	162478
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3401,
			"primary_score":	999640,
			"second_score":	162477
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3402,
			"primary_score":	999640,
			"second_score":	162476
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3404,
			"primary_score":	999640,
			"second_score":	162475
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3405,
			"primary_score":	999640,
			"second_score":	162474
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3413,
			"primary_score":	999640,
			"second_score":	162473
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3414,
			"primary_score":	999640,
			"second_score":	162472
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3732,
			"primary_score":	999649,
			"second_score":	162879
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3733,
			"primary_score":	999649,
			"second_score":	162871
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4147,
			"primary_score":	999640,
			"second_score":	135262
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4148,
			"primary_score":	999640,
			"second_score":	135261
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4172,
			"primary_score":	999640,
			"second_score":	134733
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4173,
			"primary_score":	999640,
			"second_score":	134651
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4412,
			"primary_score":	999640,
			"second_score":	126296
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4413,
			"primary_score":	999640,
			"second_score":	126279
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4417,
			"primary_score":	999640,
			"second_score":	142475
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4418,
			"primary_score":	999640,
			"second_score":	142263
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4457,
			"primary_score":	999720,
			"second_score":	189288
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4458,
			"primary_score":	999720,
			"second_score":	189211
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4477,
			"primary_score":	999855,
			"second_score":	186422
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4478,
			"primary_score":	999855,
			"second_score":	186368
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4482,
			"primary_score":	999855,
			"second_score":	185772
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4483,
			"primary_score":	999855,
			"second_score":	185703
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4627,
			"primary_score":	999939,
			"second_score":	189708
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4628,
			"primary_score":	999939,
			"second_score":	189605
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4732,
			"primary_score":	999640,
			"second_score":	126381
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4733,
			"primary_score":	999640,
			"second_score":	126380
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4737,
			"primary_score":	999640,
			"second_score":	129828
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4738,
			"primary_score":	999640,
			"second_score":	129800
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4742,
			"primary_score":	999640,
			"second_score":	127001
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4743,
			"primary_score":	999640,
			"second_score":	126959
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4747,
			"primary_score":	999640,
			"second_score":	126571
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4748,
			"primary_score":	999640,
			"second_score":	126447
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4977,
			"primary_score":	999849,
			"second_score":	186783
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4978,
			"primary_score":	999849,
			"second_score":	186782
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5007,
			"primary_score":	999854,
			"second_score":	186754
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5008,
			"primary_score":	999854,
			"second_score":	186444
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5077,
			"primary_score":	999859,
			"second_score":	185795
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5078,
			"primary_score":	999859,
			"second_score":	185794
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5082,
			"primary_score":	999788,
			"second_score":	166865
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5083,
			"primary_score":	999788,
			"second_score":	166864
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5197,
			"primary_score":	999640,
			"second_score":	137256
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5198,
			"primary_score":	999640,
			"second_score":	137137
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5284,
			"primary_score":	999921,
			"second_score":	165282
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5285,
			"primary_score":	999921,
			"second_score":	165255
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5289,
			"primary_score":	999921,
			"second_score":	164800
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5290,
			"primary_score":	999921,
			"second_score":	164773
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5294,
			"primary_score":	999921,
			"second_score":	163473
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5295,
			"primary_score":	999921,
			"second_score":	163442
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5309,
			"primary_score":	999921,
			"second_score":	163502
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5310,
			"primary_score":	999921,
			"second_score":	163501
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5334,
			"primary_score":	999924,
			"second_score":	164730
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5335,
			"primary_score":	999924,
			"second_score":	164359
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5339,
			"primary_score":	999924,
			"second_score":	163666
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5340,
			"primary_score":	999924,
			"second_score":	163614
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5344,
			"primary_score":	999924,
			"second_score":	163553
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5345,
			"primary_score":	999924,
			"second_score":	163524
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5399,
			"primary_score":	999715,
			"second_score":	165326
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5400,
			"primary_score":	999715,
			"second_score":	165325
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5414,
			"primary_score":	999715,
			"second_score":	165350
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5415,
			"primary_score":	999715,
			"second_score":	165348
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5439,
			"primary_score":	999715,
			"second_score":	165552
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5440,
			"primary_score":	999715,
			"second_score":	165444
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5444,
			"primary_score":	999715,
			"second_score":	165575
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5445,
			"primary_score":	999715,
			"second_score":	165574
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5464,
			"primary_score":	999921,
			"second_score":	164823
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5465,
			"primary_score":	999921,
			"second_score":	164822
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5489,
			"primary_score":	999921,
			"second_score":	165049
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5490,
			"primary_score":	999921,
			"second_score":	164889
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5494,
			"primary_score":	999921,
			"second_score":	165072
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5495,
			"primary_score":	999921,
			"second_score":	165071
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5720,
			"primary_score":	999640,
			"second_score":	162494
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5721,
			"primary_score":	999640,
			"second_score":	162493
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5723,
			"primary_score":	999640,
			"second_score":	162492
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5730,
			"primary_score":	999640,
			"second_score":	162491
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5732,
			"primary_score":	999640,
			"second_score":	162490
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5733,
			"primary_score":	999640,
			"second_score":	162489
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5736,
			"primary_score":	999640,
			"second_score":	162488
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5738,
			"primary_score":	999640,
			"second_score":	162487
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5882,
			"primary_score":	999640,
			"second_score":	162471
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5907,
			"primary_score":	999640,
			"second_score":	162470
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5908,
			"primary_score":	999640,
			"second_score":	162469
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5909,
			"primary_score":	999640,
			"second_score":	162468
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5911,
			"primary_score":	999640,
			"second_score":	162467
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5913,
			"primary_score":	999640,
			"second_score":	162462
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5916,
			"primary_score":	999640,
			"second_score":	162461
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5920,
			"primary_score":	999640,
			"second_score":	162460
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5923,
			"primary_score":	999640,
			"second_score":	162459
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	127,
			"primary_score":	999799,
			"second_score":	165395
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	128,
			"primary_score":	999799,
			"second_score":	165369
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	135,
			"primary_score":	999799,
			"second_score":	165165
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	136,
			"primary_score":	999799,
			"second_score":	165164
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	137,
			"primary_score":	999799,
			"second_score":	165160
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	138,
			"primary_score":	999799,
			"second_score":	165159
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	146,
			"primary_score":	999640,
			"second_score":	121400
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	161,
			"primary_score":	999640,
			"second_score":	118332
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	165,
			"primary_score":	999640,
			"second_score":	118331
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	166,
			"primary_score":	999640,
			"second_score":	118327
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	197,
			"primary_score":	999640,
			"second_score":	161693
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	198,
			"primary_score":	999640,
			"second_score":	161692
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	199,
			"primary_score":	999640,
			"second_score":	161691
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	200,
			"primary_score":	999640,
			"second_score":	161690
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	201,
			"primary_score":	999640,
			"second_score":	161689
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	202,
			"primary_score":	999640,
			"second_score":	161688
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	204,
			"primary_score":	999640,
			"second_score":	161687
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	205,
			"primary_score":	999640,
			"second_score":	161662
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	207,
			"primary_score":	999640,
			"second_score":	161661
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	208,
			"primary_score":	999640,
			"second_score":	161660
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	209,
			"primary_score":	999640,
			"second_score":	161659
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	210,
			"primary_score":	999640,
			"second_score":	161658
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	212,
			"primary_score":	999640,
			"second_score":	161656
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	216,
			"primary_score":	999640,
			"second_score":	161655
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	217,
			"primary_score":	999640,
			"second_score":	161654
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	218,
			"primary_score":	999640,
			"second_score":	161653
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	219,
			"primary_score":	999640,
			"second_score":	161652
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	220,
			"primary_score":	999640,
			"second_score":	161651
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	221,
			"primary_score":	999640,
			"second_score":	161650
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	222,
			"primary_score":	999640,
			"second_score":	161649
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	224,
			"primary_score":	999640,
			"second_score":	161648
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	233,
			"primary_score":	999640,
			"second_score":	161516
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	235,
			"primary_score":	999640,
			"second_score":	161440
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	236,
			"primary_score":	999640,
			"second_score":	161439
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	548,
			"primary_score":	999640,
			"second_score":	162458
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	549,
			"primary_score":	999640,
			"second_score":	162411
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	550,
			"primary_score":	999640,
			"second_score":	162410
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	553,
			"primary_score":	999640,
			"second_score":	162409
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	556,
			"primary_score":	999640,
			"second_score":	162408
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	557,
			"primary_score":	999640,
			"second_score":	162407
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	558,
			"primary_score":	999640,
			"second_score":	162406
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	559,
			"primary_score":	999640,
			"second_score":	162405
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	560,
			"primary_score":	999640,
			"second_score":	161699
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	566,
			"primary_score":	999640,
			"second_score":	161694
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	567,
			"primary_score":	999640,
			"second_score":	161647
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	614,
			"primary_score":	999640,
			"second_score":	121508
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	615,
			"primary_score":	999640,
			"second_score":	121507
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	618,
			"primary_score":	999640,
			"second_score":	121506
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	623,
			"primary_score":	999640,
			"second_score":	121505
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	626,
			"primary_score":	999640,
			"second_score":	121410
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	628,
			"primary_score":	999640,
			"second_score":	121409
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	629,
			"primary_score":	999640,
			"second_score":	121408
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	631,
			"primary_score":	999640,
			"second_score":	121407
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	632,
			"primary_score":	999640,
			"second_score":	121406
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	634,
			"primary_score":	999640,
			"second_score":	121405
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	651,
			"primary_score":	999640,
			"second_score":	121404
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	653,
			"primary_score":	999640,
			"second_score":	121399
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	654,
			"primary_score":	999640,
			"second_score":	120963
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	655,
			"primary_score":	999640,
			"second_score":	120962
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	656,
			"primary_score":	999640,
			"second_score":	120961
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	684,
			"primary_score":	999640,
			"second_score":	121766
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	685,
			"primary_score":	999640,
			"second_score":	121765
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	686,
			"primary_score":	999640,
			"second_score":	121661
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	687,
			"primary_score":	999640,
			"second_score":	121660
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	688,
			"primary_score":	999640,
			"second_score":	121659
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	689,
			"primary_score":	999640,
			"second_score":	121658
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	690,
			"primary_score":	999640,
			"second_score":	121657
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	692,
			"primary_score":	999640,
			"second_score":	121656
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	697,
			"primary_score":	999640,
			"second_score":	121655
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	699,
			"primary_score":	999640,
			"second_score":	121654
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	700,
			"primary_score":	999640,
			"second_score":	121653
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	701,
			"primary_score":	999640,
			"second_score":	121537
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	702,
			"primary_score":	999640,
			"second_score":	121535
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	704,
			"primary_score":	999640,
			"second_score":	121534
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	705,
			"primary_score":	999640,
			"second_score":	121509
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	709,
			"primary_score":	999640,
			"second_score":	120960
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	711,
			"primary_score":	999640,
			"second_score":	120959
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	712,
			"primary_score":	999640,
			"second_score":	120958
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	713,
			"primary_score":	999640,
			"second_score":	120714
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	714,
			"primary_score":	999640,
			"second_score":	120713
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	715,
			"primary_score":	999640,
			"second_score":	120712
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	716,
			"primary_score":	999640,
			"second_score":	120705
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	717,
			"primary_score":	999640,
			"second_score":	120704
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	719,
			"primary_score":	999640,
			"second_score":	119562
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	724,
			"primary_score":	999640,
			"second_score":	119561
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	729,
			"primary_score":	999640,
			"second_score":	119560
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	730,
			"primary_score":	999640,
			"second_score":	119512
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	731,
			"primary_score":	999640,
			"second_score":	119511
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	732,
			"primary_score":	999640,
			"second_score":	119340
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	733,
			"primary_score":	999640,
			"second_score":	119335
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	736,
			"primary_score":	999640,
			"second_score":	119334
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	737,
			"primary_score":	999640,
			"second_score":	119308
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	738,
			"primary_score":	999640,
			"second_score":	119282
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	739,
			"primary_score":	999640,
			"second_score":	119281
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	848,
			"primary_score":	999640,
			"second_score":	136674
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	849,
			"primary_score":	999640,
			"second_score":	136673
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	851,
			"primary_score":	999640,
			"second_score":	136672
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	854,
			"primary_score":	999640,
			"second_score":	136556
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	855,
			"primary_score":	999640,
			"second_score":	136555
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	856,
			"primary_score":	999640,
			"second_score":	136554
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	857,
			"primary_score":	999640,
			"second_score":	136553
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	858,
			"primary_score":	999640,
			"second_score":	129382
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	859,
			"primary_score":	999640,
			"second_score":	129381
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	864,
			"primary_score":	999640,
			"second_score":	129380
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	867,
			"primary_score":	999640,
			"second_score":	129379
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	868,
			"primary_score":	999640,
			"second_score":	129378
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	939,
			"primary_score":	999640,
			"second_score":	136552
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	942,
			"primary_score":	999640,
			"second_score":	136551
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	943,
			"primary_score":	999640,
			"second_score":	132253
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	945,
			"primary_score":	999640,
			"second_score":	136550
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	947,
			"primary_score":	999640,
			"second_score":	136549
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	948,
			"primary_score":	999640,
			"second_score":	136548
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	975,
			"primary_score":	999921,
			"second_score":	165225
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1449,
			"primary_score":	999644,
			"second_score":	197659
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1450,
			"primary_score":	999644,
			"second_score":	197658
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1452,
			"primary_score":	999640,
			"second_score":	143049
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1453,
			"primary_score":	999640,
			"second_score":	143048
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1466,
			"primary_score":	999644,
			"second_score":	197647
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2347,
			"primary_score":	999640,
			"second_score":	143016
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2348,
			"primary_score":	999640,
			"second_score":	143015
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2349,
			"primary_score":	999640,
			"second_score":	143014
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2376,
			"primary_score":	999698,
			"second_score":	187012
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2377,
			"primary_score":	999698,
			"second_score":	187011
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2387,
			"primary_score":	999698,
			"second_score":	187010
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2388,
			"primary_score":	999698,
			"second_score":	187009
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2389,
			"primary_score":	999701,
			"second_score":	187008
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2398,
			"primary_score":	999640,
			"second_score":	131710
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2399,
			"primary_score":	999640,
			"second_score":	131709
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2410,
			"primary_score":	999640,
			"second_score":	131708
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2415,
			"primary_score":	999640,
			"second_score":	131707
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2419,
			"primary_score":	999640,
			"second_score":	131706
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2448,
			"primary_score":	999640,
			"second_score":	134861
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2449,
			"primary_score":	999640,
			"second_score":	134860
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2450,
			"primary_score":	999640,
			"second_score":	134859
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2585,
			"primary_score":	999640,
			"second_score":	136082
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2586,
			"primary_score":	999640,
			"second_score":	136081
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2591,
			"primary_score":	999640,
			"second_score":	136080
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2592,
			"primary_score":	999640,
			"second_score":	136079
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2601,
			"primary_score":	999640,
			"second_score":	128650
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2602,
			"primary_score":	999640,
			"second_score":	128649
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2603,
			"primary_score":	999640,
			"second_score":	137466
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2604,
			"primary_score":	999640,
			"second_score":	137465
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2607,
			"primary_score":	999640,
			"second_score":	128648
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2608,
			"primary_score":	999640,
			"second_score":	128647
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2617,
			"primary_score":	999842,
			"second_score":	165405
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2618,
			"primary_score":	999842,
			"second_score":	165404
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2621,
			"primary_score":	999920,
			"second_score":	165403
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2622,
			"primary_score":	999921,
			"second_score":	165401
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2645,
			"primary_score":	999643,
			"second_score":	162744
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2651,
			"primary_score":	999640,
			"second_score":	127223
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2652,
			"primary_score":	999640,
			"second_score":	127222
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2653,
			"primary_score":	999640,
			"second_score":	127221
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2666,
			"primary_score":	999851,
			"second_score":	187112
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2667,
			"primary_score":	999851,
			"second_score":	187111
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2677,
			"primary_score":	999851,
			"second_score":	187110
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2681,
			"primary_score":	999855,
			"second_score":	187108
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2688,
			"primary_score":	999754,
			"second_score":	166119
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2689,
			"primary_score":	999754,
			"second_score":	166118
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2690,
			"primary_score":	999754,
			"second_score":	166117
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2720,
			"primary_score":	999640,
			"second_score":	131782
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2725,
			"primary_score":	999640,
			"second_score":	131781
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2726,
			"primary_score":	999640,
			"second_score":	131780
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2727,
			"primary_score":	999640,
			"second_score":	131779
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2768,
			"primary_score":	999719,
			"second_score":	191325
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2769,
			"primary_score":	999721,
			"second_score":	191323
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2854,
			"primary_score":	999879,
			"second_score":	190242
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2855,
			"primary_score":	999941,
			"second_score":	190240
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2891,
			"primary_score":	999714,
			"second_score":	165667
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2892,
			"primary_score":	999714,
			"second_score":	165666
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2898,
			"primary_score":	999722,
			"second_score":	165665
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2899,
			"primary_score":	999722,
			"second_score":	165664
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2911,
			"primary_score":	999640,
			"second_score":	130233
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2958,
			"primary_score":	999790,
			"second_score":	166903
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2960,
			"primary_score":	999790,
			"second_score":	166902
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2961,
			"primary_score":	999790,
			"second_score":	166901
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2962,
			"primary_score":	999790,
			"second_score":	166900
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2977,
			"primary_score":	999790,
			"second_score":	166899
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2978,
			"primary_score":	999790,
			"second_score":	166898
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2983,
			"primary_score":	999793,
			"second_score":	166920
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2984,
			"primary_score":	999793,
			"second_score":	166919
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2985,
			"primary_score":	999793,
			"second_score":	166918
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2986,
			"primary_score":	999801,
			"second_score":	166917
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2987,
			"primary_score":	999864,
			"second_score":	179381
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2988,
			"primary_score":	999807,
			"second_score":	166915
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3000,
			"primary_score":	999640,
			"second_score":	139065
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3001,
			"primary_score":	999640,
			"second_score":	139064
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3063,
			"primary_score":	999995,
			"second_score":	164303
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3084,
			"primary_score":	999995,
			"second_score":	164186
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3086,
			"primary_score":	999995,
			"second_score":	164185
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3094,
			"primary_score":	999995,
			"second_score":	164184
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3095,
			"primary_score":	999995,
			"second_score":	164183
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3120,
			"primary_score":	999640,
			"second_score":	136683
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3121,
			"primary_score":	999640,
			"second_score":	136682
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3123,
			"primary_score":	999640,
			"second_score":	136681
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3125,
			"primary_score":	999640,
			"second_score":	136680
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3126,
			"primary_score":	999640,
			"second_score":	136679
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3128,
			"primary_score":	999640,
			"second_score":	136678
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3129,
			"primary_score":	999640,
			"second_score":	136676
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3132,
			"primary_score":	999640,
			"second_score":	136675
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3133,
			"primary_score":	999640,
			"second_score":	136547
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3146,
			"primary_score":	999640,
			"second_score":	129426
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3149,
			"primary_score":	999640,
			"second_score":	129425
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3179,
			"primary_score":	999640,
			"second_score":	119632
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3180,
			"primary_score":	999640,
			"second_score":	119631
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3181,
			"primary_score":	999640,
			"second_score":	119630
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3183,
			"primary_score":	999640,
			"second_score":	119629
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3184,
			"primary_score":	999640,
			"second_score":	119628
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3185,
			"primary_score":	999640,
			"second_score":	119627
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3227,
			"primary_score":	999805,
			"second_score":	166914
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3228,
			"primary_score":	999805,
			"second_score":	166913
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3229,
			"primary_score":	999805,
			"second_score":	166912
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3230,
			"primary_score":	999805,
			"second_score":	166909
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3231,
			"primary_score":	999805,
			"second_score":	166908
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3232,
			"primary_score":	999805,
			"second_score":	166907
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3233,
			"primary_score":	999829,
			"second_score":	166906
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3234,
			"primary_score":	999858,
			"second_score":	166904
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3235,
			"primary_score":	999849,
			"second_score":	173810
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3255,
			"primary_score":	999640,
			"second_score":	131767
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3256,
			"primary_score":	999640,
			"second_score":	131766
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3257,
			"primary_score":	999640,
			"second_score":	131765
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3258,
			"primary_score":	999640,
			"second_score":	131764
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3261,
			"primary_score":	999640,
			"second_score":	131763
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3334,
			"primary_score":	999649,
			"second_score":	162718
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3335,
			"primary_score":	999640,
			"second_score":	134008
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3336,
			"primary_score":	999640,
			"second_score":	134007
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3350,
			"primary_score":	999649,
			"second_score":	162717
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3351,
			"primary_score":	999649,
			"second_score":	162716
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3359,
			"primary_score":	999714,
			"second_score":	165652
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3360,
			"primary_score":	999714,
			"second_score":	165651
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3361,
			"primary_score":	999714,
			"second_score":	165648
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3362,
			"primary_score":	999714,
			"second_score":	165647
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3363,
			"primary_score":	999714,
			"second_score":	165646
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3364,
			"primary_score":	999714,
			"second_score":	165645
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3365,
			"primary_score":	999714,
			"second_score":	165644
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3371,
			"primary_score":	999742,
			"second_score":	165655
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3374,
			"primary_score":	999742,
			"second_score":	165654
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3378,
			"primary_score":	999714,
			"second_score":	165643
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3380,
			"primary_score":	999714,
			"second_score":	165642
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3382,
			"primary_score":	999714,
			"second_score":	165641
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3383,
			"primary_score":	999714,
			"second_score":	165640
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3384,
			"primary_score":	999714,
			"second_score":	165609
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3385,
			"primary_score":	999714,
			"second_score":	165608
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4739,
			"primary_score":	999640,
			"second_score":	131778
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4772,
			"primary_score":	999640,
			"second_score":	131777
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4773,
			"primary_score":	999640,
			"second_score":	131776
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4778,
			"primary_score":	999640,
			"second_score":	131775
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4782,
			"primary_score":	999640,
			"second_score":	131774
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4783,
			"primary_score":	999640,
			"second_score":	131773
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4784,
			"primary_score":	999640,
			"second_score":	131772
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4870,
			"primary_score":	999640,
			"second_score":	131771
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4871,
			"primary_score":	999640,
			"second_score":	131770
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4872,
			"primary_score":	999640,
			"second_score":	131769
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4873,
			"primary_score":	999640,
			"second_score":	131768
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5273,
			"primary_score":	999754,
			"second_score":	166115
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5274,
			"primary_score":	999754,
			"second_score":	166114
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5275,
			"primary_score":	999754,
			"second_score":	166113
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5276,
			"primary_score":	999754,
			"second_score":	166112
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5278,
			"primary_score":	999754,
			"second_score":	166111
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5279,
			"primary_score":	999754,
			"second_score":	166110
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5280,
			"primary_score":	999754,
			"second_score":	166109
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5297,
			"primary_score":	999855,
			"second_score":	187107
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5298,
			"primary_score":	999855,
			"second_score":	187106
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5299,
			"primary_score":	999855,
			"second_score":	187105
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5410,
			"primary_score":	999855,
			"second_score":	187103
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5411,
			"primary_score":	999855,
			"second_score":	187102
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5414,
			"primary_score":	999855,
			"second_score":	187101
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5415,
			"primary_score":	999855,
			"second_score":	187100
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5417,
			"primary_score":	999855,
			"second_score":	187099
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5418,
			"primary_score":	999855,
			"second_score":	187098
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5476,
			"primary_score":	999680,
			"second_score":	169025
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5477,
			"primary_score":	999680,
			"second_score":	169024
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5478,
			"primary_score":	999680,
			"second_score":	169021
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5479,
			"primary_score":	999680,
			"second_score":	169020
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5482,
			"primary_score":	999679,
			"second_score":	169028
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5483,
			"primary_score":	999685,
			"second_score":	169027
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5512,
			"primary_score":	999921,
			"second_score":	165400
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5513,
			"primary_score":	999921,
			"second_score":	165399
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5514,
			"primary_score":	999921,
			"second_score":	165398
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5516,
			"primary_score":	999921,
			"second_score":	165397
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5517,
			"primary_score":	999921,
			"second_score":	165396
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5518,
			"primary_score":	999921,
			"second_score":	165368
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6842,
			"primary_score":	999640,
			"second_score":	134857
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6843,
			"primary_score":	999640,
			"second_score":	134856
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6853,
			"primary_score":	999640,
			"second_score":	134855
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6854,
			"primary_score":	999640,
			"second_score":	134854
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6876,
			"primary_score":	999640,
			"second_score":	134852
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6877,
			"primary_score":	999640,
			"second_score":	134851
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6878,
			"primary_score":	999640,
			"second_score":	134850
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6989,
			"primary_score":	999640,
			"second_score":	134848
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6990,
			"primary_score":	999640,
			"second_score":	134847
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6991,
			"primary_score":	999640,
			"second_score":	134846
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6992,
			"primary_score":	999640,
			"second_score":	134845
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7379,
			"primary_score":	999640,
			"second_score":	131704
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7380,
			"primary_score":	999640,
			"second_score":	131703
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7381,
			"primary_score":	999640,
			"second_score":	131702
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7382,
			"primary_score":	999640,
			"second_score":	131701
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7384,
			"primary_score":	999640,
			"second_score":	131700
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7385,
			"primary_score":	999640,
			"second_score":	131699
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7386,
			"primary_score":	999640,
			"second_score":	131698
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7387,
			"primary_score":	999640,
			"second_score":	131697
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7389,
			"primary_score":	999640,
			"second_score":	131696
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7390,
			"primary_score":	999640,
			"second_score":	131695
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7391,
			"primary_score":	999640,
			"second_score":	131694
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7392,
			"primary_score":	999640,
			"second_score":	131693
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7394,
			"primary_score":	999640,
			"second_score":	131692
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7395,
			"primary_score":	999640,
			"second_score":	131691
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7396,
			"primary_score":	999640,
			"second_score":	131690
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7397,
			"primary_score":	999640,
			"second_score":	131689
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7399,
			"primary_score":	999640,
			"second_score":	131688
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7400,
			"primary_score":	999640,
			"second_score":	131687
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7401,
			"primary_score":	999640,
			"second_score":	131686
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7402,
			"primary_score":	999640,
			"second_score":	131685
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7404,
			"primary_score":	999640,
			"second_score":	131684
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7405,
			"primary_score":	999640,
			"second_score":	131683
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7406,
			"primary_score":	999640,
			"second_score":	131682
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7407,
			"primary_score":	999640,
			"second_score":	131681
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7409,
			"primary_score":	999640,
			"second_score":	131680
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7410,
			"primary_score":	999640,
			"second_score":	131679
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7411,
			"primary_score":	999640,
			"second_score":	131678
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7658,
			"primary_score":	999640,
			"second_score":	143013
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7659,
			"primary_score":	999640,
			"second_score":	143012
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7660,
			"primary_score":	999640,
			"second_score":	143011
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8066,
			"primary_score":	999640,
			"second_score":	143009
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8067,
			"primary_score":	999640,
			"second_score":	143008
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8068,
			"primary_score":	999640,
			"second_score":	143007
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8069,
			"primary_score":	999640,
			"second_score":	143006
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8071,
			"primary_score":	999640,
			"second_score":	143005
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8072,
			"primary_score":	999640,
			"second_score":	143004
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8075,
			"primary_score":	999640,
			"second_score":	143003
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8076,
			"primary_score":	999640,
			"second_score":	143002
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8078,
			"primary_score":	999640,
			"second_score":	143001
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8079,
			"primary_score":	999640,
			"second_score":	143000
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8086,
			"primary_score":	999921,
			"second_score":	165224
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8120,
			"primary_score":	999921,
			"second_score":	165223
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8121,
			"primary_score":	999921,
			"second_score":	165222
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8122,
			"primary_score":	999921,
			"second_score":	165219
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8123,
			"primary_score":	999921,
			"second_score":	165218
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8134,
			"primary_score":	999921,
			"second_score":	165217
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8140,
			"primary_score":	999921,
			"second_score":	165216
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8141,
			"primary_score":	999921,
			"second_score":	165215
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8179,
			"primary_score":	999921,
			"second_score":	165213
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8180,
			"primary_score":	999921,
			"second_score":	165212
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8181,
			"primary_score":	999921,
			"second_score":	165211
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8184,
			"primary_score":	999921,
			"second_score":	165168
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8186,
			"primary_score":	999921,
			"second_score":	165167
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8187,
			"primary_score":	999921,
			"second_score":	165166
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8188,
			"primary_score":	999921,
			"second_score":	165137
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8189,
			"primary_score":	999921,
			"second_score":	165106
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8190,
			"primary_score":	999921,
			"second_score":	165105
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8199,
			"primary_score":	999922,
			"second_score":	165176
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8200,
			"primary_score":	999922,
			"second_score":	165175
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8201,
			"primary_score":	999922,
			"second_score":	165172
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8202,
			"primary_score":	999922,
			"second_score":	165171
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8204,
			"primary_score":	999921,
			"second_score":	165170
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8205,
			"primary_score":	999922,
			"second_score":	165177
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8207,
			"primary_score":	999921,
			"second_score":	165169
		}, {
			"file":	"Zend/zend_list.c",
			"line":	52,
			"primary_score":	999640,
			"second_score":	113942
		}, {
			"file":	"Zend/zend_list.c",
			"line":	54,
			"primary_score":	999640,
			"second_score":	113941
		}, {
			"file":	"Zend/zend_list.c",
			"line":	56,
			"primary_score":	999640,
			"second_score":	113931
		}, {
			"file":	"Zend/zend_list.c",
			"line":	57,
			"primary_score":	999640,
			"second_score":	113930
		}, {
			"file":	"Zend/zend_list.c",
			"line":	170,
			"primary_score":	999640,
			"second_score":	113908
		}, {
			"file":	"Zend/zend_list.c",
			"line":	171,
			"primary_score":	999640,
			"second_score":	113907
		}, {
			"file":	"Zend/zend_list.c",
			"line":	172,
			"primary_score":	999640,
			"second_score":	113906
		}, {
			"file":	"Zend/zend_list.c",
			"line":	174,
			"primary_score":	999640,
			"second_score":	113905
		}, {
			"file":	"Zend/zend_list.c",
			"line":	175,
			"primary_score":	999640,
			"second_score":	113895
		}, {
			"file":	"Zend/zend_list.c",
			"line":	183,
			"primary_score":	999640,
			"second_score":	113894
		}, {
			"file":	"Zend/zend_list.c",
			"line":	185,
			"primary_score":	999640,
			"second_score":	113785
		}, {
			"file":	"Zend/zend_list.c",
			"line":	239,
			"primary_score":	999640,
			"second_score":	103390
		}, {
			"file":	"Zend/zend_list.c",
			"line":	347,
			"primary_score":	999640,
			"second_score":	6223
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	93,
			"primary_score":	999640,
			"second_score":	161515
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	94,
			"primary_score":	999640,
			"second_score":	161514
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	96,
			"primary_score":	999640,
			"second_score":	161513
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	97,
			"primary_score":	999640,
			"second_score":	161512
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	98,
			"primary_score":	999640,
			"second_score":	161511
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	99,
			"primary_score":	999640,
			"second_score":	161508
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	100,
			"primary_score":	999640,
			"second_score":	161441
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	109,
			"primary_score":	999640,
			"second_score":	3144
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	111,
			"primary_score":	999640,
			"second_score":	3143
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	112,
			"primary_score":	999819,
			"second_score":	164657
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	113,
			"primary_score":	999819,
			"second_score":	164656
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	116,
			"primary_score":	999819,
			"second_score":	164655
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	117,
			"primary_score":	999819,
			"second_score":	164636
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	120,
			"primary_score":	999640,
			"second_score":	3142
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	126,
			"primary_score":	999640,
			"second_score":	119672
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	127,
			"primary_score":	999640,
			"second_score":	119668
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	190,
			"primary_score":	999640,
			"second_score":	14747
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	192,
			"primary_score":	999640,
			"second_score":	14746
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	233,
			"primary_score":	999640,
			"second_score":	119720
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	235,
			"primary_score":	999640,
			"second_score":	119719
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	961,
			"primary_score":	999924,
			"second_score":	123239
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	962,
			"primary_score":	999924,
			"second_score":	123238
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	963,
			"primary_score":	999924,
			"second_score":	123237
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	964,
			"primary_score":	999924,
			"second_score":	123236
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	965,
			"primary_score":	999924,
			"second_score":	123235
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	966,
			"primary_score":	999924,
			"second_score":	123234
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	968,
			"primary_score":	999924,
			"second_score":	123233
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	969,
			"primary_score":	999924,
			"second_score":	123232
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	970,
			"primary_score":	999924,
			"second_score":	123231
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	978,
			"primary_score":	999924,
			"second_score":	123230
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	990,
			"primary_score":	999924,
			"second_score":	123217
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1010,
			"primary_score":	999924,
			"second_score":	123216
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1021,
			"primary_score":	999924,
			"second_score":	123215
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1035,
			"primary_score":	999924,
			"second_score":	123214
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1038,
			"primary_score":	999924,
			"second_score":	123213
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1251,
			"primary_score":	999855,
			"second_score":	146701
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1252,
			"primary_score":	999855,
			"second_score":	146700
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1254,
			"primary_score":	999855,
			"second_score":	146699
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1255,
			"primary_score":	999918,
			"second_score":	146698
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1282,
			"primary_score":	999855,
			"second_score":	146697
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1431,
			"primary_score":	999870,
			"second_score":	123036
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1432,
			"primary_score":	999870,
			"second_score":	123035
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1434,
			"primary_score":	999870,
			"second_score":	123034
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	31,
			"primary_score":	999879,
			"second_score":	146732
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	32,
			"primary_score":	999879,
			"second_score":	146731
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	33,
			"primary_score":	999879,
			"second_score":	146730
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	34,
			"primary_score":	999879,
			"second_score":	146729
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	39,
			"primary_score":	999831,
			"second_score":	119525
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	43,
			"primary_score":	999831,
			"second_score":	119524
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	49,
			"primary_score":	999850,
			"second_score":	119523
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	63,
			"primary_score":	999833,
			"second_score":	119561
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	65,
			"primary_score":	999833,
			"second_score":	119560
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	41,
			"primary_score":	999640,
			"second_score":	113615
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	42,
			"primary_score":	999640,
			"second_score":	113549
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	47,
			"primary_score":	999640,
			"second_score":	119300
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	49,
			"primary_score":	999640,
			"second_score":	119299
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	50,
			"primary_score":	999831,
			"second_score":	119297
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	82,
			"primary_score":	999640,
			"second_score":	114511
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	84,
			"primary_score":	999640,
			"second_score":	114510
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	85,
			"primary_score":	999831,
			"second_score":	114508
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	104,
			"primary_score":	999831,
			"second_score":	146724
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	105,
			"primary_score":	999831,
			"second_score":	146723
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	107,
			"primary_score":	999831,
			"second_score":	146722
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	111,
			"primary_score":	999831,
			"second_score":	146721
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	115,
			"primary_score":	999831,
			"second_score":	146720
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	117,
			"primary_score":	999831,
			"second_score":	146719
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	118,
			"primary_score":	999831,
			"second_score":	146718
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	119,
			"primary_score":	999831,
			"second_score":	146717
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	121,
			"primary_score":	999831,
			"second_score":	146716
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	122,
			"primary_score":	999831,
			"second_score":	146715
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	123,
			"primary_score":	999831,
			"second_score":	146714
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	124,
			"primary_score":	999831,
			"second_score":	146713
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	125,
			"primary_score":	999831,
			"second_score":	146712
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	126,
			"primary_score":	999831,
			"second_score":	146711
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	127,
			"primary_score":	999831,
			"second_score":	146710
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	132,
			"primary_score":	999831,
			"second_score":	146709
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	144,
			"primary_score":	999941,
			"second_score":	123473
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	146,
			"primary_score":	999941,
			"second_score":	123472
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	167,
			"primary_score":	999832,
			"second_score":	119584
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	169,
			"primary_score":	999832,
			"second_score":	119583
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	171,
			"primary_score":	999832,
			"second_score":	119582
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	172,
			"primary_score":	999832,
			"second_score":	119580
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	173,
			"primary_score":	999832,
			"second_score":	119495
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	175,
			"primary_score":	999941,
			"second_score":	123432
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	183,
			"primary_score":	999832,
			"second_score":	119579
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	184,
			"primary_score":	999832,
			"second_score":	119578
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	186,
			"primary_score":	999832,
			"second_score":	119577
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	190,
			"primary_score":	999832,
			"second_score":	119576
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	196,
			"primary_score":	999832,
			"second_score":	119575
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	197,
			"primary_score":	999832,
			"second_score":	119574
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	198,
			"primary_score":	999832,
			"second_score":	119573
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	199,
			"primary_score":	999879,
			"second_score":	119572
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	201,
			"primary_score":	999879,
			"second_score":	119571
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	202,
			"primary_score":	999879,
			"second_score":	119570
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	203,
			"primary_score":	999879,
			"second_score":	119569
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	205,
			"primary_score":	999879,
			"second_score":	119568
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	206,
			"primary_score":	999879,
			"second_score":	119562
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	209,
			"primary_score":	999879,
			"second_score":	119559
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	214,
			"primary_score":	999832,
			"second_score":	119557
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	216,
			"primary_score":	999832,
			"second_score":	119556
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	217,
			"primary_score":	999835,
			"second_score":	119553
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	218,
			"primary_score":	999832,
			"second_score":	119545
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	219,
			"primary_score":	999832,
			"second_score":	119544
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	220,
			"primary_score":	999832,
			"second_score":	119538
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	223,
			"primary_score":	999832,
			"second_score":	119503
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	225,
			"primary_score":	999832,
			"second_score":	119499
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	230,
			"primary_score":	999832,
			"second_score":	119497
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	239,
			"primary_score":	999832,
			"second_score":	119496
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	270,
			"primary_score":	999880,
			"second_score":	122966
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	272,
			"primary_score":	999880,
			"second_score":	122965
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	110,
			"primary_score":	999640,
			"second_score":	14836
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	122,
			"primary_score":	999640,
			"second_score":	14838
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	124,
			"primary_score":	999640,
			"second_score":	14837
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	136,
			"primary_score":	999640,
			"second_score":	114591
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	140,
			"primary_score":	999640,
			"second_score":	114590
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	197,
			"primary_score":	999640,
			"second_score":	114574
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	201,
			"primary_score":	999640,
			"second_score":	114573
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	266,
			"primary_score":	999640,
			"second_score":	15271
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	268,
			"primary_score":	999640,
			"second_score":	15270
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	271,
			"primary_score":	999640,
			"second_score":	15269
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	312,
			"primary_score":	999640,
			"second_score":	19051
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	314,
			"primary_score":	999640,
			"second_score":	19050
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	315,
			"primary_score":	999640,
			"second_score":	18987
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	316,
			"primary_score":	999640,
			"second_score":	18986
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	319,
			"primary_score":	999640,
			"second_score":	18978
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	321,
			"primary_score":	999640,
			"second_score":	15268
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	329,
			"primary_score":	999640,
			"second_score":	15267
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	330,
			"primary_score":	999640,
			"second_score":	15259
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	333,
			"primary_score":	999640,
			"second_score":	15258
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	334,
			"primary_score":	999640,
			"second_score":	14829
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	335,
			"primary_score":	999640,
			"second_score":	14821
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	336,
			"primary_score":	999640,
			"second_score":	16325
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	338,
			"primary_score":	999640,
			"second_score":	14820
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	339,
			"primary_score":	999640,
			"second_score":	14819
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	350,
			"primary_score":	999640,
			"second_score":	120282
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	351,
			"primary_score":	999640,
			"second_score":	120281
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	352,
			"primary_score":	999640,
			"second_score":	120280
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	354,
			"primary_score":	999640,
			"second_score":	120279
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	359,
			"primary_score":	999640,
			"second_score":	120278
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	360,
			"primary_score":	999640,
			"second_score":	120277
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	363,
			"primary_score":	999640,
			"second_score":	120258
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	367,
			"primary_score":	999640,
			"second_score":	120257
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	369,
			"primary_score":	999640,
			"second_score":	120238
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	370,
			"primary_score":	999723,
			"second_score":	120237
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	371,
			"primary_score":	999723,
			"second_score":	120236
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	372,
			"primary_score":	999723,
			"second_score":	120229
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	373,
			"primary_score":	999723,
			"second_score":	120228
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	375,
			"primary_score":	999723,
			"second_score":	120226
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	378,
			"primary_score":	999640,
			"second_score":	120207
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	379,
			"primary_score":	999640,
			"second_score":	120206
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	380,
			"primary_score":	999640,
			"second_score":	120205
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	381,
			"primary_score":	999640,
			"second_score":	119840
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	382,
			"primary_score":	999640,
			"second_score":	119837
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	384,
			"primary_score":	999640,
			"second_score":	119836
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	386,
			"primary_score":	999640,
			"second_score":	119771
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	388,
			"primary_score":	999640,
			"second_score":	119726
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	391,
			"primary_score":	999640,
			"second_score":	119725
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	394,
			"primary_score":	999640,
			"second_score":	119724
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	397,
			"primary_score":	999640,
			"second_score":	119723
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	400,
			"primary_score":	999640,
			"second_score":	119722
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	401,
			"primary_score":	999640,
			"second_score":	119721
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	403,
			"primary_score":	999640,
			"second_score":	119718
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	416,
			"primary_score":	999640,
			"second_score":	162435
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	417,
			"primary_score":	999640,
			"second_score":	162434
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	418,
			"primary_score":	999640,
			"second_score":	162433
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	423,
			"primary_score":	999640,
			"second_score":	162440
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	424,
			"primary_score":	999640,
			"second_score":	162439
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	426,
			"primary_score":	999640,
			"second_score":	162438
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	437,
			"primary_score":	999640,
			"second_score":	162437
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	439,
			"primary_score":	999640,
			"second_score":	162436
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	441,
			"primary_score":	999640,
			"second_score":	162432
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	446,
			"primary_score":	999640,
			"second_score":	162443
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	488,
			"primary_score":	999640,
			"second_score":	162404
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	490,
			"primary_score":	999640,
			"second_score":	162403
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	493,
			"primary_score":	999640,
			"second_score":	162402
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	496,
			"primary_score":	999640,
			"second_score":	162401
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	497,
			"primary_score":	999640,
			"second_score":	162400
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	500,
			"primary_score":	999640,
			"second_score":	162397
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	501,
			"primary_score":	999722,
			"second_score":	162396
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	502,
			"primary_score":	999722,
			"second_score":	162317
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	504,
			"primary_score":	999640,
			"second_score":	162316
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	505,
			"primary_score":	999640,
			"second_score":	162315
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	506,
			"primary_score":	999640,
			"second_score":	162259
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	508,
			"primary_score":	999640,
			"second_score":	162258
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	509,
			"primary_score":	999640,
			"second_score":	162257
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	510,
			"primary_score":	999640,
			"second_score":	162178
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	513,
			"primary_score":	999640,
			"second_score":	162177
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	514,
			"primary_score":	999640,
			"second_score":	162176
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	515,
			"primary_score":	999640,
			"second_score":	162175
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	516,
			"primary_score":	999640,
			"second_score":	161710
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	517,
			"primary_score":	999640,
			"second_score":	161709
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	519,
			"primary_score":	999640,
			"second_score":	161708
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	520,
			"primary_score":	999724,
			"second_score":	161751
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	522,
			"primary_score":	999640,
			"second_score":	161707
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	530,
			"primary_score":	999640,
			"second_score":	125365
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	537,
			"primary_score":	999640,
			"second_score":	125426
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	539,
			"primary_score":	999640,
			"second_score":	161706
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	540,
			"primary_score":	999640,
			"second_score":	161702
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	543,
			"primary_score":	999640,
			"second_score":	161701
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	544,
			"primary_score":	999640,
			"second_score":	161700
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	543,
			"primary_score":	999640,
			"second_score":	158270
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	544,
			"primary_score":	999640,
			"second_score":	158269
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	546,
			"primary_score":	999640,
			"second_score":	158268
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	558,
			"primary_score":	999640,
			"second_score":	119998
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	559,
			"primary_score":	999640,
			"second_score":	119970
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	561,
			"primary_score":	999640,
			"second_score":	119969
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	573,
			"primary_score":	999880,
			"second_score":	158267
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	574,
			"primary_score":	999880,
			"second_score":	158039
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	608,
			"primary_score":	999640,
			"second_score":	158038
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1239,
			"primary_score":	999939,
			"second_score":	158282
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1240,
			"primary_score":	999939,
			"second_score":	158281
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1242,
			"primary_score":	999939,
			"second_score":	158280
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1245,
			"primary_score":	999939,
			"second_score":	158279
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1246,
			"primary_score":	999996,
			"second_score":	158278
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1249,
			"primary_score":	999939,
			"second_score":	158033
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1258,
			"primary_score":	999939,
			"second_score":	158032
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1259,
			"primary_score":	999996,
			"second_score":	158031
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1261,
			"primary_score":	999939,
			"second_score":	158030
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1276,
			"primary_score":	999939,
			"second_score":	158029
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1277,
			"primary_score":	999939,
			"second_score":	158028
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1279,
			"primary_score":	999939,
			"second_score":	158006
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1280,
			"primary_score":	999939,
			"second_score":	158005
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1281,
			"primary_score":	999939,
			"second_score":	158004
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1282,
			"primary_score":	999939,
			"second_score":	158003
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1284,
			"primary_score":	999939,
			"second_score":	157996
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1287,
			"primary_score":	999939,
			"second_score":	157995
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1288,
			"primary_score":	999996,
			"second_score":	157994
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1290,
			"primary_score":	999939,
			"second_score":	157968
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1957,
			"primary_score":	999976,
			"second_score":	167826
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1958,
			"primary_score":	999976,
			"second_score":	167825
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1960,
			"primary_score":	999976,
			"second_score":	167824
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1964,
			"primary_score":	999976,
			"second_score":	167823
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1965,
			"primary_score":	999976,
			"second_score":	167822
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1966,
			"primary_score":	999976,
			"second_score":	167821
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1967,
			"primary_score":	999976,
			"second_score":	167814
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1968,
			"primary_score":	999976,
			"second_score":	167807
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1969,
			"primary_score":	999976,
			"second_score":	167806
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	78,
			"primary_score":	999640,
			"second_score":	113617
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	79,
			"primary_score":	999640,
			"second_score":	113643
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	86,
			"primary_score":	999640,
			"second_score":	114615
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	88,
			"primary_score":	999640,
			"second_score":	114614
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	96,
			"primary_score":	999640,
			"second_score":	114616
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	97,
			"primary_score":	999640,
			"second_score":	114613
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	98,
			"primary_score":	999640,
			"second_score":	114612
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	100,
			"primary_score":	999640,
			"second_score":	114611
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	104,
			"primary_score":	999640,
			"second_score":	114610
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	105,
			"primary_score":	999640,
			"second_score":	114609
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	62,
			"primary_score":	999640,
			"second_score":	161127
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	64,
			"primary_score":	999640,
			"second_score":	123050
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	65,
			"primary_score":	999640,
			"second_score":	123049
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	66,
			"primary_score":	999640,
			"second_score":	123048
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	67,
			"primary_score":	999640,
			"second_score":	123047
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	87,
			"primary_score":	999640,
			"second_score":	123018
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	88,
			"primary_score":	999640,
			"second_score":	123017
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	89,
			"primary_score":	999640,
			"second_score":	123016
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	90,
			"primary_score":	999640,
			"second_score":	123015
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	27,
			"primary_score":	999640,
			"second_score":	114630
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	28,
			"primary_score":	999640,
			"second_score":	114629
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	29,
			"primary_score":	999640,
			"second_score":	114628
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	30,
			"primary_score":	999640,
			"second_score":	114627
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	83,
			"primary_score":	999640,
			"second_score":	161696
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	84,
			"primary_score":	999640,
			"second_score":	161695
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	93,
			"primary_score":	999640,
			"second_score":	113368
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	95,
			"primary_score":	999640,
			"second_score":	113367
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	103,
			"primary_score":	999640,
			"second_score":	113366
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	121,
			"primary_score":	999640,
			"second_score":	162447
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	123,
			"primary_score":	999640,
			"second_score":	162446
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	130,
			"primary_score":	999640,
			"second_score":	162445
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	46,
			"primary_score":	999640,
			"second_score":	161488
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	47,
			"primary_score":	999640,
			"second_score":	161487
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	67,
			"primary_score":	999640,
			"second_score":	161497
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	68,
			"primary_score":	999640,
			"second_score":	161496
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	74,
			"primary_score":	999640,
			"second_score":	161495
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	75,
			"primary_score":	999640,
			"second_score":	161494
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	76,
			"primary_score":	999640,
			"second_score":	161493
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	77,
			"primary_score":	999640,
			"second_score":	161492
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	78,
			"primary_score":	999640,
			"second_score":	161491
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	83,
			"primary_score":	999640,
			"second_score":	161498
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	84,
			"primary_score":	999640,
			"second_score":	161490
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	85,
			"primary_score":	999640,
			"second_score":	161489
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	289,
			"primary_score":	999640,
			"second_score":	161500
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	299,
			"primary_score":	999640,
			"second_score":	161499
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	301,
			"primary_score":	999640,
			"second_score":	161486
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	302,
			"primary_score":	999640,
			"second_score":	161485
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	309,
			"primary_score":	999640,
			"second_score":	161484
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	310,
			"primary_score":	999640,
			"second_score":	161483
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	311,
			"primary_score":	999640,
			"second_score":	161464
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	313,
			"primary_score":	999640,
			"second_score":	161463
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	322,
			"primary_score":	999640,
			"second_score":	161510
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	325,
			"primary_score":	999640,
			"second_score":	161509
		}, {
			"file":	"Zend/zend_string.c",
			"line":	77,
			"primary_score":	999640,
			"second_score":	6123
		}, {
			"file":	"Zend/zend_string.c",
			"line":	78,
			"primary_score":	999640,
			"second_score":	6122
		}, {
			"file":	"Zend/zend_string.c",
			"line":	90,
			"primary_score":	999917,
			"second_score":	164546
		}, {
			"file":	"Zend/zend_string.c",
			"line":	188,
			"primary_score":	999640,
			"second_score":	112815
		}, {
			"file":	"Zend/zend_string.c",
			"line":	189,
			"primary_score":	999640,
			"second_score":	112814
		}, {
			"file":	"Zend/zend_string.c",
			"line":	192,
			"primary_score":	999640,
			"second_score":	112813
		}, {
			"file":	"Zend/zend_string.c",
			"line":	199,
			"primary_score":	999640,
			"second_score":	112812
		}, {
			"file":	"Zend/zend_string.c",
			"line":	200,
			"primary_score":	999640,
			"second_score":	103422
		}, {
			"file":	"Zend/zend_string.c",
			"line":	201,
			"primary_score":	999640,
			"second_score":	103421
		}, {
			"file":	"Zend/zend_string.c",
			"line":	202,
			"primary_score":	999640,
			"second_score":	109989
		}, {
			"file":	"Zend/zend_string.c",
			"line":	203,
			"primary_score":	999640,
			"second_score":	109988
		}, {
			"file":	"Zend/zend_string.c",
			"line":	204,
			"primary_score":	999640,
			"second_score":	109987
		}, {
			"file":	"Zend/zend_string.c",
			"line":	208,
			"primary_score":	999640,
			"second_score":	109986
		}, {
			"file":	"Zend/zend_string.c",
			"line":	209,
			"primary_score":	999640,
			"second_score":	108710
		}, {
			"file":	"Zend/zend_string.c",
			"line":	211,
			"primary_score":	999640,
			"second_score":	109985
		}, {
			"file":	"Zend/zend_string.c",
			"line":	213,
			"primary_score":	999640,
			"second_score":	109984
		}, {
			"file":	"Zend/zend_string.c",
			"line":	215,
			"primary_score":	999640,
			"second_score":	103420
		}, {
			"file":	"Zend/zend_string.c",
			"line":	216,
			"primary_score":	999640,
			"second_score":	103419
		}, {
			"file":	"Zend/zend_string.c",
			"line":	218,
			"primary_score":	999640,
			"second_score":	103418
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	459,
			"primary_score":	999640,
			"second_score":	6279
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	467,
			"primary_score":	999640,
			"second_score":	6225
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1379,
			"primary_score":	999640,
			"second_score":	6278
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1380,
			"primary_score":	999640,
			"second_score":	6277
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1382,
			"primary_score":	999640,
			"second_score":	6276
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1383,
			"primary_score":	999640,
			"second_score":	6275
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1384,
			"primary_score":	999640,
			"second_score":	6229
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1385,
			"primary_score":	999640,
			"second_score":	6228
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1389,
			"primary_score":	999640,
			"second_score":	6227
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1391,
			"primary_score":	999640,
			"second_score":	6226
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	32,
			"primary_score":	999640,
			"second_score":	113945
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	37,
			"primary_score":	999640,
			"second_score":	115268
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	38,
			"primary_score":	999640,
			"second_score":	115247
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	41,
			"primary_score":	999640,
			"second_score":	114739
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	43,
			"primary_score":	999640,
			"second_score":	114738
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	44,
			"primary_score":	999640,
			"second_score":	114737
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	45,
			"primary_score":	999640,
			"second_score":	114729
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	48,
			"primary_score":	999640,
			"second_score":	114710
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	51,
			"primary_score":	999832,
			"second_score":	119586
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	53,
			"primary_score":	999832,
			"second_score":	119585
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	55,
			"primary_score":	999832,
			"second_score":	119491
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	58,
			"primary_score":	999640,
			"second_score":	113944
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	61,
			"primary_score":	999640,
			"second_score":	113943
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	63,
			"primary_score":	999640,
			"second_score":	113741
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	77,
			"primary_score":	999640,
			"second_score":	15287
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	81,
			"primary_score":	999640,
			"second_score":	19028
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	82,
			"primary_score":	999640,
			"second_score":	19025
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	107,
			"primary_score":	999640,
			"second_score":	133158
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	121,
			"primary_score":	999640,
			"second_score":	133157
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	124,
			"primary_score":	999640,
			"second_score":	133156
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	143,
			"primary_score":	999941,
			"second_score":	123475
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	144,
			"primary_score":	999941,
			"second_score":	123474
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	146,
			"primary_score":	999941,
			"second_score":	123471
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	153,
			"primary_score":	999640,
			"second_score":	119659
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	32,
			"primary_score":	999640,
			"second_score":	113947
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	33,
			"primary_score":	999640,
			"second_score":	115377
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	35,
			"primary_score":	999640,
			"second_score":	113946
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	42,
			"primary_score":	999640,
			"second_score":	133160
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	43,
			"primary_score":	999640,
			"second_score":	124209
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	45,
			"primary_score":	999640,
			"second_score":	133159
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	345,
			"primary_score":	999640,
			"second_score":	161435
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	346,
			"primary_score":	999640,
			"second_score":	161434
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	347,
			"primary_score":	999640,
			"second_score":	161433
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	350,
			"primary_score":	999640,
			"second_score":	161432
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	354,
			"primary_score":	999640,
			"second_score":	161431
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	356,
			"primary_score":	999640,
			"second_score":	161430
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	363,
			"primary_score":	999640,
			"second_score":	161421
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	364,
			"primary_score":	999640,
			"second_score":	161420
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	365,
			"primary_score":	999640,
			"second_score":	161419
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	366,
			"primary_score":	999640,
			"second_score":	161418
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	367,
			"primary_score":	999640,
			"second_score":	161417
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	368,
			"primary_score":	999640,
			"second_score":	161416
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	369,
			"primary_score":	999640,
			"second_score":	161415
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	370,
			"primary_score":	999640,
			"second_score":	161414
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	371,
			"primary_score":	999640,
			"second_score":	161413
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	372,
			"primary_score":	999640,
			"second_score":	161412
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	373,
			"primary_score":	999640,
			"second_score":	161411
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	374,
			"primary_score":	999640,
			"second_score":	161410
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	375,
			"primary_score":	999640,
			"second_score":	161409
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	377,
			"primary_score":	999640,
			"second_score":	161408
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	379,
			"primary_score":	999640,
			"second_score":	161407
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	380,
			"primary_score":	999640,
			"second_score":	161406
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	383,
			"primary_score":	999640,
			"second_score":	161314
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	395,
			"primary_score":	999640,
			"second_score":	161313
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	396,
			"primary_score":	999640,
			"second_score":	161312
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	397,
			"primary_score":	999640,
			"second_score":	161311
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	399,
			"primary_score":	999640,
			"second_score":	161310
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	400,
			"primary_score":	999640,
			"second_score":	161309
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	402,
			"primary_score":	999640,
			"second_score":	161308
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	403,
			"primary_score":	999640,
			"second_score":	120310
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	410,
			"primary_score":	999640,
			"second_score":	120309
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	411,
			"primary_score":	999640,
			"second_score":	120288
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	414,
			"primary_score":	999640,
			"second_score":	120287
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	431,
			"primary_score":	999640,
			"second_score":	119673
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	436,
			"primary_score":	999640,
			"second_score":	119672
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	437,
			"primary_score":	999640,
			"second_score":	119671
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	458,
			"primary_score":	999640,
			"second_score":	120301
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	459,
			"primary_score":	999640,
			"second_score":	120300
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	461,
			"primary_score":	999640,
			"second_score":	120299
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	462,
			"primary_score":	999640,
			"second_score":	120298
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	463,
			"primary_score":	999640,
			"second_score":	120297
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	474,
			"primary_score":	999640,
			"second_score":	120296
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	476,
			"primary_score":	999640,
			"second_score":	120295
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	478,
			"primary_score":	999640,
			"second_score":	120291
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	481,
			"primary_score":	999640,
			"second_score":	120290
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	566,
			"primary_score":	999640,
			"second_score":	120289
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	571,
			"primary_score":	999640,
			"second_score":	123028
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	572,
			"primary_score":	999640,
			"second_score":	123027
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	573,
			"primary_score":	999640,
			"second_score":	123026
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	575,
			"primary_score":	999640,
			"second_score":	123025
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	576,
			"primary_score":	999640,
			"second_score":	123024
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	589,
			"primary_score":	999640,
			"second_score":	123023
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	603,
			"primary_score":	999640,
			"second_score":	123022
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	604,
			"primary_score":	999901,
			"second_score":	123133
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	605,
			"primary_score":	999901,
			"second_score":	123132
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	606,
			"primary_score":	999901,
			"second_score":	123131
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	607,
			"primary_score":	999901,
			"second_score":	123130
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	608,
			"primary_score":	999901,
			"second_score":	123129
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	609,
			"primary_score":	999901,
			"second_score":	123128
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	610,
			"primary_score":	999901,
			"second_score":	123127
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	613,
			"primary_score":	999640,
			"second_score":	123021
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	614,
			"primary_score":	999640,
			"second_score":	123011
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	615,
			"primary_score":	999640,
			"second_score":	123007
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	617,
			"primary_score":	999640,
			"second_score":	123006
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	618,
			"primary_score":	999640,
			"second_score":	123005
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	620,
			"primary_score":	999640,
			"second_score":	123004
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	621,
			"primary_score":	999640,
			"second_score":	122894
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	622,
			"primary_score":	999640,
			"second_score":	122891
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	623,
			"primary_score":	999640,
			"second_score":	122890
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	625,
			"primary_score":	999640,
			"second_score":	122889
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	626,
			"primary_score":	999640,
			"second_score":	122888
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	627,
			"primary_score":	999640,
			"second_score":	122887
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	628,
			"primary_score":	999640,
			"second_score":	122886
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	630,
			"primary_score":	999640,
			"second_score":	122885
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	631,
			"primary_score":	999640,
			"second_score":	122874
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	632,
			"primary_score":	999640,
			"second_score":	122865
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	636,
			"primary_score":	999640,
			"second_score":	122864
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	638,
			"primary_score":	999640,
			"second_score":	122863
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	643,
			"primary_score":	999640,
			"second_score":	121702
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	644,
			"primary_score":	999656,
			"second_score":	120408
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	709,
			"primary_score":	999640,
			"second_score":	121701
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	710,
			"primary_score":	999640,
			"second_score":	121700
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	712,
			"primary_score":	999640,
			"second_score":	121699
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	713,
			"primary_score":	999906,
			"second_score":	121173
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	714,
			"primary_score":	999909,
			"second_score":	121172
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	722,
			"primary_score":	999909,
			"second_score":	121171
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	724,
			"primary_score":	999906,
			"second_score":	121149
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	725,
			"primary_score":	999906,
			"second_score":	121148
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	726,
			"primary_score":	999906,
			"second_score":	121147
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	729,
			"primary_score":	999640,
			"second_score":	121698
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	730,
			"primary_score":	999640,
			"second_score":	121697
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	732,
			"primary_score":	999640,
			"second_score":	121696
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	734,
			"primary_score":	999640,
			"second_score":	120313
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	742,
			"primary_score":	999640,
			"second_score":	120312
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	747,
			"primary_score":	999901,
			"second_score":	123142
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	748,
			"primary_score":	999901,
			"second_score":	123141
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	794,
			"primary_score":	999855,
			"second_score":	147057
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	795,
			"primary_score":	999855,
			"second_score":	147056
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	796,
			"primary_score":	999855,
			"second_score":	147055
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	798,
			"primary_score":	999855,
			"second_score":	147054
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	799,
			"primary_score":	999855,
			"second_score":	147053
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	808,
			"primary_score":	999855,
			"second_score":	147052
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	809,
			"primary_score":	999855,
			"second_score":	147028
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	810,
			"primary_score":	999855,
			"second_score":	146705
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	812,
			"primary_score":	999855,
			"second_score":	146702
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	814,
			"primary_score":	999855,
			"second_score":	146696
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	822,
			"primary_score":	999918,
			"second_score":	146695
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	823,
			"primary_score":	999919,
			"second_score":	146694
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	824,
			"primary_score":	999919,
			"second_score":	146692
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	827,
			"primary_score":	999918,
			"second_score":	146688
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	830,
			"primary_score":	999918,
			"second_score":	146682
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	831,
			"primary_score":	999918,
			"second_score":	146681
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	832,
			"primary_score":	999918,
			"second_score":	146680
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	834,
			"primary_score":	999918,
			"second_score":	146679
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	835,
			"primary_score":	999918,
			"second_score":	146678
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1151,
			"primary_score":	999854,
			"second_score":	147105
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1153,
			"primary_score":	999854,
			"second_score":	147104
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1154,
			"primary_score":	999854,
			"second_score":	147103
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1155,
			"primary_score":	999854,
			"second_score":	147102
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1161,
			"primary_score":	999854,
			"second_score":	147101
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1163,
			"primary_score":	999854,
			"second_score":	147100
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1164,
			"primary_score":	999854,
			"second_score":	147099
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1167,
			"primary_score":	999854,
			"second_score":	147098
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1168,
			"primary_score":	999854,
			"second_score":	147064
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1178,
			"primary_score":	999854,
			"second_score":	147062
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1179,
			"primary_score":	999854,
			"second_score":	147061
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1731,
			"primary_score":	999640,
			"second_score":	121322
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1733,
			"primary_score":	999640,
			"second_score":	121321
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1734,
			"primary_score":	999640,
			"second_score":	121320
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1736,
			"primary_score":	999640,
			"second_score":	121319
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1737,
			"primary_score":	999640,
			"second_score":	121318
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1739,
			"primary_score":	999640,
			"second_score":	121317
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1746,
			"primary_score":	999640,
			"second_score":	121316
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1749,
			"primary_score":	999640,
			"second_score":	121255
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1750,
			"primary_score":	999640,
			"second_score":	121254
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1919,
			"primary_score":	999640,
			"second_score":	123054
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1921,
			"primary_score":	999640,
			"second_score":	123053
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1923,
			"primary_score":	999640,
			"second_score":	123052
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1925,
			"primary_score":	999640,
			"second_score":	123046
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1927,
			"primary_score":	999640,
			"second_score":	123045
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1931,
			"primary_score":	999640,
			"second_score":	123032
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1933,
			"primary_score":	999640,
			"second_score":	123030
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1935,
			"primary_score":	999640,
			"second_score":	123029
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1940,
			"primary_score":	999640,
			"second_score":	120308
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1941,
			"primary_score":	999640,
			"second_score":	120307
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1944,
			"primary_score":	999640,
			"second_score":	120306
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1945,
			"primary_score":	999640,
			"second_score":	120305
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1947,
			"primary_score":	999640,
			"second_score":	120304
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1948,
			"primary_score":	999640,
			"second_score":	120303
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1951,
			"primary_score":	999640,
			"second_score":	118960
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1952,
			"primary_score":	999640,
			"second_score":	118959
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1954,
			"primary_score":	999640,
			"second_score":	118958
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1956,
			"primary_score":	999640,
			"second_score":	118957
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1957,
			"primary_score":	999640,
			"second_score":	118933
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1958,
			"primary_score":	999640,
			"second_score":	118925
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1959,
			"primary_score":	999640,
			"second_score":	118922
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1978,
			"primary_score":	999640,
			"second_score":	120302
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2077,
			"primary_score":	999640,
			"second_score":	133201
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2079,
			"primary_score":	999640,
			"second_score":	133200
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2080,
			"primary_score":	999640,
			"second_score":	133199
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2084,
			"primary_score":	999640,
			"second_score":	133198
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2085,
			"primary_score":	999640,
			"second_score":	133197
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2086,
			"primary_score":	999640,
			"second_score":	133196
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2089,
			"primary_score":	999640,
			"second_score":	133195
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2091,
			"primary_score":	999640,
			"second_score":	133194
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2092,
			"primary_score":	999640,
			"second_score":	133170
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2093,
			"primary_score":	999640,
			"second_score":	133162
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2094,
			"primary_score":	999640,
			"second_score":	133161
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2096,
			"primary_score":	999640,
			"second_score":	133155
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2099,
			"primary_score":	999640,
			"second_score":	133151
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2100,
			"primary_score":	999640,
			"second_score":	133150
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5509,
			"primary_score":	999994,
			"second_score":	158288
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5512,
			"primary_score":	999994,
			"second_score":	158287
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5513,
			"primary_score":	999994,
			"second_score":	158286
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5518,
			"primary_score":	999994,
			"second_score":	157967
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5519,
			"primary_score":	999994,
			"second_score":	157966
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5999,
			"primary_score":	999640,
			"second_score":	119668
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6000,
			"primary_score":	999640,
			"second_score":	119667
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6001,
			"primary_score":	999640,
			"second_score":	119666
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6002,
			"primary_score":	999640,
			"second_score":	119665
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6004,
			"primary_score":	999640,
			"second_score":	119664
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6005,
			"primary_score":	999640,
			"second_score":	119663
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6007,
			"primary_score":	999640,
			"second_score":	119661
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6014,
			"primary_score":	999640,
			"second_score":	119660
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6017,
			"primary_score":	999640,
			"second_score":	119647
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6018,
			"primary_score":	999640,
			"second_score":	119621
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6019,
			"primary_score":	999640,
			"second_score":	119620
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6339,
			"primary_score":	999974,
			"second_score":	157962
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6341,
			"primary_score":	999974,
			"second_score":	157961
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6342,
			"primary_score":	999974,
			"second_score":	157960
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6346,
			"primary_score":	999974,
			"second_score":	157959
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6347,
			"primary_score":	999974,
			"second_score":	157958
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6348,
			"primary_score":	999974,
			"second_score":	157957
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6349,
			"primary_score":	999974,
			"second_score":	157956
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6351,
			"primary_score":	999974,
			"second_score":	157955
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6353,
			"primary_score":	999974,
			"second_score":	157953
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6354,
			"primary_score":	999974,
			"second_score":	157893
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6355,
			"primary_score":	999974,
			"second_score":	157885
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6358,
			"primary_score":	999974,
			"second_score":	157884
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6361,
			"primary_score":	999974,
			"second_score":	157880
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6362,
			"primary_score":	999974,
			"second_score":	157879
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10178,
			"primary_score":	999640,
			"second_score":	121459
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10179,
			"primary_score":	999640,
			"second_score":	121458
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10180,
			"primary_score":	999640,
			"second_score":	121457
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10181,
			"primary_score":	999640,
			"second_score":	121456
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10183,
			"primary_score":	999640,
			"second_score":	121455
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10184,
			"primary_score":	999640,
			"second_score":	121454
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10186,
			"primary_score":	999640,
			"second_score":	121443
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10193,
			"primary_score":	999640,
			"second_score":	121442
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10196,
			"primary_score":	999640,
			"second_score":	121381
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10197,
			"primary_score":	999640,
			"second_score":	121327
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10198,
			"primary_score":	999640,
			"second_score":	121326
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10211,
			"primary_score":	999640,
			"second_score":	120726
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10212,
			"primary_score":	999640,
			"second_score":	120725
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10213,
			"primary_score":	999640,
			"second_score":	120724
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10214,
			"primary_score":	999640,
			"second_score":	120723
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10216,
			"primary_score":	999640,
			"second_score":	120722
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10217,
			"primary_score":	999640,
			"second_score":	120721
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10219,
			"primary_score":	999640,
			"second_score":	120710
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10222,
			"primary_score":	999640,
			"second_score":	120709
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10223,
			"primary_score":	999640,
			"second_score":	120704
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10224,
			"primary_score":	999640,
			"second_score":	120673
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10228,
			"primary_score":	999640,
			"second_score":	120672
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10236,
			"primary_score":	999640,
			"second_score":	120671
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10519,
			"primary_score":	999640,
			"second_score":	123116
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10520,
			"primary_score":	999640,
			"second_score":	123115
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10521,
			"primary_score":	999640,
			"second_score":	123114
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10522,
			"primary_score":	999640,
			"second_score":	123113
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10524,
			"primary_score":	999640,
			"second_score":	123102
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10528,
			"primary_score":	999640,
			"second_score":	123101
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10537,
			"primary_score":	999640,
			"second_score":	123099
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10538,
			"primary_score":	999640,
			"second_score":	123097
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10539,
			"primary_score":	999640,
			"second_score":	123093
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10541,
			"primary_score":	999640,
			"second_score":	123059
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10542,
			"primary_score":	999640,
			"second_score":	123058
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10547,
			"primary_score":	999640,
			"second_score":	123123
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10548,
			"primary_score":	999640,
			"second_score":	123122
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10549,
			"primary_score":	999640,
			"second_score":	123121
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10551,
			"primary_score":	999640,
			"second_score":	123120
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10552,
			"primary_score":	999640,
			"second_score":	123119
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10553,
			"primary_score":	999640,
			"second_score":	123118
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10554,
			"primary_score":	999640,
			"second_score":	123117
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10556,
			"primary_score":	999993,
			"second_score":	146265
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10557,
			"primary_score":	999993,
			"second_score":	146264
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11261,
			"primary_score":	999640,
			"second_score":	119785
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11262,
			"primary_score":	999640,
			"second_score":	119784
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11263,
			"primary_score":	999640,
			"second_score":	119783
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11265,
			"primary_score":	999640,
			"second_score":	119782
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11266,
			"primary_score":	999640,
			"second_score":	119781
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11268,
			"primary_score":	999640,
			"second_score":	119770
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11269,
			"primary_score":	999640,
			"second_score":	119767
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11270,
			"primary_score":	999640,
			"second_score":	119766
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11272,
			"primary_score":	999640,
			"second_score":	119732
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11273,
			"primary_score":	999640,
			"second_score":	119678
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11274,
			"primary_score":	999640,
			"second_score":	119677
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26202,
			"primary_score":	999763,
			"second_score":	146670
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26203,
			"primary_score":	999763,
			"second_score":	146669
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26205,
			"primary_score":	999763,
			"second_score":	146668
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26207,
			"primary_score":	999763,
			"second_score":	146664
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26211,
			"primary_score":	999764,
			"second_score":	146663
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26220,
			"primary_score":	999763,
			"second_score":	146661
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26221,
			"primary_score":	999763,
			"second_score":	146659
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26222,
			"primary_score":	999763,
			"second_score":	146655
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26224,
			"primary_score":	999763,
			"second_score":	146654
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26225,
			"primary_score":	999763,
			"second_score":	146653
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26316,
			"primary_score":	999763,
			"second_score":	146674
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26318,
			"primary_score":	999763,
			"second_score":	146673
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26322,
			"primary_score":	999763,
			"second_score":	146672
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26323,
			"primary_score":	999763,
			"second_score":	146671
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28237,
			"primary_score":	999863,
			"second_score":	161305
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28239,
			"primary_score":	999863,
			"second_score":	161304
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28240,
			"primary_score":	999863,
			"second_score":	161303
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28242,
			"primary_score":	999863,
			"second_score":	161302
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28243,
			"primary_score":	999863,
			"second_score":	161301
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28244,
			"primary_score":	999863,
			"second_score":	161300
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28246,
			"primary_score":	999863,
			"second_score":	161217
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28260,
			"primary_score":	999863,
			"second_score":	161216
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28269,
			"primary_score":	999863,
			"second_score":	161215
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28271,
			"primary_score":	999863,
			"second_score":	161214
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28272,
			"primary_score":	999863,
			"second_score":	161213
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28276,
			"primary_score":	999863,
			"second_score":	161162
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28284,
			"primary_score":	999863,
			"second_score":	161161
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28285,
			"primary_score":	999863,
			"second_score":	161160
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28290,
			"primary_score":	999929,
			"second_score":	123269
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28291,
			"primary_score":	999929,
			"second_score":	123268
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28292,
			"primary_score":	999929,
			"second_score":	123267
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28293,
			"primary_score":	999929,
			"second_score":	123266
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28296,
			"primary_score":	999929,
			"second_score":	123265
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28297,
			"primary_score":	999929,
			"second_score":	123264
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28299,
			"primary_score":	999929,
			"second_score":	123258
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28301,
			"primary_score":	999929,
			"second_score":	123257
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28306,
			"primary_score":	999929,
			"second_score":	123256
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28307,
			"primary_score":	999929,
			"second_score":	123255
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28309,
			"primary_score":	999929,
			"second_score":	123254
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28311,
			"primary_score":	999929,
			"second_score":	123250
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28313,
			"primary_score":	999929,
			"second_score":	123249
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28315,
			"primary_score":	999929,
			"second_score":	123243
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28317,
			"primary_score":	999929,
			"second_score":	123242
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28319,
			"primary_score":	999929,
			"second_score":	123241
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28324,
			"primary_score":	999929,
			"second_score":	123240
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28325,
			"primary_score":	999929,
			"second_score":	123212
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28328,
			"primary_score":	999929,
			"second_score":	123211
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28331,
			"primary_score":	999929,
			"second_score":	123210
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28338,
			"primary_score":	999929,
			"second_score":	123207
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28341,
			"primary_score":	999929,
			"second_score":	123206
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28342,
			"primary_score":	999929,
			"second_score":	123204
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28353,
			"primary_score":	999929,
			"second_score":	123202
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28354,
			"primary_score":	999929,
			"second_score":	123201
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32090,
			"primary_score":	999756,
			"second_score":	147406
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32091,
			"primary_score":	999756,
			"second_score":	147405
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32092,
			"primary_score":	999756,
			"second_score":	147404
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32093,
			"primary_score":	999756,
			"second_score":	147403
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32095,
			"primary_score":	999756,
			"second_score":	147402
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32096,
			"primary_score":	999756,
			"second_score":	147401
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32097,
			"primary_score":	999756,
			"second_score":	147390
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32099,
			"primary_score":	999756,
			"second_score":	147229
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32113,
			"primary_score":	999756,
			"second_score":	147228
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32122,
			"primary_score":	999756,
			"second_score":	147227
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32124,
			"primary_score":	999756,
			"second_score":	147226
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32127,
			"primary_score":	999756,
			"second_score":	147225
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32129,
			"primary_score":	999756,
			"second_score":	147205
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32136,
			"primary_score":	999785,
			"second_score":	147203
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32138,
			"primary_score":	999756,
			"second_score":	147180
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32139,
			"primary_score":	999756,
			"second_score":	147179
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	39394,
			"primary_score":	999640,
			"second_score":	161704
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	39413,
			"primary_score":	999640,
			"second_score":	161703
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	39418,
			"primary_score":	999640,
			"second_score":	161705
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	28,
			"primary_score":	999816,
			"second_score":	122530
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	29,
			"primary_score":	999816,
			"second_score":	122529
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	31,
			"primary_score":	999816,
			"second_score":	122528
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	36,
			"primary_score":	999816,
			"second_score":	122532
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	44,
			"primary_score":	999816,
			"second_score":	122531
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	45,
			"primary_score":	999816,
			"second_score":	122527
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	46,
			"primary_score":	999816,
			"second_score":	122526
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	47,
			"primary_score":	999816,
			"second_score":	122525
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	48,
			"primary_score":	999816,
			"second_score":	122524
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	49,
			"primary_score":	999998,
			"second_score":	122523
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	50,
			"primary_score":	999999,
			"second_score":	144720
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	53,
			"primary_score":	999816,
			"second_score":	122522
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	58,
			"primary_score":	999816,
			"second_score":	122901
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	63,
			"primary_score":	999998,
			"second_score":	122533
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	74,
			"primary_score":	999817,
			"second_score":	122916
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	79,
			"primary_score":	999862,
			"second_score":	159501
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	84,
			"primary_score":	999856,
			"second_score":	122920
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	86,
			"primary_score":	999856,
			"second_score":	122919
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	87,
			"primary_score":	999856,
			"second_score":	122918
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	88,
			"primary_score":	999856,
			"second_score":	122917
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	89,
			"primary_score":	999856,
			"second_score":	122915
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	92,
			"primary_score":	999856,
			"second_score":	122914
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	93,
			"primary_score":	999856,
			"second_score":	122902
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	94,
			"primary_score":	999960,
			"second_score":	145084
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	95,
			"primary_score":	999978,
			"second_score":	145082
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	97,
			"primary_score":	999856,
			"second_score":	122888
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	98,
			"primary_score":	999988,
			"second_score":	145080
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	99,
			"primary_score":	999988,
			"second_score":	145079
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	102,
			"primary_score":	999994,
			"second_score":	145078
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	105,
			"primary_score":	999860,
			"second_score":	122887
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	108,
			"primary_score":	999856,
			"second_score":	122886
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	109,
			"primary_score":	999860,
			"second_score":	122885
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	111,
			"primary_score":	999860,
			"second_score":	122884
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	112,
			"primary_score":	999860,
			"second_score":	122883
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	119,
			"primary_score":	999856,
			"second_score":	122882
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	120,
			"primary_score":	999860,
			"second_score":	122881
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	122,
			"primary_score":	999860,
			"second_score":	122880
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	123,
			"primary_score":	999860,
			"second_score":	122879
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	124,
			"primary_score":	999860,
			"second_score":	122878
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	132,
			"primary_score":	999993,
			"second_score":	141673
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	135,
			"primary_score":	999993,
			"second_score":	141672
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	137,
			"primary_score":	999993,
			"second_score":	141660
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	140,
			"primary_score":	999993,
			"second_score":	141659
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	153,
			"primary_score":	999862,
			"second_score":	159502
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	156,
			"primary_score":	999864,
			"second_score":	159500
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	436,
			"primary_score":	999841,
			"second_score":	157480
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	437,
			"primary_score":	999841,
			"second_score":	157479
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	439,
			"primary_score":	999841,
			"second_score":	157478
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	444,
			"primary_score":	999848,
			"second_score":	157448
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	445,
			"primary_score":	999848,
			"second_score":	157447
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	446,
			"primary_score":	999848,
			"second_score":	157446
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	448,
			"primary_score":	999848,
			"second_score":	157445
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	449,
			"primary_score":	999869,
			"second_score":	159548
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	452,
			"primary_score":	999869,
			"second_score":	159547
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	454,
			"primary_score":	999848,
			"second_score":	157444
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	455,
			"primary_score":	999848,
			"second_score":	157443
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	456,
			"primary_score":	999848,
			"second_score":	157424
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	457,
			"primary_score":	999848,
			"second_score":	157423
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	459,
			"primary_score":	999848,
			"second_score":	157422
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	460,
			"primary_score":	999848,
			"second_score":	157421
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	461,
			"primary_score":	999848,
			"second_score":	157420
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	462,
			"primary_score":	999848,
			"second_score":	157419
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	463,
			"primary_score":	999848,
			"second_score":	157418
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	464,
			"primary_score":	999848,
			"second_score":	157417
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	507,
			"primary_score":	999886,
			"second_score":	157454
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	509,
			"primary_score":	999886,
			"second_score":	157453
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	510,
			"primary_score":	999976,
			"second_score":	157452
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	513,
			"primary_score":	999976,
			"second_score":	157451
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	516,
			"primary_score":	999886,
			"second_score":	157450
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	523,
			"primary_score":	999886,
			"second_score":	157449
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	697,
			"primary_score":	999927,
			"second_score":	146419
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	698,
			"primary_score":	999927,
			"second_score":	146418
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	699,
			"primary_score":	999927,
			"second_score":	146417
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	701,
			"primary_score":	999927,
			"second_score":	146416
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	702,
			"primary_score":	999968,
			"second_score":	146415
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	840,
			"primary_score":	999841,
			"second_score":	157404
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	841,
			"primary_score":	999841,
			"second_score":	157403
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	843,
			"primary_score":	999841,
			"second_score":	157402
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	845,
			"primary_score":	999841,
			"second_score":	157385
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	851,
			"primary_score":	999841,
			"second_score":	157384
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	852,
			"primary_score":	999841,
			"second_score":	157383
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	853,
			"primary_score":	999841,
			"second_score":	157382
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	854,
			"primary_score":	999841,
			"second_score":	157381
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	889,
			"primary_score":	999841,
			"second_score":	157380
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	890,
			"primary_score":	999841,
			"second_score":	157379
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	891,
			"primary_score":	999841,
			"second_score":	157394
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	892,
			"primary_score":	999841,
			"second_score":	157393
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	893,
			"primary_score":	999841,
			"second_score":	157392
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	1326,
			"primary_score":	999978,
			"second_score":	157559
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	1327,
			"primary_score":	999978,
			"second_score":	157558
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	1328,
			"primary_score":	999978,
			"second_score":	157557
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	1329,
			"primary_score":	999978,
			"second_score":	157556
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	1330,
			"primary_score":	999978,
			"second_score":	157555
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	1787,
			"primary_score":	999883,
			"second_score":	159659
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	1788,
			"primary_score":	999883,
			"second_score":	159658
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	1789,
			"primary_score":	999883,
			"second_score":	159657
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	1790,
			"primary_score":	999883,
			"second_score":	159656
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	2406,
			"primary_score":	999841,
			"second_score":	157391
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	2407,
			"primary_score":	999841,
			"second_score":	157390
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	2409,
			"primary_score":	999841,
			"second_score":	157389
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	2410,
			"primary_score":	999841,
			"second_score":	157388
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	2411,
			"primary_score":	999841,
			"second_score":	157386
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	9036,
			"primary_score":	999908,
			"second_score":	159609
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	9037,
			"primary_score":	999908,
			"second_score":	159608
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	9038,
			"primary_score":	999908,
			"second_score":	159607
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	9039,
			"primary_score":	999908,
			"second_score":	159601
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	9040,
			"primary_score":	999908,
			"second_score":	159597
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	9041,
			"primary_score":	999908,
			"second_score":	159572
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	9042,
			"primary_score":	999908,
			"second_score":	159553
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	9043,
			"primary_score":	999908,
			"second_score":	159534
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	9044,
			"primary_score":	999908,
			"second_score":	159533
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	12893,
			"primary_score":	999898,
			"second_score":	159639
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	12894,
			"primary_score":	999898,
			"second_score":	159638
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	12895,
			"primary_score":	999898,
			"second_score":	159637
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14657,
			"primary_score":	999914,
			"second_score":	159636
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14658,
			"primary_score":	999914,
			"second_score":	159635
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14659,
			"primary_score":	999914,
			"second_score":	159634
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14660,
			"primary_score":	999914,
			"second_score":	159633
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14661,
			"primary_score":	999914,
			"second_score":	159632
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14852,
			"primary_score":	999903,
			"second_score":	159630
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14853,
			"primary_score":	999903,
			"second_score":	159629
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14854,
			"primary_score":	999903,
			"second_score":	159628
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14855,
			"primary_score":	999904,
			"second_score":	159627
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14856,
			"primary_score":	999904,
			"second_score":	159626
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14857,
			"primary_score":	999904,
			"second_score":	159625
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14858,
			"primary_score":	999936,
			"second_score":	159624
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14859,
			"primary_score":	999936,
			"second_score":	159623
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14865,
			"primary_score":	999978,
			"second_score":	159622
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14866,
			"primary_score":	999978,
			"second_score":	159621
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14867,
			"primary_score":	999978,
			"second_score":	159620
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14868,
			"primary_score":	999978,
			"second_score":	159619
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14869,
			"primary_score":	999978,
			"second_score":	159618
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14870,
			"primary_score":	999978,
			"second_score":	159617
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14871,
			"primary_score":	999978,
			"second_score":	159616
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14934,
			"primary_score":	999904,
			"second_score":	159615
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14935,
			"primary_score":	999904,
			"second_score":	159614
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14936,
			"primary_score":	999904,
			"second_score":	159613
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14937,
			"primary_score":	999904,
			"second_score":	159612
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14938,
			"primary_score":	999910,
			"second_score":	159611
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	15584,
			"primary_score":	999883,
			"second_score":	159655
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	15585,
			"primary_score":	999883,
			"second_score":	159654
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	15586,
			"primary_score":	999887,
			"second_score":	159653
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	15591,
			"primary_score":	999890,
			"second_score":	159652
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	15592,
			"primary_score":	999890,
			"second_score":	159651
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	15593,
			"primary_score":	999892,
			"second_score":	159649
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	15629,
			"primary_score":	999889,
			"second_score":	159648
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	15630,
			"primary_score":	999889,
			"second_score":	159647
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	15631,
			"primary_score":	999889,
			"second_score":	159646
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	15632,
			"primary_score":	999889,
			"second_score":	159645
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	15633,
			"primary_score":	999889,
			"second_score":	159644
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	15634,
			"primary_score":	999889,
			"second_score":	159643
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	15635,
			"primary_score":	999889,
			"second_score":	159642
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	15636,
			"primary_score":	999889,
			"second_score":	159641
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	15637,
			"primary_score":	999889,
			"second_score":	159640
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21317,
			"primary_score":	999978,
			"second_score":	157490
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21318,
			"primary_score":	999978,
			"second_score":	157489
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21319,
			"primary_score":	999978,
			"second_score":	157488
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21320,
			"primary_score":	999978,
			"second_score":	157487
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21321,
			"primary_score":	999978,
			"second_score":	157486
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21322,
			"primary_score":	999979,
			"second_score":	157492
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21326,
			"primary_score":	999978,
			"second_score":	157484
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21327,
			"primary_score":	999978,
			"second_score":	157483
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21329,
			"primary_score":	999978,
			"second_score":	157482
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21330,
			"primary_score":	999978,
			"second_score":	157476
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21331,
			"primary_score":	999978,
			"second_score":	157473
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21332,
			"primary_score":	999978,
			"second_score":	157467
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21333,
			"primary_score":	999978,
			"second_score":	157460
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21335,
			"primary_score":	999978,
			"second_score":	157455
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21336,
			"primary_score":	999978,
			"second_score":	157416
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21337,
			"primary_score":	999978,
			"second_score":	157415
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21338,
			"primary_score":	999978,
			"second_score":	157414
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21339,
			"primary_score":	999978,
			"second_score":	157413
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21340,
			"primary_score":	999978,
			"second_score":	157412
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21341,
			"primary_score":	999978,
			"second_score":	157411
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21342,
			"primary_score":	999978,
			"second_score":	157410
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21343,
			"primary_score":	999978,
			"second_score":	157409
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21344,
			"primary_score":	999978,
			"second_score":	157408
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21346,
			"primary_score":	999978,
			"second_score":	157407
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	21347,
			"primary_score":	999978,
			"second_score":	157406
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24735,
			"primary_score":	999841,
			"second_score":	157609
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24736,
			"primary_score":	999841,
			"second_score":	157608
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24737,
			"primary_score":	999841,
			"second_score":	157607
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24739,
			"primary_score":	999841,
			"second_score":	157606
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24740,
			"primary_score":	999841,
			"second_score":	157605
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24741,
			"primary_score":	999841,
			"second_score":	157604
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24742,
			"primary_score":	999841,
			"second_score":	157603
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24743,
			"primary_score":	999841,
			"second_score":	157602
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24744,
			"primary_score":	999841,
			"second_score":	157601
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24746,
			"primary_score":	999841,
			"second_score":	157600
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24747,
			"primary_score":	999841,
			"second_score":	157599
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24750,
			"primary_score":	999841,
			"second_score":	157598
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24754,
			"primary_score":	999841,
			"second_score":	157597
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24766,
			"primary_score":	999841,
			"second_score":	157596
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24768,
			"primary_score":	999841,
			"second_score":	157595
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24769,
			"primary_score":	999841,
			"second_score":	157594
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24770,
			"primary_score":	999841,
			"second_score":	157593
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24771,
			"primary_score":	999841,
			"second_score":	157592
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24772,
			"primary_score":	999841,
			"second_score":	157591
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24773,
			"primary_score":	999841,
			"second_score":	157590
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24774,
			"primary_score":	999841,
			"second_score":	157586
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24775,
			"primary_score":	999841,
			"second_score":	157585
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24776,
			"primary_score":	999841,
			"second_score":	157584
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24777,
			"primary_score":	999841,
			"second_score":	157583
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24778,
			"primary_score":	999841,
			"second_score":	157582
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24779,
			"primary_score":	999841,
			"second_score":	157581
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24780,
			"primary_score":	999841,
			"second_score":	157580
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24781,
			"primary_score":	999841,
			"second_score":	157579
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24782,
			"primary_score":	999841,
			"second_score":	157578
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24783,
			"primary_score":	999841,
			"second_score":	157577
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24784,
			"primary_score":	999841,
			"second_score":	157576
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24785,
			"primary_score":	999841,
			"second_score":	157575
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24787,
			"primary_score":	999841,
			"second_score":	157574
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24788,
			"primary_score":	999841,
			"second_score":	157405
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24795,
			"primary_score":	999841,
			"second_score":	157377
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24799,
			"primary_score":	999841,
			"second_score":	157376
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24803,
			"primary_score":	999841,
			"second_score":	157375
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24804,
			"primary_score":	999841,
			"second_score":	157374
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24805,
			"primary_score":	999841,
			"second_score":	157373
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	24809,
			"primary_score":	999841,
			"second_score":	157372
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25116,
			"primary_score":	999843,
			"second_score":	157054
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25117,
			"primary_score":	999974,
			"second_score":	159485
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25118,
			"primary_score":	999974,
			"second_score":	159484
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25119,
			"primary_score":	999974,
			"second_score":	159483
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25120,
			"primary_score":	999974,
			"second_score":	159482
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25122,
			"primary_score":	999843,
			"second_score":	157053
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25123,
			"primary_score":	999843,
			"second_score":	157052
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25124,
			"primary_score":	999843,
			"second_score":	157051
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25125,
			"primary_score":	999843,
			"second_score":	157050
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25126,
			"primary_score":	999843,
			"second_score":	157049
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25127,
			"primary_score":	999843,
			"second_score":	157048
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25128,
			"primary_score":	999843,
			"second_score":	157047
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25129,
			"primary_score":	999878,
			"second_score":	159473
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25130,
			"primary_score":	999870,
			"second_score":	157044
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25132,
			"primary_score":	999843,
			"second_score":	157043
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25133,
			"primary_score":	999854,
			"second_score":	157042
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25135,
			"primary_score":	999843,
			"second_score":	157041
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25136,
			"primary_score":	999846,
			"second_score":	157040
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25138,
			"primary_score":	999843,
			"second_score":	157039
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25139,
			"primary_score":	999876,
			"second_score":	159465
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25142,
			"primary_score":	999876,
			"second_score":	159464
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25151,
			"primary_score":	999958,
			"second_score":	146421
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25153,
			"primary_score":	999958,
			"second_score":	146420
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25154,
			"primary_score":	999958,
			"second_score":	146414
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	25155,
			"primary_score":	999984,
			"second_score":	146413
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	55,
			"primary_score":	999747,
			"second_score":	160422
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	58,
			"primary_score":	999747,
			"second_score":	160421
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	59,
			"primary_score":	999747,
			"second_score":	160420
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	62,
			"primary_score":	999747,
			"second_score":	160419
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	63,
			"primary_score":	999747,
			"second_score":	160418
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	64,
			"primary_score":	999747,
			"second_score":	160417
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	67,
			"primary_score":	999747,
			"second_score":	160416
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	72,
			"primary_score":	999747,
			"second_score":	160414
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	74,
			"primary_score":	999747,
			"second_score":	160413
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	75,
			"primary_score":	999747,
			"second_score":	160412
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	76,
			"primary_score":	999747,
			"second_score":	160411
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	77,
			"primary_score":	999747,
			"second_score":	160410
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	78,
			"primary_score":	999747,
			"second_score":	160409
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	79,
			"primary_score":	999747,
			"second_score":	160408
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	80,
			"primary_score":	999747,
			"second_score":	160407
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	81,
			"primary_score":	999747,
			"second_score":	160406
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	86,
			"primary_score":	999747,
			"second_score":	160404
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	87,
			"primary_score":	999747,
			"second_score":	160403
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	88,
			"primary_score":	999747,
			"second_score":	160402
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	90,
			"primary_score":	999747,
			"second_score":	160401
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	109,
			"primary_score":	999747,
			"second_score":	160400
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	110,
			"primary_score":	999747,
			"second_score":	160399
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	115,
			"primary_score":	999747,
			"second_score":	160397
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	116,
			"primary_score":	999747,
			"second_score":	160396
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	117,
			"primary_score":	999747,
			"second_score":	160395
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	119,
			"primary_score":	999747,
			"second_score":	160394
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	120,
			"primary_score":	999747,
			"second_score":	160393
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	123,
			"primary_score":	999747,
			"second_score":	160392
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	124,
			"primary_score":	999747,
			"second_score":	160391
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	126,
			"primary_score":	999747,
			"second_score":	160390
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	127,
			"primary_score":	999747,
			"second_score":	160389
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	131,
			"primary_score":	999747,
			"second_score":	160388
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	132,
			"primary_score":	999747,
			"second_score":	160387
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	133,
			"primary_score":	999747,
			"second_score":	160386
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	134,
			"primary_score":	999747,
			"second_score":	160385
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	135,
			"primary_score":	999747,
			"second_score":	160384
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	137,
			"primary_score":	999747,
			"second_score":	160383
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	139,
			"primary_score":	999747,
			"second_score":	160382
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	140,
			"primary_score":	999747,
			"second_score":	160381
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	143,
			"primary_score":	999747,
			"second_score":	160380
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	144,
			"primary_score":	999747,
			"second_score":	160379
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	146,
			"primary_score":	999747,
			"second_score":	160378
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	165,
			"primary_score":	999747,
			"second_score":	160377
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	166,
			"primary_score":	999747,
			"second_score":	160376
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	167,
			"primary_score":	999747,
			"second_score":	160375
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	170,
			"primary_score":	999747,
			"second_score":	160374
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	171,
			"primary_score":	999747,
			"second_score":	160373
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	173,
			"primary_score":	999747,
			"second_score":	160372
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	174,
			"primary_score":	999747,
			"second_score":	160371
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	176,
			"primary_score":	999747,
			"second_score":	160370
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	179,
			"primary_score":	999747,
			"second_score":	160369
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	180,
			"primary_score":	999747,
			"second_score":	160368
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	181,
			"primary_score":	999747,
			"second_score":	160367
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	184,
			"primary_score":	999747,
			"second_score":	160366
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	185,
			"primary_score":	999747,
			"second_score":	160365
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	187,
			"primary_score":	999747,
			"second_score":	160364
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	188,
			"primary_score":	999747,
			"second_score":	160363
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	190,
			"primary_score":	999747,
			"second_score":	160362
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	196,
			"primary_score":	999747,
			"second_score":	160360
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	197,
			"primary_score":	999747,
			"second_score":	160359
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	199,
			"primary_score":	999747,
			"second_score":	160358
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	200,
			"primary_score":	999747,
			"second_score":	160357
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	201,
			"primary_score":	999747,
			"second_score":	160356
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	202,
			"primary_score":	999747,
			"second_score":	160355
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	203,
			"primary_score":	999747,
			"second_score":	160354
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	204,
			"primary_score":	999747,
			"second_score":	160353
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	205,
			"primary_score":	999747,
			"second_score":	160352
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	207,
			"primary_score":	999747,
			"second_score":	160351
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	208,
			"primary_score":	999747,
			"second_score":	160350
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	209,
			"primary_score":	999747,
			"second_score":	160349
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	210,
			"primary_score":	999747,
			"second_score":	160348
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	258,
			"primary_score":	999706,
			"second_score":	160483
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	260,
			"primary_score":	999706,
			"second_score":	160482
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	262,
			"primary_score":	999706,
			"second_score":	160481
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	263,
			"primary_score":	999706,
			"second_score":	160480
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	264,
			"primary_score":	999706,
			"second_score":	160479
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	266,
			"primary_score":	999706,
			"second_score":	160478
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	269,
			"primary_score":	999706,
			"second_score":	160477
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	270,
			"primary_score":	999706,
			"second_score":	160437
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	271,
			"primary_score":	999706,
			"second_score":	160436
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	273,
			"primary_score":	999706,
			"second_score":	160435
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	274,
			"primary_score":	999707,
			"second_score":	160438
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	275,
			"primary_score":	999707,
			"second_score":	160434
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	276,
			"primary_score":	999707,
			"second_score":	160442
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	278,
			"primary_score":	999707,
			"second_score":	160433
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	280,
			"primary_score":	999707,
			"second_score":	160432
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	281,
			"primary_score":	999707,
			"second_score":	160431
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	283,
			"primary_score":	999707,
			"second_score":	160429
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	297,
			"primary_score":	999703,
			"second_score":	146411
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	308,
			"primary_score":	999712,
			"second_score":	160928
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	309,
			"primary_score":	999712,
			"second_score":	160927
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	314,
			"primary_score":	999746,
			"second_score":	160486
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	315,
			"primary_score":	999746,
			"second_score":	160485
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	317,
			"primary_score":	999746,
			"second_score":	160484
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	318,
			"primary_score":	999747,
			"second_score":	160428
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	320,
			"primary_score":	999747,
			"second_score":	160423
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	321,
			"primary_score":	999747,
			"second_score":	160415
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	322,
			"primary_score":	999747,
			"second_score":	160405
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	323,
			"primary_score":	999747,
			"second_score":	160398
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	324,
			"primary_score":	999747,
			"second_score":	160361
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	329,
			"primary_score":	999746,
			"second_score":	160347
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	334,
			"primary_score":	999764,
			"second_score":	122938
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	338,
			"primary_score":	999764,
			"second_score":	122937
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	339,
			"primary_score":	999899,
			"second_score":	122936
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	340,
			"primary_score":	999899,
			"second_score":	122935
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	341,
			"primary_score":	999899,
			"second_score":	122934
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	378,
			"primary_score":	999764,
			"second_score":	122928
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	380,
			"primary_score":	999764,
			"second_score":	122927
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	381,
			"primary_score":	999764,
			"second_score":	122926
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	405,
			"primary_score":	999764,
			"second_score":	122948
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	406,
			"primary_score":	999764,
			"second_score":	122947
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	407,
			"primary_score":	999764,
			"second_score":	122946
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	408,
			"primary_score":	999764,
			"second_score":	122945
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	409,
			"primary_score":	999764,
			"second_score":	122944
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	410,
			"primary_score":	999764,
			"second_score":	122940
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	412,
			"primary_score":	999764,
			"second_score":	122939
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	413,
			"primary_score":	999764,
			"second_score":	122933
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	414,
			"primary_score":	999764,
			"second_score":	122932
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	415,
			"primary_score":	999764,
			"second_score":	122931
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	416,
			"primary_score":	999764,
			"second_score":	122930
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	424,
			"primary_score":	999764,
			"second_score":	122929
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	428,
			"primary_score":	999764,
			"second_score":	122925
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	429,
			"primary_score":	999764,
			"second_score":	122924
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	430,
			"primary_score":	999764,
			"second_score":	122923
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	432,
			"primary_score":	999764,
			"second_score":	122922
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	35,
			"primary_score":	999728,
			"second_score":	157328
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	36,
			"primary_score":	999728,
			"second_score":	157327
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	38,
			"primary_score":	999728,
			"second_score":	157326
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	71,
			"primary_score":	999766,
			"second_score":	145744
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	73,
			"primary_score":	999987,
			"second_score":	145742
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	74,
			"primary_score":	999766,
			"second_score":	145739
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	75,
			"primary_score":	999766,
			"second_score":	145738
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	76,
			"primary_score":	999766,
			"second_score":	145727
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	82,
			"primary_score":	999766,
			"second_score":	119533
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	83,
			"primary_score":	999728,
			"second_score":	119530
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	93,
			"primary_score":	999763,
			"second_score":	122943
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	94,
			"primary_score":	999763,
			"second_score":	122942
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	96,
			"primary_score":	999763,
			"second_score":	122941
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	101,
			"primary_score":	999763,
			"second_score":	121191
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	102,
			"primary_score":	999763,
			"second_score":	121187
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	107,
			"primary_score":	999747,
			"second_score":	160427
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	108,
			"primary_score":	999747,
			"second_score":	160426
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	109,
			"primary_score":	999747,
			"second_score":	160425
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	111,
			"primary_score":	999747,
			"second_score":	160424
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	143,
			"primary_score":	999749,
			"second_score":	118630
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	144,
			"primary_score":	999749,
			"second_score":	118626
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	145,
			"primary_score":	999749,
			"second_score":	118624
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	146,
			"primary_score":	999749,
			"second_score":	118622
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	147,
			"primary_score":	999749,
			"second_score":	118618
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	148,
			"primary_score":	999749,
			"second_score":	118614
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	149,
			"primary_score":	999749,
			"second_score":	118612
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	150,
			"primary_score":	999749,
			"second_score":	118608
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	151,
			"primary_score":	999749,
			"second_score":	118604
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	164,
			"primary_score":	999830,
			"second_score":	118540
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	166,
			"primary_score":	999830,
			"second_score":	118539
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	169,
			"primary_score":	999830,
			"second_score":	118538
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	170,
			"primary_score":	999830,
			"second_score":	118537
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	173,
			"primary_score":	999830,
			"second_score":	118536
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	174,
			"primary_score":	999830,
			"second_score":	118535
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	179,
			"primary_score":	999862,
			"second_score":	159011
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	181,
			"primary_score":	999862,
			"second_score":	159010
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	183,
			"primary_score":	999862,
			"second_score":	159009
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	189,
			"primary_score":	999862,
			"second_score":	159008
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	190,
			"primary_score":	999862,
			"second_score":	159007
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	192,
			"primary_score":	999862,
			"second_score":	159006
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	33,
			"primary_score":	999762,
			"second_score":	123767
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	37,
			"primary_score":	999762,
			"second_score":	123766
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	38,
			"primary_score":	999958,
			"second_score":	132349
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	39,
			"primary_score":	999958,
			"second_score":	132348
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	41,
			"primary_score":	999762,
			"second_score":	123765
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	106,
			"primary_score":	999762,
			"second_score":	123787
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	107,
			"primary_score":	999762,
			"second_score":	123786
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	108,
			"primary_score":	999762,
			"second_score":	123785
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	109,
			"primary_score":	999762,
			"second_score":	123784
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	112,
			"primary_score":	999762,
			"second_score":	123783
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	117,
			"primary_score":	999762,
			"second_score":	123782
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	119,
			"primary_score":	999762,
			"second_score":	123778
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	120,
			"primary_score":	999762,
			"second_score":	123777
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	121,
			"primary_score":	999762,
			"second_score":	123776
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	123,
			"primary_score":	999762,
			"second_score":	123775
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	124,
			"primary_score":	999909,
			"second_score":	132342
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	125,
			"primary_score":	999909,
			"second_score":	132341
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	127,
			"primary_score":	999797,
			"second_score":	123774
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	129,
			"primary_score":	999762,
			"second_score":	123773
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	130,
			"primary_score":	999762,
			"second_score":	123772
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	132,
			"primary_score":	999762,
			"second_score":	123771
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	137,
			"primary_score":	999762,
			"second_score":	123770
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	138,
			"primary_score":	999956,
			"second_score":	132126
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	139,
			"primary_score":	999956,
			"second_score":	132125
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	140,
			"primary_score":	999956,
			"second_score":	132124
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	142,
			"primary_score":	999762,
			"second_score":	123769
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	184,
			"primary_score":	999762,
			"second_score":	123804
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	185,
			"primary_score":	999762,
			"second_score":	123800
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	186,
			"primary_score":	999762,
			"second_score":	123796
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	187,
			"primary_score":	999762,
			"second_score":	123792
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	189,
			"primary_score":	999762,
			"second_score":	123788
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	190,
			"primary_score":	999762,
			"second_score":	123768
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	195,
			"primary_score":	999762,
			"second_score":	123892
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	198,
			"primary_score":	999762,
			"second_score":	123891
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	200,
			"primary_score":	999762,
			"second_score":	123850
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	201,
			"primary_score":	999946,
			"second_score":	141566
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	202,
			"primary_score":	999946,
			"second_score":	141565
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	203,
			"primary_score":	999946,
			"second_score":	141564
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	205,
			"primary_score":	999946,
			"second_score":	141563
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	206,
			"primary_score":	999946,
			"second_score":	141562
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	207,
			"primary_score":	999946,
			"second_score":	141561
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	209,
			"primary_score":	999762,
			"second_score":	123849
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	218,
			"primary_score":	999762,
			"second_score":	123848
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	276,
			"primary_score":	999762,
			"second_score":	123806
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	283,
			"primary_score":	999762,
			"second_score":	123805
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	284,
			"primary_score":	999762,
			"second_score":	123764
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	289,
			"primary_score":	999762,
			"second_score":	123935
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	303,
			"primary_score":	999762,
			"second_score":	123934
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	308,
			"primary_score":	999762,
			"second_score":	123762
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	309,
			"primary_score":	999762,
			"second_score":	123761
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	310,
			"primary_score":	999762,
			"second_score":	123760
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	312,
			"primary_score":	999762,
			"second_score":	123759
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	313,
			"primary_score":	999762,
			"second_score":	123758
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	318,
			"primary_score":	999762,
			"second_score":	123757
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	319,
			"primary_score":	999768,
			"second_score":	123756
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	320,
			"primary_score":	999772,
			"second_score":	123683
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	321,
			"primary_score":	999772,
			"second_score":	123686
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	323,
			"primary_score":	999772,
			"second_score":	123682
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	335,
			"primary_score":	999762,
			"second_score":	123681
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	340,
			"primary_score":	999762,
			"second_score":	123679
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	343,
			"primary_score":	999827,
			"second_score":	123678
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	349,
			"primary_score":	999762,
			"second_score":	123676
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	354,
			"primary_score":	999762,
			"second_score":	123674
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	356,
			"primary_score":	999762,
			"second_score":	123673
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	357,
			"primary_score":	999762,
			"second_score":	123672
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	358,
			"primary_score":	999762,
			"second_score":	123671
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	359,
			"primary_score":	999762,
			"second_score":	123670
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	364,
			"primary_score":	999762,
			"second_score":	123667
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	368,
			"primary_score":	999961,
			"second_score":	147572
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	386,
			"primary_score":	999813,
			"second_score":	123666
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	389,
			"primary_score":	999813,
			"second_score":	123665
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	390,
			"primary_score":	999813,
			"second_score":	123664
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	391,
			"primary_score":	999813,
			"second_score":	123663
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	393,
			"primary_score":	999813,
			"second_score":	123662
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	394,
			"primary_score":	999813,
			"second_score":	123661
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	395,
			"primary_score":	999813,
			"second_score":	123633
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	396,
			"primary_score":	999813,
			"second_score":	123605
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	398,
			"primary_score":	999813,
			"second_score":	123558
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	403,
			"primary_score":	999813,
			"second_score":	123557
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	406,
			"primary_score":	999813,
			"second_score":	123556
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	408,
			"primary_score":	999813,
			"second_score":	123555
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	409,
			"primary_score":	999813,
			"second_score":	123546
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	411,
			"primary_score":	999813,
			"second_score":	123537
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	412,
			"primary_score":	999813,
			"second_score":	123536
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	414,
			"primary_score":	999813,
			"second_score":	123535
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	415,
			"primary_score":	999813,
			"second_score":	123507
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	417,
			"primary_score":	999813,
			"second_score":	123506
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	418,
			"primary_score":	999813,
			"second_score":	123505
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	419,
			"primary_score":	999813,
			"second_score":	123504
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	421,
			"primary_score":	999813,
			"second_score":	123503
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	422,
			"primary_score":	999813,
			"second_score":	123502
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	424,
			"primary_score":	999813,
			"second_score":	123493
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	432,
			"primary_score":	999762,
			"second_score":	123937
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	434,
			"primary_score":	999762,
			"second_score":	123936
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	435,
			"primary_score":	999762,
			"second_score":	123893
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	436,
			"primary_score":	999762,
			"second_score":	123807
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	437,
			"primary_score":	999762,
			"second_score":	123763
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	438,
			"primary_score":	999762,
			"second_score":	123680
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	439,
			"primary_score":	999762,
			"second_score":	123677
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	440,
			"primary_score":	999762,
			"second_score":	123675
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	441,
			"primary_score":	999762,
			"second_score":	123669
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	443,
			"primary_score":	999762,
			"second_score":	123668
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	444,
			"primary_score":	999762,
			"second_score":	123492
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	446,
			"primary_score":	999762,
			"second_score":	123491
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	447,
			"primary_score":	999762,
			"second_score":	123490
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	42,
			"primary_score":	999739,
			"second_score":	145940
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	43,
			"primary_score":	999739,
			"second_score":	145939
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	44,
			"primary_score":	999739,
			"second_score":	145938
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	45,
			"primary_score":	999739,
			"second_score":	145937
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	46,
			"primary_score":	999739,
			"second_score":	145936
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	48,
			"primary_score":	999739,
			"second_score":	145935
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	49,
			"primary_score":	999739,
			"second_score":	145934
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	50,
			"primary_score":	999739,
			"second_score":	145933
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	54,
			"primary_score":	999739,
			"second_score":	145932
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	56,
			"primary_score":	999739,
			"second_score":	145930
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	57,
			"primary_score":	999739,
			"second_score":	145929
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	59,
			"primary_score":	999739,
			"second_score":	145928
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	64,
			"primary_score":	999739,
			"second_score":	145927
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	65,
			"primary_score":	999754,
			"second_score":	145821
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	66,
			"primary_score":	999754,
			"second_score":	145820
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	67,
			"primary_score":	999754,
			"second_score":	145825
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	69,
			"primary_score":	999754,
			"second_score":	145819
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	101,
			"primary_score":	999739,
			"second_score":	145818
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	103,
			"primary_score":	999739,
			"second_score":	145816
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	104,
			"primary_score":	999739,
			"second_score":	145815
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	107,
			"primary_score":	999739,
			"second_score":	145814
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	108,
			"primary_score":	999739,
			"second_score":	145813
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	109,
			"primary_score":	999739,
			"second_score":	145772
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	110,
			"primary_score":	999739,
			"second_score":	145770
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	111,
			"primary_score":	999748,
			"second_score":	157112
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	113,
			"primary_score":	999739,
			"second_score":	145769
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	115,
			"primary_score":	999739,
			"second_score":	145768
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	118,
			"primary_score":	999739,
			"second_score":	145766
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	119,
			"primary_score":	999739,
			"second_score":	145765
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	120,
			"primary_score":	999739,
			"second_score":	145764
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	121,
			"primary_score":	999739,
			"second_score":	145763
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	123,
			"primary_score":	999739,
			"second_score":	145761
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	124,
			"primary_score":	999739,
			"second_score":	145760
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	125,
			"primary_score":	999739,
			"second_score":	145759
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	126,
			"primary_score":	999739,
			"second_score":	145758
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	127,
			"primary_score":	999739,
			"second_score":	145757
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	128,
			"primary_score":	999739,
			"second_score":	145756
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	129,
			"primary_score":	999739,
			"second_score":	145755
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	130,
			"primary_score":	999739,
			"second_score":	145754
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	131,
			"primary_score":	999739,
			"second_score":	145753
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	132,
			"primary_score":	999739,
			"second_score":	145752
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	133,
			"primary_score":	999739,
			"second_score":	145751
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	134,
			"primary_score":	999739,
			"second_score":	145750
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	178,
			"primary_score":	999767,
			"second_score":	145971
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	179,
			"primary_score":	999767,
			"second_score":	145970
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	181,
			"primary_score":	999767,
			"second_score":	145969
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	196,
			"primary_score":	999767,
			"second_score":	145941
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	199,
			"primary_score":	999767,
			"second_score":	145749
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	200,
			"primary_score":	999767,
			"second_score":	145748
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	201,
			"primary_score":	999767,
			"second_score":	145747
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	202,
			"primary_score":	999767,
			"second_score":	145746
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	204,
			"primary_score":	999767,
			"second_score":	145745
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	205,
			"primary_score":	999767,
			"second_score":	145722
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	206,
			"primary_score":	999767,
			"second_score":	145713
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	214,
			"primary_score":	999767,
			"second_score":	145712
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	215,
			"primary_score":	999767,
			"second_score":	145711
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	220,
			"primary_score":	999811,
			"second_score":	123604
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	222,
			"primary_score":	999811,
			"second_score":	123603
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	223,
			"primary_score":	999811,
			"second_score":	123575
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	230,
			"primary_score":	999811,
			"second_score":	123574
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	231,
			"primary_score":	999811,
			"second_score":	123573
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	232,
			"primary_score":	999811,
			"second_score":	123572
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	233,
			"primary_score":	999811,
			"second_score":	123571
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	235,
			"primary_score":	999811,
			"second_score":	123570
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	236,
			"primary_score":	999811,
			"second_score":	123569
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	238,
			"primary_score":	999811,
			"second_score":	123560
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	239,
			"primary_score":	999811,
			"second_score":	123559
		}, {
			"file":	"ext/date/php_date.c",
			"line":	39,
			"primary_score":	999889,
			"second_score":	122373
		}, {
			"file":	"ext/date/php_date.c",
			"line":	604,
			"primary_score":	999749,
			"second_score":	118632
		}, {
			"file":	"ext/date/php_date.c",
			"line":	606,
			"primary_score":	999749,
			"second_score":	118631
		}, {
			"file":	"ext/date/php_date.c",
			"line":	626,
			"primary_score":	999640,
			"second_score":	118664
		}, {
			"file":	"ext/date/php_date.c",
			"line":	627,
			"primary_score":	999739,
			"second_score":	118663
		}, {
			"file":	"ext/date/php_date.c",
			"line":	629,
			"primary_score":	999640,
			"second_score":	118644
		}, {
			"file":	"ext/date/php_date.c",
			"line":	630,
			"primary_score":	999640,
			"second_score":	118643
		}, {
			"file":	"ext/date/php_date.c",
			"line":	631,
			"primary_score":	999748,
			"second_score":	118642
		}, {
			"file":	"ext/date/php_date.c",
			"line":	632,
			"primary_score":	999748,
			"second_score":	118562
		}, {
			"file":	"ext/date/php_date.c",
			"line":	633,
			"primary_score":	999748,
			"second_score":	118543
		}, {
			"file":	"ext/date/php_date.c",
			"line":	635,
			"primary_score":	999640,
			"second_score":	118542
		}, {
			"file":	"ext/date/php_date.c",
			"line":	636,
			"primary_score":	999901,
			"second_score":	118541
		}, {
			"file":	"ext/date/php_date.c",
			"line":	637,
			"primary_score":	999901,
			"second_score":	118534
		}, {
			"file":	"ext/date/php_date.c",
			"line":	640,
			"primary_score":	999640,
			"second_score":	118533
		}, {
			"file":	"ext/date/php_date.c",
			"line":	789,
			"primary_score":	999640,
			"second_score":	53379
		}, {
			"file":	"ext/date/php_date.c",
			"line":	791,
			"primary_score":	999640,
			"second_score":	52700
		}, {
			"file":	"ext/date/php_date.c",
			"line":	795,
			"primary_score":	999640,
			"second_score":	52699
		}, {
			"file":	"ext/date/php_date.c",
			"line":	818,
			"primary_score":	999748,
			"second_score":	146410
		}, {
			"file":	"ext/date/php_date.c",
			"line":	820,
			"primary_score":	999748,
			"second_score":	146409
		}, {
			"file":	"ext/date/php_date.c",
			"line":	821,
			"primary_score":	999748,
			"second_score":	160604
		}, {
			"file":	"ext/date/php_date.c",
			"line":	822,
			"primary_score":	999748,
			"second_score":	160523
		}, {
			"file":	"ext/date/php_date.c",
			"line":	825,
			"primary_score":	999748,
			"second_score":	146408
		}, {
			"file":	"ext/date/php_date.c",
			"line":	826,
			"primary_score":	999848,
			"second_score":	146388
		}, {
			"file":	"ext/date/php_date.c",
			"line":	829,
			"primary_score":	999748,
			"second_score":	160487
		}, {
			"file":	"ext/date/php_date.c",
			"line":	830,
			"primary_score":	999748,
			"second_score":	160346
		}, {
			"file":	"ext/date/php_date.c",
			"line":	831,
			"primary_score":	999749,
			"second_score":	160345
		}, {
			"file":	"ext/date/php_date.c",
			"line":	833,
			"primary_score":	999748,
			"second_score":	160095
		}, {
			"file":	"ext/date/php_date.c",
			"line":	840,
			"primary_score":	999764,
			"second_score":	157359
		}, {
			"file":	"ext/date/php_date.c",
			"line":	843,
			"primary_score":	999764,
			"second_score":	157358
		}, {
			"file":	"ext/date/php_date.c",
			"line":	844,
			"primary_score":	999792,
			"second_score":	157357
		}, {
			"file":	"ext/date/php_date.c",
			"line":	937,
			"primary_score":	999764,
			"second_score":	157363
		}, {
			"file":	"ext/date/php_date.c",
			"line":	938,
			"primary_score":	999764,
			"second_score":	157362
		}, {
			"file":	"ext/date/php_date.c",
			"line":	940,
			"primary_score":	999764,
			"second_score":	157361
		}, {
			"file":	"ext/date/php_date.c",
			"line":	941,
			"primary_score":	999764,
			"second_score":	157356
		}, {
			"file":	"ext/date/php_date.c",
			"line":	942,
			"primary_score":	999764,
			"second_score":	157331
		}, {
			"file":	"ext/date/php_date.c",
			"line":	945,
			"primary_score":	999764,
			"second_score":	157330
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1009,
			"primary_score":	999859,
			"second_score":	122959
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1010,
			"primary_score":	999859,
			"second_score":	122958
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1011,
			"primary_score":	999859,
			"second_score":	122957
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1012,
			"primary_score":	999859,
			"second_score":	122956
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1013,
			"primary_score":	999859,
			"second_score":	122955
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1014,
			"primary_score":	999859,
			"second_score":	122954
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1016,
			"primary_score":	999859,
			"second_score":	122953
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1020,
			"primary_score":	999860,
			"second_score":	122952
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1021,
			"primary_score":	999880,
			"second_score":	122951
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1027,
			"primary_score":	999884,
			"second_score":	122950
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1038,
			"primary_score":	999889,
			"second_score":	122949
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1041,
			"primary_score":	999860,
			"second_score":	122921
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1043,
			"primary_score":	999860,
			"second_score":	122877
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1044,
			"primary_score":	999860,
			"second_score":	121386
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1045,
			"primary_score":	999860,
			"second_score":	121385
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1047,
			"primary_score":	999891,
			"second_score":	121910
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1053,
			"primary_score":	999998,
			"second_score":	122427
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1057,
			"primary_score":	999996,
			"second_score":	122559
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1058,
			"primary_score":	999995,
			"second_score":	122753
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1062,
			"primary_score":	999905,
			"second_score":	122058
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1070,
			"primary_score":	999889,
			"second_score":	122206
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1087,
			"primary_score":	999895,
			"second_score":	121734
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1088,
			"primary_score":	999891,
			"second_score":	121586
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1089,
			"primary_score":	999895,
			"second_score":	121438
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1143,
			"primary_score":	999996,
			"second_score":	121206
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1145,
			"primary_score":	999964,
			"second_score":	122697
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1147,
			"primary_score":	999964,
			"second_score":	122696
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1149,
			"primary_score":	999880,
			"second_score":	121199
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1152,
			"primary_score":	999860,
			"second_score":	121196
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1154,
			"primary_score":	999860,
			"second_score":	121193
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1155,
			"primary_score":	999880,
			"second_score":	121192
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1158,
			"primary_score":	999860,
			"second_score":	121183
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1390,
			"primary_score":	999939,
			"second_score":	160622
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1391,
			"primary_score":	999939,
			"second_score":	160621
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1392,
			"primary_score":	999939,
			"second_score":	160620
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1393,
			"primary_score":	999939,
			"second_score":	160619
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1395,
			"primary_score":	999939,
			"second_score":	160618
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1396,
			"primary_score":	999939,
			"second_score":	160617
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1398,
			"primary_score":	999939,
			"second_score":	160616
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1400,
			"primary_score":	999939,
			"second_score":	160092
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1413,
			"primary_score":	999950,
			"second_score":	160057
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1415,
			"primary_score":	999950,
			"second_score":	159985
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1416,
			"primary_score":	999950,
			"second_score":	159981
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1417,
			"primary_score":	999950,
			"second_score":	159980
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1418,
			"primary_score":	999950,
			"second_score":	159979
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1423,
			"primary_score":	999939,
			"second_score":	159712
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1428,
			"primary_score":	999939,
			"second_score":	159711
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1429,
			"primary_score":	999939,
			"second_score":	159495
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1430,
			"primary_score":	999939,
			"second_score":	159494
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1431,
			"primary_score":	999939,
			"second_score":	159487
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1432,
			"primary_score":	999939,
			"second_score":	159463
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1433,
			"primary_score":	999939,
			"second_score":	159012
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1435,
			"primary_score":	999939,
			"second_score":	159005
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1436,
			"primary_score":	999939,
			"second_score":	158996
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1438,
			"primary_score":	999939,
			"second_score":	158987
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1441,
			"primary_score":	999942,
			"second_score":	158986
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2018,
			"primary_score":	999899,
			"second_score":	158454
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2019,
			"primary_score":	999899,
			"second_score":	158453
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2021,
			"primary_score":	999899,
			"second_score":	158452
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2022,
			"primary_score":	999899,
			"second_score":	158349
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2023,
			"primary_score":	999899,
			"second_score":	158348
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2027,
			"primary_score":	999899,
			"second_score":	158347
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2028,
			"primary_score":	999899,
			"second_score":	158342
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2030,
			"primary_score":	999899,
			"second_score":	158339
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2031,
			"primary_score":	999899,
			"second_score":	158322
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2033,
			"primary_score":	999899,
			"second_score":	158321
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2038,
			"primary_score":	999899,
			"second_score":	158455
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2138,
			"primary_score":	999961,
			"second_score":	146818
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2139,
			"primary_score":	999961,
			"second_score":	146817
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2141,
			"primary_score":	999961,
			"second_score":	146816
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2142,
			"primary_score":	999961,
			"second_score":	146735
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2143,
			"primary_score":	999961,
			"second_score":	146734
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2147,
			"primary_score":	999961,
			"second_score":	146733
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2148,
			"primary_score":	999961,
			"second_score":	146728
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2150,
			"primary_score":	999961,
			"second_score":	146725
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2151,
			"primary_score":	999961,
			"second_score":	146708
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2153,
			"primary_score":	999961,
			"second_score":	146707
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2158,
			"primary_score":	999961,
			"second_score":	146819
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2301,
			"primary_score":	999899,
			"second_score":	119537
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2303,
			"primary_score":	999899,
			"second_score":	119536
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2304,
			"primary_score":	999900,
			"second_score":	119535
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2307,
			"primary_score":	999899,
			"second_score":	119526
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2308,
			"primary_score":	999899,
			"second_score":	119522
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2313,
			"primary_score":	999961,
			"second_score":	145529
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2315,
			"primary_score":	999961,
			"second_score":	145528
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2318,
			"primary_score":	999961,
			"second_score":	145527
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2319,
			"primary_score":	999961,
			"second_score":	145523
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2366,
			"primary_score":	999901,
			"second_score":	157370
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2370,
			"primary_score":	999901,
			"second_score":	157369
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2375,
			"primary_score":	999901,
			"second_score":	157619
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2376,
			"primary_score":	999901,
			"second_score":	157618
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2377,
			"primary_score":	999901,
			"second_score":	157617
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2378,
			"primary_score":	999901,
			"second_score":	157616
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2379,
			"primary_score":	999901,
			"second_score":	157615
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2380,
			"primary_score":	999901,
			"second_score":	157614
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2382,
			"primary_score":	999901,
			"second_score":	157613
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2385,
			"primary_score":	999901,
			"second_score":	157612
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2388,
			"primary_score":	999905,
			"second_score":	157611
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2392,
			"primary_score":	999901,
			"second_score":	157371
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2395,
			"primary_score":	999901,
			"second_score":	157368
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2400,
			"primary_score":	999901,
			"second_score":	157367
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2404,
			"primary_score":	999902,
			"second_score":	157366
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2422,
			"primary_score":	999904,
			"second_score":	157365
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2425,
			"primary_score":	999906,
			"second_score":	157364
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2428,
			"primary_score":	999902,
			"second_score":	157329
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2429,
			"primary_score":	999902,
			"second_score":	157325
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2430,
			"primary_score":	999902,
			"second_score":	157324
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2433,
			"primary_score":	999902,
			"second_score":	157323
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2443,
			"primary_score":	999902,
			"second_score":	157322
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2445,
			"primary_score":	999902,
			"second_score":	157055
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2446,
			"primary_score":	999902,
			"second_score":	157038
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2448,
			"primary_score":	999902,
			"second_score":	147568
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2450,
			"primary_score":	999902,
			"second_score":	147567
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2452,
			"primary_score":	999902,
			"second_score":	147558
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2500,
			"primary_score":	999943,
			"second_score":	157711
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2501,
			"primary_score":	999943,
			"second_score":	157710
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2502,
			"primary_score":	999943,
			"second_score":	157709
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2503,
			"primary_score":	999943,
			"second_score":	157708
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2505,
			"primary_score":	999943,
			"second_score":	157707
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2506,
			"primary_score":	999943,
			"second_score":	157697
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2507,
			"primary_score":	999944,
			"second_score":	157622
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2509,
			"primary_score":	999943,
			"second_score":	147557
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2751,
			"primary_score":	999950,
			"second_score":	123059
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2752,
			"primary_score":	999950,
			"second_score":	123058
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2753,
			"primary_score":	999950,
			"second_score":	123057
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2754,
			"primary_score":	999950,
			"second_score":	123056
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2756,
			"primary_score":	999950,
			"second_score":	123055
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2759,
			"primary_score":	999952,
			"second_score":	122967
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2760,
			"primary_score":	999952,
			"second_score":	122964
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2761,
			"primary_score":	999952,
			"second_score":	122962
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2968,
			"primary_score":	999988,
			"second_score":	146128
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2969,
			"primary_score":	999988,
			"second_score":	146127
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2970,
			"primary_score":	999988,
			"second_score":	146126
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2971,
			"primary_score":	999988,
			"second_score":	146125
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2973,
			"primary_score":	999988,
			"second_score":	146124
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2976,
			"primary_score":	999991,
			"second_score":	146028
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2977,
			"primary_score":	999991,
			"second_score":	146025
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2978,
			"primary_score":	999991,
			"second_score":	146023
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2979,
			"primary_score":	999991,
			"second_score":	146020
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2983,
			"primary_score":	999991,
			"second_score":	146019
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2984,
			"primary_score":	999991,
			"second_score":	145972
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2986,
			"primary_score":	999991,
			"second_score":	145710
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3030,
			"primary_score":	999985,
			"second_score":	124096
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3031,
			"primary_score":	999985,
			"second_score":	124095
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3032,
			"primary_score":	999985,
			"second_score":	124094
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3034,
			"primary_score":	999985,
			"second_score":	124093
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3037,
			"primary_score":	999988,
			"second_score":	123946
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3038,
			"primary_score":	999988,
			"second_score":	123943
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3039,
			"primary_score":	999988,
			"second_score":	123941
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3040,
			"primary_score":	999988,
			"second_score":	123940
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3041,
			"primary_score":	999988,
			"second_score":	123939
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3042,
			"primary_score":	999988,
			"second_score":	123938
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3044,
			"primary_score":	999988,
			"second_score":	123489
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3053,
			"primary_score":	999990,
			"second_score":	128207
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3054,
			"primary_score":	999990,
			"second_score":	128206
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3055,
			"primary_score":	999990,
			"second_score":	128205
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3057,
			"primary_score":	999990,
			"second_score":	128204
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3060,
			"primary_score":	999992,
			"second_score":	128060
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3061,
			"primary_score":	999992,
			"second_score":	128057
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3062,
			"primary_score":	999992,
			"second_score":	128055
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3063,
			"primary_score":	999992,
			"second_score":	128054
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3064,
			"primary_score":	999992,
			"second_score":	128053
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3065,
			"primary_score":	999992,
			"second_score":	128052
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3067,
			"primary_score":	999992,
			"second_score":	127603
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3076,
			"primary_score":	999993,
			"second_score":	141832
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3077,
			"primary_score":	999993,
			"second_score":	141831
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3078,
			"primary_score":	999993,
			"second_score":	141830
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3080,
			"primary_score":	999993,
			"second_score":	141829
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3083,
			"primary_score":	999994,
			"second_score":	141682
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3084,
			"primary_score":	999994,
			"second_score":	141679
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3085,
			"primary_score":	999994,
			"second_score":	141677
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3086,
			"primary_score":	999994,
			"second_score":	141676
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3087,
			"primary_score":	999994,
			"second_score":	141675
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3088,
			"primary_score":	999994,
			"second_score":	141674
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3089,
			"primary_score":	999994,
			"second_score":	141658
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3091,
			"primary_score":	999994,
			"second_score":	141657
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3093,
			"primary_score":	999994,
			"second_score":	131714
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3176,
			"primary_score":	999965,
			"second_score":	146424
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3178,
			"primary_score":	999965,
			"second_score":	146423
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3180,
			"primary_score":	999965,
			"second_score":	146422
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3181,
			"primary_score":	999991,
			"second_score":	146412
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3186,
			"primary_score":	999965,
			"second_score":	146387
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3187,
			"primary_score":	999966,
			"second_score":	146386
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3222,
			"primary_score":	999974,
			"second_score":	146507
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3223,
			"primary_score":	999974,
			"second_score":	146506
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3224,
			"primary_score":	999974,
			"second_score":	146505
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3225,
			"primary_score":	999974,
			"second_score":	146504
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3226,
			"primary_score":	999974,
			"second_score":	146503
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3228,
			"primary_score":	999974,
			"second_score":	146502
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3229,
			"primary_score":	999974,
			"second_score":	146492
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3230,
			"primary_score":	999974,
			"second_score":	146425
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3231,
			"primary_score":	999974,
			"second_score":	146385
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3232,
			"primary_score":	999974,
			"second_score":	146382
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3233,
			"primary_score":	999974,
			"second_score":	146381
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3234,
			"primary_score":	999974,
			"second_score":	146380
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3239,
			"primary_score":	999974,
			"second_score":	146379
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3931,
			"primary_score":	999738,
			"second_score":	160999
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3932,
			"primary_score":	999738,
			"second_score":	160998
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3934,
			"primary_score":	999738,
			"second_score":	160997
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3937,
			"primary_score":	999738,
			"second_score":	160930
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3941,
			"primary_score":	999739,
			"second_score":	160871
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3945,
			"primary_score":	999739,
			"second_score":	160870
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3946,
			"primary_score":	999739,
			"second_score":	160842
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	910,
			"primary_score":	999640,
			"second_score":	58443
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	911,
			"primary_score":	999640,
			"second_score":	58428
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	912,
			"primary_score":	999640,
			"second_score":	58413
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	913,
			"primary_score":	999640,
			"second_score":	58398
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	914,
			"primary_score":	999640,
			"second_score":	58179
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	915,
			"primary_score":	999640,
			"second_score":	58074
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	916,
			"primary_score":	999640,
			"second_score":	58017
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	917,
			"primary_score":	999640,
			"second_score":	58002
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	918,
			"primary_score":	999640,
			"second_score":	57987
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	919,
			"primary_score":	999640,
			"second_score":	57870
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	920,
			"primary_score":	999640,
			"second_score":	57735
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	921,
			"primary_score":	999640,
			"second_score":	57618
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	922,
			"primary_score":	999640,
			"second_score":	57495
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	923,
			"primary_score":	999640,
			"second_score":	57474
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	924,
			"primary_score":	999640,
			"second_score":	57429
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	925,
			"primary_score":	999640,
			"second_score":	57390
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	926,
			"primary_score":	999640,
			"second_score":	57249
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	927,
			"primary_score":	999640,
			"second_score":	57132
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	928,
			"primary_score":	999640,
			"second_score":	56991
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	930,
			"primary_score":	999640,
			"second_score":	56874
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	932,
			"primary_score":	999640,
			"second_score":	56859
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	939,
			"primary_score":	999640,
			"second_score":	56706
		}, {
			"file":	"ext/ereg/ereg.c",
			"line":	230,
			"primary_score":	999640,
			"second_score":	53764
		}, {
			"file":	"ext/filter/filter.c",
			"line":	287,
			"primary_score":	999640,
			"second_score":	59851
		}, {
			"file":	"ext/filter/filter.c",
			"line":	289,
			"primary_score":	999640,
			"second_score":	59210
		}, {
			"file":	"ext/filter/filter.c",
			"line":	303,
			"primary_score":	999640,
			"second_score":	119157
		}, {
			"file":	"ext/filter/filter.c",
			"line":	304,
			"primary_score":	999640,
			"second_score":	119156
		}, {
			"file":	"ext/filter/filter.c",
			"line":	305,
			"primary_score":	999640,
			"second_score":	119155
		}, {
			"file":	"ext/filter/filter.c",
			"line":	306,
			"primary_score":	999640,
			"second_score":	119154
		}, {
			"file":	"ext/filter/filter.c",
			"line":	307,
			"primary_score":	999640,
			"second_score":	118686
		}, {
			"file":	"ext/filter/filter.c",
			"line":	308,
			"primary_score":	999640,
			"second_score":	118685
		}, {
			"file":	"ext/filter/filter.c",
			"line":	309,
			"primary_score":	999640,
			"second_score":	118684
		}, {
			"file":	"ext/hash/hash.c",
			"line":	889,
			"primary_score":	999640,
			"second_score":	60730
		}, {
			"file":	"ext/hash/hash.c",
			"line":	891,
			"primary_score":	999640,
			"second_score":	60451
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	289,
			"primary_score":	999640,
			"second_score":	62057
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	290,
			"primary_score":	999640,
			"second_score":	62006
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	291,
			"primary_score":	999640,
			"second_score":	61323
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	2852,
			"primary_score":	999640,
			"second_score":	62056
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	2856,
			"primary_score":	999640,
			"second_score":	62007
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	581,
			"primary_score":	999640,
			"second_score":	54208
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	583,
			"primary_score":	999640,
			"second_score":	54207
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	585,
			"primary_score":	999640,
			"second_score":	54206
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	586,
			"primary_score":	999640,
			"second_score":	54205
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	587,
			"primary_score":	999640,
			"second_score":	54186
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	683,
			"primary_score":	999640,
			"second_score":	54210
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	690,
			"primary_score":	999640,
			"second_score":	54209
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	692,
			"primary_score":	999640,
			"second_score":	54185
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	699,
			"primary_score":	999640,
			"second_score":	118680
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	700,
			"primary_score":	999640,
			"second_score":	118679
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	701,
			"primary_score":	999640,
			"second_score":	118678
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	703,
			"primary_score":	999640,
			"second_score":	118677
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	704,
			"primary_score":	999640,
			"second_score":	118676
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	707,
			"primary_score":	999640,
			"second_score":	118675
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	711,
			"primary_score":	999640,
			"second_score":	118674
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	712,
			"primary_score":	999640,
			"second_score":	118670
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	717,
			"primary_score":	999640,
			"second_score":	118669
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	719,
			"primary_score":	999640,
			"second_score":	118668
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	113,
			"primary_score":	999640,
			"second_score":	54730
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	163,
			"primary_score":	999640,
			"second_score":	55358
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	165,
			"primary_score":	999640,
			"second_score":	54734
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	199,
			"primary_score":	999640,
			"second_score":	64576
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	203,
			"primary_score":	999640,
			"second_score":	64557
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	389,
			"primary_score":	999640,
			"second_score":	64477
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	390,
			"primary_score":	999640,
			"second_score":	64468
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	391,
			"primary_score":	999640,
			"second_score":	63128
		}, {
			"file":	"ext/pdo/pdo_sqlstate.c",
			"line":	309,
			"primary_score":	999640,
			"second_score":	64467
		}, {
			"file":	"ext/pdo_sqlite/pdo_sqlite.c",
			"line":	87,
			"primary_score":	999640,
			"second_score":	64577
		}, {
			"file":	"ext/pdo_sqlite/pdo_sqlite.c",
			"line":	88,
			"primary_score":	999640,
			"second_score":	64519
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1102,
			"primary_score":	999640,
			"second_score":	98779
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1104,
			"primary_score":	999640,
			"second_score":	98778
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1105,
			"primary_score":	999640,
			"second_score":	98753
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1106,
			"primary_score":	999640,
			"second_score":	98716
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1107,
			"primary_score":	999640,
			"second_score":	98689
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1108,
			"primary_score":	999640,
			"second_score":	98663
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1109,
			"primary_score":	999640,
			"second_score":	98636
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1110,
			"primary_score":	999640,
			"second_score":	98605
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1111,
			"primary_score":	999640,
			"second_score":	98576
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1112,
			"primary_score":	999640,
			"second_score":	98547
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1113,
			"primary_score":	999640,
			"second_score":	98519
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1114,
			"primary_score":	999640,
			"second_score":	98490
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1115,
			"primary_score":	999640,
			"second_score":	98461
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1116,
			"primary_score":	999640,
			"second_score":	98432
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1117,
			"primary_score":	999640,
			"second_score":	98403
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1118,
			"primary_score":	999640,
			"second_score":	98374
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1119,
			"primary_score":	999640,
			"second_score":	98346
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1120,
			"primary_score":	999640,
			"second_score":	98315
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1121,
			"primary_score":	999640,
			"second_score":	98284
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1122,
			"primary_score":	999640,
			"second_score":	98251
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1123,
			"primary_score":	999640,
			"second_score":	98226
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1124,
			"primary_score":	999640,
			"second_score":	98202
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1125,
			"primary_score":	999640,
			"second_score":	98172
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3394,
			"primary_score":	999640,
			"second_score":	161646
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3396,
			"primary_score":	999640,
			"second_score":	161644
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3400,
			"primary_score":	999640,
			"second_score":	161643
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3404,
			"primary_score":	999640,
			"second_score":	161642
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3527,
			"primary_score":	999640,
			"second_score":	98164
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3557,
			"primary_score":	999640,
			"second_score":	98817
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3559,
			"primary_score":	999640,
			"second_score":	98780
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3561,
			"primary_score":	999640,
			"second_score":	98171
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3562,
			"primary_score":	999640,
			"second_score":	98170
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3570,
			"primary_score":	999640,
			"second_score":	98169
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3575,
			"primary_score":	999640,
			"second_score":	98168
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3617,
			"primary_score":	999640,
			"second_score":	119245
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3619,
			"primary_score":	999640,
			"second_score":	119244
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3621,
			"primary_score":	999640,
			"second_score":	119243
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3657,
			"primary_score":	999640,
			"second_score":	119242
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3658,
			"primary_score":	999640,
			"second_score":	119241
		}, {
			"file":	"ext/session/session.c",
			"line":	93,
			"primary_score":	999640,
			"second_score":	119178
		}, {
			"file":	"ext/session/session.c",
			"line":	98,
			"primary_score":	999640,
			"second_score":	119177
		}, {
			"file":	"ext/session/session.c",
			"line":	103,
			"primary_score":	999640,
			"second_score":	119176
		}, {
			"file":	"ext/session/session.c",
			"line":	1441,
			"primary_score":	999640,
			"second_score":	119180
		}, {
			"file":	"ext/session/session.c",
			"line":	1958,
			"primary_score":	999640,
			"second_score":	119182
		}, {
			"file":	"ext/session/session.c",
			"line":	1960,
			"primary_score":	999640,
			"second_score":	119181
		}, {
			"file":	"ext/session/session.c",
			"line":	1961,
			"primary_score":	999640,
			"second_score":	119179
		}, {
			"file":	"ext/session/session.c",
			"line":	1964,
			"primary_score":	999640,
			"second_score":	119175
		}, {
			"file":	"ext/session/session.c",
			"line":	1965,
			"primary_score":	999640,
			"second_score":	119169
		}, {
			"file":	"ext/session/session.c",
			"line":	1971,
			"primary_score":	999640,
			"second_score":	119168
		}, {
			"file":	"ext/session/session.c",
			"line":	2013,
			"primary_score":	999640,
			"second_score":	67036
		}, {
			"file":	"ext/session/session.c",
			"line":	2019,
			"primary_score":	999640,
			"second_score":	65604
		}, {
			"file":	"ext/session/session.c",
			"line":	2020,
			"primary_score":	999640,
			"second_score":	65603
		}, {
			"file":	"ext/session/session.c",
			"line":	2022,
			"primary_score":	999640,
			"second_score":	65602
		}, {
			"file":	"ext/simplexml/simplexml.c",
			"line":	2561,
			"primary_score":	999640,
			"second_score":	97876
		}, {
			"file":	"ext/simplexml/simplexml.c",
			"line":	2562,
			"primary_score":	999640,
			"second_score":	97875
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	919,
			"primary_score":	999640,
			"second_score":	119164
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	924,
			"primary_score":	999640,
			"second_score":	119163
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	929,
			"primary_score":	999640,
			"second_score":	119162
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	932,
			"primary_score":	999640,
			"second_score":	119161
		}, {
			"file":	"ext/sqlite3/sqlite3.c",
			"line":	2140,
			"primary_score":	999640,
			"second_score":	56002
		}, {
			"file":	"ext/sqlite3/sqlite3.c",
			"line":	2142,
			"primary_score":	999640,
			"second_score":	55393
		}, {
			"file":	"ext/standard/array.c",
			"line":	138,
			"primary_score":	999640,
			"second_score":	97456
		}, {
			"file":	"ext/standard/assert.c",
			"line":	114,
			"primary_score":	999640,
			"second_score":	97454
		}, {
			"file":	"ext/standard/assert.c",
			"line":	118,
			"primary_score":	999640,
			"second_score":	97453
		}, {
			"file":	"ext/standard/assert.c",
			"line":	124,
			"primary_score":	999640,
			"second_score":	119216
		}, {
			"file":	"ext/standard/assert.c",
			"line":	129,
			"primary_score":	999640,
			"second_score":	119215
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3455,
			"primary_score":	999640,
			"second_score":	97650
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3456,
			"primary_score":	999640,
			"second_score":	97649
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3457,
			"primary_score":	999640,
			"second_score":	97610
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3628,
			"primary_score":	999640,
			"second_score":	97654
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3636,
			"primary_score":	999640,
			"second_score":	97651
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3642,
			"primary_score":	999640,
			"second_score":	97609
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3644,
			"primary_score":	999640,
			"second_score":	97568
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3645,
			"primary_score":	999640,
			"second_score":	97530
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3648,
			"primary_score":	999640,
			"second_score":	97493
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3649,
			"primary_score":	999640,
			"second_score":	97457
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3650,
			"primary_score":	999640,
			"second_score":	97455
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3651,
			"primary_score":	999640,
			"second_score":	97452
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3652,
			"primary_score":	999640,
			"second_score":	96375
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3653,
			"primary_score":	999640,
			"second_score":	96372
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3658,
			"primary_score":	999640,
			"second_score":	96050
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3661,
			"primary_score":	999640,
			"second_score":	96047
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3709,
			"primary_score":	999640,
			"second_score":	119237
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3712,
			"primary_score":	999640,
			"second_score":	119236
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3713,
			"primary_score":	999640,
			"second_score":	119235
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3715,
			"primary_score":	999640,
			"second_score":	119234
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3718,
			"primary_score":	999640,
			"second_score":	119226
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3724,
			"primary_score":	999640,
			"second_score":	119225
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3729,
			"primary_score":	999640,
			"second_score":	119224
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3730,
			"primary_score":	999640,
			"second_score":	119222
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3735,
			"primary_score":	999640,
			"second_score":	119221
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3741,
			"primary_score":	999640,
			"second_score":	119217
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3742,
			"primary_score":	999640,
			"second_score":	119214
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3743,
			"primary_score":	999640,
			"second_score":	119203
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3748,
			"primary_score":	999640,
			"second_score":	119192
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3754,
			"primary_score":	999640,
			"second_score":	119191
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3756,
			"primary_score":	999640,
			"second_score":	119188
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3757,
			"primary_score":	999640,
			"second_score":	119187
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3758,
			"primary_score":	999640,
			"second_score":	119186
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4509,
			"primary_score":	999640,
			"second_score":	122315
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4510,
			"primary_score":	999640,
			"second_score":	122314
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4511,
			"primary_score":	999640,
			"second_score":	122313
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4513,
			"primary_score":	999640,
			"second_score":	122312
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4517,
			"primary_score":	999640,
			"second_score":	122245
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4519,
			"primary_score":	999640,
			"second_score":	122214
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4528,
			"primary_score":	999640,
			"second_score":	122213
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4989,
			"primary_score":	999640,
			"second_score":	119660
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5001,
			"primary_score":	999640,
			"second_score":	118528
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5007,
			"primary_score":	999640,
			"second_score":	118527
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	234,
			"primary_score":	999640,
			"second_score":	97492
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	235,
			"primary_score":	999640,
			"second_score":	97459
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	238,
			"primary_score":	999640,
			"second_score":	97458
		}, {
			"file":	"ext/standard/crypt.c",
			"line":	130,
			"primary_score":	999640,
			"second_score":	96049
		}, {
			"file":	"ext/standard/crypt.c",
			"line":	133,
			"primary_score":	999640,
			"second_score":	96048
		}, {
			"file":	"ext/standard/file.c",
			"line":	318,
			"primary_score":	999640,
			"second_score":	96374
		}, {
			"file":	"ext/standard/file.c",
			"line":	320,
			"primary_score":	999640,
			"second_score":	96373
		}, {
			"file":	"ext/standard/file.c",
			"line":	2342,
			"primary_score":	999640,
			"second_score":	122009
		}, {
			"file":	"ext/standard/file.c",
			"line":	2343,
			"primary_score":	999640,
			"second_score":	122008
		}, {
			"file":	"ext/standard/file.c",
			"line":	2344,
			"primary_score":	999640,
			"second_score":	122007
		}, {
			"file":	"ext/standard/file.c",
			"line":	2346,
			"primary_score":	999640,
			"second_score":	122006
		}, {
			"file":	"ext/standard/file.c",
			"line":	2350,
			"primary_score":	999640,
			"second_score":	121896
		}, {
			"file":	"ext/standard/file.c",
			"line":	2351,
			"primary_score":	999640,
			"second_score":	121651
		}, {
			"file":	"ext/standard/file.c",
			"line":	2360,
			"primary_score":	999640,
			"second_score":	121647
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	110,
			"primary_score":	999640,
			"second_score":	119220
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	114,
			"primary_score":	999640,
			"second_score":	119219
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	118,
			"primary_score":	999640,
			"second_score":	119218
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2148,
			"primary_score":	999640,
			"second_score":	96371
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2150,
			"primary_score":	999640,
			"second_score":	96370
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2151,
			"primary_score":	999640,
			"second_score":	96091
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2153,
			"primary_score":	999640,
			"second_score":	96051
		}, {
			"file":	"ext/standard/head.c",
			"line":	68,
			"primary_score":	999640,
			"second_score":	142713
		}, {
			"file":	"ext/standard/head.c",
			"line":	71,
			"primary_score":	999640,
			"second_score":	142554
		}, {
			"file":	"ext/standard/info.c",
			"line":	527,
			"primary_score":	999640,
			"second_score":	123525
		}, {
			"file":	"ext/standard/info.c",
			"line":	528,
			"primary_score":	999640,
			"second_score":	123524
		}, {
			"file":	"ext/standard/info.c",
			"line":	577,
			"primary_score":	999640,
			"second_score":	123523
		}, {
			"file":	"ext/standard/info.c",
			"line":	578,
			"primary_score":	999640,
			"second_score":	123522
		}, {
			"file":	"ext/standard/info.c",
			"line":	605,
			"primary_score":	999640,
			"second_score":	123521
		}, {
			"file":	"ext/standard/info.c",
			"line":	607,
			"primary_score":	999640,
			"second_score":	123520
		}, {
			"file":	"ext/standard/info.c",
			"line":	609,
			"primary_score":	999640,
			"second_score":	123519
		}, {
			"file":	"ext/standard/info.c",
			"line":	611,
			"primary_score":	999640,
			"second_score":	123518
		}, {
			"file":	"ext/standard/info.c",
			"line":	613,
			"primary_score":	999640,
			"second_score":	123517
		}, {
			"file":	"ext/standard/info.c",
			"line":	616,
			"primary_score":	999640,
			"second_score":	123516
		}, {
			"file":	"ext/standard/info.c",
			"line":	619,
			"primary_score":	999640,
			"second_score":	122815
		}, {
			"file":	"ext/standard/info.c",
			"line":	627,
			"primary_score":	999640,
			"second_score":	122814
		}, {
			"file":	"ext/standard/info.c",
			"line":	1153,
			"primary_score":	999640,
			"second_score":	124456
		}, {
			"file":	"ext/standard/info.c",
			"line":	1154,
			"primary_score":	999640,
			"second_score":	124455
		}, {
			"file":	"ext/standard/info.c",
			"line":	1156,
			"primary_score":	999640,
			"second_score":	124454
		}, {
			"file":	"ext/standard/info.c",
			"line":	1160,
			"primary_score":	999640,
			"second_score":	124416
		}, {
			"file":	"ext/standard/info.c",
			"line":	1161,
			"primary_score":	999640,
			"second_score":	124415
		}, {
			"file":	"ext/standard/info.c",
			"line":	1280,
			"primary_score":	999640,
			"second_score":	123568
		}, {
			"file":	"ext/standard/info.c",
			"line":	1281,
			"primary_score":	999640,
			"second_score":	123567
		}, {
			"file":	"ext/standard/info.c",
			"line":	1283,
			"primary_score":	999640,
			"second_score":	123566
		}, {
			"file":	"ext/standard/info.c",
			"line":	1286,
			"primary_score":	999640,
			"second_score":	123528
		}, {
			"file":	"ext/standard/info.c",
			"line":	1295,
			"primary_score":	999640,
			"second_score":	120467
		}, {
			"file":	"ext/standard/info.c",
			"line":	1299,
			"primary_score":	999640,
			"second_score":	120434
		}, {
			"file":	"ext/standard/info.c",
			"line":	1302,
			"primary_score":	999640,
			"second_score":	120433
		}, {
			"file":	"ext/standard/string.c",
			"line":	1058,
			"primary_score":	999640,
			"second_score":	122761
		}, {
			"file":	"ext/standard/string.c",
			"line":	1059,
			"primary_score":	999640,
			"second_score":	122760
		}, {
			"file":	"ext/standard/string.c",
			"line":	1060,
			"primary_score":	999640,
			"second_score":	122759
		}, {
			"file":	"ext/standard/string.c",
			"line":	1061,
			"primary_score":	999640,
			"second_score":	122758
		}, {
			"file":	"ext/standard/string.c",
			"line":	1062,
			"primary_score":	999640,
			"second_score":	122757
		}, {
			"file":	"ext/standard/string.c",
			"line":	1063,
			"primary_score":	999640,
			"second_score":	122756
		}, {
			"file":	"ext/standard/string.c",
			"line":	1065,
			"primary_score":	999640,
			"second_score":	122755
		}, {
			"file":	"ext/standard/string.c",
			"line":	1067,
			"primary_score":	999640,
			"second_score":	122752
		}, {
			"file":	"ext/standard/string.c",
			"line":	1071,
			"primary_score":	999640,
			"second_score":	122751
		}, {
			"file":	"ext/standard/string.c",
			"line":	1073,
			"primary_score":	999640,
			"second_score":	122747
		}, {
			"file":	"ext/standard/string.c",
			"line":	1074,
			"primary_score":	999640,
			"second_score":	121738
		}, {
			"file":	"ext/standard/string.c",
			"line":	1076,
			"primary_score":	999640,
			"second_score":	122735
		}, {
			"file":	"ext/standard/string.c",
			"line":	1077,
			"primary_score":	999640,
			"second_score":	121729
		}, {
			"file":	"ext/standard/string.c",
			"line":	1124,
			"primary_score":	999640,
			"second_score":	121728
		}, {
			"file":	"ext/standard/string.c",
			"line":	1125,
			"primary_score":	999640,
			"second_score":	121759
		}, {
			"file":	"ext/standard/string.c",
			"line":	1127,
			"primary_score":	999640,
			"second_score":	121727
		}, {
			"file":	"ext/standard/string.c",
			"line":	1129,
			"primary_score":	999640,
			"second_score":	121716
		}, {
			"file":	"ext/standard/string.c",
			"line":	1131,
			"primary_score":	999640,
			"second_score":	121713
		}, {
			"file":	"ext/standard/string.c",
			"line":	1132,
			"primary_score":	999640,
			"second_score":	121712
		}, {
			"file":	"ext/standard/string.c",
			"line":	1144,
			"primary_score":	999640,
			"second_score":	122862
		}, {
			"file":	"ext/standard/string.c",
			"line":	1146,
			"primary_score":	999640,
			"second_score":	122861
		}, {
			"file":	"ext/standard/string.c",
			"line":	1150,
			"primary_score":	999640,
			"second_score":	122769
		}, {
			"file":	"ext/standard/string.c",
			"line":	1163,
			"primary_score":	999640,
			"second_score":	122768
		}, {
			"file":	"ext/standard/string.c",
			"line":	1167,
			"primary_score":	999640,
			"second_score":	122767
		}, {
			"file":	"ext/standard/string.c",
			"line":	1168,
			"primary_score":	999640,
			"second_score":	122766
		}, {
			"file":	"ext/standard/string.c",
			"line":	1169,
			"primary_score":	999640,
			"second_score":	122765
		}, {
			"file":	"ext/standard/string.c",
			"line":	1170,
			"primary_score":	999640,
			"second_score":	122763
		}, {
			"file":	"ext/standard/string.c",
			"line":	1177,
			"primary_score":	999640,
			"second_score":	122762
		}, {
			"file":	"ext/standard/string.c",
			"line":	1179,
			"primary_score":	999640,
			"second_score":	121703
		}, {
			"file":	"ext/standard/string.c",
			"line":	3536,
			"primary_score":	999640,
			"second_score":	120013
		}, {
			"file":	"ext/standard/string.c",
			"line":	3539,
			"primary_score":	999640,
			"second_score":	120012
		}, {
			"file":	"ext/standard/string.c",
			"line":	3540,
			"primary_score":	999640,
			"second_score":	120011
		}, {
			"file":	"ext/standard/string.c",
			"line":	3543,
			"primary_score":	999640,
			"second_score":	120010
		}, {
			"file":	"ext/standard/string.c",
			"line":	3544,
			"primary_score":	999640,
			"second_score":	119965
		}, {
			"file":	"ext/standard/string.c",
			"line":	3545,
			"primary_score":	999640,
			"second_score":	119964
		}, {
			"file":	"ext/standard/string.c",
			"line":	3546,
			"primary_score":	999640,
			"second_score":	119963
		}, {
			"file":	"ext/standard/string.c",
			"line":	3547,
			"primary_score":	999640,
			"second_score":	119929
		}, {
			"file":	"ext/standard/string.c",
			"line":	3647,
			"primary_score":	999640,
			"second_score":	120158
		}, {
			"file":	"ext/standard/string.c",
			"line":	3648,
			"primary_score":	999640,
			"second_score":	120157
		}, {
			"file":	"ext/standard/string.c",
			"line":	3649,
			"primary_score":	999640,
			"second_score":	120156
		}, {
			"file":	"ext/standard/string.c",
			"line":	3650,
			"primary_score":	999640,
			"second_score":	120155
		}, {
			"file":	"ext/standard/string.c",
			"line":	3651,
			"primary_score":	999640,
			"second_score":	120154
		}, {
			"file":	"ext/standard/string.c",
			"line":	3652,
			"primary_score":	999640,
			"second_score":	120153
		}, {
			"file":	"ext/standard/string.c",
			"line":	3653,
			"primary_score":	999640,
			"second_score":	120152
		}, {
			"file":	"ext/standard/string.c",
			"line":	3655,
			"primary_score":	999640,
			"second_score":	120151
		}, {
			"file":	"ext/standard/string.c",
			"line":	3659,
			"primary_score":	999640,
			"second_score":	120029
		}, {
			"file":	"ext/standard/string.c",
			"line":	3660,
			"primary_score":	999640,
			"second_score":	120026
		}, {
			"file":	"ext/standard/string.c",
			"line":	3661,
			"primary_score":	999640,
			"second_score":	120023
		}, {
			"file":	"ext/standard/string.c",
			"line":	3664,
			"primary_score":	999640,
			"second_score":	120020
		}, {
			"file":	"ext/standard/string.c",
			"line":	3665,
			"primary_score":	999640,
			"second_score":	120019
		}, {
			"file":	"ext/standard/string.c",
			"line":	3666,
			"primary_score":	999640,
			"second_score":	120017
		}, {
			"file":	"ext/standard/string.c",
			"line":	3672,
			"primary_score":	999640,
			"second_score":	120015
		}, {
			"file":	"ext/standard/string.c",
			"line":	3703,
			"primary_score":	999640,
			"second_score":	120014
		}, {
			"file":	"ext/standard/string.c",
			"line":	3705,
			"primary_score":	999640,
			"second_score":	119928
		}, {
			"file":	"ext/standard/string.c",
			"line":	3716,
			"primary_score":	999640,
			"second_score":	120159
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	121,
			"primary_score":	999640,
			"second_score":	97653
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	125,
			"primary_score":	999640,
			"second_score":	97652
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1083,
			"primary_score":	999640,
			"second_score":	97451
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1085,
			"primary_score":	999640,
			"second_score":	96376
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1097,
			"primary_score":	999640,
			"second_score":	119213
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1102,
			"primary_score":	999640,
			"second_score":	119212
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1103,
			"primary_score":	999640,
			"second_score":	119208
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1105,
			"primary_score":	999640,
			"second_score":	119204
		}, {
			"file":	"ext/standard/user_filters.c",
			"line":	129,
			"primary_score":	999640,
			"second_score":	119190
		}, {
			"file":	"ext/standard/user_filters.c",
			"line":	135,
			"primary_score":	999640,
			"second_score":	119189
		}, {
			"file":	"ext/standard/var.c",
			"line":	89,
			"primary_score":	999755,
			"second_score":	120861
		}, {
			"file":	"ext/standard/var.c",
			"line":	90,
			"primary_score":	999755,
			"second_score":	120860
		}, {
			"file":	"ext/standard/var.c",
			"line":	91,
			"primary_score":	999755,
			"second_score":	120859
		}, {
			"file":	"ext/standard/var.c",
			"line":	92,
			"primary_score":	999755,
			"second_score":	120858
		}, {
			"file":	"ext/standard/var.c",
			"line":	93,
			"primary_score":	999755,
			"second_score":	120857
		}, {
			"file":	"ext/standard/var.c",
			"line":	95,
			"primary_score":	999755,
			"second_score":	120856
		}, {
			"file":	"ext/standard/var.c",
			"line":	99,
			"primary_score":	999755,
			"second_score":	120855
		}, {
			"file":	"ext/standard/var.c",
			"line":	114,
			"primary_score":	999858,
			"second_score":	120523
		}, {
			"file":	"ext/standard/var.c",
			"line":	115,
			"primary_score":	999858,
			"second_score":	120477
		}, {
			"file":	"ext/standard/var.c",
			"line":	116,
			"primary_score":	999858,
			"second_score":	120429
		}, {
			"file":	"ext/standard/var.c",
			"line":	174,
			"primary_score":	999755,
			"second_score":	120952
		}, {
			"file":	"ext/standard/var.c",
			"line":	175,
			"primary_score":	999755,
			"second_score":	120951
		}, {
			"file":	"ext/standard/var.c",
			"line":	176,
			"primary_score":	999755,
			"second_score":	120950
		}, {
			"file":	"ext/standard/var.c",
			"line":	178,
			"primary_score":	999755,
			"second_score":	120949
		}, {
			"file":	"ext/standard/var.c",
			"line":	182,
			"primary_score":	999755,
			"second_score":	120863
		}, {
			"file":	"ext/standard/var.c",
			"line":	183,
			"primary_score":	999755,
			"second_score":	120862
		}, {
			"file":	"ext/standard/var.c",
			"line":	185,
			"primary_score":	999755,
			"second_score":	120428
		}, {
			"file":	"ext/xmlreader/php_xmlreader.c",
			"line":	1378,
			"primary_score":	999640,
			"second_score":	100662
		}, {
			"file":	"ext/xmlreader/php_xmlreader.c",
			"line":	1379,
			"primary_score":	999640,
			"second_score":	100569
		}, {
			"file":	"ext/xmlwriter/php_xmlwriter.c",
			"line":	1972,
			"primary_score":	999640,
			"second_score":	103352
		}, {
			"file":	"main/SAPI.c",
			"line":	69,
			"primary_score":	999640,
			"second_score":	3134
		}, {
			"file":	"main/SAPI.c",
			"line":	101,
			"primary_score":	999640,
			"second_score":	3135
		}, {
			"file":	"main/SAPI.c",
			"line":	104,
			"primary_score":	999640,
			"second_score":	3113
		}, {
			"file":	"main/SAPI.c",
			"line":	106,
			"primary_score":	999640,
			"second_score":	3112
		}, {
			"file":	"main/SAPI.c",
			"line":	116,
			"primary_score":	999640,
			"second_score":	142583
		}, {
			"file":	"main/SAPI.c",
			"line":	231,
			"primary_score":	999640,
			"second_score":	142705
		}, {
			"file":	"main/SAPI.c",
			"line":	232,
			"primary_score":	999640,
			"second_score":	142704
		}, {
			"file":	"main/SAPI.c",
			"line":	234,
			"primary_score":	999640,
			"second_score":	142703
		}, {
			"file":	"main/SAPI.c",
			"line":	235,
			"primary_score":	999640,
			"second_score":	142702
		}, {
			"file":	"main/SAPI.c",
			"line":	236,
			"primary_score":	999640,
			"second_score":	142701
		}, {
			"file":	"main/SAPI.c",
			"line":	241,
			"primary_score":	999640,
			"second_score":	142700
		}, {
			"file":	"main/SAPI.c",
			"line":	242,
			"primary_score":	999640,
			"second_score":	142699
		}, {
			"file":	"main/SAPI.c",
			"line":	243,
			"primary_score":	999640,
			"second_score":	142698
		}, {
			"file":	"main/SAPI.c",
			"line":	249,
			"primary_score":	999640,
			"second_score":	142697
		}, {
			"file":	"main/SAPI.c",
			"line":	261,
			"primary_score":	999640,
			"second_score":	142696
		}, {
			"file":	"main/SAPI.c",
			"line":	262,
			"primary_score":	999640,
			"second_score":	142695
		}, {
			"file":	"main/SAPI.c",
			"line":	263,
			"primary_score":	999640,
			"second_score":	142673
		}, {
			"file":	"main/SAPI.c",
			"line":	265,
			"primary_score":	999640,
			"second_score":	142672
		}, {
			"file":	"main/SAPI.c",
			"line":	427,
			"primary_score":	999640,
			"second_score":	113261
		}, {
			"file":	"main/SAPI.c",
			"line":	435,
			"primary_score":	999640,
			"second_score":	113301
		}, {
			"file":	"main/SAPI.c",
			"line":	436,
			"primary_score":	999640,
			"second_score":	113297
		}, {
			"file":	"main/SAPI.c",
			"line":	438,
			"primary_score":	999640,
			"second_score":	113296
		}, {
			"file":	"main/SAPI.c",
			"line":	449,
			"primary_score":	999640,
			"second_score":	113295
		}, {
			"file":	"main/SAPI.c",
			"line":	452,
			"primary_score":	999640,
			"second_score":	113294
		}, {
			"file":	"main/SAPI.c",
			"line":	455,
			"primary_score":	999640,
			"second_score":	113293
		}, {
			"file":	"main/SAPI.c",
			"line":	458,
			"primary_score":	999640,
			"second_score":	113292
		}, {
			"file":	"main/SAPI.c",
			"line":	461,
			"primary_score":	999640,
			"second_score":	113291
		}, {
			"file":	"main/SAPI.c",
			"line":	464,
			"primary_score":	999640,
			"second_score":	113290
		}, {
			"file":	"main/SAPI.c",
			"line":	467,
			"primary_score":	999640,
			"second_score":	113289
		}, {
			"file":	"main/SAPI.c",
			"line":	468,
			"primary_score":	999640,
			"second_score":	113288
		}, {
			"file":	"main/SAPI.c",
			"line":	470,
			"primary_score":	999640,
			"second_score":	113284
		}, {
			"file":	"main/SAPI.c",
			"line":	473,
			"primary_score":	999640,
			"second_score":	113283
		}, {
			"file":	"main/SAPI.c",
			"line":	474,
			"primary_score":	999640,
			"second_score":	113282
		}, {
			"file":	"main/SAPI.c",
			"line":	475,
			"primary_score":	999640,
			"second_score":	113263
		}, {
			"file":	"main/SAPI.c",
			"line":	477,
			"primary_score":	999640,
			"second_score":	113262
		}, {
			"file":	"main/SAPI.c",
			"line":	478,
			"primary_score":	999640,
			"second_score":	113260
		}, {
			"file":	"main/SAPI.c",
			"line":	479,
			"primary_score":	999640,
			"second_score":	113259
		}, {
			"file":	"main/SAPI.c",
			"line":	480,
			"primary_score":	999640,
			"second_score":	113258
		}, {
			"file":	"main/SAPI.c",
			"line":	481,
			"primary_score":	999640,
			"second_score":	113257
		}, {
			"file":	"main/SAPI.c",
			"line":	550,
			"primary_score":	999640,
			"second_score":	142586
		}, {
			"file":	"main/SAPI.c",
			"line":	565,
			"primary_score":	999640,
			"second_score":	142584
		}, {
			"file":	"main/SAPI.c",
			"line":	754,
			"primary_score":	999640,
			"second_score":	119265
		}, {
			"file":	"main/SAPI.c",
			"line":	755,
			"primary_score":	999640,
			"second_score":	119264
		}, {
			"file":	"main/SAPI.c",
			"line":	757,
			"primary_score":	999640,
			"second_score":	119263
		}, {
			"file":	"main/SAPI.c",
			"line":	758,
			"primary_score":	999640,
			"second_score":	119262
		}, {
			"file":	"main/SAPI.c",
			"line":	764,
			"primary_score":	999640,
			"second_score":	142709
		}, {
			"file":	"main/SAPI.c",
			"line":	765,
			"primary_score":	999640,
			"second_score":	142708
		}, {
			"file":	"main/SAPI.c",
			"line":	766,
			"primary_score":	999640,
			"second_score":	142707
		}, {
			"file":	"main/SAPI.c",
			"line":	768,
			"primary_score":	999640,
			"second_score":	142706
		}, {
			"file":	"main/SAPI.c",
			"line":	769,
			"primary_score":	999640,
			"second_score":	142671
		}, {
			"file":	"main/SAPI.c",
			"line":	770,
			"primary_score":	999640,
			"second_score":	142670
		}, {
			"file":	"main/SAPI.c",
			"line":	771,
			"primary_score":	999640,
			"second_score":	142589
		}, {
			"file":	"main/SAPI.c",
			"line":	772,
			"primary_score":	999640,
			"second_score":	142588
		}, {
			"file":	"main/SAPI.c",
			"line":	773,
			"primary_score":	999640,
			"second_score":	142587
		}, {
			"file":	"main/SAPI.c",
			"line":	774,
			"primary_score":	999640,
			"second_score":	142564
		}, {
			"file":	"main/SAPI.c",
			"line":	777,
			"primary_score":	999640,
			"second_score":	142563
		}, {
			"file":	"main/SAPI.c",
			"line":	779,
			"primary_score":	999640,
			"second_score":	142562
		}, {
			"file":	"main/SAPI.c",
			"line":	780,
			"primary_score":	999640,
			"second_score":	142561
		}, {
			"file":	"main/SAPI.c",
			"line":	785,
			"primary_score":	999640,
			"second_score":	142559
		}, {
			"file":	"main/SAPI.c",
			"line":	788,
			"primary_score":	999640,
			"second_score":	142558
		}, {
			"file":	"main/SAPI.c",
			"line":	819,
			"primary_score":	999640,
			"second_score":	142557
		}, {
			"file":	"main/SAPI.c",
			"line":	821,
			"primary_score":	999640,
			"second_score":	142555
		}, {
			"file":	"main/SAPI.c",
			"line":	890,
			"primary_score":	999640,
			"second_score":	103396
		}, {
			"file":	"main/SAPI.c",
			"line":	891,
			"primary_score":	999640,
			"second_score":	103395
		}, {
			"file":	"main/SAPI.c",
			"line":	892,
			"primary_score":	999640,
			"second_score":	103393
		}, {
			"file":	"main/getopt.c",
			"line":	174,
			"primary_score":	999640,
			"second_score":	148751
		}, {
			"file":	"main/getopt.c",
			"line":	175,
			"primary_score":	999640,
			"second_score":	148750
		}, {
			"file":	"main/getopt.c",
			"line":	177,
			"primary_score":	999640,
			"second_score":	148749
		}, {
			"file":	"main/getopt.c",
			"line":	178,
			"primary_score":	999640,
			"second_score":	148748
		}, {
			"file":	"main/getopt.c",
			"line":	185,
			"primary_score":	999640,
			"second_score":	148747
		}, {
			"file":	"main/main.c",
			"line":	591,
			"primary_score":	999748,
			"second_score":	120853
		}, {
			"file":	"main/main.c",
			"line":	592,
			"primary_score":	999748,
			"second_score":	120852
		}, {
			"file":	"main/main.c",
			"line":	593,
			"primary_score":	999748,
			"second_score":	120851
		}, {
			"file":	"main/main.c",
			"line":	594,
			"primary_score":	999748,
			"second_score":	120850
		}, {
			"file":	"main/main.c",
			"line":	595,
			"primary_score":	999748,
			"second_score":	120849
		}, {
			"file":	"main/main.c",
			"line":	597,
			"primary_score":	999748,
			"second_score":	120848
		}, {
			"file":	"main/main.c",
			"line":	598,
			"primary_score":	999748,
			"second_score":	120847
		}, {
			"file":	"main/main.c",
			"line":	599,
			"primary_score":	999748,
			"second_score":	120590
		}, {
			"file":	"main/main.c",
			"line":	600,
			"primary_score":	999748,
			"second_score":	120544
		}, {
			"file":	"main/main.c",
			"line":	601,
			"primary_score":	999748,
			"second_score":	120525
		}, {
			"file":	"main/main.c",
			"line":	603,
			"primary_score":	999748,
			"second_score":	120524
		}, {
			"file":	"main/main.c",
			"line":	1599,
			"primary_score":	999640,
			"second_score":	119679
		}, {
			"file":	"main/main.c",
			"line":	1600,
			"primary_score":	999640,
			"second_score":	119678
		}, {
			"file":	"main/main.c",
			"line":	1602,
			"primary_score":	999640,
			"second_score":	119677
		}, {
			"file":	"main/main.c",
			"line":	1607,
			"primary_score":	999640,
			"second_score":	119676
		}, {
			"file":	"main/main.c",
			"line":	1608,
			"primary_score":	999640,
			"second_score":	119675
		}, {
			"file":	"main/main.c",
			"line":	1610,
			"primary_score":	999640,
			"second_score":	119674
		}, {
			"file":	"main/main.c",
			"line":	1613,
			"primary_score":	999640,
			"second_score":	119667
		}, {
			"file":	"main/main.c",
			"line":	1614,
			"primary_score":	999640,
			"second_score":	119661
		}, {
			"file":	"main/main.c",
			"line":	1615,
			"primary_score":	999640,
			"second_score":	119659
		}, {
			"file":	"main/main.c",
			"line":	1618,
			"primary_score":	999640,
			"second_score":	119657
		}, {
			"file":	"main/main.c",
			"line":	1619,
			"primary_score":	999640,
			"second_score":	119651
		}, {
			"file":	"main/main.c",
			"line":	1620,
			"primary_score":	999640,
			"second_score":	119292
		}, {
			"file":	"main/main.c",
			"line":	1623,
			"primary_score":	999640,
			"second_score":	119290
		}, {
			"file":	"main/main.c",
			"line":	1624,
			"primary_score":	999640,
			"second_score":	119284
		}, {
			"file":	"main/main.c",
			"line":	1626,
			"primary_score":	999640,
			"second_score":	119283
		}, {
			"file":	"main/main.c",
			"line":	1632,
			"primary_score":	999640,
			"second_score":	119282
		}, {
			"file":	"main/main.c",
			"line":	1635,
			"primary_score":	999640,
			"second_score":	119281
		}, {
			"file":	"main/main.c",
			"line":	1637,
			"primary_score":	999640,
			"second_score":	119279
		}, {
			"file":	"main/main.c",
			"line":	1638,
			"primary_score":	999640,
			"second_score":	119274
		}, {
			"file":	"main/main.c",
			"line":	1641,
			"primary_score":	999640,
			"second_score":	119272
		}, {
			"file":	"main/main.c",
			"line":	1642,
			"primary_score":	999640,
			"second_score":	119266
		}, {
			"file":	"main/main.c",
			"line":	1643,
			"primary_score":	999640,
			"second_score":	119261
		}, {
			"file":	"main/main.c",
			"line":	1646,
			"primary_score":	999640,
			"second_score":	119259
		}, {
			"file":	"main/main.c",
			"line":	1647,
			"primary_score":	999640,
			"second_score":	119258
		}, {
			"file":	"main/main.c",
			"line":	1648,
			"primary_score":	999640,
			"second_score":	118529
		}, {
			"file":	"main/main.c",
			"line":	1652,
			"primary_score":	999640,
			"second_score":	118526
		}, {
			"file":	"main/main.c",
			"line":	1653,
			"primary_score":	999640,
			"second_score":	118520
		}, {
			"file":	"main/main.c",
			"line":	1655,
			"primary_score":	999640,
			"second_score":	118519
		}, {
			"file":	"main/main.c",
			"line":	1656,
			"primary_score":	999640,
			"second_score":	118381
		}, {
			"file":	"main/main.c",
			"line":	1657,
			"primary_score":	999640,
			"second_score":	118380
		}, {
			"file":	"main/main.c",
			"line":	1660,
			"primary_score":	999640,
			"second_score":	118346
		}, {
			"file":	"main/main.c",
			"line":	1663,
			"primary_score":	999640,
			"second_score":	118344
		}, {
			"file":	"main/main.c",
			"line":	1667,
			"primary_score":	999640,
			"second_score":	118343
		}, {
			"file":	"main/main.c",
			"line":	1673,
			"primary_score":	999640,
			"second_score":	118342
		}, {
			"file":	"main/main.c",
			"line":	1676,
			"primary_score":	999640,
			"second_score":	113320
		}, {
			"file":	"main/main.c",
			"line":	1677,
			"primary_score":	999640,
			"second_score":	113314
		}, {
			"file":	"main/main.c",
			"line":	1678,
			"primary_score":	999640,
			"second_score":	113310
		}, {
			"file":	"main/main.c",
			"line":	1681,
			"primary_score":	999640,
			"second_score":	113308
		}, {
			"file":	"main/main.c",
			"line":	1682,
			"primary_score":	999640,
			"second_score":	113302
		}, {
			"file":	"main/main.c",
			"line":	1683,
			"primary_score":	999640,
			"second_score":	113256
		}, {
			"file":	"main/main.c",
			"line":	1686,
			"primary_score":	999640,
			"second_score":	113254
		}, {
			"file":	"main/main.c",
			"line":	1687,
			"primary_score":	999640,
			"second_score":	113248
		}, {
			"file":	"main/main.c",
			"line":	1688,
			"primary_score":	999640,
			"second_score":	113245
		}, {
			"file":	"main/main.c",
			"line":	1691,
			"primary_score":	999640,
			"second_score":	113243
		}, {
			"file":	"main/main.c",
			"line":	1692,
			"primary_score":	999640,
			"second_score":	113237
		}, {
			"file":	"main/main.c",
			"line":	1693,
			"primary_score":	999640,
			"second_score":	112818
		}, {
			"file":	"main/main.c",
			"line":	1694,
			"primary_score":	999640,
			"second_score":	112816
		}, {
			"file":	"main/main.c",
			"line":	1697,
			"primary_score":	999640,
			"second_score":	103417
		}, {
			"file":	"main/main.c",
			"line":	1698,
			"primary_score":	999640,
			"second_score":	103411
		}, {
			"file":	"main/main.c",
			"line":	1699,
			"primary_score":	999640,
			"second_score":	103409
		}, {
			"file":	"main/main.c",
			"line":	1732,
			"primary_score":	999640,
			"second_score":	121304
		}, {
			"file":	"main/main.c",
			"line":	1733,
			"primary_score":	999640,
			"second_score":	121303
		}, {
			"file":	"main/main.c",
			"line":	1753,
			"primary_score":	999640,
			"second_score":	3150
		}, {
			"file":	"main/main.c",
			"line":	1756,
			"primary_score":	999640,
			"second_score":	3149
		}, {
			"file":	"main/main.c",
			"line":	1759,
			"primary_score":	999640,
			"second_score":	3148
		}, {
			"file":	"main/main.c",
			"line":	1762,
			"primary_score":	999640,
			"second_score":	3147
		}, {
			"file":	"main/main.c",
			"line":	1766,
			"primary_score":	999640,
			"second_score":	3146
		}, {
			"file":	"main/main.c",
			"line":	2198,
			"primary_score":	999640,
			"second_score":	103400
		}, {
			"file":	"main/main.c",
			"line":	2200,
			"primary_score":	999640,
			"second_score":	103399
		}, {
			"file":	"main/main.c",
			"line":	2202,
			"primary_score":	999640,
			"second_score":	103398
		}, {
			"file":	"main/main.c",
			"line":	2215,
			"primary_score":	999640,
			"second_score":	103397
		}, {
			"file":	"main/main.c",
			"line":	2217,
			"primary_score":	999640,
			"second_score":	103392
		}, {
			"file":	"main/main.c",
			"line":	2220,
			"primary_score":	999640,
			"second_score":	6121
		}, {
			"file":	"main/main.c",
			"line":	2222,
			"primary_score":	999640,
			"second_score":	6055
		}, {
			"file":	"main/main.c",
			"line":	2223,
			"primary_score":	999640,
			"second_score":	6026
		}, {
			"file":	"main/main.c",
			"line":	2226,
			"primary_score":	999640,
			"second_score":	3567
		}, {
			"file":	"main/main.c",
			"line":	2229,
			"primary_score":	999640,
			"second_score":	3244
		}, {
			"file":	"main/main.c",
			"line":	2230,
			"primary_score":	999640,
			"second_score":	3214
		}, {
			"file":	"main/main.c",
			"line":	2235,
			"primary_score":	999640,
			"second_score":	3191
		}, {
			"file":	"main/main.c",
			"line":	2236,
			"primary_score":	999640,
			"second_score":	3154
		}, {
			"file":	"main/main.c",
			"line":	2238,
			"primary_score":	999640,
			"second_score":	3152
		}, {
			"file":	"main/main.c",
			"line":	2241,
			"primary_score":	999640,
			"second_score":	3151
		}, {
			"file":	"main/main.c",
			"line":	2242,
			"primary_score":	999640,
			"second_score":	3141
		}, {
			"file":	"main/main.c",
			"line":	2346,
			"primary_score":	999640,
			"second_score":	119691
		}, {
			"file":	"main/main.c",
			"line":	2354,
			"primary_score":	999640,
			"second_score":	119689
		}, {
			"file":	"main/main.c",
			"line":	2357,
			"primary_score":	999640,
			"second_score":	119688
		}, {
			"file":	"main/main.c",
			"line":	2359,
			"primary_score":	999640,
			"second_score":	119686
		}, {
			"file":	"main/output.c",
			"line":	103,
			"primary_score":	999640,
			"second_score":	3190
		}, {
			"file":	"main/output.c",
			"line":	104,
			"primary_score":	999640,
			"second_score":	3176
		}, {
			"file":	"main/output.c",
			"line":	105,
			"primary_score":	999640,
			"second_score":	3162
		}, {
			"file":	"main/output.c",
			"line":	129,
			"primary_score":	999640,
			"second_score":	119278
		}, {
			"file":	"main/output.c",
			"line":	131,
			"primary_score":	999640,
			"second_score":	119277
		}, {
			"file":	"main/output.c",
			"line":	132,
			"primary_score":	999640,
			"second_score":	119276
		}, {
			"file":	"main/output.c",
			"line":	135,
			"primary_score":	999640,
			"second_score":	119275
		}, {
			"file":	"main/output.c",
			"line":	198,
			"primary_score":	999640,
			"second_score":	121302
		}, {
			"file":	"main/output.c",
			"line":	201,
			"primary_score":	999640,
			"second_score":	121301
		}, {
			"file":	"main/output.c",
			"line":	202,
			"primary_score":	999640,
			"second_score":	121258
		}, {
			"file":	"main/output.c",
			"line":	281,
			"primary_score":	999640,
			"second_score":	119280
		}, {
			"file":	"main/output.c",
			"line":	697,
			"primary_score":	999640,
			"second_score":	121296
		}, {
			"file":	"main/output.c",
			"line":	703,
			"primary_score":	999640,
			"second_score":	121295
		}, {
			"file":	"main/output.c",
			"line":	711,
			"primary_score":	999640,
			"second_score":	121293
		}, {
			"file":	"main/output.c",
			"line":	715,
			"primary_score":	999640,
			"second_score":	121292
		}, {
			"file":	"main/output.c",
			"line":	716,
			"primary_score":	999640,
			"second_score":	121291
		}, {
			"file":	"main/output.c",
			"line":	717,
			"primary_score":	999640,
			"second_score":	121290
		}, {
			"file":	"main/output.c",
			"line":	719,
			"primary_score":	999640,
			"second_score":	121289
		}, {
			"file":	"main/output.c",
			"line":	785,
			"primary_score":	999640,
			"second_score":	121260
		}, {
			"file":	"main/output.c",
			"line":	789,
			"primary_score":	999640,
			"second_score":	121259
		}, {
			"file":	"main/output.c",
			"line":	975,
			"primary_score":	999640,
			"second_score":	121300
		}, {
			"file":	"main/output.c",
			"line":	976,
			"primary_score":	999640,
			"second_score":	121299
		}, {
			"file":	"main/output.c",
			"line":	977,
			"primary_score":	999640,
			"second_score":	121298
		}, {
			"file":	"main/output.c",
			"line":	979,
			"primary_score":	999640,
			"second_score":	121297
		}, {
			"file":	"main/output.c",
			"line":	983,
			"primary_score":	999640,
			"second_score":	121294
		}, {
			"file":	"main/output.c",
			"line":	990,
			"primary_score":	999640,
			"second_score":	121288
		}, {
			"file":	"main/output.c",
			"line":	1002,
			"primary_score":	999640,
			"second_score":	121287
		}, {
			"file":	"main/output.c",
			"line":	1003,
			"primary_score":	999640,
			"second_score":	121286
		}, {
			"file":	"main/output.c",
			"line":	1006,
			"primary_score":	999640,
			"second_score":	121285
		}, {
			"file":	"main/output.c",
			"line":	1010,
			"primary_score":	999640,
			"second_score":	121284
		}, {
			"file":	"main/output.c",
			"line":	1011,
			"primary_score":	999640,
			"second_score":	142553
		}, {
			"file":	"main/output.c",
			"line":	1014,
			"primary_score":	999640,
			"second_score":	142551
		}, {
			"file":	"main/output.c",
			"line":	1015,
			"primary_score":	999640,
			"second_score":	142549
		}, {
			"file":	"main/output.c",
			"line":	1016,
			"primary_score":	999640,
			"second_score":	142546
		}, {
			"file":	"main/output.c",
			"line":	1022,
			"primary_score":	999640,
			"second_score":	121283
		}, {
			"file":	"main/output.c",
			"line":	1023,
			"primary_score":	999640,
			"second_score":	121268
		}, {
			"file":	"main/output.c",
			"line":	1024,
			"primary_score":	999640,
			"second_score":	121267
		}, {
			"file":	"main/output.c",
			"line":	1026,
			"primary_score":	999640,
			"second_score":	121262
		}, {
			"file":	"main/output.c",
			"line":	1028,
			"primary_score":	999640,
			"second_score":	121261
		}, {
			"file":	"main/php_ini.c",
			"line":	194,
			"primary_score":	999640,
			"second_score":	3256
		}, {
			"file":	"main/php_ini.c",
			"line":	197,
			"primary_score":	999640,
			"second_score":	3255
		}, {
			"file":	"main/php_ini.c",
			"line":	198,
			"primary_score":	999640,
			"second_score":	3254
		}, {
			"file":	"main/php_ini.c",
			"line":	729,
			"primary_score":	999640,
			"second_score":	3566
		}, {
			"file":	"main/php_ini.c",
			"line":	730,
			"primary_score":	999640,
			"second_score":	3247
		}, {
			"file":	"main/php_ini.c",
			"line":	734,
			"primary_score":	999640,
			"second_score":	3246
		}, {
			"file":	"main/php_ini.c",
			"line":	738,
			"primary_score":	999640,
			"second_score":	3245
		}, {
			"file":	"main/php_logos.c",
			"line":	67,
			"primary_score":	999640,
			"second_score":	6054
		}, {
			"file":	"main/php_logos.c",
			"line":	68,
			"primary_score":	999640,
			"second_score":	6027
		}, {
			"file":	"main/php_open_temporary_file.c",
			"line":	183,
			"primary_score":	999640,
			"second_score":	3153
		}, {
			"file":	"main/php_ticks.c",
			"line":	32,
			"primary_score":	999640,
			"second_score":	119673
		}, {
			"file":	"main/php_ticks.c",
			"line":	37,
			"primary_score":	999640,
			"second_score":	3145
		}, {
			"file":	"main/snprintf.c",
			"line":	317,
			"primary_score":	999655,
			"second_score":	120667
		}, {
			"file":	"main/snprintf.c",
			"line":	318,
			"primary_score":	999655,
			"second_score":	120666
		}, {
			"file":	"main/snprintf.c",
			"line":	320,
			"primary_score":	999655,
			"second_score":	120665
		}, {
			"file":	"main/snprintf.c",
			"line":	324,
			"primary_score":	999655,
			"second_score":	120664
		}, {
			"file":	"main/snprintf.c",
			"line":	335,
			"primary_score":	999655,
			"second_score":	120663
		}, {
			"file":	"main/snprintf.c",
			"line":	339,
			"primary_score":	999655,
			"second_score":	120662
		}, {
			"file":	"main/snprintf.c",
			"line":	346,
			"primary_score":	999655,
			"second_score":	120661
		}, {
			"file":	"main/snprintf.c",
			"line":	347,
			"primary_score":	999655,
			"second_score":	120657
		}, {
			"file":	"main/snprintf.c",
			"line":	349,
			"primary_score":	999655,
			"second_score":	120656
		}, {
			"file":	"main/snprintf.c",
			"line":	350,
			"primary_score":	999655,
			"second_score":	120655
		}, {
			"file":	"main/snprintf.c",
			"line":	354,
			"primary_score":	999655,
			"second_score":	120654
		}, {
			"file":	"main/snprintf.c",
			"line":	355,
			"primary_score":	999655,
			"second_score":	120653
		}, {
			"file":	"main/snprintf.c",
			"line":	646,
			"primary_score":	999863,
			"second_score":	121513
		}, {
			"file":	"main/snprintf.c",
			"line":	647,
			"primary_score":	999863,
			"second_score":	121506
		}, {
			"file":	"main/snprintf.c",
			"line":	649,
			"primary_score":	999863,
			"second_score":	121505
		}, {
			"file":	"main/snprintf.c",
			"line":	651,
			"primary_score":	999863,
			"second_score":	121504
		}, {
			"file":	"main/snprintf.c",
			"line":	653,
			"primary_score":	999863,
			"second_score":	121503
		}, {
			"file":	"main/snprintf.c",
			"line":	655,
			"primary_score":	999863,
			"second_score":	121502
		}, {
			"file":	"main/snprintf.c",
			"line":	656,
			"primary_score":	999863,
			"second_score":	121507
		}, {
			"file":	"main/snprintf.c",
			"line":	658,
			"primary_score":	999863,
			"second_score":	121501
		}, {
			"file":	"main/snprintf.c",
			"line":	664,
			"primary_score":	999863,
			"second_score":	121500
		}, {
			"file":	"main/snprintf.c",
			"line":	665,
			"primary_score":	999863,
			"second_score":	121499
		}, {
			"file":	"main/snprintf.c",
			"line":	666,
			"primary_score":	999863,
			"second_score":	121496
		}, {
			"file":	"main/snprintf.c",
			"line":	685,
			"primary_score":	999863,
			"second_score":	121495
		}, {
			"file":	"main/snprintf.c",
			"line":	698,
			"primary_score":	999863,
			"second_score":	121494
		}, {
			"file":	"main/snprintf.c",
			"line":	732,
			"primary_score":	999885,
			"second_score":	121335
		}, {
			"file":	"main/snprintf.c",
			"line":	733,
			"primary_score":	999888,
			"second_score":	121334
		}, {
			"file":	"main/snprintf.c",
			"line":	734,
			"primary_score":	999888,
			"second_score":	121333
		}, {
			"file":	"main/snprintf.c",
			"line":	738,
			"primary_score":	999885,
			"second_score":	121332
		}, {
			"file":	"main/snprintf.c",
			"line":	833,
			"primary_score":	999857,
			"second_score":	121330
		}, {
			"file":	"main/snprintf.c",
			"line":	836,
			"primary_score":	999860,
			"second_score":	121489
		}, {
			"file":	"main/snprintf.c",
			"line":	852,
			"primary_score":	999888,
			"second_score":	121329
		}, {
			"file":	"main/snprintf.c",
			"line":	866,
			"primary_score":	999857,
			"second_score":	121328
		}, {
			"file":	"main/snprintf.c",
			"line":	868,
			"primary_score":	999857,
			"second_score":	121288
		}, {
			"file":	"main/snprintf.c",
			"line":	870,
			"primary_score":	999857,
			"second_score":	121286
		}, {
			"file":	"main/snprintf.c",
			"line":	871,
			"primary_score":	999857,
			"second_score":	121285
		}, {
			"file":	"main/snprintf.c",
			"line":	873,
			"primary_score":	999857,
			"second_score":	121284
		}, {
			"file":	"main/snprintf.c",
			"line":	875,
			"primary_score":	999857,
			"second_score":	121283
		}, {
			"file":	"main/snprintf.c",
			"line":	879,
			"primary_score":	999857,
			"second_score":	121282
		}, {
			"file":	"main/snprintf.c",
			"line":	1157,
			"primary_score":	999873,
			"second_score":	125582
		}, {
			"file":	"main/snprintf.c",
			"line":	1163,
			"primary_score":	999873,
			"second_score":	125581
		}, {
			"file":	"main/snprintf.c",
			"line":	1223,
			"primary_score":	999857,
			"second_score":	121384
		}, {
			"file":	"main/snprintf.c",
			"line":	1224,
			"primary_score":	999857,
			"second_score":	121383
		}, {
			"file":	"main/snprintf.c",
			"line":	1226,
			"primary_score":	999857,
			"second_score":	121382
		}, {
			"file":	"main/snprintf.c",
			"line":	1227,
			"primary_score":	999857,
			"second_score":	121381
		}, {
			"file":	"main/snprintf.c",
			"line":	1228,
			"primary_score":	999857,
			"second_score":	121209
		}, {
			"file":	"main/snprintf.c",
			"line":	1229,
			"primary_score":	999857,
			"second_score":	121208
		}, {
			"file":	"main/snprintf.c",
			"line":	1233,
			"primary_score":	999857,
			"second_score":	121207
		}, {
			"file":	"main/spprintf.c",
			"line":	340,
			"primary_score":	999815,
			"second_score":	158227
		}, {
			"file":	"main/spprintf.c",
			"line":	345,
			"primary_score":	999815,
			"second_score":	158226
		}, {
			"file":	"main/spprintf.c",
			"line":	346,
			"primary_score":	999815,
			"second_score":	158225
		}, {
			"file":	"main/spprintf.c",
			"line":	441,
			"primary_score":	999721,
			"second_score":	120670
		}, {
			"file":	"main/spprintf.c",
			"line":	444,
			"primary_score":	999770,
			"second_score":	120669
		}, {
			"file":	"main/spprintf.c",
			"line":	449,
			"primary_score":	999815,
			"second_score":	158222
		}, {
			"file":	"main/spprintf.c",
			"line":	474,
			"primary_score":	999721,
			"second_score":	120668
		}, {
			"file":	"main/spprintf.c",
			"line":	476,
			"primary_score":	999721,
			"second_score":	120652
		}, {
			"file":	"main/spprintf.c",
			"line":	478,
			"primary_score":	999721,
			"second_score":	120650
		}, {
			"file":	"main/spprintf.c",
			"line":	479,
			"primary_score":	999721,
			"second_score":	120649
		}, {
			"file":	"main/spprintf.c",
			"line":	481,
			"primary_score":	999721,
			"second_score":	120648
		}, {
			"file":	"main/spprintf.c",
			"line":	483,
			"primary_score":	999721,
			"second_score":	120647
		}, {
			"file":	"main/spprintf.c",
			"line":	486,
			"primary_score":	999721,
			"second_score":	120646
		}, {
			"file":	"main/spprintf.c",
			"line":	775,
			"primary_score":	999711,
			"second_score":	120796
		}, {
			"file":	"main/streams/filter.c",
			"line":	37,
			"primary_score":	999640,
			"second_score":	6095
		}, {
			"file":	"main/streams/filter.c",
			"line":	54,
			"primary_score":	999640,
			"second_score":	62055
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	287,
			"primary_score":	999640,
			"second_score":	148181
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	371,
			"primary_score":	999640,
			"second_score":	113866
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	372,
			"primary_score":	999640,
			"second_score":	113865
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	374,
			"primary_score":	999640,
			"second_score":	113864
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	377,
			"primary_score":	999640,
			"second_score":	113863
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	392,
			"primary_score":	999640,
			"second_score":	113862
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	393,
			"primary_score":	999640,
			"second_score":	113861
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	394,
			"primary_score":	999640,
			"second_score":	113860
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	404,
			"primary_score":	999640,
			"second_score":	113859
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	405,
			"primary_score":	999640,
			"second_score":	113858
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	413,
			"primary_score":	999640,
			"second_score":	113857
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	425,
			"primary_score":	999640,
			"second_score":	113856
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	427,
			"primary_score":	999640,
			"second_score":	113837
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	432,
			"primary_score":	999640,
			"second_score":	113876
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	434,
			"primary_score":	999640,
			"second_score":	113875
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	441,
			"primary_score":	999640,
			"second_score":	113874
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	442,
			"primary_score":	999640,
			"second_score":	113873
		}, {
			"file":	"main/streams/streams.c",
			"line":	104,
			"primary_score":	999640,
			"second_score":	119202
		}, {
			"file":	"main/streams/streams.c",
			"line":	105,
			"primary_score":	999640,
			"second_score":	119193
		}, {
			"file":	"main/streams/streams.c",
			"line":	333,
			"primary_score":	999640,
			"second_score":	113891
		}, {
			"file":	"main/streams/streams.c",
			"line":	334,
			"primary_score":	999640,
			"second_score":	113890
		}, {
			"file":	"main/streams/streams.c",
			"line":	335,
			"primary_score":	999640,
			"second_score":	113889
		}, {
			"file":	"main/streams/streams.c",
			"line":	336,
			"primary_score":	999640,
			"second_score":	113888
		}, {
			"file":	"main/streams/streams.c",
			"line":	337,
			"primary_score":	999640,
			"second_score":	113887
		}, {
			"file":	"main/streams/streams.c",
			"line":	339,
			"primary_score":	999640,
			"second_score":	113886
		}, {
			"file":	"main/streams/streams.c",
			"line":	352,
			"primary_score":	999640,
			"second_score":	113885
		}, {
			"file":	"main/streams/streams.c",
			"line":	361,
			"primary_score":	999640,
			"second_score":	113884
		}, {
			"file":	"main/streams/streams.c",
			"line":	365,
			"primary_score":	999640,
			"second_score":	113883
		}, {
			"file":	"main/streams/streams.c",
			"line":	383,
			"primary_score":	999640,
			"second_score":	113882
		}, {
			"file":	"main/streams/streams.c",
			"line":	402,
			"primary_score":	999640,
			"second_score":	113881
		}, {
			"file":	"main/streams/streams.c",
			"line":	405,
			"primary_score":	999640,
			"second_score":	113871
		}, {
			"file":	"main/streams/streams.c",
			"line":	410,
			"primary_score":	999640,
			"second_score":	113870
		}, {
			"file":	"main/streams/streams.c",
			"line":	414,
			"primary_score":	999640,
			"second_score":	113869
		}, {
			"file":	"main/streams/streams.c",
			"line":	415,
			"primary_score":	999640,
			"second_score":	113868
		}, {
			"file":	"main/streams/streams.c",
			"line":	427,
			"primary_score":	999640,
			"second_score":	113867
		}, {
			"file":	"main/streams/streams.c",
			"line":	428,
			"primary_score":	999640,
			"second_score":	113836
		}, {
			"file":	"main/streams/streams.c",
			"line":	431,
			"primary_score":	999640,
			"second_score":	113835
		}, {
			"file":	"main/streams/streams.c",
			"line":	438,
			"primary_score":	999640,
			"second_score":	113834
		}, {
			"file":	"main/streams/streams.c",
			"line":	439,
			"primary_score":	999640,
			"second_score":	113833
		}, {
			"file":	"main/streams/streams.c",
			"line":	442,
			"primary_score":	999640,
			"second_score":	113832
		}, {
			"file":	"main/streams/streams.c",
			"line":	446,
			"primary_score":	999640,
			"second_score":	113831
		}, {
			"file":	"main/streams/streams.c",
			"line":	451,
			"primary_score":	999640,
			"second_score":	113830
		}, {
			"file":	"main/streams/streams.c",
			"line":	456,
			"primary_score":	999640,
			"second_score":	113829
		}, {
			"file":	"main/streams/streams.c",
			"line":	461,
			"primary_score":	999640,
			"second_score":	113828
		}, {
			"file":	"main/streams/streams.c",
			"line":	493,
			"primary_score":	999640,
			"second_score":	113827
		}, {
			"file":	"main/streams/streams.c",
			"line":	494,
			"primary_score":	999640,
			"second_score":	113826
		}, {
			"file":	"main/streams/streams.c",
			"line":	495,
			"primary_score":	999640,
			"second_score":	113807
		}, {
			"file":	"main/streams/streams.c",
			"line":	498,
			"primary_score":	999640,
			"second_score":	113806
		}, {
			"file":	"main/streams/streams.c",
			"line":	502,
			"primary_score":	999640,
			"second_score":	113787
		}, {
			"file":	"main/streams/streams.c",
			"line":	506,
			"primary_score":	999640,
			"second_score":	113786
		}, {
			"file":	"main/streams/streams.c",
			"line":	1114,
			"primary_score":	999640,
			"second_score":	113880
		}, {
			"file":	"main/streams/streams.c",
			"line":	1116,
			"primary_score":	999640,
			"second_score":	113879
		}, {
			"file":	"main/streams/streams.c",
			"line":	1120,
			"primary_score":	999640,
			"second_score":	113878
		}, {
			"file":	"main/streams/streams.c",
			"line":	1121,
			"primary_score":	999640,
			"second_score":	113877
		}, {
			"file":	"main/streams/streams.c",
			"line":	1124,
			"primary_score":	999640,
			"second_score":	113872
		}, {
			"file":	"main/streams/streams.c",
			"line":	1498,
			"primary_score":	999640,
			"second_score":	113893
		}, {
			"file":	"main/streams/streams.c",
			"line":	1500,
			"primary_score":	999640,
			"second_score":	113892
		}, {
			"file":	"main/streams/streams.c",
			"line":	1511,
			"primary_score":	999640,
			"second_score":	113247
		}, {
			"file":	"main/streams/streams.c",
			"line":	1517,
			"primary_score":	999640,
			"second_score":	113246
		}, {
			"file":	"main/streams/streams.c",
			"line":	1553,
			"primary_score":	999640,
			"second_score":	6120
		}, {
			"file":	"main/streams/streams.c",
			"line":	1554,
			"primary_score":	999640,
			"second_score":	6096
		}, {
			"file":	"main/streams/streams.c",
			"line":	1555,
			"primary_score":	999640,
			"second_score":	6086
		}, {
			"file":	"main/streams/streams.c",
			"line":	1556,
			"primary_score":	999640,
			"second_score":	6056
		}, {
			"file":	"main/streams/streams.c",
			"line":	1592,
			"primary_score":	999640,
			"second_score":	97529
		}, {
			"file":	"main/streams/transports.c",
			"line":	29,
			"primary_score":	999640,
			"second_score":	6085
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	262,
			"primary_score":	999640,
			"second_score":	121277
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	280,
			"primary_score":	999640,
			"second_score":	121276
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	281,
			"primary_score":	999640,
			"second_score":	121275
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	284,
			"primary_score":	999640,
			"second_score":	121274
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	288,
			"primary_score":	999640,
			"second_score":	121273
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	300,
			"primary_score":	999640,
			"second_score":	121282
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	301,
			"primary_score":	999640,
			"second_score":	121281
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	302,
			"primary_score":	999640,
			"second_score":	121280
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	311,
			"primary_score":	999640,
			"second_score":	121279
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	313,
			"primary_score":	999640,
			"second_score":	121278
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	314,
			"primary_score":	999640,
			"second_score":	121272
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	320,
			"primary_score":	999640,
			"second_score":	121271
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	321,
			"primary_score":	999640,
			"second_score":	121270
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	324,
			"primary_score":	999640,
			"second_score":	121269
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	333,
			"primary_score":	999640,
			"second_score":	103394
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	386,
			"primary_score":	999640,
			"second_score":	113287
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	387,
			"primary_score":	999640,
			"second_score":	113286
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	391,
			"primary_score":	999640,
			"second_score":	113285
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	403,
			"primary_score":	999640,
			"second_score":	142585
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	411,
			"primary_score":	999640,
			"second_score":	142560
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	928,
			"primary_score":	999642,
			"second_score":	229320
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	932,
			"primary_score":	999642,
			"second_score":	229319
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	933,
			"primary_score":	999642,
			"second_score":	229318
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	962,
			"primary_score":	999640,
			"second_score":	148666
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	966,
			"primary_score":	999640,
			"second_score":	148665
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	967,
			"primary_score":	999640,
			"second_score":	148664
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	968,
			"primary_score":	999640,
			"second_score":	148663
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1102,
			"primary_score":	999640,
			"second_score":	148652
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1103,
			"primary_score":	999640,
			"second_score":	148651
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1255,
			"primary_score":	999640,
			"second_score":	119685
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1256,
			"primary_score":	999640,
			"second_score":	119684
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1293,
			"primary_score":	999640,
			"second_score":	121782
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1296,
			"primary_score":	999640,
			"second_score":	118754
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1435,
			"primary_score":	999640,
			"second_score":	119683
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1437,
			"primary_score":	999640,
			"second_score":	119681
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1439,
			"primary_score":	999640,
			"second_score":	119680
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1441,
			"primary_score":	999640,
			"second_score":	103407
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1442,
			"primary_score":	999640,
			"second_score":	103406
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1444,
			"primary_score":	999640,
			"second_score":	103405
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1448,
			"primary_score":	999640,
			"second_score":	103404
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1449,
			"primary_score":	999640,
			"second_score":	103403
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1452,
			"primary_score":	999640,
			"second_score":	103402
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1453,
			"primary_score":	999640,
			"second_score":	103401
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1455,
			"primary_score":	999640,
			"second_score":	3136
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1460,
			"primary_score":	999640,
			"second_score":	1
		}],
	"mutation_info":	[{
			"file":	"ext/date/php_date.c",
			"functions":	[]
		}],
	"rules":	[{
			"file_name":	"ext/date/php_date.c",
			"lines":	[{
					"line":	1053,
					"switches":	[{
							"switch":	0,
							"types":	[[], [], [], [], [337, 338], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [], [], [], [242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241], [], [], [], [], [], []],
							"begin_line":	1054,
							"begin_column":	2,
							"end_line":	1054,
							"end_column":	2,
							"patch_codes":	["memset(&offset->abbr, 0, sizeof (*(&offset->abbr)))", "memset(&offset->is_dst, 0, sizeof (*(&offset->is_dst)))", "memset(&offset->leap_secs, 0, sizeof (*(&offset->leap_secs)))", "memset(&offset->offset, 0, sizeof (*(&offset->offset)))", "memset(&offset->transistion_time, 0, sizeof (*(&offset->transistion_time)))", "memset(&string.a, 0, sizeof (*(&string.a)))", "memset(&string.c, 0, sizeof (*(&string.c)))", "memset(&string.len, 0, sizeof (*(&string.len)))", "memset(&t->d, 0, sizeof (*(&t->d)))", "memset(&t->dst, 0, sizeof (*(&t->dst)))", "memset(&t->f, 0, sizeof (*(&t->f)))", "memset(&t->h, 0, sizeof (*(&t->h)))", "memset(&t->have_date, 0, sizeof (*(&t->have_date)))", "memset(&t->have_relative, 0, sizeof (*(&t->have_relative)))", "memset(&t->have_time, 0, sizeof (*(&t->have_time)))", "memset(&t->have_weeknr_day, 0, sizeof (*(&t->have_weeknr_day)))", "memset(&t->have_zone, 0, sizeof (*(&t->have_zone)))", "memset(&t->i, 0, sizeof (*(&t->i)))", "memset(&t->is_localtime, 0, sizeof (*(&t->is_localtime)))", "memset(&t->m, 0, sizeof (*(&t->m)))", "memset(&t->relative, 0, sizeof (*(&t->relative)))", "memset(&t->s, 0, sizeof (*(&t->s)))", "memset(&t->sse, 0, sizeof (*(&t->sse)))", "memset(&t->sse_uptodate, 0, sizeof (*(&t->sse_uptodate)))", "memset(&t->tim_uptodate, 0, sizeof (*(&t->tim_uptodate)))", "memset(&t->tz_abbr, 0, sizeof (*(&t->tz_abbr)))", "memset(&t->tz_info, 0, sizeof (*(&t->tz_info)))", "memset(&t->y, 0, sizeof (*(&t->y)))", "memset(&t->z, 0, sizeof (*(&t->z)))", "memset(&t->zone_type, 0, sizeof (*(&t->zone_type)))", "memset(offset->abbr, 0, sizeof (*(offset->abbr)))", "memset(string.c, 0, sizeof (*(string.c)))", "memset(t, 0, sizeof (*(t)))", "memset(t->tz_abbr, 0, sizeof (*(t->tz_abbr)))", "memset(t->tz_info, 0, sizeof (*(t->tz_info)))", "(date_globals.timezone) = (format)", "(format)++", "_efree(((format)))", "ap_php_snprintf((offset)->abbr, 9, \"GMT%c%02d%02d\", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0)", "ap_php_snprintf(offset->abbr, 9, \"GMT%c%02d%02d\", localtime ? (((offset)->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0)", "ap_php_snprintf(offset->abbr, 9, \"GMT%c%02d%02d\", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs((offset)->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0)", "ap_php_snprintf(offset->abbr, 9, \"GMT%c%02d%02d\", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs(((offset)->offset % 3600) / 60) : 0)", "buffer[1] = (-60)", "buffer[1] = (0)", "buffer[1] = (1)", "buffer[1] = (10)", "buffer[1] = (100)", "buffer[1] = (1000)", "buffer[1] = (1000000)", "buffer[1] = (12)", "buffer[1] = (128)", "buffer[1] = (2)", "buffer[1] = (3)", "buffer[1] = (32)", "buffer[1] = (3600)", "buffer[1] = (4)", "buffer[1] = (400)", "buffer[1] = (60)", "buffer[1] = (78)", "buffer[1] = (864)", "buffer[1] = (86400)", "buffer[1] = (9)", "buffer[1] = (96)", "buffer[1] = (97)", "length = (-60)", "length = (0)", "length = (1)", "length = (10)", "length = (100)", "length = (1000)", "length = (1000000)", "length = (12)", "length = (128)", "length = (2)", "length = (3)", "length = (32)", "length = (3600)", "length = (4)", "length = (400)", "length = (60)", "length = (78)", "length = (864)", "length = (86400)", "length = (9)", "length = (96)", "length = (97)", "length = (format_len)", "length = (i)", "length = (length)", "length = (localtime)", "length = (rfc_colon)", "offset = (offset)", "offset = timelib_get_time_zone_info((t)->sse, t->tz_info)", "offset = timelib_get_time_zone_info(t->sse, (t)->tz_info)", "offset->abbr = (format)", "offset->abbr = strdup((t)->tz_abbr)", "offset->is_dst = (-60)", "offset->is_dst = (0)", "offset->is_dst = (1)", "offset->is_dst = (10)", "offset->is_dst = (100)", "offset->is_dst = (1000)", "offset->is_dst = (1000000)", "offset->is_dst = (12)", "offset->is_dst = (128)", "offset->is_dst = (2)", "offset->is_dst = (3)", "offset->is_dst = (32)", "offset->is_dst = (3600)", "offset->is_dst = (4)", "offset->is_dst = (400)", "offset->is_dst = (60)", "offset->is_dst = (78)", "offset->is_dst = (864)", "offset->is_dst = (86400)", "offset->is_dst = (9)", "offset->is_dst = (96)", "offset->is_dst = (97)", "offset->is_dst = (t)->dst", "offset->leap_secs = (-60)", "offset->leap_secs = (0)", "offset->leap_secs = (1)", "offset->leap_secs = (10)", "offset->leap_secs = (100)", "offset->leap_secs = (1000)", "offset->leap_secs = (1000000)", "offset->leap_secs = (12)", "offset->leap_secs = (128)", "offset->leap_secs = (2)", "offset->leap_secs = (3)", "offset->leap_secs = (32)", "offset->leap_secs = (3600)", "offset->leap_secs = (4)", "offset->leap_secs = (400)", "offset->leap_secs = (60)", "offset->leap_secs = (78)", "offset->leap_secs = (864)", "offset->leap_secs = (86400)", "offset->leap_secs = (9)", "offset->leap_secs = (96)", "offset->leap_secs = (97)", "offset->offset = ((t)->z - (t->dst * 60)) * -60", "offset->offset = ((t)->z) * -60", "offset->offset = (-60)", "offset->offset = (0)", "offset->offset = (1)", "offset->offset = (10)", "offset->offset = (100)", "offset->offset = (1000)", "offset->offset = (1000000)", "offset->offset = (12)", "offset->offset = (128)", "offset->offset = (2)", "offset->offset = (3)", "offset->offset = (32)", "offset->offset = (3600)", "offset->offset = (4)", "offset->offset = (400)", "offset->offset = (60)", "offset->offset = (78)", "offset->offset = (864)", "offset->offset = (86400)", "offset->offset = (9)", "offset->offset = (96)", "offset->offset = (97)", "offset->offset = (format_len)", "offset->offset = (i)", "offset->offset = (length)", "offset->offset = (localtime)", "offset->offset = (rfc_colon)", "offset->offset = (t->z - ((t)->dst * 60)) * -60", "php_date_global_timezone_db_enabled = (-60)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (10)", "php_date_global_timezone_db_enabled = (100)", "php_date_global_timezone_db_enabled = (1000)", "php_date_global_timezone_db_enabled = (1000000)", "php_date_global_timezone_db_enabled = (12)", "php_date_global_timezone_db_enabled = (128)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (32)", "php_date_global_timezone_db_enabled = (3600)", "php_date_global_timezone_db_enabled = (4)", "php_date_global_timezone_db_enabled = (400)", "php_date_global_timezone_db_enabled = (60)", "php_date_global_timezone_db_enabled = (78)", "php_date_global_timezone_db_enabled = (864)", "php_date_global_timezone_db_enabled = (86400)", "php_date_global_timezone_db_enabled = (9)", "php_date_global_timezone_db_enabled = (96)", "php_date_global_timezone_db_enabled = (97)", "php_date_global_timezone_db_enabled = (format_len)", "php_date_global_timezone_db_enabled = (i)", "php_date_global_timezone_db_enabled = (length)", "php_date_global_timezone_db_enabled = (localtime)", "php_date_global_timezone_db_enabled = (rfc_colon)", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain a start date.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an end date or a recurrence count.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an interval.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 3L), \"Timezone ID '%s' is invalid\", (format))", "rfc_colon = (-60)", "rfc_colon = (0)", "rfc_colon = (1)", "rfc_colon = (10)", "rfc_colon = (100)", "rfc_colon = (1000)", "rfc_colon = (1000000)", "rfc_colon = (12)", "rfc_colon = (128)", "rfc_colon = (2)", "rfc_colon = (3)", "rfc_colon = (32)", "rfc_colon = (3600)", "rfc_colon = (4)", "rfc_colon = (400)", "rfc_colon = (60)", "rfc_colon = (78)", "rfc_colon = (864)", "rfc_colon = (86400)", "rfc_colon = (9)", "rfc_colon = (96)", "rfc_colon = (97)", "rfc_colon = (format_len)", "rfc_colon = (i)", "rfc_colon = (length)", "rfc_colon = (localtime)", "rfc_colon = (rfc_colon)", "timelib_isoweek_from_date((t)->y, t->m, t->d, &isoweek, &isoyear)", "timelib_isoweek_from_date(t->y, (t)->m, t->d, &isoweek, &isoyear)", "timelib_isoweek_from_date(t->y, t->m, (t)->d, &isoweek, &isoyear)", "timelib_time_dtor((t))", "timelib_time_offset_dtor((offset))", "timelib_unixtime2gmt((t), (timelib_sll)time(((void *)0)))", "timelib_unixtime2local((t), (timelib_sll)time(((void *)0)))", "timelib_update_from_sse((t))", "timelib_update_ts((t), ((void *)0))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "ap_php_snprintf(offset->abbr, 9, \"GMT%c%02d%02d\", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0)", "buffer[1] = '\\x00'", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "exit(1)", "i++", "length = 1", "length = ap_php_slprintf(buffer, 32, \"%s\", \"UTC\")", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "offset = timelib_get_time_zone_info(t->sse, t->tz_info)", "offset = timelib_time_offset_ctor()", "offset->abbr = malloc(9)", "offset->abbr = strdup(t->tz_abbr)", "offset->is_dst = 0", "offset->is_dst = t->dst", "offset->leap_secs = 0", "offset->offset = (t->z - (t->dst * 60)) * -60", "offset->offset = (t->z) * -60", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "rfc_colon = 0", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_isoweek_from_date(t->y, t->m, t->d, &isoweek, &isoyear)", "timelib_time_offset_dtor(offset)", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L1054\", 30, &(t), sizeof (t), &(length), sizeof (length), &(t->y), sizeof (t->y), &(t->m), sizeof (t->m), &(t->d), sizeof (t->d), &(isoweek), sizeof (isoweek), &(isoyear), sizeof (isoyear), &(format), sizeof (format), &(i), sizeof (i), &(rfc_colon), sizeof (rfc_colon), &(format_len), sizeof (format_len), &(offset), sizeof (offset), &(t->tz_info), sizeof (t->tz_info), &(t->sse), sizeof (t->sse), &(localtime), sizeof (localtime), &(t->h), sizeof (t->h), &(t->z), sizeof (t->z), &(t->zone_type), sizeof (t->zone_type), &(t->tz_abbr), sizeof (t->tz_abbr), &(t->dst), sizeof (t->dst), &(t->i), sizeof (t->i), &(t->s), sizeof (t->s), &(t->have_time), sizeof (t->have_time), &(t->have_date), sizeof (t->have_date), &(t->have_zone), sizeof (t->have_zone), &(t->have_relative), sizeof (t->have_relative), &(t->have_weeknr_day), sizeof (t->have_weeknr_day), &(t->sse_uptodate), sizeof (t->sse_uptodate), &(t->tim_uptodate), sizeof (t->tim_uptodate), &(t->is_localtime), sizeof (t->is_localtime)))\n    break;\n", "if (__is_neg(\"\", \"L1054\", 30, &(t), sizeof (t), &(length), sizeof (length), &(t->y), sizeof (t->y), &(t->m), sizeof (t->m), &(t->d), sizeof (t->d), &(isoweek), sizeof (isoweek), &(isoyear), sizeof (isoyear), &(format), sizeof (format), &(i), sizeof (i), &(rfc_colon), sizeof (rfc_colon), &(format_len), sizeof (format_len), &(offset), sizeof (offset), &(t->tz_info), sizeof (t->tz_info), &(t->sse), sizeof (t->sse), &(localtime), sizeof (localtime), &(t->h), sizeof (t->h), &(t->z), sizeof (t->z), &(t->zone_type), sizeof (t->zone_type), &(t->tz_abbr), sizeof (t->tz_abbr), &(t->dst), sizeof (t->dst), &(t->i), sizeof (t->i), &(t->s), sizeof (t->s), &(t->have_time), sizeof (t->have_time), &(t->have_date), sizeof (t->have_date), &(t->have_zone), sizeof (t->have_zone), &(t->have_relative), sizeof (t->have_relative), &(t->have_weeknr_day), sizeof (t->have_weeknr_day), &(t->sse_uptodate), sizeof (t->sse_uptodate), &(t->tim_uptodate), sizeof (t->tim_uptodate), &(t->is_localtime), sizeof (t->is_localtime)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	2,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	3,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	4,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	5,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	6,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	7,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	8,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	9,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	10,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	11,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	12,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	13,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	14,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	15,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	16,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	17,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	18,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	19,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	20,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	21,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	22,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	23,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	24,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	25,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	26,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	27,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	28,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	29,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	30,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	31,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	32,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	33,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	34,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	35,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	36,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	37,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	38,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	39,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	40,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	41,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	42,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	43,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	44,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	45,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	46,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	47,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	48,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	49,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	50,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	51,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	52,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	53,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	54,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	55,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	56,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	57,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	58,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	59,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	60,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	61,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	62,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	63,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	64,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	65,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	66,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	67,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	68,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	69,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	70,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	71,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	72,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	73,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	74,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	75,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	76,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	77,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	78,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	79,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	80,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	81,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	82,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	83,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	84,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	85,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	86,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	87,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	88,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	89,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	90,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	91,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	92,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	93,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	94,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	95,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	96,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	97,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	98,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	99,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	100,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	101,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	102,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	103,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	104,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	105,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	106,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	107,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	108,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	109,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	110,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	111,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	112,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	113,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	114,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	115,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	116,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	117,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	118,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	119,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	120,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	121,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	122,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	123,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	124,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	125,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	126,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	127,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	128,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	129,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	130,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	131,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	132,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	133,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	134,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	135,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	136,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	137,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	138,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	139,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	140,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	141,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	142,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	143,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	144,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	145,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	146,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	147,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	148,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	149,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	150,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	151,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	152,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	153,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	154,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	155,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	156,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	157,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	158,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	159,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	160,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	161,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	162,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	163,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	164,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	165,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	166,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	167,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	168,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	169,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	170,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	171,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	172,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	173,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	174,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	175,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	176,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	177,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	178,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	179,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	180,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	181,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	182,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	183,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	184,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	185,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	186,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	187,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	188,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	189,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	190,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	191,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	192,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	193,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	194,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	195,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	196,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	197,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	198,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	199,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	200,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	201,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	202,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	203,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	204,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	205,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	206,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	207,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	208,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	209,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	210,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	211,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	212,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	213,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	214,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	215,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	216,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	217,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	218,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	219,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	220,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	221,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	222,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	223,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	224,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	225,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	226,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	227,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	228,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	229,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	230,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	231,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	232,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	233,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	234,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	235,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	236,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	237,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	238,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	239,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	240,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	241,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	242,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	243,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	244,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	245,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	246,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	247,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	248,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	249,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	250,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	251,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	252,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	253,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	254,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	255,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	256,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	257,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	258,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	259,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	260,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	261,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	262,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	263,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	264,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	265,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	266,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	267,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	268,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	269,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	270,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	271,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	272,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	273,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	274,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	275,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	276,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	277,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	278,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	279,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	280,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	281,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	282,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	283,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	284,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	285,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	286,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	287,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	288,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	289,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	290,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	291,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	292,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	293,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	294,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	295,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	296,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	297,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	298,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	299,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	300,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	301,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	302,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	303,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	304,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	305,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	306,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	307,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	308,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	309,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	310,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	311,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	312,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	313,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	314,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	315,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	316,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	317,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	318,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	319,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	320,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	321,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	322,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	323,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	324,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	325,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	326,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	327,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	328,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	329,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	330,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	331,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	332,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	333,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	334,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	335,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	336,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	337,
									"scores":	[-6.1152736514456656, -2.8799632697456659, -4.1241655137456652, -4.1241655137456652, -4.1241655137456652, -6.0757565087456653, -6.0757565087456653, -6.3237460257456659, -6.0757565087456653, -6.0757565087456653, -5.611921908745666, -6.3217954225456658, -7.1359415965456652, -6.8899026827456655, -6.1128569087456661, -6.8899026827456655, -6.8899026827456655, -6.8899026827456655, -7.1007917997456662, -6.8899026827456655, -6.8899026827456655, -6.8899026827456655, -6.8899026827456655, -6.8899026827456655, -6.8899026827456655, -6.8899026827456655, -6.8899026827456655, -6.8899026827456655, -6.8899026827456655, -6.8899026827456655]
								}, {
									"case":	338,
									"scores":	[-6.2594946514456655, -3.0241842697456658, -4.268386513745666, -4.268386513745666, -4.268386513745666, -6.2199775087456652, -6.2199775087456652, -6.4679670257456658, -6.2199775087456652, -6.2199775087456652, -5.7561429087456659, -6.4660164225456658, -7.2801625965456651, -7.0341236827456655, -6.2570779087456661, -7.0341236827456655, -7.0341236827456655, -7.0341236827456655, -7.2450127997456661, -7.0341236827456655, -7.0341236827456655, -7.0341236827456655, -7.0341236827456655, -7.0341236827456655, -7.0341236827456655, -7.0341236827456655, -7.0341236827456655, -7.0341236827456655, -7.0341236827456655, -7.0341236827456655]
								}]
						}]
				}, {
					"line":	1057,
					"switches":	[{
							"switch":	1,
							"types":	[[], [], [], [], [336, 337], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [], [], [], [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], [], [], [], [], [], []],
							"begin_line":	1058,
							"begin_column":	2,
							"end_line":	1058,
							"end_column":	2,
							"patch_codes":	["memset(&offset->abbr, 0, sizeof (*(&offset->abbr)))", "memset(&offset->is_dst, 0, sizeof (*(&offset->is_dst)))", "memset(&offset->leap_secs, 0, sizeof (*(&offset->leap_secs)))", "memset(&offset->offset, 0, sizeof (*(&offset->offset)))", "memset(&offset->transistion_time, 0, sizeof (*(&offset->transistion_time)))", "memset(&string.a, 0, sizeof (*(&string.a)))", "memset(&string.c, 0, sizeof (*(&string.c)))", "memset(&string.len, 0, sizeof (*(&string.len)))", "memset(&t->d, 0, sizeof (*(&t->d)))", "memset(&t->dst, 0, sizeof (*(&t->dst)))", "memset(&t->f, 0, sizeof (*(&t->f)))", "memset(&t->h, 0, sizeof (*(&t->h)))", "memset(&t->have_date, 0, sizeof (*(&t->have_date)))", "memset(&t->have_relative, 0, sizeof (*(&t->have_relative)))", "memset(&t->have_time, 0, sizeof (*(&t->have_time)))", "memset(&t->have_weeknr_day, 0, sizeof (*(&t->have_weeknr_day)))", "memset(&t->have_zone, 0, sizeof (*(&t->have_zone)))", "memset(&t->i, 0, sizeof (*(&t->i)))", "memset(&t->is_localtime, 0, sizeof (*(&t->is_localtime)))", "memset(&t->m, 0, sizeof (*(&t->m)))", "memset(&t->relative, 0, sizeof (*(&t->relative)))", "memset(&t->s, 0, sizeof (*(&t->s)))", "memset(&t->sse, 0, sizeof (*(&t->sse)))", "memset(&t->sse_uptodate, 0, sizeof (*(&t->sse_uptodate)))", "memset(&t->tim_uptodate, 0, sizeof (*(&t->tim_uptodate)))", "memset(&t->tz_abbr, 0, sizeof (*(&t->tz_abbr)))", "memset(&t->tz_info, 0, sizeof (*(&t->tz_info)))", "memset(&t->y, 0, sizeof (*(&t->y)))", "memset(&t->z, 0, sizeof (*(&t->z)))", "memset(&t->zone_type, 0, sizeof (*(&t->zone_type)))", "memset(offset->abbr, 0, sizeof (*(offset->abbr)))", "memset(string.c, 0, sizeof (*(string.c)))", "memset(t->tz_abbr, 0, sizeof (*(t->tz_abbr)))", "memset(t->tz_info, 0, sizeof (*(t->tz_info)))", "(date_globals.timezone) = (format)", "(format)++", "_efree(((format)))", "ap_php_snprintf((offset)->abbr, 9, \"GMT%c%02d%02d\", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0)", "ap_php_snprintf(offset->abbr, 9, \"GMT%c%02d%02d\", localtime ? (((offset)->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0)", "ap_php_snprintf(offset->abbr, 9, \"GMT%c%02d%02d\", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs((offset)->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0)", "ap_php_snprintf(offset->abbr, 9, \"GMT%c%02d%02d\", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs(((offset)->offset % 3600) / 60) : 0)", "buffer[1] = (-60)", "buffer[1] = (0)", "buffer[1] = (1)", "buffer[1] = (10)", "buffer[1] = (100)", "buffer[1] = (1000)", "buffer[1] = (1000000)", "buffer[1] = (12)", "buffer[1] = (128)", "buffer[1] = (2)", "buffer[1] = (3)", "buffer[1] = (32)", "buffer[1] = (3600)", "buffer[1] = (4)", "buffer[1] = (400)", "buffer[1] = (60)", "buffer[1] = (78)", "buffer[1] = (864)", "buffer[1] = (86400)", "buffer[1] = (9)", "buffer[1] = (96)", "buffer[1] = (97)", "length = (-60)", "length = (0)", "length = (1)", "length = (10)", "length = (100)", "length = (1000)", "length = (1000000)", "length = (12)", "length = (128)", "length = (2)", "length = (3)", "length = (32)", "length = (3600)", "length = (4)", "length = (400)", "length = (60)", "length = (78)", "length = (864)", "length = (86400)", "length = (9)", "length = (96)", "length = (97)", "length = (format_len)", "length = (i)", "length = (length)", "length = (localtime)", "length = (rfc_colon)", "offset = (offset)", "offset = timelib_get_time_zone_info((t)->sse, t->tz_info)", "offset = timelib_get_time_zone_info(t->sse, (t)->tz_info)", "offset->abbr = (format)", "offset->abbr = strdup((t)->tz_abbr)", "offset->is_dst = (-60)", "offset->is_dst = (0)", "offset->is_dst = (1)", "offset->is_dst = (10)", "offset->is_dst = (100)", "offset->is_dst = (1000)", "offset->is_dst = (1000000)", "offset->is_dst = (12)", "offset->is_dst = (128)", "offset->is_dst = (2)", "offset->is_dst = (3)", "offset->is_dst = (32)", "offset->is_dst = (3600)", "offset->is_dst = (4)", "offset->is_dst = (400)", "offset->is_dst = (60)", "offset->is_dst = (78)", "offset->is_dst = (864)", "offset->is_dst = (86400)", "offset->is_dst = (9)", "offset->is_dst = (96)", "offset->is_dst = (97)", "offset->is_dst = (t)->dst", "offset->leap_secs = (-60)", "offset->leap_secs = (0)", "offset->leap_secs = (1)", "offset->leap_secs = (10)", "offset->leap_secs = (100)", "offset->leap_secs = (1000)", "offset->leap_secs = (1000000)", "offset->leap_secs = (12)", "offset->leap_secs = (128)", "offset->leap_secs = (2)", "offset->leap_secs = (3)", "offset->leap_secs = (32)", "offset->leap_secs = (3600)", "offset->leap_secs = (4)", "offset->leap_secs = (400)", "offset->leap_secs = (60)", "offset->leap_secs = (78)", "offset->leap_secs = (864)", "offset->leap_secs = (86400)", "offset->leap_secs = (9)", "offset->leap_secs = (96)", "offset->leap_secs = (97)", "offset->offset = ((t)->z - (t->dst * 60)) * -60", "offset->offset = ((t)->z) * -60", "offset->offset = (-60)", "offset->offset = (0)", "offset->offset = (1)", "offset->offset = (10)", "offset->offset = (100)", "offset->offset = (1000)", "offset->offset = (1000000)", "offset->offset = (12)", "offset->offset = (128)", "offset->offset = (2)", "offset->offset = (3)", "offset->offset = (32)", "offset->offset = (3600)", "offset->offset = (4)", "offset->offset = (400)", "offset->offset = (60)", "offset->offset = (78)", "offset->offset = (864)", "offset->offset = (86400)", "offset->offset = (9)", "offset->offset = (96)", "offset->offset = (97)", "offset->offset = (format_len)", "offset->offset = (i)", "offset->offset = (length)", "offset->offset = (localtime)", "offset->offset = (rfc_colon)", "offset->offset = (t->z - ((t)->dst * 60)) * -60", "php_date_global_timezone_db_enabled = (-60)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (10)", "php_date_global_timezone_db_enabled = (100)", "php_date_global_timezone_db_enabled = (1000)", "php_date_global_timezone_db_enabled = (1000000)", "php_date_global_timezone_db_enabled = (12)", "php_date_global_timezone_db_enabled = (128)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (32)", "php_date_global_timezone_db_enabled = (3600)", "php_date_global_timezone_db_enabled = (4)", "php_date_global_timezone_db_enabled = (400)", "php_date_global_timezone_db_enabled = (60)", "php_date_global_timezone_db_enabled = (78)", "php_date_global_timezone_db_enabled = (864)", "php_date_global_timezone_db_enabled = (86400)", "php_date_global_timezone_db_enabled = (9)", "php_date_global_timezone_db_enabled = (96)", "php_date_global_timezone_db_enabled = (97)", "php_date_global_timezone_db_enabled = (format_len)", "php_date_global_timezone_db_enabled = (i)", "php_date_global_timezone_db_enabled = (length)", "php_date_global_timezone_db_enabled = (localtime)", "php_date_global_timezone_db_enabled = (rfc_colon)", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain a start date.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an end date or a recurrence count.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an interval.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 3L), \"Timezone ID '%s' is invalid\", (format))", "rfc_colon = (-60)", "rfc_colon = (0)", "rfc_colon = (1)", "rfc_colon = (10)", "rfc_colon = (100)", "rfc_colon = (1000)", "rfc_colon = (1000000)", "rfc_colon = (12)", "rfc_colon = (128)", "rfc_colon = (2)", "rfc_colon = (3)", "rfc_colon = (32)", "rfc_colon = (3600)", "rfc_colon = (4)", "rfc_colon = (400)", "rfc_colon = (60)", "rfc_colon = (78)", "rfc_colon = (864)", "rfc_colon = (86400)", "rfc_colon = (9)", "rfc_colon = (96)", "rfc_colon = (97)", "rfc_colon = (format_len)", "rfc_colon = (i)", "rfc_colon = (length)", "rfc_colon = (localtime)", "rfc_colon = (rfc_colon)", "timelib_isoweek_from_date((t)->y, t->m, t->d, &isoweek, &isoyear)", "timelib_isoweek_from_date(t->y, (t)->m, t->d, &isoweek, &isoyear)", "timelib_isoweek_from_date(t->y, t->m, (t)->d, &isoweek, &isoyear)", "timelib_time_dtor((t))", "timelib_time_offset_dtor((offset))", "timelib_unixtime2gmt((t), (timelib_sll)time(((void *)0)))", "timelib_unixtime2local((t), (timelib_sll)time(((void *)0)))", "timelib_update_from_sse((t))", "timelib_update_ts((t), ((void *)0))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "ap_php_snprintf(offset->abbr, 9, \"GMT%c%02d%02d\", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0)", "buffer[1] = '\\x00'", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "exit(1)", "i++", "length = 1", "length = ap_php_slprintf(buffer, 32, \"%s\", \"UTC\")", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "offset = timelib_get_time_zone_info(t->sse, t->tz_info)", "offset = timelib_time_offset_ctor()", "offset->abbr = malloc(9)", "offset->abbr = strdup(t->tz_abbr)", "offset->is_dst = 0", "offset->is_dst = t->dst", "offset->leap_secs = 0", "offset->offset = (t->z - (t->dst * 60)) * -60", "offset->offset = (t->z) * -60", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "rfc_colon = 0", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_isoweek_from_date(t->y, t->m, t->d, &isoweek, &isoyear)", "timelib_time_offset_dtor(offset)", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L1058\", 10, &(length), sizeof (length), &(isoweek), sizeof (isoweek), &(isoyear), sizeof (isoyear), &(t), sizeof (t), &(format), sizeof (format), &(i), sizeof (i), &(rfc_colon), sizeof (rfc_colon), &(format_len), sizeof (format_len), &(offset), sizeof (offset), &(localtime), sizeof (localtime)))\n    break;\n", "if (__is_neg(\"\", \"L1058\", 10, &(length), sizeof (length), &(isoweek), sizeof (isoweek), &(isoyear), sizeof (isoyear), &(t), sizeof (t), &(format), sizeof (format), &(i), sizeof (i), &(rfc_colon), sizeof (rfc_colon), &(format_len), sizeof (format_len), &(offset), sizeof (offset), &(localtime), sizeof (localtime)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.013036542015743]
								}, {
									"case":	2,
									"scores":	[-4.013036542015743]
								}, {
									"case":	3,
									"scores":	[-4.013036542015743]
								}, {
									"case":	4,
									"scores":	[-4.013036542015743]
								}, {
									"case":	5,
									"scores":	[-4.013036542015743]
								}, {
									"case":	6,
									"scores":	[-4.013036542015743]
								}, {
									"case":	7,
									"scores":	[-4.013036542015743]
								}, {
									"case":	8,
									"scores":	[-4.013036542015743]
								}, {
									"case":	9,
									"scores":	[-4.013036542015743]
								}, {
									"case":	10,
									"scores":	[-4.013036542015743]
								}, {
									"case":	11,
									"scores":	[-4.013036542015743]
								}, {
									"case":	12,
									"scores":	[-4.013036542015743]
								}, {
									"case":	13,
									"scores":	[-4.013036542015743]
								}, {
									"case":	14,
									"scores":	[-4.013036542015743]
								}, {
									"case":	15,
									"scores":	[-4.013036542015743]
								}, {
									"case":	16,
									"scores":	[-4.013036542015743]
								}, {
									"case":	17,
									"scores":	[-4.013036542015743]
								}, {
									"case":	18,
									"scores":	[-4.013036542015743]
								}, {
									"case":	19,
									"scores":	[-4.013036542015743]
								}, {
									"case":	20,
									"scores":	[-4.013036542015743]
								}, {
									"case":	21,
									"scores":	[-4.013036542015743]
								}, {
									"case":	22,
									"scores":	[-4.013036542015743]
								}, {
									"case":	23,
									"scores":	[-4.013036542015743]
								}, {
									"case":	24,
									"scores":	[-4.013036542015743]
								}, {
									"case":	25,
									"scores":	[-4.013036542015743]
								}, {
									"case":	26,
									"scores":	[-4.013036542015743]
								}, {
									"case":	27,
									"scores":	[-4.013036542015743]
								}, {
									"case":	28,
									"scores":	[-4.013036542015743]
								}, {
									"case":	29,
									"scores":	[-4.013036542015743]
								}, {
									"case":	30,
									"scores":	[-4.013036542015743]
								}, {
									"case":	31,
									"scores":	[-4.013036542015743]
								}, {
									"case":	32,
									"scores":	[-4.013036542015743]
								}, {
									"case":	33,
									"scores":	[-4.013036542015743]
								}, {
									"case":	34,
									"scores":	[-4.013036542015743]
								}, {
									"case":	35,
									"scores":	[-4.013036542015743]
								}, {
									"case":	36,
									"scores":	[-4.013036542015743]
								}, {
									"case":	37,
									"scores":	[-4.013036542015743]
								}, {
									"case":	38,
									"scores":	[-4.013036542015743]
								}, {
									"case":	39,
									"scores":	[-4.013036542015743]
								}, {
									"case":	40,
									"scores":	[-4.013036542015743]
								}, {
									"case":	41,
									"scores":	[-4.013036542015743]
								}, {
									"case":	42,
									"scores":	[-4.013036542015743]
								}, {
									"case":	43,
									"scores":	[-4.013036542015743]
								}, {
									"case":	44,
									"scores":	[-4.013036542015743]
								}, {
									"case":	45,
									"scores":	[-4.013036542015743]
								}, {
									"case":	46,
									"scores":	[-4.013036542015743]
								}, {
									"case":	47,
									"scores":	[-4.013036542015743]
								}, {
									"case":	48,
									"scores":	[-4.013036542015743]
								}, {
									"case":	49,
									"scores":	[-4.013036542015743]
								}, {
									"case":	50,
									"scores":	[-4.013036542015743]
								}, {
									"case":	51,
									"scores":	[-4.013036542015743]
								}, {
									"case":	52,
									"scores":	[-4.013036542015743]
								}, {
									"case":	53,
									"scores":	[-4.013036542015743]
								}, {
									"case":	54,
									"scores":	[-4.013036542015743]
								}, {
									"case":	55,
									"scores":	[-4.013036542015743]
								}, {
									"case":	56,
									"scores":	[-4.013036542015743]
								}, {
									"case":	57,
									"scores":	[-4.013036542015743]
								}, {
									"case":	58,
									"scores":	[-4.013036542015743]
								}, {
									"case":	59,
									"scores":	[-4.013036542015743]
								}, {
									"case":	60,
									"scores":	[-4.013036542015743]
								}, {
									"case":	61,
									"scores":	[-4.013036542015743]
								}, {
									"case":	62,
									"scores":	[-4.013036542015743]
								}, {
									"case":	63,
									"scores":	[-4.013036542015743]
								}, {
									"case":	64,
									"scores":	[-4.013036542015743]
								}, {
									"case":	65,
									"scores":	[-4.013036542015743]
								}, {
									"case":	66,
									"scores":	[-4.013036542015743]
								}, {
									"case":	67,
									"scores":	[-4.013036542015743]
								}, {
									"case":	68,
									"scores":	[-4.013036542015743]
								}, {
									"case":	69,
									"scores":	[-4.013036542015743]
								}, {
									"case":	70,
									"scores":	[-4.013036542015743]
								}, {
									"case":	71,
									"scores":	[-4.013036542015743]
								}, {
									"case":	72,
									"scores":	[-4.013036542015743]
								}, {
									"case":	73,
									"scores":	[-4.013036542015743]
								}, {
									"case":	74,
									"scores":	[-4.013036542015743]
								}, {
									"case":	75,
									"scores":	[-4.013036542015743]
								}, {
									"case":	76,
									"scores":	[-4.013036542015743]
								}, {
									"case":	77,
									"scores":	[-4.013036542015743]
								}, {
									"case":	78,
									"scores":	[-4.013036542015743]
								}, {
									"case":	79,
									"scores":	[-4.013036542015743]
								}, {
									"case":	80,
									"scores":	[-4.013036542015743]
								}, {
									"case":	81,
									"scores":	[-4.013036542015743]
								}, {
									"case":	82,
									"scores":	[-4.013036542015743]
								}, {
									"case":	83,
									"scores":	[-4.013036542015743]
								}, {
									"case":	84,
									"scores":	[-4.013036542015743]
								}, {
									"case":	85,
									"scores":	[-4.013036542015743]
								}, {
									"case":	86,
									"scores":	[-4.013036542015743]
								}, {
									"case":	87,
									"scores":	[-4.013036542015743]
								}, {
									"case":	88,
									"scores":	[-4.013036542015743]
								}, {
									"case":	89,
									"scores":	[-4.013036542015743]
								}, {
									"case":	90,
									"scores":	[-4.013036542015743]
								}, {
									"case":	91,
									"scores":	[-4.013036542015743]
								}, {
									"case":	92,
									"scores":	[-4.013036542015743]
								}, {
									"case":	93,
									"scores":	[-4.013036542015743]
								}, {
									"case":	94,
									"scores":	[-4.013036542015743]
								}, {
									"case":	95,
									"scores":	[-4.013036542015743]
								}, {
									"case":	96,
									"scores":	[-4.013036542015743]
								}, {
									"case":	97,
									"scores":	[-4.013036542015743]
								}, {
									"case":	98,
									"scores":	[-4.013036542015743]
								}, {
									"case":	99,
									"scores":	[-4.013036542015743]
								}, {
									"case":	100,
									"scores":	[-4.013036542015743]
								}, {
									"case":	101,
									"scores":	[-4.013036542015743]
								}, {
									"case":	102,
									"scores":	[-4.013036542015743]
								}, {
									"case":	103,
									"scores":	[-4.013036542015743]
								}, {
									"case":	104,
									"scores":	[-4.013036542015743]
								}, {
									"case":	105,
									"scores":	[-4.013036542015743]
								}, {
									"case":	106,
									"scores":	[-4.013036542015743]
								}, {
									"case":	107,
									"scores":	[-4.013036542015743]
								}, {
									"case":	108,
									"scores":	[-4.013036542015743]
								}, {
									"case":	109,
									"scores":	[-4.013036542015743]
								}, {
									"case":	110,
									"scores":	[-4.013036542015743]
								}, {
									"case":	111,
									"scores":	[-4.013036542015743]
								}, {
									"case":	112,
									"scores":	[-4.013036542015743]
								}, {
									"case":	113,
									"scores":	[-4.013036542015743]
								}, {
									"case":	114,
									"scores":	[-4.013036542015743]
								}, {
									"case":	115,
									"scores":	[-4.013036542015743]
								}, {
									"case":	116,
									"scores":	[-4.013036542015743]
								}, {
									"case":	117,
									"scores":	[-4.013036542015743]
								}, {
									"case":	118,
									"scores":	[-4.013036542015743]
								}, {
									"case":	119,
									"scores":	[-4.013036542015743]
								}, {
									"case":	120,
									"scores":	[-4.013036542015743]
								}, {
									"case":	121,
									"scores":	[-4.013036542015743]
								}, {
									"case":	122,
									"scores":	[-4.013036542015743]
								}, {
									"case":	123,
									"scores":	[-4.013036542015743]
								}, {
									"case":	124,
									"scores":	[-4.013036542015743]
								}, {
									"case":	125,
									"scores":	[-4.013036542015743]
								}, {
									"case":	126,
									"scores":	[-4.013036542015743]
								}, {
									"case":	127,
									"scores":	[-4.013036542015743]
								}, {
									"case":	128,
									"scores":	[-4.013036542015743]
								}, {
									"case":	129,
									"scores":	[-4.013036542015743]
								}, {
									"case":	130,
									"scores":	[-4.013036542015743]
								}, {
									"case":	131,
									"scores":	[-4.013036542015743]
								}, {
									"case":	132,
									"scores":	[-4.013036542015743]
								}, {
									"case":	133,
									"scores":	[-4.013036542015743]
								}, {
									"case":	134,
									"scores":	[-4.013036542015743]
								}, {
									"case":	135,
									"scores":	[-4.013036542015743]
								}, {
									"case":	136,
									"scores":	[-4.013036542015743]
								}, {
									"case":	137,
									"scores":	[-4.013036542015743]
								}, {
									"case":	138,
									"scores":	[-4.013036542015743]
								}, {
									"case":	139,
									"scores":	[-4.013036542015743]
								}, {
									"case":	140,
									"scores":	[-4.013036542015743]
								}, {
									"case":	141,
									"scores":	[-4.013036542015743]
								}, {
									"case":	142,
									"scores":	[-4.013036542015743]
								}, {
									"case":	143,
									"scores":	[-4.013036542015743]
								}, {
									"case":	144,
									"scores":	[-4.013036542015743]
								}, {
									"case":	145,
									"scores":	[-4.013036542015743]
								}, {
									"case":	146,
									"scores":	[-4.013036542015743]
								}, {
									"case":	147,
									"scores":	[-4.013036542015743]
								}, {
									"case":	148,
									"scores":	[-4.013036542015743]
								}, {
									"case":	149,
									"scores":	[-4.013036542015743]
								}, {
									"case":	150,
									"scores":	[-4.013036542015743]
								}, {
									"case":	151,
									"scores":	[-4.013036542015743]
								}, {
									"case":	152,
									"scores":	[-4.013036542015743]
								}, {
									"case":	153,
									"scores":	[-4.013036542015743]
								}, {
									"case":	154,
									"scores":	[-4.013036542015743]
								}, {
									"case":	155,
									"scores":	[-4.013036542015743]
								}, {
									"case":	156,
									"scores":	[-4.013036542015743]
								}, {
									"case":	157,
									"scores":	[-4.013036542015743]
								}, {
									"case":	158,
									"scores":	[-4.013036542015743]
								}, {
									"case":	159,
									"scores":	[-4.013036542015743]
								}, {
									"case":	160,
									"scores":	[-4.013036542015743]
								}, {
									"case":	161,
									"scores":	[-4.013036542015743]
								}, {
									"case":	162,
									"scores":	[-4.013036542015743]
								}, {
									"case":	163,
									"scores":	[-4.013036542015743]
								}, {
									"case":	164,
									"scores":	[-4.013036542015743]
								}, {
									"case":	165,
									"scores":	[-4.013036542015743]
								}, {
									"case":	166,
									"scores":	[-4.013036542015743]
								}, {
									"case":	167,
									"scores":	[-4.013036542015743]
								}, {
									"case":	168,
									"scores":	[-4.013036542015743]
								}, {
									"case":	169,
									"scores":	[-4.013036542015743]
								}, {
									"case":	170,
									"scores":	[-4.013036542015743]
								}, {
									"case":	171,
									"scores":	[-4.013036542015743]
								}, {
									"case":	172,
									"scores":	[-4.013036542015743]
								}, {
									"case":	173,
									"scores":	[-4.013036542015743]
								}, {
									"case":	174,
									"scores":	[-4.013036542015743]
								}, {
									"case":	175,
									"scores":	[-4.013036542015743]
								}, {
									"case":	176,
									"scores":	[-4.013036542015743]
								}, {
									"case":	177,
									"scores":	[-4.013036542015743]
								}, {
									"case":	178,
									"scores":	[-4.013036542015743]
								}, {
									"case":	179,
									"scores":	[-4.013036542015743]
								}, {
									"case":	180,
									"scores":	[-4.013036542015743]
								}, {
									"case":	181,
									"scores":	[-4.013036542015743]
								}, {
									"case":	182,
									"scores":	[-4.013036542015743]
								}, {
									"case":	183,
									"scores":	[-4.013036542015743]
								}, {
									"case":	184,
									"scores":	[-4.013036542015743]
								}, {
									"case":	185,
									"scores":	[-4.013036542015743]
								}, {
									"case":	186,
									"scores":	[-4.013036542015743]
								}, {
									"case":	187,
									"scores":	[-4.013036542015743]
								}, {
									"case":	188,
									"scores":	[-4.013036542015743]
								}, {
									"case":	189,
									"scores":	[-4.013036542015743]
								}, {
									"case":	190,
									"scores":	[-4.013036542015743]
								}, {
									"case":	191,
									"scores":	[-4.013036542015743]
								}, {
									"case":	192,
									"scores":	[-4.013036542015743]
								}, {
									"case":	193,
									"scores":	[-4.013036542015743]
								}, {
									"case":	194,
									"scores":	[-4.013036542015743]
								}, {
									"case":	195,
									"scores":	[-4.013036542015743]
								}, {
									"case":	196,
									"scores":	[-4.013036542015743]
								}, {
									"case":	197,
									"scores":	[-4.013036542015743]
								}, {
									"case":	198,
									"scores":	[-4.013036542015743]
								}, {
									"case":	199,
									"scores":	[-4.013036542015743]
								}, {
									"case":	200,
									"scores":	[-4.013036542015743]
								}, {
									"case":	201,
									"scores":	[-4.013036542015743]
								}, {
									"case":	202,
									"scores":	[-4.013036542015743]
								}, {
									"case":	203,
									"scores":	[-4.013036542015743]
								}, {
									"case":	204,
									"scores":	[-4.013036542015743]
								}, {
									"case":	205,
									"scores":	[-4.013036542015743]
								}, {
									"case":	206,
									"scores":	[-4.013036542015743]
								}, {
									"case":	207,
									"scores":	[-4.013036542015743]
								}, {
									"case":	208,
									"scores":	[-4.013036542015743]
								}, {
									"case":	209,
									"scores":	[-4.013036542015743]
								}, {
									"case":	210,
									"scores":	[-4.013036542015743]
								}, {
									"case":	211,
									"scores":	[-4.013036542015743]
								}, {
									"case":	212,
									"scores":	[-4.013036542015743]
								}, {
									"case":	213,
									"scores":	[-4.013036542015743]
								}, {
									"case":	214,
									"scores":	[-4.013036542015743]
								}, {
									"case":	215,
									"scores":	[-4.013036542015743]
								}, {
									"case":	216,
									"scores":	[-4.013036542015743]
								}, {
									"case":	217,
									"scores":	[-4.013036542015743]
								}, {
									"case":	218,
									"scores":	[-4.013036542015743]
								}, {
									"case":	219,
									"scores":	[-4.013036542015743]
								}, {
									"case":	220,
									"scores":	[-4.013036542015743]
								}, {
									"case":	221,
									"scores":	[-4.013036542015743]
								}, {
									"case":	222,
									"scores":	[-4.013036542015743]
								}, {
									"case":	223,
									"scores":	[-4.013036542015743]
								}, {
									"case":	224,
									"scores":	[-4.013036542015743]
								}, {
									"case":	225,
									"scores":	[-4.013036542015743]
								}, {
									"case":	226,
									"scores":	[-4.013036542015743]
								}, {
									"case":	227,
									"scores":	[-4.013036542015743]
								}, {
									"case":	228,
									"scores":	[-4.013036542015743]
								}, {
									"case":	229,
									"scores":	[-4.013036542015743]
								}, {
									"case":	230,
									"scores":	[-4.013036542015743]
								}, {
									"case":	231,
									"scores":	[-4.013036542015743]
								}, {
									"case":	232,
									"scores":	[-4.013036542015743]
								}, {
									"case":	233,
									"scores":	[-4.013036542015743]
								}, {
									"case":	234,
									"scores":	[-4.013036542015743]
								}, {
									"case":	235,
									"scores":	[-4.013036542015743]
								}, {
									"case":	236,
									"scores":	[-4.013036542015743]
								}, {
									"case":	237,
									"scores":	[-4.013036542015743]
								}, {
									"case":	238,
									"scores":	[-4.013036542015743]
								}, {
									"case":	239,
									"scores":	[-4.013036542015743]
								}, {
									"case":	240,
									"scores":	[-4.013036542015743]
								}, {
									"case":	241,
									"scores":	[-4.013036542015743]
								}, {
									"case":	242,
									"scores":	[-4.013036542015743]
								}, {
									"case":	243,
									"scores":	[-4.013036542015743]
								}, {
									"case":	244,
									"scores":	[-4.013036542015743]
								}, {
									"case":	245,
									"scores":	[-4.013036542015743]
								}, {
									"case":	246,
									"scores":	[-4.013036542015743]
								}, {
									"case":	247,
									"scores":	[-4.013036542015743]
								}, {
									"case":	248,
									"scores":	[-4.013036542015743]
								}, {
									"case":	249,
									"scores":	[-4.013036542015743]
								}, {
									"case":	250,
									"scores":	[-4.013036542015743]
								}, {
									"case":	251,
									"scores":	[-4.013036542015743]
								}, {
									"case":	252,
									"scores":	[-4.013036542015743]
								}, {
									"case":	253,
									"scores":	[-4.013036542015743]
								}, {
									"case":	254,
									"scores":	[-4.013036542015743]
								}, {
									"case":	255,
									"scores":	[-4.013036542015743]
								}, {
									"case":	256,
									"scores":	[-4.013036542015743]
								}, {
									"case":	257,
									"scores":	[-4.013036542015743]
								}, {
									"case":	258,
									"scores":	[-4.013036542015743]
								}, {
									"case":	259,
									"scores":	[-4.013036542015743]
								}, {
									"case":	260,
									"scores":	[-4.013036542015743]
								}, {
									"case":	261,
									"scores":	[-4.013036542015743]
								}, {
									"case":	262,
									"scores":	[-4.013036542015743]
								}, {
									"case":	263,
									"scores":	[-4.013036542015743]
								}, {
									"case":	264,
									"scores":	[-4.013036542015743]
								}, {
									"case":	265,
									"scores":	[-4.013036542015743]
								}, {
									"case":	266,
									"scores":	[-4.013036542015743]
								}, {
									"case":	267,
									"scores":	[-4.013036542015743]
								}, {
									"case":	268,
									"scores":	[-4.013036542015743]
								}, {
									"case":	269,
									"scores":	[-4.013036542015743]
								}, {
									"case":	270,
									"scores":	[-4.013036542015743]
								}, {
									"case":	271,
									"scores":	[-4.013036542015743]
								}, {
									"case":	272,
									"scores":	[-4.013036542015743]
								}, {
									"case":	273,
									"scores":	[-4.013036542015743]
								}, {
									"case":	274,
									"scores":	[-4.013036542015743]
								}, {
									"case":	275,
									"scores":	[-4.013036542015743]
								}, {
									"case":	276,
									"scores":	[-4.013036542015743]
								}, {
									"case":	277,
									"scores":	[-4.013036542015743]
								}, {
									"case":	278,
									"scores":	[-4.013036542015743]
								}, {
									"case":	279,
									"scores":	[-4.013036542015743]
								}, {
									"case":	280,
									"scores":	[-4.013036542015743]
								}, {
									"case":	281,
									"scores":	[-4.013036542015743]
								}, {
									"case":	282,
									"scores":	[-4.013036542015743]
								}, {
									"case":	283,
									"scores":	[-4.013036542015743]
								}, {
									"case":	284,
									"scores":	[-4.013036542015743]
								}, {
									"case":	285,
									"scores":	[-4.013036542015743]
								}, {
									"case":	286,
									"scores":	[-4.013036542015743]
								}, {
									"case":	287,
									"scores":	[-4.013036542015743]
								}, {
									"case":	288,
									"scores":	[-4.013036542015743]
								}, {
									"case":	289,
									"scores":	[-4.013036542015743]
								}, {
									"case":	290,
									"scores":	[-4.013036542015743]
								}, {
									"case":	291,
									"scores":	[-4.013036542015743]
								}, {
									"case":	292,
									"scores":	[-4.013036542015743]
								}, {
									"case":	293,
									"scores":	[-4.013036542015743]
								}, {
									"case":	294,
									"scores":	[-4.013036542015743]
								}, {
									"case":	295,
									"scores":	[-4.013036542015743]
								}, {
									"case":	296,
									"scores":	[-4.013036542015743]
								}, {
									"case":	297,
									"scores":	[-4.013036542015743]
								}, {
									"case":	298,
									"scores":	[-4.013036542015743]
								}, {
									"case":	299,
									"scores":	[-4.013036542015743]
								}, {
									"case":	300,
									"scores":	[-4.013036542015743]
								}, {
									"case":	301,
									"scores":	[-4.013036542015743]
								}, {
									"case":	302,
									"scores":	[-4.013036542015743]
								}, {
									"case":	303,
									"scores":	[-4.013036542015743]
								}, {
									"case":	304,
									"scores":	[-4.013036542015743]
								}, {
									"case":	305,
									"scores":	[-4.013036542015743]
								}, {
									"case":	306,
									"scores":	[-4.013036542015743]
								}, {
									"case":	307,
									"scores":	[-4.013036542015743]
								}, {
									"case":	308,
									"scores":	[-4.013036542015743]
								}, {
									"case":	309,
									"scores":	[-4.013036542015743]
								}, {
									"case":	310,
									"scores":	[-4.013036542015743]
								}, {
									"case":	311,
									"scores":	[-4.013036542015743]
								}, {
									"case":	312,
									"scores":	[-4.013036542015743]
								}, {
									"case":	313,
									"scores":	[-4.013036542015743]
								}, {
									"case":	314,
									"scores":	[-4.013036542015743]
								}, {
									"case":	315,
									"scores":	[-4.013036542015743]
								}, {
									"case":	316,
									"scores":	[-4.013036542015743]
								}, {
									"case":	317,
									"scores":	[-4.013036542015743]
								}, {
									"case":	318,
									"scores":	[-4.013036542015743]
								}, {
									"case":	319,
									"scores":	[-4.013036542015743]
								}, {
									"case":	320,
									"scores":	[-4.013036542015743]
								}, {
									"case":	321,
									"scores":	[-4.013036542015743]
								}, {
									"case":	322,
									"scores":	[-4.013036542015743]
								}, {
									"case":	323,
									"scores":	[-4.013036542015743]
								}, {
									"case":	324,
									"scores":	[-4.013036542015743]
								}, {
									"case":	325,
									"scores":	[-4.013036542015743]
								}, {
									"case":	326,
									"scores":	[-4.013036542015743]
								}, {
									"case":	327,
									"scores":	[-4.013036542015743]
								}, {
									"case":	328,
									"scores":	[-4.013036542015743]
								}, {
									"case":	329,
									"scores":	[-4.013036542015743]
								}, {
									"case":	330,
									"scores":	[-4.013036542015743]
								}, {
									"case":	331,
									"scores":	[-4.013036542015743]
								}, {
									"case":	332,
									"scores":	[-4.013036542015743]
								}, {
									"case":	333,
									"scores":	[-4.013036542015743]
								}, {
									"case":	334,
									"scores":	[-4.013036542015743]
								}, {
									"case":	335,
									"scores":	[-4.013036542015743]
								}, {
									"case":	336,
									"scores":	[-2.9422867990157435, -4.2864384160157432, -5.8727750380157433, -6.7580740118157419, -6.3860695550157427, -6.1380800380157421, -6.1380800380157421, -5.6742454380157428, -6.3841189518157426, -6.1751804380157429]
								}, {
									"case":	337,
									"scores":	[-3.0865077990157435, -4.4306594160157431, -6.0169960380157432, -6.9022950118157418, -6.5302905550157426, -6.282301038015742, -6.282301038015742, -5.8184664380157427, -6.5283399518157426, -6.3194014380157428]
								}]
						}]
				}, {
					"line":	1058,
					"switches":	[{
							"switch":	2,
							"types":	[[], [], [], [], [336, 337], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [], [], [], [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], [], [], [], [], [], []],
							"begin_line":	1059,
							"begin_column":	2,
							"end_line":	1059,
							"end_column":	2,
							"patch_codes":	["memset(&offset->abbr, 0, sizeof (*(&offset->abbr)))", "memset(&offset->is_dst, 0, sizeof (*(&offset->is_dst)))", "memset(&offset->leap_secs, 0, sizeof (*(&offset->leap_secs)))", "memset(&offset->offset, 0, sizeof (*(&offset->offset)))", "memset(&offset->transistion_time, 0, sizeof (*(&offset->transistion_time)))", "memset(&string.a, 0, sizeof (*(&string.a)))", "memset(&string.c, 0, sizeof (*(&string.c)))", "memset(&string.len, 0, sizeof (*(&string.len)))", "memset(&t->d, 0, sizeof (*(&t->d)))", "memset(&t->dst, 0, sizeof (*(&t->dst)))", "memset(&t->f, 0, sizeof (*(&t->f)))", "memset(&t->h, 0, sizeof (*(&t->h)))", "memset(&t->have_date, 0, sizeof (*(&t->have_date)))", "memset(&t->have_relative, 0, sizeof (*(&t->have_relative)))", "memset(&t->have_time, 0, sizeof (*(&t->have_time)))", "memset(&t->have_weeknr_day, 0, sizeof (*(&t->have_weeknr_day)))", "memset(&t->have_zone, 0, sizeof (*(&t->have_zone)))", "memset(&t->i, 0, sizeof (*(&t->i)))", "memset(&t->is_localtime, 0, sizeof (*(&t->is_localtime)))", "memset(&t->m, 0, sizeof (*(&t->m)))", "memset(&t->relative, 0, sizeof (*(&t->relative)))", "memset(&t->s, 0, sizeof (*(&t->s)))", "memset(&t->sse, 0, sizeof (*(&t->sse)))", "memset(&t->sse_uptodate, 0, sizeof (*(&t->sse_uptodate)))", "memset(&t->tim_uptodate, 0, sizeof (*(&t->tim_uptodate)))", "memset(&t->tz_abbr, 0, sizeof (*(&t->tz_abbr)))", "memset(&t->tz_info, 0, sizeof (*(&t->tz_info)))", "memset(&t->y, 0, sizeof (*(&t->y)))", "memset(&t->z, 0, sizeof (*(&t->z)))", "memset(&t->zone_type, 0, sizeof (*(&t->zone_type)))", "memset(offset->abbr, 0, sizeof (*(offset->abbr)))", "memset(string.c, 0, sizeof (*(string.c)))", "memset(t->tz_abbr, 0, sizeof (*(t->tz_abbr)))", "memset(t->tz_info, 0, sizeof (*(t->tz_info)))", "(date_globals.timezone) = (format)", "(format)++", "_efree(((format)))", "ap_php_snprintf((offset)->abbr, 9, \"GMT%c%02d%02d\", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0)", "ap_php_snprintf(offset->abbr, 9, \"GMT%c%02d%02d\", localtime ? (((offset)->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0)", "ap_php_snprintf(offset->abbr, 9, \"GMT%c%02d%02d\", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs((offset)->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0)", "ap_php_snprintf(offset->abbr, 9, \"GMT%c%02d%02d\", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs(((offset)->offset % 3600) / 60) : 0)", "buffer[1] = (-60)", "buffer[1] = (0)", "buffer[1] = (1)", "buffer[1] = (10)", "buffer[1] = (100)", "buffer[1] = (1000)", "buffer[1] = (1000000)", "buffer[1] = (12)", "buffer[1] = (128)", "buffer[1] = (2)", "buffer[1] = (3)", "buffer[1] = (32)", "buffer[1] = (3600)", "buffer[1] = (4)", "buffer[1] = (400)", "buffer[1] = (60)", "buffer[1] = (78)", "buffer[1] = (864)", "buffer[1] = (86400)", "buffer[1] = (9)", "buffer[1] = (96)", "buffer[1] = (97)", "length = (-60)", "length = (0)", "length = (1)", "length = (10)", "length = (100)", "length = (1000)", "length = (1000000)", "length = (12)", "length = (128)", "length = (2)", "length = (3)", "length = (32)", "length = (3600)", "length = (4)", "length = (400)", "length = (60)", "length = (78)", "length = (864)", "length = (86400)", "length = (9)", "length = (96)", "length = (97)", "length = (format_len)", "length = (i)", "length = (length)", "length = (localtime)", "length = (rfc_colon)", "offset = (offset)", "offset = timelib_get_time_zone_info((t)->sse, t->tz_info)", "offset = timelib_get_time_zone_info(t->sse, (t)->tz_info)", "offset->abbr = (format)", "offset->abbr = strdup((t)->tz_abbr)", "offset->is_dst = (-60)", "offset->is_dst = (0)", "offset->is_dst = (1)", "offset->is_dst = (10)", "offset->is_dst = (100)", "offset->is_dst = (1000)", "offset->is_dst = (1000000)", "offset->is_dst = (12)", "offset->is_dst = (128)", "offset->is_dst = (2)", "offset->is_dst = (3)", "offset->is_dst = (32)", "offset->is_dst = (3600)", "offset->is_dst = (4)", "offset->is_dst = (400)", "offset->is_dst = (60)", "offset->is_dst = (78)", "offset->is_dst = (864)", "offset->is_dst = (86400)", "offset->is_dst = (9)", "offset->is_dst = (96)", "offset->is_dst = (97)", "offset->is_dst = (t)->dst", "offset->leap_secs = (-60)", "offset->leap_secs = (0)", "offset->leap_secs = (1)", "offset->leap_secs = (10)", "offset->leap_secs = (100)", "offset->leap_secs = (1000)", "offset->leap_secs = (1000000)", "offset->leap_secs = (12)", "offset->leap_secs = (128)", "offset->leap_secs = (2)", "offset->leap_secs = (3)", "offset->leap_secs = (32)", "offset->leap_secs = (3600)", "offset->leap_secs = (4)", "offset->leap_secs = (400)", "offset->leap_secs = (60)", "offset->leap_secs = (78)", "offset->leap_secs = (864)", "offset->leap_secs = (86400)", "offset->leap_secs = (9)", "offset->leap_secs = (96)", "offset->leap_secs = (97)", "offset->offset = ((t)->z - (t->dst * 60)) * -60", "offset->offset = ((t)->z) * -60", "offset->offset = (-60)", "offset->offset = (0)", "offset->offset = (1)", "offset->offset = (10)", "offset->offset = (100)", "offset->offset = (1000)", "offset->offset = (1000000)", "offset->offset = (12)", "offset->offset = (128)", "offset->offset = (2)", "offset->offset = (3)", "offset->offset = (32)", "offset->offset = (3600)", "offset->offset = (4)", "offset->offset = (400)", "offset->offset = (60)", "offset->offset = (78)", "offset->offset = (864)", "offset->offset = (86400)", "offset->offset = (9)", "offset->offset = (96)", "offset->offset = (97)", "offset->offset = (format_len)", "offset->offset = (i)", "offset->offset = (length)", "offset->offset = (localtime)", "offset->offset = (rfc_colon)", "offset->offset = (t->z - ((t)->dst * 60)) * -60", "php_date_global_timezone_db_enabled = (-60)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (10)", "php_date_global_timezone_db_enabled = (100)", "php_date_global_timezone_db_enabled = (1000)", "php_date_global_timezone_db_enabled = (1000000)", "php_date_global_timezone_db_enabled = (12)", "php_date_global_timezone_db_enabled = (128)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (32)", "php_date_global_timezone_db_enabled = (3600)", "php_date_global_timezone_db_enabled = (4)", "php_date_global_timezone_db_enabled = (400)", "php_date_global_timezone_db_enabled = (60)", "php_date_global_timezone_db_enabled = (78)", "php_date_global_timezone_db_enabled = (864)", "php_date_global_timezone_db_enabled = (86400)", "php_date_global_timezone_db_enabled = (9)", "php_date_global_timezone_db_enabled = (96)", "php_date_global_timezone_db_enabled = (97)", "php_date_global_timezone_db_enabled = (format_len)", "php_date_global_timezone_db_enabled = (i)", "php_date_global_timezone_db_enabled = (length)", "php_date_global_timezone_db_enabled = (localtime)", "php_date_global_timezone_db_enabled = (rfc_colon)", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain a start date.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an end date or a recurrence count.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an interval.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 3L), \"Timezone ID '%s' is invalid\", (format))", "rfc_colon = (-60)", "rfc_colon = (0)", "rfc_colon = (1)", "rfc_colon = (10)", "rfc_colon = (100)", "rfc_colon = (1000)", "rfc_colon = (1000000)", "rfc_colon = (12)", "rfc_colon = (128)", "rfc_colon = (2)", "rfc_colon = (3)", "rfc_colon = (32)", "rfc_colon = (3600)", "rfc_colon = (4)", "rfc_colon = (400)", "rfc_colon = (60)", "rfc_colon = (78)", "rfc_colon = (864)", "rfc_colon = (86400)", "rfc_colon = (9)", "rfc_colon = (96)", "rfc_colon = (97)", "rfc_colon = (format_len)", "rfc_colon = (i)", "rfc_colon = (length)", "rfc_colon = (localtime)", "rfc_colon = (rfc_colon)", "timelib_isoweek_from_date((t)->y, t->m, t->d, &isoweek, &isoyear)", "timelib_isoweek_from_date(t->y, (t)->m, t->d, &isoweek, &isoyear)", "timelib_isoweek_from_date(t->y, t->m, (t)->d, &isoweek, &isoyear)", "timelib_time_dtor((t))", "timelib_time_offset_dtor((offset))", "timelib_unixtime2gmt((t), (timelib_sll)time(((void *)0)))", "timelib_unixtime2local((t), (timelib_sll)time(((void *)0)))", "timelib_update_from_sse((t))", "timelib_update_ts((t), ((void *)0))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "ap_php_snprintf(offset->abbr, 9, \"GMT%c%02d%02d\", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0)", "buffer[1] = '\\x00'", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "exit(1)", "i++", "length = 1", "length = ap_php_slprintf(buffer, 32, \"%s\", \"UTC\")", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "offset = timelib_get_time_zone_info(t->sse, t->tz_info)", "offset = timelib_time_offset_ctor()", "offset->abbr = malloc(9)", "offset->abbr = strdup(t->tz_abbr)", "offset->is_dst = 0", "offset->is_dst = t->dst", "offset->leap_secs = 0", "offset->offset = (t->z - (t->dst * 60)) * -60", "offset->offset = (t->z) * -60", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "rfc_colon = 0", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_isoweek_from_date(t->y, t->m, t->d, &isoweek, &isoyear)", "timelib_time_offset_dtor(offset)", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L1059\", 10, &(length), sizeof (length), &(isoyear), sizeof (isoyear), &(isoweek), sizeof (isoweek), &(t), sizeof (t), &(format), sizeof (format), &(i), sizeof (i), &(rfc_colon), sizeof (rfc_colon), &(format_len), sizeof (format_len), &(offset), sizeof (offset), &(localtime), sizeof (localtime)))\n    break;\n", "if (__is_neg(\"\", \"L1059\", 10, &(length), sizeof (length), &(isoyear), sizeof (isoyear), &(isoweek), sizeof (isoweek), &(t), sizeof (t), &(format), sizeof (format), &(i), sizeof (i), &(rfc_colon), sizeof (rfc_colon), &(format_len), sizeof (format_len), &(offset), sizeof (offset), &(localtime), sizeof (localtime)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.09384737128582]
								}, {
									"case":	2,
									"scores":	[-4.09384737128582]
								}, {
									"case":	3,
									"scores":	[-4.09384737128582]
								}, {
									"case":	4,
									"scores":	[-4.09384737128582]
								}, {
									"case":	5,
									"scores":	[-4.09384737128582]
								}, {
									"case":	6,
									"scores":	[-4.09384737128582]
								}, {
									"case":	7,
									"scores":	[-4.09384737128582]
								}, {
									"case":	8,
									"scores":	[-4.09384737128582]
								}, {
									"case":	9,
									"scores":	[-4.09384737128582]
								}, {
									"case":	10,
									"scores":	[-4.09384737128582]
								}, {
									"case":	11,
									"scores":	[-4.09384737128582]
								}, {
									"case":	12,
									"scores":	[-4.09384737128582]
								}, {
									"case":	13,
									"scores":	[-4.09384737128582]
								}, {
									"case":	14,
									"scores":	[-4.09384737128582]
								}, {
									"case":	15,
									"scores":	[-4.09384737128582]
								}, {
									"case":	16,
									"scores":	[-4.09384737128582]
								}, {
									"case":	17,
									"scores":	[-4.09384737128582]
								}, {
									"case":	18,
									"scores":	[-4.09384737128582]
								}, {
									"case":	19,
									"scores":	[-4.09384737128582]
								}, {
									"case":	20,
									"scores":	[-4.09384737128582]
								}, {
									"case":	21,
									"scores":	[-4.09384737128582]
								}, {
									"case":	22,
									"scores":	[-4.09384737128582]
								}, {
									"case":	23,
									"scores":	[-4.09384737128582]
								}, {
									"case":	24,
									"scores":	[-4.09384737128582]
								}, {
									"case":	25,
									"scores":	[-4.09384737128582]
								}, {
									"case":	26,
									"scores":	[-4.09384737128582]
								}, {
									"case":	27,
									"scores":	[-4.09384737128582]
								}, {
									"case":	28,
									"scores":	[-4.09384737128582]
								}, {
									"case":	29,
									"scores":	[-4.09384737128582]
								}, {
									"case":	30,
									"scores":	[-4.09384737128582]
								}, {
									"case":	31,
									"scores":	[-4.09384737128582]
								}, {
									"case":	32,
									"scores":	[-4.09384737128582]
								}, {
									"case":	33,
									"scores":	[-4.09384737128582]
								}, {
									"case":	34,
									"scores":	[-4.09384737128582]
								}, {
									"case":	35,
									"scores":	[-4.09384737128582]
								}, {
									"case":	36,
									"scores":	[-4.09384737128582]
								}, {
									"case":	37,
									"scores":	[-4.09384737128582]
								}, {
									"case":	38,
									"scores":	[-4.09384737128582]
								}, {
									"case":	39,
									"scores":	[-4.09384737128582]
								}, {
									"case":	40,
									"scores":	[-4.09384737128582]
								}, {
									"case":	41,
									"scores":	[-4.09384737128582]
								}, {
									"case":	42,
									"scores":	[-4.09384737128582]
								}, {
									"case":	43,
									"scores":	[-4.09384737128582]
								}, {
									"case":	44,
									"scores":	[-4.09384737128582]
								}, {
									"case":	45,
									"scores":	[-4.09384737128582]
								}, {
									"case":	46,
									"scores":	[-4.09384737128582]
								}, {
									"case":	47,
									"scores":	[-4.09384737128582]
								}, {
									"case":	48,
									"scores":	[-4.09384737128582]
								}, {
									"case":	49,
									"scores":	[-4.09384737128582]
								}, {
									"case":	50,
									"scores":	[-4.09384737128582]
								}, {
									"case":	51,
									"scores":	[-4.09384737128582]
								}, {
									"case":	52,
									"scores":	[-4.09384737128582]
								}, {
									"case":	53,
									"scores":	[-4.09384737128582]
								}, {
									"case":	54,
									"scores":	[-4.09384737128582]
								}, {
									"case":	55,
									"scores":	[-4.09384737128582]
								}, {
									"case":	56,
									"scores":	[-4.09384737128582]
								}, {
									"case":	57,
									"scores":	[-4.09384737128582]
								}, {
									"case":	58,
									"scores":	[-4.09384737128582]
								}, {
									"case":	59,
									"scores":	[-4.09384737128582]
								}, {
									"case":	60,
									"scores":	[-4.09384737128582]
								}, {
									"case":	61,
									"scores":	[-4.09384737128582]
								}, {
									"case":	62,
									"scores":	[-4.09384737128582]
								}, {
									"case":	63,
									"scores":	[-4.09384737128582]
								}, {
									"case":	64,
									"scores":	[-4.09384737128582]
								}, {
									"case":	65,
									"scores":	[-4.09384737128582]
								}, {
									"case":	66,
									"scores":	[-4.09384737128582]
								}, {
									"case":	67,
									"scores":	[-4.09384737128582]
								}, {
									"case":	68,
									"scores":	[-4.09384737128582]
								}, {
									"case":	69,
									"scores":	[-4.09384737128582]
								}, {
									"case":	70,
									"scores":	[-4.09384737128582]
								}, {
									"case":	71,
									"scores":	[-4.09384737128582]
								}, {
									"case":	72,
									"scores":	[-4.09384737128582]
								}, {
									"case":	73,
									"scores":	[-4.09384737128582]
								}, {
									"case":	74,
									"scores":	[-4.09384737128582]
								}, {
									"case":	75,
									"scores":	[-4.09384737128582]
								}, {
									"case":	76,
									"scores":	[-4.09384737128582]
								}, {
									"case":	77,
									"scores":	[-4.09384737128582]
								}, {
									"case":	78,
									"scores":	[-4.09384737128582]
								}, {
									"case":	79,
									"scores":	[-4.09384737128582]
								}, {
									"case":	80,
									"scores":	[-4.09384737128582]
								}, {
									"case":	81,
									"scores":	[-4.09384737128582]
								}, {
									"case":	82,
									"scores":	[-4.09384737128582]
								}, {
									"case":	83,
									"scores":	[-4.09384737128582]
								}, {
									"case":	84,
									"scores":	[-4.09384737128582]
								}, {
									"case":	85,
									"scores":	[-4.09384737128582]
								}, {
									"case":	86,
									"scores":	[-4.09384737128582]
								}, {
									"case":	87,
									"scores":	[-4.09384737128582]
								}, {
									"case":	88,
									"scores":	[-4.09384737128582]
								}, {
									"case":	89,
									"scores":	[-4.09384737128582]
								}, {
									"case":	90,
									"scores":	[-4.09384737128582]
								}, {
									"case":	91,
									"scores":	[-4.09384737128582]
								}, {
									"case":	92,
									"scores":	[-4.09384737128582]
								}, {
									"case":	93,
									"scores":	[-4.09384737128582]
								}, {
									"case":	94,
									"scores":	[-4.09384737128582]
								}, {
									"case":	95,
									"scores":	[-4.09384737128582]
								}, {
									"case":	96,
									"scores":	[-4.09384737128582]
								}, {
									"case":	97,
									"scores":	[-4.09384737128582]
								}, {
									"case":	98,
									"scores":	[-4.09384737128582]
								}, {
									"case":	99,
									"scores":	[-4.09384737128582]
								}, {
									"case":	100,
									"scores":	[-4.09384737128582]
								}, {
									"case":	101,
									"scores":	[-4.09384737128582]
								}, {
									"case":	102,
									"scores":	[-4.09384737128582]
								}, {
									"case":	103,
									"scores":	[-4.09384737128582]
								}, {
									"case":	104,
									"scores":	[-4.09384737128582]
								}, {
									"case":	105,
									"scores":	[-4.09384737128582]
								}, {
									"case":	106,
									"scores":	[-4.09384737128582]
								}, {
									"case":	107,
									"scores":	[-4.09384737128582]
								}, {
									"case":	108,
									"scores":	[-4.09384737128582]
								}, {
									"case":	109,
									"scores":	[-4.09384737128582]
								}, {
									"case":	110,
									"scores":	[-4.09384737128582]
								}, {
									"case":	111,
									"scores":	[-4.09384737128582]
								}, {
									"case":	112,
									"scores":	[-4.09384737128582]
								}, {
									"case":	113,
									"scores":	[-4.09384737128582]
								}, {
									"case":	114,
									"scores":	[-4.09384737128582]
								}, {
									"case":	115,
									"scores":	[-4.09384737128582]
								}, {
									"case":	116,
									"scores":	[-4.09384737128582]
								}, {
									"case":	117,
									"scores":	[-4.09384737128582]
								}, {
									"case":	118,
									"scores":	[-4.09384737128582]
								}, {
									"case":	119,
									"scores":	[-4.09384737128582]
								}, {
									"case":	120,
									"scores":	[-4.09384737128582]
								}, {
									"case":	121,
									"scores":	[-4.09384737128582]
								}, {
									"case":	122,
									"scores":	[-4.09384737128582]
								}, {
									"case":	123,
									"scores":	[-4.09384737128582]
								}, {
									"case":	124,
									"scores":	[-4.09384737128582]
								}, {
									"case":	125,
									"scores":	[-4.09384737128582]
								}, {
									"case":	126,
									"scores":	[-4.09384737128582]
								}, {
									"case":	127,
									"scores":	[-4.09384737128582]
								}, {
									"case":	128,
									"scores":	[-4.09384737128582]
								}, {
									"case":	129,
									"scores":	[-4.09384737128582]
								}, {
									"case":	130,
									"scores":	[-4.09384737128582]
								}, {
									"case":	131,
									"scores":	[-4.09384737128582]
								}, {
									"case":	132,
									"scores":	[-4.09384737128582]
								}, {
									"case":	133,
									"scores":	[-4.09384737128582]
								}, {
									"case":	134,
									"scores":	[-4.09384737128582]
								}, {
									"case":	135,
									"scores":	[-4.09384737128582]
								}, {
									"case":	136,
									"scores":	[-4.09384737128582]
								}, {
									"case":	137,
									"scores":	[-4.09384737128582]
								}, {
									"case":	138,
									"scores":	[-4.09384737128582]
								}, {
									"case":	139,
									"scores":	[-4.09384737128582]
								}, {
									"case":	140,
									"scores":	[-4.09384737128582]
								}, {
									"case":	141,
									"scores":	[-4.09384737128582]
								}, {
									"case":	142,
									"scores":	[-4.09384737128582]
								}, {
									"case":	143,
									"scores":	[-4.09384737128582]
								}, {
									"case":	144,
									"scores":	[-4.09384737128582]
								}, {
									"case":	145,
									"scores":	[-4.09384737128582]
								}, {
									"case":	146,
									"scores":	[-4.09384737128582]
								}, {
									"case":	147,
									"scores":	[-4.09384737128582]
								}, {
									"case":	148,
									"scores":	[-4.09384737128582]
								}, {
									"case":	149,
									"scores":	[-4.09384737128582]
								}, {
									"case":	150,
									"scores":	[-4.09384737128582]
								}, {
									"case":	151,
									"scores":	[-4.09384737128582]
								}, {
									"case":	152,
									"scores":	[-4.09384737128582]
								}, {
									"case":	153,
									"scores":	[-4.09384737128582]
								}, {
									"case":	154,
									"scores":	[-4.09384737128582]
								}, {
									"case":	155,
									"scores":	[-4.09384737128582]
								}, {
									"case":	156,
									"scores":	[-4.09384737128582]
								}, {
									"case":	157,
									"scores":	[-4.09384737128582]
								}, {
									"case":	158,
									"scores":	[-4.09384737128582]
								}, {
									"case":	159,
									"scores":	[-4.09384737128582]
								}, {
									"case":	160,
									"scores":	[-4.09384737128582]
								}, {
									"case":	161,
									"scores":	[-4.09384737128582]
								}, {
									"case":	162,
									"scores":	[-4.09384737128582]
								}, {
									"case":	163,
									"scores":	[-4.09384737128582]
								}, {
									"case":	164,
									"scores":	[-4.09384737128582]
								}, {
									"case":	165,
									"scores":	[-4.09384737128582]
								}, {
									"case":	166,
									"scores":	[-4.09384737128582]
								}, {
									"case":	167,
									"scores":	[-4.09384737128582]
								}, {
									"case":	168,
									"scores":	[-4.09384737128582]
								}, {
									"case":	169,
									"scores":	[-4.09384737128582]
								}, {
									"case":	170,
									"scores":	[-4.09384737128582]
								}, {
									"case":	171,
									"scores":	[-4.09384737128582]
								}, {
									"case":	172,
									"scores":	[-4.09384737128582]
								}, {
									"case":	173,
									"scores":	[-4.09384737128582]
								}, {
									"case":	174,
									"scores":	[-4.09384737128582]
								}, {
									"case":	175,
									"scores":	[-4.09384737128582]
								}, {
									"case":	176,
									"scores":	[-4.09384737128582]
								}, {
									"case":	177,
									"scores":	[-4.09384737128582]
								}, {
									"case":	178,
									"scores":	[-4.09384737128582]
								}, {
									"case":	179,
									"scores":	[-4.09384737128582]
								}, {
									"case":	180,
									"scores":	[-4.09384737128582]
								}, {
									"case":	181,
									"scores":	[-4.09384737128582]
								}, {
									"case":	182,
									"scores":	[-4.09384737128582]
								}, {
									"case":	183,
									"scores":	[-4.09384737128582]
								}, {
									"case":	184,
									"scores":	[-4.09384737128582]
								}, {
									"case":	185,
									"scores":	[-4.09384737128582]
								}, {
									"case":	186,
									"scores":	[-4.09384737128582]
								}, {
									"case":	187,
									"scores":	[-4.09384737128582]
								}, {
									"case":	188,
									"scores":	[-4.09384737128582]
								}, {
									"case":	189,
									"scores":	[-4.09384737128582]
								}, {
									"case":	190,
									"scores":	[-4.09384737128582]
								}, {
									"case":	191,
									"scores":	[-4.09384737128582]
								}, {
									"case":	192,
									"scores":	[-4.09384737128582]
								}, {
									"case":	193,
									"scores":	[-4.09384737128582]
								}, {
									"case":	194,
									"scores":	[-4.09384737128582]
								}, {
									"case":	195,
									"scores":	[-4.09384737128582]
								}, {
									"case":	196,
									"scores":	[-4.09384737128582]
								}, {
									"case":	197,
									"scores":	[-4.09384737128582]
								}, {
									"case":	198,
									"scores":	[-4.09384737128582]
								}, {
									"case":	199,
									"scores":	[-4.09384737128582]
								}, {
									"case":	200,
									"scores":	[-4.09384737128582]
								}, {
									"case":	201,
									"scores":	[-4.09384737128582]
								}, {
									"case":	202,
									"scores":	[-4.09384737128582]
								}, {
									"case":	203,
									"scores":	[-4.09384737128582]
								}, {
									"case":	204,
									"scores":	[-4.09384737128582]
								}, {
									"case":	205,
									"scores":	[-4.09384737128582]
								}, {
									"case":	206,
									"scores":	[-4.09384737128582]
								}, {
									"case":	207,
									"scores":	[-4.09384737128582]
								}, {
									"case":	208,
									"scores":	[-4.09384737128582]
								}, {
									"case":	209,
									"scores":	[-4.09384737128582]
								}, {
									"case":	210,
									"scores":	[-4.09384737128582]
								}, {
									"case":	211,
									"scores":	[-4.09384737128582]
								}, {
									"case":	212,
									"scores":	[-4.09384737128582]
								}, {
									"case":	213,
									"scores":	[-4.09384737128582]
								}, {
									"case":	214,
									"scores":	[-4.09384737128582]
								}, {
									"case":	215,
									"scores":	[-4.09384737128582]
								}, {
									"case":	216,
									"scores":	[-4.09384737128582]
								}, {
									"case":	217,
									"scores":	[-4.09384737128582]
								}, {
									"case":	218,
									"scores":	[-4.09384737128582]
								}, {
									"case":	219,
									"scores":	[-4.09384737128582]
								}, {
									"case":	220,
									"scores":	[-4.09384737128582]
								}, {
									"case":	221,
									"scores":	[-4.09384737128582]
								}, {
									"case":	222,
									"scores":	[-4.09384737128582]
								}, {
									"case":	223,
									"scores":	[-4.09384737128582]
								}, {
									"case":	224,
									"scores":	[-4.09384737128582]
								}, {
									"case":	225,
									"scores":	[-4.09384737128582]
								}, {
									"case":	226,
									"scores":	[-4.09384737128582]
								}, {
									"case":	227,
									"scores":	[-4.09384737128582]
								}, {
									"case":	228,
									"scores":	[-4.09384737128582]
								}, {
									"case":	229,
									"scores":	[-4.09384737128582]
								}, {
									"case":	230,
									"scores":	[-4.09384737128582]
								}, {
									"case":	231,
									"scores":	[-4.09384737128582]
								}, {
									"case":	232,
									"scores":	[-4.09384737128582]
								}, {
									"case":	233,
									"scores":	[-4.09384737128582]
								}, {
									"case":	234,
									"scores":	[-4.09384737128582]
								}, {
									"case":	235,
									"scores":	[-4.09384737128582]
								}, {
									"case":	236,
									"scores":	[-4.09384737128582]
								}, {
									"case":	237,
									"scores":	[-4.09384737128582]
								}, {
									"case":	238,
									"scores":	[-4.09384737128582]
								}, {
									"case":	239,
									"scores":	[-4.09384737128582]
								}, {
									"case":	240,
									"scores":	[-4.09384737128582]
								}, {
									"case":	241,
									"scores":	[-4.09384737128582]
								}, {
									"case":	242,
									"scores":	[-4.09384737128582]
								}, {
									"case":	243,
									"scores":	[-4.09384737128582]
								}, {
									"case":	244,
									"scores":	[-4.09384737128582]
								}, {
									"case":	245,
									"scores":	[-4.09384737128582]
								}, {
									"case":	246,
									"scores":	[-4.09384737128582]
								}, {
									"case":	247,
									"scores":	[-4.09384737128582]
								}, {
									"case":	248,
									"scores":	[-4.09384737128582]
								}, {
									"case":	249,
									"scores":	[-4.09384737128582]
								}, {
									"case":	250,
									"scores":	[-4.09384737128582]
								}, {
									"case":	251,
									"scores":	[-4.09384737128582]
								}, {
									"case":	252,
									"scores":	[-4.09384737128582]
								}, {
									"case":	253,
									"scores":	[-4.09384737128582]
								}, {
									"case":	254,
									"scores":	[-4.09384737128582]
								}, {
									"case":	255,
									"scores":	[-4.09384737128582]
								}, {
									"case":	256,
									"scores":	[-4.09384737128582]
								}, {
									"case":	257,
									"scores":	[-4.09384737128582]
								}, {
									"case":	258,
									"scores":	[-4.09384737128582]
								}, {
									"case":	259,
									"scores":	[-4.09384737128582]
								}, {
									"case":	260,
									"scores":	[-4.09384737128582]
								}, {
									"case":	261,
									"scores":	[-4.09384737128582]
								}, {
									"case":	262,
									"scores":	[-4.09384737128582]
								}, {
									"case":	263,
									"scores":	[-4.09384737128582]
								}, {
									"case":	264,
									"scores":	[-4.09384737128582]
								}, {
									"case":	265,
									"scores":	[-4.09384737128582]
								}, {
									"case":	266,
									"scores":	[-4.09384737128582]
								}, {
									"case":	267,
									"scores":	[-4.09384737128582]
								}, {
									"case":	268,
									"scores":	[-4.09384737128582]
								}, {
									"case":	269,
									"scores":	[-4.09384737128582]
								}, {
									"case":	270,
									"scores":	[-4.09384737128582]
								}, {
									"case":	271,
									"scores":	[-4.09384737128582]
								}, {
									"case":	272,
									"scores":	[-4.09384737128582]
								}, {
									"case":	273,
									"scores":	[-4.09384737128582]
								}, {
									"case":	274,
									"scores":	[-4.09384737128582]
								}, {
									"case":	275,
									"scores":	[-4.09384737128582]
								}, {
									"case":	276,
									"scores":	[-4.09384737128582]
								}, {
									"case":	277,
									"scores":	[-4.09384737128582]
								}, {
									"case":	278,
									"scores":	[-4.09384737128582]
								}, {
									"case":	279,
									"scores":	[-4.09384737128582]
								}, {
									"case":	280,
									"scores":	[-4.09384737128582]
								}, {
									"case":	281,
									"scores":	[-4.09384737128582]
								}, {
									"case":	282,
									"scores":	[-4.09384737128582]
								}, {
									"case":	283,
									"scores":	[-4.09384737128582]
								}, {
									"case":	284,
									"scores":	[-4.09384737128582]
								}, {
									"case":	285,
									"scores":	[-4.09384737128582]
								}, {
									"case":	286,
									"scores":	[-4.09384737128582]
								}, {
									"case":	287,
									"scores":	[-4.09384737128582]
								}, {
									"case":	288,
									"scores":	[-4.09384737128582]
								}, {
									"case":	289,
									"scores":	[-4.09384737128582]
								}, {
									"case":	290,
									"scores":	[-4.09384737128582]
								}, {
									"case":	291,
									"scores":	[-4.09384737128582]
								}, {
									"case":	292,
									"scores":	[-4.09384737128582]
								}, {
									"case":	293,
									"scores":	[-4.09384737128582]
								}, {
									"case":	294,
									"scores":	[-4.09384737128582]
								}, {
									"case":	295,
									"scores":	[-4.09384737128582]
								}, {
									"case":	296,
									"scores":	[-4.09384737128582]
								}, {
									"case":	297,
									"scores":	[-4.09384737128582]
								}, {
									"case":	298,
									"scores":	[-4.09384737128582]
								}, {
									"case":	299,
									"scores":	[-4.09384737128582]
								}, {
									"case":	300,
									"scores":	[-4.09384737128582]
								}, {
									"case":	301,
									"scores":	[-4.09384737128582]
								}, {
									"case":	302,
									"scores":	[-4.09384737128582]
								}, {
									"case":	303,
									"scores":	[-4.09384737128582]
								}, {
									"case":	304,
									"scores":	[-4.09384737128582]
								}, {
									"case":	305,
									"scores":	[-4.09384737128582]
								}, {
									"case":	306,
									"scores":	[-4.09384737128582]
								}, {
									"case":	307,
									"scores":	[-4.09384737128582]
								}, {
									"case":	308,
									"scores":	[-4.09384737128582]
								}, {
									"case":	309,
									"scores":	[-4.09384737128582]
								}, {
									"case":	310,
									"scores":	[-4.09384737128582]
								}, {
									"case":	311,
									"scores":	[-4.09384737128582]
								}, {
									"case":	312,
									"scores":	[-4.09384737128582]
								}, {
									"case":	313,
									"scores":	[-4.09384737128582]
								}, {
									"case":	314,
									"scores":	[-4.09384737128582]
								}, {
									"case":	315,
									"scores":	[-4.09384737128582]
								}, {
									"case":	316,
									"scores":	[-4.09384737128582]
								}, {
									"case":	317,
									"scores":	[-4.09384737128582]
								}, {
									"case":	318,
									"scores":	[-4.09384737128582]
								}, {
									"case":	319,
									"scores":	[-4.09384737128582]
								}, {
									"case":	320,
									"scores":	[-4.09384737128582]
								}, {
									"case":	321,
									"scores":	[-4.09384737128582]
								}, {
									"case":	322,
									"scores":	[-4.09384737128582]
								}, {
									"case":	323,
									"scores":	[-4.09384737128582]
								}, {
									"case":	324,
									"scores":	[-4.09384737128582]
								}, {
									"case":	325,
									"scores":	[-4.09384737128582]
								}, {
									"case":	326,
									"scores":	[-4.09384737128582]
								}, {
									"case":	327,
									"scores":	[-4.09384737128582]
								}, {
									"case":	328,
									"scores":	[-4.09384737128582]
								}, {
									"case":	329,
									"scores":	[-4.09384737128582]
								}, {
									"case":	330,
									"scores":	[-4.09384737128582]
								}, {
									"case":	331,
									"scores":	[-4.09384737128582]
								}, {
									"case":	332,
									"scores":	[-4.09384737128582]
								}, {
									"case":	333,
									"scores":	[-4.09384737128582]
								}, {
									"case":	334,
									"scores":	[-4.09384737128582]
								}, {
									"case":	335,
									"scores":	[-4.09384737128582]
								}, {
									"case":	336,
									"scores":	[-3.0230976282858215, -4.36724924528582, -6.02048182728582, -7.1032284379858215, -6.46688038428582, -6.21889086728582, -6.21889086728582, -5.75505626728582, -6.46492978108582, -6.25599126728582]
								}, {
									"case":	337,
									"scores":	[-3.1673186282858214, -4.51147024528582, -6.16470282728582, -7.2474494379858214, -6.61110138428582, -6.36311186728582, -6.36311186728582, -5.89927726728582, -6.60915078108582, -6.40021226728582]
								}]
						}]
				}, {
					"line":	1143,
					"switches":	[{
							"switch":	3,
							"types":	[[], [], [], [], [337, 338], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [], [], [], [242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241], [], [], [], [], [], []],
							"begin_line":	1144,
							"begin_column":	2,
							"end_line":	1144,
							"end_column":	2,
							"patch_codes":	["memset(&offset->abbr, 0, sizeof (*(&offset->abbr)))", "memset(&offset->is_dst, 0, sizeof (*(&offset->is_dst)))", "memset(&offset->leap_secs, 0, sizeof (*(&offset->leap_secs)))", "memset(&offset->offset, 0, sizeof (*(&offset->offset)))", "memset(&offset->transistion_time, 0, sizeof (*(&offset->transistion_time)))", "memset(&string.a, 0, sizeof (*(&string.a)))", "memset(&string.c, 0, sizeof (*(&string.c)))", "memset(&string.len, 0, sizeof (*(&string.len)))", "memset(&t->d, 0, sizeof (*(&t->d)))", "memset(&t->dst, 0, sizeof (*(&t->dst)))", "memset(&t->f, 0, sizeof (*(&t->f)))", "memset(&t->h, 0, sizeof (*(&t->h)))", "memset(&t->have_date, 0, sizeof (*(&t->have_date)))", "memset(&t->have_relative, 0, sizeof (*(&t->have_relative)))", "memset(&t->have_time, 0, sizeof (*(&t->have_time)))", "memset(&t->have_weeknr_day, 0, sizeof (*(&t->have_weeknr_day)))", "memset(&t->have_zone, 0, sizeof (*(&t->have_zone)))", "memset(&t->i, 0, sizeof (*(&t->i)))", "memset(&t->is_localtime, 0, sizeof (*(&t->is_localtime)))", "memset(&t->m, 0, sizeof (*(&t->m)))", "memset(&t->relative, 0, sizeof (*(&t->relative)))", "memset(&t->s, 0, sizeof (*(&t->s)))", "memset(&t->sse, 0, sizeof (*(&t->sse)))", "memset(&t->sse_uptodate, 0, sizeof (*(&t->sse_uptodate)))", "memset(&t->tim_uptodate, 0, sizeof (*(&t->tim_uptodate)))", "memset(&t->tz_abbr, 0, sizeof (*(&t->tz_abbr)))", "memset(&t->tz_info, 0, sizeof (*(&t->tz_info)))", "memset(&t->y, 0, sizeof (*(&t->y)))", "memset(&t->z, 0, sizeof (*(&t->z)))", "memset(&t->zone_type, 0, sizeof (*(&t->zone_type)))", "memset(offset->abbr, 0, sizeof (*(offset->abbr)))", "memset(string.c, 0, sizeof (*(string.c)))", "memset(t, 0, sizeof (*(t)))", "memset(t->tz_abbr, 0, sizeof (*(t->tz_abbr)))", "memset(t->tz_info, 0, sizeof (*(t->tz_info)))", "(date_globals.timezone) = (format)", "(format)++", "_efree(((format)))", "ap_php_snprintf((offset)->abbr, 9, \"GMT%c%02d%02d\", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0)", "ap_php_snprintf(offset->abbr, 9, \"GMT%c%02d%02d\", localtime ? (((offset)->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0)", "ap_php_snprintf(offset->abbr, 9, \"GMT%c%02d%02d\", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs((offset)->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0)", "ap_php_snprintf(offset->abbr, 9, \"GMT%c%02d%02d\", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs(((offset)->offset % 3600) / 60) : 0)", "buffer[1] = (-60)", "buffer[1] = (0)", "buffer[1] = (1)", "buffer[1] = (10)", "buffer[1] = (100)", "buffer[1] = (1000)", "buffer[1] = (1000000)", "buffer[1] = (12)", "buffer[1] = (128)", "buffer[1] = (2)", "buffer[1] = (3)", "buffer[1] = (32)", "buffer[1] = (3600)", "buffer[1] = (4)", "buffer[1] = (400)", "buffer[1] = (60)", "buffer[1] = (78)", "buffer[1] = (864)", "buffer[1] = (86400)", "buffer[1] = (9)", "buffer[1] = (96)", "buffer[1] = (97)", "length = (-60)", "length = (0)", "length = (1)", "length = (10)", "length = (100)", "length = (1000)", "length = (1000000)", "length = (12)", "length = (128)", "length = (2)", "length = (3)", "length = (32)", "length = (3600)", "length = (4)", "length = (400)", "length = (60)", "length = (78)", "length = (864)", "length = (86400)", "length = (9)", "length = (96)", "length = (97)", "length = (format_len)", "length = (i)", "length = (length)", "length = (localtime)", "length = (rfc_colon)", "offset = (offset)", "offset = timelib_get_time_zone_info((t)->sse, t->tz_info)", "offset = timelib_get_time_zone_info(t->sse, (t)->tz_info)", "offset->abbr = (format)", "offset->abbr = strdup((t)->tz_abbr)", "offset->is_dst = (-60)", "offset->is_dst = (0)", "offset->is_dst = (1)", "offset->is_dst = (10)", "offset->is_dst = (100)", "offset->is_dst = (1000)", "offset->is_dst = (1000000)", "offset->is_dst = (12)", "offset->is_dst = (128)", "offset->is_dst = (2)", "offset->is_dst = (3)", "offset->is_dst = (32)", "offset->is_dst = (3600)", "offset->is_dst = (4)", "offset->is_dst = (400)", "offset->is_dst = (60)", "offset->is_dst = (78)", "offset->is_dst = (864)", "offset->is_dst = (86400)", "offset->is_dst = (9)", "offset->is_dst = (96)", "offset->is_dst = (97)", "offset->is_dst = (t)->dst", "offset->leap_secs = (-60)", "offset->leap_secs = (0)", "offset->leap_secs = (1)", "offset->leap_secs = (10)", "offset->leap_secs = (100)", "offset->leap_secs = (1000)", "offset->leap_secs = (1000000)", "offset->leap_secs = (12)", "offset->leap_secs = (128)", "offset->leap_secs = (2)", "offset->leap_secs = (3)", "offset->leap_secs = (32)", "offset->leap_secs = (3600)", "offset->leap_secs = (4)", "offset->leap_secs = (400)", "offset->leap_secs = (60)", "offset->leap_secs = (78)", "offset->leap_secs = (864)", "offset->leap_secs = (86400)", "offset->leap_secs = (9)", "offset->leap_secs = (96)", "offset->leap_secs = (97)", "offset->offset = ((t)->z - (t->dst * 60)) * -60", "offset->offset = ((t)->z) * -60", "offset->offset = (-60)", "offset->offset = (0)", "offset->offset = (1)", "offset->offset = (10)", "offset->offset = (100)", "offset->offset = (1000)", "offset->offset = (1000000)", "offset->offset = (12)", "offset->offset = (128)", "offset->offset = (2)", "offset->offset = (3)", "offset->offset = (32)", "offset->offset = (3600)", "offset->offset = (4)", "offset->offset = (400)", "offset->offset = (60)", "offset->offset = (78)", "offset->offset = (864)", "offset->offset = (86400)", "offset->offset = (9)", "offset->offset = (96)", "offset->offset = (97)", "offset->offset = (format_len)", "offset->offset = (i)", "offset->offset = (length)", "offset->offset = (localtime)", "offset->offset = (rfc_colon)", "offset->offset = (t->z - ((t)->dst * 60)) * -60", "php_date_global_timezone_db_enabled = (-60)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (10)", "php_date_global_timezone_db_enabled = (100)", "php_date_global_timezone_db_enabled = (1000)", "php_date_global_timezone_db_enabled = (1000000)", "php_date_global_timezone_db_enabled = (12)", "php_date_global_timezone_db_enabled = (128)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (32)", "php_date_global_timezone_db_enabled = (3600)", "php_date_global_timezone_db_enabled = (4)", "php_date_global_timezone_db_enabled = (400)", "php_date_global_timezone_db_enabled = (60)", "php_date_global_timezone_db_enabled = (78)", "php_date_global_timezone_db_enabled = (864)", "php_date_global_timezone_db_enabled = (86400)", "php_date_global_timezone_db_enabled = (9)", "php_date_global_timezone_db_enabled = (96)", "php_date_global_timezone_db_enabled = (97)", "php_date_global_timezone_db_enabled = (format_len)", "php_date_global_timezone_db_enabled = (i)", "php_date_global_timezone_db_enabled = (length)", "php_date_global_timezone_db_enabled = (localtime)", "php_date_global_timezone_db_enabled = (rfc_colon)", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain a start date.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an end date or a recurrence count.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an interval.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 3L), \"Timezone ID '%s' is invalid\", (format))", "rfc_colon = (-60)", "rfc_colon = (0)", "rfc_colon = (1)", "rfc_colon = (10)", "rfc_colon = (100)", "rfc_colon = (1000)", "rfc_colon = (1000000)", "rfc_colon = (12)", "rfc_colon = (128)", "rfc_colon = (2)", "rfc_colon = (3)", "rfc_colon = (32)", "rfc_colon = (3600)", "rfc_colon = (4)", "rfc_colon = (400)", "rfc_colon = (60)", "rfc_colon = (78)", "rfc_colon = (864)", "rfc_colon = (86400)", "rfc_colon = (9)", "rfc_colon = (96)", "rfc_colon = (97)", "rfc_colon = (format_len)", "rfc_colon = (i)", "rfc_colon = (length)", "rfc_colon = (localtime)", "rfc_colon = (rfc_colon)", "timelib_isoweek_from_date((t)->y, t->m, t->d, &isoweek, &isoyear)", "timelib_isoweek_from_date(t->y, (t)->m, t->d, &isoweek, &isoyear)", "timelib_isoweek_from_date(t->y, t->m, (t)->d, &isoweek, &isoyear)", "timelib_time_dtor((t))", "timelib_time_offset_dtor((offset))", "timelib_unixtime2gmt((t), (timelib_sll)time(((void *)0)))", "timelib_unixtime2local((t), (timelib_sll)time(((void *)0)))", "timelib_update_from_sse((t))", "timelib_update_ts((t), ((void *)0))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "ap_php_snprintf(offset->abbr, 9, \"GMT%c%02d%02d\", localtime ? ((offset->offset < 0) ? '-' : '+') : '+', localtime ? abs(offset->offset / 3600) : 0, localtime ? abs((offset->offset % 3600) / 60) : 0)", "buffer[1] = '\\x00'", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "exit(1)", "i++", "length = 1", "length = ap_php_slprintf(buffer, 32, \"%s\", \"UTC\")", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "offset = timelib_get_time_zone_info(t->sse, t->tz_info)", "offset = timelib_time_offset_ctor()", "offset->abbr = malloc(9)", "offset->abbr = strdup(t->tz_abbr)", "offset->is_dst = 0", "offset->is_dst = t->dst", "offset->leap_secs = 0", "offset->offset = (t->z - (t->dst * 60)) * -60", "offset->offset = (t->z) * -60", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "rfc_colon = 0", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_isoweek_from_date(t->y, t->m, t->d, &isoweek, &isoyear)", "timelib_time_offset_dtor(offset)", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L1144\", 30, &(t), sizeof (t), &(length), sizeof (length), &(t->sse), sizeof (t->sse), &(format_len), sizeof (format_len), &(i), sizeof (i), &(localtime), sizeof (localtime), &(offset), sizeof (offset), &(format), sizeof (format), &(t->y), sizeof (t->y), &(t->h), sizeof (t->h), &(t->i), sizeof (t->i), &(t->s), sizeof (t->s), &(t->m), sizeof (t->m), &(t->d), sizeof (t->d), &(t->tz_info), sizeof (t->tz_info), &(t->zone_type), sizeof (t->zone_type), &(rfc_colon), sizeof (rfc_colon), &(isoyear), sizeof (isoyear), &(isoweek), sizeof (isoweek), &(t->z), sizeof (t->z), &(t->tz_abbr), sizeof (t->tz_abbr), &(t->dst), sizeof (t->dst), &(t->have_time), sizeof (t->have_time), &(t->have_date), sizeof (t->have_date), &(t->have_zone), sizeof (t->have_zone), &(t->have_relative), sizeof (t->have_relative), &(t->have_weeknr_day), sizeof (t->have_weeknr_day), &(t->sse_uptodate), sizeof (t->sse_uptodate), &(t->tim_uptodate), sizeof (t->tim_uptodate), &(t->is_localtime), sizeof (t->is_localtime)))\n    break;\n", "if (__is_neg(\"\", \"L1144\", 30, &(t), sizeof (t), &(length), sizeof (length), &(t->sse), sizeof (t->sse), &(format_len), sizeof (format_len), &(i), sizeof (i), &(localtime), sizeof (localtime), &(offset), sizeof (offset), &(format), sizeof (format), &(t->y), sizeof (t->y), &(t->h), sizeof (t->h), &(t->i), sizeof (t->i), &(t->s), sizeof (t->s), &(t->m), sizeof (t->m), &(t->d), sizeof (t->d), &(t->tz_info), sizeof (t->tz_info), &(t->zone_type), sizeof (t->zone_type), &(rfc_colon), sizeof (rfc_colon), &(isoyear), sizeof (isoyear), &(isoweek), sizeof (isoweek), &(t->z), sizeof (t->z), &(t->tz_abbr), sizeof (t->tz_abbr), &(t->dst), sizeof (t->dst), &(t->have_time), sizeof (t->have_time), &(t->have_date), sizeof (t->have_date), &(t->have_zone), sizeof (t->have_zone), &(t->have_relative), sizeof (t->have_relative), &(t->have_weeknr_day), sizeof (t->have_weeknr_day), &(t->sse_uptodate), sizeof (t->sse_uptodate), &(t->tim_uptodate), sizeof (t->tim_uptodate), &(t->is_localtime), sizeof (t->is_localtime)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	2,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	3,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	4,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	5,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	6,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	7,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	8,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	9,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	10,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	11,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	12,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	13,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	14,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	15,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	16,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	17,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	18,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	19,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	20,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	21,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	22,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	23,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	24,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	25,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	26,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	27,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	28,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	29,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	30,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	31,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	32,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	33,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	34,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	35,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	36,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	37,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	38,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	39,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	40,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	41,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	42,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	43,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	44,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	45,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	46,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	47,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	48,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	49,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	50,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	51,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	52,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	53,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	54,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	55,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	56,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	57,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	58,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	59,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	60,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	61,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	62,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	63,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	64,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	65,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	66,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	67,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	68,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	69,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	70,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	71,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	72,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	73,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	74,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	75,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	76,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	77,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	78,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	79,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	80,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	81,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	82,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	83,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	84,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	85,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	86,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	87,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	88,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	89,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	90,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	91,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	92,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	93,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	94,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	95,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	96,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	97,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	98,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	99,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	100,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	101,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	102,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	103,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	104,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	105,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	106,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	107,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	108,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	109,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	110,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	111,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	112,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	113,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	114,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	115,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	116,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	117,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	118,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	119,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	120,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	121,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	122,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	123,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	124,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	125,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	126,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	127,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	128,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	129,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	130,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	131,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	132,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	133,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	134,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	135,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	136,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	137,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	138,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	139,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	140,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	141,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	142,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	143,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	144,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	145,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	146,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	147,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	148,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	149,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	150,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	151,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	152,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	153,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	154,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	155,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	156,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	157,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	158,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	159,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	160,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	161,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	162,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	163,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	164,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	165,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	166,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	167,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	168,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	169,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	170,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	171,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	172,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	173,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	174,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	175,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	176,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	177,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	178,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	179,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	180,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	181,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	182,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	183,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	184,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	185,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	186,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	187,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	188,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	189,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	190,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	191,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	192,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	193,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	194,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	195,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	196,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	197,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	198,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	199,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	200,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	201,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	202,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	203,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	204,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	205,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	206,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	207,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	208,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	209,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	210,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	211,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	212,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	213,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	214,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	215,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	216,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	217,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	218,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	219,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	220,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	221,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	222,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	223,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	224,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	225,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	226,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	227,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	228,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	229,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	230,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	231,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	232,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	233,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	234,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	235,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	236,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	237,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	238,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	239,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	240,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	241,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	242,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	243,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	244,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	245,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	246,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	247,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	248,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	249,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	250,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	251,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	252,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	253,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	254,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	255,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	256,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	257,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	258,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	259,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	260,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	261,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	262,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	263,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	264,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	265,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	266,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	267,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	268,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	269,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	270,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	271,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	272,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	273,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	274,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	275,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	276,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	277,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	278,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	279,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	280,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	281,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	282,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	283,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	284,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	285,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	286,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	287,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	288,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	289,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	290,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	291,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	292,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	293,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	294,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	295,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	296,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	297,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	298,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	299,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	300,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	301,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	302,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	303,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	304,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	305,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	306,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	307,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	308,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	309,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	310,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	311,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	312,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	313,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	314,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	315,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	316,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	317,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	318,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	319,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	320,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	321,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	322,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	323,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	324,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	325,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	326,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	327,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	328,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	329,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	330,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	331,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	332,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	333,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	334,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	335,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	336,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	337,
									"scores":	[-7.205891773398224, -3.9705813916982233, -6.1288791826982241, -6.7032550286982229, -6.9447340776982225, -7.005065990698224, -7.7492682044982235, -7.7374331476982237, -7.7865596046982244, -7.7821117646982234, -7.7821117646982234, -7.7821117646982234, -8.0424628616982243, -7.7865596046982244, -8.22655971849822, -7.980520804698223, -7.1663746306982228, -7.1663746306982228, -7.1663746306982228, -7.980520804698223, -8.19140992169822, -7.980520804698223, -7.980520804698223, -7.980520804698223, -7.980520804698223, -7.980520804698223, -7.980520804698223, -7.980520804698223, -7.980520804698223, -7.980520804698223]
								}, {
									"case":	338,
									"scores":	[-7.3501127733982239, -4.1148023916982233, -6.273100182698224, -6.8474760286982228, -7.0889550776982224, -7.1492869906982239, -7.8934892044982234, -7.8816541476982236, -7.9307806046982243, -7.9263327646982233, -7.9263327646982233, -7.9263327646982233, -8.1866838616982243, -7.9307806046982243, -8.37078071849822, -8.1247418046982229, -7.3105956306982227, -7.3105956306982227, -7.3105956306982227, -8.1247418046982229, -8.33563092169822, -8.1247418046982229, -8.1247418046982229, -8.1247418046982229, -8.1247418046982229, -8.1247418046982229, -8.1247418046982229, -8.1247418046982229, -8.1247418046982229, -8.1247418046982229]
								}]
						}]
				}, {
					"line":	2968,
					"switches":	[]
				}, {
					"line":	2969,
					"switches":	[]
				}, {
					"line":	2970,
					"switches":	[]
				}, {
					"line":	2971,
					"switches":	[]
				}, {
					"line":	2973,
					"switches":	[{
							"switch":	4,
							"types":	[[], [], [], [], [297], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [], [], [], [213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296], [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212], [], [], [], [], [], []],
							"begin_line":	2974,
							"begin_column":	0,
							"end_line":	2974,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&tzobj->initialized, 0, sizeof (*(&tzobj->initialized)))", "memset(&tzobj->std, 0, sizeof (*(&tzobj->std)))", "memset(&tzobj->type, 0, sizeof (*(&tzobj->type)))", "memset(&tzobj->tzi, 0, sizeof (*(&tzobj->tzi)))", "memset(&tzobj->tzi.tz, 0, sizeof (*(&tzobj->tzi.tz)))", "memset(&tzobj->tzi.utc_offset, 0, sizeof (*(&tzobj->tzi.utc_offset)))", "memset(&tzobj->tzi.z, 0, sizeof (*(&tzobj->tzi.z)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(tzobj->tzi.tz, 0, sizeof (*(tzobj->tzi.tz)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((timezone_object)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_efree(((timezone_object)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((timezone_object)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((timezone_object))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((timezone_object)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((timezone_object))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(timezone_object)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((timezone_object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((timezone_object))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "free((tzobj)->tzi.z.abbr)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((timezone_object))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((timezone_object)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((timezone_object))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((timezone_object))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((tzobj), 0, sizeof(php_timezone_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_date, (timezone_object))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_interval, (timezone_object))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "php_date_instantiate(date_ce_timezone, (timezone_object))", "timelib_set_timezone((dateobj)->time, tzobj->tzi.tz)", "timelib_set_timezone(dateobj->time, (tzobj)->tzi.tz)", "timelib_time_dtor((dateobj)->time)", "timelib_unixtime2local((dateobj)->time, dateobj->time->sse)", "timelib_unixtime2local(dateobj->time, (dateobj)->time->sse)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "tzobj = (tzobj)", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(tzobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((timezone_object))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_from_error_container((timezone_object), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((timezone_object), 0)", "zval_set_refcount_p((timezone_object), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((timezone_object))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_set_timezone(dateobj->time, tzobj->tzi.tz)", "timelib_unixtime2local(dateobj->time, dateobj->time->sse)", "tzobj = (php_timezone_obj *)zend_object_store_get_object(timezone_object)", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2974\", 79, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(timezone_object), sizeof (timezone_object), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(tzobj), sizeof (tzobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences), &(date_ce_timezone->type), sizeof (date_ce_timezone->type), &(date_ce_timezone->name), sizeof (date_ce_timezone->name), &(date_ce_timezone->name_length), sizeof (date_ce_timezone->name_length), &(date_ce_timezone->parent), sizeof (date_ce_timezone->parent), &(date_ce_timezone->refcount), sizeof (date_ce_timezone->refcount), &(date_ce_timezone->ce_flags), sizeof (date_ce_timezone->ce_flags), &(date_ce_timezone->default_properties_table), sizeof (date_ce_timezone->default_properties_table), &(date_ce_timezone->default_static_members_table), sizeof (date_ce_timezone->default_static_members_table), &(date_ce_timezone->static_members_table), sizeof (date_ce_timezone->static_members_table), &(date_ce_timezone->default_properties_count), sizeof (date_ce_timezone->default_properties_count), &(date_ce_timezone->default_static_members_count), sizeof (date_ce_timezone->default_static_members_count), &(date_ce_timezone->constructor), sizeof (date_ce_timezone->constructor), &(date_ce_timezone->destructor), sizeof (date_ce_timezone->destructor), &(date_ce_timezone->clone), sizeof (date_ce_timezone->clone), &(date_ce_timezone->__get), sizeof (date_ce_timezone->__get), &(date_ce_timezone->__set), sizeof (date_ce_timezone->__set), &(date_ce_timezone->__unset), sizeof (date_ce_timezone->__unset), &(date_ce_timezone->__isset), sizeof (date_ce_timezone->__isset), &(date_ce_timezone->__call), sizeof (date_ce_timezone->__call), &(date_ce_timezone->__callstatic), sizeof (date_ce_timezone->__callstatic), &(date_ce_timezone->__tostring), sizeof (date_ce_timezone->__tostring), &(date_ce_timezone->serialize_func), sizeof (date_ce_timezone->serialize_func), &(date_ce_timezone->unserialize_func), sizeof (date_ce_timezone->unserialize_func), &(date_ce_timezone->create_object), sizeof (date_ce_timezone->create_object), &(date_ce_timezone->get_iterator), sizeof (date_ce_timezone->get_iterator), &(date_ce_timezone->interface_gets_implemented), sizeof (date_ce_timezone->interface_gets_implemented), &(date_ce_timezone->get_static_method), sizeof (date_ce_timezone->get_static_method), &(date_ce_timezone->serialize), sizeof (date_ce_timezone->serialize), &(date_ce_timezone->unserialize), sizeof (date_ce_timezone->unserialize), &(date_ce_timezone->interfaces), sizeof (date_ce_timezone->interfaces), &(date_ce_timezone->num_interfaces), sizeof (date_ce_timezone->num_interfaces), &(date_ce_timezone->traits), sizeof (date_ce_timezone->traits), &(date_ce_timezone->num_traits), sizeof (date_ce_timezone->num_traits), &(date_ce_timezone->trait_aliases), sizeof (date_ce_timezone->trait_aliases), &(date_ce_timezone->trait_precedences), sizeof (date_ce_timezone->trait_precedences)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	2,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	3,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	4,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	5,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	6,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	7,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	8,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	9,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	10,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	11,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	12,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	13,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	14,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	15,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	16,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	17,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	18,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	19,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	20,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	21,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	22,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	23,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	24,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	25,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	26,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	27,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	28,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	29,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	30,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	31,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	32,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	33,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	34,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	35,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	36,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	37,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	166,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	167,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	168,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	169,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	170,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	171,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	172,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	173,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	174,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	175,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	176,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	177,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	178,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	179,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	180,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	181,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	182,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	183,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	184,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	185,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	186,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	187,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	188,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	189,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	190,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	191,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	192,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	193,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	194,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	195,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	196,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	197,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	198,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	199,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	200,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	201,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	202,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	203,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	204,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	205,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	206,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	207,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	208,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	209,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	210,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	211,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	212,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	213,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	214,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	215,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	216,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	217,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	218,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	219,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	220,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	221,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	222,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	223,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	224,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	225,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	226,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	227,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	228,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	229,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	230,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	231,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	232,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	233,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	234,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	235,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	236,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	237,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	238,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	239,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	240,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	241,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	242,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	243,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	244,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	245,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	246,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	247,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	248,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	249,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	250,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	251,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	252,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	253,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	254,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	255,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	256,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	257,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	258,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	259,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	260,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	261,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	262,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	263,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	264,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	265,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	266,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	267,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	268,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	269,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	270,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	271,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	272,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	273,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	274,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	275,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	276,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	277,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	278,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	279,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	280,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	281,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	282,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	283,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	284,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	285,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	286,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	287,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	288,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	289,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	290,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	291,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	292,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	293,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	294,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	295,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	296,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	297,
									"scores":	[-9.3776023544356, -9.6236412682356, -10.0108058202356, -10.6858921672356, -9.8456130762356, -9.8456130762356, -10.4789492372356, -11.2769536141356, -10.4418488372356, -11.0099560974356, -11.2208452144356, -10.5090210974356, -11.2559950112356, -11.0099560974356, -11.0099560974356, -11.2208452144356, -11.2208452144356, -11.2208452144356, -11.0099560974356, -11.0099560974356, -11.2208452144356, -11.2208452144356, -11.2208452144356, -11.2208452144356, -11.2208452144356, -11.2208452144356, -11.2208452144356, -11.2208452144356, -11.2208452144356, -11.2208452144356, -11.2208452144356, -11.2208452144356, -11.0099560974356, -11.0099560974356, -11.0099560974356, -11.0099560974356, -11.0099560974356, -11.0099560974356, -11.2208452144356, -11.0099560974356, -11.2208452144356, -11.0099560974356, -11.2208452144356, -11.2208452144356, -11.0099560974356, -11.2208452144356, -10.5090210974356, -11.2559950112356, -11.0099560974356, -11.0099560974356, -11.2208452144356, -11.2208452144356, -11.2208452144356, -11.0099560974356, -11.0099560974356, -11.2208452144356, -11.2208452144356, -11.2208452144356, -11.2208452144356, -11.2208452144356, -11.2208452144356, -11.2208452144356, -11.2208452144356, -11.2208452144356, -11.2208452144356, -11.2208452144356, -11.2208452144356, -11.0099560974356, -11.0099560974356, -11.0099560974356, -11.0099560974356, -11.0099560974356, -11.0099560974356, -11.2208452144356, -11.0099560974356, -11.2208452144356, -11.0099560974356, -11.2208452144356, -11.2208452144356]
								}]
						}, {
							"switch":	5,
							"types":	[[6], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5], []],
							"begin_line":	2974,
							"begin_column":	2,
							"end_line":	2976,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L2974\", 79, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(timezone_object), sizeof (timezone_object), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(tzobj), sizeof (tzobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences), &(date_ce_timezone->type), sizeof (date_ce_timezone->type), &(date_ce_timezone->name), sizeof (date_ce_timezone->name), &(date_ce_timezone->name_length), sizeof (date_ce_timezone->name_length), &(date_ce_timezone->parent), sizeof (date_ce_timezone->parent), &(date_ce_timezone->refcount), sizeof (date_ce_timezone->refcount), &(date_ce_timezone->ce_flags), sizeof (date_ce_timezone->ce_flags), &(date_ce_timezone->default_properties_table), sizeof (date_ce_timezone->default_properties_table), &(date_ce_timezone->default_static_members_table), sizeof (date_ce_timezone->default_static_members_table), &(date_ce_timezone->static_members_table), sizeof (date_ce_timezone->static_members_table), &(date_ce_timezone->default_properties_count), sizeof (date_ce_timezone->default_properties_count), &(date_ce_timezone->default_static_members_count), sizeof (date_ce_timezone->default_static_members_count), &(date_ce_timezone->constructor), sizeof (date_ce_timezone->constructor), &(date_ce_timezone->destructor), sizeof (date_ce_timezone->destructor), &(date_ce_timezone->clone), sizeof (date_ce_timezone->clone), &(date_ce_timezone->__get), sizeof (date_ce_timezone->__get), &(date_ce_timezone->__set), sizeof (date_ce_timezone->__set), &(date_ce_timezone->__unset), sizeof (date_ce_timezone->__unset), &(date_ce_timezone->__isset), sizeof (date_ce_timezone->__isset), &(date_ce_timezone->__call), sizeof (date_ce_timezone->__call), &(date_ce_timezone->__callstatic), sizeof (date_ce_timezone->__callstatic), &(date_ce_timezone->__tostring), sizeof (date_ce_timezone->__tostring), &(date_ce_timezone->serialize_func), sizeof (date_ce_timezone->serialize_func), &(date_ce_timezone->unserialize_func), sizeof (date_ce_timezone->unserialize_func), &(date_ce_timezone->create_object), sizeof (date_ce_timezone->create_object), &(date_ce_timezone->get_iterator), sizeof (date_ce_timezone->get_iterator), &(date_ce_timezone->interface_gets_implemented), sizeof (date_ce_timezone->interface_gets_implemented), &(date_ce_timezone->get_static_method), sizeof (date_ce_timezone->get_static_method), &(date_ce_timezone->serialize), sizeof (date_ce_timezone->serialize), &(date_ce_timezone->unserialize), sizeof (date_ce_timezone->unserialize), &(date_ce_timezone->interfaces), sizeof (date_ce_timezone->interfaces), &(date_ce_timezone->num_interfaces), sizeof (date_ce_timezone->num_interfaces), &(date_ce_timezone->traits), sizeof (date_ce_timezone->traits), &(date_ce_timezone->num_traits), sizeof (date_ce_timezone->num_traits), &(date_ce_timezone->trait_aliases), sizeof (date_ce_timezone->trait_aliases), &(date_ce_timezone->trait_precedences), sizeof (date_ce_timezone->trait_precedences))) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((zend_parse_method_parameters((ht), (this_ptr), \"OO\", &object, date_ce_date, &timezone_object, date_ce_timezone) == -1) || __is_neg(\"\", \"L2974\", 79, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(timezone_object), sizeof (timezone_object), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(tzobj), sizeof (tzobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences), &(date_ce_timezone->type), sizeof (date_ce_timezone->type), &(date_ce_timezone->name), sizeof (date_ce_timezone->name), &(date_ce_timezone->name_length), sizeof (date_ce_timezone->name_length), &(date_ce_timezone->parent), sizeof (date_ce_timezone->parent), &(date_ce_timezone->refcount), sizeof (date_ce_timezone->refcount), &(date_ce_timezone->ce_flags), sizeof (date_ce_timezone->ce_flags), &(date_ce_timezone->default_properties_table), sizeof (date_ce_timezone->default_properties_table), &(date_ce_timezone->default_static_members_table), sizeof (date_ce_timezone->default_static_members_table), &(date_ce_timezone->static_members_table), sizeof (date_ce_timezone->static_members_table), &(date_ce_timezone->default_properties_count), sizeof (date_ce_timezone->default_properties_count), &(date_ce_timezone->default_static_members_count), sizeof (date_ce_timezone->default_static_members_count), &(date_ce_timezone->constructor), sizeof (date_ce_timezone->constructor), &(date_ce_timezone->destructor), sizeof (date_ce_timezone->destructor), &(date_ce_timezone->clone), sizeof (date_ce_timezone->clone), &(date_ce_timezone->__get), sizeof (date_ce_timezone->__get), &(date_ce_timezone->__set), sizeof (date_ce_timezone->__set), &(date_ce_timezone->__unset), sizeof (date_ce_timezone->__unset), &(date_ce_timezone->__isset), sizeof (date_ce_timezone->__isset), &(date_ce_timezone->__call), sizeof (date_ce_timezone->__call), &(date_ce_timezone->__callstatic), sizeof (date_ce_timezone->__callstatic), &(date_ce_timezone->__tostring), sizeof (date_ce_timezone->__tostring), &(date_ce_timezone->serialize_func), sizeof (date_ce_timezone->serialize_func), &(date_ce_timezone->unserialize_func), sizeof (date_ce_timezone->unserialize_func), &(date_ce_timezone->create_object), sizeof (date_ce_timezone->create_object), &(date_ce_timezone->get_iterator), sizeof (date_ce_timezone->get_iterator), &(date_ce_timezone->interface_gets_implemented), sizeof (date_ce_timezone->interface_gets_implemented), &(date_ce_timezone->get_static_method), sizeof (date_ce_timezone->get_static_method), &(date_ce_timezone->serialize), sizeof (date_ce_timezone->serialize), &(date_ce_timezone->unserialize), sizeof (date_ce_timezone->unserialize), &(date_ce_timezone->interfaces), sizeof (date_ce_timezone->interfaces), &(date_ce_timezone->num_interfaces), sizeof (date_ce_timezone->num_interfaces), &(date_ce_timezone->traits), sizeof (date_ce_timezone->traits), &(date_ce_timezone->num_traits), sizeof (date_ce_timezone->num_traits), &(date_ce_timezone->trait_aliases), sizeof (date_ce_timezone->trait_aliases), &(date_ce_timezone->trait_precedences), sizeof (date_ce_timezone->trait_precedences))) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if (dprintf((ht), (this_ptr), \"OO\", &object, date_ce_date, &timezone_object, date_ce_timezone) == -1) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if (zend_get_parameters_ex((ht), (this_ptr), \"OO\", &object, date_ce_date, &timezone_object, date_ce_timezone) == -1) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if (zend_parse_parameters((ht), (this_ptr), \"OO\", &object, date_ce_date, &timezone_object, date_ce_timezone) == -1) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((zend_parse_method_parameters((ht), (this_ptr), \"OO\", &object, date_ce_date, &timezone_object, date_ce_timezone) == -1) && !__is_neg(\"\", \"L2974\", 79, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(timezone_object), sizeof (timezone_object), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(tzobj), sizeof (tzobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences), &(date_ce_timezone->type), sizeof (date_ce_timezone->type), &(date_ce_timezone->name), sizeof (date_ce_timezone->name), &(date_ce_timezone->name_length), sizeof (date_ce_timezone->name_length), &(date_ce_timezone->parent), sizeof (date_ce_timezone->parent), &(date_ce_timezone->refcount), sizeof (date_ce_timezone->refcount), &(date_ce_timezone->ce_flags), sizeof (date_ce_timezone->ce_flags), &(date_ce_timezone->default_properties_table), sizeof (date_ce_timezone->default_properties_table), &(date_ce_timezone->default_static_members_table), sizeof (date_ce_timezone->default_static_members_table), &(date_ce_timezone->static_members_table), sizeof (date_ce_timezone->static_members_table), &(date_ce_timezone->default_properties_count), sizeof (date_ce_timezone->default_properties_count), &(date_ce_timezone->default_static_members_count), sizeof (date_ce_timezone->default_static_members_count), &(date_ce_timezone->constructor), sizeof (date_ce_timezone->constructor), &(date_ce_timezone->destructor), sizeof (date_ce_timezone->destructor), &(date_ce_timezone->clone), sizeof (date_ce_timezone->clone), &(date_ce_timezone->__get), sizeof (date_ce_timezone->__get), &(date_ce_timezone->__set), sizeof (date_ce_timezone->__set), &(date_ce_timezone->__unset), sizeof (date_ce_timezone->__unset), &(date_ce_timezone->__isset), sizeof (date_ce_timezone->__isset), &(date_ce_timezone->__call), sizeof (date_ce_timezone->__call), &(date_ce_timezone->__callstatic), sizeof (date_ce_timezone->__callstatic), &(date_ce_timezone->__tostring), sizeof (date_ce_timezone->__tostring), &(date_ce_timezone->serialize_func), sizeof (date_ce_timezone->serialize_func), &(date_ce_timezone->unserialize_func), sizeof (date_ce_timezone->unserialize_func), &(date_ce_timezone->create_object), sizeof (date_ce_timezone->create_object), &(date_ce_timezone->get_iterator), sizeof (date_ce_timezone->get_iterator), &(date_ce_timezone->interface_gets_implemented), sizeof (date_ce_timezone->interface_gets_implemented), &(date_ce_timezone->get_static_method), sizeof (date_ce_timezone->get_static_method), &(date_ce_timezone->serialize), sizeof (date_ce_timezone->serialize), &(date_ce_timezone->unserialize), sizeof (date_ce_timezone->unserialize), &(date_ce_timezone->interfaces), sizeof (date_ce_timezone->interfaces), &(date_ce_timezone->num_interfaces), sizeof (date_ce_timezone->num_interfaces), &(date_ce_timezone->traits), sizeof (date_ce_timezone->traits), &(date_ce_timezone->num_traits), sizeof (date_ce_timezone->num_traits), &(date_ce_timezone->trait_aliases), sizeof (date_ce_timezone->trait_aliases), &(date_ce_timezone->trait_precedences), sizeof (date_ce_timezone->trait_precedences))) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.8627493644281445, -2.6206374644281443, -1.9065308334281452, -2.5843710644281441, -2.6433418044281445, -2.6433418044281445, -3.3340727644281447, -3.3103796433281452, -3.0397219644281446, -2.8066786744281447, -3.2759386744281449, -2.4846676444281446, -3.5645667744281448, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -2.8066786744281447, -3.2759386744281449, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449, -2.8066786744281447, -3.2759386744281449, -2.4846676444281446, -3.5645667744281448, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -2.8066786744281447, -3.2759386744281449, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449]
								}, {
									"case":	2,
									"scores":	[-4.5662482103281468, -5.3241363103281465, -4.6100296793281457, -5.2878699103281459, -5.3468406503281471, -5.3468406503281471, -6.0375716103281469, -6.0138784892281461, -5.7432208103281468, -5.5101775203281464, -5.9794375203281458, -5.1881664903281468, -6.2680656203281462, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.5101775203281464, -5.9794375203281458, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458, -5.5101775203281464, -5.9794375203281458, -5.1881664903281468, -6.2680656203281462, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.5101775203281464, -5.9794375203281458, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-4.5662482103281468, -5.3241363103281465, -4.6100296793281457, -5.2878699103281459, -5.3468406503281471, -5.3468406503281471, -6.0375716103281469, -6.0138784892281461, -5.7432208103281468, -5.5101775203281464, -5.9794375203281458, -5.1881664903281468, -6.2680656203281462, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.5101775203281464, -5.9794375203281458, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458, -5.5101775203281464, -5.9794375203281458, -5.1881664903281468, -6.2680656203281462, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.5101775203281464, -5.9794375203281458, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458]
								}]
						}, {
							"switch":	6,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	2974,
							"begin_column":	2,
							"end_line":	2976,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L2974\", 79, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(timezone_object), sizeof (timezone_object), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(tzobj), sizeof (tzobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences), &(date_ce_timezone->type), sizeof (date_ce_timezone->type), &(date_ce_timezone->name), sizeof (date_ce_timezone->name), &(date_ce_timezone->name_length), sizeof (date_ce_timezone->name_length), &(date_ce_timezone->parent), sizeof (date_ce_timezone->parent), &(date_ce_timezone->refcount), sizeof (date_ce_timezone->refcount), &(date_ce_timezone->ce_flags), sizeof (date_ce_timezone->ce_flags), &(date_ce_timezone->default_properties_table), sizeof (date_ce_timezone->default_properties_table), &(date_ce_timezone->default_static_members_table), sizeof (date_ce_timezone->default_static_members_table), &(date_ce_timezone->static_members_table), sizeof (date_ce_timezone->static_members_table), &(date_ce_timezone->default_properties_count), sizeof (date_ce_timezone->default_properties_count), &(date_ce_timezone->default_static_members_count), sizeof (date_ce_timezone->default_static_members_count), &(date_ce_timezone->constructor), sizeof (date_ce_timezone->constructor), &(date_ce_timezone->destructor), sizeof (date_ce_timezone->destructor), &(date_ce_timezone->clone), sizeof (date_ce_timezone->clone), &(date_ce_timezone->__get), sizeof (date_ce_timezone->__get), &(date_ce_timezone->__set), sizeof (date_ce_timezone->__set), &(date_ce_timezone->__unset), sizeof (date_ce_timezone->__unset), &(date_ce_timezone->__isset), sizeof (date_ce_timezone->__isset), &(date_ce_timezone->__call), sizeof (date_ce_timezone->__call), &(date_ce_timezone->__callstatic), sizeof (date_ce_timezone->__callstatic), &(date_ce_timezone->__tostring), sizeof (date_ce_timezone->__tostring), &(date_ce_timezone->serialize_func), sizeof (date_ce_timezone->serialize_func), &(date_ce_timezone->unserialize_func), sizeof (date_ce_timezone->unserialize_func), &(date_ce_timezone->create_object), sizeof (date_ce_timezone->create_object), &(date_ce_timezone->get_iterator), sizeof (date_ce_timezone->get_iterator), &(date_ce_timezone->interface_gets_implemented), sizeof (date_ce_timezone->interface_gets_implemented), &(date_ce_timezone->get_static_method), sizeof (date_ce_timezone->get_static_method), &(date_ce_timezone->serialize), sizeof (date_ce_timezone->serialize), &(date_ce_timezone->unserialize), sizeof (date_ce_timezone->unserialize), &(date_ce_timezone->interfaces), sizeof (date_ce_timezone->interfaces), &(date_ce_timezone->num_interfaces), sizeof (date_ce_timezone->num_interfaces), &(date_ce_timezone->traits), sizeof (date_ce_timezone->traits), &(date_ce_timezone->num_traits), sizeof (date_ce_timezone->num_traits), &(date_ce_timezone->trait_aliases), sizeof (date_ce_timezone->trait_aliases), &(date_ce_timezone->trait_precedences), sizeof (date_ce_timezone->trait_precedences)))\n    if (zend_parse_method_parameters((ht), (this_ptr), \"OO\", &object, date_ce_date, &timezone_object, date_ce_timezone) == -1) {\n        {\n            do {\n                zval *__z = (return_value);\n                (*__z).value.lval = ((0) != 0);\n                (*__z).type = 3;\n            } while (0);\n            return;\n        }\n        ;\n    }\n", "if (!__is_neg(\"\", \"L2974\", 79, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(timezone_object), sizeof (timezone_object), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(tzobj), sizeof (tzobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences), &(date_ce_timezone->type), sizeof (date_ce_timezone->type), &(date_ce_timezone->name), sizeof (date_ce_timezone->name), &(date_ce_timezone->name_length), sizeof (date_ce_timezone->name_length), &(date_ce_timezone->parent), sizeof (date_ce_timezone->parent), &(date_ce_timezone->refcount), sizeof (date_ce_timezone->refcount), &(date_ce_timezone->ce_flags), sizeof (date_ce_timezone->ce_flags), &(date_ce_timezone->default_properties_table), sizeof (date_ce_timezone->default_properties_table), &(date_ce_timezone->default_static_members_table), sizeof (date_ce_timezone->default_static_members_table), &(date_ce_timezone->static_members_table), sizeof (date_ce_timezone->static_members_table), &(date_ce_timezone->default_properties_count), sizeof (date_ce_timezone->default_properties_count), &(date_ce_timezone->default_static_members_count), sizeof (date_ce_timezone->default_static_members_count), &(date_ce_timezone->constructor), sizeof (date_ce_timezone->constructor), &(date_ce_timezone->destructor), sizeof (date_ce_timezone->destructor), &(date_ce_timezone->clone), sizeof (date_ce_timezone->clone), &(date_ce_timezone->__get), sizeof (date_ce_timezone->__get), &(date_ce_timezone->__set), sizeof (date_ce_timezone->__set), &(date_ce_timezone->__unset), sizeof (date_ce_timezone->__unset), &(date_ce_timezone->__isset), sizeof (date_ce_timezone->__isset), &(date_ce_timezone->__call), sizeof (date_ce_timezone->__call), &(date_ce_timezone->__callstatic), sizeof (date_ce_timezone->__callstatic), &(date_ce_timezone->__tostring), sizeof (date_ce_timezone->__tostring), &(date_ce_timezone->serialize_func), sizeof (date_ce_timezone->serialize_func), &(date_ce_timezone->unserialize_func), sizeof (date_ce_timezone->unserialize_func), &(date_ce_timezone->create_object), sizeof (date_ce_timezone->create_object), &(date_ce_timezone->get_iterator), sizeof (date_ce_timezone->get_iterator), &(date_ce_timezone->interface_gets_implemented), sizeof (date_ce_timezone->interface_gets_implemented), &(date_ce_timezone->get_static_method), sizeof (date_ce_timezone->get_static_method), &(date_ce_timezone->serialize), sizeof (date_ce_timezone->serialize), &(date_ce_timezone->unserialize), sizeof (date_ce_timezone->unserialize), &(date_ce_timezone->interfaces), sizeof (date_ce_timezone->interfaces), &(date_ce_timezone->num_interfaces), sizeof (date_ce_timezone->num_interfaces), &(date_ce_timezone->traits), sizeof (date_ce_timezone->traits), &(date_ce_timezone->num_traits), sizeof (date_ce_timezone->num_traits), &(date_ce_timezone->trait_aliases), sizeof (date_ce_timezone->trait_aliases), &(date_ce_timezone->trait_precedences), sizeof (date_ce_timezone->trait_precedences)) && (zend_parse_method_parameters((ht), (this_ptr), \"OO\", &object, date_ce_date, &timezone_object, date_ce_timezone) == -1)) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.4671142874355985, -8.2250023874356, -7.5108957564355983, -8.1887359874356, -8.2477067274356, -8.2477067274356, -8.9384376874356, -8.9147445663356, -8.6440868874356, -8.4110435974356, -8.8803035974356, -8.0890325674356, -9.1689316974356, -8.4110435974356, -8.4110435974356, -8.8803035974356, -8.8803035974356, -8.8803035974356, -8.4110435974356, -8.4110435974356, -8.8803035974356, -8.8803035974356, -8.8803035974356, -8.8803035974356, -8.8803035974356, -8.8803035974356, -8.8803035974356, -8.8803035974356, -8.8803035974356, -8.8803035974356, -8.8803035974356, -8.8803035974356, -8.4110435974356, -8.4110435974356, -8.4110435974356, -8.4110435974356, -8.4110435974356, -8.4110435974356, -8.8803035974356, -8.4110435974356, -8.8803035974356, -8.4110435974356, -8.8803035974356, -8.8803035974356, -8.4110435974356, -8.8803035974356, -8.0890325674356, -9.1689316974356, -8.4110435974356, -8.4110435974356, -8.8803035974356, -8.8803035974356, -8.8803035974356, -8.4110435974356, -8.4110435974356, -8.8803035974356, -8.8803035974356, -8.8803035974356, -8.8803035974356, -8.8803035974356, -8.8803035974356, -8.8803035974356, -8.8803035974356, -8.8803035974356, -8.8803035974356, -8.8803035974356, -8.8803035974356, -8.4110435974356, -8.4110435974356, -8.4110435974356, -8.4110435974356, -8.4110435974356, -8.4110435974356, -8.8803035974356, -8.4110435974356, -8.8803035974356, -8.4110435974356, -8.8803035974356, -8.8803035974356]
								}, {
									"case":	2,
									"scores":	[-8.2895012223356, -9.0473893223356, -8.3332826913356, -9.0111229223356, -9.0700936623356, -9.0700936623356, -9.7608246223356, -9.7371315012356, -9.4664738223356, -9.2334305323356, -9.7026905323356, -8.9114195023356, -9.9913186323356, -9.2334305323356, -9.2334305323356, -9.7026905323356, -9.7026905323356, -9.7026905323356, -9.2334305323356, -9.2334305323356, -9.7026905323356, -9.7026905323356, -9.7026905323356, -9.7026905323356, -9.7026905323356, -9.7026905323356, -9.7026905323356, -9.7026905323356, -9.7026905323356, -9.7026905323356, -9.7026905323356, -9.7026905323356, -9.2334305323356, -9.2334305323356, -9.2334305323356, -9.2334305323356, -9.2334305323356, -9.2334305323356, -9.7026905323356, -9.2334305323356, -9.7026905323356, -9.2334305323356, -9.7026905323356, -9.7026905323356, -9.2334305323356, -9.7026905323356, -8.9114195023356, -9.9913186323356, -9.2334305323356, -9.2334305323356, -9.7026905323356, -9.7026905323356, -9.7026905323356, -9.2334305323356, -9.2334305323356, -9.7026905323356, -9.7026905323356, -9.7026905323356, -9.7026905323356, -9.7026905323356, -9.7026905323356, -9.7026905323356, -9.7026905323356, -9.7026905323356, -9.7026905323356, -9.7026905323356, -9.7026905323356, -9.2334305323356, -9.2334305323356, -9.2334305323356, -9.2334305323356, -9.2334305323356, -9.2334305323356, -9.7026905323356, -9.2334305323356, -9.7026905323356, -9.2334305323356, -9.7026905323356, -9.7026905323356]
								}]
						}]
				}, {
					"line":	2976,
					"switches":	[{
							"switch":	7,
							"types":	[[], [], [], [], [298], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [], [], [], [214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], [], [], [], [], [], []],
							"begin_line":	2977,
							"begin_column":	0,
							"end_line":	2977,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&tzobj->initialized, 0, sizeof (*(&tzobj->initialized)))", "memset(&tzobj->std, 0, sizeof (*(&tzobj->std)))", "memset(&tzobj->type, 0, sizeof (*(&tzobj->type)))", "memset(&tzobj->tzi, 0, sizeof (*(&tzobj->tzi)))", "memset(&tzobj->tzi.tz, 0, sizeof (*(&tzobj->tzi.tz)))", "memset(&tzobj->tzi.utc_offset, 0, sizeof (*(&tzobj->tzi.utc_offset)))", "memset(&tzobj->tzi.z, 0, sizeof (*(&tzobj->tzi.z)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(tzobj->tzi.tz, 0, sizeof (*(tzobj->tzi.tz)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((timezone_object)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_efree(((timezone_object)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((timezone_object)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((timezone_object))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((timezone_object)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((timezone_object))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(timezone_object)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((timezone_object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((timezone_object))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "free((tzobj)->tzi.z.abbr)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((timezone_object))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((timezone_object)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((timezone_object))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((timezone_object))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((tzobj), 0, sizeof(php_timezone_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_date, (timezone_object))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_interval, (timezone_object))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "php_date_instantiate(date_ce_timezone, (timezone_object))", "timelib_set_timezone((dateobj)->time, tzobj->tzi.tz)", "timelib_set_timezone(dateobj->time, (tzobj)->tzi.tz)", "timelib_time_dtor((dateobj)->time)", "timelib_unixtime2local((dateobj)->time, dateobj->time->sse)", "timelib_unixtime2local(dateobj->time, (dateobj)->time->sse)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "tzobj = (tzobj)", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(tzobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((timezone_object))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_from_error_container((timezone_object), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((timezone_object), 0)", "zval_set_refcount_p((timezone_object), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((timezone_object))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_set_timezone(dateobj->time, tzobj->tzi.tz)", "timelib_unixtime2local(dateobj->time, dateobj->time->sse)", "tzobj = (php_timezone_obj *)zend_object_store_get_object(timezone_object)", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2977\", 31, &(object), sizeof (object), &(dateobj), sizeof (dateobj), &(return_value), sizeof (return_value), &(dateobj->time), sizeof (dateobj->time), &(timezone_object), sizeof (timezone_object), &(tzobj), sizeof (tzobj), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	2,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	3,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	4,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	5,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	6,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	7,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	8,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	9,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	10,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	11,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	12,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	13,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	14,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	15,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	16,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	17,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	18,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	19,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	20,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	21,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	22,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	23,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	24,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	25,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	26,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	27,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	28,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	29,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	30,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	31,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	32,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	33,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	34,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	35,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	36,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	37,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	38,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	39,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	40,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	41,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	42,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	43,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	44,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	45,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	46,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	47,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	48,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	49,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	50,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	51,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	52,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	53,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	54,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	55,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	56,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	57,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	58,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	59,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	60,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	61,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	62,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	63,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	64,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	65,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	66,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	67,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	68,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	69,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	70,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	71,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	72,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	73,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	74,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	75,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	76,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	77,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	78,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	79,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	80,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	81,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	82,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	83,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	84,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	85,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	86,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	87,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	88,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	89,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	90,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	91,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	92,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	93,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	94,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	95,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	96,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	97,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	98,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	99,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	100,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	101,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	102,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	103,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	104,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	105,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	106,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	107,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	108,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	109,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	110,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	111,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	112,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	113,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	114,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	115,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	116,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	117,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	118,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	119,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	120,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	121,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	122,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	123,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	124,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	125,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	126,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	127,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	128,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	129,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	130,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	131,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	132,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	133,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	134,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	135,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	136,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	137,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	138,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	139,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	140,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	141,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	142,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	143,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	144,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	145,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	146,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	147,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	148,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	149,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	150,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	151,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	152,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	153,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	154,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	155,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	156,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	157,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	158,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	159,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	160,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	161,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	162,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	163,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	164,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	165,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	166,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	167,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	168,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	169,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	170,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	171,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	172,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	173,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	174,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	175,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	176,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	177,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	178,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	179,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	180,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	181,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	182,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	183,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	184,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	185,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	186,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	187,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	188,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	189,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	190,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	191,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	192,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	193,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	194,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	195,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	196,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	197,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	198,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	199,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	200,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	201,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	202,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	203,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	204,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	205,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	206,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	207,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	208,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	209,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	210,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	211,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	212,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	213,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	214,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	215,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	216,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	217,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	218,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	219,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	220,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	221,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	222,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	223,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	224,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	225,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	226,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	227,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	228,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	229,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	230,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	231,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	232,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	233,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	234,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	235,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	236,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	237,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	238,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	239,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	240,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	241,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	242,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	243,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	244,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	245,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	246,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	247,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	248,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	249,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	250,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	251,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	252,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	253,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	254,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	255,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	256,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	257,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	258,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	259,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	260,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	261,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	262,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	263,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	264,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	265,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	266,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	267,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	268,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	269,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	270,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	271,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	272,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	273,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	274,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	275,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	276,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	277,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	278,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	279,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	280,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	281,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	282,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	283,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	284,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	285,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	286,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	287,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	288,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	289,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	290,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	291,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	292,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	293,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	294,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	295,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	296,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	297,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	298,
									"scores":	[-6.4568883960275345, -9.3468252229275333, -9.4074491250275347, -10.184494899027534, -8.6313100180275342, -9.338950245027533, -9.1815242912275341, -9.4275632050275338, -9.6495350130275348, -9.6495350130275348, -9.9384559852275345, -10.184494899027534, -9.9384559852275345, -9.9384559852275345, -9.9384559852275345, -9.9384559852275345, -9.9384559852275345, -9.9384559852275345, -9.9384559852275345, -10.149345102227533, -10.184494899027534, -9.9384559852275345, -9.9384559852275345, -9.9384559852275345, -9.9384559852275345, -9.9384559852275345, -9.9384559852275345, -9.9384559852275345, -9.9384559852275345, -9.9384559852275345, -9.9384559852275345]
								}]
						}, {
							"switch":	8,
							"types":	[[], [], [1], [], [], [], [3, 4], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2977,
							"begin_column":	2,
							"end_line":	2977,
							"end_column":	74,
							"patch_codes":	["if (!__is_neg(\"\", \"L2977\", 31, &(object), sizeof (object), &(dateobj), sizeof (dateobj), &(return_value), sizeof (return_value), &(dateobj->time), sizeof (dateobj->time), &(timezone_object), sizeof (timezone_object), &(tzobj), sizeof (tzobj), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj = (php_date_obj *)zend_object_store_get_object(object);\n", "{\n}\n", "dateobj = (dateobj)", "dateobj = (php_date_obj *)zend_object_store_get_object(object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.8265377092275337, -8.7419850341275342, -8.5252055752275346, -8.7556995852275339, -7.9492830582275342, -8.097748195227533, -7.8563003212275344, -8.6141884212275333, -8.6368927612275339, -8.6368927612275339, -7.9978114852275333, -8.7556995852275339, -7.9978114852275333, -7.9978114852275333, -7.9978114852275333, -7.9978114852275333, -7.9978114852275333, -7.9978114852275333, -7.9978114852275333, -8.4670714852275335, -8.7556995852275339, -7.9978114852275333, -7.9978114852275333, -7.9978114852275333, -7.9978114852275333, -7.9978114852275333, -7.9978114852275333, -7.9978114852275333, -7.9978114852275333, -7.9978114852275333, -7.9978114852275333]
								}, {
									"case":	2,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	3,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	4,
									"scores":	[-5.8716856152275341]
								}]
						}]
				}, {
					"line":	2977,
					"switches":	[{
							"switch":	9,
							"types":	[[], [], [], [], [298], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [], [], [], [214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], [], [], [], [], [], []],
							"begin_line":	2978,
							"begin_column":	0,
							"end_line":	2978,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&tzobj->initialized, 0, sizeof (*(&tzobj->initialized)))", "memset(&tzobj->std, 0, sizeof (*(&tzobj->std)))", "memset(&tzobj->type, 0, sizeof (*(&tzobj->type)))", "memset(&tzobj->tzi, 0, sizeof (*(&tzobj->tzi)))", "memset(&tzobj->tzi.tz, 0, sizeof (*(&tzobj->tzi.tz)))", "memset(&tzobj->tzi.utc_offset, 0, sizeof (*(&tzobj->tzi.utc_offset)))", "memset(&tzobj->tzi.z, 0, sizeof (*(&tzobj->tzi.z)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(tzobj->tzi.tz, 0, sizeof (*(tzobj->tzi.tz)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((timezone_object)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_efree(((timezone_object)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((timezone_object)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((timezone_object))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((timezone_object)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((timezone_object))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(timezone_object)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((timezone_object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((timezone_object))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "free((tzobj)->tzi.z.abbr)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((timezone_object))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((timezone_object)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((timezone_object))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((timezone_object))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((tzobj), 0, sizeof(php_timezone_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_date, (timezone_object))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_interval, (timezone_object))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "php_date_instantiate(date_ce_timezone, (timezone_object))", "timelib_set_timezone((dateobj)->time, tzobj->tzi.tz)", "timelib_set_timezone(dateobj->time, (tzobj)->tzi.tz)", "timelib_time_dtor((dateobj)->time)", "timelib_unixtime2local((dateobj)->time, dateobj->time->sse)", "timelib_unixtime2local(dateobj->time, (dateobj)->time->sse)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "tzobj = (tzobj)", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(tzobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((timezone_object))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_from_error_container((timezone_object), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((timezone_object), 0)", "zval_set_refcount_p((timezone_object), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((timezone_object))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_set_timezone(dateobj->time, tzobj->tzi.tz)", "timelib_unixtime2local(dateobj->time, dateobj->time->sse)", "tzobj = (php_timezone_obj *)zend_object_store_get_object(timezone_object)", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2978\", 33, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(timezone_object), sizeof (timezone_object), &(tzobj), sizeof (tzobj), &(tzobj->type), sizeof (tzobj->type), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(tzobj->initialized), sizeof (tzobj->initialized), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	2,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	3,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	4,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	5,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	6,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	7,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	8,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	9,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	10,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	11,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	12,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	13,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	14,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	15,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	16,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	17,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	18,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	19,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	20,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	21,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	22,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	23,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	24,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	25,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	26,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	27,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	28,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	29,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	30,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	31,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	32,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	33,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	34,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	35,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	36,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	37,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	38,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	39,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	40,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	41,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	42,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	43,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	44,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	45,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	46,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	47,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	48,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	49,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	50,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	51,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	52,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	53,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	54,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	55,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	56,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	57,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	58,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	59,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	60,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	61,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	62,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	63,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	64,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	65,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	66,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	67,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	68,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	69,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	70,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	71,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	72,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	73,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	74,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	75,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	76,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	77,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	78,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	79,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	80,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	81,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	82,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	83,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	84,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	85,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	86,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	87,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	88,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	89,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	90,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	91,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	92,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	93,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	94,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	95,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	96,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	97,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	98,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	99,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	100,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	101,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	102,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	103,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	104,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	105,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	106,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	107,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	108,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	109,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	110,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	111,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	112,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	113,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	114,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	115,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	116,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	117,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	118,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	119,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	120,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	121,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	122,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	123,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	124,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	125,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	126,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	127,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	128,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	129,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	130,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	131,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	132,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	133,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	134,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	135,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	136,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	137,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	138,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	139,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	140,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	141,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	142,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	143,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	144,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	145,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	146,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	147,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	148,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	149,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	150,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	151,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	152,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	153,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	154,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	155,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	156,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	157,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	158,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	159,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	160,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	161,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	162,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	163,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	164,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	165,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	166,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	167,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	168,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	169,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	170,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	171,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	172,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	173,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	174,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	175,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	176,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	177,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	178,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	179,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	180,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	181,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	182,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	183,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	184,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	185,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	186,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	187,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	188,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	189,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	190,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	191,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	192,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	193,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	194,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	195,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	196,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	197,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	198,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	199,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	200,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	201,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	202,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	203,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	204,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	205,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	206,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	207,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	208,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	209,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	210,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	211,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	212,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	213,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	214,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	215,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	216,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	217,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	218,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	219,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	220,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	221,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	222,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	223,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	224,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	225,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	226,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	227,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	228,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	229,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	230,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	231,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	232,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	233,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	234,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	235,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	236,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	237,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	238,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	239,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	240,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	241,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	242,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	243,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	244,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	245,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	246,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	247,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	248,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	249,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	250,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	251,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	252,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	253,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	254,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	255,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	256,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	257,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	258,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	259,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	260,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	261,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	262,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	263,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	264,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	265,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	266,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	267,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	268,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	269,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	270,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	271,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	272,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	273,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	274,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	275,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	276,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	277,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	278,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	279,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	280,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	281,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	282,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	283,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	284,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	285,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	286,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	287,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	288,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	289,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	290,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	291,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	292,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	293,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	294,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	295,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	296,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	297,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	298,
									"scores":	[-10.897903417710015, -10.327136328610013, -11.674949191710013, -10.309491217710015, -10.121764310710015, -11.695907794610015, -12.313048277910015, -10.671978583910015, -10.918017497710014, -11.139989305710014, -11.139989305710014, -11.428910277910013, -11.428910277910013, -11.674949191710013, -11.428910277910013, -11.428910277910013, -11.428910277910013, -11.428910277910013, -11.428910277910013, -11.428910277910013, -11.428910277910013, -11.639799394910014, -11.674949191710013, -11.428910277910013, -11.428910277910013, -11.428910277910013, -11.428910277910013, -11.428910277910013, -11.428910277910013, -11.428910277910013, -11.428910277910013, -11.428910277910013, -11.428910277910013]
								}]
						}, {
							"switch":	10,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	2978,
							"begin_column":	2,
							"end_line":	2978,
							"end_column":	48,
							"patch_codes":	["if (__is_neg(\"\", \"L2978\", 33, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(timezone_object), sizeof (timezone_object), &(tzobj), sizeof (tzobj), &(tzobj->type), sizeof (tzobj->type), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(tzobj->initialized), sizeof (tzobj->initialized), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((!(dateobj->time)) || __is_neg(\"\", \"L2978\", 33, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(timezone_object), sizeof (timezone_object), &(tzobj), sizeof (tzobj), &(tzobj->type), sizeof (tzobj->type), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(tzobj->initialized), sizeof (tzobj->initialized), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((!(dateobj->time)) && !__is_neg(\"\", \"L2978\", 33, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(timezone_object), sizeof (timezone_object), &(tzobj), sizeof (tzobj), &(tzobj->type), sizeof (tzobj->type), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(tzobj->initialized), sizeof (tzobj->initialized), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.4940431314281462, -4.4263814714281455, -5.7245371414281454, -4.6378656014281461, -4.9181206144281457, -5.6034074893281458, -5.9328620414281463, -4.8251378774281459, -5.5830259774281457, -5.6057303174281454, -5.6057303174281454, -4.9666490414281457, -4.9666490414281457, -5.7245371414281454, -4.9666490414281457, -4.9666490414281457, -4.9666490414281457, -4.9666490414281457, -4.9666490414281457, -4.9666490414281457, -4.9666490414281457, -5.435909041428145, -5.7245371414281454, -4.9666490414281457, -4.9666490414281457, -4.9666490414281457, -4.9666490414281457, -4.9666490414281457, -4.9666490414281457, -4.9666490414281457, -4.9666490414281457, -4.9666490414281457, -4.9666490414281457]
								}, {
									"case":	2,
									"scores":	[-4.9185664634281459, -3.8509048034281457, -5.149060473428146, -4.0623889334281458, -4.3426439464281463, -5.0279308213281455, -5.357385373428146, -4.2496612094281456, -5.0075493094281462, -5.030253649428146, -5.030253649428146, -4.3911723734281463, -4.3911723734281463, -5.149060473428146, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.8604323734281456, -5.149060473428146, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463]
								}, {
									"case":	3,
									"scores":	[-4.9185664634281459, -3.8509048034281457, -5.149060473428146, -4.0623889334281458, -4.3426439464281463, -5.0279308213281455, -5.357385373428146, -4.2496612094281456, -5.0075493094281462, -5.030253649428146, -5.030253649428146, -4.3911723734281463, -4.3911723734281463, -5.149060473428146, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.8604323734281456, -5.149060473428146, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463]
								}]
						}, {
							"switch":	11,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	2978,
							"begin_column":	2,
							"end_line":	2978,
							"end_column":	48,
							"patch_codes":	["if (!__is_neg(\"\", \"L2978\", 33, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(timezone_object), sizeof (timezone_object), &(tzobj), sizeof (tzobj), &(tzobj->type), sizeof (tzobj->type), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(tzobj->initialized), sizeof (tzobj->initialized), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    if (!(dateobj->time)) {\n        php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n        {\n            do {\n                zval *__z = (return_value);\n                (*__z).value.lval = ((0) != 0);\n                (*__z).type = 3;\n            } while (0);\n            return;\n        }\n        ;\n    }\n", "if (!__is_neg(\"\", \"L2978\", 33, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(timezone_object), sizeof (timezone_object), &(tzobj), sizeof (tzobj), &(tzobj->type), sizeof (tzobj->type), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(tzobj->initialized), sizeof (tzobj->initialized), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)) && (!(dateobj->time))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.1831368679100152, -8.1154752079100145, -9.4136308779100144, -8.3269593379100151, -8.6072143509100147, -9.2925012258100139, -9.6219557779100136, -8.5142316139100132, -9.2721197139100138, -9.2948240539100144, -9.2948240539100144, -8.6557427779100138, -8.6557427779100138, -9.4136308779100144, -8.6557427779100138, -8.6557427779100138, -8.6557427779100138, -8.6557427779100138, -8.6557427779100138, -8.6557427779100138, -8.6557427779100138, -9.125002777910014, -9.4136308779100144, -8.6557427779100138, -8.6557427779100138, -8.6557427779100138, -8.6557427779100138, -8.6557427779100138, -8.6557427779100138, -8.6557427779100138, -8.6557427779100138, -8.6557427779100138, -8.6557427779100138]
								}, {
									"case":	2,
									"scores":	[-8.0311945559100142, -6.9635328959100145, -8.2616885659100134, -7.1750170259100141, -7.4552720389100147, -8.1405589138100147, -8.4700134659100144, -7.362289301910014, -8.1201774019100128, -8.1428817419100135, -8.1428817419100135, -7.5038004659100137, -7.5038004659100137, -8.2616885659100134, -7.5038004659100137, -7.5038004659100137, -7.5038004659100137, -7.5038004659100137, -7.5038004659100137, -7.5038004659100137, -7.5038004659100137, -7.9730604659100139, -8.2616885659100134, -7.5038004659100137, -7.5038004659100137, -7.5038004659100137, -7.5038004659100137, -7.5038004659100137, -7.5038004659100137, -7.5038004659100137, -7.5038004659100137, -7.5038004659100137, -7.5038004659100137]
								}]
						}]
				}, {
					"line":	2978,
					"switches":	[{
							"switch":	12,
							"types":	[[], [], [], [], [298], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [], [], [], [214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], [], [], [], [], [], []],
							"begin_line":	2979,
							"begin_column":	0,
							"end_line":	2979,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&tzobj->initialized, 0, sizeof (*(&tzobj->initialized)))", "memset(&tzobj->std, 0, sizeof (*(&tzobj->std)))", "memset(&tzobj->type, 0, sizeof (*(&tzobj->type)))", "memset(&tzobj->tzi, 0, sizeof (*(&tzobj->tzi)))", "memset(&tzobj->tzi.tz, 0, sizeof (*(&tzobj->tzi.tz)))", "memset(&tzobj->tzi.utc_offset, 0, sizeof (*(&tzobj->tzi.utc_offset)))", "memset(&tzobj->tzi.z, 0, sizeof (*(&tzobj->tzi.z)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(tzobj, 0, sizeof (*(tzobj)))", "memset(tzobj->tzi.tz, 0, sizeof (*(tzobj->tzi.tz)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((timezone_object)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_efree(((timezone_object)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((timezone_object)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((timezone_object))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((timezone_object)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((timezone_object))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(timezone_object)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((timezone_object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((timezone_object))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "free((tzobj)->tzi.z.abbr)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((timezone_object))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((timezone_object)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((timezone_object))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((timezone_object))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((tzobj), 0, sizeof(php_timezone_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_date, (timezone_object))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_interval, (timezone_object))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "php_date_instantiate(date_ce_timezone, (timezone_object))", "timelib_set_timezone((dateobj)->time, tzobj->tzi.tz)", "timelib_set_timezone(dateobj->time, (tzobj)->tzi.tz)", "timelib_time_dtor((dateobj)->time)", "timelib_unixtime2local((dateobj)->time, dateobj->time->sse)", "timelib_unixtime2local(dateobj->time, (dateobj)->time->sse)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "tzobj = (tzobj)", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(tzobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((timezone_object))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_from_error_container((timezone_object), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((timezone_object), 0)", "zval_set_refcount_p((timezone_object), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((timezone_object))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_set_timezone(dateobj->time, tzobj->tzi.tz)", "timelib_unixtime2local(dateobj->time, dateobj->time->sse)", "tzobj = (php_timezone_obj *)zend_object_store_get_object(timezone_object)", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2979\", 33, &(timezone_object), sizeof (timezone_object), &(tzobj), sizeof (tzobj), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(tzobj->type), sizeof (tzobj->type), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(tzobj->initialized), sizeof (tzobj->initialized), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	2,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	3,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	4,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	5,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	6,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	7,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	8,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	9,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	10,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	11,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	12,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	13,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	14,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	15,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	16,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	17,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	18,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	19,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	20,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	21,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	22,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	23,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	24,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	25,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	26,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	27,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	28,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	29,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	30,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	31,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	32,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	33,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	34,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	35,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	36,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	37,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	38,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	39,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	40,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	41,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	42,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	43,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	44,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	45,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	46,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	47,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	48,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	49,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	50,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	51,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	52,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	53,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	54,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	55,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	56,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	57,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	58,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	59,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	60,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	61,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	62,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	63,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	64,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	65,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	66,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	67,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	68,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	69,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	70,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	71,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	72,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	73,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	74,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	75,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	76,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	77,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	78,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	79,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	80,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	81,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	82,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	83,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	84,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	85,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	86,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	87,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	88,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	89,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	90,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	91,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	92,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	93,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	94,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	95,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	96,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	97,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	98,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	99,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	100,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	101,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	102,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	103,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	104,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	105,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	106,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	107,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	108,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	109,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	110,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	111,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	112,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	113,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	114,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	115,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	116,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	117,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	118,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	119,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	120,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	121,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	122,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	123,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	124,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	125,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	126,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	127,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	128,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	129,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	130,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	131,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	132,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	133,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	134,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	135,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	136,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	137,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	138,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	139,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	140,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	141,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	142,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	143,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	144,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	145,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	146,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	147,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	148,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	149,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	150,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	151,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	152,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	153,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	154,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	155,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	156,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	157,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	158,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	159,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	160,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	161,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	162,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	163,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	164,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	165,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	166,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	167,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	168,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	169,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	170,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	171,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	172,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	173,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	174,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	175,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	176,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	177,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	178,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	179,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	180,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	181,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	182,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	183,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	184,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	185,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	186,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	187,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	188,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	189,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	190,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	191,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	192,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	193,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	194,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	195,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	196,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	197,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	198,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	199,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	200,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	201,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	202,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	203,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	204,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	205,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	206,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	207,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	208,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	209,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	210,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	211,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	212,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	213,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	214,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	215,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	216,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	217,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	218,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	219,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	220,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	221,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	222,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	223,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	224,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	225,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	226,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	227,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	228,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	229,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	230,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	231,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	232,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	233,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	234,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	235,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	236,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	237,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	238,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	239,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	240,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	241,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	242,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	243,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	244,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	245,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	246,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	247,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	248,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	249,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	250,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	251,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	252,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	253,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	254,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	255,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	256,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	257,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	258,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	259,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	260,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	261,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	262,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	263,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	264,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	265,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	266,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	267,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	268,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	269,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	270,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	271,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	272,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	273,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	274,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	275,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	276,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	277,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	278,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	279,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	280,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	281,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	282,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	283,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	284,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	285,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	286,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	287,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	288,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	289,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	290,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	291,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	292,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	293,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	294,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	295,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	296,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	297,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	298,
									"scores":	[-7.3451886954749757, -10.171173162374975, -9.9540650644749746, -9.7916321413749756, -11.369209924674974, -11.743296748374975, -9.7230034644749743, -9.708026150674975, -9.9540650644749746, -10.176036872474974, -10.176036872474974, -10.630754577674974, -10.485071924674974, -10.731110838474976, -10.485071924674974, -10.485071924674974, -10.485071924674974, -10.485071924674974, -10.485071924674974, -10.485071924674974, -10.485071924674974, -10.695961041674973, -10.731110838474976, -10.485071924674974, -10.485071924674974, -10.485071924674974, -10.485071924674974, -10.485071924674974, -10.485071924674974, -10.485071924674974, -10.485071924674974, -10.485071924674974, -10.485071924674974]
								}]
						}, {
							"switch":	13,
							"types":	[[], [], [1], [], [], [], [3, 4], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2979,
							"begin_column":	2,
							"end_line":	2979,
							"end_column":	85,
							"patch_codes":	["if (!__is_neg(\"\", \"L2979\", 33, &(timezone_object), sizeof (timezone_object), &(tzobj), sizeof (tzobj), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(tzobj->type), sizeof (tzobj->type), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(tzobj->initialized), sizeof (tzobj->initialized), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    tzobj = (php_timezone_obj *)zend_object_store_get_object(timezone_object);\n", "{\n}\n", "tzobj = (php_timezone_obj *)zend_object_store_get_object(timezone_object)", "tzobj = (tzobj)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.3690323632749752, -9.2532342221749744, -8.8717274532749748, -8.640036331674974, -7.1865563632749749, -9.6722187101749739, -8.2957964992749744, -8.113839353274976, -8.8717274532749748, -8.8944317932749755, -8.8944317932749755, -8.3775088722749746, -8.3443333632749752, -9.1022214632749758, -8.3443333632749752, -8.3443333632749752, -8.3443333632749752, -8.3443333632749752, -8.3443333632749752, -8.3443333632749752, -8.3443333632749752, -8.8135933632749754, -9.1022214632749758, -8.3443333632749752, -8.3443333632749752, -8.3443333632749752, -8.3443333632749752, -8.3443333632749752, -8.3443333632749752, -8.3443333632749752, -8.3443333632749752, -8.3443333632749752, -8.3443333632749752]
								}, {
									"case":	2,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	3,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	4,
									"scores":	[-5.8110774932749756]
								}]
						}]
				}, {
					"line":	2979,
					"switches":	[{
							"switch":	14,
							"types":	[[], [], [], [], [298], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [], [], [], [214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], [], [], [], [], [], []],
							"begin_line":	2980,
							"begin_column":	0,
							"end_line":	2980,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&tzobj->initialized, 0, sizeof (*(&tzobj->initialized)))", "memset(&tzobj->std, 0, sizeof (*(&tzobj->std)))", "memset(&tzobj->type, 0, sizeof (*(&tzobj->type)))", "memset(&tzobj->tzi, 0, sizeof (*(&tzobj->tzi)))", "memset(&tzobj->tzi.tz, 0, sizeof (*(&tzobj->tzi.tz)))", "memset(&tzobj->tzi.utc_offset, 0, sizeof (*(&tzobj->tzi.utc_offset)))", "memset(&tzobj->tzi.z, 0, sizeof (*(&tzobj->tzi.z)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(tzobj, 0, sizeof (*(tzobj)))", "memset(tzobj->tzi.tz, 0, sizeof (*(tzobj->tzi.tz)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((timezone_object)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_efree(((timezone_object)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((timezone_object)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((timezone_object))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((timezone_object)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((timezone_object))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(timezone_object)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((timezone_object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((timezone_object))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "free((tzobj)->tzi.z.abbr)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((timezone_object))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((timezone_object)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((timezone_object))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((timezone_object))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((tzobj), 0, sizeof(php_timezone_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_date, (timezone_object))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_interval, (timezone_object))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "php_date_instantiate(date_ce_timezone, (timezone_object))", "timelib_set_timezone((dateobj)->time, tzobj->tzi.tz)", "timelib_set_timezone(dateobj->time, (tzobj)->tzi.tz)", "timelib_time_dtor((dateobj)->time)", "timelib_unixtime2local((dateobj)->time, dateobj->time->sse)", "timelib_unixtime2local(dateobj->time, (dateobj)->time->sse)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "tzobj = (tzobj)", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(tzobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((timezone_object))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_from_error_container((timezone_object), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((timezone_object), 0)", "zval_set_refcount_p((timezone_object), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((timezone_object))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_set_timezone(dateobj->time, tzobj->tzi.tz)", "timelib_unixtime2local(dateobj->time, dateobj->time->sse)", "tzobj = (php_timezone_obj *)zend_object_store_get_object(timezone_object)", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2980\", 11, &(tzobj), sizeof (tzobj), &(tzobj->type), sizeof (tzobj->type), &(timezone_object), sizeof (timezone_object), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(tzobj->initialized), sizeof (tzobj->initialized)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	2,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	3,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	4,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	5,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	6,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	7,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	8,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	9,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	10,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	11,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	12,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	13,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	14,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	15,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	16,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	17,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	18,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	19,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	20,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	21,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	22,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	23,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	24,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	25,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	26,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	27,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	28,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	29,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	30,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	31,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	32,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	33,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	34,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	35,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	36,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	37,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	38,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	39,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	40,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	41,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	42,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	43,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	44,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	45,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	46,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	47,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	48,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	49,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	50,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	51,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	52,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	53,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	54,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	55,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	56,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	57,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	58,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	59,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	60,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	61,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	62,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	63,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	64,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	65,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	66,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	67,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	68,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	69,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	70,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	71,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	72,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	73,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	74,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	75,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	76,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	77,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	78,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	79,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	80,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	81,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	82,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	83,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	84,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	85,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	86,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	87,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	88,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	89,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	90,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	91,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	92,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	93,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	94,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	95,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	96,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	97,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	98,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	99,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	100,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	101,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	102,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	103,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	104,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	105,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	106,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	107,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	108,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	109,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	110,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	111,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	112,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	113,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	114,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	115,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	116,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	117,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	118,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	119,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	120,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	121,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	122,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	123,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	124,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	125,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	126,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	127,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	128,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	129,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	130,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	131,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	132,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	133,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	134,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	135,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	136,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	137,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	138,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	139,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	140,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	141,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	142,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	143,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	144,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	145,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	146,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	147,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	148,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	149,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	150,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	151,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	152,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	153,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	154,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	155,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	156,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	157,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	158,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	159,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	160,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	161,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	162,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	163,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	164,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	165,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	166,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	167,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	168,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	169,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	170,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	171,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	172,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	173,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	174,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	175,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	176,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	177,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	178,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	179,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	180,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	181,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	182,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	183,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	184,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	185,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	186,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	187,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	188,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	189,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	190,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	191,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	192,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	193,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	194,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	195,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	196,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	197,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	198,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	199,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	200,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	201,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	202,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	203,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	204,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	205,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	206,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	207,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	208,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	209,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	210,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	211,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	212,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	213,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	214,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	215,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	216,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	217,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	218,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	219,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	220,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	221,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	222,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	223,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	224,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	225,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	226,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	227,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	228,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	229,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	230,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	231,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	232,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	233,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	234,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	235,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	236,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	237,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	238,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	239,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	240,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	241,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	242,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	243,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	244,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	245,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	246,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	247,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	248,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	249,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	250,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	251,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	252,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	253,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	254,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	255,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	256,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	257,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	258,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	259,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	260,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	261,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	262,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	263,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	264,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	265,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	266,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	267,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	268,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	269,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	270,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	271,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	272,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	273,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	274,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	275,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	276,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	277,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	278,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	279,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	280,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	281,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	282,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	283,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	284,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	285,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	286,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	287,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	288,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	289,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	290,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	291,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	292,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	293,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	294,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	295,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	296,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	297,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	298,
									"scores":	[-9.86043826805746, -10.651319837357455, -9.922411757157457, -10.622622267057455, -11.795871914057457, -10.959643224057459, -9.9074344433574559, -10.153473357157456, -10.375445165157455, -10.375445165157455, -10.684480217357455]
								}]
						}, {
							"switch":	15,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	2980,
							"begin_column":	2,
							"end_line":	2983,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L2980\", 11, &(tzobj), sizeof (tzobj), &(tzobj->type), sizeof (tzobj->type), &(timezone_object), sizeof (timezone_object), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(tzobj->initialized), sizeof (tzobj->initialized))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\");\n    return;\n}\n", "if ((tzobj->type != 3) || __is_neg(\"\", \"L2980\", 11, &(tzobj), sizeof (tzobj), &(tzobj->type), sizeof (tzobj->type), &(timezone_object), sizeof (timezone_object), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(tzobj->initialized), sizeof (tzobj->initialized))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\");\n    return;\n}\n", "if ((tzobj->type != 3) && !__is_neg(\"\", \"L2980\", 11, &(tzobj), sizeof (tzobj), &(tzobj->type), sizeof (tzobj->type), &(timezone_object), sizeof (timezone_object), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(tzobj->initialized), sizeof (tzobj->initialized))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\");\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.4035439093281461, -2.7343754314281457, -4.8098285674281458, -5.836982318328146, -5.5260082598281457, -5.9882944193281462, -4.6278714214281456, -5.3857595214281462, -5.4084638614281459, -5.4084638614281459, -4.8583654314281457]
								}, {
									"case":	2,
									"scores":	[-3.4973942283281461, -1.8282257504281465, -3.9036788864281462, -4.9308326373281464, -4.6198585788281461, -5.0821447383281466, -3.721721740428146, -4.4796098404281466, -4.5023141804281464, -4.5023141804281464, -3.9522157504281461]
								}, {
									"case":	3,
									"scores":	[-3.4973942283281461, -1.8282257504281465, -3.9036788864281462, -4.9308326373281464, -4.6198585788281461, -5.0821447383281466, -3.721721740428146, -4.4796098404281466, -4.5023141804281464, -4.5023141804281464, -3.9522157504281461]
								}]
						}, {
							"switch":	16,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	2980,
							"begin_column":	2,
							"end_line":	2983,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L2980\", 11, &(tzobj), sizeof (tzobj), &(tzobj->type), sizeof (tzobj->type), &(timezone_object), sizeof (timezone_object), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(tzobj->initialized), sizeof (tzobj->initialized)))\n    if (tzobj->type != 3) {\n        php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\");\n        return;\n    }\n", "if (!__is_neg(\"\", \"L2980\", 11, &(tzobj), sizeof (tzobj), &(tzobj->type), sizeof (tzobj->type), &(timezone_object), sizeof (timezone_object), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(tzobj->initialized), sizeof (tzobj->initialized)) && (tzobj->type != 3)) {\n    php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\");\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.9524141338574559, -6.2832456559574563, -8.3586987919574547, -9.3858525428574566, -9.0748784843574555, -9.5371646438574551, -8.1767416459574562, -8.9346297459574551, -8.9573340859574557, -8.9573340859574557, -8.4072356559574555]
								}, {
									"case":	2,
									"scores":	[-6.3532108618574563, -4.6840423839574568, -6.759495519957456, -7.7866492708574562, -7.4756752123574559, -7.9379613718574564, -6.5775383739574558, -7.3354264739574564, -7.3581308139574553, -7.3581308139574553, -6.8080323839574559]
								}]
						}]
				}, {
					"line":	2983,
					"switches":	[{
							"switch":	17,
							"types":	[[], [], [], [], [299], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [], [], [], [215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298], [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214], [], [], [], [], [], []],
							"begin_line":	2984,
							"begin_column":	0,
							"end_line":	2984,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&tzobj->initialized, 0, sizeof (*(&tzobj->initialized)))", "memset(&tzobj->std, 0, sizeof (*(&tzobj->std)))", "memset(&tzobj->type, 0, sizeof (*(&tzobj->type)))", "memset(&tzobj->tzi, 0, sizeof (*(&tzobj->tzi)))", "memset(&tzobj->tzi.tz, 0, sizeof (*(&tzobj->tzi.tz)))", "memset(&tzobj->tzi.utc_offset, 0, sizeof (*(&tzobj->tzi.utc_offset)))", "memset(&tzobj->tzi.z, 0, sizeof (*(&tzobj->tzi.z)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(tzobj, 0, sizeof (*(tzobj)))", "memset(tzobj->tzi.tz, 0, sizeof (*(tzobj->tzi.tz)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((timezone_object)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_efree(((timezone_object)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((timezone_object)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((timezone_object))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((timezone_object)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((timezone_object))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(timezone_object)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((timezone_object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((timezone_object))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "free((tzobj)->tzi.z.abbr)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((timezone_object))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((timezone_object)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((timezone_object))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((timezone_object))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((tzobj), 0, sizeof(php_timezone_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_date, (timezone_object))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_interval, (timezone_object))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "php_date_instantiate(date_ce_timezone, (timezone_object))", "timelib_set_timezone((dateobj)->time, tzobj->tzi.tz)", "timelib_set_timezone(dateobj->time, (tzobj)->tzi.tz)", "timelib_time_dtor((dateobj)->time)", "timelib_unixtime2local((dateobj)->time, dateobj->time->sse)", "timelib_unixtime2local(dateobj->time, (dateobj)->time->sse)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "tzobj = (tzobj)", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(tzobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((timezone_object))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_from_error_container((timezone_object), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((timezone_object), 0)", "zval_set_refcount_p((timezone_object), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((timezone_object))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_set_timezone(dateobj->time, tzobj->tzi.tz)", "timelib_unixtime2local(dateobj->time, dateobj->time->sse)", "tzobj = (php_timezone_obj *)zend_object_store_get_object(timezone_object)", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2984\", 33, &(dateobj), sizeof (dateobj), &(tzobj), sizeof (tzobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(return_value), sizeof (return_value), &(object), sizeof (object), &(tzobj->type), sizeof (tzobj->type), &(timezone_object), sizeof (timezone_object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(tzobj->initialized), sizeof (tzobj->initialized), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	2,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	3,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	4,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	5,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	6,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	7,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	8,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	9,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	10,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	11,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	12,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	13,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	14,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	15,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	16,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	17,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	18,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	19,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	20,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	21,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	22,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	23,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	24,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	25,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	26,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	27,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	28,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	29,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	30,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	31,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	32,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	33,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	34,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	35,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	36,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	37,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	38,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	39,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	40,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	41,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	42,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	43,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	44,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	45,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	46,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	47,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	48,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	49,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	50,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	51,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	52,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	53,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	54,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	55,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	56,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	57,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	58,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	59,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	60,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	61,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	62,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	63,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	64,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	65,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	66,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	67,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	68,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	69,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	70,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	71,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	72,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	73,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	74,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	75,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	76,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	77,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	78,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	79,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	80,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	81,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	82,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	83,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	84,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	85,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	86,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	87,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	88,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	89,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	90,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	91,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	92,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	93,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	94,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	95,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	96,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	97,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	98,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	99,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	100,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	101,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	102,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	103,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	104,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	105,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	106,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	107,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	108,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	109,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	110,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	111,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	112,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	113,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	114,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	115,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	116,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	117,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	118,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	119,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	120,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	121,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	122,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	123,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	124,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	125,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	126,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	127,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	128,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	129,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	130,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	131,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	132,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	133,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	134,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	135,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	136,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	137,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	138,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	139,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	140,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	141,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	142,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	143,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	144,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	145,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	146,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	147,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	148,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	149,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	150,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	151,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	152,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	153,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	154,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	155,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	156,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	157,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	158,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	159,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	160,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	161,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	162,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	163,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	164,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	165,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	166,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	167,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	168,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	169,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	170,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	171,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	172,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	173,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	174,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	175,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	176,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	177,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	178,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	179,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	180,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	181,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	182,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	183,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	184,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	185,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	186,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	187,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	188,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	189,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	190,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	191,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	192,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	193,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	194,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	195,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	196,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	197,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	198,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	199,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	200,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	201,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	202,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	203,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	204,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	205,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	206,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	207,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	208,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	209,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	210,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	211,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	212,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	213,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	214,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	215,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	216,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	217,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	218,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	219,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	220,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	221,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	222,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	223,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	224,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	225,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	226,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	227,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	228,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	229,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	230,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	231,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	232,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	233,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	234,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	235,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	236,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	237,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	238,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	239,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	240,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	241,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	242,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	243,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	244,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	245,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	246,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	247,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	248,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	249,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	250,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	251,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	252,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	253,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	254,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	255,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	256,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	257,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	258,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	259,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	260,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	261,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	262,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	263,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	264,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	265,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	266,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	267,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	268,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	269,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	270,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	271,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	272,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	273,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	274,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	275,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	276,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	277,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	278,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	279,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	280,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	281,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	282,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	283,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	284,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	285,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	286,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	287,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	288,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	289,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	290,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	291,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	292,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	293,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	294,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	295,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	296,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	297,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	298,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	299,
									"scores":	[-10.494005218739938, -9.2244374387399368, -10.183355511739936, -10.071803963039937, -9.8642633597399367, -10.201284316739937, -9.4343173100399369, -9.164052849839937, -9.14907553603994, -9.3951144498399373, -9.6170862578399365, -9.6170862578399365, -9.926121310039937, -10.172160223839937, -9.926121310039937, -9.926121310039937, -9.926121310039937, -9.926121310039937, -9.926121310039937, -9.926121310039937, -9.926121310039937, -10.137010427039936, -10.172160223839937, -9.926121310039937, -9.926121310039937, -9.926121310039937, -9.926121310039937, -9.926121310039937, -9.926121310039937, -9.926121310039937, -9.926121310039937, -9.926121310039937, -9.926121310039937]
								}]
						}, {
							"switch":	18,
							"types":	[[], [], [1], [], [], [], [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10], [], [], [11]],
							"begin_line":	2984,
							"begin_column":	2,
							"end_line":	2984,
							"end_column":	51,
							"patch_codes":	["if (!__is_neg(\"\", \"L2984\", 33, &(dateobj), sizeof (dateobj), &(tzobj), sizeof (tzobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(return_value), sizeof (return_value), &(object), sizeof (object), &(tzobj->type), sizeof (tzobj->type), &(timezone_object), sizeof (timezone_object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(tzobj->initialized), sizeof (tzobj->initialized), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    timelib_set_timezone(dateobj->time, tzobj->tzi.tz);\n", "timelib_fill_holes(dateobj->time, tzobj->tzi.tz, -1)", "timelib_fill_holes(dateobj->time, tzobj->tzi.tz, 0)", "timelib_fill_holes(dateobj->time, tzobj->tzi.tz, 1)", "timelib_fill_holes(dateobj->time, tzobj->tzi.tz, 2)", "timelib_fill_holes(dateobj->time, tzobj->tzi.tz, 3)", "timelib_fill_holes(dateobj->time, tzobj->tzi.tz, ht)", "timelib_fill_holes(dateobj->time, tzobj->tzi.tz, le_index_ptr)", "timelib_fill_holes(dateobj->time, tzobj->tzi.tz, php_date_global_timezone_db_enabled)", "timelib_fill_holes(dateobj->time, tzobj->tzi.tz, return_value_used)", "{\n}\n", "Debug(dateobj->time, tzobj->tzi.tz)", "php_printf(dateobj->time, tzobj->tzi.tz)", "printf(dateobj->time, tzobj->tzi.tz)", "timelib_date_to_int(dateobj->time, tzobj->tzi.tz)", "timelib_diff(dateobj->time, tzobj->tzi.tz)", "timelib_do_rel_normalize(dateobj->time, tzobj->tzi.tz)", "timelib_time_tz_abbr_update(dateobj->time, tzobj->tzi.tz)", "timelib_time_tz_name_update(dateobj->time, tzobj->tzi.tz)", "timelib_update_ts(dateobj->time, tzobj->tzi.tz)", "wprintf(dateobj->time, tzobj->tzi.tz)", "timelib_set_timezone((&dateobj)->time, tzobj->tzi.tz)", "timelib_set_timezone((&ht)->time, tzobj->tzi.tz)", "timelib_set_timezone((&object)->time, tzobj->tzi.tz)", "timelib_set_timezone((&return_value)->time, tzobj->tzi.tz)", "timelib_set_timezone((&return_value_ptr)->time, tzobj->tzi.tz)", "timelib_set_timezone((&return_value_used)->time, tzobj->tzi.tz)", "timelib_set_timezone((&this_ptr)->time, tzobj->tzi.tz)", "timelib_set_timezone((&timezone_object)->time, tzobj->tzi.tz)", "timelib_set_timezone((&tzobj)->time, tzobj->tzi.tz)", "timelib_set_timezone((dateobj)->time, tzobj->tzi.tz)", "timelib_set_timezone(dateobj->time, (&dateobj)->tzi.tz)", "timelib_set_timezone(dateobj->time, (&ht)->tzi.tz)", "timelib_set_timezone(dateobj->time, (&object)->tzi.tz)", "timelib_set_timezone(dateobj->time, (&return_value)->tzi.tz)", "timelib_set_timezone(dateobj->time, (&return_value_ptr)->tzi.tz)", "timelib_set_timezone(dateobj->time, (&return_value_used)->tzi.tz)", "timelib_set_timezone(dateobj->time, (&this_ptr)->tzi.tz)", "timelib_set_timezone(dateobj->time, (&timezone_object)->tzi.tz)", "timelib_set_timezone(dateobj->time, (&tzobj)->tzi.tz)", "timelib_set_timezone(dateobj->time, (tzobj)->tzi.tz)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.5613282865399372, -6.2208898691399366, -7.8572889955399372, -6.4552131576399363, -8.1140898355399358, -8.26540193653994, -6.7487171086399371, -7.0869360846399365, -6.9049789386399372, -7.6628670386399369, -7.6855713786399367, -7.6855713786399367, -7.1354729486399364, -7.893361048639937, -7.1354729486399364, -7.1354729486399364, -7.1354729486399364, -7.1354729486399364, -7.1354729486399364, -7.1354729486399364, -7.1354729486399364, -7.6047329486399367, -7.893361048639937, -7.1354729486399364, -7.1354729486399364, -7.1354729486399364, -7.1354729486399364, -7.1354729486399364, -7.1354729486399364, -7.1354729486399364, -7.1354729486399364, -7.1354729486399364, -7.1354729486399364]
								}, {
									"case":	2,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	3,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	4,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	5,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	6,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	7,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	8,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	9,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	10,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	11,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	12,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	13,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	14,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	15,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	16,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	17,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	18,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	19,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	20,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	21,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	22,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	23,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	24,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	25,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	26,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	27,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	28,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	29,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	30,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	31,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	32,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	33,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	34,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	35,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	36,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	37,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	38,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	39,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	40,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	41,
									"scores":	[-5.7706720786399366]
								}]
						}]
				}, {
					"line":	2984,
					"switches":	[{
							"switch":	19,
							"types":	[[], [], [], [], [298], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [], [], [], [214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], [], [], [], [], [], []],
							"begin_line":	2985,
							"begin_column":	0,
							"end_line":	2985,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&tzobj->initialized, 0, sizeof (*(&tzobj->initialized)))", "memset(&tzobj->std, 0, sizeof (*(&tzobj->std)))", "memset(&tzobj->type, 0, sizeof (*(&tzobj->type)))", "memset(&tzobj->tzi, 0, sizeof (*(&tzobj->tzi)))", "memset(&tzobj->tzi.tz, 0, sizeof (*(&tzobj->tzi.tz)))", "memset(&tzobj->tzi.utc_offset, 0, sizeof (*(&tzobj->tzi.utc_offset)))", "memset(&tzobj->tzi.z, 0, sizeof (*(&tzobj->tzi.z)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(tzobj->tzi.tz, 0, sizeof (*(tzobj->tzi.tz)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((timezone_object)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_efree(((timezone_object)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((timezone_object)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((timezone_object))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((timezone_object)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((timezone_object))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(timezone_object)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((timezone_object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((timezone_object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((timezone_object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_boolean((timezone_object))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "free((tzobj)->tzi.z.abbr)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((timezone_object))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((timezone_object)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((timezone_object))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((timezone_object))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((tzobj), 0, sizeof(php_timezone_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_date, (timezone_object))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_interval, (timezone_object))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "php_date_instantiate(date_ce_timezone, (timezone_object))", "timelib_set_timezone((dateobj)->time, tzobj->tzi.tz)", "timelib_set_timezone(dateobj->time, (tzobj)->tzi.tz)", "timelib_time_dtor((dateobj)->time)", "timelib_unixtime2local((dateobj)->time, dateobj->time->sse)", "timelib_unixtime2local(dateobj->time, (dateobj)->time->sse)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "tzobj = (tzobj)", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(tzobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p((timezone_object))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_from_error_container((timezone_object), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p((timezone_object), 0)", "zval_set_refcount_p((timezone_object), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((timezone_object))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_set_timezone(dateobj->time, tzobj->tzi.tz)", "timelib_unixtime2local(dateobj->time, dateobj->time->sse)", "tzobj = (php_timezone_obj *)zend_object_store_get_object(timezone_object)", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2985\", 33, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(tzobj), sizeof (tzobj), &(return_value), sizeof (return_value), &(object), sizeof (object), &(tzobj->type), sizeof (tzobj->type), &(timezone_object), sizeof (timezone_object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(tzobj->initialized), sizeof (tzobj->initialized), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	2,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	3,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	4,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	5,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	6,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	7,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	8,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	9,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	10,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	11,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	12,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	13,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	14,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	15,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	16,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	17,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	18,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	19,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	20,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	21,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	22,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	23,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	24,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	25,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	26,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	27,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	28,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	29,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	30,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	31,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	32,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	33,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	34,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	35,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	36,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	37,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	38,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	39,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	40,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	41,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	42,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	43,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	44,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	45,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	46,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	47,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	48,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	49,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	50,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	51,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	52,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	53,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	54,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	55,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	56,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	57,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	58,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	59,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	60,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	61,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	62,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	63,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	64,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	65,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	66,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	67,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	68,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	69,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	70,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	71,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	72,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	73,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	74,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	75,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	76,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	77,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	78,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	79,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	80,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	81,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	82,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	83,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	84,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	85,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	86,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	87,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	88,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	89,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	90,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	91,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	92,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	93,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	94,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	95,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	96,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	97,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	98,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	99,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	100,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	101,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	102,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	103,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	104,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	105,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	106,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	107,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	108,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	109,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	110,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	111,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	112,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	113,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	114,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	115,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	116,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	117,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	118,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	119,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	120,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	121,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	122,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	123,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	124,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	125,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	126,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	127,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	128,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	129,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	130,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	131,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	132,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	133,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	134,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	135,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	136,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	137,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	138,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	139,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	140,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	141,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	142,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	143,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	144,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	145,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	146,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	147,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	148,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	149,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	150,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	151,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	152,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	153,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	154,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	155,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	156,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	157,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	158,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	159,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	160,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	161,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	162,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	163,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	164,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	165,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	166,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	167,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	168,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	169,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	170,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	171,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	172,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	173,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	174,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	175,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	176,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	177,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	178,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	179,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	180,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	181,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	182,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	183,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	184,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	185,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	186,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	187,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	188,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	189,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	190,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	191,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	192,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	193,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	194,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	195,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	196,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	197,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	198,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	199,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	200,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	201,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	202,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	203,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	204,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	205,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	206,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	207,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	208,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	209,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	210,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	211,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	212,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	213,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	214,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	215,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	216,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	217,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	218,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	219,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	220,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	221,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	222,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	223,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	224,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	225,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	226,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	227,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	228,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	229,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	230,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	231,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	232,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	233,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	234,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	235,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	236,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	237,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	238,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	239,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	240,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	241,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	242,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	243,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	244,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	245,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	246,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	247,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	248,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	249,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	250,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	251,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	252,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	253,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	254,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	255,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	256,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	257,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	258,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	259,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	260,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	261,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	262,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	263,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	264,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	265,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	266,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	267,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	268,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	269,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	270,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	271,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	272,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	273,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	274,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	275,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	276,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	277,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	278,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	279,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	280,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	281,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	282,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	283,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	284,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	285,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	286,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	287,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	288,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	289,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	290,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	291,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	292,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	293,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	294,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	295,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	296,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	297,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	298,
									"scores":	[-11.19883745142242, -10.762033418422417, -9.22471563372242, -8.25801480252242, -10.018165652422418, -10.355186609422418, -9.58821960272242, -9.31795514252242, -9.3029778287224172, -9.5490167425224168, -9.77098855052242, -9.77098855052242, -10.080023602722417, -10.326062516522416, -10.080023602722417, -10.080023602722417, -10.080023602722417, -10.080023602722417, -10.080023602722417, -10.080023602722417, -10.080023602722417, -10.290912719722417, -10.326062516522416, -10.080023602722417, -10.080023602722417, -10.080023602722417, -10.080023602722417, -10.080023602722417, -10.080023602722417, -10.080023602722417, -10.080023602722417, -10.080023602722417, -10.080023602722417]
								}]
						}, {
							"switch":	20,
							"types":	[[], [], [1], [], [], [], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [], [3, 4, 5, 6, 7], [], [], [], [], [], [], [], [2]],
							"begin_line":	2985,
							"begin_column":	2,
							"end_line":	2985,
							"end_column":	58,
							"patch_codes":	["if (!__is_neg(\"\", \"L2985\", 33, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(tzobj), sizeof (tzobj), &(return_value), sizeof (return_value), &(object), sizeof (object), &(tzobj->type), sizeof (tzobj->type), &(timezone_object), sizeof (timezone_object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_timezone), sizeof (date_ce_timezone), &(tzobj->initialized), sizeof (tzobj->initialized), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    timelib_unixtime2local(dateobj->time, dateobj->time->sse);\n", "{\n}\n", "Debug(dateobj->time, dateobj->time->sse)", "php_printf(dateobj->time, dateobj->time->sse)", "printf(dateobj->time, dateobj->time->sse)", "timelib_unixtime2gmt(dateobj->time, dateobj->time->sse)", "wprintf(dateobj->time, dateobj->time->sse)", "timelib_unixtime2local((&dateobj)->time, dateobj->time->sse)", "timelib_unixtime2local((&ht)->time, dateobj->time->sse)", "timelib_unixtime2local((&object)->time, dateobj->time->sse)", "timelib_unixtime2local((&return_value)->time, dateobj->time->sse)", "timelib_unixtime2local((&return_value_ptr)->time, dateobj->time->sse)", "timelib_unixtime2local((&return_value_used)->time, dateobj->time->sse)", "timelib_unixtime2local((&this_ptr)->time, dateobj->time->sse)", "timelib_unixtime2local((&timezone_object)->time, dateobj->time->sse)", "timelib_unixtime2local((&tzobj)->time, dateobj->time->sse)", "timelib_unixtime2local((dateobj)->time, dateobj->time->sse)", "timelib_unixtime2local(dateobj->time, (&dateobj)->time->sse)", "timelib_unixtime2local(dateobj->time, (&ht)->time->sse)", "timelib_unixtime2local(dateobj->time, (&object)->time->sse)", "timelib_unixtime2local(dateobj->time, (&return_value)->time->sse)", "timelib_unixtime2local(dateobj->time, (&return_value_ptr)->time->sse)", "timelib_unixtime2local(dateobj->time, (&return_value_used)->time->sse)", "timelib_unixtime2local(dateobj->time, (&this_ptr)->time->sse)", "timelib_unixtime2local(dateobj->time, (&timezone_object)->time->sse)", "timelib_unixtime2local(dateobj->time, (&tzobj)->time->sse)", "timelib_unixtime2local(dateobj->time, (dateobj)->time->sse)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.9479018218224162, -9.1383358873224161, -8.18409894132242, -8.5759619618224168, -8.7751728382224172, -9.184569339222417, -8.5107784013224173, -8.8489973773224158, -8.6670402313224173, -9.4249283313224161, -9.4476326713224168, -9.4476326713224168, -8.8975342413224165, -9.6554223413224172, -8.8975342413224165, -8.8975342413224165, -8.8975342413224165, -8.8975342413224165, -8.8975342413224165, -8.8975342413224165, -8.8975342413224165, -9.3667942413224168, -9.6554223413224172, -8.8975342413224165, -8.8975342413224165, -8.8975342413224165, -8.8975342413224165, -8.8975342413224165, -8.8975342413224165, -8.8975342413224165, -8.8975342413224165, -8.8975342413224165, -8.8975342413224165]
								}, {
									"case":	2,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	3,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	4,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	5,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	6,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	7,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	8,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	9,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	10,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	11,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	12,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	13,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	14,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	15,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	16,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	17,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	18,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	19,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	20,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	21,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	22,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	23,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	24,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	25,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	26,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	27,
									"scores":	[-5.7504693713224171]
								}]
						}]
				}, {
					"line":	3030,
					"switches":	[]
				}, {
					"line":	3031,
					"switches":	[]
				}, {
					"line":	3032,
					"switches":	[]
				}, {
					"line":	3034,
					"switches":	[{
							"switch":	21,
							"types":	[[], [], [], [], [259], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [], [], [], [174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258], [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173], [], [], [], [], [], []],
							"begin_line":	3035,
							"begin_column":	0,
							"end_line":	3035,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->h = (-1)", "dateobj->time->h = (0)", "dateobj->time->h = (1)", "dateobj->time->h = (2)", "dateobj->time->h = (3)", "dateobj->time->i = (-1)", "dateobj->time->i = (0)", "dateobj->time->i = (1)", "dateobj->time->i = (2)", "dateobj->time->i = (3)", "dateobj->time->s = (-1)", "dateobj->time->s = (0)", "dateobj->time->s = (1)", "dateobj->time->s = (2)", "dateobj->time->s = (3)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((dateobj), 0, sizeof(php_date_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->h = h", "dateobj->time->i = i", "dateobj->time->s = s", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3035\", 44, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(h), sizeof (h), &(i), sizeof (i), &(s), sizeof (s), &(date_ce_date), sizeof (date_ce_date), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	2,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	3,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	4,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	5,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	6,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	7,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	8,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	9,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	10,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	11,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	12,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	13,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	14,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	15,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	16,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	17,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	18,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	19,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	20,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	21,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	22,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	23,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	24,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	25,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	26,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	27,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	28,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	29,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	166,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	167,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	168,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	169,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	170,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	171,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	172,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	173,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	174,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	175,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	176,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	177,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	178,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	179,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	180,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	181,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	182,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	183,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	184,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	185,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	186,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	187,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	188,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	189,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	190,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	191,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	192,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	193,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	194,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	195,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	196,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	197,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	198,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	199,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	200,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	201,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	202,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	203,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	204,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	205,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	206,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	207,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	208,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	209,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	210,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	211,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	212,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	213,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	214,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	215,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	216,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	217,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	218,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	219,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	220,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	221,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	222,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	223,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	224,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	225,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	226,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	227,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	228,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	229,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	230,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	231,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	232,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	233,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	234,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	235,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	236,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	237,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	238,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	239,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	240,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	241,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	242,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	243,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	244,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	245,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	246,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	247,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	248,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	249,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	250,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	251,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	252,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	253,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	254,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	255,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	256,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	257,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	258,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	259,
									"scores":	[-9.7766064796582359, -10.022645393458236, -10.409809945458235, -10.581272204658235, -10.838857378658236, -10.581272204658235, -9.987032027458234, -10.877953362458236, -11.675957739358235, -11.151375048658235, -11.362264165658235, -10.650440048658236, -11.397413962458234, -11.151375048658235, -11.151375048658235, -11.362264165658235, -11.362264165658235, -11.362264165658235, -11.151375048658235, -11.151375048658235, -11.362264165658235, -11.362264165658235, -11.362264165658235, -11.362264165658235, -11.362264165658235, -11.362264165658235, -11.362264165658235, -11.362264165658235, -11.362264165658235, -11.362264165658235, -11.362264165658235, -11.362264165658235, -11.151375048658235, -11.151375048658235, -11.151375048658235, -11.151375048658235, -11.151375048658235, -11.151375048658235, -11.362264165658235, -11.151375048658235, -11.362264165658235, -11.151375048658235, -11.362264165658235, -11.362264165658235]
								}]
						}, {
							"switch":	22,
							"types":	[[6], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5], []],
							"begin_line":	3035,
							"begin_column":	2,
							"end_line":	3037,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L3035\", 44, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(h), sizeof (h), &(i), sizeof (i), &(s), sizeof (s), &(date_ce_date), sizeof (date_ce_date), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences))) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((zend_parse_method_parameters((ht), (this_ptr), \"Oll|l\", &object, date_ce_date, &h, &i, &s) == -1) || __is_neg(\"\", \"L3035\", 44, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(h), sizeof (h), &(i), sizeof (i), &(s), sizeof (s), &(date_ce_date), sizeof (date_ce_date), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences))) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if (dprintf((ht), (this_ptr), \"Oll|l\", &object, date_ce_date, &h, &i, &s) == -1) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if (zend_get_parameters_ex((ht), (this_ptr), \"Oll|l\", &object, date_ce_date, &h, &i, &s) == -1) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if (zend_parse_parameters((ht), (this_ptr), \"Oll|l\", &object, date_ce_date, &h, &i, &s) == -1) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((zend_parse_method_parameters((ht), (this_ptr), \"Oll|l\", &object, date_ce_date, &h, &i, &s) == -1) && !__is_neg(\"\", \"L3035\", 44, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(h), sizeof (h), &(i), sizeof (i), &(s), sizeof (s), &(date_ce_date), sizeof (date_ce_date), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences))) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.1765470644281444, -2.9344351644281446, -2.2203285334281446, -1.826482964428144, -2.1402806644281438, -1.826482964428144, -2.6433418044281445, -3.6478704644281446, -3.624177343328145, -2.8066786744281447, -3.2759386744281449, -2.4846676444281446, -3.5645667744281448, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -2.8066786744281447, -3.2759386744281449, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449]
								}, {
									"case":	2,
									"scores":	[-5.1908269103281466, -5.9487150103281463, -5.2346083793281455, -4.8407628103281457, -5.154560510328146, -4.8407628103281457, -5.6576216503281467, -6.6621503103281468, -6.6384571892281459, -5.820958520328146, -6.2902185203281462, -5.4989474903281463, -6.5788466203281466, -5.820958520328146, -5.820958520328146, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -5.820958520328146, -5.820958520328146, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -5.820958520328146, -5.820958520328146, -5.820958520328146, -5.820958520328146, -5.820958520328146, -5.820958520328146, -6.2902185203281462, -5.820958520328146, -6.2902185203281462, -5.820958520328146, -6.2902185203281462, -6.2902185203281462]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-5.1908269103281466, -5.9487150103281463, -5.2346083793281455, -4.8407628103281457, -5.154560510328146, -4.8407628103281457, -5.6576216503281467, -6.6621503103281468, -6.6384571892281459, -5.820958520328146, -6.2902185203281462, -5.4989474903281463, -6.5788466203281466, -5.820958520328146, -5.820958520328146, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -5.820958520328146, -5.820958520328146, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -5.820958520328146, -5.820958520328146, -5.820958520328146, -5.820958520328146, -5.820958520328146, -5.820958520328146, -6.2902185203281462, -5.820958520328146, -6.2902185203281462, -5.820958520328146, -6.2902185203281462, -6.2902185203281462]
								}]
						}, {
							"switch":	23,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	3035,
							"begin_column":	2,
							"end_line":	3037,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L3035\", 44, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(h), sizeof (h), &(i), sizeof (i), &(s), sizeof (s), &(date_ce_date), sizeof (date_ce_date), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences)))\n    if (zend_parse_method_parameters((ht), (this_ptr), \"Oll|l\", &object, date_ce_date, &h, &i, &s) == -1) {\n        {\n            do {\n                zval *__z = (return_value);\n                (*__z).value.lval = ((0) != 0);\n                (*__z).type = 3;\n            } while (0);\n            return;\n        }\n        ;\n    }\n", "if (!__is_neg(\"\", \"L3035\", 44, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(h), sizeof (h), &(i), sizeof (i), &(s), sizeof (s), &(date_ce_date), sizeof (date_ce_date), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences)) && (zend_parse_method_parameters((ht), (this_ptr), \"Oll|l\", &object, date_ce_date, &h, &i, &s) == -1)) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.9223309386582343, -8.680219038658235, -7.966112407658235, -7.5722668386582352, -7.8860645386582346, -7.5722668386582352, -8.3891256786582353, -9.3936543386582354, -9.3699612175582345, -8.5524625486582355, -9.021722548658234, -8.230451518658235, -9.3103506486582344, -8.5524625486582355, -8.5524625486582355, -9.021722548658234, -9.021722548658234, -9.021722548658234, -8.5524625486582355, -8.5524625486582355, -9.021722548658234, -9.021722548658234, -9.021722548658234, -9.021722548658234, -9.021722548658234, -9.021722548658234, -9.021722548658234, -9.021722548658234, -9.021722548658234, -9.021722548658234, -9.021722548658234, -9.021722548658234, -8.5524625486582355, -8.5524625486582355, -8.5524625486582355, -8.5524625486582355, -8.5524625486582355, -8.5524625486582355, -9.021722548658234, -8.5524625486582355, -9.021722548658234, -8.5524625486582355, -9.021722548658234, -9.021722548658234]
								}, {
									"case":	2,
									"scores":	[-9.0554988735582356, -9.8133869735582362, -9.0992803425582345, -8.7054347735582347, -9.019232473558235, -8.7054347735582347, -9.5222936135582348, -10.526822273558235, -10.503129152458234, -9.685630483558235, -10.154890483558235, -9.3636194535582344, -10.443518583558234, -9.685630483558235, -9.685630483558235, -10.154890483558235, -10.154890483558235, -10.154890483558235, -9.685630483558235, -9.685630483558235, -10.154890483558235, -10.154890483558235, -10.154890483558235, -10.154890483558235, -10.154890483558235, -10.154890483558235, -10.154890483558235, -10.154890483558235, -10.154890483558235, -10.154890483558235, -10.154890483558235, -10.154890483558235, -9.685630483558235, -9.685630483558235, -9.685630483558235, -9.685630483558235, -9.685630483558235, -9.685630483558235, -10.154890483558235, -9.685630483558235, -10.154890483558235, -9.685630483558235, -10.154890483558235, -10.154890483558235]
								}]
						}]
				}, {
					"line":	3037,
					"switches":	[{
							"switch":	24,
							"types":	[[], [], [], [], [260], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [], [], [], [175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174], [], [], [], [], [], []],
							"begin_line":	3038,
							"begin_column":	0,
							"end_line":	3038,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->h = (-1)", "dateobj->time->h = (0)", "dateobj->time->h = (1)", "dateobj->time->h = (2)", "dateobj->time->h = (3)", "dateobj->time->i = (-1)", "dateobj->time->i = (0)", "dateobj->time->i = (1)", "dateobj->time->i = (2)", "dateobj->time->i = (3)", "dateobj->time->s = (-1)", "dateobj->time->s = (0)", "dateobj->time->s = (1)", "dateobj->time->s = (2)", "dateobj->time->s = (3)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((dateobj), 0, sizeof(php_date_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->h = h", "dateobj->time->i = i", "dateobj->time->s = s", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3038\", 31, &(object), sizeof (object), &(dateobj), sizeof (dateobj), &(return_value), sizeof (return_value), &(dateobj->time), sizeof (dateobj->time), &(h), sizeof (h), &(dateobj->time->h), sizeof (dateobj->time->h), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(i), sizeof (i), &(s), sizeof (s), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.39695600548304]
								}, {
									"case":	2,
									"scores":	[-6.39695600548304]
								}, {
									"case":	3,
									"scores":	[-6.39695600548304]
								}, {
									"case":	4,
									"scores":	[-6.39695600548304]
								}, {
									"case":	5,
									"scores":	[-6.39695600548304]
								}, {
									"case":	6,
									"scores":	[-6.39695600548304]
								}, {
									"case":	7,
									"scores":	[-6.39695600548304]
								}, {
									"case":	8,
									"scores":	[-6.39695600548304]
								}, {
									"case":	9,
									"scores":	[-6.39695600548304]
								}, {
									"case":	10,
									"scores":	[-6.39695600548304]
								}, {
									"case":	11,
									"scores":	[-6.39695600548304]
								}, {
									"case":	12,
									"scores":	[-6.39695600548304]
								}, {
									"case":	13,
									"scores":	[-6.39695600548304]
								}, {
									"case":	14,
									"scores":	[-6.39695600548304]
								}, {
									"case":	15,
									"scores":	[-6.39695600548304]
								}, {
									"case":	16,
									"scores":	[-6.39695600548304]
								}, {
									"case":	17,
									"scores":	[-6.39695600548304]
								}, {
									"case":	18,
									"scores":	[-6.39695600548304]
								}, {
									"case":	19,
									"scores":	[-6.39695600548304]
								}, {
									"case":	20,
									"scores":	[-6.39695600548304]
								}, {
									"case":	21,
									"scores":	[-6.39695600548304]
								}, {
									"case":	22,
									"scores":	[-6.39695600548304]
								}, {
									"case":	23,
									"scores":	[-6.39695600548304]
								}, {
									"case":	24,
									"scores":	[-6.39695600548304]
								}, {
									"case":	25,
									"scores":	[-6.39695600548304]
								}, {
									"case":	26,
									"scores":	[-6.39695600548304]
								}, {
									"case":	27,
									"scores":	[-6.39695600548304]
								}, {
									"case":	28,
									"scores":	[-6.39695600548304]
								}, {
									"case":	29,
									"scores":	[-6.39695600548304]
								}, {
									"case":	30,
									"scores":	[-6.39695600548304]
								}, {
									"case":	31,
									"scores":	[-6.39695600548304]
								}, {
									"case":	32,
									"scores":	[-6.39695600548304]
								}, {
									"case":	33,
									"scores":	[-6.39695600548304]
								}, {
									"case":	34,
									"scores":	[-6.39695600548304]
								}, {
									"case":	35,
									"scores":	[-6.39695600548304]
								}, {
									"case":	36,
									"scores":	[-6.39695600548304]
								}, {
									"case":	37,
									"scores":	[-6.39695600548304]
								}, {
									"case":	38,
									"scores":	[-6.39695600548304]
								}, {
									"case":	39,
									"scores":	[-6.39695600548304]
								}, {
									"case":	40,
									"scores":	[-6.39695600548304]
								}, {
									"case":	41,
									"scores":	[-6.39695600548304]
								}, {
									"case":	42,
									"scores":	[-6.39695600548304]
								}, {
									"case":	43,
									"scores":	[-6.39695600548304]
								}, {
									"case":	44,
									"scores":	[-6.39695600548304]
								}, {
									"case":	45,
									"scores":	[-6.39695600548304]
								}, {
									"case":	46,
									"scores":	[-6.39695600548304]
								}, {
									"case":	47,
									"scores":	[-6.39695600548304]
								}, {
									"case":	48,
									"scores":	[-6.39695600548304]
								}, {
									"case":	49,
									"scores":	[-6.39695600548304]
								}, {
									"case":	50,
									"scores":	[-6.39695600548304]
								}, {
									"case":	51,
									"scores":	[-6.39695600548304]
								}, {
									"case":	52,
									"scores":	[-6.39695600548304]
								}, {
									"case":	53,
									"scores":	[-6.39695600548304]
								}, {
									"case":	54,
									"scores":	[-6.39695600548304]
								}, {
									"case":	55,
									"scores":	[-6.39695600548304]
								}, {
									"case":	56,
									"scores":	[-6.39695600548304]
								}, {
									"case":	57,
									"scores":	[-6.39695600548304]
								}, {
									"case":	58,
									"scores":	[-6.39695600548304]
								}, {
									"case":	59,
									"scores":	[-6.39695600548304]
								}, {
									"case":	60,
									"scores":	[-6.39695600548304]
								}, {
									"case":	61,
									"scores":	[-6.39695600548304]
								}, {
									"case":	62,
									"scores":	[-6.39695600548304]
								}, {
									"case":	63,
									"scores":	[-6.39695600548304]
								}, {
									"case":	64,
									"scores":	[-6.39695600548304]
								}, {
									"case":	65,
									"scores":	[-6.39695600548304]
								}, {
									"case":	66,
									"scores":	[-6.39695600548304]
								}, {
									"case":	67,
									"scores":	[-6.39695600548304]
								}, {
									"case":	68,
									"scores":	[-6.39695600548304]
								}, {
									"case":	69,
									"scores":	[-6.39695600548304]
								}, {
									"case":	70,
									"scores":	[-6.39695600548304]
								}, {
									"case":	71,
									"scores":	[-6.39695600548304]
								}, {
									"case":	72,
									"scores":	[-6.39695600548304]
								}, {
									"case":	73,
									"scores":	[-6.39695600548304]
								}, {
									"case":	74,
									"scores":	[-6.39695600548304]
								}, {
									"case":	75,
									"scores":	[-6.39695600548304]
								}, {
									"case":	76,
									"scores":	[-6.39695600548304]
								}, {
									"case":	77,
									"scores":	[-6.39695600548304]
								}, {
									"case":	78,
									"scores":	[-6.39695600548304]
								}, {
									"case":	79,
									"scores":	[-6.39695600548304]
								}, {
									"case":	80,
									"scores":	[-6.39695600548304]
								}, {
									"case":	81,
									"scores":	[-6.39695600548304]
								}, {
									"case":	82,
									"scores":	[-6.39695600548304]
								}, {
									"case":	83,
									"scores":	[-6.39695600548304]
								}, {
									"case":	84,
									"scores":	[-6.39695600548304]
								}, {
									"case":	85,
									"scores":	[-6.39695600548304]
								}, {
									"case":	86,
									"scores":	[-6.39695600548304]
								}, {
									"case":	87,
									"scores":	[-6.39695600548304]
								}, {
									"case":	88,
									"scores":	[-6.39695600548304]
								}, {
									"case":	89,
									"scores":	[-6.39695600548304]
								}, {
									"case":	90,
									"scores":	[-6.39695600548304]
								}, {
									"case":	91,
									"scores":	[-6.39695600548304]
								}, {
									"case":	92,
									"scores":	[-6.39695600548304]
								}, {
									"case":	93,
									"scores":	[-6.39695600548304]
								}, {
									"case":	94,
									"scores":	[-6.39695600548304]
								}, {
									"case":	95,
									"scores":	[-6.39695600548304]
								}, {
									"case":	96,
									"scores":	[-6.39695600548304]
								}, {
									"case":	97,
									"scores":	[-6.39695600548304]
								}, {
									"case":	98,
									"scores":	[-6.39695600548304]
								}, {
									"case":	99,
									"scores":	[-6.39695600548304]
								}, {
									"case":	100,
									"scores":	[-6.39695600548304]
								}, {
									"case":	101,
									"scores":	[-6.39695600548304]
								}, {
									"case":	102,
									"scores":	[-6.39695600548304]
								}, {
									"case":	103,
									"scores":	[-6.39695600548304]
								}, {
									"case":	104,
									"scores":	[-6.39695600548304]
								}, {
									"case":	105,
									"scores":	[-6.39695600548304]
								}, {
									"case":	106,
									"scores":	[-6.39695600548304]
								}, {
									"case":	107,
									"scores":	[-6.39695600548304]
								}, {
									"case":	108,
									"scores":	[-6.39695600548304]
								}, {
									"case":	109,
									"scores":	[-6.39695600548304]
								}, {
									"case":	110,
									"scores":	[-6.39695600548304]
								}, {
									"case":	111,
									"scores":	[-6.39695600548304]
								}, {
									"case":	112,
									"scores":	[-6.39695600548304]
								}, {
									"case":	113,
									"scores":	[-6.39695600548304]
								}, {
									"case":	114,
									"scores":	[-6.39695600548304]
								}, {
									"case":	115,
									"scores":	[-6.39695600548304]
								}, {
									"case":	116,
									"scores":	[-6.39695600548304]
								}, {
									"case":	117,
									"scores":	[-6.39695600548304]
								}, {
									"case":	118,
									"scores":	[-6.39695600548304]
								}, {
									"case":	119,
									"scores":	[-6.39695600548304]
								}, {
									"case":	120,
									"scores":	[-6.39695600548304]
								}, {
									"case":	121,
									"scores":	[-6.39695600548304]
								}, {
									"case":	122,
									"scores":	[-6.39695600548304]
								}, {
									"case":	123,
									"scores":	[-6.39695600548304]
								}, {
									"case":	124,
									"scores":	[-6.39695600548304]
								}, {
									"case":	125,
									"scores":	[-6.39695600548304]
								}, {
									"case":	126,
									"scores":	[-6.39695600548304]
								}, {
									"case":	127,
									"scores":	[-6.39695600548304]
								}, {
									"case":	128,
									"scores":	[-6.39695600548304]
								}, {
									"case":	129,
									"scores":	[-6.39695600548304]
								}, {
									"case":	130,
									"scores":	[-6.39695600548304]
								}, {
									"case":	131,
									"scores":	[-6.39695600548304]
								}, {
									"case":	132,
									"scores":	[-6.39695600548304]
								}, {
									"case":	133,
									"scores":	[-6.39695600548304]
								}, {
									"case":	134,
									"scores":	[-6.39695600548304]
								}, {
									"case":	135,
									"scores":	[-6.39695600548304]
								}, {
									"case":	136,
									"scores":	[-6.39695600548304]
								}, {
									"case":	137,
									"scores":	[-6.39695600548304]
								}, {
									"case":	138,
									"scores":	[-6.39695600548304]
								}, {
									"case":	139,
									"scores":	[-6.39695600548304]
								}, {
									"case":	140,
									"scores":	[-6.39695600548304]
								}, {
									"case":	141,
									"scores":	[-6.39695600548304]
								}, {
									"case":	142,
									"scores":	[-6.39695600548304]
								}, {
									"case":	143,
									"scores":	[-6.39695600548304]
								}, {
									"case":	144,
									"scores":	[-6.39695600548304]
								}, {
									"case":	145,
									"scores":	[-6.39695600548304]
								}, {
									"case":	146,
									"scores":	[-6.39695600548304]
								}, {
									"case":	147,
									"scores":	[-6.39695600548304]
								}, {
									"case":	148,
									"scores":	[-6.39695600548304]
								}, {
									"case":	149,
									"scores":	[-6.39695600548304]
								}, {
									"case":	150,
									"scores":	[-6.39695600548304]
								}, {
									"case":	151,
									"scores":	[-6.39695600548304]
								}, {
									"case":	152,
									"scores":	[-6.39695600548304]
								}, {
									"case":	153,
									"scores":	[-6.39695600548304]
								}, {
									"case":	154,
									"scores":	[-6.39695600548304]
								}, {
									"case":	155,
									"scores":	[-6.39695600548304]
								}, {
									"case":	156,
									"scores":	[-6.39695600548304]
								}, {
									"case":	157,
									"scores":	[-6.39695600548304]
								}, {
									"case":	158,
									"scores":	[-6.39695600548304]
								}, {
									"case":	159,
									"scores":	[-6.39695600548304]
								}, {
									"case":	160,
									"scores":	[-6.39695600548304]
								}, {
									"case":	161,
									"scores":	[-6.39695600548304]
								}, {
									"case":	162,
									"scores":	[-6.39695600548304]
								}, {
									"case":	163,
									"scores":	[-6.39695600548304]
								}, {
									"case":	164,
									"scores":	[-6.39695600548304]
								}, {
									"case":	165,
									"scores":	[-6.39695600548304]
								}, {
									"case":	166,
									"scores":	[-6.39695600548304]
								}, {
									"case":	167,
									"scores":	[-6.39695600548304]
								}, {
									"case":	168,
									"scores":	[-6.39695600548304]
								}, {
									"case":	169,
									"scores":	[-6.39695600548304]
								}, {
									"case":	170,
									"scores":	[-6.39695600548304]
								}, {
									"case":	171,
									"scores":	[-6.39695600548304]
								}, {
									"case":	172,
									"scores":	[-6.39695600548304]
								}, {
									"case":	173,
									"scores":	[-6.39695600548304]
								}, {
									"case":	174,
									"scores":	[-6.39695600548304]
								}, {
									"case":	175,
									"scores":	[-6.39695600548304]
								}, {
									"case":	176,
									"scores":	[-6.39695600548304]
								}, {
									"case":	177,
									"scores":	[-6.39695600548304]
								}, {
									"case":	178,
									"scores":	[-6.39695600548304]
								}, {
									"case":	179,
									"scores":	[-6.39695600548304]
								}, {
									"case":	180,
									"scores":	[-6.39695600548304]
								}, {
									"case":	181,
									"scores":	[-6.39695600548304]
								}, {
									"case":	182,
									"scores":	[-6.39695600548304]
								}, {
									"case":	183,
									"scores":	[-6.39695600548304]
								}, {
									"case":	184,
									"scores":	[-6.39695600548304]
								}, {
									"case":	185,
									"scores":	[-6.39695600548304]
								}, {
									"case":	186,
									"scores":	[-6.39695600548304]
								}, {
									"case":	187,
									"scores":	[-6.39695600548304]
								}, {
									"case":	188,
									"scores":	[-6.39695600548304]
								}, {
									"case":	189,
									"scores":	[-6.39695600548304]
								}, {
									"case":	190,
									"scores":	[-6.39695600548304]
								}, {
									"case":	191,
									"scores":	[-6.39695600548304]
								}, {
									"case":	192,
									"scores":	[-6.39695600548304]
								}, {
									"case":	193,
									"scores":	[-6.39695600548304]
								}, {
									"case":	194,
									"scores":	[-6.39695600548304]
								}, {
									"case":	195,
									"scores":	[-6.39695600548304]
								}, {
									"case":	196,
									"scores":	[-6.39695600548304]
								}, {
									"case":	197,
									"scores":	[-6.39695600548304]
								}, {
									"case":	198,
									"scores":	[-6.39695600548304]
								}, {
									"case":	199,
									"scores":	[-6.39695600548304]
								}, {
									"case":	200,
									"scores":	[-6.39695600548304]
								}, {
									"case":	201,
									"scores":	[-6.39695600548304]
								}, {
									"case":	202,
									"scores":	[-6.39695600548304]
								}, {
									"case":	203,
									"scores":	[-6.39695600548304]
								}, {
									"case":	204,
									"scores":	[-6.39695600548304]
								}, {
									"case":	205,
									"scores":	[-6.39695600548304]
								}, {
									"case":	206,
									"scores":	[-6.39695600548304]
								}, {
									"case":	207,
									"scores":	[-6.39695600548304]
								}, {
									"case":	208,
									"scores":	[-6.39695600548304]
								}, {
									"case":	209,
									"scores":	[-6.39695600548304]
								}, {
									"case":	210,
									"scores":	[-6.39695600548304]
								}, {
									"case":	211,
									"scores":	[-6.39695600548304]
								}, {
									"case":	212,
									"scores":	[-6.39695600548304]
								}, {
									"case":	213,
									"scores":	[-6.39695600548304]
								}, {
									"case":	214,
									"scores":	[-6.39695600548304]
								}, {
									"case":	215,
									"scores":	[-6.39695600548304]
								}, {
									"case":	216,
									"scores":	[-6.39695600548304]
								}, {
									"case":	217,
									"scores":	[-6.39695600548304]
								}, {
									"case":	218,
									"scores":	[-6.39695600548304]
								}, {
									"case":	219,
									"scores":	[-6.39695600548304]
								}, {
									"case":	220,
									"scores":	[-6.39695600548304]
								}, {
									"case":	221,
									"scores":	[-6.39695600548304]
								}, {
									"case":	222,
									"scores":	[-6.39695600548304]
								}, {
									"case":	223,
									"scores":	[-6.39695600548304]
								}, {
									"case":	224,
									"scores":	[-6.39695600548304]
								}, {
									"case":	225,
									"scores":	[-6.39695600548304]
								}, {
									"case":	226,
									"scores":	[-6.39695600548304]
								}, {
									"case":	227,
									"scores":	[-6.39695600548304]
								}, {
									"case":	228,
									"scores":	[-6.39695600548304]
								}, {
									"case":	229,
									"scores":	[-6.39695600548304]
								}, {
									"case":	230,
									"scores":	[-6.39695600548304]
								}, {
									"case":	231,
									"scores":	[-6.39695600548304]
								}, {
									"case":	232,
									"scores":	[-6.39695600548304]
								}, {
									"case":	233,
									"scores":	[-6.39695600548304]
								}, {
									"case":	234,
									"scores":	[-6.39695600548304]
								}, {
									"case":	235,
									"scores":	[-6.39695600548304]
								}, {
									"case":	236,
									"scores":	[-6.39695600548304]
								}, {
									"case":	237,
									"scores":	[-6.39695600548304]
								}, {
									"case":	238,
									"scores":	[-6.39695600548304]
								}, {
									"case":	239,
									"scores":	[-6.39695600548304]
								}, {
									"case":	240,
									"scores":	[-6.39695600548304]
								}, {
									"case":	241,
									"scores":	[-6.39695600548304]
								}, {
									"case":	242,
									"scores":	[-6.39695600548304]
								}, {
									"case":	243,
									"scores":	[-6.39695600548304]
								}, {
									"case":	244,
									"scores":	[-6.39695600548304]
								}, {
									"case":	245,
									"scores":	[-6.39695600548304]
								}, {
									"case":	246,
									"scores":	[-6.39695600548304]
								}, {
									"case":	247,
									"scores":	[-6.39695600548304]
								}, {
									"case":	248,
									"scores":	[-6.39695600548304]
								}, {
									"case":	249,
									"scores":	[-6.39695600548304]
								}, {
									"case":	250,
									"scores":	[-6.39695600548304]
								}, {
									"case":	251,
									"scores":	[-6.39695600548304]
								}, {
									"case":	252,
									"scores":	[-6.39695600548304]
								}, {
									"case":	253,
									"scores":	[-6.39695600548304]
								}, {
									"case":	254,
									"scores":	[-6.39695600548304]
								}, {
									"case":	255,
									"scores":	[-6.39695600548304]
								}, {
									"case":	256,
									"scores":	[-6.39695600548304]
								}, {
									"case":	257,
									"scores":	[-6.39695600548304]
								}, {
									"case":	258,
									"scores":	[-6.39695600548304]
								}, {
									"case":	259,
									"scores":	[-6.39695600548304]
								}, {
									"case":	260,
									"scores":	[-7.23974396028304, -10.129680787183039, -10.190304689283041, -11.033231546183039, -8.76485884148304, -10.432327895483041, -9.96437985548304, -10.210418769283041, -9.56548101548304, -9.30789584148304, -10.17480540328304, -10.463726375483041, -10.463726375483041, -10.463726375483041, -10.463726375483041, -10.463726375483041, -10.463726375483041, -10.674615492483039, -10.709765289283041, -10.463726375483041, -10.463726375483041, -10.463726375483041, -10.463726375483041, -10.463726375483041, -10.463726375483041, -10.463726375483041, -10.463726375483041, -10.463726375483041, -10.463726375483041, -10.463726375483041, -10.709765289283041]
								}]
						}, {
							"switch":	25,
							"types":	[[], [], [1], [], [], [], [3, 4], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	3038,
							"begin_column":	2,
							"end_line":	3038,
							"end_column":	74,
							"patch_codes":	["if (!__is_neg(\"\", \"L3038\", 31, &(object), sizeof (object), &(dateobj), sizeof (dateobj), &(return_value), sizeof (return_value), &(dateobj->time), sizeof (dateobj->time), &(h), sizeof (h), &(dateobj->time->h), sizeof (dateobj->time->h), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(i), sizeof (i), &(s), sizeof (s), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    dateobj = (php_date_obj *)zend_object_store_get_object(object);\n", "{\n}\n", "dateobj = (dateobj)", "dateobj = (php_date_obj *)zend_object_store_get_object(object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.66560579948304, -9.46227867438304, -9.36427366548304, -9.69901726338304, -7.68348983948304, -8.38997529548304, -8.69536841148304, -9.45325651148304, -8.11606198948304, -7.80226428948304, -9.16216315148304, -8.52308187548304, -8.52308187548304, -8.52308187548304, -8.52308187548304, -8.52308187548304, -8.52308187548304, -8.99234187548304, -9.28096997548304, -8.52308187548304, -8.52308187548304, -8.52308187548304, -8.52308187548304, -8.52308187548304, -8.52308187548304, -8.52308187548304, -8.52308187548304, -8.52308187548304, -8.52308187548304, -8.52308187548304, -9.28096997548304]
								}, {
									"case":	2,
									"scores":	[-6.39695600548304]
								}, {
									"case":	3,
									"scores":	[-6.39695600548304]
								}, {
									"case":	4,
									"scores":	[-6.39695600548304]
								}]
						}]
				}, {
					"line":	3038,
					"switches":	[{
							"switch":	26,
							"types":	[[], [], [], [], [260], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [], [], [], [175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174], [], [], [], [], [], []],
							"begin_line":	3039,
							"begin_column":	0,
							"end_line":	3039,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->h = (-1)", "dateobj->time->h = (0)", "dateobj->time->h = (1)", "dateobj->time->h = (2)", "dateobj->time->h = (3)", "dateobj->time->i = (-1)", "dateobj->time->i = (0)", "dateobj->time->i = (1)", "dateobj->time->i = (2)", "dateobj->time->i = (3)", "dateobj->time->s = (-1)", "dateobj->time->s = (0)", "dateobj->time->s = (1)", "dateobj->time->s = (2)", "dateobj->time->s = (3)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((dateobj), 0, sizeof(php_date_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->h = h", "dateobj->time->i = i", "dateobj->time->s = s", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3039\", 31, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(h), sizeof (h), &(dateobj->time->h), sizeof (dateobj->time->h), &(i), sizeof (i), &(dateobj->time->i), sizeof (dateobj->time->i), &(s), sizeof (s), &(dateobj->time->s), sizeof (dateobj->time->s), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.37675329816552]
								}, {
									"case":	2,
									"scores":	[-6.37675329816552]
								}, {
									"case":	3,
									"scores":	[-6.37675329816552]
								}, {
									"case":	4,
									"scores":	[-6.37675329816552]
								}, {
									"case":	5,
									"scores":	[-6.37675329816552]
								}, {
									"case":	6,
									"scores":	[-6.37675329816552]
								}, {
									"case":	7,
									"scores":	[-6.37675329816552]
								}, {
									"case":	8,
									"scores":	[-6.37675329816552]
								}, {
									"case":	9,
									"scores":	[-6.37675329816552]
								}, {
									"case":	10,
									"scores":	[-6.37675329816552]
								}, {
									"case":	11,
									"scores":	[-6.37675329816552]
								}, {
									"case":	12,
									"scores":	[-6.37675329816552]
								}, {
									"case":	13,
									"scores":	[-6.37675329816552]
								}, {
									"case":	14,
									"scores":	[-6.37675329816552]
								}, {
									"case":	15,
									"scores":	[-6.37675329816552]
								}, {
									"case":	16,
									"scores":	[-6.37675329816552]
								}, {
									"case":	17,
									"scores":	[-6.37675329816552]
								}, {
									"case":	18,
									"scores":	[-6.37675329816552]
								}, {
									"case":	19,
									"scores":	[-6.37675329816552]
								}, {
									"case":	20,
									"scores":	[-6.37675329816552]
								}, {
									"case":	21,
									"scores":	[-6.37675329816552]
								}, {
									"case":	22,
									"scores":	[-6.37675329816552]
								}, {
									"case":	23,
									"scores":	[-6.37675329816552]
								}, {
									"case":	24,
									"scores":	[-6.37675329816552]
								}, {
									"case":	25,
									"scores":	[-6.37675329816552]
								}, {
									"case":	26,
									"scores":	[-6.37675329816552]
								}, {
									"case":	27,
									"scores":	[-6.37675329816552]
								}, {
									"case":	28,
									"scores":	[-6.37675329816552]
								}, {
									"case":	29,
									"scores":	[-6.37675329816552]
								}, {
									"case":	30,
									"scores":	[-6.37675329816552]
								}, {
									"case":	31,
									"scores":	[-6.37675329816552]
								}, {
									"case":	32,
									"scores":	[-6.37675329816552]
								}, {
									"case":	33,
									"scores":	[-6.37675329816552]
								}, {
									"case":	34,
									"scores":	[-6.37675329816552]
								}, {
									"case":	35,
									"scores":	[-6.37675329816552]
								}, {
									"case":	36,
									"scores":	[-6.37675329816552]
								}, {
									"case":	37,
									"scores":	[-6.37675329816552]
								}, {
									"case":	38,
									"scores":	[-6.37675329816552]
								}, {
									"case":	39,
									"scores":	[-6.37675329816552]
								}, {
									"case":	40,
									"scores":	[-6.37675329816552]
								}, {
									"case":	41,
									"scores":	[-6.37675329816552]
								}, {
									"case":	42,
									"scores":	[-6.37675329816552]
								}, {
									"case":	43,
									"scores":	[-6.37675329816552]
								}, {
									"case":	44,
									"scores":	[-6.37675329816552]
								}, {
									"case":	45,
									"scores":	[-6.37675329816552]
								}, {
									"case":	46,
									"scores":	[-6.37675329816552]
								}, {
									"case":	47,
									"scores":	[-6.37675329816552]
								}, {
									"case":	48,
									"scores":	[-6.37675329816552]
								}, {
									"case":	49,
									"scores":	[-6.37675329816552]
								}, {
									"case":	50,
									"scores":	[-6.37675329816552]
								}, {
									"case":	51,
									"scores":	[-6.37675329816552]
								}, {
									"case":	52,
									"scores":	[-6.37675329816552]
								}, {
									"case":	53,
									"scores":	[-6.37675329816552]
								}, {
									"case":	54,
									"scores":	[-6.37675329816552]
								}, {
									"case":	55,
									"scores":	[-6.37675329816552]
								}, {
									"case":	56,
									"scores":	[-6.37675329816552]
								}, {
									"case":	57,
									"scores":	[-6.37675329816552]
								}, {
									"case":	58,
									"scores":	[-6.37675329816552]
								}, {
									"case":	59,
									"scores":	[-6.37675329816552]
								}, {
									"case":	60,
									"scores":	[-6.37675329816552]
								}, {
									"case":	61,
									"scores":	[-6.37675329816552]
								}, {
									"case":	62,
									"scores":	[-6.37675329816552]
								}, {
									"case":	63,
									"scores":	[-6.37675329816552]
								}, {
									"case":	64,
									"scores":	[-6.37675329816552]
								}, {
									"case":	65,
									"scores":	[-6.37675329816552]
								}, {
									"case":	66,
									"scores":	[-6.37675329816552]
								}, {
									"case":	67,
									"scores":	[-6.37675329816552]
								}, {
									"case":	68,
									"scores":	[-6.37675329816552]
								}, {
									"case":	69,
									"scores":	[-6.37675329816552]
								}, {
									"case":	70,
									"scores":	[-6.37675329816552]
								}, {
									"case":	71,
									"scores":	[-6.37675329816552]
								}, {
									"case":	72,
									"scores":	[-6.37675329816552]
								}, {
									"case":	73,
									"scores":	[-6.37675329816552]
								}, {
									"case":	74,
									"scores":	[-6.37675329816552]
								}, {
									"case":	75,
									"scores":	[-6.37675329816552]
								}, {
									"case":	76,
									"scores":	[-6.37675329816552]
								}, {
									"case":	77,
									"scores":	[-6.37675329816552]
								}, {
									"case":	78,
									"scores":	[-6.37675329816552]
								}, {
									"case":	79,
									"scores":	[-6.37675329816552]
								}, {
									"case":	80,
									"scores":	[-6.37675329816552]
								}, {
									"case":	81,
									"scores":	[-6.37675329816552]
								}, {
									"case":	82,
									"scores":	[-6.37675329816552]
								}, {
									"case":	83,
									"scores":	[-6.37675329816552]
								}, {
									"case":	84,
									"scores":	[-6.37675329816552]
								}, {
									"case":	85,
									"scores":	[-6.37675329816552]
								}, {
									"case":	86,
									"scores":	[-6.37675329816552]
								}, {
									"case":	87,
									"scores":	[-6.37675329816552]
								}, {
									"case":	88,
									"scores":	[-6.37675329816552]
								}, {
									"case":	89,
									"scores":	[-6.37675329816552]
								}, {
									"case":	90,
									"scores":	[-6.37675329816552]
								}, {
									"case":	91,
									"scores":	[-6.37675329816552]
								}, {
									"case":	92,
									"scores":	[-6.37675329816552]
								}, {
									"case":	93,
									"scores":	[-6.37675329816552]
								}, {
									"case":	94,
									"scores":	[-6.37675329816552]
								}, {
									"case":	95,
									"scores":	[-6.37675329816552]
								}, {
									"case":	96,
									"scores":	[-6.37675329816552]
								}, {
									"case":	97,
									"scores":	[-6.37675329816552]
								}, {
									"case":	98,
									"scores":	[-6.37675329816552]
								}, {
									"case":	99,
									"scores":	[-6.37675329816552]
								}, {
									"case":	100,
									"scores":	[-6.37675329816552]
								}, {
									"case":	101,
									"scores":	[-6.37675329816552]
								}, {
									"case":	102,
									"scores":	[-6.37675329816552]
								}, {
									"case":	103,
									"scores":	[-6.37675329816552]
								}, {
									"case":	104,
									"scores":	[-6.37675329816552]
								}, {
									"case":	105,
									"scores":	[-6.37675329816552]
								}, {
									"case":	106,
									"scores":	[-6.37675329816552]
								}, {
									"case":	107,
									"scores":	[-6.37675329816552]
								}, {
									"case":	108,
									"scores":	[-6.37675329816552]
								}, {
									"case":	109,
									"scores":	[-6.37675329816552]
								}, {
									"case":	110,
									"scores":	[-6.37675329816552]
								}, {
									"case":	111,
									"scores":	[-6.37675329816552]
								}, {
									"case":	112,
									"scores":	[-6.37675329816552]
								}, {
									"case":	113,
									"scores":	[-6.37675329816552]
								}, {
									"case":	114,
									"scores":	[-6.37675329816552]
								}, {
									"case":	115,
									"scores":	[-6.37675329816552]
								}, {
									"case":	116,
									"scores":	[-6.37675329816552]
								}, {
									"case":	117,
									"scores":	[-6.37675329816552]
								}, {
									"case":	118,
									"scores":	[-6.37675329816552]
								}, {
									"case":	119,
									"scores":	[-6.37675329816552]
								}, {
									"case":	120,
									"scores":	[-6.37675329816552]
								}, {
									"case":	121,
									"scores":	[-6.37675329816552]
								}, {
									"case":	122,
									"scores":	[-6.37675329816552]
								}, {
									"case":	123,
									"scores":	[-6.37675329816552]
								}, {
									"case":	124,
									"scores":	[-6.37675329816552]
								}, {
									"case":	125,
									"scores":	[-6.37675329816552]
								}, {
									"case":	126,
									"scores":	[-6.37675329816552]
								}, {
									"case":	127,
									"scores":	[-6.37675329816552]
								}, {
									"case":	128,
									"scores":	[-6.37675329816552]
								}, {
									"case":	129,
									"scores":	[-6.37675329816552]
								}, {
									"case":	130,
									"scores":	[-6.37675329816552]
								}, {
									"case":	131,
									"scores":	[-6.37675329816552]
								}, {
									"case":	132,
									"scores":	[-6.37675329816552]
								}, {
									"case":	133,
									"scores":	[-6.37675329816552]
								}, {
									"case":	134,
									"scores":	[-6.37675329816552]
								}, {
									"case":	135,
									"scores":	[-6.37675329816552]
								}, {
									"case":	136,
									"scores":	[-6.37675329816552]
								}, {
									"case":	137,
									"scores":	[-6.37675329816552]
								}, {
									"case":	138,
									"scores":	[-6.37675329816552]
								}, {
									"case":	139,
									"scores":	[-6.37675329816552]
								}, {
									"case":	140,
									"scores":	[-6.37675329816552]
								}, {
									"case":	141,
									"scores":	[-6.37675329816552]
								}, {
									"case":	142,
									"scores":	[-6.37675329816552]
								}, {
									"case":	143,
									"scores":	[-6.37675329816552]
								}, {
									"case":	144,
									"scores":	[-6.37675329816552]
								}, {
									"case":	145,
									"scores":	[-6.37675329816552]
								}, {
									"case":	146,
									"scores":	[-6.37675329816552]
								}, {
									"case":	147,
									"scores":	[-6.37675329816552]
								}, {
									"case":	148,
									"scores":	[-6.37675329816552]
								}, {
									"case":	149,
									"scores":	[-6.37675329816552]
								}, {
									"case":	150,
									"scores":	[-6.37675329816552]
								}, {
									"case":	151,
									"scores":	[-6.37675329816552]
								}, {
									"case":	152,
									"scores":	[-6.37675329816552]
								}, {
									"case":	153,
									"scores":	[-6.37675329816552]
								}, {
									"case":	154,
									"scores":	[-6.37675329816552]
								}, {
									"case":	155,
									"scores":	[-6.37675329816552]
								}, {
									"case":	156,
									"scores":	[-6.37675329816552]
								}, {
									"case":	157,
									"scores":	[-6.37675329816552]
								}, {
									"case":	158,
									"scores":	[-6.37675329816552]
								}, {
									"case":	159,
									"scores":	[-6.37675329816552]
								}, {
									"case":	160,
									"scores":	[-6.37675329816552]
								}, {
									"case":	161,
									"scores":	[-6.37675329816552]
								}, {
									"case":	162,
									"scores":	[-6.37675329816552]
								}, {
									"case":	163,
									"scores":	[-6.37675329816552]
								}, {
									"case":	164,
									"scores":	[-6.37675329816552]
								}, {
									"case":	165,
									"scores":	[-6.37675329816552]
								}, {
									"case":	166,
									"scores":	[-6.37675329816552]
								}, {
									"case":	167,
									"scores":	[-6.37675329816552]
								}, {
									"case":	168,
									"scores":	[-6.37675329816552]
								}, {
									"case":	169,
									"scores":	[-6.37675329816552]
								}, {
									"case":	170,
									"scores":	[-6.37675329816552]
								}, {
									"case":	171,
									"scores":	[-6.37675329816552]
								}, {
									"case":	172,
									"scores":	[-6.37675329816552]
								}, {
									"case":	173,
									"scores":	[-6.37675329816552]
								}, {
									"case":	174,
									"scores":	[-6.37675329816552]
								}, {
									"case":	175,
									"scores":	[-6.37675329816552]
								}, {
									"case":	176,
									"scores":	[-6.37675329816552]
								}, {
									"case":	177,
									"scores":	[-6.37675329816552]
								}, {
									"case":	178,
									"scores":	[-6.37675329816552]
								}, {
									"case":	179,
									"scores":	[-6.37675329816552]
								}, {
									"case":	180,
									"scores":	[-6.37675329816552]
								}, {
									"case":	181,
									"scores":	[-6.37675329816552]
								}, {
									"case":	182,
									"scores":	[-6.37675329816552]
								}, {
									"case":	183,
									"scores":	[-6.37675329816552]
								}, {
									"case":	184,
									"scores":	[-6.37675329816552]
								}, {
									"case":	185,
									"scores":	[-6.37675329816552]
								}, {
									"case":	186,
									"scores":	[-6.37675329816552]
								}, {
									"case":	187,
									"scores":	[-6.37675329816552]
								}, {
									"case":	188,
									"scores":	[-6.37675329816552]
								}, {
									"case":	189,
									"scores":	[-6.37675329816552]
								}, {
									"case":	190,
									"scores":	[-6.37675329816552]
								}, {
									"case":	191,
									"scores":	[-6.37675329816552]
								}, {
									"case":	192,
									"scores":	[-6.37675329816552]
								}, {
									"case":	193,
									"scores":	[-6.37675329816552]
								}, {
									"case":	194,
									"scores":	[-6.37675329816552]
								}, {
									"case":	195,
									"scores":	[-6.37675329816552]
								}, {
									"case":	196,
									"scores":	[-6.37675329816552]
								}, {
									"case":	197,
									"scores":	[-6.37675329816552]
								}, {
									"case":	198,
									"scores":	[-6.37675329816552]
								}, {
									"case":	199,
									"scores":	[-6.37675329816552]
								}, {
									"case":	200,
									"scores":	[-6.37675329816552]
								}, {
									"case":	201,
									"scores":	[-6.37675329816552]
								}, {
									"case":	202,
									"scores":	[-6.37675329816552]
								}, {
									"case":	203,
									"scores":	[-6.37675329816552]
								}, {
									"case":	204,
									"scores":	[-6.37675329816552]
								}, {
									"case":	205,
									"scores":	[-6.37675329816552]
								}, {
									"case":	206,
									"scores":	[-6.37675329816552]
								}, {
									"case":	207,
									"scores":	[-6.37675329816552]
								}, {
									"case":	208,
									"scores":	[-6.37675329816552]
								}, {
									"case":	209,
									"scores":	[-6.37675329816552]
								}, {
									"case":	210,
									"scores":	[-6.37675329816552]
								}, {
									"case":	211,
									"scores":	[-6.37675329816552]
								}, {
									"case":	212,
									"scores":	[-6.37675329816552]
								}, {
									"case":	213,
									"scores":	[-6.37675329816552]
								}, {
									"case":	214,
									"scores":	[-6.37675329816552]
								}, {
									"case":	215,
									"scores":	[-6.37675329816552]
								}, {
									"case":	216,
									"scores":	[-6.37675329816552]
								}, {
									"case":	217,
									"scores":	[-6.37675329816552]
								}, {
									"case":	218,
									"scores":	[-6.37675329816552]
								}, {
									"case":	219,
									"scores":	[-6.37675329816552]
								}, {
									"case":	220,
									"scores":	[-6.37675329816552]
								}, {
									"case":	221,
									"scores":	[-6.37675329816552]
								}, {
									"case":	222,
									"scores":	[-6.37675329816552]
								}, {
									"case":	223,
									"scores":	[-6.37675329816552]
								}, {
									"case":	224,
									"scores":	[-6.37675329816552]
								}, {
									"case":	225,
									"scores":	[-6.37675329816552]
								}, {
									"case":	226,
									"scores":	[-6.37675329816552]
								}, {
									"case":	227,
									"scores":	[-6.37675329816552]
								}, {
									"case":	228,
									"scores":	[-6.37675329816552]
								}, {
									"case":	229,
									"scores":	[-6.37675329816552]
								}, {
									"case":	230,
									"scores":	[-6.37675329816552]
								}, {
									"case":	231,
									"scores":	[-6.37675329816552]
								}, {
									"case":	232,
									"scores":	[-6.37675329816552]
								}, {
									"case":	233,
									"scores":	[-6.37675329816552]
								}, {
									"case":	234,
									"scores":	[-6.37675329816552]
								}, {
									"case":	235,
									"scores":	[-6.37675329816552]
								}, {
									"case":	236,
									"scores":	[-6.37675329816552]
								}, {
									"case":	237,
									"scores":	[-6.37675329816552]
								}, {
									"case":	238,
									"scores":	[-6.37675329816552]
								}, {
									"case":	239,
									"scores":	[-6.37675329816552]
								}, {
									"case":	240,
									"scores":	[-6.37675329816552]
								}, {
									"case":	241,
									"scores":	[-6.37675329816552]
								}, {
									"case":	242,
									"scores":	[-6.37675329816552]
								}, {
									"case":	243,
									"scores":	[-6.37675329816552]
								}, {
									"case":	244,
									"scores":	[-6.37675329816552]
								}, {
									"case":	245,
									"scores":	[-6.37675329816552]
								}, {
									"case":	246,
									"scores":	[-6.37675329816552]
								}, {
									"case":	247,
									"scores":	[-6.37675329816552]
								}, {
									"case":	248,
									"scores":	[-6.37675329816552]
								}, {
									"case":	249,
									"scores":	[-6.37675329816552]
								}, {
									"case":	250,
									"scores":	[-6.37675329816552]
								}, {
									"case":	251,
									"scores":	[-6.37675329816552]
								}, {
									"case":	252,
									"scores":	[-6.37675329816552]
								}, {
									"case":	253,
									"scores":	[-6.37675329816552]
								}, {
									"case":	254,
									"scores":	[-6.37675329816552]
								}, {
									"case":	255,
									"scores":	[-6.37675329816552]
								}, {
									"case":	256,
									"scores":	[-6.37675329816552]
								}, {
									"case":	257,
									"scores":	[-6.37675329816552]
								}, {
									"case":	258,
									"scores":	[-6.37675329816552]
								}, {
									"case":	259,
									"scores":	[-6.37675329816552]
								}, {
									"case":	260,
									"scores":	[-11.680758981965521, -10.566954892865521, -12.523685838865521, -11.092346781965521, -10.255313134165521, -11.92278218816552, -10.512898308165521, -11.92278218816552, -10.798350134165521, -11.95418066816552, -11.454834148165521, -11.70087306196552, -11.665259695965521, -11.95418066816552, -11.95418066816552, -11.95418066816552, -11.95418066816552, -12.165069785165519, -12.20021958196552, -11.95418066816552, -11.95418066816552, -11.95418066816552, -11.95418066816552, -11.95418066816552, -11.95418066816552, -11.95418066816552, -11.95418066816552, -11.95418066816552, -11.95418066816552, -11.95418066816552, -12.20021958196552]
								}]
						}, {
							"switch":	27,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	3039,
							"begin_column":	2,
							"end_line":	3039,
							"end_column":	48,
							"patch_codes":	["if (__is_neg(\"\", \"L3039\", 31, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(h), sizeof (h), &(dateobj->time->h), sizeof (dateobj->time->h), &(i), sizeof (i), &(dateobj->time->i), sizeof (dateobj->time->i), &(s), sizeof (s), &(dateobj->time->s), sizeof (dateobj->time->s), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((!(dateobj->time)) || __is_neg(\"\", \"L3039\", 31, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(h), sizeof (h), &(dateobj->time->h), sizeof (dateobj->time->h), &(i), sizeof (i), &(dateobj->time->i), sizeof (dateobj->time->i), &(s), sizeof (s), &(dateobj->time->s), sizeof (dateobj->time->s), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((!(dateobj->time)) && !__is_neg(\"\", \"L3039\", 31, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(h), sizeof (h), &(dateobj->time->h), sizeof (dateobj->time->h), &(i), sizeof (i), &(dateobj->time->i), sizeof (dateobj->time->i), &(s), sizeof (s), &(dateobj->time->s), sizeof (dateobj->time->s), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.0952119814281449, -5.4455976093281464, -6.429955579328146, -5.2390344514281457, -4.4144281554281459, -5.1209136114281453, -4.7282258554281462, -5.1209136114281453, -4.533202605428146, -5.254020191428145, -5.4263067274281456, -6.1841948274281453, -5.8931014674281457, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.7232801914281453, -6.0119082914281456, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -6.0119082914281456]
								}, {
									"case":	2,
									"scores":	[-5.6086513334281456, -4.9590369613281462, -5.9433949313281458, -4.7524738034281464, -3.9278675074281462, -4.634352963428146, -4.241665207428146, -4.634352963428146, -4.0466419574281458, -4.7674595434281457, -4.9397460794281454, -5.697634179428146, -5.4065408194281463, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -5.2367195434281459, -5.5253476434281454, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -5.5253476434281454]
								}, {
									"case":	3,
									"scores":	[-5.6086513334281456, -4.9590369613281462, -5.9433949313281458, -4.7524738034281464, -3.9278675074281462, -4.634352963428146, -4.241665207428146, -4.634352963428146, -4.0466419574281458, -4.7674595434281457, -4.9397460794281454, -5.697634179428146, -5.4065408194281463, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -5.2367195434281459, -5.5253476434281454, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -5.5253476434281454]
								}]
						}, {
							"switch":	28,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	3039,
							"begin_column":	2,
							"end_line":	3039,
							"end_column":	48,
							"patch_codes":	["if (!__is_neg(\"\", \"L3039\", 31, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(h), sizeof (h), &(dateobj->time->h), sizeof (dateobj->time->h), &(i), sizeof (i), &(dateobj->time->i), sizeof (dateobj->time->i), &(s), sizeof (s), &(dateobj->time->s), sizeof (dateobj->time->s), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    if (!(dateobj->time)) {\n        php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n        {\n            do {\n                zval *__z = (return_value);\n                (*__z).value.lval = ((0) != 0);\n                (*__z).type = 3;\n            } while (0);\n            return;\n        }\n        ;\n    }\n", "if (!__is_neg(\"\", \"L3039\", 31, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(h), sizeof (h), &(dateobj->time->h), sizeof (dateobj->time->h), &(i), sizeof (i), &(dateobj->time->i), sizeof (dateobj->time->i), &(s), sizeof (s), &(dateobj->time->s), sizeof (dateobj->time->s), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)) && (!(dateobj->time))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.016011568165521, -9.36639719606552, -10.35075516606552, -9.15983403816552, -8.33522774216552, -9.04171319816552, -8.64902544216552, -9.04171319816552, -8.45400219216552, -9.17481977816552, -9.34710631416552, -10.104994414165521, -9.81390105416552, -9.17481977816552, -9.17481977816552, -9.17481977816552, -9.17481977816552, -9.64407977816552, -9.93270787816552, -9.17481977816552, -9.17481977816552, -9.17481977816552, -9.17481977816552, -9.17481977816552, -9.17481977816552, -9.17481977816552, -9.17481977816552, -9.17481977816552, -9.17481977816552, -9.17481977816552, -9.93270787816552]
								}, {
									"case":	2,
									"scores":	[-9.45149342616552, -8.80187905406552, -9.78623702406552, -8.59531589616552, -7.77070960016552, -8.47719505616552, -8.08450730016552, -8.47719505616552, -7.88948405016552, -8.61030163616552, -8.78258817216552, -9.54047627216552, -9.24938291216552, -8.61030163616552, -8.61030163616552, -8.61030163616552, -8.61030163616552, -9.07956163616552, -9.36818973616552, -8.61030163616552, -8.61030163616552, -8.61030163616552, -8.61030163616552, -8.61030163616552, -8.61030163616552, -8.61030163616552, -8.61030163616552, -8.61030163616552, -8.61030163616552, -8.61030163616552, -9.36818973616552]
								}]
						}]
				}, {
					"line":	3039,
					"switches":	[{
							"switch":	29,
							"types":	[[], [], [], [], [260], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [], [], [], [175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174], [], [], [], [], [], []],
							"begin_line":	3040,
							"begin_column":	0,
							"end_line":	3040,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->h = (-1)", "dateobj->time->h = (0)", "dateobj->time->h = (1)", "dateobj->time->h = (2)", "dateobj->time->h = (3)", "dateobj->time->i = (-1)", "dateobj->time->i = (0)", "dateobj->time->i = (1)", "dateobj->time->i = (2)", "dateobj->time->i = (3)", "dateobj->time->s = (-1)", "dateobj->time->s = (0)", "dateobj->time->s = (1)", "dateobj->time->s = (2)", "dateobj->time->s = (3)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((dateobj), 0, sizeof(php_date_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->h = h", "dateobj->time->i = i", "dateobj->time->s = s", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3040\", 31, &(dateobj), sizeof (dateobj), &(h), sizeof (h), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time), sizeof (dateobj->time), &(return_value), sizeof (return_value), &(i), sizeof (i), &(dateobj->time->i), sizeof (dateobj->time->i), &(object), sizeof (object), &(s), sizeof (s), &(dateobj->time->s), sizeof (dateobj->time->s), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	2,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	3,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	4,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	5,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	6,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	7,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	8,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	9,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	10,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	11,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	12,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	13,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	14,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	15,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	16,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	17,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	18,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	19,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	20,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	21,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	22,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	23,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	24,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	25,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	26,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	27,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	28,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	29,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	30,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	31,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	32,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	33,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	34,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	35,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	36,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	37,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	38,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	39,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	40,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	41,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	42,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	43,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	44,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	45,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	46,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	47,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	48,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	49,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	50,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	51,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	52,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	53,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	54,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	55,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	56,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	57,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	58,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	59,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	60,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	61,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	62,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	63,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	64,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	65,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	66,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	67,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	68,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	69,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	70,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	71,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	72,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	73,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	74,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	75,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	76,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	77,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	78,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	79,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	80,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	81,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	82,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	83,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	84,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	85,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	86,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	87,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	88,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	89,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	90,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	91,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	92,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	93,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	94,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	95,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	96,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	97,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	98,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	99,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	100,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	101,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	102,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	103,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	104,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	105,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	106,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	107,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	108,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	109,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	110,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	111,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	112,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	113,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	114,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	115,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	116,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	117,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	118,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	119,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	120,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	121,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	122,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	123,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	124,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	125,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	126,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	127,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	128,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	129,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	130,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	131,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	132,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	133,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	134,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	135,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	136,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	137,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	138,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	139,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	140,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	141,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	142,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	143,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	144,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	145,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	146,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	147,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	148,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	149,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	150,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	151,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	152,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	153,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	154,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	155,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	156,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	157,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	158,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	159,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	160,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	161,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	162,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	163,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	164,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	165,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	166,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	167,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	168,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	169,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	170,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	171,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	172,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	173,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	174,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	175,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	176,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	177,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	178,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	179,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	180,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	181,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	182,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	183,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	184,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	185,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	186,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	187,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	188,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	189,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	190,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	191,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	192,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	193,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	194,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	195,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	196,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	197,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	198,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	199,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	200,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	201,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	202,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	203,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	204,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	205,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	206,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	207,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	208,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	209,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	210,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	211,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	212,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	213,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	214,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	215,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	216,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	217,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	218,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	219,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	220,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	221,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	222,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	223,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	224,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	225,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	226,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	227,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	228,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	229,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	230,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	231,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	232,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	233,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	234,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	235,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	236,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	237,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	238,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	239,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	240,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	241,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	242,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	243,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	244,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	245,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	246,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	247,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	248,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	249,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	250,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	251,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	252,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	253,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	254,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	255,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	256,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	257,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	258,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	259,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	260,
									"scores":	[-8.23267123963048, -7.4497181409304822, -9.0903055559304828, -9.9267506726304831, -9.7069106287304834, -8.88073431493048, -9.94893383493048, -9.4758490287304831, -8.623149140930483, -9.94893383493048, -9.46087171493048, -9.7069106287304834, -9.67129726273048, -9.98033231493048, -9.98033231493048, -9.98033231493048, -9.98033231493048, -10.191221431930483, -10.226371228730482, -9.98033231493048, -9.98033231493048, -9.98033231493048, -9.98033231493048, -9.98033231493048, -9.98033231493048, -9.98033231493048, -9.98033231493048, -9.98033231493048, -9.98033231493048, -9.98033231493048, -10.226371228730482]
								}]
						}, {
							"switch":	30,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	3040,
							"begin_column":	2,
							"end_line":	3040,
							"end_column":	21,
							"patch_codes":	["if (!__is_neg(\"\", \"L3040\", 31, &(dateobj), sizeof (dateobj), &(h), sizeof (h), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time), sizeof (dateobj->time), &(return_value), sizeof (return_value), &(i), sizeof (i), &(dateobj->time->i), sizeof (dateobj->time->i), &(object), sizeof (object), &(s), sizeof (s), &(dateobj->time->s), sizeof (dateobj->time->s), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    dateobj->time->h = h;\n", "{\n}\n", "dateobj->time->h = (-1)", "dateobj->time->h = (0 * h)", "dateobj->time->h = (0 * ht)", "dateobj->time->h = (0 * i)", "dateobj->time->h = (0 * return_value_used)", "dateobj->time->h = (0 * s)", "dateobj->time->h = (0)", "dateobj->time->h = (1)", "dateobj->time->h = (2)", "dateobj->time->h = (3)", "dateobj->time->h = (dateobj != 0)", "dateobj->time->h = (dateobj == 0)", "dateobj->time->h = (h != 0)", "dateobj->time->h = (h != i)", "dateobj->time->h = (h != s)", "dateobj->time->h = (h * ht)", "dateobj->time->h = (h * i)", "dateobj->time->h = (h * return_value_used)", "dateobj->time->h = (h * s)", "dateobj->time->h = (h + 0)", "dateobj->time->h = (h + i)", "dateobj->time->h = (h + s)", "dateobj->time->h = (h - 0)", "dateobj->time->h = (h - i)", "dateobj->time->h = (h - s)", "dateobj->time->h = (h == 0)", "dateobj->time->h = (h == i)", "dateobj->time->h = (h == s)", "dateobj->time->h = (h)", "dateobj->time->h = (ht != 0)", "dateobj->time->h = (ht != h)", "dateobj->time->h = (ht != i)", "dateobj->time->h = (ht != return_value_used)", "dateobj->time->h = (ht != s)", "dateobj->time->h = (ht * h)", "dateobj->time->h = (ht * i)", "dateobj->time->h = (ht * return_value_used)", "dateobj->time->h = (ht * s)", "dateobj->time->h = (ht + 0)", "dateobj->time->h = (ht + h)", "dateobj->time->h = (ht + i)", "dateobj->time->h = (ht + return_value_used)", "dateobj->time->h = (ht + s)", "dateobj->time->h = (ht - 0)", "dateobj->time->h = (ht - h)", "dateobj->time->h = (ht - i)", "dateobj->time->h = (ht - return_value_used)", "dateobj->time->h = (ht - s)", "dateobj->time->h = (ht == 0)", "dateobj->time->h = (ht == h)", "dateobj->time->h = (ht == i)", "dateobj->time->h = (ht == return_value_used)", "dateobj->time->h = (ht == s)", "dateobj->time->h = (i != 0)", "dateobj->time->h = (i != s)", "dateobj->time->h = (i * h)", "dateobj->time->h = (i * ht)", "dateobj->time->h = (i * return_value_used)", "dateobj->time->h = (i * s)", "dateobj->time->h = (i + 0)", "dateobj->time->h = (i + s)", "dateobj->time->h = (i - 0)", "dateobj->time->h = (i - s)", "dateobj->time->h = (i == 0)", "dateobj->time->h = (i == s)", "dateobj->time->h = (i)", "dateobj->time->h = (object != 0)", "dateobj->time->h = (object == 0)", "dateobj->time->h = (return_value != 0)", "dateobj->time->h = (return_value != object)", "dateobj->time->h = (return_value != this_ptr)", "dateobj->time->h = (return_value == 0)", "dateobj->time->h = (return_value == object)", "dateobj->time->h = (return_value == this_ptr)", "dateobj->time->h = (return_value_ptr != 0)", "dateobj->time->h = (return_value_ptr == 0)", "dateobj->time->h = (return_value_used != 0)", "dateobj->time->h = (return_value_used != h)", "dateobj->time->h = (return_value_used != i)", "dateobj->time->h = (return_value_used != s)", "dateobj->time->h = (return_value_used * h)", "dateobj->time->h = (return_value_used * ht)", "dateobj->time->h = (return_value_used * i)", "dateobj->time->h = (return_value_used * s)", "dateobj->time->h = (return_value_used + 0)", "dateobj->time->h = (return_value_used + h)", "dateobj->time->h = (return_value_used + i)", "dateobj->time->h = (return_value_used + s)", "dateobj->time->h = (return_value_used - 0)", "dateobj->time->h = (return_value_used - h)", "dateobj->time->h = (return_value_used - i)", "dateobj->time->h = (return_value_used - s)", "dateobj->time->h = (return_value_used == 0)", "dateobj->time->h = (return_value_used == h)", "dateobj->time->h = (return_value_used == i)", "dateobj->time->h = (return_value_used == s)", "dateobj->time->h = (s != 0)", "dateobj->time->h = (s * h)", "dateobj->time->h = (s * ht)", "dateobj->time->h = (s * i)", "dateobj->time->h = (s * return_value_used)", "dateobj->time->h = (s + 0)", "dateobj->time->h = (s - 0)", "dateobj->time->h = (s == 0)", "dateobj->time->h = (s)", "dateobj->time->h = (this_ptr != 0)", "dateobj->time->h = (this_ptr != object)", "dateobj->time->h = (this_ptr == 0)", "dateobj->time->h = (this_ptr == object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.4567185919304819, -6.3337815635304828, -7.2204778845304824, -8.1751032704304833, -8.1947271535304829, -6.5288048135304821, -7.0873713045304818, -7.6187961995304825, -6.7099161035304826, -7.2204287835304823, -7.4368390535304822, -8.1947271535304829, -7.9036337935304823, -7.353535363530483, -7.353535363530483, -7.353535363530483, -7.353535363530483, -7.8227953635304823, -8.11142346353048, -7.353535363530483, -7.353535363530483, -7.353535363530483, -7.353535363530483, -7.353535363530483, -7.353535363530483, -7.353535363530483, -7.353535363530483, -7.353535363530483, -7.353535363530483, -7.353535363530483, -8.11142346353048]
								}, {
									"case":	2,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	3,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	4,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	5,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	6,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	7,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	8,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	9,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	10,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	11,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	12,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	13,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	14,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	15,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	16,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	17,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	18,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	19,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	20,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	21,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	22,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	23,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	24,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	25,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	26,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	27,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	28,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	29,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	30,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	31,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	32,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	33,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	34,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	35,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	36,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	37,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	38,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	39,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	40,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	41,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	42,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	43,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	44,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	45,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	46,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	47,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	48,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	49,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	50,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	51,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	52,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	53,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	54,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	55,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	56,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	57,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	58,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	59,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	60,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	61,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	62,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	63,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	64,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	65,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	66,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	67,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	68,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	69,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	70,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	71,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	72,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	73,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	74,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	75,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	76,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	77,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	78,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	79,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	80,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	81,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	82,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	83,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	84,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	85,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	86,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	87,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	88,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	89,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	90,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	91,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	92,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	93,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	94,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	95,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	96,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	97,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	98,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	99,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	100,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	101,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	102,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	103,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	104,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	105,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	106,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	107,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	108,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	109,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	110,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	111,
									"scores":	[-6.3363478835304825]
								}]
						}]
				}, {
					"line":	3040,
					"switches":	[{
							"switch":	31,
							"types":	[[], [], [], [], [260], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [], [], [], [175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174], [], [], [], [], [], []],
							"begin_line":	3041,
							"begin_column":	0,
							"end_line":	3041,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->h = (-1)", "dateobj->time->h = (0)", "dateobj->time->h = (1)", "dateobj->time->h = (2)", "dateobj->time->h = (3)", "dateobj->time->i = (-1)", "dateobj->time->i = (0)", "dateobj->time->i = (1)", "dateobj->time->i = (2)", "dateobj->time->i = (3)", "dateobj->time->s = (-1)", "dateobj->time->s = (0)", "dateobj->time->s = (1)", "dateobj->time->s = (2)", "dateobj->time->s = (3)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((dateobj), 0, sizeof(php_date_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->h = h", "dateobj->time->i = i", "dateobj->time->s = s", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3041\", 31, &(dateobj), sizeof (dateobj), &(i), sizeof (i), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time), sizeof (dateobj->time), &(h), sizeof (h), &(s), sizeof (s), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->s), sizeof (dateobj->time->s), &(return_value), sizeof (return_value), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.316145176212963]
								}, {
									"case":	2,
									"scores":	[-6.316145176212963]
								}, {
									"case":	3,
									"scores":	[-6.316145176212963]
								}, {
									"case":	4,
									"scores":	[-6.316145176212963]
								}, {
									"case":	5,
									"scores":	[-6.316145176212963]
								}, {
									"case":	6,
									"scores":	[-6.316145176212963]
								}, {
									"case":	7,
									"scores":	[-6.316145176212963]
								}, {
									"case":	8,
									"scores":	[-6.316145176212963]
								}, {
									"case":	9,
									"scores":	[-6.316145176212963]
								}, {
									"case":	10,
									"scores":	[-6.316145176212963]
								}, {
									"case":	11,
									"scores":	[-6.316145176212963]
								}, {
									"case":	12,
									"scores":	[-6.316145176212963]
								}, {
									"case":	13,
									"scores":	[-6.316145176212963]
								}, {
									"case":	14,
									"scores":	[-6.316145176212963]
								}, {
									"case":	15,
									"scores":	[-6.316145176212963]
								}, {
									"case":	16,
									"scores":	[-6.316145176212963]
								}, {
									"case":	17,
									"scores":	[-6.316145176212963]
								}, {
									"case":	18,
									"scores":	[-6.316145176212963]
								}, {
									"case":	19,
									"scores":	[-6.316145176212963]
								}, {
									"case":	20,
									"scores":	[-6.316145176212963]
								}, {
									"case":	21,
									"scores":	[-6.316145176212963]
								}, {
									"case":	22,
									"scores":	[-6.316145176212963]
								}, {
									"case":	23,
									"scores":	[-6.316145176212963]
								}, {
									"case":	24,
									"scores":	[-6.316145176212963]
								}, {
									"case":	25,
									"scores":	[-6.316145176212963]
								}, {
									"case":	26,
									"scores":	[-6.316145176212963]
								}, {
									"case":	27,
									"scores":	[-6.316145176212963]
								}, {
									"case":	28,
									"scores":	[-6.316145176212963]
								}, {
									"case":	29,
									"scores":	[-6.316145176212963]
								}, {
									"case":	30,
									"scores":	[-6.316145176212963]
								}, {
									"case":	31,
									"scores":	[-6.316145176212963]
								}, {
									"case":	32,
									"scores":	[-6.316145176212963]
								}, {
									"case":	33,
									"scores":	[-6.316145176212963]
								}, {
									"case":	34,
									"scores":	[-6.316145176212963]
								}, {
									"case":	35,
									"scores":	[-6.316145176212963]
								}, {
									"case":	36,
									"scores":	[-6.316145176212963]
								}, {
									"case":	37,
									"scores":	[-6.316145176212963]
								}, {
									"case":	38,
									"scores":	[-6.316145176212963]
								}, {
									"case":	39,
									"scores":	[-6.316145176212963]
								}, {
									"case":	40,
									"scores":	[-6.316145176212963]
								}, {
									"case":	41,
									"scores":	[-6.316145176212963]
								}, {
									"case":	42,
									"scores":	[-6.316145176212963]
								}, {
									"case":	43,
									"scores":	[-6.316145176212963]
								}, {
									"case":	44,
									"scores":	[-6.316145176212963]
								}, {
									"case":	45,
									"scores":	[-6.316145176212963]
								}, {
									"case":	46,
									"scores":	[-6.316145176212963]
								}, {
									"case":	47,
									"scores":	[-6.316145176212963]
								}, {
									"case":	48,
									"scores":	[-6.316145176212963]
								}, {
									"case":	49,
									"scores":	[-6.316145176212963]
								}, {
									"case":	50,
									"scores":	[-6.316145176212963]
								}, {
									"case":	51,
									"scores":	[-6.316145176212963]
								}, {
									"case":	52,
									"scores":	[-6.316145176212963]
								}, {
									"case":	53,
									"scores":	[-6.316145176212963]
								}, {
									"case":	54,
									"scores":	[-6.316145176212963]
								}, {
									"case":	55,
									"scores":	[-6.316145176212963]
								}, {
									"case":	56,
									"scores":	[-6.316145176212963]
								}, {
									"case":	57,
									"scores":	[-6.316145176212963]
								}, {
									"case":	58,
									"scores":	[-6.316145176212963]
								}, {
									"case":	59,
									"scores":	[-6.316145176212963]
								}, {
									"case":	60,
									"scores":	[-6.316145176212963]
								}, {
									"case":	61,
									"scores":	[-6.316145176212963]
								}, {
									"case":	62,
									"scores":	[-6.316145176212963]
								}, {
									"case":	63,
									"scores":	[-6.316145176212963]
								}, {
									"case":	64,
									"scores":	[-6.316145176212963]
								}, {
									"case":	65,
									"scores":	[-6.316145176212963]
								}, {
									"case":	66,
									"scores":	[-6.316145176212963]
								}, {
									"case":	67,
									"scores":	[-6.316145176212963]
								}, {
									"case":	68,
									"scores":	[-6.316145176212963]
								}, {
									"case":	69,
									"scores":	[-6.316145176212963]
								}, {
									"case":	70,
									"scores":	[-6.316145176212963]
								}, {
									"case":	71,
									"scores":	[-6.316145176212963]
								}, {
									"case":	72,
									"scores":	[-6.316145176212963]
								}, {
									"case":	73,
									"scores":	[-6.316145176212963]
								}, {
									"case":	74,
									"scores":	[-6.316145176212963]
								}, {
									"case":	75,
									"scores":	[-6.316145176212963]
								}, {
									"case":	76,
									"scores":	[-6.316145176212963]
								}, {
									"case":	77,
									"scores":	[-6.316145176212963]
								}, {
									"case":	78,
									"scores":	[-6.316145176212963]
								}, {
									"case":	79,
									"scores":	[-6.316145176212963]
								}, {
									"case":	80,
									"scores":	[-6.316145176212963]
								}, {
									"case":	81,
									"scores":	[-6.316145176212963]
								}, {
									"case":	82,
									"scores":	[-6.316145176212963]
								}, {
									"case":	83,
									"scores":	[-6.316145176212963]
								}, {
									"case":	84,
									"scores":	[-6.316145176212963]
								}, {
									"case":	85,
									"scores":	[-6.316145176212963]
								}, {
									"case":	86,
									"scores":	[-6.316145176212963]
								}, {
									"case":	87,
									"scores":	[-6.316145176212963]
								}, {
									"case":	88,
									"scores":	[-6.316145176212963]
								}, {
									"case":	89,
									"scores":	[-6.316145176212963]
								}, {
									"case":	90,
									"scores":	[-6.316145176212963]
								}, {
									"case":	91,
									"scores":	[-6.316145176212963]
								}, {
									"case":	92,
									"scores":	[-6.316145176212963]
								}, {
									"case":	93,
									"scores":	[-6.316145176212963]
								}, {
									"case":	94,
									"scores":	[-6.316145176212963]
								}, {
									"case":	95,
									"scores":	[-6.316145176212963]
								}, {
									"case":	96,
									"scores":	[-6.316145176212963]
								}, {
									"case":	97,
									"scores":	[-6.316145176212963]
								}, {
									"case":	98,
									"scores":	[-6.316145176212963]
								}, {
									"case":	99,
									"scores":	[-6.316145176212963]
								}, {
									"case":	100,
									"scores":	[-6.316145176212963]
								}, {
									"case":	101,
									"scores":	[-6.316145176212963]
								}, {
									"case":	102,
									"scores":	[-6.316145176212963]
								}, {
									"case":	103,
									"scores":	[-6.316145176212963]
								}, {
									"case":	104,
									"scores":	[-6.316145176212963]
								}, {
									"case":	105,
									"scores":	[-6.316145176212963]
								}, {
									"case":	106,
									"scores":	[-6.316145176212963]
								}, {
									"case":	107,
									"scores":	[-6.316145176212963]
								}, {
									"case":	108,
									"scores":	[-6.316145176212963]
								}, {
									"case":	109,
									"scores":	[-6.316145176212963]
								}, {
									"case":	110,
									"scores":	[-6.316145176212963]
								}, {
									"case":	111,
									"scores":	[-6.316145176212963]
								}, {
									"case":	112,
									"scores":	[-6.316145176212963]
								}, {
									"case":	113,
									"scores":	[-6.316145176212963]
								}, {
									"case":	114,
									"scores":	[-6.316145176212963]
								}, {
									"case":	115,
									"scores":	[-6.316145176212963]
								}, {
									"case":	116,
									"scores":	[-6.316145176212963]
								}, {
									"case":	117,
									"scores":	[-6.316145176212963]
								}, {
									"case":	118,
									"scores":	[-6.316145176212963]
								}, {
									"case":	119,
									"scores":	[-6.316145176212963]
								}, {
									"case":	120,
									"scores":	[-6.316145176212963]
								}, {
									"case":	121,
									"scores":	[-6.316145176212963]
								}, {
									"case":	122,
									"scores":	[-6.316145176212963]
								}, {
									"case":	123,
									"scores":	[-6.316145176212963]
								}, {
									"case":	124,
									"scores":	[-6.316145176212963]
								}, {
									"case":	125,
									"scores":	[-6.316145176212963]
								}, {
									"case":	126,
									"scores":	[-6.316145176212963]
								}, {
									"case":	127,
									"scores":	[-6.316145176212963]
								}, {
									"case":	128,
									"scores":	[-6.316145176212963]
								}, {
									"case":	129,
									"scores":	[-6.316145176212963]
								}, {
									"case":	130,
									"scores":	[-6.316145176212963]
								}, {
									"case":	131,
									"scores":	[-6.316145176212963]
								}, {
									"case":	132,
									"scores":	[-6.316145176212963]
								}, {
									"case":	133,
									"scores":	[-6.316145176212963]
								}, {
									"case":	134,
									"scores":	[-6.316145176212963]
								}, {
									"case":	135,
									"scores":	[-6.316145176212963]
								}, {
									"case":	136,
									"scores":	[-6.316145176212963]
								}, {
									"case":	137,
									"scores":	[-6.316145176212963]
								}, {
									"case":	138,
									"scores":	[-6.316145176212963]
								}, {
									"case":	139,
									"scores":	[-6.316145176212963]
								}, {
									"case":	140,
									"scores":	[-6.316145176212963]
								}, {
									"case":	141,
									"scores":	[-6.316145176212963]
								}, {
									"case":	142,
									"scores":	[-6.316145176212963]
								}, {
									"case":	143,
									"scores":	[-6.316145176212963]
								}, {
									"case":	144,
									"scores":	[-6.316145176212963]
								}, {
									"case":	145,
									"scores":	[-6.316145176212963]
								}, {
									"case":	146,
									"scores":	[-6.316145176212963]
								}, {
									"case":	147,
									"scores":	[-6.316145176212963]
								}, {
									"case":	148,
									"scores":	[-6.316145176212963]
								}, {
									"case":	149,
									"scores":	[-6.316145176212963]
								}, {
									"case":	150,
									"scores":	[-6.316145176212963]
								}, {
									"case":	151,
									"scores":	[-6.316145176212963]
								}, {
									"case":	152,
									"scores":	[-6.316145176212963]
								}, {
									"case":	153,
									"scores":	[-6.316145176212963]
								}, {
									"case":	154,
									"scores":	[-6.316145176212963]
								}, {
									"case":	155,
									"scores":	[-6.316145176212963]
								}, {
									"case":	156,
									"scores":	[-6.316145176212963]
								}, {
									"case":	157,
									"scores":	[-6.316145176212963]
								}, {
									"case":	158,
									"scores":	[-6.316145176212963]
								}, {
									"case":	159,
									"scores":	[-6.316145176212963]
								}, {
									"case":	160,
									"scores":	[-6.316145176212963]
								}, {
									"case":	161,
									"scores":	[-6.316145176212963]
								}, {
									"case":	162,
									"scores":	[-6.316145176212963]
								}, {
									"case":	163,
									"scores":	[-6.316145176212963]
								}, {
									"case":	164,
									"scores":	[-6.316145176212963]
								}, {
									"case":	165,
									"scores":	[-6.316145176212963]
								}, {
									"case":	166,
									"scores":	[-6.316145176212963]
								}, {
									"case":	167,
									"scores":	[-6.316145176212963]
								}, {
									"case":	168,
									"scores":	[-6.316145176212963]
								}, {
									"case":	169,
									"scores":	[-6.316145176212963]
								}, {
									"case":	170,
									"scores":	[-6.316145176212963]
								}, {
									"case":	171,
									"scores":	[-6.316145176212963]
								}, {
									"case":	172,
									"scores":	[-6.316145176212963]
								}, {
									"case":	173,
									"scores":	[-6.316145176212963]
								}, {
									"case":	174,
									"scores":	[-6.316145176212963]
								}, {
									"case":	175,
									"scores":	[-6.316145176212963]
								}, {
									"case":	176,
									"scores":	[-6.316145176212963]
								}, {
									"case":	177,
									"scores":	[-6.316145176212963]
								}, {
									"case":	178,
									"scores":	[-6.316145176212963]
								}, {
									"case":	179,
									"scores":	[-6.316145176212963]
								}, {
									"case":	180,
									"scores":	[-6.316145176212963]
								}, {
									"case":	181,
									"scores":	[-6.316145176212963]
								}, {
									"case":	182,
									"scores":	[-6.316145176212963]
								}, {
									"case":	183,
									"scores":	[-6.316145176212963]
								}, {
									"case":	184,
									"scores":	[-6.316145176212963]
								}, {
									"case":	185,
									"scores":	[-6.316145176212963]
								}, {
									"case":	186,
									"scores":	[-6.316145176212963]
								}, {
									"case":	187,
									"scores":	[-6.316145176212963]
								}, {
									"case":	188,
									"scores":	[-6.316145176212963]
								}, {
									"case":	189,
									"scores":	[-6.316145176212963]
								}, {
									"case":	190,
									"scores":	[-6.316145176212963]
								}, {
									"case":	191,
									"scores":	[-6.316145176212963]
								}, {
									"case":	192,
									"scores":	[-6.316145176212963]
								}, {
									"case":	193,
									"scores":	[-6.316145176212963]
								}, {
									"case":	194,
									"scores":	[-6.316145176212963]
								}, {
									"case":	195,
									"scores":	[-6.316145176212963]
								}, {
									"case":	196,
									"scores":	[-6.316145176212963]
								}, {
									"case":	197,
									"scores":	[-6.316145176212963]
								}, {
									"case":	198,
									"scores":	[-6.316145176212963]
								}, {
									"case":	199,
									"scores":	[-6.316145176212963]
								}, {
									"case":	200,
									"scores":	[-6.316145176212963]
								}, {
									"case":	201,
									"scores":	[-6.316145176212963]
								}, {
									"case":	202,
									"scores":	[-6.316145176212963]
								}, {
									"case":	203,
									"scores":	[-6.316145176212963]
								}, {
									"case":	204,
									"scores":	[-6.316145176212963]
								}, {
									"case":	205,
									"scores":	[-6.316145176212963]
								}, {
									"case":	206,
									"scores":	[-6.316145176212963]
								}, {
									"case":	207,
									"scores":	[-6.316145176212963]
								}, {
									"case":	208,
									"scores":	[-6.316145176212963]
								}, {
									"case":	209,
									"scores":	[-6.316145176212963]
								}, {
									"case":	210,
									"scores":	[-6.316145176212963]
								}, {
									"case":	211,
									"scores":	[-6.316145176212963]
								}, {
									"case":	212,
									"scores":	[-6.316145176212963]
								}, {
									"case":	213,
									"scores":	[-6.316145176212963]
								}, {
									"case":	214,
									"scores":	[-6.316145176212963]
								}, {
									"case":	215,
									"scores":	[-6.316145176212963]
								}, {
									"case":	216,
									"scores":	[-6.316145176212963]
								}, {
									"case":	217,
									"scores":	[-6.316145176212963]
								}, {
									"case":	218,
									"scores":	[-6.316145176212963]
								}, {
									"case":	219,
									"scores":	[-6.316145176212963]
								}, {
									"case":	220,
									"scores":	[-6.316145176212963]
								}, {
									"case":	221,
									"scores":	[-6.316145176212963]
								}, {
									"case":	222,
									"scores":	[-6.316145176212963]
								}, {
									"case":	223,
									"scores":	[-6.316145176212963]
								}, {
									"case":	224,
									"scores":	[-6.316145176212963]
								}, {
									"case":	225,
									"scores":	[-6.316145176212963]
								}, {
									"case":	226,
									"scores":	[-6.316145176212963]
								}, {
									"case":	227,
									"scores":	[-6.316145176212963]
								}, {
									"case":	228,
									"scores":	[-6.316145176212963]
								}, {
									"case":	229,
									"scores":	[-6.316145176212963]
								}, {
									"case":	230,
									"scores":	[-6.316145176212963]
								}, {
									"case":	231,
									"scores":	[-6.316145176212963]
								}, {
									"case":	232,
									"scores":	[-6.316145176212963]
								}, {
									"case":	233,
									"scores":	[-6.316145176212963]
								}, {
									"case":	234,
									"scores":	[-6.316145176212963]
								}, {
									"case":	235,
									"scores":	[-6.316145176212963]
								}, {
									"case":	236,
									"scores":	[-6.316145176212963]
								}, {
									"case":	237,
									"scores":	[-6.316145176212963]
								}, {
									"case":	238,
									"scores":	[-6.316145176212963]
								}, {
									"case":	239,
									"scores":	[-6.316145176212963]
								}, {
									"case":	240,
									"scores":	[-6.316145176212963]
								}, {
									"case":	241,
									"scores":	[-6.316145176212963]
								}, {
									"case":	242,
									"scores":	[-6.316145176212963]
								}, {
									"case":	243,
									"scores":	[-6.316145176212963]
								}, {
									"case":	244,
									"scores":	[-6.316145176212963]
								}, {
									"case":	245,
									"scores":	[-6.316145176212963]
								}, {
									"case":	246,
									"scores":	[-6.316145176212963]
								}, {
									"case":	247,
									"scores":	[-6.316145176212963]
								}, {
									"case":	248,
									"scores":	[-6.316145176212963]
								}, {
									"case":	249,
									"scores":	[-6.316145176212963]
								}, {
									"case":	250,
									"scores":	[-6.316145176212963]
								}, {
									"case":	251,
									"scores":	[-6.316145176212963]
								}, {
									"case":	252,
									"scores":	[-6.316145176212963]
								}, {
									"case":	253,
									"scores":	[-6.316145176212963]
								}, {
									"case":	254,
									"scores":	[-6.316145176212963]
								}, {
									"case":	255,
									"scores":	[-6.316145176212963]
								}, {
									"case":	256,
									"scores":	[-6.316145176212963]
								}, {
									"case":	257,
									"scores":	[-6.316145176212963]
								}, {
									"case":	258,
									"scores":	[-6.316145176212963]
								}, {
									"case":	259,
									"scores":	[-6.316145176212963]
								}, {
									"case":	260,
									"scores":	[-10.833234732312963, -8.71711060761296, -10.100112848612962, -11.257746385312963, -9.9619181536129631, -9.63295643361296, -9.1853081276129629, -10.958741127612962, -11.185866831312962, -11.522887788312962, -10.470679007612961, -10.716717921412963, -10.681104555412961, -10.990139607612962, -10.990139607612962, -10.990139607612962, -10.990139607612962, -11.201028724612961, -11.236178521412963, -10.990139607612962, -10.990139607612962, -10.990139607612962, -10.990139607612962, -10.990139607612962, -10.990139607612962, -10.990139607612962, -10.990139607612962, -10.990139607612962, -10.990139607612962, -10.990139607612962, -11.236178521412963]
								}]
						}, {
							"switch":	32,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	3041,
							"begin_column":	2,
							"end_line":	3041,
							"end_column":	21,
							"patch_codes":	["if (!__is_neg(\"\", \"L3041\", 31, &(dateobj), sizeof (dateobj), &(i), sizeof (i), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time), sizeof (dateobj->time), &(h), sizeof (h), &(s), sizeof (s), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->s), sizeof (dateobj->time->s), &(return_value), sizeof (return_value), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    dateobj->time->i = i;\n", "{\n}\n", "dateobj->time->i = (-1)", "dateobj->time->i = (0 * h)", "dateobj->time->i = (0 * ht)", "dateobj->time->i = (0 * i)", "dateobj->time->i = (0 * return_value_used)", "dateobj->time->i = (0 * s)", "dateobj->time->i = (0)", "dateobj->time->i = (1)", "dateobj->time->i = (2)", "dateobj->time->i = (3)", "dateobj->time->i = (dateobj != 0)", "dateobj->time->i = (dateobj == 0)", "dateobj->time->i = (h != 0)", "dateobj->time->i = (h != i)", "dateobj->time->i = (h != s)", "dateobj->time->i = (h * ht)", "dateobj->time->i = (h * i)", "dateobj->time->i = (h * return_value_used)", "dateobj->time->i = (h * s)", "dateobj->time->i = (h + 0)", "dateobj->time->i = (h + i)", "dateobj->time->i = (h + s)", "dateobj->time->i = (h - 0)", "dateobj->time->i = (h - i)", "dateobj->time->i = (h - s)", "dateobj->time->i = (h == 0)", "dateobj->time->i = (h == i)", "dateobj->time->i = (h == s)", "dateobj->time->i = (h)", "dateobj->time->i = (ht != 0)", "dateobj->time->i = (ht != h)", "dateobj->time->i = (ht != i)", "dateobj->time->i = (ht != return_value_used)", "dateobj->time->i = (ht != s)", "dateobj->time->i = (ht * h)", "dateobj->time->i = (ht * i)", "dateobj->time->i = (ht * return_value_used)", "dateobj->time->i = (ht * s)", "dateobj->time->i = (ht + 0)", "dateobj->time->i = (ht + h)", "dateobj->time->i = (ht + i)", "dateobj->time->i = (ht + return_value_used)", "dateobj->time->i = (ht + s)", "dateobj->time->i = (ht - 0)", "dateobj->time->i = (ht - h)", "dateobj->time->i = (ht - i)", "dateobj->time->i = (ht - return_value_used)", "dateobj->time->i = (ht - s)", "dateobj->time->i = (ht == 0)", "dateobj->time->i = (ht == h)", "dateobj->time->i = (ht == i)", "dateobj->time->i = (ht == return_value_used)", "dateobj->time->i = (ht == s)", "dateobj->time->i = (i != 0)", "dateobj->time->i = (i != s)", "dateobj->time->i = (i * h)", "dateobj->time->i = (i * ht)", "dateobj->time->i = (i * return_value_used)", "dateobj->time->i = (i * s)", "dateobj->time->i = (i + 0)", "dateobj->time->i = (i + s)", "dateobj->time->i = (i - 0)", "dateobj->time->i = (i - s)", "dateobj->time->i = (i == 0)", "dateobj->time->i = (i == s)", "dateobj->time->i = (i)", "dateobj->time->i = (object != 0)", "dateobj->time->i = (object == 0)", "dateobj->time->i = (return_value != 0)", "dateobj->time->i = (return_value != object)", "dateobj->time->i = (return_value != this_ptr)", "dateobj->time->i = (return_value == 0)", "dateobj->time->i = (return_value == object)", "dateobj->time->i = (return_value == this_ptr)", "dateobj->time->i = (return_value_ptr != 0)", "dateobj->time->i = (return_value_ptr == 0)", "dateobj->time->i = (return_value_used != 0)", "dateobj->time->i = (return_value_used != h)", "dateobj->time->i = (return_value_used != i)", "dateobj->time->i = (return_value_used != s)", "dateobj->time->i = (return_value_used * h)", "dateobj->time->i = (return_value_used * ht)", "dateobj->time->i = (return_value_used * i)", "dateobj->time->i = (return_value_used * s)", "dateobj->time->i = (return_value_used + 0)", "dateobj->time->i = (return_value_used + h)", "dateobj->time->i = (return_value_used + i)", "dateobj->time->i = (return_value_used + s)", "dateobj->time->i = (return_value_used - 0)", "dateobj->time->i = (return_value_used - h)", "dateobj->time->i = (return_value_used - i)", "dateobj->time->i = (return_value_used - s)", "dateobj->time->i = (return_value_used == 0)", "dateobj->time->i = (return_value_used == h)", "dateobj->time->i = (return_value_used == i)", "dateobj->time->i = (return_value_used == s)", "dateobj->time->i = (s != 0)", "dateobj->time->i = (s * h)", "dateobj->time->i = (s * ht)", "dateobj->time->i = (s * i)", "dateobj->time->i = (s * return_value_used)", "dateobj->time->i = (s + 0)", "dateobj->time->i = (s - 0)", "dateobj->time->i = (s == 0)", "dateobj->time->i = (s)", "dateobj->time->i = (this_ptr != 0)", "dateobj->time->i = (this_ptr != object)", "dateobj->time->i = (this_ptr == 0)", "dateobj->time->i = (this_ptr == object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.952823134612963, -6.6335699462129627, -7.2064685672129629, -8.0323184436129633, -6.4441182362129634, -6.2009977962129632, -6.4588491862129631, -7.0733619872129632, -8.6319406331129631, -8.7832527341129634, -7.4228297362129627, -8.1807178362129633, -7.8896244762129628, -7.3395260462129635, -7.3395260462129635, -7.3395260462129635, -7.3395260462129635, -7.8087860462129628, -8.09741414621296, -7.3395260462129635, -7.3395260462129635, -7.3395260462129635, -7.3395260462129635, -7.3395260462129635, -7.3395260462129635, -7.3395260462129635, -7.3395260462129635, -7.3395260462129635, -7.3395260462129635, -7.3395260462129635, -8.09741414621296]
								}, {
									"case":	2,
									"scores":	[-6.316145176212963]
								}, {
									"case":	3,
									"scores":	[-6.316145176212963]
								}, {
									"case":	4,
									"scores":	[-6.316145176212963]
								}, {
									"case":	5,
									"scores":	[-6.316145176212963]
								}, {
									"case":	6,
									"scores":	[-6.316145176212963]
								}, {
									"case":	7,
									"scores":	[-6.316145176212963]
								}, {
									"case":	8,
									"scores":	[-6.316145176212963]
								}, {
									"case":	9,
									"scores":	[-6.316145176212963]
								}, {
									"case":	10,
									"scores":	[-6.316145176212963]
								}, {
									"case":	11,
									"scores":	[-6.316145176212963]
								}, {
									"case":	12,
									"scores":	[-6.316145176212963]
								}, {
									"case":	13,
									"scores":	[-6.316145176212963]
								}, {
									"case":	14,
									"scores":	[-6.316145176212963]
								}, {
									"case":	15,
									"scores":	[-6.316145176212963]
								}, {
									"case":	16,
									"scores":	[-6.316145176212963]
								}, {
									"case":	17,
									"scores":	[-6.316145176212963]
								}, {
									"case":	18,
									"scores":	[-6.316145176212963]
								}, {
									"case":	19,
									"scores":	[-6.316145176212963]
								}, {
									"case":	20,
									"scores":	[-6.316145176212963]
								}, {
									"case":	21,
									"scores":	[-6.316145176212963]
								}, {
									"case":	22,
									"scores":	[-6.316145176212963]
								}, {
									"case":	23,
									"scores":	[-6.316145176212963]
								}, {
									"case":	24,
									"scores":	[-6.316145176212963]
								}, {
									"case":	25,
									"scores":	[-6.316145176212963]
								}, {
									"case":	26,
									"scores":	[-6.316145176212963]
								}, {
									"case":	27,
									"scores":	[-6.316145176212963]
								}, {
									"case":	28,
									"scores":	[-6.316145176212963]
								}, {
									"case":	29,
									"scores":	[-6.316145176212963]
								}, {
									"case":	30,
									"scores":	[-6.316145176212963]
								}, {
									"case":	31,
									"scores":	[-6.316145176212963]
								}, {
									"case":	32,
									"scores":	[-6.316145176212963]
								}, {
									"case":	33,
									"scores":	[-6.316145176212963]
								}, {
									"case":	34,
									"scores":	[-6.316145176212963]
								}, {
									"case":	35,
									"scores":	[-6.316145176212963]
								}, {
									"case":	36,
									"scores":	[-6.316145176212963]
								}, {
									"case":	37,
									"scores":	[-6.316145176212963]
								}, {
									"case":	38,
									"scores":	[-6.316145176212963]
								}, {
									"case":	39,
									"scores":	[-6.316145176212963]
								}, {
									"case":	40,
									"scores":	[-6.316145176212963]
								}, {
									"case":	41,
									"scores":	[-6.316145176212963]
								}, {
									"case":	42,
									"scores":	[-6.316145176212963]
								}, {
									"case":	43,
									"scores":	[-6.316145176212963]
								}, {
									"case":	44,
									"scores":	[-6.316145176212963]
								}, {
									"case":	45,
									"scores":	[-6.316145176212963]
								}, {
									"case":	46,
									"scores":	[-6.316145176212963]
								}, {
									"case":	47,
									"scores":	[-6.316145176212963]
								}, {
									"case":	48,
									"scores":	[-6.316145176212963]
								}, {
									"case":	49,
									"scores":	[-6.316145176212963]
								}, {
									"case":	50,
									"scores":	[-6.316145176212963]
								}, {
									"case":	51,
									"scores":	[-6.316145176212963]
								}, {
									"case":	52,
									"scores":	[-6.316145176212963]
								}, {
									"case":	53,
									"scores":	[-6.316145176212963]
								}, {
									"case":	54,
									"scores":	[-6.316145176212963]
								}, {
									"case":	55,
									"scores":	[-6.316145176212963]
								}, {
									"case":	56,
									"scores":	[-6.316145176212963]
								}, {
									"case":	57,
									"scores":	[-6.316145176212963]
								}, {
									"case":	58,
									"scores":	[-6.316145176212963]
								}, {
									"case":	59,
									"scores":	[-6.316145176212963]
								}, {
									"case":	60,
									"scores":	[-6.316145176212963]
								}, {
									"case":	61,
									"scores":	[-6.316145176212963]
								}, {
									"case":	62,
									"scores":	[-6.316145176212963]
								}, {
									"case":	63,
									"scores":	[-6.316145176212963]
								}, {
									"case":	64,
									"scores":	[-6.316145176212963]
								}, {
									"case":	65,
									"scores":	[-6.316145176212963]
								}, {
									"case":	66,
									"scores":	[-6.316145176212963]
								}, {
									"case":	67,
									"scores":	[-6.316145176212963]
								}, {
									"case":	68,
									"scores":	[-6.316145176212963]
								}, {
									"case":	69,
									"scores":	[-6.316145176212963]
								}, {
									"case":	70,
									"scores":	[-6.316145176212963]
								}, {
									"case":	71,
									"scores":	[-6.316145176212963]
								}, {
									"case":	72,
									"scores":	[-6.316145176212963]
								}, {
									"case":	73,
									"scores":	[-6.316145176212963]
								}, {
									"case":	74,
									"scores":	[-6.316145176212963]
								}, {
									"case":	75,
									"scores":	[-6.316145176212963]
								}, {
									"case":	76,
									"scores":	[-6.316145176212963]
								}, {
									"case":	77,
									"scores":	[-6.316145176212963]
								}, {
									"case":	78,
									"scores":	[-6.316145176212963]
								}, {
									"case":	79,
									"scores":	[-6.316145176212963]
								}, {
									"case":	80,
									"scores":	[-6.316145176212963]
								}, {
									"case":	81,
									"scores":	[-6.316145176212963]
								}, {
									"case":	82,
									"scores":	[-6.316145176212963]
								}, {
									"case":	83,
									"scores":	[-6.316145176212963]
								}, {
									"case":	84,
									"scores":	[-6.316145176212963]
								}, {
									"case":	85,
									"scores":	[-6.316145176212963]
								}, {
									"case":	86,
									"scores":	[-6.316145176212963]
								}, {
									"case":	87,
									"scores":	[-6.316145176212963]
								}, {
									"case":	88,
									"scores":	[-6.316145176212963]
								}, {
									"case":	89,
									"scores":	[-6.316145176212963]
								}, {
									"case":	90,
									"scores":	[-6.316145176212963]
								}, {
									"case":	91,
									"scores":	[-6.316145176212963]
								}, {
									"case":	92,
									"scores":	[-6.316145176212963]
								}, {
									"case":	93,
									"scores":	[-6.316145176212963]
								}, {
									"case":	94,
									"scores":	[-6.316145176212963]
								}, {
									"case":	95,
									"scores":	[-6.316145176212963]
								}, {
									"case":	96,
									"scores":	[-6.316145176212963]
								}, {
									"case":	97,
									"scores":	[-6.316145176212963]
								}, {
									"case":	98,
									"scores":	[-6.316145176212963]
								}, {
									"case":	99,
									"scores":	[-6.316145176212963]
								}, {
									"case":	100,
									"scores":	[-6.316145176212963]
								}, {
									"case":	101,
									"scores":	[-6.316145176212963]
								}, {
									"case":	102,
									"scores":	[-6.316145176212963]
								}, {
									"case":	103,
									"scores":	[-6.316145176212963]
								}, {
									"case":	104,
									"scores":	[-6.316145176212963]
								}, {
									"case":	105,
									"scores":	[-6.316145176212963]
								}, {
									"case":	106,
									"scores":	[-6.316145176212963]
								}, {
									"case":	107,
									"scores":	[-6.316145176212963]
								}, {
									"case":	108,
									"scores":	[-6.316145176212963]
								}, {
									"case":	109,
									"scores":	[-6.316145176212963]
								}, {
									"case":	110,
									"scores":	[-6.316145176212963]
								}, {
									"case":	111,
									"scores":	[-6.316145176212963]
								}]
						}]
				}, {
					"line":	3041,
					"switches":	[{
							"switch":	33,
							"types":	[[], [], [], [], [260], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [], [], [], [175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174], [], [], [], [], [], []],
							"begin_line":	3042,
							"begin_column":	0,
							"end_line":	3042,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->h = (-1)", "dateobj->time->h = (0)", "dateobj->time->h = (1)", "dateobj->time->h = (2)", "dateobj->time->h = (3)", "dateobj->time->i = (-1)", "dateobj->time->i = (0)", "dateobj->time->i = (1)", "dateobj->time->i = (2)", "dateobj->time->i = (3)", "dateobj->time->s = (-1)", "dateobj->time->s = (0)", "dateobj->time->s = (1)", "dateobj->time->s = (2)", "dateobj->time->s = (3)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((dateobj), 0, sizeof(php_date_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->h = h", "dateobj->time->i = i", "dateobj->time->s = s", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3042\", 31, &(dateobj), sizeof (dateobj), &(s), sizeof (s), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time), sizeof (dateobj->time), &(i), sizeof (i), &(dateobj->time->i), sizeof (dateobj->time->i), &(h), sizeof (h), &(dateobj->time->h), sizeof (dateobj->time->h), &(return_value), sizeof (return_value), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	2,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	3,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	4,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	5,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	6,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	7,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	8,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	9,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	10,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	11,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	12,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	13,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	14,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	15,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	16,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	17,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	18,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	19,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	20,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	21,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	22,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	23,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	24,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	25,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	26,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	27,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	28,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	29,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	30,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	31,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	32,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	33,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	34,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	35,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	36,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	37,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	38,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	39,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	40,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	41,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	42,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	43,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	44,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	45,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	46,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	47,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	48,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	49,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	50,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	51,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	52,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	53,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	54,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	55,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	56,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	57,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	58,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	59,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	60,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	61,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	62,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	63,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	64,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	65,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	66,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	67,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	68,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	69,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	70,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	71,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	72,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	73,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	74,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	75,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	76,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	77,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	78,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	79,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	80,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	81,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	82,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	83,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	84,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	85,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	86,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	87,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	88,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	89,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	90,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	91,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	92,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	93,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	94,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	95,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	96,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	97,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	98,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	99,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	100,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	101,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	102,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	103,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	104,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	105,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	106,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	107,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	108,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	109,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	110,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	111,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	112,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	113,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	114,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	115,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	116,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	117,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	118,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	119,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	120,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	121,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	122,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	123,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	124,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	125,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	126,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	127,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	128,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	129,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	130,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	131,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	132,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	133,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	134,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	135,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	136,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	137,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	138,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	139,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	140,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	141,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	142,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	143,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	144,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	145,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	146,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	147,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	148,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	149,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	150,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	151,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	152,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	153,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	154,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	155,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	156,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	157,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	158,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	159,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	160,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	161,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	162,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	163,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	164,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	165,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	166,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	167,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	168,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	169,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	170,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	171,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	172,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	173,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	174,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	175,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	176,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	177,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	178,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	179,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	180,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	181,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	182,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	183,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	184,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	185,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	186,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	187,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	188,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	189,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	190,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	191,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	192,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	193,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	194,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	195,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	196,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	197,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	198,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	199,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	200,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	201,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	202,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	203,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	204,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	205,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	206,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	207,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	208,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	209,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	210,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	211,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	212,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	213,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	214,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	215,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	216,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	217,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	218,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	219,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	220,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	221,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	222,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	223,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	224,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	225,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	226,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	227,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	228,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	229,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	230,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	231,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	232,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	233,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	234,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	235,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	236,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	237,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	238,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	239,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	240,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	241,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	242,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	243,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	244,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	245,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	246,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	247,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	248,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	249,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	250,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	251,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	252,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	253,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	254,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	255,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	256,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	257,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	258,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	259,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	260,
									"scores":	[-10.312230024995444, -7.9385207262954438, -9.5791081412954444, -10.736741677995443, -9.69849862029544, -8.6643034202954432, -9.4409134462954434, -8.6643034202954432, -10.664862123995444, -11.001883080995444, -9.9496743002954435, -10.195713214095445, -10.160099848095443, -10.469134900295444, -10.469134900295444, -10.469134900295444, -10.469134900295444, -10.680024017295443, -10.715173814095444, -10.469134900295444, -10.469134900295444, -10.469134900295444, -10.469134900295444, -10.469134900295444, -10.469134900295444, -10.469134900295444, -10.469134900295444, -10.469134900295444, -10.469134900295444, -10.469134900295444, -10.715173814095444]
								}]
						}, {
							"switch":	34,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	3042,
							"begin_column":	2,
							"end_line":	3042,
							"end_column":	21,
							"patch_codes":	["if (!__is_neg(\"\", \"L3042\", 31, &(dateobj), sizeof (dateobj), &(s), sizeof (s), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time), sizeof (dateobj->time), &(i), sizeof (i), &(dateobj->time->i), sizeof (dateobj->time->i), &(h), sizeof (h), &(dateobj->time->h), sizeof (dateobj->time->h), &(return_value), sizeof (return_value), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    dateobj->time->s = s;\n", "{\n}\n", "dateobj->time->s = (-1)", "dateobj->time->s = (0 * h)", "dateobj->time->s = (0 * ht)", "dateobj->time->s = (0 * i)", "dateobj->time->s = (0 * return_value_used)", "dateobj->time->s = (0 * s)", "dateobj->time->s = (0)", "dateobj->time->s = (1)", "dateobj->time->s = (2)", "dateobj->time->s = (3)", "dateobj->time->s = (dateobj != 0)", "dateobj->time->s = (dateobj == 0)", "dateobj->time->s = (h != 0)", "dateobj->time->s = (h != i)", "dateobj->time->s = (h != s)", "dateobj->time->s = (h * ht)", "dateobj->time->s = (h * i)", "dateobj->time->s = (h * return_value_used)", "dateobj->time->s = (h * s)", "dateobj->time->s = (h + 0)", "dateobj->time->s = (h + i)", "dateobj->time->s = (h + s)", "dateobj->time->s = (h - 0)", "dateobj->time->s = (h - i)", "dateobj->time->s = (h - s)", "dateobj->time->s = (h == 0)", "dateobj->time->s = (h == i)", "dateobj->time->s = (h == s)", "dateobj->time->s = (h)", "dateobj->time->s = (ht != 0)", "dateobj->time->s = (ht != h)", "dateobj->time->s = (ht != i)", "dateobj->time->s = (ht != return_value_used)", "dateobj->time->s = (ht != s)", "dateobj->time->s = (ht * h)", "dateobj->time->s = (ht * i)", "dateobj->time->s = (ht * return_value_used)", "dateobj->time->s = (ht * s)", "dateobj->time->s = (ht + 0)", "dateobj->time->s = (ht + h)", "dateobj->time->s = (ht + i)", "dateobj->time->s = (ht + return_value_used)", "dateobj->time->s = (ht + s)", "dateobj->time->s = (ht - 0)", "dateobj->time->s = (ht - h)", "dateobj->time->s = (ht - i)", "dateobj->time->s = (ht - return_value_used)", "dateobj->time->s = (ht - s)", "dateobj->time->s = (ht == 0)", "dateobj->time->s = (ht == h)", "dateobj->time->s = (ht == i)", "dateobj->time->s = (ht == return_value_used)", "dateobj->time->s = (ht == s)", "dateobj->time->s = (i != 0)", "dateobj->time->s = (i != s)", "dateobj->time->s = (i * h)", "dateobj->time->s = (i * ht)", "dateobj->time->s = (i * return_value_used)", "dateobj->time->s = (i * s)", "dateobj->time->s = (i + 0)", "dateobj->time->s = (i + s)", "dateobj->time->s = (i - 0)", "dateobj->time->s = (i - s)", "dateobj->time->s = (i == 0)", "dateobj->time->s = (i == s)", "dateobj->time->s = (i)", "dateobj->time->s = (object != 0)", "dateobj->time->s = (object == 0)", "dateobj->time->s = (return_value != 0)", "dateobj->time->s = (return_value != object)", "dateobj->time->s = (return_value != this_ptr)", "dateobj->time->s = (return_value == 0)", "dateobj->time->s = (return_value == object)", "dateobj->time->s = (return_value == this_ptr)", "dateobj->time->s = (return_value_ptr != 0)", "dateobj->time->s = (return_value_ptr == 0)", "dateobj->time->s = (return_value_used != 0)", "dateobj->time->s = (return_value_used != h)", "dateobj->time->s = (return_value_used != i)", "dateobj->time->s = (return_value_used != s)", "dateobj->time->s = (return_value_used * h)", "dateobj->time->s = (return_value_used * ht)", "dateobj->time->s = (return_value_used * i)", "dateobj->time->s = (return_value_used * s)", "dateobj->time->s = (return_value_used + 0)", "dateobj->time->s = (return_value_used + h)", "dateobj->time->s = (return_value_used + i)", "dateobj->time->s = (return_value_used + s)", "dateobj->time->s = (return_value_used - 0)", "dateobj->time->s = (return_value_used - h)", "dateobj->time->s = (return_value_used - i)", "dateobj->time->s = (return_value_used - s)", "dateobj->time->s = (return_value_used == 0)", "dateobj->time->s = (return_value_used == h)", "dateobj->time->s = (return_value_used == i)", "dateobj->time->s = (return_value_used == s)", "dateobj->time->s = (s != 0)", "dateobj->time->s = (s * h)", "dateobj->time->s = (s * ht)", "dateobj->time->s = (s * i)", "dateobj->time->s = (s * return_value_used)", "dateobj->time->s = (s + 0)", "dateobj->time->s = (s - 0)", "dateobj->time->s = (s == 0)", "dateobj->time->s = (s)", "dateobj->time->s = (this_ptr != 0)", "dateobj->time->s = (this_ptr != object)", "dateobj->time->s = (this_ptr == 0)", "dateobj->time->s = (this_ptr == object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.3241258772954438, -6.188403538895443, -7.0750998598954435, -6.7694671483954432, -6.6265472288954435, -6.3274804788954437, -6.3127495288954432, -6.3274804788954437, -8.5005719257954429, -8.6518840267954431, -7.2914610288954433, -8.0493491288954431, -7.7582557688954434, -7.2081573388954432, -7.2081573388954432, -7.2081573388954432, -7.2081573388954432, -7.6774173388954434, -7.9660454388954438, -7.2081573388954432, -7.2081573388954432, -7.2081573388954432, -7.2081573388954432, -7.2081573388954432, -7.2081573388954432, -7.2081573388954432, -7.2081573388954432, -7.2081573388954432, -7.2081573388954432, -7.2081573388954432, -7.9660454388954438]
								}, {
									"case":	2,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	3,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	4,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	5,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	6,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	7,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	8,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	9,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	10,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	11,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	12,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	13,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	14,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	15,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	16,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	17,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	18,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	19,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	20,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	21,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	22,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	23,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	24,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	25,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	26,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	27,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	28,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	29,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	30,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	31,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	32,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	33,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	34,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	35,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	36,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	37,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	38,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	39,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	40,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	41,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	42,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	43,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	44,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	45,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	46,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	47,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	48,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	49,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	50,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	51,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	52,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	53,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	54,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	55,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	56,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	57,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	58,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	59,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	60,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	61,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	62,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	63,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	64,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	65,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	66,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	67,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	68,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	69,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	70,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	71,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	72,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	73,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	74,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	75,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	76,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	77,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	78,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	79,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	80,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	81,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	82,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	83,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	84,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	85,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	86,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	87,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	88,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	89,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	90,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	91,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	92,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	93,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	94,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	95,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	96,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	97,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	98,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	99,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	100,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	101,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	102,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	103,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	104,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	105,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	106,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	107,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	108,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	109,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	110,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	111,
									"scores":	[-6.2959424688954435]
								}]
						}]
				}, {
					"line":	3042,
					"switches":	[{
							"switch":	35,
							"types":	[[], [], [], [], [260], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [], [], [], [175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174], [], [], [], [], [], []],
							"begin_line":	3043,
							"begin_column":	0,
							"end_line":	3043,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->h = (-1)", "dateobj->time->h = (0)", "dateobj->time->h = (1)", "dateobj->time->h = (2)", "dateobj->time->h = (3)", "dateobj->time->i = (-1)", "dateobj->time->i = (0)", "dateobj->time->i = (1)", "dateobj->time->i = (2)", "dateobj->time->i = (3)", "dateobj->time->s = (-1)", "dateobj->time->s = (0)", "dateobj->time->s = (1)", "dateobj->time->s = (2)", "dateobj->time->s = (3)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((dateobj), 0, sizeof(php_date_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->h = h", "dateobj->time->i = i", "dateobj->time->s = s", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3043\", 31, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(s), sizeof (s), &(dateobj->time->s), sizeof (dateobj->time->s), &(return_value), sizeof (return_value), &(object), sizeof (object), &(i), sizeof (i), &(dateobj->time->i), sizeof (dateobj->time->i), &(h), sizeof (h), &(dateobj->time->h), sizeof (dateobj->time->h), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.275739761577924]
								}, {
									"case":	2,
									"scores":	[-6.275739761577924]
								}, {
									"case":	3,
									"scores":	[-6.275739761577924]
								}, {
									"case":	4,
									"scores":	[-6.275739761577924]
								}, {
									"case":	5,
									"scores":	[-6.275739761577924]
								}, {
									"case":	6,
									"scores":	[-6.275739761577924]
								}, {
									"case":	7,
									"scores":	[-6.275739761577924]
								}, {
									"case":	8,
									"scores":	[-6.275739761577924]
								}, {
									"case":	9,
									"scores":	[-6.275739761577924]
								}, {
									"case":	10,
									"scores":	[-6.275739761577924]
								}, {
									"case":	11,
									"scores":	[-6.275739761577924]
								}, {
									"case":	12,
									"scores":	[-6.275739761577924]
								}, {
									"case":	13,
									"scores":	[-6.275739761577924]
								}, {
									"case":	14,
									"scores":	[-6.275739761577924]
								}, {
									"case":	15,
									"scores":	[-6.275739761577924]
								}, {
									"case":	16,
									"scores":	[-6.275739761577924]
								}, {
									"case":	17,
									"scores":	[-6.275739761577924]
								}, {
									"case":	18,
									"scores":	[-6.275739761577924]
								}, {
									"case":	19,
									"scores":	[-6.275739761577924]
								}, {
									"case":	20,
									"scores":	[-6.275739761577924]
								}, {
									"case":	21,
									"scores":	[-6.275739761577924]
								}, {
									"case":	22,
									"scores":	[-6.275739761577924]
								}, {
									"case":	23,
									"scores":	[-6.275739761577924]
								}, {
									"case":	24,
									"scores":	[-6.275739761577924]
								}, {
									"case":	25,
									"scores":	[-6.275739761577924]
								}, {
									"case":	26,
									"scores":	[-6.275739761577924]
								}, {
									"case":	27,
									"scores":	[-6.275739761577924]
								}, {
									"case":	28,
									"scores":	[-6.275739761577924]
								}, {
									"case":	29,
									"scores":	[-6.275739761577924]
								}, {
									"case":	30,
									"scores":	[-6.275739761577924]
								}, {
									"case":	31,
									"scores":	[-6.275739761577924]
								}, {
									"case":	32,
									"scores":	[-6.275739761577924]
								}, {
									"case":	33,
									"scores":	[-6.275739761577924]
								}, {
									"case":	34,
									"scores":	[-6.275739761577924]
								}, {
									"case":	35,
									"scores":	[-6.275739761577924]
								}, {
									"case":	36,
									"scores":	[-6.275739761577924]
								}, {
									"case":	37,
									"scores":	[-6.275739761577924]
								}, {
									"case":	38,
									"scores":	[-6.275739761577924]
								}, {
									"case":	39,
									"scores":	[-6.275739761577924]
								}, {
									"case":	40,
									"scores":	[-6.275739761577924]
								}, {
									"case":	41,
									"scores":	[-6.275739761577924]
								}, {
									"case":	42,
									"scores":	[-6.275739761577924]
								}, {
									"case":	43,
									"scores":	[-6.275739761577924]
								}, {
									"case":	44,
									"scores":	[-6.275739761577924]
								}, {
									"case":	45,
									"scores":	[-6.275739761577924]
								}, {
									"case":	46,
									"scores":	[-6.275739761577924]
								}, {
									"case":	47,
									"scores":	[-6.275739761577924]
								}, {
									"case":	48,
									"scores":	[-6.275739761577924]
								}, {
									"case":	49,
									"scores":	[-6.275739761577924]
								}, {
									"case":	50,
									"scores":	[-6.275739761577924]
								}, {
									"case":	51,
									"scores":	[-6.275739761577924]
								}, {
									"case":	52,
									"scores":	[-6.275739761577924]
								}, {
									"case":	53,
									"scores":	[-6.275739761577924]
								}, {
									"case":	54,
									"scores":	[-6.275739761577924]
								}, {
									"case":	55,
									"scores":	[-6.275739761577924]
								}, {
									"case":	56,
									"scores":	[-6.275739761577924]
								}, {
									"case":	57,
									"scores":	[-6.275739761577924]
								}, {
									"case":	58,
									"scores":	[-6.275739761577924]
								}, {
									"case":	59,
									"scores":	[-6.275739761577924]
								}, {
									"case":	60,
									"scores":	[-6.275739761577924]
								}, {
									"case":	61,
									"scores":	[-6.275739761577924]
								}, {
									"case":	62,
									"scores":	[-6.275739761577924]
								}, {
									"case":	63,
									"scores":	[-6.275739761577924]
								}, {
									"case":	64,
									"scores":	[-6.275739761577924]
								}, {
									"case":	65,
									"scores":	[-6.275739761577924]
								}, {
									"case":	66,
									"scores":	[-6.275739761577924]
								}, {
									"case":	67,
									"scores":	[-6.275739761577924]
								}, {
									"case":	68,
									"scores":	[-6.275739761577924]
								}, {
									"case":	69,
									"scores":	[-6.275739761577924]
								}, {
									"case":	70,
									"scores":	[-6.275739761577924]
								}, {
									"case":	71,
									"scores":	[-6.275739761577924]
								}, {
									"case":	72,
									"scores":	[-6.275739761577924]
								}, {
									"case":	73,
									"scores":	[-6.275739761577924]
								}, {
									"case":	74,
									"scores":	[-6.275739761577924]
								}, {
									"case":	75,
									"scores":	[-6.275739761577924]
								}, {
									"case":	76,
									"scores":	[-6.275739761577924]
								}, {
									"case":	77,
									"scores":	[-6.275739761577924]
								}, {
									"case":	78,
									"scores":	[-6.275739761577924]
								}, {
									"case":	79,
									"scores":	[-6.275739761577924]
								}, {
									"case":	80,
									"scores":	[-6.275739761577924]
								}, {
									"case":	81,
									"scores":	[-6.275739761577924]
								}, {
									"case":	82,
									"scores":	[-6.275739761577924]
								}, {
									"case":	83,
									"scores":	[-6.275739761577924]
								}, {
									"case":	84,
									"scores":	[-6.275739761577924]
								}, {
									"case":	85,
									"scores":	[-6.275739761577924]
								}, {
									"case":	86,
									"scores":	[-6.275739761577924]
								}, {
									"case":	87,
									"scores":	[-6.275739761577924]
								}, {
									"case":	88,
									"scores":	[-6.275739761577924]
								}, {
									"case":	89,
									"scores":	[-6.275739761577924]
								}, {
									"case":	90,
									"scores":	[-6.275739761577924]
								}, {
									"case":	91,
									"scores":	[-6.275739761577924]
								}, {
									"case":	92,
									"scores":	[-6.275739761577924]
								}, {
									"case":	93,
									"scores":	[-6.275739761577924]
								}, {
									"case":	94,
									"scores":	[-6.275739761577924]
								}, {
									"case":	95,
									"scores":	[-6.275739761577924]
								}, {
									"case":	96,
									"scores":	[-6.275739761577924]
								}, {
									"case":	97,
									"scores":	[-6.275739761577924]
								}, {
									"case":	98,
									"scores":	[-6.275739761577924]
								}, {
									"case":	99,
									"scores":	[-6.275739761577924]
								}, {
									"case":	100,
									"scores":	[-6.275739761577924]
								}, {
									"case":	101,
									"scores":	[-6.275739761577924]
								}, {
									"case":	102,
									"scores":	[-6.275739761577924]
								}, {
									"case":	103,
									"scores":	[-6.275739761577924]
								}, {
									"case":	104,
									"scores":	[-6.275739761577924]
								}, {
									"case":	105,
									"scores":	[-6.275739761577924]
								}, {
									"case":	106,
									"scores":	[-6.275739761577924]
								}, {
									"case":	107,
									"scores":	[-6.275739761577924]
								}, {
									"case":	108,
									"scores":	[-6.275739761577924]
								}, {
									"case":	109,
									"scores":	[-6.275739761577924]
								}, {
									"case":	110,
									"scores":	[-6.275739761577924]
								}, {
									"case":	111,
									"scores":	[-6.275739761577924]
								}, {
									"case":	112,
									"scores":	[-6.275739761577924]
								}, {
									"case":	113,
									"scores":	[-6.275739761577924]
								}, {
									"case":	114,
									"scores":	[-6.275739761577924]
								}, {
									"case":	115,
									"scores":	[-6.275739761577924]
								}, {
									"case":	116,
									"scores":	[-6.275739761577924]
								}, {
									"case":	117,
									"scores":	[-6.275739761577924]
								}, {
									"case":	118,
									"scores":	[-6.275739761577924]
								}, {
									"case":	119,
									"scores":	[-6.275739761577924]
								}, {
									"case":	120,
									"scores":	[-6.275739761577924]
								}, {
									"case":	121,
									"scores":	[-6.275739761577924]
								}, {
									"case":	122,
									"scores":	[-6.275739761577924]
								}, {
									"case":	123,
									"scores":	[-6.275739761577924]
								}, {
									"case":	124,
									"scores":	[-6.275739761577924]
								}, {
									"case":	125,
									"scores":	[-6.275739761577924]
								}, {
									"case":	126,
									"scores":	[-6.275739761577924]
								}, {
									"case":	127,
									"scores":	[-6.275739761577924]
								}, {
									"case":	128,
									"scores":	[-6.275739761577924]
								}, {
									"case":	129,
									"scores":	[-6.275739761577924]
								}, {
									"case":	130,
									"scores":	[-6.275739761577924]
								}, {
									"case":	131,
									"scores":	[-6.275739761577924]
								}, {
									"case":	132,
									"scores":	[-6.275739761577924]
								}, {
									"case":	133,
									"scores":	[-6.275739761577924]
								}, {
									"case":	134,
									"scores":	[-6.275739761577924]
								}, {
									"case":	135,
									"scores":	[-6.275739761577924]
								}, {
									"case":	136,
									"scores":	[-6.275739761577924]
								}, {
									"case":	137,
									"scores":	[-6.275739761577924]
								}, {
									"case":	138,
									"scores":	[-6.275739761577924]
								}, {
									"case":	139,
									"scores":	[-6.275739761577924]
								}, {
									"case":	140,
									"scores":	[-6.275739761577924]
								}, {
									"case":	141,
									"scores":	[-6.275739761577924]
								}, {
									"case":	142,
									"scores":	[-6.275739761577924]
								}, {
									"case":	143,
									"scores":	[-6.275739761577924]
								}, {
									"case":	144,
									"scores":	[-6.275739761577924]
								}, {
									"case":	145,
									"scores":	[-6.275739761577924]
								}, {
									"case":	146,
									"scores":	[-6.275739761577924]
								}, {
									"case":	147,
									"scores":	[-6.275739761577924]
								}, {
									"case":	148,
									"scores":	[-6.275739761577924]
								}, {
									"case":	149,
									"scores":	[-6.275739761577924]
								}, {
									"case":	150,
									"scores":	[-6.275739761577924]
								}, {
									"case":	151,
									"scores":	[-6.275739761577924]
								}, {
									"case":	152,
									"scores":	[-6.275739761577924]
								}, {
									"case":	153,
									"scores":	[-6.275739761577924]
								}, {
									"case":	154,
									"scores":	[-6.275739761577924]
								}, {
									"case":	155,
									"scores":	[-6.275739761577924]
								}, {
									"case":	156,
									"scores":	[-6.275739761577924]
								}, {
									"case":	157,
									"scores":	[-6.275739761577924]
								}, {
									"case":	158,
									"scores":	[-6.275739761577924]
								}, {
									"case":	159,
									"scores":	[-6.275739761577924]
								}, {
									"case":	160,
									"scores":	[-6.275739761577924]
								}, {
									"case":	161,
									"scores":	[-6.275739761577924]
								}, {
									"case":	162,
									"scores":	[-6.275739761577924]
								}, {
									"case":	163,
									"scores":	[-6.275739761577924]
								}, {
									"case":	164,
									"scores":	[-6.275739761577924]
								}, {
									"case":	165,
									"scores":	[-6.275739761577924]
								}, {
									"case":	166,
									"scores":	[-6.275739761577924]
								}, {
									"case":	167,
									"scores":	[-6.275739761577924]
								}, {
									"case":	168,
									"scores":	[-6.275739761577924]
								}, {
									"case":	169,
									"scores":	[-6.275739761577924]
								}, {
									"case":	170,
									"scores":	[-6.275739761577924]
								}, {
									"case":	171,
									"scores":	[-6.275739761577924]
								}, {
									"case":	172,
									"scores":	[-6.275739761577924]
								}, {
									"case":	173,
									"scores":	[-6.275739761577924]
								}, {
									"case":	174,
									"scores":	[-6.275739761577924]
								}, {
									"case":	175,
									"scores":	[-6.275739761577924]
								}, {
									"case":	176,
									"scores":	[-6.275739761577924]
								}, {
									"case":	177,
									"scores":	[-6.275739761577924]
								}, {
									"case":	178,
									"scores":	[-6.275739761577924]
								}, {
									"case":	179,
									"scores":	[-6.275739761577924]
								}, {
									"case":	180,
									"scores":	[-6.275739761577924]
								}, {
									"case":	181,
									"scores":	[-6.275739761577924]
								}, {
									"case":	182,
									"scores":	[-6.275739761577924]
								}, {
									"case":	183,
									"scores":	[-6.275739761577924]
								}, {
									"case":	184,
									"scores":	[-6.275739761577924]
								}, {
									"case":	185,
									"scores":	[-6.275739761577924]
								}, {
									"case":	186,
									"scores":	[-6.275739761577924]
								}, {
									"case":	187,
									"scores":	[-6.275739761577924]
								}, {
									"case":	188,
									"scores":	[-6.275739761577924]
								}, {
									"case":	189,
									"scores":	[-6.275739761577924]
								}, {
									"case":	190,
									"scores":	[-6.275739761577924]
								}, {
									"case":	191,
									"scores":	[-6.275739761577924]
								}, {
									"case":	192,
									"scores":	[-6.275739761577924]
								}, {
									"case":	193,
									"scores":	[-6.275739761577924]
								}, {
									"case":	194,
									"scores":	[-6.275739761577924]
								}, {
									"case":	195,
									"scores":	[-6.275739761577924]
								}, {
									"case":	196,
									"scores":	[-6.275739761577924]
								}, {
									"case":	197,
									"scores":	[-6.275739761577924]
								}, {
									"case":	198,
									"scores":	[-6.275739761577924]
								}, {
									"case":	199,
									"scores":	[-6.275739761577924]
								}, {
									"case":	200,
									"scores":	[-6.275739761577924]
								}, {
									"case":	201,
									"scores":	[-6.275739761577924]
								}, {
									"case":	202,
									"scores":	[-6.275739761577924]
								}, {
									"case":	203,
									"scores":	[-6.275739761577924]
								}, {
									"case":	204,
									"scores":	[-6.275739761577924]
								}, {
									"case":	205,
									"scores":	[-6.275739761577924]
								}, {
									"case":	206,
									"scores":	[-6.275739761577924]
								}, {
									"case":	207,
									"scores":	[-6.275739761577924]
								}, {
									"case":	208,
									"scores":	[-6.275739761577924]
								}, {
									"case":	209,
									"scores":	[-6.275739761577924]
								}, {
									"case":	210,
									"scores":	[-6.275739761577924]
								}, {
									"case":	211,
									"scores":	[-6.275739761577924]
								}, {
									"case":	212,
									"scores":	[-6.275739761577924]
								}, {
									"case":	213,
									"scores":	[-6.275739761577924]
								}, {
									"case":	214,
									"scores":	[-6.275739761577924]
								}, {
									"case":	215,
									"scores":	[-6.275739761577924]
								}, {
									"case":	216,
									"scores":	[-6.275739761577924]
								}, {
									"case":	217,
									"scores":	[-6.275739761577924]
								}, {
									"case":	218,
									"scores":	[-6.275739761577924]
								}, {
									"case":	219,
									"scores":	[-6.275739761577924]
								}, {
									"case":	220,
									"scores":	[-6.275739761577924]
								}, {
									"case":	221,
									"scores":	[-6.275739761577924]
								}, {
									"case":	222,
									"scores":	[-6.275739761577924]
								}, {
									"case":	223,
									"scores":	[-6.275739761577924]
								}, {
									"case":	224,
									"scores":	[-6.275739761577924]
								}, {
									"case":	225,
									"scores":	[-6.275739761577924]
								}, {
									"case":	226,
									"scores":	[-6.275739761577924]
								}, {
									"case":	227,
									"scores":	[-6.275739761577924]
								}, {
									"case":	228,
									"scores":	[-6.275739761577924]
								}, {
									"case":	229,
									"scores":	[-6.275739761577924]
								}, {
									"case":	230,
									"scores":	[-6.275739761577924]
								}, {
									"case":	231,
									"scores":	[-6.275739761577924]
								}, {
									"case":	232,
									"scores":	[-6.275739761577924]
								}, {
									"case":	233,
									"scores":	[-6.275739761577924]
								}, {
									"case":	234,
									"scores":	[-6.275739761577924]
								}, {
									"case":	235,
									"scores":	[-6.275739761577924]
								}, {
									"case":	236,
									"scores":	[-6.275739761577924]
								}, {
									"case":	237,
									"scores":	[-6.275739761577924]
								}, {
									"case":	238,
									"scores":	[-6.275739761577924]
								}, {
									"case":	239,
									"scores":	[-6.275739761577924]
								}, {
									"case":	240,
									"scores":	[-6.275739761577924]
								}, {
									"case":	241,
									"scores":	[-6.275739761577924]
								}, {
									"case":	242,
									"scores":	[-6.275739761577924]
								}, {
									"case":	243,
									"scores":	[-6.275739761577924]
								}, {
									"case":	244,
									"scores":	[-6.275739761577924]
								}, {
									"case":	245,
									"scores":	[-6.275739761577924]
								}, {
									"case":	246,
									"scores":	[-6.275739761577924]
								}, {
									"case":	247,
									"scores":	[-6.275739761577924]
								}, {
									"case":	248,
									"scores":	[-6.275739761577924]
								}, {
									"case":	249,
									"scores":	[-6.275739761577924]
								}, {
									"case":	250,
									"scores":	[-6.275739761577924]
								}, {
									"case":	251,
									"scores":	[-6.275739761577924]
								}, {
									"case":	252,
									"scores":	[-6.275739761577924]
								}, {
									"case":	253,
									"scores":	[-6.275739761577924]
								}, {
									"case":	254,
									"scores":	[-6.275739761577924]
								}, {
									"case":	255,
									"scores":	[-6.275739761577924]
								}, {
									"case":	256,
									"scores":	[-6.275739761577924]
								}, {
									"case":	257,
									"scores":	[-6.275739761577924]
								}, {
									"case":	258,
									"scores":	[-6.275739761577924]
								}, {
									"case":	259,
									"scores":	[-6.275739761577924]
								}, {
									"case":	260,
									"scores":	[-11.077044495677924, -9.6423063577779242, -8.9021655389779237, -8.1255555129779236, -10.126114216677923, -10.463135173677925, -9.1597507129779245, -8.1255555129779236, -8.9021655389779237, -8.1255555129779236, -9.4109263929779239, -9.6569653067779235, -9.6213519407779238, -9.9303869929779243, -9.9303869929779243, -9.9303869929779243, -9.9303869929779243, -10.141276109977923, -10.176425906777924, -9.9303869929779243, -9.9303869929779243, -9.9303869929779243, -9.9303869929779243, -9.9303869929779243, -9.9303869929779243, -9.9303869929779243, -9.9303869929779243, -9.9303869929779243, -9.9303869929779243, -9.9303869929779243, -10.176425906777924]
								}]
						}, {
							"switch":	36,
							"types":	[[], [], [1], [], [], [], [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10], [], [], [11]],
							"begin_line":	3043,
							"begin_column":	2,
							"end_line":	3043,
							"end_column":	39,
							"patch_codes":	["if (!__is_neg(\"\", \"L3043\", 31, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(s), sizeof (s), &(dateobj->time->s), sizeof (dateobj->time->s), &(return_value), sizeof (return_value), &(object), sizeof (object), &(i), sizeof (i), &(dateobj->time->i), sizeof (dateobj->time->i), &(h), sizeof (h), &(dateobj->time->h), sizeof (dateobj->time->h), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    timelib_update_ts(dateobj->time, ((void *)0));\n", "timelib_fill_holes(dateobj->time, ((void *)0), -1)", "timelib_fill_holes(dateobj->time, ((void *)0), 0)", "timelib_fill_holes(dateobj->time, ((void *)0), 1)", "timelib_fill_holes(dateobj->time, ((void *)0), 2)", "timelib_fill_holes(dateobj->time, ((void *)0), 3)", "timelib_fill_holes(dateobj->time, ((void *)0), ht)", "timelib_fill_holes(dateobj->time, ((void *)0), le_index_ptr)", "timelib_fill_holes(dateobj->time, ((void *)0), php_date_global_timezone_db_enabled)", "timelib_fill_holes(dateobj->time, ((void *)0), return_value_used)", "{\n}\n", "Debug(dateobj->time, ((void *)0))", "php_printf(dateobj->time, ((void *)0))", "printf(dateobj->time, ((void *)0))", "timelib_date_to_int(dateobj->time, ((void *)0))", "timelib_diff(dateobj->time, ((void *)0))", "timelib_do_rel_normalize(dateobj->time, ((void *)0))", "timelib_set_timezone(dateobj->time, ((void *)0))", "timelib_time_tz_abbr_update(dateobj->time, ((void *)0))", "timelib_time_tz_name_update(dateobj->time, ((void *)0))", "wprintf(dateobj->time, ((void *)0))", "timelib_update_ts((&dateobj)->time, ((void *)0))", "timelib_update_ts((&h)->time, ((void *)0))", "timelib_update_ts((&ht)->time, ((void *)0))", "timelib_update_ts((&i)->time, ((void *)0))", "timelib_update_ts((&object)->time, ((void *)0))", "timelib_update_ts((&return_value)->time, ((void *)0))", "timelib_update_ts((&return_value_ptr)->time, ((void *)0))", "timelib_update_ts((&return_value_used)->time, ((void *)0))", "timelib_update_ts((&s)->time, ((void *)0))", "timelib_update_ts((&this_ptr)->time, ((void *)0))", "timelib_update_ts((dateobj)->time, ((void *)0))", "timelib_update_ts(dateobj->time, ((void *)0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.8781621120779235, -8.8845109220779239, -8.0734258215779242, -8.0881567715779248, -9.1602699284779234, -9.569666429477925, -8.3872235215779245, -8.0881567715779248, -8.0734258215779242, -8.0881567715779248, -9.0521373215779235, -9.8100254215779241, -9.5189320615779245, -8.9688336315779242, -8.9688336315779242, -8.9688336315779242, -8.9688336315779242, -9.4380936315779245, -9.7267217315779249, -8.9688336315779242, -8.9688336315779242, -8.9688336315779242, -8.9688336315779242, -8.9688336315779242, -8.9688336315779242, -8.9688336315779242, -8.9688336315779242, -8.9688336315779242, -8.9688336315779242, -8.9688336315779242, -9.7267217315779249]
								}, {
									"case":	2,
									"scores":	[-6.275739761577924]
								}, {
									"case":	3,
									"scores":	[-6.275739761577924]
								}, {
									"case":	4,
									"scores":	[-6.275739761577924]
								}, {
									"case":	5,
									"scores":	[-6.275739761577924]
								}, {
									"case":	6,
									"scores":	[-6.275739761577924]
								}, {
									"case":	7,
									"scores":	[-6.275739761577924]
								}, {
									"case":	8,
									"scores":	[-6.275739761577924]
								}, {
									"case":	9,
									"scores":	[-6.275739761577924]
								}, {
									"case":	10,
									"scores":	[-6.275739761577924]
								}, {
									"case":	11,
									"scores":	[-6.275739761577924]
								}, {
									"case":	12,
									"scores":	[-6.275739761577924]
								}, {
									"case":	13,
									"scores":	[-6.275739761577924]
								}, {
									"case":	14,
									"scores":	[-6.275739761577924]
								}, {
									"case":	15,
									"scores":	[-6.275739761577924]
								}, {
									"case":	16,
									"scores":	[-6.275739761577924]
								}, {
									"case":	17,
									"scores":	[-6.275739761577924]
								}, {
									"case":	18,
									"scores":	[-6.275739761577924]
								}, {
									"case":	19,
									"scores":	[-6.275739761577924]
								}, {
									"case":	20,
									"scores":	[-6.275739761577924]
								}, {
									"case":	21,
									"scores":	[-6.275739761577924]
								}, {
									"case":	22,
									"scores":	[-6.275739761577924]
								}, {
									"case":	23,
									"scores":	[-6.275739761577924]
								}, {
									"case":	24,
									"scores":	[-6.275739761577924]
								}, {
									"case":	25,
									"scores":	[-6.275739761577924]
								}, {
									"case":	26,
									"scores":	[-6.275739761577924]
								}, {
									"case":	27,
									"scores":	[-6.275739761577924]
								}, {
									"case":	28,
									"scores":	[-6.275739761577924]
								}, {
									"case":	29,
									"scores":	[-6.275739761577924]
								}, {
									"case":	30,
									"scores":	[-6.275739761577924]
								}, {
									"case":	31,
									"scores":	[-6.275739761577924]
								}, {
									"case":	32,
									"scores":	[-6.275739761577924]
								}, {
									"case":	33,
									"scores":	[-6.275739761577924]
								}]
						}]
				}, {
					"line":	3053,
					"switches":	[]
				}, {
					"line":	3054,
					"switches":	[]
				}, {
					"line":	3055,
					"switches":	[]
				}, {
					"line":	3057,
					"switches":	[{
							"switch":	37,
							"types":	[[], [], [], [], [259], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [], [], [], [174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258], [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173], [], [], [], [], [], []],
							"begin_line":	3058,
							"begin_column":	0,
							"end_line":	3058,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->d = (-1)", "dateobj->time->d = (0)", "dateobj->time->d = (1)", "dateobj->time->d = (2)", "dateobj->time->d = (3)", "dateobj->time->m = (-1)", "dateobj->time->m = (0)", "dateobj->time->m = (1)", "dateobj->time->m = (2)", "dateobj->time->m = (3)", "dateobj->time->y = (-1)", "dateobj->time->y = (0)", "dateobj->time->y = (1)", "dateobj->time->y = (2)", "dateobj->time->y = (3)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((dateobj), 0, sizeof(php_date_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->d = d", "dateobj->time->m = m", "dateobj->time->y = y", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3058\", 44, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(y), sizeof (y), &(m), sizeof (m), &(d), sizeof (d), &(date_ce_date), sizeof (date_ce_date), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	2,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	3,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	4,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	5,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	6,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	7,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	8,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	9,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	10,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	11,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	12,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	13,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	14,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	15,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	16,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	17,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	18,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	19,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	20,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	21,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	22,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	23,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	24,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	25,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	26,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	27,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	28,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	29,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	166,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	167,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	168,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	169,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	170,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	171,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	172,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	173,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	174,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	175,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	176,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	177,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	178,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	179,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	180,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	181,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	182,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	183,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	184,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	185,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	186,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	187,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	188,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	189,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	190,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	191,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	192,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	193,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	194,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	195,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	196,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	197,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	198,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	199,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	200,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	201,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	202,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	203,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	204,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	205,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	206,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	207,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	208,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	209,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	210,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	211,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	212,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	213,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	214,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	215,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	216,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	217,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	218,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	219,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	220,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	221,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	222,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	223,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	224,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	225,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	226,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	227,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	228,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	229,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	230,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	231,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	232,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	233,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	234,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	235,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	236,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	237,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	238,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	239,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	240,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	241,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	242,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	243,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	244,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	245,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	246,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	247,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	248,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	249,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	250,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	251,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	252,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	253,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	254,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	255,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	256,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	257,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	258,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	259,
									"scores":	[-9.089714430862573, -9.3357533446625744, -9.72291789666257, -9.89438015586257, -9.89438015586257, -9.89438015586257, -9.3001399786625729, -10.191061313662573, -10.989065690562573, -10.464482999862572, -10.675372116862572, -9.9635479998625733, -10.710521913662573, -10.464482999862572, -10.464482999862572, -10.675372116862572, -10.675372116862572, -10.675372116862572, -10.464482999862572, -10.464482999862572, -10.675372116862572, -10.675372116862572, -10.675372116862572, -10.675372116862572, -10.675372116862572, -10.675372116862572, -10.675372116862572, -10.675372116862572, -10.675372116862572, -10.675372116862572, -10.675372116862572, -10.675372116862572, -10.464482999862572, -10.464482999862572, -10.464482999862572, -10.464482999862572, -10.464482999862572, -10.464482999862572, -10.675372116862572, -10.464482999862572, -10.675372116862572, -10.464482999862572, -10.675372116862572, -10.675372116862572]
								}]
						}, {
							"switch":	38,
							"types":	[[6], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5], []],
							"begin_line":	3058,
							"begin_column":	2,
							"end_line":	3060,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L3058\", 44, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(y), sizeof (y), &(m), sizeof (m), &(d), sizeof (d), &(date_ce_date), sizeof (date_ce_date), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences))) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((zend_parse_method_parameters((ht), (this_ptr), \"Olll\", &object, date_ce_date, &y, &m, &d) == -1) || __is_neg(\"\", \"L3058\", 44, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(y), sizeof (y), &(m), sizeof (m), &(d), sizeof (d), &(date_ce_date), sizeof (date_ce_date), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences))) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if (dprintf((ht), (this_ptr), \"Olll\", &object, date_ce_date, &y, &m, &d) == -1) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if (zend_get_parameters_ex((ht), (this_ptr), \"Olll\", &object, date_ce_date, &y, &m, &d) == -1) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if (zend_parse_parameters((ht), (this_ptr), \"Olll\", &object, date_ce_date, &y, &m, &d) == -1) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((zend_parse_method_parameters((ht), (this_ptr), \"Olll\", &object, date_ce_date, &y, &m, &d) == -1) && !__is_neg(\"\", \"L3058\", 44, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(y), sizeof (y), &(m), sizeof (m), &(d), sizeof (d), &(date_ce_date), sizeof (date_ce_date), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences))) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.1765470644281444, -2.9344351644281446, -2.2203285334281446, -1.826482964428144, -1.826482964428144, -1.826482964428144, -2.6433418044281445, -3.6478704644281446, -3.624177343328145, -2.8066786744281447, -3.2759386744281449, -2.4846676444281446, -3.5645667744281448, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -2.8066786744281447, -3.2759386744281449, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449]
								}, {
									"case":	2,
									"scores":	[-5.1908269103281466, -5.9487150103281463, -5.2346083793281455, -4.8407628103281457, -4.8407628103281457, -4.8407628103281457, -5.6576216503281467, -6.6621503103281468, -6.6384571892281459, -5.820958520328146, -6.2902185203281462, -5.4989474903281463, -6.5788466203281466, -5.820958520328146, -5.820958520328146, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -5.820958520328146, -5.820958520328146, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -5.820958520328146, -5.820958520328146, -5.820958520328146, -5.820958520328146, -5.820958520328146, -5.820958520328146, -6.2902185203281462, -5.820958520328146, -6.2902185203281462, -5.820958520328146, -6.2902185203281462, -6.2902185203281462]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-5.1908269103281466, -5.9487150103281463, -5.2346083793281455, -4.8407628103281457, -4.8407628103281457, -4.8407628103281457, -5.6576216503281467, -6.6621503103281468, -6.6384571892281459, -5.820958520328146, -6.2902185203281462, -5.4989474903281463, -6.5788466203281466, -5.820958520328146, -5.820958520328146, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -5.820958520328146, -5.820958520328146, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -5.820958520328146, -5.820958520328146, -5.820958520328146, -5.820958520328146, -5.820958520328146, -5.820958520328146, -6.2902185203281462, -5.820958520328146, -6.2902185203281462, -5.820958520328146, -6.2902185203281462, -6.2902185203281462]
								}]
						}, {
							"switch":	39,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	3058,
							"begin_column":	2,
							"end_line":	3060,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L3058\", 44, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(y), sizeof (y), &(m), sizeof (m), &(d), sizeof (d), &(date_ce_date), sizeof (date_ce_date), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences)))\n    if (zend_parse_method_parameters((ht), (this_ptr), \"Olll\", &object, date_ce_date, &y, &m, &d) == -1) {\n        {\n            do {\n                zval *__z = (return_value);\n                (*__z).value.lval = ((0) != 0);\n                (*__z).type = 3;\n            } while (0);\n            return;\n        }\n        ;\n    }\n", "if (!__is_neg(\"\", \"L3058\", 44, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(y), sizeof (y), &(m), sizeof (m), &(d), sizeof (d), &(date_ce_date), sizeof (date_ce_date), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences)) && (zend_parse_method_parameters((ht), (this_ptr), \"Olll\", &object, date_ce_date, &y, &m, &d) == -1)) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.2354388898625732, -7.993326989862573, -7.279220358862573, -6.8853747898625732, -6.8853747898625732, -6.8853747898625732, -7.7022336298625724, -8.70676228986257, -8.6830691687625734, -7.8655704998625726, -8.3348304998625729, -7.543559469862573, -8.6234585998625732, -7.8655704998625726, -7.8655704998625726, -8.3348304998625729, -8.3348304998625729, -8.3348304998625729, -7.8655704998625726, -7.8655704998625726, -8.3348304998625729, -8.3348304998625729, -8.3348304998625729, -8.3348304998625729, -8.3348304998625729, -8.3348304998625729, -8.3348304998625729, -8.3348304998625729, -8.3348304998625729, -8.3348304998625729, -8.3348304998625729, -8.3348304998625729, -7.8655704998625726, -7.8655704998625726, -7.8655704998625726, -7.8655704998625726, -7.8655704998625726, -7.8655704998625726, -8.3348304998625729, -7.8655704998625726, -8.3348304998625729, -7.8655704998625726, -8.3348304998625729, -8.3348304998625729]
								}, {
									"case":	2,
									"scores":	[-8.3686068247625727, -9.1264949247625733, -8.4123882937625734, -8.01854272476257, -8.01854272476257, -8.01854272476257, -8.8354015647625737, -9.8399302247625737, -9.8162371036625728, -8.99873843476257, -9.46799843476257, -8.6767274047625733, -9.7566265347625727, -8.99873843476257, -8.99873843476257, -9.46799843476257, -9.46799843476257, -9.46799843476257, -8.99873843476257, -8.99873843476257, -9.46799843476257, -9.46799843476257, -9.46799843476257, -9.46799843476257, -9.46799843476257, -9.46799843476257, -9.46799843476257, -9.46799843476257, -9.46799843476257, -9.46799843476257, -9.46799843476257, -9.46799843476257, -8.99873843476257, -8.99873843476257, -8.99873843476257, -8.99873843476257, -8.99873843476257, -8.99873843476257, -9.46799843476257, -8.99873843476257, -9.46799843476257, -8.99873843476257, -9.46799843476257, -9.46799843476257]
								}]
						}]
				}, {
					"line":	3060,
					"switches":	[{
							"switch":	40,
							"types":	[[], [], [], [], [260], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [], [], [], [175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174], [], [], [], [], [], []],
							"begin_line":	3061,
							"begin_column":	0,
							"end_line":	3061,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->d = (-1)", "dateobj->time->d = (0)", "dateobj->time->d = (1)", "dateobj->time->d = (2)", "dateobj->time->d = (3)", "dateobj->time->m = (-1)", "dateobj->time->m = (0)", "dateobj->time->m = (1)", "dateobj->time->m = (2)", "dateobj->time->m = (3)", "dateobj->time->y = (-1)", "dateobj->time->y = (0)", "dateobj->time->y = (1)", "dateobj->time->y = (2)", "dateobj->time->y = (3)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((dateobj), 0, sizeof(php_date_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->d = d", "dateobj->time->m = m", "dateobj->time->y = y", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3061\", 31, &(object), sizeof (object), &(dateobj), sizeof (dateobj), &(return_value), sizeof (return_value), &(dateobj->time), sizeof (dateobj->time), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(m), sizeof (m), &(d), sizeof (d), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	2,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	3,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	4,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	5,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	6,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	7,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	8,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	9,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	10,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	11,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	12,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	13,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	14,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	15,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	16,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	17,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	18,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	19,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	20,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	21,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	22,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	23,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	24,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	25,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	26,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	27,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	28,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	29,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	30,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	31,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	32,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	33,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	34,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	35,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	36,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	37,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	38,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	39,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	40,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	41,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	42,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	43,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	44,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	45,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	46,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	47,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	48,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	49,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	50,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	51,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	52,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	53,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	54,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	55,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	56,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	57,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	58,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	59,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	60,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	61,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	62,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	63,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	64,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	65,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	66,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	67,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	68,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	69,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	70,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	71,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	72,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	73,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	74,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	75,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	76,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	77,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	78,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	79,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	80,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	81,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	82,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	83,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	84,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	85,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	86,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	87,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	88,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	89,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	90,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	91,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	92,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	93,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	94,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	95,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	96,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	97,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	98,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	99,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	100,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	101,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	102,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	103,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	104,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	105,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	106,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	107,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	108,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	109,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	110,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	111,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	112,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	113,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	114,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	115,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	116,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	117,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	118,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	119,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	120,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	121,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	122,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	123,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	124,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	125,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	126,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	127,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	128,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	129,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	130,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	131,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	132,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	133,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	134,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	135,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	136,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	137,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	138,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	139,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	140,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	141,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	142,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	143,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	144,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	145,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	146,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	147,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	148,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	149,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	150,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	151,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	152,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	153,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	154,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	155,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	156,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	157,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	158,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	159,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	160,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	161,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	162,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	163,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	164,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	165,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	166,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	167,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	168,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	169,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	170,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	171,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	172,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	173,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	174,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	175,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	176,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	177,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	178,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	179,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	180,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	181,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	182,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	183,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	184,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	185,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	186,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	187,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	188,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	189,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	190,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	191,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	192,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	193,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	194,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	195,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	196,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	197,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	198,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	199,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	200,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	201,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	202,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	203,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	204,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	205,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	206,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	207,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	208,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	209,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	210,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	211,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	212,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	213,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	214,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	215,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	216,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	217,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	218,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	219,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	220,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	221,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	222,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	223,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	224,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	225,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	226,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	227,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	228,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	229,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	230,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	231,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	232,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	233,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	234,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	235,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	236,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	237,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	238,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	239,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	240,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	241,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	242,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	243,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	244,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	245,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	246,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	247,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	248,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	249,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	250,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	251,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	252,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	253,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	254,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	255,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	256,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	257,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	258,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	259,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	260,
									"scores":	[-6.2902167163596259, -9.1801535432596246, -9.2407774453596261, -10.083704302259626, -7.8153315975596254, -9.482800651559625, -9.0148526115596255, -9.2608915253596251, -8.3583685975596254, -8.3583685975596254, -9.2252781593596254, -9.514199131559625, -9.514199131559625, -9.514199131559625, -9.514199131559625, -9.514199131559625, -9.514199131559625, -9.7250882485596257, -9.7602380453596247, -9.514199131559625, -9.514199131559625, -9.514199131559625, -9.514199131559625, -9.514199131559625, -9.514199131559625, -9.514199131559625, -9.514199131559625, -9.514199131559625, -9.514199131559625, -9.514199131559625, -9.7602380453596247]
								}]
						}, {
							"switch":	41,
							"types":	[[], [], [1], [], [], [], [3, 4], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	3061,
							"begin_column":	2,
							"end_line":	3061,
							"end_column":	74,
							"patch_codes":	["if (!__is_neg(\"\", \"L3061\", 31, &(object), sizeof (object), &(dateobj), sizeof (dateobj), &(return_value), sizeof (return_value), &(dateobj->time), sizeof (dateobj->time), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(m), sizeof (m), &(d), sizeof (d), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    dateobj = (php_date_obj *)zend_object_store_get_object(object);\n", "{\n}\n", "dateobj = (dateobj)", "dateobj = (php_date_obj *)zend_object_store_get_object(object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.7160785555596254, -8.512751430459625, -8.4147464215596255, -8.7494900194596248, -6.7339625955596256, -7.440448051559625, -7.7458411675596253, -8.5037292675596259, -6.8527370455596257, -6.8527370455596257, -8.2126359075596245, -7.5735546315596256, -7.5735546315596256, -7.5735546315596256, -7.5735546315596256, -7.5735546315596256, -7.5735546315596256, -8.0428146315596258, -8.3314427315596262, -7.5735546315596256, -7.5735546315596256, -7.5735546315596256, -7.5735546315596256, -7.5735546315596256, -7.5735546315596256, -7.5735546315596256, -7.5735546315596256, -7.5735546315596256, -7.5735546315596256, -7.5735546315596256, -8.3314427315596262]
								}, {
									"case":	2,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	3,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	4,
									"scores":	[-5.4474287615596255]
								}]
						}]
				}, {
					"line":	3061,
					"switches":	[{
							"switch":	42,
							"types":	[[], [], [], [], [260], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [], [], [], [175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174], [], [], [], [], [], []],
							"begin_line":	3062,
							"begin_column":	0,
							"end_line":	3062,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->d = (-1)", "dateobj->time->d = (0)", "dateobj->time->d = (1)", "dateobj->time->d = (2)", "dateobj->time->d = (3)", "dateobj->time->m = (-1)", "dateobj->time->m = (0)", "dateobj->time->m = (1)", "dateobj->time->m = (2)", "dateobj->time->m = (3)", "dateobj->time->y = (-1)", "dateobj->time->y = (0)", "dateobj->time->y = (1)", "dateobj->time->y = (2)", "dateobj->time->y = (3)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((dateobj), 0, sizeof(php_date_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->d = d", "dateobj->time->m = m", "dateobj->time->y = y", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3062\", 31, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(m), sizeof (m), &(dateobj->time->m), sizeof (dateobj->time->m), &(d), sizeof (d), &(dateobj->time->d), sizeof (dateobj->time->d), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.427226054242106]
								}, {
									"case":	2,
									"scores":	[-5.427226054242106]
								}, {
									"case":	3,
									"scores":	[-5.427226054242106]
								}, {
									"case":	4,
									"scores":	[-5.427226054242106]
								}, {
									"case":	5,
									"scores":	[-5.427226054242106]
								}, {
									"case":	6,
									"scores":	[-5.427226054242106]
								}, {
									"case":	7,
									"scores":	[-5.427226054242106]
								}, {
									"case":	8,
									"scores":	[-5.427226054242106]
								}, {
									"case":	9,
									"scores":	[-5.427226054242106]
								}, {
									"case":	10,
									"scores":	[-5.427226054242106]
								}, {
									"case":	11,
									"scores":	[-5.427226054242106]
								}, {
									"case":	12,
									"scores":	[-5.427226054242106]
								}, {
									"case":	13,
									"scores":	[-5.427226054242106]
								}, {
									"case":	14,
									"scores":	[-5.427226054242106]
								}, {
									"case":	15,
									"scores":	[-5.427226054242106]
								}, {
									"case":	16,
									"scores":	[-5.427226054242106]
								}, {
									"case":	17,
									"scores":	[-5.427226054242106]
								}, {
									"case":	18,
									"scores":	[-5.427226054242106]
								}, {
									"case":	19,
									"scores":	[-5.427226054242106]
								}, {
									"case":	20,
									"scores":	[-5.427226054242106]
								}, {
									"case":	21,
									"scores":	[-5.427226054242106]
								}, {
									"case":	22,
									"scores":	[-5.427226054242106]
								}, {
									"case":	23,
									"scores":	[-5.427226054242106]
								}, {
									"case":	24,
									"scores":	[-5.427226054242106]
								}, {
									"case":	25,
									"scores":	[-5.427226054242106]
								}, {
									"case":	26,
									"scores":	[-5.427226054242106]
								}, {
									"case":	27,
									"scores":	[-5.427226054242106]
								}, {
									"case":	28,
									"scores":	[-5.427226054242106]
								}, {
									"case":	29,
									"scores":	[-5.427226054242106]
								}, {
									"case":	30,
									"scores":	[-5.427226054242106]
								}, {
									"case":	31,
									"scores":	[-5.427226054242106]
								}, {
									"case":	32,
									"scores":	[-5.427226054242106]
								}, {
									"case":	33,
									"scores":	[-5.427226054242106]
								}, {
									"case":	34,
									"scores":	[-5.427226054242106]
								}, {
									"case":	35,
									"scores":	[-5.427226054242106]
								}, {
									"case":	36,
									"scores":	[-5.427226054242106]
								}, {
									"case":	37,
									"scores":	[-5.427226054242106]
								}, {
									"case":	38,
									"scores":	[-5.427226054242106]
								}, {
									"case":	39,
									"scores":	[-5.427226054242106]
								}, {
									"case":	40,
									"scores":	[-5.427226054242106]
								}, {
									"case":	41,
									"scores":	[-5.427226054242106]
								}, {
									"case":	42,
									"scores":	[-5.427226054242106]
								}, {
									"case":	43,
									"scores":	[-5.427226054242106]
								}, {
									"case":	44,
									"scores":	[-5.427226054242106]
								}, {
									"case":	45,
									"scores":	[-5.427226054242106]
								}, {
									"case":	46,
									"scores":	[-5.427226054242106]
								}, {
									"case":	47,
									"scores":	[-5.427226054242106]
								}, {
									"case":	48,
									"scores":	[-5.427226054242106]
								}, {
									"case":	49,
									"scores":	[-5.427226054242106]
								}, {
									"case":	50,
									"scores":	[-5.427226054242106]
								}, {
									"case":	51,
									"scores":	[-5.427226054242106]
								}, {
									"case":	52,
									"scores":	[-5.427226054242106]
								}, {
									"case":	53,
									"scores":	[-5.427226054242106]
								}, {
									"case":	54,
									"scores":	[-5.427226054242106]
								}, {
									"case":	55,
									"scores":	[-5.427226054242106]
								}, {
									"case":	56,
									"scores":	[-5.427226054242106]
								}, {
									"case":	57,
									"scores":	[-5.427226054242106]
								}, {
									"case":	58,
									"scores":	[-5.427226054242106]
								}, {
									"case":	59,
									"scores":	[-5.427226054242106]
								}, {
									"case":	60,
									"scores":	[-5.427226054242106]
								}, {
									"case":	61,
									"scores":	[-5.427226054242106]
								}, {
									"case":	62,
									"scores":	[-5.427226054242106]
								}, {
									"case":	63,
									"scores":	[-5.427226054242106]
								}, {
									"case":	64,
									"scores":	[-5.427226054242106]
								}, {
									"case":	65,
									"scores":	[-5.427226054242106]
								}, {
									"case":	66,
									"scores":	[-5.427226054242106]
								}, {
									"case":	67,
									"scores":	[-5.427226054242106]
								}, {
									"case":	68,
									"scores":	[-5.427226054242106]
								}, {
									"case":	69,
									"scores":	[-5.427226054242106]
								}, {
									"case":	70,
									"scores":	[-5.427226054242106]
								}, {
									"case":	71,
									"scores":	[-5.427226054242106]
								}, {
									"case":	72,
									"scores":	[-5.427226054242106]
								}, {
									"case":	73,
									"scores":	[-5.427226054242106]
								}, {
									"case":	74,
									"scores":	[-5.427226054242106]
								}, {
									"case":	75,
									"scores":	[-5.427226054242106]
								}, {
									"case":	76,
									"scores":	[-5.427226054242106]
								}, {
									"case":	77,
									"scores":	[-5.427226054242106]
								}, {
									"case":	78,
									"scores":	[-5.427226054242106]
								}, {
									"case":	79,
									"scores":	[-5.427226054242106]
								}, {
									"case":	80,
									"scores":	[-5.427226054242106]
								}, {
									"case":	81,
									"scores":	[-5.427226054242106]
								}, {
									"case":	82,
									"scores":	[-5.427226054242106]
								}, {
									"case":	83,
									"scores":	[-5.427226054242106]
								}, {
									"case":	84,
									"scores":	[-5.427226054242106]
								}, {
									"case":	85,
									"scores":	[-5.427226054242106]
								}, {
									"case":	86,
									"scores":	[-5.427226054242106]
								}, {
									"case":	87,
									"scores":	[-5.427226054242106]
								}, {
									"case":	88,
									"scores":	[-5.427226054242106]
								}, {
									"case":	89,
									"scores":	[-5.427226054242106]
								}, {
									"case":	90,
									"scores":	[-5.427226054242106]
								}, {
									"case":	91,
									"scores":	[-5.427226054242106]
								}, {
									"case":	92,
									"scores":	[-5.427226054242106]
								}, {
									"case":	93,
									"scores":	[-5.427226054242106]
								}, {
									"case":	94,
									"scores":	[-5.427226054242106]
								}, {
									"case":	95,
									"scores":	[-5.427226054242106]
								}, {
									"case":	96,
									"scores":	[-5.427226054242106]
								}, {
									"case":	97,
									"scores":	[-5.427226054242106]
								}, {
									"case":	98,
									"scores":	[-5.427226054242106]
								}, {
									"case":	99,
									"scores":	[-5.427226054242106]
								}, {
									"case":	100,
									"scores":	[-5.427226054242106]
								}, {
									"case":	101,
									"scores":	[-5.427226054242106]
								}, {
									"case":	102,
									"scores":	[-5.427226054242106]
								}, {
									"case":	103,
									"scores":	[-5.427226054242106]
								}, {
									"case":	104,
									"scores":	[-5.427226054242106]
								}, {
									"case":	105,
									"scores":	[-5.427226054242106]
								}, {
									"case":	106,
									"scores":	[-5.427226054242106]
								}, {
									"case":	107,
									"scores":	[-5.427226054242106]
								}, {
									"case":	108,
									"scores":	[-5.427226054242106]
								}, {
									"case":	109,
									"scores":	[-5.427226054242106]
								}, {
									"case":	110,
									"scores":	[-5.427226054242106]
								}, {
									"case":	111,
									"scores":	[-5.427226054242106]
								}, {
									"case":	112,
									"scores":	[-5.427226054242106]
								}, {
									"case":	113,
									"scores":	[-5.427226054242106]
								}, {
									"case":	114,
									"scores":	[-5.427226054242106]
								}, {
									"case":	115,
									"scores":	[-5.427226054242106]
								}, {
									"case":	116,
									"scores":	[-5.427226054242106]
								}, {
									"case":	117,
									"scores":	[-5.427226054242106]
								}, {
									"case":	118,
									"scores":	[-5.427226054242106]
								}, {
									"case":	119,
									"scores":	[-5.427226054242106]
								}, {
									"case":	120,
									"scores":	[-5.427226054242106]
								}, {
									"case":	121,
									"scores":	[-5.427226054242106]
								}, {
									"case":	122,
									"scores":	[-5.427226054242106]
								}, {
									"case":	123,
									"scores":	[-5.427226054242106]
								}, {
									"case":	124,
									"scores":	[-5.427226054242106]
								}, {
									"case":	125,
									"scores":	[-5.427226054242106]
								}, {
									"case":	126,
									"scores":	[-5.427226054242106]
								}, {
									"case":	127,
									"scores":	[-5.427226054242106]
								}, {
									"case":	128,
									"scores":	[-5.427226054242106]
								}, {
									"case":	129,
									"scores":	[-5.427226054242106]
								}, {
									"case":	130,
									"scores":	[-5.427226054242106]
								}, {
									"case":	131,
									"scores":	[-5.427226054242106]
								}, {
									"case":	132,
									"scores":	[-5.427226054242106]
								}, {
									"case":	133,
									"scores":	[-5.427226054242106]
								}, {
									"case":	134,
									"scores":	[-5.427226054242106]
								}, {
									"case":	135,
									"scores":	[-5.427226054242106]
								}, {
									"case":	136,
									"scores":	[-5.427226054242106]
								}, {
									"case":	137,
									"scores":	[-5.427226054242106]
								}, {
									"case":	138,
									"scores":	[-5.427226054242106]
								}, {
									"case":	139,
									"scores":	[-5.427226054242106]
								}, {
									"case":	140,
									"scores":	[-5.427226054242106]
								}, {
									"case":	141,
									"scores":	[-5.427226054242106]
								}, {
									"case":	142,
									"scores":	[-5.427226054242106]
								}, {
									"case":	143,
									"scores":	[-5.427226054242106]
								}, {
									"case":	144,
									"scores":	[-5.427226054242106]
								}, {
									"case":	145,
									"scores":	[-5.427226054242106]
								}, {
									"case":	146,
									"scores":	[-5.427226054242106]
								}, {
									"case":	147,
									"scores":	[-5.427226054242106]
								}, {
									"case":	148,
									"scores":	[-5.427226054242106]
								}, {
									"case":	149,
									"scores":	[-5.427226054242106]
								}, {
									"case":	150,
									"scores":	[-5.427226054242106]
								}, {
									"case":	151,
									"scores":	[-5.427226054242106]
								}, {
									"case":	152,
									"scores":	[-5.427226054242106]
								}, {
									"case":	153,
									"scores":	[-5.427226054242106]
								}, {
									"case":	154,
									"scores":	[-5.427226054242106]
								}, {
									"case":	155,
									"scores":	[-5.427226054242106]
								}, {
									"case":	156,
									"scores":	[-5.427226054242106]
								}, {
									"case":	157,
									"scores":	[-5.427226054242106]
								}, {
									"case":	158,
									"scores":	[-5.427226054242106]
								}, {
									"case":	159,
									"scores":	[-5.427226054242106]
								}, {
									"case":	160,
									"scores":	[-5.427226054242106]
								}, {
									"case":	161,
									"scores":	[-5.427226054242106]
								}, {
									"case":	162,
									"scores":	[-5.427226054242106]
								}, {
									"case":	163,
									"scores":	[-5.427226054242106]
								}, {
									"case":	164,
									"scores":	[-5.427226054242106]
								}, {
									"case":	165,
									"scores":	[-5.427226054242106]
								}, {
									"case":	166,
									"scores":	[-5.427226054242106]
								}, {
									"case":	167,
									"scores":	[-5.427226054242106]
								}, {
									"case":	168,
									"scores":	[-5.427226054242106]
								}, {
									"case":	169,
									"scores":	[-5.427226054242106]
								}, {
									"case":	170,
									"scores":	[-5.427226054242106]
								}, {
									"case":	171,
									"scores":	[-5.427226054242106]
								}, {
									"case":	172,
									"scores":	[-5.427226054242106]
								}, {
									"case":	173,
									"scores":	[-5.427226054242106]
								}, {
									"case":	174,
									"scores":	[-5.427226054242106]
								}, {
									"case":	175,
									"scores":	[-5.427226054242106]
								}, {
									"case":	176,
									"scores":	[-5.427226054242106]
								}, {
									"case":	177,
									"scores":	[-5.427226054242106]
								}, {
									"case":	178,
									"scores":	[-5.427226054242106]
								}, {
									"case":	179,
									"scores":	[-5.427226054242106]
								}, {
									"case":	180,
									"scores":	[-5.427226054242106]
								}, {
									"case":	181,
									"scores":	[-5.427226054242106]
								}, {
									"case":	182,
									"scores":	[-5.427226054242106]
								}, {
									"case":	183,
									"scores":	[-5.427226054242106]
								}, {
									"case":	184,
									"scores":	[-5.427226054242106]
								}, {
									"case":	185,
									"scores":	[-5.427226054242106]
								}, {
									"case":	186,
									"scores":	[-5.427226054242106]
								}, {
									"case":	187,
									"scores":	[-5.427226054242106]
								}, {
									"case":	188,
									"scores":	[-5.427226054242106]
								}, {
									"case":	189,
									"scores":	[-5.427226054242106]
								}, {
									"case":	190,
									"scores":	[-5.427226054242106]
								}, {
									"case":	191,
									"scores":	[-5.427226054242106]
								}, {
									"case":	192,
									"scores":	[-5.427226054242106]
								}, {
									"case":	193,
									"scores":	[-5.427226054242106]
								}, {
									"case":	194,
									"scores":	[-5.427226054242106]
								}, {
									"case":	195,
									"scores":	[-5.427226054242106]
								}, {
									"case":	196,
									"scores":	[-5.427226054242106]
								}, {
									"case":	197,
									"scores":	[-5.427226054242106]
								}, {
									"case":	198,
									"scores":	[-5.427226054242106]
								}, {
									"case":	199,
									"scores":	[-5.427226054242106]
								}, {
									"case":	200,
									"scores":	[-5.427226054242106]
								}, {
									"case":	201,
									"scores":	[-5.427226054242106]
								}, {
									"case":	202,
									"scores":	[-5.427226054242106]
								}, {
									"case":	203,
									"scores":	[-5.427226054242106]
								}, {
									"case":	204,
									"scores":	[-5.427226054242106]
								}, {
									"case":	205,
									"scores":	[-5.427226054242106]
								}, {
									"case":	206,
									"scores":	[-5.427226054242106]
								}, {
									"case":	207,
									"scores":	[-5.427226054242106]
								}, {
									"case":	208,
									"scores":	[-5.427226054242106]
								}, {
									"case":	209,
									"scores":	[-5.427226054242106]
								}, {
									"case":	210,
									"scores":	[-5.427226054242106]
								}, {
									"case":	211,
									"scores":	[-5.427226054242106]
								}, {
									"case":	212,
									"scores":	[-5.427226054242106]
								}, {
									"case":	213,
									"scores":	[-5.427226054242106]
								}, {
									"case":	214,
									"scores":	[-5.427226054242106]
								}, {
									"case":	215,
									"scores":	[-5.427226054242106]
								}, {
									"case":	216,
									"scores":	[-5.427226054242106]
								}, {
									"case":	217,
									"scores":	[-5.427226054242106]
								}, {
									"case":	218,
									"scores":	[-5.427226054242106]
								}, {
									"case":	219,
									"scores":	[-5.427226054242106]
								}, {
									"case":	220,
									"scores":	[-5.427226054242106]
								}, {
									"case":	221,
									"scores":	[-5.427226054242106]
								}, {
									"case":	222,
									"scores":	[-5.427226054242106]
								}, {
									"case":	223,
									"scores":	[-5.427226054242106]
								}, {
									"case":	224,
									"scores":	[-5.427226054242106]
								}, {
									"case":	225,
									"scores":	[-5.427226054242106]
								}, {
									"case":	226,
									"scores":	[-5.427226054242106]
								}, {
									"case":	227,
									"scores":	[-5.427226054242106]
								}, {
									"case":	228,
									"scores":	[-5.427226054242106]
								}, {
									"case":	229,
									"scores":	[-5.427226054242106]
								}, {
									"case":	230,
									"scores":	[-5.427226054242106]
								}, {
									"case":	231,
									"scores":	[-5.427226054242106]
								}, {
									"case":	232,
									"scores":	[-5.427226054242106]
								}, {
									"case":	233,
									"scores":	[-5.427226054242106]
								}, {
									"case":	234,
									"scores":	[-5.427226054242106]
								}, {
									"case":	235,
									"scores":	[-5.427226054242106]
								}, {
									"case":	236,
									"scores":	[-5.427226054242106]
								}, {
									"case":	237,
									"scores":	[-5.427226054242106]
								}, {
									"case":	238,
									"scores":	[-5.427226054242106]
								}, {
									"case":	239,
									"scores":	[-5.427226054242106]
								}, {
									"case":	240,
									"scores":	[-5.427226054242106]
								}, {
									"case":	241,
									"scores":	[-5.427226054242106]
								}, {
									"case":	242,
									"scores":	[-5.427226054242106]
								}, {
									"case":	243,
									"scores":	[-5.427226054242106]
								}, {
									"case":	244,
									"scores":	[-5.427226054242106]
								}, {
									"case":	245,
									"scores":	[-5.427226054242106]
								}, {
									"case":	246,
									"scores":	[-5.427226054242106]
								}, {
									"case":	247,
									"scores":	[-5.427226054242106]
								}, {
									"case":	248,
									"scores":	[-5.427226054242106]
								}, {
									"case":	249,
									"scores":	[-5.427226054242106]
								}, {
									"case":	250,
									"scores":	[-5.427226054242106]
								}, {
									"case":	251,
									"scores":	[-5.427226054242106]
								}, {
									"case":	252,
									"scores":	[-5.427226054242106]
								}, {
									"case":	253,
									"scores":	[-5.427226054242106]
								}, {
									"case":	254,
									"scores":	[-5.427226054242106]
								}, {
									"case":	255,
									"scores":	[-5.427226054242106]
								}, {
									"case":	256,
									"scores":	[-5.427226054242106]
								}, {
									"case":	257,
									"scores":	[-5.427226054242106]
								}, {
									"case":	258,
									"scores":	[-5.427226054242106]
								}, {
									"case":	259,
									"scores":	[-5.427226054242106]
								}, {
									"case":	260,
									"scores":	[-10.731231738042105, -9.6174276489421047, -11.574158594942105, -10.142819538042106, -9.305785890242106, -10.973254944242106, -9.305785890242106, -10.973254944242106, -9.848822890242106, -11.004653424242104, -10.505306904242106, -10.751345818042108, -10.715732452042106, -11.004653424242104, -11.004653424242104, -11.004653424242104, -11.004653424242104, -11.215542541242105, -11.250692338042105, -11.004653424242104, -11.004653424242104, -11.004653424242104, -11.004653424242104, -11.004653424242104, -11.004653424242104, -11.004653424242104, -11.004653424242104, -11.004653424242104, -11.004653424242104, -11.004653424242104, -11.250692338042105]
								}]
						}, {
							"switch":	43,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	3062,
							"begin_column":	2,
							"end_line":	3062,
							"end_column":	48,
							"patch_codes":	["if (__is_neg(\"\", \"L3062\", 31, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(m), sizeof (m), &(dateobj->time->m), sizeof (dateobj->time->m), &(d), sizeof (d), &(dateobj->time->d), sizeof (dateobj->time->d), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((!(dateobj->time)) || __is_neg(\"\", \"L3062\", 31, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(m), sizeof (m), &(dateobj->time->m), sizeof (dateobj->time->m), &(d), sizeof (d), &(dateobj->time->d), sizeof (dateobj->time->d), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((!(dateobj->time)) && !__is_neg(\"\", \"L3062\", 31, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(m), sizeof (m), &(dateobj->time->m), sizeof (dateobj->time->m), &(d), sizeof (d), &(dateobj->time->d), sizeof (dateobj->time->d), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.0952119814281449, -5.4455976093281464, -6.429955579328146, -5.2390344514281457, -4.4144281554281459, -5.1209136114281453, -4.4144281554281459, -5.1209136114281453, -4.533202605428146, -5.254020191428145, -5.4263067274281456, -6.1841948274281453, -5.8931014674281457, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.7232801914281453, -6.0119082914281456, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -6.0119082914281456]
								}, {
									"case":	2,
									"scores":	[-5.6086513334281456, -4.9590369613281462, -5.9433949313281458, -4.7524738034281464, -3.9278675074281462, -4.634352963428146, -3.9278675074281462, -4.634352963428146, -4.0466419574281458, -4.7674595434281457, -4.9397460794281454, -5.697634179428146, -5.4065408194281463, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -5.2367195434281459, -5.5253476434281454, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -5.5253476434281454]
								}, {
									"case":	3,
									"scores":	[-5.6086513334281456, -4.9590369613281462, -5.9433949313281458, -4.7524738034281464, -3.9278675074281462, -4.634352963428146, -3.9278675074281462, -4.634352963428146, -4.0466419574281458, -4.7674595434281457, -4.9397460794281454, -5.697634179428146, -5.4065408194281463, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -5.2367195434281459, -5.5253476434281454, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -5.5253476434281454]
								}]
						}, {
							"switch":	44,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	3062,
							"begin_column":	2,
							"end_line":	3062,
							"end_column":	48,
							"patch_codes":	["if (!__is_neg(\"\", \"L3062\", 31, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(m), sizeof (m), &(dateobj->time->m), sizeof (dateobj->time->m), &(d), sizeof (d), &(dateobj->time->d), sizeof (dateobj->time->d), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    if (!(dateobj->time)) {\n        php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n        {\n            do {\n                zval *__z = (return_value);\n                (*__z).value.lval = ((0) != 0);\n                (*__z).type = 3;\n            } while (0);\n            return;\n        }\n        ;\n    }\n", "if (!__is_neg(\"\", \"L3062\", 31, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(m), sizeof (m), &(dateobj->time->m), sizeof (dateobj->time->m), &(d), sizeof (d), &(dateobj->time->d), sizeof (dateobj->time->d), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)) && (!(dateobj->time))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.066484324242106, -8.4168699521421058, -9.4012279221421053, -8.210306794242106, -7.3857004982421062, -8.0921859542421064, -7.3857004982421062, -8.0921859542421064, -7.5044749482421054, -8.2252925342421062, -8.3975790702421058, -9.1554671702421064, -8.864373810242105, -8.2252925342421062, -8.2252925342421062, -8.2252925342421062, -8.2252925342421062, -8.6945525342421064, -8.9831806342421068, -8.2252925342421062, -8.2252925342421062, -8.2252925342421062, -8.2252925342421062, -8.2252925342421062, -8.2252925342421062, -8.2252925342421062, -8.2252925342421062, -8.2252925342421062, -8.2252925342421062, -8.2252925342421062, -8.9831806342421068]
								}, {
									"case":	2,
									"scores":	[-8.5019661822421053, -7.852351810142105, -8.8367097801421046, -7.6457886522421052, -6.8211823562421063, -7.5276678122421057, -6.8211823562421063, -7.5276678122421057, -6.9399568062421064, -7.6607743922421054, -7.8330609282421051, -8.5909490282421057, -8.2998556682421061, -7.6607743922421054, -7.6607743922421054, -7.6607743922421054, -7.6607743922421054, -8.1300343922421057, -8.4186624922421061, -7.6607743922421054, -7.6607743922421054, -7.6607743922421054, -7.6607743922421054, -7.6607743922421054, -7.6607743922421054, -7.6607743922421054, -7.6607743922421054, -7.6607743922421054, -7.6607743922421054, -7.6607743922421054, -8.4186624922421061]
								}]
						}]
				}, {
					"line":	3062,
					"switches":	[{
							"switch":	45,
							"types":	[[], [], [], [], [260], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [], [], [], [175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174], [], [], [], [], [], []],
							"begin_line":	3063,
							"begin_column":	0,
							"end_line":	3063,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->d = (-1)", "dateobj->time->d = (0)", "dateobj->time->d = (1)", "dateobj->time->d = (2)", "dateobj->time->d = (3)", "dateobj->time->m = (-1)", "dateobj->time->m = (0)", "dateobj->time->m = (1)", "dateobj->time->m = (2)", "dateobj->time->m = (3)", "dateobj->time->y = (-1)", "dateobj->time->y = (0)", "dateobj->time->y = (1)", "dateobj->time->y = (2)", "dateobj->time->y = (3)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((dateobj), 0, sizeof(php_date_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->d = d", "dateobj->time->m = m", "dateobj->time->y = y", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3063\", 31, &(dateobj), sizeof (dateobj), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time), sizeof (dateobj->time), &(return_value), sizeof (return_value), &(m), sizeof (m), &(dateobj->time->m), sizeof (dateobj->time->m), &(object), sizeof (object), &(d), sizeof (d), &(dateobj->time->d), sizeof (dateobj->time->d), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.386820639607067]
								}, {
									"case":	2,
									"scores":	[-5.386820639607067]
								}, {
									"case":	3,
									"scores":	[-5.386820639607067]
								}, {
									"case":	4,
									"scores":	[-5.386820639607067]
								}, {
									"case":	5,
									"scores":	[-5.386820639607067]
								}, {
									"case":	6,
									"scores":	[-5.386820639607067]
								}, {
									"case":	7,
									"scores":	[-5.386820639607067]
								}, {
									"case":	8,
									"scores":	[-5.386820639607067]
								}, {
									"case":	9,
									"scores":	[-5.386820639607067]
								}, {
									"case":	10,
									"scores":	[-5.386820639607067]
								}, {
									"case":	11,
									"scores":	[-5.386820639607067]
								}, {
									"case":	12,
									"scores":	[-5.386820639607067]
								}, {
									"case":	13,
									"scores":	[-5.386820639607067]
								}, {
									"case":	14,
									"scores":	[-5.386820639607067]
								}, {
									"case":	15,
									"scores":	[-5.386820639607067]
								}, {
									"case":	16,
									"scores":	[-5.386820639607067]
								}, {
									"case":	17,
									"scores":	[-5.386820639607067]
								}, {
									"case":	18,
									"scores":	[-5.386820639607067]
								}, {
									"case":	19,
									"scores":	[-5.386820639607067]
								}, {
									"case":	20,
									"scores":	[-5.386820639607067]
								}, {
									"case":	21,
									"scores":	[-5.386820639607067]
								}, {
									"case":	22,
									"scores":	[-5.386820639607067]
								}, {
									"case":	23,
									"scores":	[-5.386820639607067]
								}, {
									"case":	24,
									"scores":	[-5.386820639607067]
								}, {
									"case":	25,
									"scores":	[-5.386820639607067]
								}, {
									"case":	26,
									"scores":	[-5.386820639607067]
								}, {
									"case":	27,
									"scores":	[-5.386820639607067]
								}, {
									"case":	28,
									"scores":	[-5.386820639607067]
								}, {
									"case":	29,
									"scores":	[-5.386820639607067]
								}, {
									"case":	30,
									"scores":	[-5.386820639607067]
								}, {
									"case":	31,
									"scores":	[-5.386820639607067]
								}, {
									"case":	32,
									"scores":	[-5.386820639607067]
								}, {
									"case":	33,
									"scores":	[-5.386820639607067]
								}, {
									"case":	34,
									"scores":	[-5.386820639607067]
								}, {
									"case":	35,
									"scores":	[-5.386820639607067]
								}, {
									"case":	36,
									"scores":	[-5.386820639607067]
								}, {
									"case":	37,
									"scores":	[-5.386820639607067]
								}, {
									"case":	38,
									"scores":	[-5.386820639607067]
								}, {
									"case":	39,
									"scores":	[-5.386820639607067]
								}, {
									"case":	40,
									"scores":	[-5.386820639607067]
								}, {
									"case":	41,
									"scores":	[-5.386820639607067]
								}, {
									"case":	42,
									"scores":	[-5.386820639607067]
								}, {
									"case":	43,
									"scores":	[-5.386820639607067]
								}, {
									"case":	44,
									"scores":	[-5.386820639607067]
								}, {
									"case":	45,
									"scores":	[-5.386820639607067]
								}, {
									"case":	46,
									"scores":	[-5.386820639607067]
								}, {
									"case":	47,
									"scores":	[-5.386820639607067]
								}, {
									"case":	48,
									"scores":	[-5.386820639607067]
								}, {
									"case":	49,
									"scores":	[-5.386820639607067]
								}, {
									"case":	50,
									"scores":	[-5.386820639607067]
								}, {
									"case":	51,
									"scores":	[-5.386820639607067]
								}, {
									"case":	52,
									"scores":	[-5.386820639607067]
								}, {
									"case":	53,
									"scores":	[-5.386820639607067]
								}, {
									"case":	54,
									"scores":	[-5.386820639607067]
								}, {
									"case":	55,
									"scores":	[-5.386820639607067]
								}, {
									"case":	56,
									"scores":	[-5.386820639607067]
								}, {
									"case":	57,
									"scores":	[-5.386820639607067]
								}, {
									"case":	58,
									"scores":	[-5.386820639607067]
								}, {
									"case":	59,
									"scores":	[-5.386820639607067]
								}, {
									"case":	60,
									"scores":	[-5.386820639607067]
								}, {
									"case":	61,
									"scores":	[-5.386820639607067]
								}, {
									"case":	62,
									"scores":	[-5.386820639607067]
								}, {
									"case":	63,
									"scores":	[-5.386820639607067]
								}, {
									"case":	64,
									"scores":	[-5.386820639607067]
								}, {
									"case":	65,
									"scores":	[-5.386820639607067]
								}, {
									"case":	66,
									"scores":	[-5.386820639607067]
								}, {
									"case":	67,
									"scores":	[-5.386820639607067]
								}, {
									"case":	68,
									"scores":	[-5.386820639607067]
								}, {
									"case":	69,
									"scores":	[-5.386820639607067]
								}, {
									"case":	70,
									"scores":	[-5.386820639607067]
								}, {
									"case":	71,
									"scores":	[-5.386820639607067]
								}, {
									"case":	72,
									"scores":	[-5.386820639607067]
								}, {
									"case":	73,
									"scores":	[-5.386820639607067]
								}, {
									"case":	74,
									"scores":	[-5.386820639607067]
								}, {
									"case":	75,
									"scores":	[-5.386820639607067]
								}, {
									"case":	76,
									"scores":	[-5.386820639607067]
								}, {
									"case":	77,
									"scores":	[-5.386820639607067]
								}, {
									"case":	78,
									"scores":	[-5.386820639607067]
								}, {
									"case":	79,
									"scores":	[-5.386820639607067]
								}, {
									"case":	80,
									"scores":	[-5.386820639607067]
								}, {
									"case":	81,
									"scores":	[-5.386820639607067]
								}, {
									"case":	82,
									"scores":	[-5.386820639607067]
								}, {
									"case":	83,
									"scores":	[-5.386820639607067]
								}, {
									"case":	84,
									"scores":	[-5.386820639607067]
								}, {
									"case":	85,
									"scores":	[-5.386820639607067]
								}, {
									"case":	86,
									"scores":	[-5.386820639607067]
								}, {
									"case":	87,
									"scores":	[-5.386820639607067]
								}, {
									"case":	88,
									"scores":	[-5.386820639607067]
								}, {
									"case":	89,
									"scores":	[-5.386820639607067]
								}, {
									"case":	90,
									"scores":	[-5.386820639607067]
								}, {
									"case":	91,
									"scores":	[-5.386820639607067]
								}, {
									"case":	92,
									"scores":	[-5.386820639607067]
								}, {
									"case":	93,
									"scores":	[-5.386820639607067]
								}, {
									"case":	94,
									"scores":	[-5.386820639607067]
								}, {
									"case":	95,
									"scores":	[-5.386820639607067]
								}, {
									"case":	96,
									"scores":	[-5.386820639607067]
								}, {
									"case":	97,
									"scores":	[-5.386820639607067]
								}, {
									"case":	98,
									"scores":	[-5.386820639607067]
								}, {
									"case":	99,
									"scores":	[-5.386820639607067]
								}, {
									"case":	100,
									"scores":	[-5.386820639607067]
								}, {
									"case":	101,
									"scores":	[-5.386820639607067]
								}, {
									"case":	102,
									"scores":	[-5.386820639607067]
								}, {
									"case":	103,
									"scores":	[-5.386820639607067]
								}, {
									"case":	104,
									"scores":	[-5.386820639607067]
								}, {
									"case":	105,
									"scores":	[-5.386820639607067]
								}, {
									"case":	106,
									"scores":	[-5.386820639607067]
								}, {
									"case":	107,
									"scores":	[-5.386820639607067]
								}, {
									"case":	108,
									"scores":	[-5.386820639607067]
								}, {
									"case":	109,
									"scores":	[-5.386820639607067]
								}, {
									"case":	110,
									"scores":	[-5.386820639607067]
								}, {
									"case":	111,
									"scores":	[-5.386820639607067]
								}, {
									"case":	112,
									"scores":	[-5.386820639607067]
								}, {
									"case":	113,
									"scores":	[-5.386820639607067]
								}, {
									"case":	114,
									"scores":	[-5.386820639607067]
								}, {
									"case":	115,
									"scores":	[-5.386820639607067]
								}, {
									"case":	116,
									"scores":	[-5.386820639607067]
								}, {
									"case":	117,
									"scores":	[-5.386820639607067]
								}, {
									"case":	118,
									"scores":	[-5.386820639607067]
								}, {
									"case":	119,
									"scores":	[-5.386820639607067]
								}, {
									"case":	120,
									"scores":	[-5.386820639607067]
								}, {
									"case":	121,
									"scores":	[-5.386820639607067]
								}, {
									"case":	122,
									"scores":	[-5.386820639607067]
								}, {
									"case":	123,
									"scores":	[-5.386820639607067]
								}, {
									"case":	124,
									"scores":	[-5.386820639607067]
								}, {
									"case":	125,
									"scores":	[-5.386820639607067]
								}, {
									"case":	126,
									"scores":	[-5.386820639607067]
								}, {
									"case":	127,
									"scores":	[-5.386820639607067]
								}, {
									"case":	128,
									"scores":	[-5.386820639607067]
								}, {
									"case":	129,
									"scores":	[-5.386820639607067]
								}, {
									"case":	130,
									"scores":	[-5.386820639607067]
								}, {
									"case":	131,
									"scores":	[-5.386820639607067]
								}, {
									"case":	132,
									"scores":	[-5.386820639607067]
								}, {
									"case":	133,
									"scores":	[-5.386820639607067]
								}, {
									"case":	134,
									"scores":	[-5.386820639607067]
								}, {
									"case":	135,
									"scores":	[-5.386820639607067]
								}, {
									"case":	136,
									"scores":	[-5.386820639607067]
								}, {
									"case":	137,
									"scores":	[-5.386820639607067]
								}, {
									"case":	138,
									"scores":	[-5.386820639607067]
								}, {
									"case":	139,
									"scores":	[-5.386820639607067]
								}, {
									"case":	140,
									"scores":	[-5.386820639607067]
								}, {
									"case":	141,
									"scores":	[-5.386820639607067]
								}, {
									"case":	142,
									"scores":	[-5.386820639607067]
								}, {
									"case":	143,
									"scores":	[-5.386820639607067]
								}, {
									"case":	144,
									"scores":	[-5.386820639607067]
								}, {
									"case":	145,
									"scores":	[-5.386820639607067]
								}, {
									"case":	146,
									"scores":	[-5.386820639607067]
								}, {
									"case":	147,
									"scores":	[-5.386820639607067]
								}, {
									"case":	148,
									"scores":	[-5.386820639607067]
								}, {
									"case":	149,
									"scores":	[-5.386820639607067]
								}, {
									"case":	150,
									"scores":	[-5.386820639607067]
								}, {
									"case":	151,
									"scores":	[-5.386820639607067]
								}, {
									"case":	152,
									"scores":	[-5.386820639607067]
								}, {
									"case":	153,
									"scores":	[-5.386820639607067]
								}, {
									"case":	154,
									"scores":	[-5.386820639607067]
								}, {
									"case":	155,
									"scores":	[-5.386820639607067]
								}, {
									"case":	156,
									"scores":	[-5.386820639607067]
								}, {
									"case":	157,
									"scores":	[-5.386820639607067]
								}, {
									"case":	158,
									"scores":	[-5.386820639607067]
								}, {
									"case":	159,
									"scores":	[-5.386820639607067]
								}, {
									"case":	160,
									"scores":	[-5.386820639607067]
								}, {
									"case":	161,
									"scores":	[-5.386820639607067]
								}, {
									"case":	162,
									"scores":	[-5.386820639607067]
								}, {
									"case":	163,
									"scores":	[-5.386820639607067]
								}, {
									"case":	164,
									"scores":	[-5.386820639607067]
								}, {
									"case":	165,
									"scores":	[-5.386820639607067]
								}, {
									"case":	166,
									"scores":	[-5.386820639607067]
								}, {
									"case":	167,
									"scores":	[-5.386820639607067]
								}, {
									"case":	168,
									"scores":	[-5.386820639607067]
								}, {
									"case":	169,
									"scores":	[-5.386820639607067]
								}, {
									"case":	170,
									"scores":	[-5.386820639607067]
								}, {
									"case":	171,
									"scores":	[-5.386820639607067]
								}, {
									"case":	172,
									"scores":	[-5.386820639607067]
								}, {
									"case":	173,
									"scores":	[-5.386820639607067]
								}, {
									"case":	174,
									"scores":	[-5.386820639607067]
								}, {
									"case":	175,
									"scores":	[-5.386820639607067]
								}, {
									"case":	176,
									"scores":	[-5.386820639607067]
								}, {
									"case":	177,
									"scores":	[-5.386820639607067]
								}, {
									"case":	178,
									"scores":	[-5.386820639607067]
								}, {
									"case":	179,
									"scores":	[-5.386820639607067]
								}, {
									"case":	180,
									"scores":	[-5.386820639607067]
								}, {
									"case":	181,
									"scores":	[-5.386820639607067]
								}, {
									"case":	182,
									"scores":	[-5.386820639607067]
								}, {
									"case":	183,
									"scores":	[-5.386820639607067]
								}, {
									"case":	184,
									"scores":	[-5.386820639607067]
								}, {
									"case":	185,
									"scores":	[-5.386820639607067]
								}, {
									"case":	186,
									"scores":	[-5.386820639607067]
								}, {
									"case":	187,
									"scores":	[-5.386820639607067]
								}, {
									"case":	188,
									"scores":	[-5.386820639607067]
								}, {
									"case":	189,
									"scores":	[-5.386820639607067]
								}, {
									"case":	190,
									"scores":	[-5.386820639607067]
								}, {
									"case":	191,
									"scores":	[-5.386820639607067]
								}, {
									"case":	192,
									"scores":	[-5.386820639607067]
								}, {
									"case":	193,
									"scores":	[-5.386820639607067]
								}, {
									"case":	194,
									"scores":	[-5.386820639607067]
								}, {
									"case":	195,
									"scores":	[-5.386820639607067]
								}, {
									"case":	196,
									"scores":	[-5.386820639607067]
								}, {
									"case":	197,
									"scores":	[-5.386820639607067]
								}, {
									"case":	198,
									"scores":	[-5.386820639607067]
								}, {
									"case":	199,
									"scores":	[-5.386820639607067]
								}, {
									"case":	200,
									"scores":	[-5.386820639607067]
								}, {
									"case":	201,
									"scores":	[-5.386820639607067]
								}, {
									"case":	202,
									"scores":	[-5.386820639607067]
								}, {
									"case":	203,
									"scores":	[-5.386820639607067]
								}, {
									"case":	204,
									"scores":	[-5.386820639607067]
								}, {
									"case":	205,
									"scores":	[-5.386820639607067]
								}, {
									"case":	206,
									"scores":	[-5.386820639607067]
								}, {
									"case":	207,
									"scores":	[-5.386820639607067]
								}, {
									"case":	208,
									"scores":	[-5.386820639607067]
								}, {
									"case":	209,
									"scores":	[-5.386820639607067]
								}, {
									"case":	210,
									"scores":	[-5.386820639607067]
								}, {
									"case":	211,
									"scores":	[-5.386820639607067]
								}, {
									"case":	212,
									"scores":	[-5.386820639607067]
								}, {
									"case":	213,
									"scores":	[-5.386820639607067]
								}, {
									"case":	214,
									"scores":	[-5.386820639607067]
								}, {
									"case":	215,
									"scores":	[-5.386820639607067]
								}, {
									"case":	216,
									"scores":	[-5.386820639607067]
								}, {
									"case":	217,
									"scores":	[-5.386820639607067]
								}, {
									"case":	218,
									"scores":	[-5.386820639607067]
								}, {
									"case":	219,
									"scores":	[-5.386820639607067]
								}, {
									"case":	220,
									"scores":	[-5.386820639607067]
								}, {
									"case":	221,
									"scores":	[-5.386820639607067]
								}, {
									"case":	222,
									"scores":	[-5.386820639607067]
								}, {
									"case":	223,
									"scores":	[-5.386820639607067]
								}, {
									"case":	224,
									"scores":	[-5.386820639607067]
								}, {
									"case":	225,
									"scores":	[-5.386820639607067]
								}, {
									"case":	226,
									"scores":	[-5.386820639607067]
								}, {
									"case":	227,
									"scores":	[-5.386820639607067]
								}, {
									"case":	228,
									"scores":	[-5.386820639607067]
								}, {
									"case":	229,
									"scores":	[-5.386820639607067]
								}, {
									"case":	230,
									"scores":	[-5.386820639607067]
								}, {
									"case":	231,
									"scores":	[-5.386820639607067]
								}, {
									"case":	232,
									"scores":	[-5.386820639607067]
								}, {
									"case":	233,
									"scores":	[-5.386820639607067]
								}, {
									"case":	234,
									"scores":	[-5.386820639607067]
								}, {
									"case":	235,
									"scores":	[-5.386820639607067]
								}, {
									"case":	236,
									"scores":	[-5.386820639607067]
								}, {
									"case":	237,
									"scores":	[-5.386820639607067]
								}, {
									"case":	238,
									"scores":	[-5.386820639607067]
								}, {
									"case":	239,
									"scores":	[-5.386820639607067]
								}, {
									"case":	240,
									"scores":	[-5.386820639607067]
								}, {
									"case":	241,
									"scores":	[-5.386820639607067]
								}, {
									"case":	242,
									"scores":	[-5.386820639607067]
								}, {
									"case":	243,
									"scores":	[-5.386820639607067]
								}, {
									"case":	244,
									"scores":	[-5.386820639607067]
								}, {
									"case":	245,
									"scores":	[-5.386820639607067]
								}, {
									"case":	246,
									"scores":	[-5.386820639607067]
								}, {
									"case":	247,
									"scores":	[-5.386820639607067]
								}, {
									"case":	248,
									"scores":	[-5.386820639607067]
								}, {
									"case":	249,
									"scores":	[-5.386820639607067]
								}, {
									"case":	250,
									"scores":	[-5.386820639607067]
								}, {
									"case":	251,
									"scores":	[-5.386820639607067]
								}, {
									"case":	252,
									"scores":	[-5.386820639607067]
								}, {
									"case":	253,
									"scores":	[-5.386820639607067]
								}, {
									"case":	254,
									"scores":	[-5.386820639607067]
								}, {
									"case":	255,
									"scores":	[-5.386820639607067]
								}, {
									"case":	256,
									"scores":	[-5.386820639607067]
								}, {
									"case":	257,
									"scores":	[-5.386820639607067]
								}, {
									"case":	258,
									"scores":	[-5.386820639607067]
								}, {
									"case":	259,
									"scores":	[-5.386820639607067]
								}, {
									"case":	260,
									"scores":	[-7.2831439957070661, -6.5001908970070676, -8.14077831200707, -8.9772234287070667, -8.757383384807067, -7.6736218970070667, -8.99940659100707, -8.5263217848070667, -7.6736218970070667, -8.99940659100707, -8.51134447100707, -8.757383384807067, -8.7217700188070673, -9.030805071007066, -9.030805071007066, -9.030805071007066, -9.030805071007066, -9.2416941880070667, -9.2768439848070656, -9.030805071007066, -9.030805071007066, -9.030805071007066, -9.030805071007066, -9.030805071007066, -9.030805071007066, -9.030805071007066, -9.030805071007066, -9.030805071007066, -9.030805071007066, -9.030805071007066, -9.2768439848070656]
								}]
						}, {
							"switch":	46,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	3063,
							"begin_column":	2,
							"end_line":	3063,
							"end_column":	21,
							"patch_codes":	["if (!__is_neg(\"\", \"L3063\", 31, &(dateobj), sizeof (dateobj), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time), sizeof (dateobj->time), &(return_value), sizeof (return_value), &(m), sizeof (m), &(dateobj->time->m), sizeof (dateobj->time->m), &(object), sizeof (object), &(d), sizeof (d), &(dateobj->time->d), sizeof (dateobj->time->d), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    dateobj->time->y = y;\n", "{\n}\n", "dateobj->time->y = (-1)", "dateobj->time->y = (0 * d)", "dateobj->time->y = (0 * ht)", "dateobj->time->y = (0 * m)", "dateobj->time->y = (0 * return_value_used)", "dateobj->time->y = (0 * y)", "dateobj->time->y = (0)", "dateobj->time->y = (1)", "dateobj->time->y = (2)", "dateobj->time->y = (3)", "dateobj->time->y = (d != 0)", "dateobj->time->y = (d * ht)", "dateobj->time->y = (d * m)", "dateobj->time->y = (d * return_value_used)", "dateobj->time->y = (d * y)", "dateobj->time->y = (d + 0)", "dateobj->time->y = (d - 0)", "dateobj->time->y = (d == 0)", "dateobj->time->y = (d)", "dateobj->time->y = (dateobj != 0)", "dateobj->time->y = (dateobj == 0)", "dateobj->time->y = (ht != 0)", "dateobj->time->y = (ht != d)", "dateobj->time->y = (ht != m)", "dateobj->time->y = (ht != return_value_used)", "dateobj->time->y = (ht != y)", "dateobj->time->y = (ht * d)", "dateobj->time->y = (ht * m)", "dateobj->time->y = (ht * return_value_used)", "dateobj->time->y = (ht * y)", "dateobj->time->y = (ht + 0)", "dateobj->time->y = (ht + d)", "dateobj->time->y = (ht + m)", "dateobj->time->y = (ht + return_value_used)", "dateobj->time->y = (ht + y)", "dateobj->time->y = (ht - 0)", "dateobj->time->y = (ht - d)", "dateobj->time->y = (ht - m)", "dateobj->time->y = (ht - return_value_used)", "dateobj->time->y = (ht - y)", "dateobj->time->y = (ht == 0)", "dateobj->time->y = (ht == d)", "dateobj->time->y = (ht == m)", "dateobj->time->y = (ht == return_value_used)", "dateobj->time->y = (ht == y)", "dateobj->time->y = (m != 0)", "dateobj->time->y = (m != d)", "dateobj->time->y = (m * d)", "dateobj->time->y = (m * ht)", "dateobj->time->y = (m * return_value_used)", "dateobj->time->y = (m * y)", "dateobj->time->y = (m + 0)", "dateobj->time->y = (m + d)", "dateobj->time->y = (m - 0)", "dateobj->time->y = (m - d)", "dateobj->time->y = (m == 0)", "dateobj->time->y = (m == d)", "dateobj->time->y = (m)", "dateobj->time->y = (object != 0)", "dateobj->time->y = (object == 0)", "dateobj->time->y = (return_value != 0)", "dateobj->time->y = (return_value != object)", "dateobj->time->y = (return_value != this_ptr)", "dateobj->time->y = (return_value == 0)", "dateobj->time->y = (return_value == object)", "dateobj->time->y = (return_value == this_ptr)", "dateobj->time->y = (return_value_ptr != 0)", "dateobj->time->y = (return_value_ptr == 0)", "dateobj->time->y = (return_value_used != 0)", "dateobj->time->y = (return_value_used != d)", "dateobj->time->y = (return_value_used != m)", "dateobj->time->y = (return_value_used != y)", "dateobj->time->y = (return_value_used * d)", "dateobj->time->y = (return_value_used * ht)", "dateobj->time->y = (return_value_used * m)", "dateobj->time->y = (return_value_used * y)", "dateobj->time->y = (return_value_used + 0)", "dateobj->time->y = (return_value_used + d)", "dateobj->time->y = (return_value_used + m)", "dateobj->time->y = (return_value_used + y)", "dateobj->time->y = (return_value_used - 0)", "dateobj->time->y = (return_value_used - d)", "dateobj->time->y = (return_value_used - m)", "dateobj->time->y = (return_value_used - y)", "dateobj->time->y = (return_value_used == 0)", "dateobj->time->y = (return_value_used == d)", "dateobj->time->y = (return_value_used == m)", "dateobj->time->y = (return_value_used == y)", "dateobj->time->y = (this_ptr != 0)", "dateobj->time->y = (this_ptr != object)", "dateobj->time->y = (this_ptr == 0)", "dateobj->time->y = (this_ptr == object)", "dateobj->time->y = (y != 0)", "dateobj->time->y = (y != d)", "dateobj->time->y = (y != m)", "dateobj->time->y = (y * d)", "dateobj->time->y = (y * ht)", "dateobj->time->y = (y * m)", "dateobj->time->y = (y * return_value_used)", "dateobj->time->y = (y + 0)", "dateobj->time->y = (y + d)", "dateobj->time->y = (y + m)", "dateobj->time->y = (y - 0)", "dateobj->time->y = (y - d)", "dateobj->time->y = (y - m)", "dateobj->time->y = (y == 0)", "dateobj->time->y = (y == d)", "dateobj->time->y = (y == m)", "dateobj->time->y = (y)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5071913480070673, -5.3842543196070674, -6.270950640607067, -7.225576026507067, -7.2451999096070665, -5.2654798696070673, -6.1378440606070672, -6.669268955607067, -5.7603888596070671, -6.2709015396070669, -6.4873118096070668, -7.2451999096070665, -6.9541065496070669, -6.4040081196070666, -6.4040081196070666, -6.4040081196070666, -6.4040081196070666, -6.8732681196070669, -7.1618962196070672, -6.4040081196070666, -6.4040081196070666, -6.4040081196070666, -6.4040081196070666, -6.4040081196070666, -6.4040081196070666, -6.4040081196070666, -6.4040081196070666, -6.4040081196070666, -6.4040081196070666, -6.4040081196070666, -7.1618962196070672]
								}, {
									"case":	2,
									"scores":	[-5.386820639607067]
								}, {
									"case":	3,
									"scores":	[-5.386820639607067]
								}, {
									"case":	4,
									"scores":	[-5.386820639607067]
								}, {
									"case":	5,
									"scores":	[-5.386820639607067]
								}, {
									"case":	6,
									"scores":	[-5.386820639607067]
								}, {
									"case":	7,
									"scores":	[-5.386820639607067]
								}, {
									"case":	8,
									"scores":	[-5.386820639607067]
								}, {
									"case":	9,
									"scores":	[-5.386820639607067]
								}, {
									"case":	10,
									"scores":	[-5.386820639607067]
								}, {
									"case":	11,
									"scores":	[-5.386820639607067]
								}, {
									"case":	12,
									"scores":	[-5.386820639607067]
								}, {
									"case":	13,
									"scores":	[-5.386820639607067]
								}, {
									"case":	14,
									"scores":	[-5.386820639607067]
								}, {
									"case":	15,
									"scores":	[-5.386820639607067]
								}, {
									"case":	16,
									"scores":	[-5.386820639607067]
								}, {
									"case":	17,
									"scores":	[-5.386820639607067]
								}, {
									"case":	18,
									"scores":	[-5.386820639607067]
								}, {
									"case":	19,
									"scores":	[-5.386820639607067]
								}, {
									"case":	20,
									"scores":	[-5.386820639607067]
								}, {
									"case":	21,
									"scores":	[-5.386820639607067]
								}, {
									"case":	22,
									"scores":	[-5.386820639607067]
								}, {
									"case":	23,
									"scores":	[-5.386820639607067]
								}, {
									"case":	24,
									"scores":	[-5.386820639607067]
								}, {
									"case":	25,
									"scores":	[-5.386820639607067]
								}, {
									"case":	26,
									"scores":	[-5.386820639607067]
								}, {
									"case":	27,
									"scores":	[-5.386820639607067]
								}, {
									"case":	28,
									"scores":	[-5.386820639607067]
								}, {
									"case":	29,
									"scores":	[-5.386820639607067]
								}, {
									"case":	30,
									"scores":	[-5.386820639607067]
								}, {
									"case":	31,
									"scores":	[-5.386820639607067]
								}, {
									"case":	32,
									"scores":	[-5.386820639607067]
								}, {
									"case":	33,
									"scores":	[-5.386820639607067]
								}, {
									"case":	34,
									"scores":	[-5.386820639607067]
								}, {
									"case":	35,
									"scores":	[-5.386820639607067]
								}, {
									"case":	36,
									"scores":	[-5.386820639607067]
								}, {
									"case":	37,
									"scores":	[-5.386820639607067]
								}, {
									"case":	38,
									"scores":	[-5.386820639607067]
								}, {
									"case":	39,
									"scores":	[-5.386820639607067]
								}, {
									"case":	40,
									"scores":	[-5.386820639607067]
								}, {
									"case":	41,
									"scores":	[-5.386820639607067]
								}, {
									"case":	42,
									"scores":	[-5.386820639607067]
								}, {
									"case":	43,
									"scores":	[-5.386820639607067]
								}, {
									"case":	44,
									"scores":	[-5.386820639607067]
								}, {
									"case":	45,
									"scores":	[-5.386820639607067]
								}, {
									"case":	46,
									"scores":	[-5.386820639607067]
								}, {
									"case":	47,
									"scores":	[-5.386820639607067]
								}, {
									"case":	48,
									"scores":	[-5.386820639607067]
								}, {
									"case":	49,
									"scores":	[-5.386820639607067]
								}, {
									"case":	50,
									"scores":	[-5.386820639607067]
								}, {
									"case":	51,
									"scores":	[-5.386820639607067]
								}, {
									"case":	52,
									"scores":	[-5.386820639607067]
								}, {
									"case":	53,
									"scores":	[-5.386820639607067]
								}, {
									"case":	54,
									"scores":	[-5.386820639607067]
								}, {
									"case":	55,
									"scores":	[-5.386820639607067]
								}, {
									"case":	56,
									"scores":	[-5.386820639607067]
								}, {
									"case":	57,
									"scores":	[-5.386820639607067]
								}, {
									"case":	58,
									"scores":	[-5.386820639607067]
								}, {
									"case":	59,
									"scores":	[-5.386820639607067]
								}, {
									"case":	60,
									"scores":	[-5.386820639607067]
								}, {
									"case":	61,
									"scores":	[-5.386820639607067]
								}, {
									"case":	62,
									"scores":	[-5.386820639607067]
								}, {
									"case":	63,
									"scores":	[-5.386820639607067]
								}, {
									"case":	64,
									"scores":	[-5.386820639607067]
								}, {
									"case":	65,
									"scores":	[-5.386820639607067]
								}, {
									"case":	66,
									"scores":	[-5.386820639607067]
								}, {
									"case":	67,
									"scores":	[-5.386820639607067]
								}, {
									"case":	68,
									"scores":	[-5.386820639607067]
								}, {
									"case":	69,
									"scores":	[-5.386820639607067]
								}, {
									"case":	70,
									"scores":	[-5.386820639607067]
								}, {
									"case":	71,
									"scores":	[-5.386820639607067]
								}, {
									"case":	72,
									"scores":	[-5.386820639607067]
								}, {
									"case":	73,
									"scores":	[-5.386820639607067]
								}, {
									"case":	74,
									"scores":	[-5.386820639607067]
								}, {
									"case":	75,
									"scores":	[-5.386820639607067]
								}, {
									"case":	76,
									"scores":	[-5.386820639607067]
								}, {
									"case":	77,
									"scores":	[-5.386820639607067]
								}, {
									"case":	78,
									"scores":	[-5.386820639607067]
								}, {
									"case":	79,
									"scores":	[-5.386820639607067]
								}, {
									"case":	80,
									"scores":	[-5.386820639607067]
								}, {
									"case":	81,
									"scores":	[-5.386820639607067]
								}, {
									"case":	82,
									"scores":	[-5.386820639607067]
								}, {
									"case":	83,
									"scores":	[-5.386820639607067]
								}, {
									"case":	84,
									"scores":	[-5.386820639607067]
								}, {
									"case":	85,
									"scores":	[-5.386820639607067]
								}, {
									"case":	86,
									"scores":	[-5.386820639607067]
								}, {
									"case":	87,
									"scores":	[-5.386820639607067]
								}, {
									"case":	88,
									"scores":	[-5.386820639607067]
								}, {
									"case":	89,
									"scores":	[-5.386820639607067]
								}, {
									"case":	90,
									"scores":	[-5.386820639607067]
								}, {
									"case":	91,
									"scores":	[-5.386820639607067]
								}, {
									"case":	92,
									"scores":	[-5.386820639607067]
								}, {
									"case":	93,
									"scores":	[-5.386820639607067]
								}, {
									"case":	94,
									"scores":	[-5.386820639607067]
								}, {
									"case":	95,
									"scores":	[-5.386820639607067]
								}, {
									"case":	96,
									"scores":	[-5.386820639607067]
								}, {
									"case":	97,
									"scores":	[-5.386820639607067]
								}, {
									"case":	98,
									"scores":	[-5.386820639607067]
								}, {
									"case":	99,
									"scores":	[-5.386820639607067]
								}, {
									"case":	100,
									"scores":	[-5.386820639607067]
								}, {
									"case":	101,
									"scores":	[-5.386820639607067]
								}, {
									"case":	102,
									"scores":	[-5.386820639607067]
								}, {
									"case":	103,
									"scores":	[-5.386820639607067]
								}, {
									"case":	104,
									"scores":	[-5.386820639607067]
								}, {
									"case":	105,
									"scores":	[-5.386820639607067]
								}, {
									"case":	106,
									"scores":	[-5.386820639607067]
								}, {
									"case":	107,
									"scores":	[-5.386820639607067]
								}, {
									"case":	108,
									"scores":	[-5.386820639607067]
								}, {
									"case":	109,
									"scores":	[-5.386820639607067]
								}, {
									"case":	110,
									"scores":	[-5.386820639607067]
								}, {
									"case":	111,
									"scores":	[-5.386820639607067]
								}]
						}]
				}, {
					"line":	3063,
					"switches":	[{
							"switch":	47,
							"types":	[[], [], [], [], [260], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [], [], [], [175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174], [], [], [], [], [], []],
							"begin_line":	3064,
							"begin_column":	0,
							"end_line":	3064,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->d = (-1)", "dateobj->time->d = (0)", "dateobj->time->d = (1)", "dateobj->time->d = (2)", "dateobj->time->d = (3)", "dateobj->time->m = (-1)", "dateobj->time->m = (0)", "dateobj->time->m = (1)", "dateobj->time->m = (2)", "dateobj->time->m = (3)", "dateobj->time->y = (-1)", "dateobj->time->y = (0)", "dateobj->time->y = (1)", "dateobj->time->y = (2)", "dateobj->time->y = (3)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((dateobj), 0, sizeof(php_date_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->d = d", "dateobj->time->m = m", "dateobj->time->y = y", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3064\", 31, &(dateobj), sizeof (dateobj), &(m), sizeof (m), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time), sizeof (dateobj->time), &(y), sizeof (y), &(d), sizeof (d), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->d), sizeof (dateobj->time->d), &(return_value), sizeof (return_value), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	2,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	3,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	4,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	5,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	6,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	7,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	8,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	9,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	10,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	11,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	12,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	13,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	14,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	15,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	16,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	17,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	18,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	19,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	20,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	21,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	22,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	23,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	24,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	25,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	26,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	27,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	28,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	29,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	30,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	31,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	32,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	33,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	34,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	35,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	36,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	37,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	38,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	39,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	40,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	41,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	42,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	43,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	44,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	45,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	46,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	47,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	48,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	49,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	50,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	51,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	52,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	53,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	54,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	55,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	56,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	57,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	58,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	59,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	60,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	61,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	62,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	63,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	64,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	65,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	66,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	67,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	68,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	69,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	70,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	71,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	72,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	73,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	74,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	75,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	76,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	77,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	78,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	79,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	80,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	81,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	82,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	83,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	84,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	85,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	86,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	87,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	88,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	89,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	90,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	91,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	92,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	93,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	94,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	95,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	96,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	97,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	98,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	99,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	100,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	101,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	102,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	103,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	104,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	105,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	106,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	107,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	108,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	109,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	110,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	111,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	112,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	113,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	114,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	115,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	116,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	117,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	118,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	119,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	120,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	121,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	122,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	123,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	124,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	125,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	126,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	127,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	128,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	129,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	130,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	131,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	132,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	133,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	134,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	135,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	136,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	137,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	138,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	139,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	140,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	141,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	142,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	143,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	144,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	145,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	146,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	147,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	148,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	149,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	150,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	151,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	152,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	153,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	154,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	155,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	156,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	157,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	158,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	159,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	160,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	161,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	162,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	163,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	164,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	165,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	166,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	167,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	168,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	169,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	170,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	171,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	172,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	173,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	174,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	175,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	176,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	177,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	178,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	179,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	180,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	181,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	182,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	183,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	184,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	185,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	186,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	187,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	188,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	189,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	190,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	191,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	192,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	193,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	194,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	195,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	196,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	197,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	198,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	199,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	200,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	201,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	202,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	203,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	204,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	205,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	206,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	207,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	208,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	209,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	210,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	211,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	212,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	213,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	214,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	215,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	216,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	217,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	218,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	219,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	220,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	221,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	222,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	223,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	224,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	225,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	226,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	227,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	228,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	229,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	230,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	231,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	232,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	233,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	234,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	235,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	236,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	237,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	238,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	239,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	240,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	241,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	242,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	243,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	244,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	245,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	246,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	247,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	248,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	249,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	250,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	251,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	252,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	253,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	254,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	255,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	256,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	257,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	258,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	259,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	260,
									"scores":	[-9.88370748838955, -7.5099981896895471, -9.150585604689546, -10.308219141389547, -9.0123909096895467, -8.6834291896895461, -8.2357808836895465, -10.009213883689547, -10.236339587389548, -10.573360544389548, -9.5211517636895469, -9.76719067748955, -9.7315773114895467, -10.040612363689547, -10.040612363689547, -10.040612363689547, -10.040612363689547, -10.251501480689546, -10.286651277489547, -10.040612363689547, -10.040612363689547, -10.040612363689547, -10.040612363689547, -10.040612363689547, -10.040612363689547, -10.040612363689547, -10.040612363689547, -10.040612363689547, -10.040612363689547, -10.040612363689547, -10.286651277489547]
								}]
						}, {
							"switch":	48,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	3064,
							"begin_column":	2,
							"end_line":	3064,
							"end_column":	21,
							"patch_codes":	["if (!__is_neg(\"\", \"L3064\", 31, &(dateobj), sizeof (dateobj), &(m), sizeof (m), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time), sizeof (dateobj->time), &(y), sizeof (y), &(d), sizeof (d), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->d), sizeof (dateobj->time->d), &(return_value), sizeof (return_value), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    dateobj->time->m = m;\n", "{\n}\n", "dateobj->time->m = (-1)", "dateobj->time->m = (0 * d)", "dateobj->time->m = (0 * ht)", "dateobj->time->m = (0 * m)", "dateobj->time->m = (0 * return_value_used)", "dateobj->time->m = (0 * y)", "dateobj->time->m = (0)", "dateobj->time->m = (1)", "dateobj->time->m = (2)", "dateobj->time->m = (3)", "dateobj->time->m = (d != 0)", "dateobj->time->m = (d * ht)", "dateobj->time->m = (d * m)", "dateobj->time->m = (d * return_value_used)", "dateobj->time->m = (d * y)", "dateobj->time->m = (d + 0)", "dateobj->time->m = (d - 0)", "dateobj->time->m = (d == 0)", "dateobj->time->m = (d)", "dateobj->time->m = (dateobj != 0)", "dateobj->time->m = (dateobj == 0)", "dateobj->time->m = (ht != 0)", "dateobj->time->m = (ht != d)", "dateobj->time->m = (ht != m)", "dateobj->time->m = (ht != return_value_used)", "dateobj->time->m = (ht != y)", "dateobj->time->m = (ht * d)", "dateobj->time->m = (ht * m)", "dateobj->time->m = (ht * return_value_used)", "dateobj->time->m = (ht * y)", "dateobj->time->m = (ht + 0)", "dateobj->time->m = (ht + d)", "dateobj->time->m = (ht + m)", "dateobj->time->m = (ht + return_value_used)", "dateobj->time->m = (ht + y)", "dateobj->time->m = (ht - 0)", "dateobj->time->m = (ht - d)", "dateobj->time->m = (ht - m)", "dateobj->time->m = (ht - return_value_used)", "dateobj->time->m = (ht - y)", "dateobj->time->m = (ht == 0)", "dateobj->time->m = (ht == d)", "dateobj->time->m = (ht == m)", "dateobj->time->m = (ht == return_value_used)", "dateobj->time->m = (ht == y)", "dateobj->time->m = (m != 0)", "dateobj->time->m = (m != d)", "dateobj->time->m = (m * d)", "dateobj->time->m = (m * ht)", "dateobj->time->m = (m * return_value_used)", "dateobj->time->m = (m * y)", "dateobj->time->m = (m + 0)", "dateobj->time->m = (m + d)", "dateobj->time->m = (m - 0)", "dateobj->time->m = (m - d)", "dateobj->time->m = (m == 0)", "dateobj->time->m = (m == d)", "dateobj->time->m = (m)", "dateobj->time->m = (object != 0)", "dateobj->time->m = (object == 0)", "dateobj->time->m = (return_value != 0)", "dateobj->time->m = (return_value != object)", "dateobj->time->m = (return_value != this_ptr)", "dateobj->time->m = (return_value == 0)", "dateobj->time->m = (return_value == object)", "dateobj->time->m = (return_value == this_ptr)", "dateobj->time->m = (return_value_ptr != 0)", "dateobj->time->m = (return_value_ptr == 0)", "dateobj->time->m = (return_value_used != 0)", "dateobj->time->m = (return_value_used != d)", "dateobj->time->m = (return_value_used != m)", "dateobj->time->m = (return_value_used != y)", "dateobj->time->m = (return_value_used * d)", "dateobj->time->m = (return_value_used * ht)", "dateobj->time->m = (return_value_used * m)", "dateobj->time->m = (return_value_used * y)", "dateobj->time->m = (return_value_used + 0)", "dateobj->time->m = (return_value_used + d)", "dateobj->time->m = (return_value_used + m)", "dateobj->time->m = (return_value_used + y)", "dateobj->time->m = (return_value_used - 0)", "dateobj->time->m = (return_value_used - d)", "dateobj->time->m = (return_value_used - m)", "dateobj->time->m = (return_value_used - y)", "dateobj->time->m = (return_value_used == 0)", "dateobj->time->m = (return_value_used == d)", "dateobj->time->m = (return_value_used == m)", "dateobj->time->m = (return_value_used == y)", "dateobj->time->m = (this_ptr != 0)", "dateobj->time->m = (this_ptr != object)", "dateobj->time->m = (this_ptr == 0)", "dateobj->time->m = (this_ptr == object)", "dateobj->time->m = (y != 0)", "dateobj->time->m = (y != d)", "dateobj->time->m = (y != m)", "dateobj->time->m = (y * d)", "dateobj->time->m = (y * ht)", "dateobj->time->m = (y * m)", "dateobj->time->m = (y * return_value_used)", "dateobj->time->m = (y + 0)", "dateobj->time->m = (y + d)", "dateobj->time->m = (y + m)", "dateobj->time->m = (y - 0)", "dateobj->time->m = (y - d)", "dateobj->time->m = (y - m)", "dateobj->time->m = (y == 0)", "dateobj->time->m = (y == d)", "dateobj->time->m = (y == m)", "dateobj->time->m = (y)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.0032958906895466, -5.3702450022895478, -6.2569413232895474, -7.082791199689547, -5.4945909922895479, -5.2514705522895477, -5.5093219422895476, -6.1238347432895477, -7.6824133891895476, -7.833725490189547, -6.4733024922895472, -7.231190592289547, -6.9400972322895473, -6.3899988022895471, -6.3899988022895471, -6.3899988022895471, -6.3899988022895471, -6.8592588022895473, -7.1478869022895477, -6.3899988022895471, -6.3899988022895471, -6.3899988022895471, -6.3899988022895471, -6.3899988022895471, -6.3899988022895471, -6.3899988022895471, -6.3899988022895471, -6.3899988022895471, -6.3899988022895471, -6.3899988022895471, -7.1478869022895477]
								}, {
									"case":	2,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	3,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	4,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	5,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	6,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	7,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	8,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	9,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	10,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	11,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	12,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	13,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	14,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	15,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	16,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	17,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	18,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	19,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	20,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	21,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	22,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	23,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	24,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	25,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	26,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	27,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	28,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	29,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	30,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	31,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	32,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	33,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	34,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	35,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	36,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	37,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	38,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	39,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	40,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	41,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	42,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	43,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	44,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	45,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	46,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	47,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	48,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	49,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	50,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	51,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	52,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	53,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	54,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	55,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	56,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	57,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	58,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	59,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	60,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	61,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	62,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	63,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	64,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	65,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	66,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	67,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	68,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	69,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	70,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	71,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	72,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	73,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	74,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	75,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	76,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	77,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	78,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	79,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	80,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	81,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	82,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	83,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	84,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	85,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	86,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	87,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	88,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	89,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	90,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	91,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	92,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	93,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	94,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	95,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	96,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	97,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	98,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	99,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	100,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	101,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	102,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	103,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	104,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	105,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	106,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	107,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	108,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	109,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	110,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	111,
									"scores":	[-5.3666179322895475]
								}]
						}]
				}, {
					"line":	3064,
					"switches":	[{
							"switch":	49,
							"types":	[[], [], [], [], [260], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [], [], [], [175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174], [], [], [], [], [], []],
							"begin_line":	3065,
							"begin_column":	0,
							"end_line":	3065,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->d = (-1)", "dateobj->time->d = (0)", "dateobj->time->d = (1)", "dateobj->time->d = (2)", "dateobj->time->d = (3)", "dateobj->time->m = (-1)", "dateobj->time->m = (0)", "dateobj->time->m = (1)", "dateobj->time->m = (2)", "dateobj->time->m = (3)", "dateobj->time->y = (-1)", "dateobj->time->y = (0)", "dateobj->time->y = (1)", "dateobj->time->y = (2)", "dateobj->time->y = (3)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((dateobj), 0, sizeof(php_date_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->d = d", "dateobj->time->m = m", "dateobj->time->y = y", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3065\", 31, &(dateobj), sizeof (dateobj), &(d), sizeof (d), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time), sizeof (dateobj->time), &(m), sizeof (m), &(dateobj->time->m), sizeof (dateobj->time->m), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(return_value), sizeof (return_value), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.346415224972028]
								}, {
									"case":	2,
									"scores":	[-5.346415224972028]
								}, {
									"case":	3,
									"scores":	[-5.346415224972028]
								}, {
									"case":	4,
									"scores":	[-5.346415224972028]
								}, {
									"case":	5,
									"scores":	[-5.346415224972028]
								}, {
									"case":	6,
									"scores":	[-5.346415224972028]
								}, {
									"case":	7,
									"scores":	[-5.346415224972028]
								}, {
									"case":	8,
									"scores":	[-5.346415224972028]
								}, {
									"case":	9,
									"scores":	[-5.346415224972028]
								}, {
									"case":	10,
									"scores":	[-5.346415224972028]
								}, {
									"case":	11,
									"scores":	[-5.346415224972028]
								}, {
									"case":	12,
									"scores":	[-5.346415224972028]
								}, {
									"case":	13,
									"scores":	[-5.346415224972028]
								}, {
									"case":	14,
									"scores":	[-5.346415224972028]
								}, {
									"case":	15,
									"scores":	[-5.346415224972028]
								}, {
									"case":	16,
									"scores":	[-5.346415224972028]
								}, {
									"case":	17,
									"scores":	[-5.346415224972028]
								}, {
									"case":	18,
									"scores":	[-5.346415224972028]
								}, {
									"case":	19,
									"scores":	[-5.346415224972028]
								}, {
									"case":	20,
									"scores":	[-5.346415224972028]
								}, {
									"case":	21,
									"scores":	[-5.346415224972028]
								}, {
									"case":	22,
									"scores":	[-5.346415224972028]
								}, {
									"case":	23,
									"scores":	[-5.346415224972028]
								}, {
									"case":	24,
									"scores":	[-5.346415224972028]
								}, {
									"case":	25,
									"scores":	[-5.346415224972028]
								}, {
									"case":	26,
									"scores":	[-5.346415224972028]
								}, {
									"case":	27,
									"scores":	[-5.346415224972028]
								}, {
									"case":	28,
									"scores":	[-5.346415224972028]
								}, {
									"case":	29,
									"scores":	[-5.346415224972028]
								}, {
									"case":	30,
									"scores":	[-5.346415224972028]
								}, {
									"case":	31,
									"scores":	[-5.346415224972028]
								}, {
									"case":	32,
									"scores":	[-5.346415224972028]
								}, {
									"case":	33,
									"scores":	[-5.346415224972028]
								}, {
									"case":	34,
									"scores":	[-5.346415224972028]
								}, {
									"case":	35,
									"scores":	[-5.346415224972028]
								}, {
									"case":	36,
									"scores":	[-5.346415224972028]
								}, {
									"case":	37,
									"scores":	[-5.346415224972028]
								}, {
									"case":	38,
									"scores":	[-5.346415224972028]
								}, {
									"case":	39,
									"scores":	[-5.346415224972028]
								}, {
									"case":	40,
									"scores":	[-5.346415224972028]
								}, {
									"case":	41,
									"scores":	[-5.346415224972028]
								}, {
									"case":	42,
									"scores":	[-5.346415224972028]
								}, {
									"case":	43,
									"scores":	[-5.346415224972028]
								}, {
									"case":	44,
									"scores":	[-5.346415224972028]
								}, {
									"case":	45,
									"scores":	[-5.346415224972028]
								}, {
									"case":	46,
									"scores":	[-5.346415224972028]
								}, {
									"case":	47,
									"scores":	[-5.346415224972028]
								}, {
									"case":	48,
									"scores":	[-5.346415224972028]
								}, {
									"case":	49,
									"scores":	[-5.346415224972028]
								}, {
									"case":	50,
									"scores":	[-5.346415224972028]
								}, {
									"case":	51,
									"scores":	[-5.346415224972028]
								}, {
									"case":	52,
									"scores":	[-5.346415224972028]
								}, {
									"case":	53,
									"scores":	[-5.346415224972028]
								}, {
									"case":	54,
									"scores":	[-5.346415224972028]
								}, {
									"case":	55,
									"scores":	[-5.346415224972028]
								}, {
									"case":	56,
									"scores":	[-5.346415224972028]
								}, {
									"case":	57,
									"scores":	[-5.346415224972028]
								}, {
									"case":	58,
									"scores":	[-5.346415224972028]
								}, {
									"case":	59,
									"scores":	[-5.346415224972028]
								}, {
									"case":	60,
									"scores":	[-5.346415224972028]
								}, {
									"case":	61,
									"scores":	[-5.346415224972028]
								}, {
									"case":	62,
									"scores":	[-5.346415224972028]
								}, {
									"case":	63,
									"scores":	[-5.346415224972028]
								}, {
									"case":	64,
									"scores":	[-5.346415224972028]
								}, {
									"case":	65,
									"scores":	[-5.346415224972028]
								}, {
									"case":	66,
									"scores":	[-5.346415224972028]
								}, {
									"case":	67,
									"scores":	[-5.346415224972028]
								}, {
									"case":	68,
									"scores":	[-5.346415224972028]
								}, {
									"case":	69,
									"scores":	[-5.346415224972028]
								}, {
									"case":	70,
									"scores":	[-5.346415224972028]
								}, {
									"case":	71,
									"scores":	[-5.346415224972028]
								}, {
									"case":	72,
									"scores":	[-5.346415224972028]
								}, {
									"case":	73,
									"scores":	[-5.346415224972028]
								}, {
									"case":	74,
									"scores":	[-5.346415224972028]
								}, {
									"case":	75,
									"scores":	[-5.346415224972028]
								}, {
									"case":	76,
									"scores":	[-5.346415224972028]
								}, {
									"case":	77,
									"scores":	[-5.346415224972028]
								}, {
									"case":	78,
									"scores":	[-5.346415224972028]
								}, {
									"case":	79,
									"scores":	[-5.346415224972028]
								}, {
									"case":	80,
									"scores":	[-5.346415224972028]
								}, {
									"case":	81,
									"scores":	[-5.346415224972028]
								}, {
									"case":	82,
									"scores":	[-5.346415224972028]
								}, {
									"case":	83,
									"scores":	[-5.346415224972028]
								}, {
									"case":	84,
									"scores":	[-5.346415224972028]
								}, {
									"case":	85,
									"scores":	[-5.346415224972028]
								}, {
									"case":	86,
									"scores":	[-5.346415224972028]
								}, {
									"case":	87,
									"scores":	[-5.346415224972028]
								}, {
									"case":	88,
									"scores":	[-5.346415224972028]
								}, {
									"case":	89,
									"scores":	[-5.346415224972028]
								}, {
									"case":	90,
									"scores":	[-5.346415224972028]
								}, {
									"case":	91,
									"scores":	[-5.346415224972028]
								}, {
									"case":	92,
									"scores":	[-5.346415224972028]
								}, {
									"case":	93,
									"scores":	[-5.346415224972028]
								}, {
									"case":	94,
									"scores":	[-5.346415224972028]
								}, {
									"case":	95,
									"scores":	[-5.346415224972028]
								}, {
									"case":	96,
									"scores":	[-5.346415224972028]
								}, {
									"case":	97,
									"scores":	[-5.346415224972028]
								}, {
									"case":	98,
									"scores":	[-5.346415224972028]
								}, {
									"case":	99,
									"scores":	[-5.346415224972028]
								}, {
									"case":	100,
									"scores":	[-5.346415224972028]
								}, {
									"case":	101,
									"scores":	[-5.346415224972028]
								}, {
									"case":	102,
									"scores":	[-5.346415224972028]
								}, {
									"case":	103,
									"scores":	[-5.346415224972028]
								}, {
									"case":	104,
									"scores":	[-5.346415224972028]
								}, {
									"case":	105,
									"scores":	[-5.346415224972028]
								}, {
									"case":	106,
									"scores":	[-5.346415224972028]
								}, {
									"case":	107,
									"scores":	[-5.346415224972028]
								}, {
									"case":	108,
									"scores":	[-5.346415224972028]
								}, {
									"case":	109,
									"scores":	[-5.346415224972028]
								}, {
									"case":	110,
									"scores":	[-5.346415224972028]
								}, {
									"case":	111,
									"scores":	[-5.346415224972028]
								}, {
									"case":	112,
									"scores":	[-5.346415224972028]
								}, {
									"case":	113,
									"scores":	[-5.346415224972028]
								}, {
									"case":	114,
									"scores":	[-5.346415224972028]
								}, {
									"case":	115,
									"scores":	[-5.346415224972028]
								}, {
									"case":	116,
									"scores":	[-5.346415224972028]
								}, {
									"case":	117,
									"scores":	[-5.346415224972028]
								}, {
									"case":	118,
									"scores":	[-5.346415224972028]
								}, {
									"case":	119,
									"scores":	[-5.346415224972028]
								}, {
									"case":	120,
									"scores":	[-5.346415224972028]
								}, {
									"case":	121,
									"scores":	[-5.346415224972028]
								}, {
									"case":	122,
									"scores":	[-5.346415224972028]
								}, {
									"case":	123,
									"scores":	[-5.346415224972028]
								}, {
									"case":	124,
									"scores":	[-5.346415224972028]
								}, {
									"case":	125,
									"scores":	[-5.346415224972028]
								}, {
									"case":	126,
									"scores":	[-5.346415224972028]
								}, {
									"case":	127,
									"scores":	[-5.346415224972028]
								}, {
									"case":	128,
									"scores":	[-5.346415224972028]
								}, {
									"case":	129,
									"scores":	[-5.346415224972028]
								}, {
									"case":	130,
									"scores":	[-5.346415224972028]
								}, {
									"case":	131,
									"scores":	[-5.346415224972028]
								}, {
									"case":	132,
									"scores":	[-5.346415224972028]
								}, {
									"case":	133,
									"scores":	[-5.346415224972028]
								}, {
									"case":	134,
									"scores":	[-5.346415224972028]
								}, {
									"case":	135,
									"scores":	[-5.346415224972028]
								}, {
									"case":	136,
									"scores":	[-5.346415224972028]
								}, {
									"case":	137,
									"scores":	[-5.346415224972028]
								}, {
									"case":	138,
									"scores":	[-5.346415224972028]
								}, {
									"case":	139,
									"scores":	[-5.346415224972028]
								}, {
									"case":	140,
									"scores":	[-5.346415224972028]
								}, {
									"case":	141,
									"scores":	[-5.346415224972028]
								}, {
									"case":	142,
									"scores":	[-5.346415224972028]
								}, {
									"case":	143,
									"scores":	[-5.346415224972028]
								}, {
									"case":	144,
									"scores":	[-5.346415224972028]
								}, {
									"case":	145,
									"scores":	[-5.346415224972028]
								}, {
									"case":	146,
									"scores":	[-5.346415224972028]
								}, {
									"case":	147,
									"scores":	[-5.346415224972028]
								}, {
									"case":	148,
									"scores":	[-5.346415224972028]
								}, {
									"case":	149,
									"scores":	[-5.346415224972028]
								}, {
									"case":	150,
									"scores":	[-5.346415224972028]
								}, {
									"case":	151,
									"scores":	[-5.346415224972028]
								}, {
									"case":	152,
									"scores":	[-5.346415224972028]
								}, {
									"case":	153,
									"scores":	[-5.346415224972028]
								}, {
									"case":	154,
									"scores":	[-5.346415224972028]
								}, {
									"case":	155,
									"scores":	[-5.346415224972028]
								}, {
									"case":	156,
									"scores":	[-5.346415224972028]
								}, {
									"case":	157,
									"scores":	[-5.346415224972028]
								}, {
									"case":	158,
									"scores":	[-5.346415224972028]
								}, {
									"case":	159,
									"scores":	[-5.346415224972028]
								}, {
									"case":	160,
									"scores":	[-5.346415224972028]
								}, {
									"case":	161,
									"scores":	[-5.346415224972028]
								}, {
									"case":	162,
									"scores":	[-5.346415224972028]
								}, {
									"case":	163,
									"scores":	[-5.346415224972028]
								}, {
									"case":	164,
									"scores":	[-5.346415224972028]
								}, {
									"case":	165,
									"scores":	[-5.346415224972028]
								}, {
									"case":	166,
									"scores":	[-5.346415224972028]
								}, {
									"case":	167,
									"scores":	[-5.346415224972028]
								}, {
									"case":	168,
									"scores":	[-5.346415224972028]
								}, {
									"case":	169,
									"scores":	[-5.346415224972028]
								}, {
									"case":	170,
									"scores":	[-5.346415224972028]
								}, {
									"case":	171,
									"scores":	[-5.346415224972028]
								}, {
									"case":	172,
									"scores":	[-5.346415224972028]
								}, {
									"case":	173,
									"scores":	[-5.346415224972028]
								}, {
									"case":	174,
									"scores":	[-5.346415224972028]
								}, {
									"case":	175,
									"scores":	[-5.346415224972028]
								}, {
									"case":	176,
									"scores":	[-5.346415224972028]
								}, {
									"case":	177,
									"scores":	[-5.346415224972028]
								}, {
									"case":	178,
									"scores":	[-5.346415224972028]
								}, {
									"case":	179,
									"scores":	[-5.346415224972028]
								}, {
									"case":	180,
									"scores":	[-5.346415224972028]
								}, {
									"case":	181,
									"scores":	[-5.346415224972028]
								}, {
									"case":	182,
									"scores":	[-5.346415224972028]
								}, {
									"case":	183,
									"scores":	[-5.346415224972028]
								}, {
									"case":	184,
									"scores":	[-5.346415224972028]
								}, {
									"case":	185,
									"scores":	[-5.346415224972028]
								}, {
									"case":	186,
									"scores":	[-5.346415224972028]
								}, {
									"case":	187,
									"scores":	[-5.346415224972028]
								}, {
									"case":	188,
									"scores":	[-5.346415224972028]
								}, {
									"case":	189,
									"scores":	[-5.346415224972028]
								}, {
									"case":	190,
									"scores":	[-5.346415224972028]
								}, {
									"case":	191,
									"scores":	[-5.346415224972028]
								}, {
									"case":	192,
									"scores":	[-5.346415224972028]
								}, {
									"case":	193,
									"scores":	[-5.346415224972028]
								}, {
									"case":	194,
									"scores":	[-5.346415224972028]
								}, {
									"case":	195,
									"scores":	[-5.346415224972028]
								}, {
									"case":	196,
									"scores":	[-5.346415224972028]
								}, {
									"case":	197,
									"scores":	[-5.346415224972028]
								}, {
									"case":	198,
									"scores":	[-5.346415224972028]
								}, {
									"case":	199,
									"scores":	[-5.346415224972028]
								}, {
									"case":	200,
									"scores":	[-5.346415224972028]
								}, {
									"case":	201,
									"scores":	[-5.346415224972028]
								}, {
									"case":	202,
									"scores":	[-5.346415224972028]
								}, {
									"case":	203,
									"scores":	[-5.346415224972028]
								}, {
									"case":	204,
									"scores":	[-5.346415224972028]
								}, {
									"case":	205,
									"scores":	[-5.346415224972028]
								}, {
									"case":	206,
									"scores":	[-5.346415224972028]
								}, {
									"case":	207,
									"scores":	[-5.346415224972028]
								}, {
									"case":	208,
									"scores":	[-5.346415224972028]
								}, {
									"case":	209,
									"scores":	[-5.346415224972028]
								}, {
									"case":	210,
									"scores":	[-5.346415224972028]
								}, {
									"case":	211,
									"scores":	[-5.346415224972028]
								}, {
									"case":	212,
									"scores":	[-5.346415224972028]
								}, {
									"case":	213,
									"scores":	[-5.346415224972028]
								}, {
									"case":	214,
									"scores":	[-5.346415224972028]
								}, {
									"case":	215,
									"scores":	[-5.346415224972028]
								}, {
									"case":	216,
									"scores":	[-5.346415224972028]
								}, {
									"case":	217,
									"scores":	[-5.346415224972028]
								}, {
									"case":	218,
									"scores":	[-5.346415224972028]
								}, {
									"case":	219,
									"scores":	[-5.346415224972028]
								}, {
									"case":	220,
									"scores":	[-5.346415224972028]
								}, {
									"case":	221,
									"scores":	[-5.346415224972028]
								}, {
									"case":	222,
									"scores":	[-5.346415224972028]
								}, {
									"case":	223,
									"scores":	[-5.346415224972028]
								}, {
									"case":	224,
									"scores":	[-5.346415224972028]
								}, {
									"case":	225,
									"scores":	[-5.346415224972028]
								}, {
									"case":	226,
									"scores":	[-5.346415224972028]
								}, {
									"case":	227,
									"scores":	[-5.346415224972028]
								}, {
									"case":	228,
									"scores":	[-5.346415224972028]
								}, {
									"case":	229,
									"scores":	[-5.346415224972028]
								}, {
									"case":	230,
									"scores":	[-5.346415224972028]
								}, {
									"case":	231,
									"scores":	[-5.346415224972028]
								}, {
									"case":	232,
									"scores":	[-5.346415224972028]
								}, {
									"case":	233,
									"scores":	[-5.346415224972028]
								}, {
									"case":	234,
									"scores":	[-5.346415224972028]
								}, {
									"case":	235,
									"scores":	[-5.346415224972028]
								}, {
									"case":	236,
									"scores":	[-5.346415224972028]
								}, {
									"case":	237,
									"scores":	[-5.346415224972028]
								}, {
									"case":	238,
									"scores":	[-5.346415224972028]
								}, {
									"case":	239,
									"scores":	[-5.346415224972028]
								}, {
									"case":	240,
									"scores":	[-5.346415224972028]
								}, {
									"case":	241,
									"scores":	[-5.346415224972028]
								}, {
									"case":	242,
									"scores":	[-5.346415224972028]
								}, {
									"case":	243,
									"scores":	[-5.346415224972028]
								}, {
									"case":	244,
									"scores":	[-5.346415224972028]
								}, {
									"case":	245,
									"scores":	[-5.346415224972028]
								}, {
									"case":	246,
									"scores":	[-5.346415224972028]
								}, {
									"case":	247,
									"scores":	[-5.346415224972028]
								}, {
									"case":	248,
									"scores":	[-5.346415224972028]
								}, {
									"case":	249,
									"scores":	[-5.346415224972028]
								}, {
									"case":	250,
									"scores":	[-5.346415224972028]
								}, {
									"case":	251,
									"scores":	[-5.346415224972028]
								}, {
									"case":	252,
									"scores":	[-5.346415224972028]
								}, {
									"case":	253,
									"scores":	[-5.346415224972028]
								}, {
									"case":	254,
									"scores":	[-5.346415224972028]
								}, {
									"case":	255,
									"scores":	[-5.346415224972028]
								}, {
									"case":	256,
									"scores":	[-5.346415224972028]
								}, {
									"case":	257,
									"scores":	[-5.346415224972028]
								}, {
									"case":	258,
									"scores":	[-5.346415224972028]
								}, {
									"case":	259,
									"scores":	[-5.346415224972028]
								}, {
									"case":	260,
									"scores":	[-9.36270278107203, -6.9889934823720283, -8.62958089737203, -9.7872144340720268, -8.491386202372027, -7.7147761763720286, -8.491386202372027, -7.7147761763720286, -9.71533488007203, -10.052355837072028, -9.00014705637203, -9.24618597017203, -9.21057260417203, -9.51960765637203, -9.51960765637203, -9.51960765637203, -9.51960765637203, -9.73049677337203, -9.7656465701720272, -9.51960765637203, -9.51960765637203, -9.51960765637203, -9.51960765637203, -9.51960765637203, -9.51960765637203, -9.51960765637203, -9.51960765637203, -9.51960765637203, -9.51960765637203, -9.51960765637203, -9.7656465701720272]
								}]
						}, {
							"switch":	50,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	3065,
							"begin_column":	2,
							"end_line":	3065,
							"end_column":	21,
							"patch_codes":	["if (!__is_neg(\"\", \"L3065\", 31, &(dateobj), sizeof (dateobj), &(d), sizeof (d), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time), sizeof (dateobj->time), &(m), sizeof (m), &(dateobj->time->m), sizeof (dateobj->time->m), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(return_value), sizeof (return_value), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    dateobj->time->d = d;\n", "{\n}\n", "dateobj->time->d = (-1)", "dateobj->time->d = (0 * d)", "dateobj->time->d = (0 * ht)", "dateobj->time->d = (0 * m)", "dateobj->time->d = (0 * return_value_used)", "dateobj->time->d = (0 * y)", "dateobj->time->d = (0)", "dateobj->time->d = (1)", "dateobj->time->d = (2)", "dateobj->time->d = (3)", "dateobj->time->d = (d != 0)", "dateobj->time->d = (d * ht)", "dateobj->time->d = (d * m)", "dateobj->time->d = (d * return_value_used)", "dateobj->time->d = (d * y)", "dateobj->time->d = (d + 0)", "dateobj->time->d = (d - 0)", "dateobj->time->d = (d == 0)", "dateobj->time->d = (d)", "dateobj->time->d = (dateobj != 0)", "dateobj->time->d = (dateobj == 0)", "dateobj->time->d = (ht != 0)", "dateobj->time->d = (ht != d)", "dateobj->time->d = (ht != m)", "dateobj->time->d = (ht != return_value_used)", "dateobj->time->d = (ht != y)", "dateobj->time->d = (ht * d)", "dateobj->time->d = (ht * m)", "dateobj->time->d = (ht * return_value_used)", "dateobj->time->d = (ht * y)", "dateobj->time->d = (ht + 0)", "dateobj->time->d = (ht + d)", "dateobj->time->d = (ht + m)", "dateobj->time->d = (ht + return_value_used)", "dateobj->time->d = (ht + y)", "dateobj->time->d = (ht - 0)", "dateobj->time->d = (ht - d)", "dateobj->time->d = (ht - m)", "dateobj->time->d = (ht - return_value_used)", "dateobj->time->d = (ht - y)", "dateobj->time->d = (ht == 0)", "dateobj->time->d = (ht == d)", "dateobj->time->d = (ht == m)", "dateobj->time->d = (ht == return_value_used)", "dateobj->time->d = (ht == y)", "dateobj->time->d = (m != 0)", "dateobj->time->d = (m != d)", "dateobj->time->d = (m * d)", "dateobj->time->d = (m * ht)", "dateobj->time->d = (m * return_value_used)", "dateobj->time->d = (m * y)", "dateobj->time->d = (m + 0)", "dateobj->time->d = (m + d)", "dateobj->time->d = (m - 0)", "dateobj->time->d = (m - d)", "dateobj->time->d = (m == 0)", "dateobj->time->d = (m == d)", "dateobj->time->d = (m)", "dateobj->time->d = (object != 0)", "dateobj->time->d = (object == 0)", "dateobj->time->d = (return_value != 0)", "dateobj->time->d = (return_value != object)", "dateobj->time->d = (return_value != this_ptr)", "dateobj->time->d = (return_value == 0)", "dateobj->time->d = (return_value == object)", "dateobj->time->d = (return_value == this_ptr)", "dateobj->time->d = (return_value_ptr != 0)", "dateobj->time->d = (return_value_ptr == 0)", "dateobj->time->d = (return_value_used != 0)", "dateobj->time->d = (return_value_used != d)", "dateobj->time->d = (return_value_used != m)", "dateobj->time->d = (return_value_used != y)", "dateobj->time->d = (return_value_used * d)", "dateobj->time->d = (return_value_used * ht)", "dateobj->time->d = (return_value_used * m)", "dateobj->time->d = (return_value_used * y)", "dateobj->time->d = (return_value_used + 0)", "dateobj->time->d = (return_value_used + d)", "dateobj->time->d = (return_value_used + m)", "dateobj->time->d = (return_value_used + y)", "dateobj->time->d = (return_value_used - 0)", "dateobj->time->d = (return_value_used - d)", "dateobj->time->d = (return_value_used - m)", "dateobj->time->d = (return_value_used - y)", "dateobj->time->d = (return_value_used == 0)", "dateobj->time->d = (return_value_used == d)", "dateobj->time->d = (return_value_used == m)", "dateobj->time->d = (return_value_used == y)", "dateobj->time->d = (this_ptr != 0)", "dateobj->time->d = (this_ptr != object)", "dateobj->time->d = (this_ptr == 0)", "dateobj->time->d = (this_ptr == object)", "dateobj->time->d = (y != 0)", "dateobj->time->d = (y != d)", "dateobj->time->d = (y != m)", "dateobj->time->d = (y * d)", "dateobj->time->d = (y * ht)", "dateobj->time->d = (y * m)", "dateobj->time->d = (y * return_value_used)", "dateobj->time->d = (y + 0)", "dateobj->time->d = (y + d)", "dateobj->time->d = (y + m)", "dateobj->time->d = (y - 0)", "dateobj->time->d = (y - d)", "dateobj->time->d = (y - m)", "dateobj->time->d = (y == 0)", "dateobj->time->d = (y == d)", "dateobj->time->d = (y == m)", "dateobj->time->d = (y)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.3745986333720284, -5.2388762949720276, -6.1255726159720281, -5.8199399044720277, -5.3632222849720277, -5.3779532349720283, -5.3632222849720277, -5.3779532349720283, -7.5510446818720283, -7.7023567828720285, -6.3419337849720279, -7.0998218849720285, -6.808728524972028, -6.2586300949720277, -6.2586300949720277, -6.2586300949720277, -6.2586300949720277, -6.7278900949720279, -7.0165181949720283, -6.2586300949720277, -6.2586300949720277, -6.2586300949720277, -6.2586300949720277, -6.2586300949720277, -6.2586300949720277, -6.2586300949720277, -6.2586300949720277, -6.2586300949720277, -6.2586300949720277, -6.2586300949720277, -7.0165181949720283]
								}, {
									"case":	2,
									"scores":	[-5.346415224972028]
								}, {
									"case":	3,
									"scores":	[-5.346415224972028]
								}, {
									"case":	4,
									"scores":	[-5.346415224972028]
								}, {
									"case":	5,
									"scores":	[-5.346415224972028]
								}, {
									"case":	6,
									"scores":	[-5.346415224972028]
								}, {
									"case":	7,
									"scores":	[-5.346415224972028]
								}, {
									"case":	8,
									"scores":	[-5.346415224972028]
								}, {
									"case":	9,
									"scores":	[-5.346415224972028]
								}, {
									"case":	10,
									"scores":	[-5.346415224972028]
								}, {
									"case":	11,
									"scores":	[-5.346415224972028]
								}, {
									"case":	12,
									"scores":	[-5.346415224972028]
								}, {
									"case":	13,
									"scores":	[-5.346415224972028]
								}, {
									"case":	14,
									"scores":	[-5.346415224972028]
								}, {
									"case":	15,
									"scores":	[-5.346415224972028]
								}, {
									"case":	16,
									"scores":	[-5.346415224972028]
								}, {
									"case":	17,
									"scores":	[-5.346415224972028]
								}, {
									"case":	18,
									"scores":	[-5.346415224972028]
								}, {
									"case":	19,
									"scores":	[-5.346415224972028]
								}, {
									"case":	20,
									"scores":	[-5.346415224972028]
								}, {
									"case":	21,
									"scores":	[-5.346415224972028]
								}, {
									"case":	22,
									"scores":	[-5.346415224972028]
								}, {
									"case":	23,
									"scores":	[-5.346415224972028]
								}, {
									"case":	24,
									"scores":	[-5.346415224972028]
								}, {
									"case":	25,
									"scores":	[-5.346415224972028]
								}, {
									"case":	26,
									"scores":	[-5.346415224972028]
								}, {
									"case":	27,
									"scores":	[-5.346415224972028]
								}, {
									"case":	28,
									"scores":	[-5.346415224972028]
								}, {
									"case":	29,
									"scores":	[-5.346415224972028]
								}, {
									"case":	30,
									"scores":	[-5.346415224972028]
								}, {
									"case":	31,
									"scores":	[-5.346415224972028]
								}, {
									"case":	32,
									"scores":	[-5.346415224972028]
								}, {
									"case":	33,
									"scores":	[-5.346415224972028]
								}, {
									"case":	34,
									"scores":	[-5.346415224972028]
								}, {
									"case":	35,
									"scores":	[-5.346415224972028]
								}, {
									"case":	36,
									"scores":	[-5.346415224972028]
								}, {
									"case":	37,
									"scores":	[-5.346415224972028]
								}, {
									"case":	38,
									"scores":	[-5.346415224972028]
								}, {
									"case":	39,
									"scores":	[-5.346415224972028]
								}, {
									"case":	40,
									"scores":	[-5.346415224972028]
								}, {
									"case":	41,
									"scores":	[-5.346415224972028]
								}, {
									"case":	42,
									"scores":	[-5.346415224972028]
								}, {
									"case":	43,
									"scores":	[-5.346415224972028]
								}, {
									"case":	44,
									"scores":	[-5.346415224972028]
								}, {
									"case":	45,
									"scores":	[-5.346415224972028]
								}, {
									"case":	46,
									"scores":	[-5.346415224972028]
								}, {
									"case":	47,
									"scores":	[-5.346415224972028]
								}, {
									"case":	48,
									"scores":	[-5.346415224972028]
								}, {
									"case":	49,
									"scores":	[-5.346415224972028]
								}, {
									"case":	50,
									"scores":	[-5.346415224972028]
								}, {
									"case":	51,
									"scores":	[-5.346415224972028]
								}, {
									"case":	52,
									"scores":	[-5.346415224972028]
								}, {
									"case":	53,
									"scores":	[-5.346415224972028]
								}, {
									"case":	54,
									"scores":	[-5.346415224972028]
								}, {
									"case":	55,
									"scores":	[-5.346415224972028]
								}, {
									"case":	56,
									"scores":	[-5.346415224972028]
								}, {
									"case":	57,
									"scores":	[-5.346415224972028]
								}, {
									"case":	58,
									"scores":	[-5.346415224972028]
								}, {
									"case":	59,
									"scores":	[-5.346415224972028]
								}, {
									"case":	60,
									"scores":	[-5.346415224972028]
								}, {
									"case":	61,
									"scores":	[-5.346415224972028]
								}, {
									"case":	62,
									"scores":	[-5.346415224972028]
								}, {
									"case":	63,
									"scores":	[-5.346415224972028]
								}, {
									"case":	64,
									"scores":	[-5.346415224972028]
								}, {
									"case":	65,
									"scores":	[-5.346415224972028]
								}, {
									"case":	66,
									"scores":	[-5.346415224972028]
								}, {
									"case":	67,
									"scores":	[-5.346415224972028]
								}, {
									"case":	68,
									"scores":	[-5.346415224972028]
								}, {
									"case":	69,
									"scores":	[-5.346415224972028]
								}, {
									"case":	70,
									"scores":	[-5.346415224972028]
								}, {
									"case":	71,
									"scores":	[-5.346415224972028]
								}, {
									"case":	72,
									"scores":	[-5.346415224972028]
								}, {
									"case":	73,
									"scores":	[-5.346415224972028]
								}, {
									"case":	74,
									"scores":	[-5.346415224972028]
								}, {
									"case":	75,
									"scores":	[-5.346415224972028]
								}, {
									"case":	76,
									"scores":	[-5.346415224972028]
								}, {
									"case":	77,
									"scores":	[-5.346415224972028]
								}, {
									"case":	78,
									"scores":	[-5.346415224972028]
								}, {
									"case":	79,
									"scores":	[-5.346415224972028]
								}, {
									"case":	80,
									"scores":	[-5.346415224972028]
								}, {
									"case":	81,
									"scores":	[-5.346415224972028]
								}, {
									"case":	82,
									"scores":	[-5.346415224972028]
								}, {
									"case":	83,
									"scores":	[-5.346415224972028]
								}, {
									"case":	84,
									"scores":	[-5.346415224972028]
								}, {
									"case":	85,
									"scores":	[-5.346415224972028]
								}, {
									"case":	86,
									"scores":	[-5.346415224972028]
								}, {
									"case":	87,
									"scores":	[-5.346415224972028]
								}, {
									"case":	88,
									"scores":	[-5.346415224972028]
								}, {
									"case":	89,
									"scores":	[-5.346415224972028]
								}, {
									"case":	90,
									"scores":	[-5.346415224972028]
								}, {
									"case":	91,
									"scores":	[-5.346415224972028]
								}, {
									"case":	92,
									"scores":	[-5.346415224972028]
								}, {
									"case":	93,
									"scores":	[-5.346415224972028]
								}, {
									"case":	94,
									"scores":	[-5.346415224972028]
								}, {
									"case":	95,
									"scores":	[-5.346415224972028]
								}, {
									"case":	96,
									"scores":	[-5.346415224972028]
								}, {
									"case":	97,
									"scores":	[-5.346415224972028]
								}, {
									"case":	98,
									"scores":	[-5.346415224972028]
								}, {
									"case":	99,
									"scores":	[-5.346415224972028]
								}, {
									"case":	100,
									"scores":	[-5.346415224972028]
								}, {
									"case":	101,
									"scores":	[-5.346415224972028]
								}, {
									"case":	102,
									"scores":	[-5.346415224972028]
								}, {
									"case":	103,
									"scores":	[-5.346415224972028]
								}, {
									"case":	104,
									"scores":	[-5.346415224972028]
								}, {
									"case":	105,
									"scores":	[-5.346415224972028]
								}, {
									"case":	106,
									"scores":	[-5.346415224972028]
								}, {
									"case":	107,
									"scores":	[-5.346415224972028]
								}, {
									"case":	108,
									"scores":	[-5.346415224972028]
								}, {
									"case":	109,
									"scores":	[-5.346415224972028]
								}, {
									"case":	110,
									"scores":	[-5.346415224972028]
								}, {
									"case":	111,
									"scores":	[-5.346415224972028]
								}]
						}]
				}, {
					"line":	3065,
					"switches":	[{
							"switch":	51,
							"types":	[[], [], [], [], [260], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [], [], [], [175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174], [], [], [], [], [], []],
							"begin_line":	3066,
							"begin_column":	0,
							"end_line":	3066,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->d = (-1)", "dateobj->time->d = (0)", "dateobj->time->d = (1)", "dateobj->time->d = (2)", "dateobj->time->d = (3)", "dateobj->time->m = (-1)", "dateobj->time->m = (0)", "dateobj->time->m = (1)", "dateobj->time->m = (2)", "dateobj->time->m = (3)", "dateobj->time->y = (-1)", "dateobj->time->y = (0)", "dateobj->time->y = (1)", "dateobj->time->y = (2)", "dateobj->time->y = (3)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((dateobj), 0, sizeof(php_date_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->d = d", "dateobj->time->m = m", "dateobj->time->y = y", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3066\", 31, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(d), sizeof (d), &(dateobj->time->d), sizeof (dateobj->time->d), &(return_value), sizeof (return_value), &(object), sizeof (object), &(m), sizeof (m), &(dateobj->time->m), sizeof (dateobj->time->m), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	2,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	3,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	4,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	5,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	6,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	7,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	8,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	9,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	10,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	11,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	12,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	13,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	14,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	15,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	16,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	17,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	18,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	19,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	20,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	21,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	22,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	23,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	24,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	25,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	26,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	27,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	28,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	29,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	30,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	31,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	32,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	33,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	34,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	35,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	36,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	37,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	38,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	39,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	40,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	41,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	42,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	43,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	44,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	45,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	46,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	47,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	48,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	49,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	50,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	51,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	52,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	53,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	54,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	55,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	56,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	57,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	58,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	59,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	60,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	61,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	62,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	63,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	64,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	65,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	66,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	67,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	68,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	69,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	70,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	71,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	72,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	73,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	74,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	75,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	76,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	77,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	78,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	79,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	80,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	81,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	82,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	83,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	84,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	85,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	86,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	87,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	88,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	89,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	90,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	91,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	92,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	93,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	94,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	95,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	96,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	97,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	98,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	99,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	100,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	101,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	102,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	103,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	104,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	105,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	106,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	107,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	108,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	109,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	110,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	111,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	112,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	113,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	114,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	115,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	116,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	117,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	118,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	119,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	120,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	121,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	122,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	123,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	124,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	125,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	126,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	127,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	128,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	129,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	130,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	131,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	132,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	133,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	134,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	135,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	136,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	137,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	138,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	139,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	140,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	141,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	142,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	143,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	144,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	145,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	146,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	147,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	148,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	149,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	150,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	151,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	152,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	153,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	154,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	155,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	156,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	157,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	158,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	159,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	160,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	161,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	162,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	163,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	164,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	165,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	166,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	167,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	168,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	169,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	170,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	171,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	172,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	173,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	174,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	175,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	176,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	177,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	178,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	179,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	180,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	181,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	182,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	183,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	184,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	185,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	186,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	187,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	188,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	189,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	190,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	191,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	192,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	193,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	194,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	195,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	196,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	197,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	198,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	199,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	200,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	201,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	202,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	203,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	204,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	205,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	206,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	207,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	208,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	209,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	210,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	211,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	212,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	213,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	214,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	215,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	216,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	217,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	218,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	219,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	220,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	221,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	222,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	223,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	224,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	225,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	226,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	227,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	228,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	229,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	230,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	231,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	232,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	233,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	234,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	235,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	236,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	237,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	238,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	239,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	240,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	241,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	242,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	243,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	244,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	245,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	246,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	247,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	248,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	249,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	250,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	251,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	252,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	253,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	254,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	255,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	256,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	257,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	258,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	259,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	260,
									"scores":	[-10.12751725175451, -8.69277911385451, -7.9526382950545074, -7.1760282690545081, -9.17658697275451, -9.51360792975451, -7.9526382950545074, -7.1760282690545081, -7.9526382950545074, -7.1760282690545081, -8.46139914905451, -8.70743806285451, -8.67182469685451, -8.98085974905451, -8.98085974905451, -8.98085974905451, -8.98085974905451, -9.19174886605451, -9.22689866285451, -8.98085974905451, -8.98085974905451, -8.98085974905451, -8.98085974905451, -8.98085974905451, -8.98085974905451, -8.98085974905451, -8.98085974905451, -8.98085974905451, -8.98085974905451, -8.98085974905451, -9.22689866285451]
								}]
						}, {
							"switch":	52,
							"types":	[[], [], [1], [], [], [], [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10], [], [], [11]],
							"begin_line":	3066,
							"begin_column":	2,
							"end_line":	3066,
							"end_column":	39,
							"patch_codes":	["if (!__is_neg(\"\", \"L3066\", 31, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(d), sizeof (d), &(dateobj->time->d), sizeof (dateobj->time->d), &(return_value), sizeof (return_value), &(object), sizeof (object), &(m), sizeof (m), &(dateobj->time->m), sizeof (dateobj->time->m), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    timelib_update_ts(dateobj->time, ((void *)0));\n", "timelib_fill_holes(dateobj->time, ((void *)0), -1)", "timelib_fill_holes(dateobj->time, ((void *)0), 0)", "timelib_fill_holes(dateobj->time, ((void *)0), 1)", "timelib_fill_holes(dateobj->time, ((void *)0), 2)", "timelib_fill_holes(dateobj->time, ((void *)0), 3)", "timelib_fill_holes(dateobj->time, ((void *)0), ht)", "timelib_fill_holes(dateobj->time, ((void *)0), le_index_ptr)", "timelib_fill_holes(dateobj->time, ((void *)0), php_date_global_timezone_db_enabled)", "timelib_fill_holes(dateobj->time, ((void *)0), return_value_used)", "{\n}\n", "Debug(dateobj->time, ((void *)0))", "php_printf(dateobj->time, ((void *)0))", "printf(dateobj->time, ((void *)0))", "timelib_date_to_int(dateobj->time, ((void *)0))", "timelib_diff(dateobj->time, ((void *)0))", "timelib_do_rel_normalize(dateobj->time, ((void *)0))", "timelib_set_timezone(dateobj->time, ((void *)0))", "timelib_time_tz_abbr_update(dateobj->time, ((void *)0))", "timelib_time_tz_name_update(dateobj->time, ((void *)0))", "wprintf(dateobj->time, ((void *)0))", "timelib_update_ts((&d)->time, ((void *)0))", "timelib_update_ts((&dateobj)->time, ((void *)0))", "timelib_update_ts((&ht)->time, ((void *)0))", "timelib_update_ts((&m)->time, ((void *)0))", "timelib_update_ts((&object)->time, ((void *)0))", "timelib_update_ts((&return_value)->time, ((void *)0))", "timelib_update_ts((&return_value_ptr)->time, ((void *)0))", "timelib_update_ts((&return_value_used)->time, ((void *)0))", "timelib_update_ts((&this_ptr)->time, ((void *)0))", "timelib_update_ts((&y)->time, ((void *)0))", "timelib_update_ts((dateobj)->time, ((void *)0))", "timelib_update_ts(dateobj->time, ((void *)0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.928634868154508, -7.9349836781545084, -7.12389857765451, -7.1386295276545084, -8.21074268455451, -8.62013918555451, -7.12389857765451, -7.1386295276545084, -7.12389857765451, -7.1386295276545084, -8.10261007765451, -8.86049817765451, -8.56940481765451, -8.01930638765451, -8.01930638765451, -8.01930638765451, -8.01930638765451, -8.48856638765451, -8.77719448765451, -8.01930638765451, -8.01930638765451, -8.01930638765451, -8.01930638765451, -8.01930638765451, -8.01930638765451, -8.01930638765451, -8.01930638765451, -8.01930638765451, -8.01930638765451, -8.01930638765451, -8.77719448765451]
								}, {
									"case":	2,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	3,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	4,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	5,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	6,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	7,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	8,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	9,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	10,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	11,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	12,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	13,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	14,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	15,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	16,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	17,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	18,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	19,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	20,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	21,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	22,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	23,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	24,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	25,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	26,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	27,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	28,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	29,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	30,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	31,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	32,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	33,
									"scores":	[-5.3262125176545085]
								}]
						}]
				}, {
					"line":	3076,
					"switches":	[]
				}, {
					"line":	3077,
					"switches":	[]
				}, {
					"line":	3078,
					"switches":	[]
				}, {
					"line":	3080,
					"switches":	[{
							"switch":	53,
							"types":	[[], [], [], [], [285], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [], [], [], [198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284], [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197], [], [], [], [], [], []],
							"begin_line":	3081,
							"begin_column":	0,
							"end_line":	3081,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->d = (-1)", "dateobj->time->d = (0)", "dateobj->time->d = (1)", "dateobj->time->d = (2)", "dateobj->time->d = (3)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->m = (-1)", "dateobj->time->m = (0)", "dateobj->time->m = (1)", "dateobj->time->m = (2)", "dateobj->time->m = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->y = (-1)", "dateobj->time->y = (0)", "dateobj->time->y = (1)", "dateobj->time->y = (2)", "dateobj->time->y = (3)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((dateobj), 0, sizeof(php_date_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->d = 1", "dateobj->time->have_relative = 1", "dateobj->time->m = 1", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, d)", "dateobj->time->y = y", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3081\", 44, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(y), sizeof (y), &(w), sizeof (w), &(d), sizeof (d), &(date_ce_date), sizeof (date_ce_date), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.9019556639866]
								}, {
									"case":	2,
									"scores":	[-4.9019556639866]
								}, {
									"case":	3,
									"scores":	[-4.9019556639866]
								}, {
									"case":	4,
									"scores":	[-4.9019556639866]
								}, {
									"case":	5,
									"scores":	[-4.9019556639866]
								}, {
									"case":	6,
									"scores":	[-4.9019556639866]
								}, {
									"case":	7,
									"scores":	[-4.9019556639866]
								}, {
									"case":	8,
									"scores":	[-4.9019556639866]
								}, {
									"case":	9,
									"scores":	[-4.9019556639866]
								}, {
									"case":	10,
									"scores":	[-4.9019556639866]
								}, {
									"case":	11,
									"scores":	[-4.9019556639866]
								}, {
									"case":	12,
									"scores":	[-4.9019556639866]
								}, {
									"case":	13,
									"scores":	[-4.9019556639866]
								}, {
									"case":	14,
									"scores":	[-4.9019556639866]
								}, {
									"case":	15,
									"scores":	[-4.9019556639866]
								}, {
									"case":	16,
									"scores":	[-4.9019556639866]
								}, {
									"case":	17,
									"scores":	[-4.9019556639866]
								}, {
									"case":	18,
									"scores":	[-4.9019556639866]
								}, {
									"case":	19,
									"scores":	[-4.9019556639866]
								}, {
									"case":	20,
									"scores":	[-4.9019556639866]
								}, {
									"case":	21,
									"scores":	[-4.9019556639866]
								}, {
									"case":	22,
									"scores":	[-4.9019556639866]
								}, {
									"case":	23,
									"scores":	[-4.9019556639866]
								}, {
									"case":	24,
									"scores":	[-4.9019556639866]
								}, {
									"case":	25,
									"scores":	[-4.9019556639866]
								}, {
									"case":	26,
									"scores":	[-4.9019556639866]
								}, {
									"case":	27,
									"scores":	[-4.9019556639866]
								}, {
									"case":	28,
									"scores":	[-4.9019556639866]
								}, {
									"case":	29,
									"scores":	[-4.9019556639866]
								}, {
									"case":	30,
									"scores":	[-4.9019556639866]
								}, {
									"case":	31,
									"scores":	[-4.9019556639866]
								}, {
									"case":	32,
									"scores":	[-4.9019556639866]
								}, {
									"case":	33,
									"scores":	[-4.9019556639866]
								}, {
									"case":	34,
									"scores":	[-4.9019556639866]
								}, {
									"case":	35,
									"scores":	[-4.9019556639866]
								}, {
									"case":	36,
									"scores":	[-4.9019556639866]
								}, {
									"case":	37,
									"scores":	[-4.9019556639866]
								}, {
									"case":	38,
									"scores":	[-4.9019556639866]
								}, {
									"case":	39,
									"scores":	[-4.9019556639866]
								}, {
									"case":	40,
									"scores":	[-4.9019556639866]
								}, {
									"case":	41,
									"scores":	[-4.9019556639866]
								}, {
									"case":	42,
									"scores":	[-4.9019556639866]
								}, {
									"case":	43,
									"scores":	[-4.9019556639866]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	166,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	167,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	168,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	169,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	170,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	171,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	172,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	173,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	174,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	175,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	176,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	177,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	178,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	179,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	180,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	181,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	182,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	183,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	184,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	185,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	186,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	187,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	188,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	189,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	190,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	191,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	192,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	193,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	194,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	195,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	196,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	197,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	198,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	199,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	200,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	201,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	202,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	203,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	204,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	205,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	206,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	207,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	208,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	209,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	210,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	211,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	212,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	213,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	214,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	215,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	216,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	217,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	218,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	219,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	220,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	221,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	222,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	223,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	224,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	225,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	226,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	227,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	228,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	229,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	230,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	231,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	232,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	233,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	234,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	235,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	236,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	237,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	238,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	239,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	240,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	241,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	242,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	243,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	244,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	245,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	246,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	247,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	248,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	249,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	250,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	251,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	252,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	253,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	254,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	255,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	256,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	257,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	258,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	259,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	260,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	261,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	262,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	263,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	264,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	265,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	266,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	267,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	268,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	269,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	270,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	271,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	272,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	273,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	274,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	275,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	276,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	277,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	278,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	279,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	280,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	281,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	282,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	283,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	284,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	285,
									"scores":	[-8.0795790649866, -8.3256179787866, -8.7127825307866, -9.1418299639866, -8.8842447899866, -9.1418299639866, -8.2900046127866, -9.1809259477866, -9.9789303246866, -9.4543476339866, -9.6652367509866, -8.9534126339866, -9.7003865477866, -9.4543476339866, -9.4543476339866, -9.6652367509866, -9.6652367509866, -9.6652367509866, -9.4543476339866, -9.4543476339866, -9.6652367509866, -9.6652367509866, -9.6652367509866, -9.6652367509866, -9.6652367509866, -9.6652367509866, -9.6652367509866, -9.6652367509866, -9.6652367509866, -9.6652367509866, -9.6652367509866, -9.6652367509866, -9.4543476339866, -9.4543476339866, -9.4543476339866, -9.4543476339866, -9.4543476339866, -9.4543476339866, -9.6652367509866, -9.4543476339866, -9.6652367509866, -9.4543476339866, -9.6652367509866, -9.6652367509866]
								}]
						}, {
							"switch":	54,
							"types":	[[6], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5], []],
							"begin_line":	3081,
							"begin_column":	2,
							"end_line":	3083,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L3081\", 44, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(y), sizeof (y), &(w), sizeof (w), &(d), sizeof (d), &(date_ce_date), sizeof (date_ce_date), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences))) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((zend_parse_method_parameters((ht), (this_ptr), \"Oll|l\", &object, date_ce_date, &y, &w, &d) == -1) || __is_neg(\"\", \"L3081\", 44, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(y), sizeof (y), &(w), sizeof (w), &(d), sizeof (d), &(date_ce_date), sizeof (date_ce_date), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences))) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if (dprintf((ht), (this_ptr), \"Oll|l\", &object, date_ce_date, &y, &w, &d) == -1) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if (zend_get_parameters_ex((ht), (this_ptr), \"Oll|l\", &object, date_ce_date, &y, &w, &d) == -1) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if (zend_parse_parameters((ht), (this_ptr), \"Oll|l\", &object, date_ce_date, &y, &w, &d) == -1) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((zend_parse_method_parameters((ht), (this_ptr), \"Oll|l\", &object, date_ce_date, &y, &w, &d) == -1) && !__is_neg(\"\", \"L3081\", 44, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(y), sizeof (y), &(w), sizeof (w), &(d), sizeof (d), &(date_ce_date), sizeof (date_ce_date), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences))) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.1765470644281444, -2.9344351644281446, -2.2203285334281446, -2.1402806644281438, -1.826482964428144, -2.1402806644281438, -2.6433418044281445, -3.6478704644281446, -3.624177343328145, -2.8066786744281447, -3.2759386744281449, -2.4846676444281446, -3.5645667744281448, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -2.8066786744281447, -3.2759386744281449, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449]
								}, {
									"case":	2,
									"scores":	[-5.1908269103281466, -5.9487150103281463, -5.2346083793281455, -5.154560510328146, -4.8407628103281457, -5.154560510328146, -5.6576216503281467, -6.6621503103281468, -6.6384571892281459, -5.820958520328146, -6.2902185203281462, -5.4989474903281463, -6.5788466203281466, -5.820958520328146, -5.820958520328146, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -5.820958520328146, -5.820958520328146, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -5.820958520328146, -5.820958520328146, -5.820958520328146, -5.820958520328146, -5.820958520328146, -5.820958520328146, -6.2902185203281462, -5.820958520328146, -6.2902185203281462, -5.820958520328146, -6.2902185203281462, -6.2902185203281462]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-5.1908269103281466, -5.9487150103281463, -5.2346083793281455, -5.154560510328146, -4.8407628103281457, -5.154560510328146, -5.6576216503281467, -6.6621503103281468, -6.6384571892281459, -5.820958520328146, -6.2902185203281462, -5.4989474903281463, -6.5788466203281466, -5.820958520328146, -5.820958520328146, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -5.820958520328146, -5.820958520328146, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -6.2902185203281462, -5.820958520328146, -5.820958520328146, -5.820958520328146, -5.820958520328146, -5.820958520328146, -5.820958520328146, -6.2902185203281462, -5.820958520328146, -6.2902185203281462, -5.820958520328146, -6.2902185203281462, -6.2902185203281462]
								}]
						}, {
							"switch":	55,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	3081,
							"begin_column":	2,
							"end_line":	3083,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L3081\", 44, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(y), sizeof (y), &(w), sizeof (w), &(d), sizeof (d), &(date_ce_date), sizeof (date_ce_date), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences)))\n    if (zend_parse_method_parameters((ht), (this_ptr), \"Oll|l\", &object, date_ce_date, &y, &w, &d) == -1) {\n        {\n            do {\n                zval *__z = (return_value);\n                (*__z).value.lval = ((0) != 0);\n                (*__z).type = 3;\n            } while (0);\n            return;\n        }\n        ;\n    }\n", "if (!__is_neg(\"\", \"L3081\", 44, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(y), sizeof (y), &(w), sizeof (w), &(d), sizeof (d), &(date_ce_date), sizeof (date_ce_date), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences)) && (zend_parse_method_parameters((ht), (this_ptr), \"Oll|l\", &object, date_ce_date, &y, &w, &d) == -1)) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.2253035239866, -6.9831916239866, -6.2690849929866, -6.1890371239866, -5.8752394239866, -6.1890371239866, -6.6920982639866, -7.6966269239866, -7.6729338028866, -6.8554351339866, -7.3246951339866, -6.5334241039866, -7.6133232339866, -6.8554351339866, -6.8554351339866, -7.3246951339866, -7.3246951339866, -7.3246951339866, -6.8554351339866, -6.8554351339866, -7.3246951339866, -7.3246951339866, -7.3246951339866, -7.3246951339866, -7.3246951339866, -7.3246951339866, -7.3246951339866, -7.3246951339866, -7.3246951339866, -7.3246951339866, -7.3246951339866, -7.3246951339866, -6.8554351339866, -6.8554351339866, -6.8554351339866, -6.8554351339866, -6.8554351339866, -6.8554351339866, -7.3246951339866, -6.8554351339866, -7.3246951339866, -6.8554351339866, -7.3246951339866, -7.3246951339866]
								}, {
									"case":	2,
									"scores":	[-7.3584714588866, -8.1163595588866, -7.4022529278866, -7.3222050588866, -7.0084073588866, -7.3222050588866, -7.8252661988866, -8.8297948588866, -8.8061017377866, -7.9886030688866, -8.4578630688866, -7.6665920388866, -8.7464911688866, -7.9886030688866, -7.9886030688866, -8.4578630688866, -8.4578630688866, -8.4578630688866, -7.9886030688866, -7.9886030688866, -8.4578630688866, -8.4578630688866, -8.4578630688866, -8.4578630688866, -8.4578630688866, -8.4578630688866, -8.4578630688866, -8.4578630688866, -8.4578630688866, -8.4578630688866, -8.4578630688866, -8.4578630688866, -7.9886030688866, -7.9886030688866, -7.9886030688866, -7.9886030688866, -7.9886030688866, -7.9886030688866, -8.4578630688866, -7.9886030688866, -8.4578630688866, -7.9886030688866, -8.4578630688866, -8.4578630688866]
								}]
						}]
				}, {
					"line":	3083,
					"switches":	[{
							"switch":	56,
							"types":	[[], [], [], [], [286], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [], [], [], [199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285], [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], [], [], [], [], [], []],
							"begin_line":	3084,
							"begin_column":	0,
							"end_line":	3084,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->d = (-1)", "dateobj->time->d = (0)", "dateobj->time->d = (1)", "dateobj->time->d = (2)", "dateobj->time->d = (3)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->m = (-1)", "dateobj->time->m = (0)", "dateobj->time->m = (1)", "dateobj->time->m = (2)", "dateobj->time->m = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->y = (-1)", "dateobj->time->y = (0)", "dateobj->time->y = (1)", "dateobj->time->y = (2)", "dateobj->time->y = (3)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((dateobj), 0, sizeof(php_date_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->d = 1", "dateobj->time->have_relative = 1", "dateobj->time->m = 1", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, d)", "dateobj->time->y = y", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3084\", 31, &(object), sizeof (object), &(dateobj), sizeof (dateobj), &(return_value), sizeof (return_value), &(dateobj->time), sizeof (dateobj->time), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(w), sizeof (w), &(d), sizeof (d), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.659523176176366]
								}, {
									"case":	2,
									"scores":	[-4.659523176176366]
								}, {
									"case":	3,
									"scores":	[-4.659523176176366]
								}, {
									"case":	4,
									"scores":	[-4.659523176176366]
								}, {
									"case":	5,
									"scores":	[-4.659523176176366]
								}, {
									"case":	6,
									"scores":	[-4.659523176176366]
								}, {
									"case":	7,
									"scores":	[-4.659523176176366]
								}, {
									"case":	8,
									"scores":	[-4.659523176176366]
								}, {
									"case":	9,
									"scores":	[-4.659523176176366]
								}, {
									"case":	10,
									"scores":	[-4.659523176176366]
								}, {
									"case":	11,
									"scores":	[-4.659523176176366]
								}, {
									"case":	12,
									"scores":	[-4.659523176176366]
								}, {
									"case":	13,
									"scores":	[-4.659523176176366]
								}, {
									"case":	14,
									"scores":	[-4.659523176176366]
								}, {
									"case":	15,
									"scores":	[-4.659523176176366]
								}, {
									"case":	16,
									"scores":	[-4.659523176176366]
								}, {
									"case":	17,
									"scores":	[-4.659523176176366]
								}, {
									"case":	18,
									"scores":	[-4.659523176176366]
								}, {
									"case":	19,
									"scores":	[-4.659523176176366]
								}, {
									"case":	20,
									"scores":	[-4.659523176176366]
								}, {
									"case":	21,
									"scores":	[-4.659523176176366]
								}, {
									"case":	22,
									"scores":	[-4.659523176176366]
								}, {
									"case":	23,
									"scores":	[-4.659523176176366]
								}, {
									"case":	24,
									"scores":	[-4.659523176176366]
								}, {
									"case":	25,
									"scores":	[-4.659523176176366]
								}, {
									"case":	26,
									"scores":	[-4.659523176176366]
								}, {
									"case":	27,
									"scores":	[-4.659523176176366]
								}, {
									"case":	28,
									"scores":	[-4.659523176176366]
								}, {
									"case":	29,
									"scores":	[-4.659523176176366]
								}, {
									"case":	30,
									"scores":	[-4.659523176176366]
								}, {
									"case":	31,
									"scores":	[-4.659523176176366]
								}, {
									"case":	32,
									"scores":	[-4.659523176176366]
								}, {
									"case":	33,
									"scores":	[-4.659523176176366]
								}, {
									"case":	34,
									"scores":	[-4.659523176176366]
								}, {
									"case":	35,
									"scores":	[-4.659523176176366]
								}, {
									"case":	36,
									"scores":	[-4.659523176176366]
								}, {
									"case":	37,
									"scores":	[-4.659523176176366]
								}, {
									"case":	38,
									"scores":	[-4.659523176176366]
								}, {
									"case":	39,
									"scores":	[-4.659523176176366]
								}, {
									"case":	40,
									"scores":	[-4.659523176176366]
								}, {
									"case":	41,
									"scores":	[-4.659523176176366]
								}, {
									"case":	42,
									"scores":	[-4.659523176176366]
								}, {
									"case":	43,
									"scores":	[-4.659523176176366]
								}, {
									"case":	44,
									"scores":	[-4.659523176176366]
								}, {
									"case":	45,
									"scores":	[-4.659523176176366]
								}, {
									"case":	46,
									"scores":	[-4.659523176176366]
								}, {
									"case":	47,
									"scores":	[-4.659523176176366]
								}, {
									"case":	48,
									"scores":	[-4.659523176176366]
								}, {
									"case":	49,
									"scores":	[-4.659523176176366]
								}, {
									"case":	50,
									"scores":	[-4.659523176176366]
								}, {
									"case":	51,
									"scores":	[-4.659523176176366]
								}, {
									"case":	52,
									"scores":	[-4.659523176176366]
								}, {
									"case":	53,
									"scores":	[-4.659523176176366]
								}, {
									"case":	54,
									"scores":	[-4.659523176176366]
								}, {
									"case":	55,
									"scores":	[-4.659523176176366]
								}, {
									"case":	56,
									"scores":	[-4.659523176176366]
								}, {
									"case":	57,
									"scores":	[-4.659523176176366]
								}, {
									"case":	58,
									"scores":	[-4.659523176176366]
								}, {
									"case":	59,
									"scores":	[-4.659523176176366]
								}, {
									"case":	60,
									"scores":	[-4.659523176176366]
								}, {
									"case":	61,
									"scores":	[-4.659523176176366]
								}, {
									"case":	62,
									"scores":	[-4.659523176176366]
								}, {
									"case":	63,
									"scores":	[-4.659523176176366]
								}, {
									"case":	64,
									"scores":	[-4.659523176176366]
								}, {
									"case":	65,
									"scores":	[-4.659523176176366]
								}, {
									"case":	66,
									"scores":	[-4.659523176176366]
								}, {
									"case":	67,
									"scores":	[-4.659523176176366]
								}, {
									"case":	68,
									"scores":	[-4.659523176176366]
								}, {
									"case":	69,
									"scores":	[-4.659523176176366]
								}, {
									"case":	70,
									"scores":	[-4.659523176176366]
								}, {
									"case":	71,
									"scores":	[-4.659523176176366]
								}, {
									"case":	72,
									"scores":	[-4.659523176176366]
								}, {
									"case":	73,
									"scores":	[-4.659523176176366]
								}, {
									"case":	74,
									"scores":	[-4.659523176176366]
								}, {
									"case":	75,
									"scores":	[-4.659523176176366]
								}, {
									"case":	76,
									"scores":	[-4.659523176176366]
								}, {
									"case":	77,
									"scores":	[-4.659523176176366]
								}, {
									"case":	78,
									"scores":	[-4.659523176176366]
								}, {
									"case":	79,
									"scores":	[-4.659523176176366]
								}, {
									"case":	80,
									"scores":	[-4.659523176176366]
								}, {
									"case":	81,
									"scores":	[-4.659523176176366]
								}, {
									"case":	82,
									"scores":	[-4.659523176176366]
								}, {
									"case":	83,
									"scores":	[-4.659523176176366]
								}, {
									"case":	84,
									"scores":	[-4.659523176176366]
								}, {
									"case":	85,
									"scores":	[-4.659523176176366]
								}, {
									"case":	86,
									"scores":	[-4.659523176176366]
								}, {
									"case":	87,
									"scores":	[-4.659523176176366]
								}, {
									"case":	88,
									"scores":	[-4.659523176176366]
								}, {
									"case":	89,
									"scores":	[-4.659523176176366]
								}, {
									"case":	90,
									"scores":	[-4.659523176176366]
								}, {
									"case":	91,
									"scores":	[-4.659523176176366]
								}, {
									"case":	92,
									"scores":	[-4.659523176176366]
								}, {
									"case":	93,
									"scores":	[-4.659523176176366]
								}, {
									"case":	94,
									"scores":	[-4.659523176176366]
								}, {
									"case":	95,
									"scores":	[-4.659523176176366]
								}, {
									"case":	96,
									"scores":	[-4.659523176176366]
								}, {
									"case":	97,
									"scores":	[-4.659523176176366]
								}, {
									"case":	98,
									"scores":	[-4.659523176176366]
								}, {
									"case":	99,
									"scores":	[-4.659523176176366]
								}, {
									"case":	100,
									"scores":	[-4.659523176176366]
								}, {
									"case":	101,
									"scores":	[-4.659523176176366]
								}, {
									"case":	102,
									"scores":	[-4.659523176176366]
								}, {
									"case":	103,
									"scores":	[-4.659523176176366]
								}, {
									"case":	104,
									"scores":	[-4.659523176176366]
								}, {
									"case":	105,
									"scores":	[-4.659523176176366]
								}, {
									"case":	106,
									"scores":	[-4.659523176176366]
								}, {
									"case":	107,
									"scores":	[-4.659523176176366]
								}, {
									"case":	108,
									"scores":	[-4.659523176176366]
								}, {
									"case":	109,
									"scores":	[-4.659523176176366]
								}, {
									"case":	110,
									"scores":	[-4.659523176176366]
								}, {
									"case":	111,
									"scores":	[-4.659523176176366]
								}, {
									"case":	112,
									"scores":	[-4.659523176176366]
								}, {
									"case":	113,
									"scores":	[-4.659523176176366]
								}, {
									"case":	114,
									"scores":	[-4.659523176176366]
								}, {
									"case":	115,
									"scores":	[-4.659523176176366]
								}, {
									"case":	116,
									"scores":	[-4.659523176176366]
								}, {
									"case":	117,
									"scores":	[-4.659523176176366]
								}, {
									"case":	118,
									"scores":	[-4.659523176176366]
								}, {
									"case":	119,
									"scores":	[-4.659523176176366]
								}, {
									"case":	120,
									"scores":	[-4.659523176176366]
								}, {
									"case":	121,
									"scores":	[-4.659523176176366]
								}, {
									"case":	122,
									"scores":	[-4.659523176176366]
								}, {
									"case":	123,
									"scores":	[-4.659523176176366]
								}, {
									"case":	124,
									"scores":	[-4.659523176176366]
								}, {
									"case":	125,
									"scores":	[-4.659523176176366]
								}, {
									"case":	126,
									"scores":	[-4.659523176176366]
								}, {
									"case":	127,
									"scores":	[-4.659523176176366]
								}, {
									"case":	128,
									"scores":	[-4.659523176176366]
								}, {
									"case":	129,
									"scores":	[-4.659523176176366]
								}, {
									"case":	130,
									"scores":	[-4.659523176176366]
								}, {
									"case":	131,
									"scores":	[-4.659523176176366]
								}, {
									"case":	132,
									"scores":	[-4.659523176176366]
								}, {
									"case":	133,
									"scores":	[-4.659523176176366]
								}, {
									"case":	134,
									"scores":	[-4.659523176176366]
								}, {
									"case":	135,
									"scores":	[-4.659523176176366]
								}, {
									"case":	136,
									"scores":	[-4.659523176176366]
								}, {
									"case":	137,
									"scores":	[-4.659523176176366]
								}, {
									"case":	138,
									"scores":	[-4.659523176176366]
								}, {
									"case":	139,
									"scores":	[-4.659523176176366]
								}, {
									"case":	140,
									"scores":	[-4.659523176176366]
								}, {
									"case":	141,
									"scores":	[-4.659523176176366]
								}, {
									"case":	142,
									"scores":	[-4.659523176176366]
								}, {
									"case":	143,
									"scores":	[-4.659523176176366]
								}, {
									"case":	144,
									"scores":	[-4.659523176176366]
								}, {
									"case":	145,
									"scores":	[-4.659523176176366]
								}, {
									"case":	146,
									"scores":	[-4.659523176176366]
								}, {
									"case":	147,
									"scores":	[-4.659523176176366]
								}, {
									"case":	148,
									"scores":	[-4.659523176176366]
								}, {
									"case":	149,
									"scores":	[-4.659523176176366]
								}, {
									"case":	150,
									"scores":	[-4.659523176176366]
								}, {
									"case":	151,
									"scores":	[-4.659523176176366]
								}, {
									"case":	152,
									"scores":	[-4.659523176176366]
								}, {
									"case":	153,
									"scores":	[-4.659523176176366]
								}, {
									"case":	154,
									"scores":	[-4.659523176176366]
								}, {
									"case":	155,
									"scores":	[-4.659523176176366]
								}, {
									"case":	156,
									"scores":	[-4.659523176176366]
								}, {
									"case":	157,
									"scores":	[-4.659523176176366]
								}, {
									"case":	158,
									"scores":	[-4.659523176176366]
								}, {
									"case":	159,
									"scores":	[-4.659523176176366]
								}, {
									"case":	160,
									"scores":	[-4.659523176176366]
								}, {
									"case":	161,
									"scores":	[-4.659523176176366]
								}, {
									"case":	162,
									"scores":	[-4.659523176176366]
								}, {
									"case":	163,
									"scores":	[-4.659523176176366]
								}, {
									"case":	164,
									"scores":	[-4.659523176176366]
								}, {
									"case":	165,
									"scores":	[-4.659523176176366]
								}, {
									"case":	166,
									"scores":	[-4.659523176176366]
								}, {
									"case":	167,
									"scores":	[-4.659523176176366]
								}, {
									"case":	168,
									"scores":	[-4.659523176176366]
								}, {
									"case":	169,
									"scores":	[-4.659523176176366]
								}, {
									"case":	170,
									"scores":	[-4.659523176176366]
								}, {
									"case":	171,
									"scores":	[-4.659523176176366]
								}, {
									"case":	172,
									"scores":	[-4.659523176176366]
								}, {
									"case":	173,
									"scores":	[-4.659523176176366]
								}, {
									"case":	174,
									"scores":	[-4.659523176176366]
								}, {
									"case":	175,
									"scores":	[-4.659523176176366]
								}, {
									"case":	176,
									"scores":	[-4.659523176176366]
								}, {
									"case":	177,
									"scores":	[-4.659523176176366]
								}, {
									"case":	178,
									"scores":	[-4.659523176176366]
								}, {
									"case":	179,
									"scores":	[-4.659523176176366]
								}, {
									"case":	180,
									"scores":	[-4.659523176176366]
								}, {
									"case":	181,
									"scores":	[-4.659523176176366]
								}, {
									"case":	182,
									"scores":	[-4.659523176176366]
								}, {
									"case":	183,
									"scores":	[-4.659523176176366]
								}, {
									"case":	184,
									"scores":	[-4.659523176176366]
								}, {
									"case":	185,
									"scores":	[-4.659523176176366]
								}, {
									"case":	186,
									"scores":	[-4.659523176176366]
								}, {
									"case":	187,
									"scores":	[-4.659523176176366]
								}, {
									"case":	188,
									"scores":	[-4.659523176176366]
								}, {
									"case":	189,
									"scores":	[-4.659523176176366]
								}, {
									"case":	190,
									"scores":	[-4.659523176176366]
								}, {
									"case":	191,
									"scores":	[-4.659523176176366]
								}, {
									"case":	192,
									"scores":	[-4.659523176176366]
								}, {
									"case":	193,
									"scores":	[-4.659523176176366]
								}, {
									"case":	194,
									"scores":	[-4.659523176176366]
								}, {
									"case":	195,
									"scores":	[-4.659523176176366]
								}, {
									"case":	196,
									"scores":	[-4.659523176176366]
								}, {
									"case":	197,
									"scores":	[-4.659523176176366]
								}, {
									"case":	198,
									"scores":	[-4.659523176176366]
								}, {
									"case":	199,
									"scores":	[-4.659523176176366]
								}, {
									"case":	200,
									"scores":	[-4.659523176176366]
								}, {
									"case":	201,
									"scores":	[-4.659523176176366]
								}, {
									"case":	202,
									"scores":	[-4.659523176176366]
								}, {
									"case":	203,
									"scores":	[-4.659523176176366]
								}, {
									"case":	204,
									"scores":	[-4.659523176176366]
								}, {
									"case":	205,
									"scores":	[-4.659523176176366]
								}, {
									"case":	206,
									"scores":	[-4.659523176176366]
								}, {
									"case":	207,
									"scores":	[-4.659523176176366]
								}, {
									"case":	208,
									"scores":	[-4.659523176176366]
								}, {
									"case":	209,
									"scores":	[-4.659523176176366]
								}, {
									"case":	210,
									"scores":	[-4.659523176176366]
								}, {
									"case":	211,
									"scores":	[-4.659523176176366]
								}, {
									"case":	212,
									"scores":	[-4.659523176176366]
								}, {
									"case":	213,
									"scores":	[-4.659523176176366]
								}, {
									"case":	214,
									"scores":	[-4.659523176176366]
								}, {
									"case":	215,
									"scores":	[-4.659523176176366]
								}, {
									"case":	216,
									"scores":	[-4.659523176176366]
								}, {
									"case":	217,
									"scores":	[-4.659523176176366]
								}, {
									"case":	218,
									"scores":	[-4.659523176176366]
								}, {
									"case":	219,
									"scores":	[-4.659523176176366]
								}, {
									"case":	220,
									"scores":	[-4.659523176176366]
								}, {
									"case":	221,
									"scores":	[-4.659523176176366]
								}, {
									"case":	222,
									"scores":	[-4.659523176176366]
								}, {
									"case":	223,
									"scores":	[-4.659523176176366]
								}, {
									"case":	224,
									"scores":	[-4.659523176176366]
								}, {
									"case":	225,
									"scores":	[-4.659523176176366]
								}, {
									"case":	226,
									"scores":	[-4.659523176176366]
								}, {
									"case":	227,
									"scores":	[-4.659523176176366]
								}, {
									"case":	228,
									"scores":	[-4.659523176176366]
								}, {
									"case":	229,
									"scores":	[-4.659523176176366]
								}, {
									"case":	230,
									"scores":	[-4.659523176176366]
								}, {
									"case":	231,
									"scores":	[-4.659523176176366]
								}, {
									"case":	232,
									"scores":	[-4.659523176176366]
								}, {
									"case":	233,
									"scores":	[-4.659523176176366]
								}, {
									"case":	234,
									"scores":	[-4.659523176176366]
								}, {
									"case":	235,
									"scores":	[-4.659523176176366]
								}, {
									"case":	236,
									"scores":	[-4.659523176176366]
								}, {
									"case":	237,
									"scores":	[-4.659523176176366]
								}, {
									"case":	238,
									"scores":	[-4.659523176176366]
								}, {
									"case":	239,
									"scores":	[-4.659523176176366]
								}, {
									"case":	240,
									"scores":	[-4.659523176176366]
								}, {
									"case":	241,
									"scores":	[-4.659523176176366]
								}, {
									"case":	242,
									"scores":	[-4.659523176176366]
								}, {
									"case":	243,
									"scores":	[-4.659523176176366]
								}, {
									"case":	244,
									"scores":	[-4.659523176176366]
								}, {
									"case":	245,
									"scores":	[-4.659523176176366]
								}, {
									"case":	246,
									"scores":	[-4.659523176176366]
								}, {
									"case":	247,
									"scores":	[-4.659523176176366]
								}, {
									"case":	248,
									"scores":	[-4.659523176176366]
								}, {
									"case":	249,
									"scores":	[-4.659523176176366]
								}, {
									"case":	250,
									"scores":	[-4.659523176176366]
								}, {
									"case":	251,
									"scores":	[-4.659523176176366]
								}, {
									"case":	252,
									"scores":	[-4.659523176176366]
								}, {
									"case":	253,
									"scores":	[-4.659523176176366]
								}, {
									"case":	254,
									"scores":	[-4.659523176176366]
								}, {
									"case":	255,
									"scores":	[-4.659523176176366]
								}, {
									"case":	256,
									"scores":	[-4.659523176176366]
								}, {
									"case":	257,
									"scores":	[-4.659523176176366]
								}, {
									"case":	258,
									"scores":	[-4.659523176176366]
								}, {
									"case":	259,
									"scores":	[-4.659523176176366]
								}, {
									"case":	260,
									"scores":	[-4.659523176176366]
								}, {
									"case":	261,
									"scores":	[-4.659523176176366]
								}, {
									"case":	262,
									"scores":	[-4.659523176176366]
								}, {
									"case":	263,
									"scores":	[-4.659523176176366]
								}, {
									"case":	264,
									"scores":	[-4.659523176176366]
								}, {
									"case":	265,
									"scores":	[-4.659523176176366]
								}, {
									"case":	266,
									"scores":	[-4.659523176176366]
								}, {
									"case":	267,
									"scores":	[-4.659523176176366]
								}, {
									"case":	268,
									"scores":	[-4.659523176176366]
								}, {
									"case":	269,
									"scores":	[-4.659523176176366]
								}, {
									"case":	270,
									"scores":	[-4.659523176176366]
								}, {
									"case":	271,
									"scores":	[-4.659523176176366]
								}, {
									"case":	272,
									"scores":	[-4.659523176176366]
								}, {
									"case":	273,
									"scores":	[-4.659523176176366]
								}, {
									"case":	274,
									"scores":	[-4.659523176176366]
								}, {
									"case":	275,
									"scores":	[-4.659523176176366]
								}, {
									"case":	276,
									"scores":	[-4.659523176176366]
								}, {
									"case":	277,
									"scores":	[-4.659523176176366]
								}, {
									"case":	278,
									"scores":	[-4.659523176176366]
								}, {
									"case":	279,
									"scores":	[-4.659523176176366]
								}, {
									"case":	280,
									"scores":	[-4.659523176176366]
								}, {
									"case":	281,
									"scores":	[-4.659523176176366]
								}, {
									"case":	282,
									"scores":	[-4.659523176176366]
								}, {
									"case":	283,
									"scores":	[-4.659523176176366]
								}, {
									"case":	284,
									"scores":	[-4.659523176176366]
								}, {
									"case":	285,
									"scores":	[-4.659523176176366]
								}, {
									"case":	286,
									"scores":	[-5.5023111309763664, -8.392247957876366, -8.4528718599763657, -9.2957987168763658, -7.2850111861763658, -8.6948950661763664, -8.2269470261763669, -8.4729859399763665, -7.570463012176365, -7.8280481861763658, -8.437372573976365, -8.7262935461763664, -8.7262935461763664, -8.7262935461763664, -8.7262935461763664, -8.7262935461763664, -8.7262935461763664, -8.7262935461763664, -8.9371826631763653, -8.9723324599763661, -8.7262935461763664, -8.7262935461763664, -8.7262935461763664, -8.7262935461763664, -8.7262935461763664, -8.7262935461763664, -8.7262935461763664, -8.7262935461763664, -8.7262935461763664, -8.7262935461763664, -8.9723324599763661]
								}]
						}, {
							"switch":	57,
							"types":	[[], [], [1], [], [], [], [3, 4], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	3084,
							"begin_column":	2,
							"end_line":	3084,
							"end_column":	74,
							"patch_codes":	["if (!__is_neg(\"\", \"L3084\", 31, &(object), sizeof (object), &(dateobj), sizeof (dateobj), &(return_value), sizeof (return_value), &(dateobj->time), sizeof (dateobj->time), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(w), sizeof (w), &(d), sizeof (d), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    dateobj = (php_date_obj *)zend_object_store_get_object(object);\n", "{\n}\n", "dateobj = (dateobj)", "dateobj = (php_date_obj *)zend_object_store_get_object(object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.9281729701763659, -7.7248458450763664, -7.6268408361763651, -7.9615844340763662, -6.2598547101763664, -6.6525424661763655, -6.9579355821763658, -7.7158236821763655, -6.0648314601763662, -6.3786291601763656, -7.4247303221763659, -6.7856490461763652, -6.7856490461763652, -6.7856490461763652, -6.7856490461763652, -6.7856490461763652, -6.7856490461763652, -6.7856490461763652, -7.2549090461763655, -7.5435371461763658, -6.7856490461763652, -6.7856490461763652, -6.7856490461763652, -6.7856490461763652, -6.7856490461763652, -6.7856490461763652, -6.7856490461763652, -6.7856490461763652, -6.7856490461763652, -6.7856490461763652, -7.5435371461763658]
								}, {
									"case":	2,
									"scores":	[-4.659523176176366]
								}, {
									"case":	3,
									"scores":	[-4.659523176176366]
								}, {
									"case":	4,
									"scores":	[-4.659523176176366]
								}]
						}]
				}, {
					"line":	3084,
					"switches":	[{
							"switch":	58,
							"types":	[[], [], [], [], [286], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [], [], [], [199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285], [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], [], [], [], [], [], []],
							"begin_line":	3085,
							"begin_column":	0,
							"end_line":	3085,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->d = (-1)", "dateobj->time->d = (0)", "dateobj->time->d = (1)", "dateobj->time->d = (2)", "dateobj->time->d = (3)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->m = (-1)", "dateobj->time->m = (0)", "dateobj->time->m = (1)", "dateobj->time->m = (2)", "dateobj->time->m = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->y = (-1)", "dateobj->time->y = (0)", "dateobj->time->y = (1)", "dateobj->time->y = (2)", "dateobj->time->y = (3)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((dateobj), 0, sizeof(php_date_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->d = 1", "dateobj->time->have_relative = 1", "dateobj->time->m = 1", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, d)", "dateobj->time->y = y", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3085\", 31, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(w), sizeof (w), &(d), sizeof (d), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	2,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	3,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	4,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	5,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	6,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	7,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	8,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	9,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	10,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	11,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	12,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	13,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	14,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	15,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	16,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	17,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	18,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	19,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	20,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	21,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	22,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	23,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	24,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	25,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	26,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	27,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	28,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	29,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	30,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	31,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	32,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	33,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	34,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	35,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	36,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	37,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	38,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	39,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	40,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	41,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	42,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	43,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	44,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	45,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	46,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	47,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	48,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	49,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	50,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	51,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	52,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	53,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	54,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	55,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	56,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	57,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	58,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	59,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	60,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	61,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	62,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	63,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	64,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	65,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	66,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	67,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	68,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	69,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	70,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	71,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	72,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	73,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	74,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	75,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	76,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	77,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	78,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	79,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	80,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	81,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	82,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	83,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	84,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	85,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	86,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	87,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	88,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	89,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	90,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	91,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	92,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	93,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	94,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	95,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	96,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	97,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	98,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	99,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	100,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	101,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	102,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	103,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	104,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	105,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	106,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	107,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	108,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	109,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	110,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	111,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	112,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	113,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	114,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	115,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	116,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	117,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	118,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	119,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	120,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	121,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	122,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	123,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	124,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	125,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	126,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	127,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	128,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	129,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	130,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	131,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	132,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	133,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	134,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	135,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	136,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	137,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	138,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	139,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	140,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	141,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	142,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	143,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	144,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	145,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	146,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	147,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	148,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	149,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	150,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	151,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	152,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	153,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	154,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	155,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	156,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	157,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	158,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	159,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	160,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	161,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	162,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	163,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	164,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	165,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	166,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	167,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	168,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	169,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	170,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	171,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	172,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	173,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	174,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	175,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	176,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	177,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	178,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	179,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	180,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	181,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	182,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	183,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	184,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	185,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	186,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	187,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	188,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	189,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	190,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	191,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	192,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	193,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	194,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	195,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	196,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	197,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	198,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	199,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	200,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	201,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	202,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	203,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	204,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	205,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	206,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	207,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	208,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	209,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	210,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	211,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	212,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	213,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	214,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	215,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	216,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	217,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	218,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	219,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	220,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	221,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	222,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	223,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	224,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	225,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	226,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	227,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	228,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	229,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	230,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	231,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	232,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	233,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	234,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	235,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	236,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	237,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	238,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	239,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	240,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	241,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	242,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	243,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	244,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	245,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	246,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	247,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	248,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	249,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	250,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	251,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	252,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	253,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	254,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	255,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	256,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	257,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	258,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	259,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	260,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	261,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	262,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	263,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	264,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	265,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	266,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	267,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	268,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	269,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	270,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	271,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	272,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	273,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	274,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	275,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	276,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	277,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	278,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	279,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	280,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	281,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	282,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	283,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	284,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	285,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	286,
									"scores":	[-9.9433261526588463, -8.8295220635588461, -10.786253009558846, -9.35491395265885, -8.7754654788588464, -10.185349358858847, -10.314727831858846, -10.216747838858845, -9.71740131885885, -9.9634402326588472, -9.06091730485885, -9.3185024788588464, -9.92782686665885, -10.216747838858845, -10.216747838858845, -10.216747838858845, -10.216747838858845, -10.216747838858845, -10.427636955858844, -10.462786752658847, -10.216747838858845, -10.216747838858845, -10.216747838858845, -10.216747838858845, -10.216747838858845, -10.216747838858845, -10.216747838858845, -10.216747838858845, -10.216747838858845, -10.216747838858845, -10.462786752658847]
								}]
						}, {
							"switch":	59,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	3085,
							"begin_column":	2,
							"end_line":	3085,
							"end_column":	48,
							"patch_codes":	["if (__is_neg(\"\", \"L3085\", 31, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(w), sizeof (w), &(d), sizeof (d), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((!(dateobj->time)) || __is_neg(\"\", \"L3085\", 31, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(w), sizeof (w), &(d), sizeof (d), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((!(dateobj->time)) && !__is_neg(\"\", \"L3085\", 31, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(w), sizeof (w), &(d), sizeof (d), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.0952119814281449, -5.4455976093281464, -6.429955579328146, -5.2390344514281457, -4.7282258554281462, -5.1209136114281453, -5.2505389354281453, -5.254020191428145, -5.4263067274281456, -6.1841948274281453, -4.533202605428146, -4.8470003054281463, -5.8931014674281457, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.7232801914281453, -6.0119082914281456, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -5.254020191428145, -6.0119082914281456]
								}, {
									"case":	2,
									"scores":	[-5.6086513334281456, -4.9590369613281462, -5.9433949313281458, -4.7524738034281464, -4.241665207428146, -4.634352963428146, -4.763978287428146, -4.7674595434281457, -4.9397460794281454, -5.697634179428146, -4.0466419574281458, -4.3604396574281461, -5.4065408194281463, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -5.2367195434281459, -5.5253476434281454, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -5.5253476434281454]
								}, {
									"case":	3,
									"scores":	[-5.6086513334281456, -4.9590369613281462, -5.9433949313281458, -4.7524738034281464, -4.241665207428146, -4.634352963428146, -4.763978287428146, -4.7674595434281457, -4.9397460794281454, -5.697634179428146, -4.0466419574281458, -4.3604396574281461, -5.4065408194281463, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -5.2367195434281459, -5.5253476434281454, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -4.7674595434281457, -5.5253476434281454]
								}]
						}, {
							"switch":	60,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	3085,
							"begin_column":	2,
							"end_line":	3085,
							"end_column":	48,
							"patch_codes":	["if (!__is_neg(\"\", \"L3085\", 31, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(w), sizeof (w), &(d), sizeof (d), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    if (!(dateobj->time)) {\n        php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n        {\n            do {\n                zval *__z = (return_value);\n                (*__z).value.lval = ((0) != 0);\n                (*__z).type = 3;\n            } while (0);\n            return;\n        }\n        ;\n    }\n", "if (!__is_neg(\"\", \"L3085\", 31, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(w), sizeof (w), &(d), sizeof (d), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)) && (!(dateobj->time))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.27857873885885, -7.6289643667588471, -8.613322336758845, -7.4224012088588456, -6.911592612858847, -7.3042803688588469, -7.4339056928588469, -7.4373869488588467, -7.6096734848588463, -8.367561584858846, -6.7165693628588459, -7.0303670628588462, -8.0764682248588464, -7.4373869488588467, -7.4373869488588467, -7.4373869488588467, -7.4373869488588467, -7.4373869488588467, -7.906646948858846, -8.1952750488588464, -7.4373869488588467, -7.4373869488588467, -7.4373869488588467, -7.4373869488588467, -7.4373869488588467, -7.4373869488588467, -7.4373869488588467, -7.4373869488588467, -7.4373869488588467, -7.4373869488588467, -8.1952750488588464]
								}, {
									"case":	2,
									"scores":	[-7.7140605968588467, -7.0644462247588464, -8.048804194758846, -6.8578830668588466, -6.3470744708588462, -6.7397622268588453, -6.8693875508588462, -6.8728688068588459, -7.0451553428588465, -7.8030434428588453, -6.152051220858846, -6.4658489208588463, -7.5119500828588457, -6.8728688068588459, -6.8728688068588459, -6.8728688068588459, -6.8728688068588459, -6.8728688068588459, -7.3421288068588453, -7.6307569068588457, -6.8728688068588459, -6.8728688068588459, -6.8728688068588459, -6.8728688068588459, -6.8728688068588459, -6.8728688068588459, -6.8728688068588459, -6.8728688068588459, -6.8728688068588459, -6.8728688068588459, -7.6307569068588457]
								}]
						}]
				}, {
					"line":	3085,
					"switches":	[{
							"switch":	61,
							"types":	[[], [], [], [], [286], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [], [], [], [199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285], [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], [], [], [], [], [], []],
							"begin_line":	3086,
							"begin_column":	0,
							"end_line":	3086,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->d = (-1)", "dateobj->time->d = (0)", "dateobj->time->d = (1)", "dateobj->time->d = (2)", "dateobj->time->d = (3)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->m = (-1)", "dateobj->time->m = (0)", "dateobj->time->m = (1)", "dateobj->time->m = (2)", "dateobj->time->m = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->y = (-1)", "dateobj->time->y = (0)", "dateobj->time->y = (1)", "dateobj->time->y = (2)", "dateobj->time->y = (3)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((dateobj), 0, sizeof(php_date_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->d = 1", "dateobj->time->have_relative = 1", "dateobj->time->m = 1", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, d)", "dateobj->time->y = y", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3086\", 31, &(dateobj), sizeof (dateobj), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time), sizeof (dateobj->time), &(return_value), sizeof (return_value), &(dateobj->time->m), sizeof (dateobj->time->m), &(object), sizeof (object), &(dateobj->time->d), sizeof (dateobj->time->d), &(w), sizeof (w), &(d), sizeof (d), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	2,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	3,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	4,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	5,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	6,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	7,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	8,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	9,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	10,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	11,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	12,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	13,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	14,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	15,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	16,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	17,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	18,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	19,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	20,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	21,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	22,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	23,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	24,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	25,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	26,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	27,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	28,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	29,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	30,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	31,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	32,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	33,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	34,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	35,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	36,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	37,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	38,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	39,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	40,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	41,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	42,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	43,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	44,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	45,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	46,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	47,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	48,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	49,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	50,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	51,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	52,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	53,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	54,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	55,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	56,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	57,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	58,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	59,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	60,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	61,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	62,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	63,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	64,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	65,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	66,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	67,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	68,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	69,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	70,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	71,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	72,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	73,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	74,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	75,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	76,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	77,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	78,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	79,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	80,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	81,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	82,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	83,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	84,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	85,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	86,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	87,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	88,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	89,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	90,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	91,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	92,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	93,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	94,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	95,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	96,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	97,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	98,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	99,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	100,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	101,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	102,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	103,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	104,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	105,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	106,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	107,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	108,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	109,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	110,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	111,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	112,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	113,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	114,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	115,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	116,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	117,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	118,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	119,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	120,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	121,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	122,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	123,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	124,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	125,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	126,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	127,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	128,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	129,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	130,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	131,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	132,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	133,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	134,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	135,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	136,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	137,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	138,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	139,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	140,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	141,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	142,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	143,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	144,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	145,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	146,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	147,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	148,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	149,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	150,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	151,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	152,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	153,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	154,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	155,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	156,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	157,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	158,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	159,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	160,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	161,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	162,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	163,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	164,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	165,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	166,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	167,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	168,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	169,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	170,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	171,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	172,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	173,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	174,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	175,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	176,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	177,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	178,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	179,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	180,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	181,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	182,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	183,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	184,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	185,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	186,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	187,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	188,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	189,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	190,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	191,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	192,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	193,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	194,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	195,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	196,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	197,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	198,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	199,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	200,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	201,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	202,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	203,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	204,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	205,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	206,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	207,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	208,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	209,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	210,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	211,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	212,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	213,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	214,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	215,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	216,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	217,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	218,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	219,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	220,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	221,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	222,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	223,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	224,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	225,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	226,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	227,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	228,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	229,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	230,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	231,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	232,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	233,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	234,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	235,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	236,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	237,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	238,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	239,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	240,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	241,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	242,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	243,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	244,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	245,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	246,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	247,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	248,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	249,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	250,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	251,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	252,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	253,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	254,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	255,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	256,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	257,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	258,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	259,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	260,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	261,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	262,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	263,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	264,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	265,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	266,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	267,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	268,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	269,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	270,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	271,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	272,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	273,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	274,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	275,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	276,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	277,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	278,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	279,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	280,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	281,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	282,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	283,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	284,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	285,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	286,
									"scores":	[-6.2175363489238071, -6.1155830772238069, -7.3529026652238079, -8.04366512892381, -7.9695077380238075, -8.34090941722381, -7.7384461380238072, -8.34090941722381, -7.0314289032238069, -7.2890140772238077, -8.2429294242238065, -7.7234688242238079, -7.9695077380238075, -7.9338943720238069, -8.2429294242238065, -8.2429294242238065, -8.2429294242238065, -8.2429294242238065, -8.4538185412238072, -8.4889683380238061, -8.2429294242238065, -8.2429294242238065, -8.2429294242238065, -8.2429294242238065, -8.2429294242238065, -8.2429294242238065, -8.2429294242238065, -8.2429294242238065, -8.2429294242238065, -8.2429294242238065, -8.4889683380238061]
								}]
						}, {
							"switch":	62,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	3086,
							"begin_column":	2,
							"end_line":	3086,
							"end_column":	21,
							"patch_codes":	["if (!__is_neg(\"\", \"L3086\", 31, &(dateobj), sizeof (dateobj), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time), sizeof (dateobj->time), &(return_value), sizeof (return_value), &(dateobj->time->m), sizeof (dateobj->time->m), &(object), sizeof (object), &(dateobj->time->d), sizeof (dateobj->time->d), &(w), sizeof (w), &(d), sizeof (d), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    dateobj->time->y = y;\n", "{\n}\n", "dateobj->time->y = (-1)", "dateobj->time->y = (0 * d)", "dateobj->time->y = (0 * ht)", "dateobj->time->y = (0 * return_value_used)", "dateobj->time->y = (0 * w)", "dateobj->time->y = (0 * y)", "dateobj->time->y = (0)", "dateobj->time->y = (1)", "dateobj->time->y = (2)", "dateobj->time->y = (3)", "dateobj->time->y = (d != 0)", "dateobj->time->y = (d * ht)", "dateobj->time->y = (d * return_value_used)", "dateobj->time->y = (d * w)", "dateobj->time->y = (d * y)", "dateobj->time->y = (d + 0)", "dateobj->time->y = (d - 0)", "dateobj->time->y = (d == 0)", "dateobj->time->y = (d)", "dateobj->time->y = (dateobj != 0)", "dateobj->time->y = (dateobj == 0)", "dateobj->time->y = (ht != 0)", "dateobj->time->y = (ht != d)", "dateobj->time->y = (ht != return_value_used)", "dateobj->time->y = (ht != w)", "dateobj->time->y = (ht != y)", "dateobj->time->y = (ht * d)", "dateobj->time->y = (ht * return_value_used)", "dateobj->time->y = (ht * w)", "dateobj->time->y = (ht * y)", "dateobj->time->y = (ht + 0)", "dateobj->time->y = (ht + d)", "dateobj->time->y = (ht + return_value_used)", "dateobj->time->y = (ht + w)", "dateobj->time->y = (ht + y)", "dateobj->time->y = (ht - 0)", "dateobj->time->y = (ht - d)", "dateobj->time->y = (ht - return_value_used)", "dateobj->time->y = (ht - w)", "dateobj->time->y = (ht - y)", "dateobj->time->y = (ht == 0)", "dateobj->time->y = (ht == d)", "dateobj->time->y = (ht == return_value_used)", "dateobj->time->y = (ht == w)", "dateobj->time->y = (ht == y)", "dateobj->time->y = (object != 0)", "dateobj->time->y = (object == 0)", "dateobj->time->y = (return_value != 0)", "dateobj->time->y = (return_value != object)", "dateobj->time->y = (return_value != this_ptr)", "dateobj->time->y = (return_value == 0)", "dateobj->time->y = (return_value == object)", "dateobj->time->y = (return_value == this_ptr)", "dateobj->time->y = (return_value_ptr != 0)", "dateobj->time->y = (return_value_ptr == 0)", "dateobj->time->y = (return_value_used != 0)", "dateobj->time->y = (return_value_used != d)", "dateobj->time->y = (return_value_used != w)", "dateobj->time->y = (return_value_used != y)", "dateobj->time->y = (return_value_used * d)", "dateobj->time->y = (return_value_used * ht)", "dateobj->time->y = (return_value_used * w)", "dateobj->time->y = (return_value_used * y)", "dateobj->time->y = (return_value_used + 0)", "dateobj->time->y = (return_value_used + d)", "dateobj->time->y = (return_value_used + w)", "dateobj->time->y = (return_value_used + y)", "dateobj->time->y = (return_value_used - 0)", "dateobj->time->y = (return_value_used - d)", "dateobj->time->y = (return_value_used - w)", "dateobj->time->y = (return_value_used - y)", "dateobj->time->y = (return_value_used == 0)", "dateobj->time->y = (return_value_used == d)", "dateobj->time->y = (return_value_used == w)", "dateobj->time->y = (return_value_used == y)", "dateobj->time->y = (this_ptr != 0)", "dateobj->time->y = (this_ptr != object)", "dateobj->time->y = (this_ptr == 0)", "dateobj->time->y = (this_ptr == object)", "dateobj->time->y = (w != 0)", "dateobj->time->y = (w != d)", "dateobj->time->y = (w * d)", "dateobj->time->y = (w * ht)", "dateobj->time->y = (w * return_value_used)", "dateobj->time->y = (w * y)", "dateobj->time->y = (w + 0)", "dateobj->time->y = (w + d)", "dateobj->time->y = (w - 0)", "dateobj->time->y = (w - d)", "dateobj->time->y = (w == 0)", "dateobj->time->y = (w == d)", "dateobj->time->y = (w)", "dateobj->time->y = (y != 0)", "dateobj->time->y = (y != d)", "dateobj->time->y = (y != w)", "dateobj->time->y = (y * d)", "dateobj->time->y = (y * ht)", "dateobj->time->y = (y * return_value_used)", "dateobj->time->y = (y * w)", "dateobj->time->y = (y + 0)", "dateobj->time->y = (y + d)", "dateobj->time->y = (y + w)", "dateobj->time->y = (y - 0)", "dateobj->time->y = (y - d)", "dateobj->time->y = (y - w)", "dateobj->time->y = (y == 0)", "dateobj->time->y = (y == d)", "dateobj->time->y = (y == w)", "dateobj->time->y = (y)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8869584526238068, -5.1569474932238073, -5.8154450552238073, -6.736894932123807, -6.7896943242238077, -6.7217497992238071, -6.2137633702238073, -5.9450212782238072, -5.3380587832238078, -5.6518564832238072, -5.9485025342238078, -6.0318062242238071, -6.7896943242238077, -6.4986009642238081, -5.9485025342238078, -5.9485025342238078, -5.9485025342238078, -5.9485025342238078, -6.4177625342238072, -6.7063906342238067, -5.9485025342238078, -5.9485025342238078, -5.9485025342238078, -5.9485025342238078, -5.9485025342238078, -5.9485025342238078, -5.9485025342238078, -5.9485025342238078, -5.9485025342238078, -5.9485025342238078, -6.7063906342238067]
								}, {
									"case":	2,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	3,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	4,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	5,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	6,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	7,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	8,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	9,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	10,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	11,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	12,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	13,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	14,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	15,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	16,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	17,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	18,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	19,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	20,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	21,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	22,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	23,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	24,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	25,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	26,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	27,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	28,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	29,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	30,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	31,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	32,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	33,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	34,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	35,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	36,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	37,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	38,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	39,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	40,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	41,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	42,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	43,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	44,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	45,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	46,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	47,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	48,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	49,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	50,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	51,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	52,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	53,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	54,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	55,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	56,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	57,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	58,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	59,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	60,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	61,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	62,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	63,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	64,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	65,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	66,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	67,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	68,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	69,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	70,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	71,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	72,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	73,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	74,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	75,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	76,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	77,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	78,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	79,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	80,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	81,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	82,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	83,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	84,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	85,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	86,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	87,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	88,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	89,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	90,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	91,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	92,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	93,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	94,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	95,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	96,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	97,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	98,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	99,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	100,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	101,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	102,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	103,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	104,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	105,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	106,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	107,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	108,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	109,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	110,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	111,
									"scores":	[-4.5989150542238075]
								}]
						}]
				}, {
					"line":	3086,
					"switches":	[{
							"switch":	63,
							"types":	[[], [], [], [], [286], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [], [], [], [199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285], [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], [], [], [], [], [], []],
							"begin_line":	3087,
							"begin_column":	0,
							"end_line":	3087,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->d = (-1)", "dateobj->time->d = (0)", "dateobj->time->d = (1)", "dateobj->time->d = (2)", "dateobj->time->d = (3)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->m = (-1)", "dateobj->time->m = (0)", "dateobj->time->m = (1)", "dateobj->time->m = (2)", "dateobj->time->m = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->y = (-1)", "dateobj->time->y = (0)", "dateobj->time->y = (1)", "dateobj->time->y = (2)", "dateobj->time->y = (3)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((dateobj), 0, sizeof(php_date_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->d = 1", "dateobj->time->have_relative = 1", "dateobj->time->m = 1", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, d)", "dateobj->time->y = y", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3087\", 31, &(dateobj), sizeof (dateobj), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time), sizeof (dateobj->time), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->d), sizeof (dateobj->time->d), &(return_value), sizeof (return_value), &(w), sizeof (w), &(d), sizeof (d), &(object), sizeof (object), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.578712346906288]
								}, {
									"case":	2,
									"scores":	[-4.578712346906288]
								}, {
									"case":	3,
									"scores":	[-4.578712346906288]
								}, {
									"case":	4,
									"scores":	[-4.578712346906288]
								}, {
									"case":	5,
									"scores":	[-4.578712346906288]
								}, {
									"case":	6,
									"scores":	[-4.578712346906288]
								}, {
									"case":	7,
									"scores":	[-4.578712346906288]
								}, {
									"case":	8,
									"scores":	[-4.578712346906288]
								}, {
									"case":	9,
									"scores":	[-4.578712346906288]
								}, {
									"case":	10,
									"scores":	[-4.578712346906288]
								}, {
									"case":	11,
									"scores":	[-4.578712346906288]
								}, {
									"case":	12,
									"scores":	[-4.578712346906288]
								}, {
									"case":	13,
									"scores":	[-4.578712346906288]
								}, {
									"case":	14,
									"scores":	[-4.578712346906288]
								}, {
									"case":	15,
									"scores":	[-4.578712346906288]
								}, {
									"case":	16,
									"scores":	[-4.578712346906288]
								}, {
									"case":	17,
									"scores":	[-4.578712346906288]
								}, {
									"case":	18,
									"scores":	[-4.578712346906288]
								}, {
									"case":	19,
									"scores":	[-4.578712346906288]
								}, {
									"case":	20,
									"scores":	[-4.578712346906288]
								}, {
									"case":	21,
									"scores":	[-4.578712346906288]
								}, {
									"case":	22,
									"scores":	[-4.578712346906288]
								}, {
									"case":	23,
									"scores":	[-4.578712346906288]
								}, {
									"case":	24,
									"scores":	[-4.578712346906288]
								}, {
									"case":	25,
									"scores":	[-4.578712346906288]
								}, {
									"case":	26,
									"scores":	[-4.578712346906288]
								}, {
									"case":	27,
									"scores":	[-4.578712346906288]
								}, {
									"case":	28,
									"scores":	[-4.578712346906288]
								}, {
									"case":	29,
									"scores":	[-4.578712346906288]
								}, {
									"case":	30,
									"scores":	[-4.578712346906288]
								}, {
									"case":	31,
									"scores":	[-4.578712346906288]
								}, {
									"case":	32,
									"scores":	[-4.578712346906288]
								}, {
									"case":	33,
									"scores":	[-4.578712346906288]
								}, {
									"case":	34,
									"scores":	[-4.578712346906288]
								}, {
									"case":	35,
									"scores":	[-4.578712346906288]
								}, {
									"case":	36,
									"scores":	[-4.578712346906288]
								}, {
									"case":	37,
									"scores":	[-4.578712346906288]
								}, {
									"case":	38,
									"scores":	[-4.578712346906288]
								}, {
									"case":	39,
									"scores":	[-4.578712346906288]
								}, {
									"case":	40,
									"scores":	[-4.578712346906288]
								}, {
									"case":	41,
									"scores":	[-4.578712346906288]
								}, {
									"case":	42,
									"scores":	[-4.578712346906288]
								}, {
									"case":	43,
									"scores":	[-4.578712346906288]
								}, {
									"case":	44,
									"scores":	[-4.578712346906288]
								}, {
									"case":	45,
									"scores":	[-4.578712346906288]
								}, {
									"case":	46,
									"scores":	[-4.578712346906288]
								}, {
									"case":	47,
									"scores":	[-4.578712346906288]
								}, {
									"case":	48,
									"scores":	[-4.578712346906288]
								}, {
									"case":	49,
									"scores":	[-4.578712346906288]
								}, {
									"case":	50,
									"scores":	[-4.578712346906288]
								}, {
									"case":	51,
									"scores":	[-4.578712346906288]
								}, {
									"case":	52,
									"scores":	[-4.578712346906288]
								}, {
									"case":	53,
									"scores":	[-4.578712346906288]
								}, {
									"case":	54,
									"scores":	[-4.578712346906288]
								}, {
									"case":	55,
									"scores":	[-4.578712346906288]
								}, {
									"case":	56,
									"scores":	[-4.578712346906288]
								}, {
									"case":	57,
									"scores":	[-4.578712346906288]
								}, {
									"case":	58,
									"scores":	[-4.578712346906288]
								}, {
									"case":	59,
									"scores":	[-4.578712346906288]
								}, {
									"case":	60,
									"scores":	[-4.578712346906288]
								}, {
									"case":	61,
									"scores":	[-4.578712346906288]
								}, {
									"case":	62,
									"scores":	[-4.578712346906288]
								}, {
									"case":	63,
									"scores":	[-4.578712346906288]
								}, {
									"case":	64,
									"scores":	[-4.578712346906288]
								}, {
									"case":	65,
									"scores":	[-4.578712346906288]
								}, {
									"case":	66,
									"scores":	[-4.578712346906288]
								}, {
									"case":	67,
									"scores":	[-4.578712346906288]
								}, {
									"case":	68,
									"scores":	[-4.578712346906288]
								}, {
									"case":	69,
									"scores":	[-4.578712346906288]
								}, {
									"case":	70,
									"scores":	[-4.578712346906288]
								}, {
									"case":	71,
									"scores":	[-4.578712346906288]
								}, {
									"case":	72,
									"scores":	[-4.578712346906288]
								}, {
									"case":	73,
									"scores":	[-4.578712346906288]
								}, {
									"case":	74,
									"scores":	[-4.578712346906288]
								}, {
									"case":	75,
									"scores":	[-4.578712346906288]
								}, {
									"case":	76,
									"scores":	[-4.578712346906288]
								}, {
									"case":	77,
									"scores":	[-4.578712346906288]
								}, {
									"case":	78,
									"scores":	[-4.578712346906288]
								}, {
									"case":	79,
									"scores":	[-4.578712346906288]
								}, {
									"case":	80,
									"scores":	[-4.578712346906288]
								}, {
									"case":	81,
									"scores":	[-4.578712346906288]
								}, {
									"case":	82,
									"scores":	[-4.578712346906288]
								}, {
									"case":	83,
									"scores":	[-4.578712346906288]
								}, {
									"case":	84,
									"scores":	[-4.578712346906288]
								}, {
									"case":	85,
									"scores":	[-4.578712346906288]
								}, {
									"case":	86,
									"scores":	[-4.578712346906288]
								}, {
									"case":	87,
									"scores":	[-4.578712346906288]
								}, {
									"case":	88,
									"scores":	[-4.578712346906288]
								}, {
									"case":	89,
									"scores":	[-4.578712346906288]
								}, {
									"case":	90,
									"scores":	[-4.578712346906288]
								}, {
									"case":	91,
									"scores":	[-4.578712346906288]
								}, {
									"case":	92,
									"scores":	[-4.578712346906288]
								}, {
									"case":	93,
									"scores":	[-4.578712346906288]
								}, {
									"case":	94,
									"scores":	[-4.578712346906288]
								}, {
									"case":	95,
									"scores":	[-4.578712346906288]
								}, {
									"case":	96,
									"scores":	[-4.578712346906288]
								}, {
									"case":	97,
									"scores":	[-4.578712346906288]
								}, {
									"case":	98,
									"scores":	[-4.578712346906288]
								}, {
									"case":	99,
									"scores":	[-4.578712346906288]
								}, {
									"case":	100,
									"scores":	[-4.578712346906288]
								}, {
									"case":	101,
									"scores":	[-4.578712346906288]
								}, {
									"case":	102,
									"scores":	[-4.578712346906288]
								}, {
									"case":	103,
									"scores":	[-4.578712346906288]
								}, {
									"case":	104,
									"scores":	[-4.578712346906288]
								}, {
									"case":	105,
									"scores":	[-4.578712346906288]
								}, {
									"case":	106,
									"scores":	[-4.578712346906288]
								}, {
									"case":	107,
									"scores":	[-4.578712346906288]
								}, {
									"case":	108,
									"scores":	[-4.578712346906288]
								}, {
									"case":	109,
									"scores":	[-4.578712346906288]
								}, {
									"case":	110,
									"scores":	[-4.578712346906288]
								}, {
									"case":	111,
									"scores":	[-4.578712346906288]
								}, {
									"case":	112,
									"scores":	[-4.578712346906288]
								}, {
									"case":	113,
									"scores":	[-4.578712346906288]
								}, {
									"case":	114,
									"scores":	[-4.578712346906288]
								}, {
									"case":	115,
									"scores":	[-4.578712346906288]
								}, {
									"case":	116,
									"scores":	[-4.578712346906288]
								}, {
									"case":	117,
									"scores":	[-4.578712346906288]
								}, {
									"case":	118,
									"scores":	[-4.578712346906288]
								}, {
									"case":	119,
									"scores":	[-4.578712346906288]
								}, {
									"case":	120,
									"scores":	[-4.578712346906288]
								}, {
									"case":	121,
									"scores":	[-4.578712346906288]
								}, {
									"case":	122,
									"scores":	[-4.578712346906288]
								}, {
									"case":	123,
									"scores":	[-4.578712346906288]
								}, {
									"case":	124,
									"scores":	[-4.578712346906288]
								}, {
									"case":	125,
									"scores":	[-4.578712346906288]
								}, {
									"case":	126,
									"scores":	[-4.578712346906288]
								}, {
									"case":	127,
									"scores":	[-4.578712346906288]
								}, {
									"case":	128,
									"scores":	[-4.578712346906288]
								}, {
									"case":	129,
									"scores":	[-4.578712346906288]
								}, {
									"case":	130,
									"scores":	[-4.578712346906288]
								}, {
									"case":	131,
									"scores":	[-4.578712346906288]
								}, {
									"case":	132,
									"scores":	[-4.578712346906288]
								}, {
									"case":	133,
									"scores":	[-4.578712346906288]
								}, {
									"case":	134,
									"scores":	[-4.578712346906288]
								}, {
									"case":	135,
									"scores":	[-4.578712346906288]
								}, {
									"case":	136,
									"scores":	[-4.578712346906288]
								}, {
									"case":	137,
									"scores":	[-4.578712346906288]
								}, {
									"case":	138,
									"scores":	[-4.578712346906288]
								}, {
									"case":	139,
									"scores":	[-4.578712346906288]
								}, {
									"case":	140,
									"scores":	[-4.578712346906288]
								}, {
									"case":	141,
									"scores":	[-4.578712346906288]
								}, {
									"case":	142,
									"scores":	[-4.578712346906288]
								}, {
									"case":	143,
									"scores":	[-4.578712346906288]
								}, {
									"case":	144,
									"scores":	[-4.578712346906288]
								}, {
									"case":	145,
									"scores":	[-4.578712346906288]
								}, {
									"case":	146,
									"scores":	[-4.578712346906288]
								}, {
									"case":	147,
									"scores":	[-4.578712346906288]
								}, {
									"case":	148,
									"scores":	[-4.578712346906288]
								}, {
									"case":	149,
									"scores":	[-4.578712346906288]
								}, {
									"case":	150,
									"scores":	[-4.578712346906288]
								}, {
									"case":	151,
									"scores":	[-4.578712346906288]
								}, {
									"case":	152,
									"scores":	[-4.578712346906288]
								}, {
									"case":	153,
									"scores":	[-4.578712346906288]
								}, {
									"case":	154,
									"scores":	[-4.578712346906288]
								}, {
									"case":	155,
									"scores":	[-4.578712346906288]
								}, {
									"case":	156,
									"scores":	[-4.578712346906288]
								}, {
									"case":	157,
									"scores":	[-4.578712346906288]
								}, {
									"case":	158,
									"scores":	[-4.578712346906288]
								}, {
									"case":	159,
									"scores":	[-4.578712346906288]
								}, {
									"case":	160,
									"scores":	[-4.578712346906288]
								}, {
									"case":	161,
									"scores":	[-4.578712346906288]
								}, {
									"case":	162,
									"scores":	[-4.578712346906288]
								}, {
									"case":	163,
									"scores":	[-4.578712346906288]
								}, {
									"case":	164,
									"scores":	[-4.578712346906288]
								}, {
									"case":	165,
									"scores":	[-4.578712346906288]
								}, {
									"case":	166,
									"scores":	[-4.578712346906288]
								}, {
									"case":	167,
									"scores":	[-4.578712346906288]
								}, {
									"case":	168,
									"scores":	[-4.578712346906288]
								}, {
									"case":	169,
									"scores":	[-4.578712346906288]
								}, {
									"case":	170,
									"scores":	[-4.578712346906288]
								}, {
									"case":	171,
									"scores":	[-4.578712346906288]
								}, {
									"case":	172,
									"scores":	[-4.578712346906288]
								}, {
									"case":	173,
									"scores":	[-4.578712346906288]
								}, {
									"case":	174,
									"scores":	[-4.578712346906288]
								}, {
									"case":	175,
									"scores":	[-4.578712346906288]
								}, {
									"case":	176,
									"scores":	[-4.578712346906288]
								}, {
									"case":	177,
									"scores":	[-4.578712346906288]
								}, {
									"case":	178,
									"scores":	[-4.578712346906288]
								}, {
									"case":	179,
									"scores":	[-4.578712346906288]
								}, {
									"case":	180,
									"scores":	[-4.578712346906288]
								}, {
									"case":	181,
									"scores":	[-4.578712346906288]
								}, {
									"case":	182,
									"scores":	[-4.578712346906288]
								}, {
									"case":	183,
									"scores":	[-4.578712346906288]
								}, {
									"case":	184,
									"scores":	[-4.578712346906288]
								}, {
									"case":	185,
									"scores":	[-4.578712346906288]
								}, {
									"case":	186,
									"scores":	[-4.578712346906288]
								}, {
									"case":	187,
									"scores":	[-4.578712346906288]
								}, {
									"case":	188,
									"scores":	[-4.578712346906288]
								}, {
									"case":	189,
									"scores":	[-4.578712346906288]
								}, {
									"case":	190,
									"scores":	[-4.578712346906288]
								}, {
									"case":	191,
									"scores":	[-4.578712346906288]
								}, {
									"case":	192,
									"scores":	[-4.578712346906288]
								}, {
									"case":	193,
									"scores":	[-4.578712346906288]
								}, {
									"case":	194,
									"scores":	[-4.578712346906288]
								}, {
									"case":	195,
									"scores":	[-4.578712346906288]
								}, {
									"case":	196,
									"scores":	[-4.578712346906288]
								}, {
									"case":	197,
									"scores":	[-4.578712346906288]
								}, {
									"case":	198,
									"scores":	[-4.578712346906288]
								}, {
									"case":	199,
									"scores":	[-4.578712346906288]
								}, {
									"case":	200,
									"scores":	[-4.578712346906288]
								}, {
									"case":	201,
									"scores":	[-4.578712346906288]
								}, {
									"case":	202,
									"scores":	[-4.578712346906288]
								}, {
									"case":	203,
									"scores":	[-4.578712346906288]
								}, {
									"case":	204,
									"scores":	[-4.578712346906288]
								}, {
									"case":	205,
									"scores":	[-4.578712346906288]
								}, {
									"case":	206,
									"scores":	[-4.578712346906288]
								}, {
									"case":	207,
									"scores":	[-4.578712346906288]
								}, {
									"case":	208,
									"scores":	[-4.578712346906288]
								}, {
									"case":	209,
									"scores":	[-4.578712346906288]
								}, {
									"case":	210,
									"scores":	[-4.578712346906288]
								}, {
									"case":	211,
									"scores":	[-4.578712346906288]
								}, {
									"case":	212,
									"scores":	[-4.578712346906288]
								}, {
									"case":	213,
									"scores":	[-4.578712346906288]
								}, {
									"case":	214,
									"scores":	[-4.578712346906288]
								}, {
									"case":	215,
									"scores":	[-4.578712346906288]
								}, {
									"case":	216,
									"scores":	[-4.578712346906288]
								}, {
									"case":	217,
									"scores":	[-4.578712346906288]
								}, {
									"case":	218,
									"scores":	[-4.578712346906288]
								}, {
									"case":	219,
									"scores":	[-4.578712346906288]
								}, {
									"case":	220,
									"scores":	[-4.578712346906288]
								}, {
									"case":	221,
									"scores":	[-4.578712346906288]
								}, {
									"case":	222,
									"scores":	[-4.578712346906288]
								}, {
									"case":	223,
									"scores":	[-4.578712346906288]
								}, {
									"case":	224,
									"scores":	[-4.578712346906288]
								}, {
									"case":	225,
									"scores":	[-4.578712346906288]
								}, {
									"case":	226,
									"scores":	[-4.578712346906288]
								}, {
									"case":	227,
									"scores":	[-4.578712346906288]
								}, {
									"case":	228,
									"scores":	[-4.578712346906288]
								}, {
									"case":	229,
									"scores":	[-4.578712346906288]
								}, {
									"case":	230,
									"scores":	[-4.578712346906288]
								}, {
									"case":	231,
									"scores":	[-4.578712346906288]
								}, {
									"case":	232,
									"scores":	[-4.578712346906288]
								}, {
									"case":	233,
									"scores":	[-4.578712346906288]
								}, {
									"case":	234,
									"scores":	[-4.578712346906288]
								}, {
									"case":	235,
									"scores":	[-4.578712346906288]
								}, {
									"case":	236,
									"scores":	[-4.578712346906288]
								}, {
									"case":	237,
									"scores":	[-4.578712346906288]
								}, {
									"case":	238,
									"scores":	[-4.578712346906288]
								}, {
									"case":	239,
									"scores":	[-4.578712346906288]
								}, {
									"case":	240,
									"scores":	[-4.578712346906288]
								}, {
									"case":	241,
									"scores":	[-4.578712346906288]
								}, {
									"case":	242,
									"scores":	[-4.578712346906288]
								}, {
									"case":	243,
									"scores":	[-4.578712346906288]
								}, {
									"case":	244,
									"scores":	[-4.578712346906288]
								}, {
									"case":	245,
									"scores":	[-4.578712346906288]
								}, {
									"case":	246,
									"scores":	[-4.578712346906288]
								}, {
									"case":	247,
									"scores":	[-4.578712346906288]
								}, {
									"case":	248,
									"scores":	[-4.578712346906288]
								}, {
									"case":	249,
									"scores":	[-4.578712346906288]
								}, {
									"case":	250,
									"scores":	[-4.578712346906288]
								}, {
									"case":	251,
									"scores":	[-4.578712346906288]
								}, {
									"case":	252,
									"scores":	[-4.578712346906288]
								}, {
									"case":	253,
									"scores":	[-4.578712346906288]
								}, {
									"case":	254,
									"scores":	[-4.578712346906288]
								}, {
									"case":	255,
									"scores":	[-4.578712346906288]
								}, {
									"case":	256,
									"scores":	[-4.578712346906288]
								}, {
									"case":	257,
									"scores":	[-4.578712346906288]
								}, {
									"case":	258,
									"scores":	[-4.578712346906288]
								}, {
									"case":	259,
									"scores":	[-4.578712346906288]
								}, {
									"case":	260,
									"scores":	[-4.578712346906288]
								}, {
									"case":	261,
									"scores":	[-4.578712346906288]
								}, {
									"case":	262,
									"scores":	[-4.578712346906288]
								}, {
									"case":	263,
									"scores":	[-4.578712346906288]
								}, {
									"case":	264,
									"scores":	[-4.578712346906288]
								}, {
									"case":	265,
									"scores":	[-4.578712346906288]
								}, {
									"case":	266,
									"scores":	[-4.578712346906288]
								}, {
									"case":	267,
									"scores":	[-4.578712346906288]
								}, {
									"case":	268,
									"scores":	[-4.578712346906288]
								}, {
									"case":	269,
									"scores":	[-4.578712346906288]
								}, {
									"case":	270,
									"scores":	[-4.578712346906288]
								}, {
									"case":	271,
									"scores":	[-4.578712346906288]
								}, {
									"case":	272,
									"scores":	[-4.578712346906288]
								}, {
									"case":	273,
									"scores":	[-4.578712346906288]
								}, {
									"case":	274,
									"scores":	[-4.578712346906288]
								}, {
									"case":	275,
									"scores":	[-4.578712346906288]
								}, {
									"case":	276,
									"scores":	[-4.578712346906288]
								}, {
									"case":	277,
									"scores":	[-4.578712346906288]
								}, {
									"case":	278,
									"scores":	[-4.578712346906288]
								}, {
									"case":	279,
									"scores":	[-4.578712346906288]
								}, {
									"case":	280,
									"scores":	[-4.578712346906288]
								}, {
									"case":	281,
									"scores":	[-4.578712346906288]
								}, {
									"case":	282,
									"scores":	[-4.578712346906288]
								}, {
									"case":	283,
									"scores":	[-4.578712346906288]
								}, {
									"case":	284,
									"scores":	[-4.578712346906288]
								}, {
									"case":	285,
									"scores":	[-4.578712346906288]
								}, {
									"case":	286,
									"scores":	[-7.788089841606288, -7.95897753390629, -8.34465084160629, -7.05473608990629, -6.417895236906288, -8.32070670990629, -7.949305030706288, -7.0112261959062874, -7.2688113699062882, -7.9122046307062881, -8.32070670990629, -7.7032661169062884, -7.949305030706288, -7.9136916647062874, -8.222726716906287, -8.222726716906287, -8.222726716906287, -8.222726716906287, -8.43361583390629, -8.4687656307062866, -8.222726716906287, -8.222726716906287, -8.222726716906287, -8.222726716906287, -8.222726716906287, -8.222726716906287, -8.222726716906287, -8.222726716906287, -8.222726716906287, -8.222726716906287, -8.4687656307062866]
								}]
						}, {
							"switch":	64,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	3087,
							"begin_column":	2,
							"end_line":	3087,
							"end_column":	21,
							"patch_codes":	["if (!__is_neg(\"\", \"L3087\", 31, &(dateobj), sizeof (dateobj), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time), sizeof (dateobj->time), &(y), sizeof (y), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->d), sizeof (dateobj->time->d), &(return_value), sizeof (return_value), &(w), sizeof (w), &(d), sizeof (d), &(object), sizeof (object), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    dateobj->time->m = 1;\n", "{\n}\n", "dateobj->time->m = (-1)", "dateobj->time->m = (0 * d)", "dateobj->time->m = (0 * ht)", "dateobj->time->m = (0 * return_value_used)", "dateobj->time->m = (0 * w)", "dateobj->time->m = (0 * y)", "dateobj->time->m = (0)", "dateobj->time->m = (1)", "dateobj->time->m = (2)", "dateobj->time->m = (3)", "dateobj->time->m = (d != 0)", "dateobj->time->m = (d * ht)", "dateobj->time->m = (d * return_value_used)", "dateobj->time->m = (d * w)", "dateobj->time->m = (d * y)", "dateobj->time->m = (d + 0)", "dateobj->time->m = (d - 0)", "dateobj->time->m = (d == 0)", "dateobj->time->m = (dateobj != 0)", "dateobj->time->m = (dateobj == 0)", "dateobj->time->m = (ht != 0)", "dateobj->time->m = (ht != d)", "dateobj->time->m = (ht != return_value_used)", "dateobj->time->m = (ht != w)", "dateobj->time->m = (ht != y)", "dateobj->time->m = (ht * d)", "dateobj->time->m = (ht * return_value_used)", "dateobj->time->m = (ht * w)", "dateobj->time->m = (ht * y)", "dateobj->time->m = (ht + 0)", "dateobj->time->m = (ht + d)", "dateobj->time->m = (ht + return_value_used)", "dateobj->time->m = (ht + w)", "dateobj->time->m = (ht + y)", "dateobj->time->m = (ht - 0)", "dateobj->time->m = (ht - d)", "dateobj->time->m = (ht - return_value_used)", "dateobj->time->m = (ht - w)", "dateobj->time->m = (ht - y)", "dateobj->time->m = (ht == 0)", "dateobj->time->m = (ht == d)", "dateobj->time->m = (ht == return_value_used)", "dateobj->time->m = (ht == w)", "dateobj->time->m = (ht == y)", "dateobj->time->m = (object != 0)", "dateobj->time->m = (object == 0)", "dateobj->time->m = (return_value != 0)", "dateobj->time->m = (return_value != object)", "dateobj->time->m = (return_value != this_ptr)", "dateobj->time->m = (return_value == 0)", "dateobj->time->m = (return_value == object)", "dateobj->time->m = (return_value == this_ptr)", "dateobj->time->m = (return_value_ptr != 0)", "dateobj->time->m = (return_value_ptr == 0)", "dateobj->time->m = (return_value_used != 0)", "dateobj->time->m = (return_value_used != d)", "dateobj->time->m = (return_value_used != w)", "dateobj->time->m = (return_value_used != y)", "dateobj->time->m = (return_value_used * d)", "dateobj->time->m = (return_value_used * ht)", "dateobj->time->m = (return_value_used * w)", "dateobj->time->m = (return_value_used * y)", "dateobj->time->m = (return_value_used + 0)", "dateobj->time->m = (return_value_used + d)", "dateobj->time->m = (return_value_used + w)", "dateobj->time->m = (return_value_used + y)", "dateobj->time->m = (return_value_used - 0)", "dateobj->time->m = (return_value_used - d)", "dateobj->time->m = (return_value_used - w)", "dateobj->time->m = (return_value_used - y)", "dateobj->time->m = (return_value_used == 0)", "dateobj->time->m = (return_value_used == d)", "dateobj->time->m = (return_value_used == w)", "dateobj->time->m = (return_value_used == y)", "dateobj->time->m = (this_ptr != 0)", "dateobj->time->m = (this_ptr != object)", "dateobj->time->m = (this_ptr == 0)", "dateobj->time->m = (this_ptr == object)", "dateobj->time->m = (w != 0)", "dateobj->time->m = (w != d)", "dateobj->time->m = (w * d)", "dateobj->time->m = (w * ht)", "dateobj->time->m = (w * return_value_used)", "dateobj->time->m = (w * y)", "dateobj->time->m = (w + 0)", "dateobj->time->m = (w + d)", "dateobj->time->m = (w - 0)", "dateobj->time->m = (w - d)", "dateobj->time->m = (w == 0)", "dateobj->time->m = (w == d)", "dateobj->time->m = (y != 0)", "dateobj->time->m = (y != d)", "dateobj->time->m = (y != w)", "dateobj->time->m = (y * d)", "dateobj->time->m = (y * ht)", "dateobj->time->m = (y * return_value_used)", "dateobj->time->m = (y * w)", "dateobj->time->m = (y + 0)", "dateobj->time->m = (y + d)", "dateobj->time->m = (y + w)", "dateobj->time->m = (y - 0)", "dateobj->time->m = (y - d)", "dateobj->time->m = (y - w)", "dateobj->time->m = (y == 0)", "dateobj->time->m = (y == d)", "dateobj->time->m = (y == w)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.3768696053062879, -6.7050283479062873, -6.5879167153062879, -5.2610907759062879, -5.047622966906288, -6.7015470919062876, -6.7694916169062882, -5.3178560759062883, -5.6316537759062877, -6.4751408169062881, -5.9248185709062877, -6.0116035169062876, -6.7694916169062882, -6.4783982569062886, -5.9282998269062883, -5.9282998269062883, -5.9282998269062883, -5.9282998269062883, -6.3975598269062877, -6.6861879269062872, -5.9282998269062883, -5.9282998269062883, -5.9282998269062883, -5.9282998269062883, -5.9282998269062883, -5.9282998269062883, -5.9282998269062883, -5.9282998269062883, -5.9282998269062883, -5.9282998269062883, -6.6861879269062872]
								}, {
									"case":	2,
									"scores":	[-4.578712346906288]
								}, {
									"case":	3,
									"scores":	[-4.578712346906288]
								}, {
									"case":	4,
									"scores":	[-4.578712346906288]
								}, {
									"case":	5,
									"scores":	[-4.578712346906288]
								}, {
									"case":	6,
									"scores":	[-4.578712346906288]
								}, {
									"case":	7,
									"scores":	[-4.578712346906288]
								}, {
									"case":	8,
									"scores":	[-4.578712346906288]
								}, {
									"case":	9,
									"scores":	[-4.578712346906288]
								}, {
									"case":	10,
									"scores":	[-4.578712346906288]
								}, {
									"case":	11,
									"scores":	[-4.578712346906288]
								}, {
									"case":	12,
									"scores":	[-4.578712346906288]
								}, {
									"case":	13,
									"scores":	[-4.578712346906288]
								}, {
									"case":	14,
									"scores":	[-4.578712346906288]
								}, {
									"case":	15,
									"scores":	[-4.578712346906288]
								}, {
									"case":	16,
									"scores":	[-4.578712346906288]
								}, {
									"case":	17,
									"scores":	[-4.578712346906288]
								}, {
									"case":	18,
									"scores":	[-4.578712346906288]
								}, {
									"case":	19,
									"scores":	[-4.578712346906288]
								}, {
									"case":	20,
									"scores":	[-4.578712346906288]
								}, {
									"case":	21,
									"scores":	[-4.578712346906288]
								}, {
									"case":	22,
									"scores":	[-4.578712346906288]
								}, {
									"case":	23,
									"scores":	[-4.578712346906288]
								}, {
									"case":	24,
									"scores":	[-4.578712346906288]
								}, {
									"case":	25,
									"scores":	[-4.578712346906288]
								}, {
									"case":	26,
									"scores":	[-4.578712346906288]
								}, {
									"case":	27,
									"scores":	[-4.578712346906288]
								}, {
									"case":	28,
									"scores":	[-4.578712346906288]
								}, {
									"case":	29,
									"scores":	[-4.578712346906288]
								}, {
									"case":	30,
									"scores":	[-4.578712346906288]
								}, {
									"case":	31,
									"scores":	[-4.578712346906288]
								}, {
									"case":	32,
									"scores":	[-4.578712346906288]
								}, {
									"case":	33,
									"scores":	[-4.578712346906288]
								}, {
									"case":	34,
									"scores":	[-4.578712346906288]
								}, {
									"case":	35,
									"scores":	[-4.578712346906288]
								}, {
									"case":	36,
									"scores":	[-4.578712346906288]
								}, {
									"case":	37,
									"scores":	[-4.578712346906288]
								}, {
									"case":	38,
									"scores":	[-4.578712346906288]
								}, {
									"case":	39,
									"scores":	[-4.578712346906288]
								}, {
									"case":	40,
									"scores":	[-4.578712346906288]
								}, {
									"case":	41,
									"scores":	[-4.578712346906288]
								}, {
									"case":	42,
									"scores":	[-4.578712346906288]
								}, {
									"case":	43,
									"scores":	[-4.578712346906288]
								}, {
									"case":	44,
									"scores":	[-4.578712346906288]
								}, {
									"case":	45,
									"scores":	[-4.578712346906288]
								}, {
									"case":	46,
									"scores":	[-4.578712346906288]
								}, {
									"case":	47,
									"scores":	[-4.578712346906288]
								}, {
									"case":	48,
									"scores":	[-4.578712346906288]
								}, {
									"case":	49,
									"scores":	[-4.578712346906288]
								}, {
									"case":	50,
									"scores":	[-4.578712346906288]
								}, {
									"case":	51,
									"scores":	[-4.578712346906288]
								}, {
									"case":	52,
									"scores":	[-4.578712346906288]
								}, {
									"case":	53,
									"scores":	[-4.578712346906288]
								}, {
									"case":	54,
									"scores":	[-4.578712346906288]
								}, {
									"case":	55,
									"scores":	[-4.578712346906288]
								}, {
									"case":	56,
									"scores":	[-4.578712346906288]
								}, {
									"case":	57,
									"scores":	[-4.578712346906288]
								}, {
									"case":	58,
									"scores":	[-4.578712346906288]
								}, {
									"case":	59,
									"scores":	[-4.578712346906288]
								}, {
									"case":	60,
									"scores":	[-4.578712346906288]
								}, {
									"case":	61,
									"scores":	[-4.578712346906288]
								}, {
									"case":	62,
									"scores":	[-4.578712346906288]
								}, {
									"case":	63,
									"scores":	[-4.578712346906288]
								}, {
									"case":	64,
									"scores":	[-4.578712346906288]
								}, {
									"case":	65,
									"scores":	[-4.578712346906288]
								}, {
									"case":	66,
									"scores":	[-4.578712346906288]
								}, {
									"case":	67,
									"scores":	[-4.578712346906288]
								}, {
									"case":	68,
									"scores":	[-4.578712346906288]
								}, {
									"case":	69,
									"scores":	[-4.578712346906288]
								}, {
									"case":	70,
									"scores":	[-4.578712346906288]
								}, {
									"case":	71,
									"scores":	[-4.578712346906288]
								}, {
									"case":	72,
									"scores":	[-4.578712346906288]
								}, {
									"case":	73,
									"scores":	[-4.578712346906288]
								}, {
									"case":	74,
									"scores":	[-4.578712346906288]
								}, {
									"case":	75,
									"scores":	[-4.578712346906288]
								}, {
									"case":	76,
									"scores":	[-4.578712346906288]
								}, {
									"case":	77,
									"scores":	[-4.578712346906288]
								}, {
									"case":	78,
									"scores":	[-4.578712346906288]
								}, {
									"case":	79,
									"scores":	[-4.578712346906288]
								}, {
									"case":	80,
									"scores":	[-4.578712346906288]
								}, {
									"case":	81,
									"scores":	[-4.578712346906288]
								}, {
									"case":	82,
									"scores":	[-4.578712346906288]
								}, {
									"case":	83,
									"scores":	[-4.578712346906288]
								}, {
									"case":	84,
									"scores":	[-4.578712346906288]
								}, {
									"case":	85,
									"scores":	[-4.578712346906288]
								}, {
									"case":	86,
									"scores":	[-4.578712346906288]
								}, {
									"case":	87,
									"scores":	[-4.578712346906288]
								}, {
									"case":	88,
									"scores":	[-4.578712346906288]
								}, {
									"case":	89,
									"scores":	[-4.578712346906288]
								}, {
									"case":	90,
									"scores":	[-4.578712346906288]
								}, {
									"case":	91,
									"scores":	[-4.578712346906288]
								}, {
									"case":	92,
									"scores":	[-4.578712346906288]
								}, {
									"case":	93,
									"scores":	[-4.578712346906288]
								}, {
									"case":	94,
									"scores":	[-4.578712346906288]
								}, {
									"case":	95,
									"scores":	[-4.578712346906288]
								}, {
									"case":	96,
									"scores":	[-4.578712346906288]
								}, {
									"case":	97,
									"scores":	[-4.578712346906288]
								}, {
									"case":	98,
									"scores":	[-4.578712346906288]
								}, {
									"case":	99,
									"scores":	[-4.578712346906288]
								}, {
									"case":	100,
									"scores":	[-4.578712346906288]
								}, {
									"case":	101,
									"scores":	[-4.578712346906288]
								}, {
									"case":	102,
									"scores":	[-4.578712346906288]
								}, {
									"case":	103,
									"scores":	[-4.578712346906288]
								}, {
									"case":	104,
									"scores":	[-4.578712346906288]
								}, {
									"case":	105,
									"scores":	[-4.578712346906288]
								}, {
									"case":	106,
									"scores":	[-4.578712346906288]
								}, {
									"case":	107,
									"scores":	[-4.578712346906288]
								}, {
									"case":	108,
									"scores":	[-4.578712346906288]
								}]
						}]
				}, {
					"line":	3087,
					"switches":	[{
							"switch":	65,
							"types":	[[], [], [], [], [286], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [], [], [], [199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285], [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], [], [], [], [], [], []],
							"begin_line":	3088,
							"begin_column":	0,
							"end_line":	3088,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->d = (-1)", "dateobj->time->d = (0)", "dateobj->time->d = (1)", "dateobj->time->d = (2)", "dateobj->time->d = (3)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->m = (-1)", "dateobj->time->m = (0)", "dateobj->time->m = (1)", "dateobj->time->m = (2)", "dateobj->time->m = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->y = (-1)", "dateobj->time->y = (0)", "dateobj->time->y = (1)", "dateobj->time->y = (2)", "dateobj->time->y = (3)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((dateobj), 0, sizeof(php_date_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->d = 1", "dateobj->time->have_relative = 1", "dateobj->time->m = 1", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, d)", "dateobj->time->y = y", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3088\", 44, &(dateobj), sizeof (dateobj), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time), sizeof (dateobj->time), &(y), sizeof (y), &(w), sizeof (w), &(d), sizeof (d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(return_value), sizeof (return_value), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	2,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	3,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	4,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	5,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	6,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	7,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	8,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	9,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	10,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	11,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	12,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	13,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	14,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	15,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	16,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	17,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	18,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	19,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	20,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	21,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	22,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	23,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	24,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	25,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	26,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	27,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	28,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	29,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	30,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	31,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	32,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	33,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	34,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	35,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	36,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	37,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	38,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	39,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	40,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	41,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	42,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	43,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	44,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	45,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	46,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	47,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	48,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	49,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	50,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	51,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	52,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	53,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	54,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	55,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	56,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	57,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	58,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	59,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	60,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	61,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	62,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	63,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	64,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	65,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	66,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	67,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	68,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	69,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	70,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	71,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	72,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	73,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	74,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	75,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	76,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	77,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	78,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	79,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	80,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	81,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	82,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	83,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	84,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	85,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	86,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	87,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	88,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	89,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	90,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	91,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	92,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	93,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	94,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	95,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	96,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	97,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	98,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	99,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	100,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	101,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	102,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	103,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	104,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	105,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	106,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	107,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	108,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	109,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	110,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	111,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	112,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	113,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	114,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	115,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	116,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	117,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	118,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	119,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	120,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	121,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	122,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	123,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	124,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	125,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	126,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	127,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	128,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	129,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	130,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	131,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	132,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	133,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	134,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	135,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	136,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	137,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	138,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	139,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	140,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	141,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	142,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	143,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	144,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	145,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	146,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	147,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	148,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	149,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	150,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	151,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	152,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	153,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	154,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	155,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	156,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	157,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	158,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	159,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	160,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	161,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	162,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	163,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	164,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	165,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	166,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	167,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	168,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	169,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	170,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	171,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	172,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	173,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	174,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	175,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	176,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	177,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	178,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	179,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	180,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	181,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	182,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	183,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	184,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	185,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	186,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	187,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	188,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	189,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	190,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	191,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	192,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	193,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	194,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	195,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	196,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	197,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	198,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	199,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	200,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	201,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	202,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	203,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	204,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	205,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	206,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	207,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	208,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	209,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	210,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	211,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	212,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	213,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	214,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	215,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	216,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	217,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	218,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	219,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	220,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	221,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	222,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	223,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	224,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	225,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	226,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	227,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	228,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	229,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	230,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	231,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	232,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	233,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	234,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	235,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	236,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	237,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	238,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	239,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	240,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	241,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	242,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	243,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	244,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	245,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	246,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	247,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	248,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	249,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	250,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	251,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	252,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	253,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	254,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	255,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	256,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	257,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	258,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	259,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	260,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	261,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	262,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	263,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	264,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	265,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	266,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	267,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	268,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	269,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	270,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	271,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	272,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	273,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	274,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	275,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	276,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	277,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	278,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	279,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	280,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	281,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	282,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	283,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	284,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	285,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	286,
									"scores":	[-7.5447871956887678, -7.4379428879887683, -7.96929884868877, -6.5337014439887682, -6.4901915499887686, -6.7477767239887685, -7.6702935909887682, -6.4510339059887682, -5.8968605909887684, -7.79967206398877, -7.4282703847887683, -7.3911699847887675, -7.18223147098877, -7.4282703847887683, -7.3926570187887686, -7.7016920709887682, -7.7016920709887682, -7.7016920709887682, -7.7016920709887682, -7.7016920709887682, -7.7016920709887682, -7.7016920709887682, -7.7016920709887682, -7.7016920709887682, -7.7016920709887682, -7.7016920709887682, -7.7016920709887682, -7.7016920709887682, -7.7016920709887682, -7.7016920709887682, -7.7016920709887682, -7.91258118798877, -7.94773098478877, -7.7016920709887682, -7.7016920709887682, -7.7016920709887682, -7.7016920709887682, -7.7016920709887682, -7.7016920709887682, -7.7016920709887682, -7.7016920709887682, -7.7016920709887682, -7.7016920709887682, -7.94773098478877]
								}]
						}, {
							"switch":	66,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	3088,
							"begin_column":	2,
							"end_line":	3088,
							"end_column":	21,
							"patch_codes":	["if (!__is_neg(\"\", \"L3088\", 44, &(dateobj), sizeof (dateobj), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time), sizeof (dateobj->time), &(y), sizeof (y), &(w), sizeof (w), &(d), sizeof (d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(return_value), sizeof (return_value), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    dateobj->time->d = 1;\n", "{\n}\n", "dateobj->time->d = (-1)", "dateobj->time->d = (0 * d)", "dateobj->time->d = (0 * ht)", "dateobj->time->d = (0 * return_value_used)", "dateobj->time->d = (0 * w)", "dateobj->time->d = (0 * y)", "dateobj->time->d = (0)", "dateobj->time->d = (1)", "dateobj->time->d = (2)", "dateobj->time->d = (3)", "dateobj->time->d = (d != 0)", "dateobj->time->d = (d * ht)", "dateobj->time->d = (d * return_value_used)", "dateobj->time->d = (d * w)", "dateobj->time->d = (d * y)", "dateobj->time->d = (d + 0)", "dateobj->time->d = (d - 0)", "dateobj->time->d = (d == 0)", "dateobj->time->d = (dateobj != 0)", "dateobj->time->d = (dateobj == 0)", "dateobj->time->d = (ht != 0)", "dateobj->time->d = (ht != d)", "dateobj->time->d = (ht != return_value_used)", "dateobj->time->d = (ht != w)", "dateobj->time->d = (ht != y)", "dateobj->time->d = (ht * d)", "dateobj->time->d = (ht * return_value_used)", "dateobj->time->d = (ht * w)", "dateobj->time->d = (ht * y)", "dateobj->time->d = (ht + 0)", "dateobj->time->d = (ht + d)", "dateobj->time->d = (ht + return_value_used)", "dateobj->time->d = (ht + w)", "dateobj->time->d = (ht + y)", "dateobj->time->d = (ht - 0)", "dateobj->time->d = (ht - d)", "dateobj->time->d = (ht - return_value_used)", "dateobj->time->d = (ht - w)", "dateobj->time->d = (ht - y)", "dateobj->time->d = (ht == 0)", "dateobj->time->d = (ht == d)", "dateobj->time->d = (ht == return_value_used)", "dateobj->time->d = (ht == w)", "dateobj->time->d = (ht == y)", "dateobj->time->d = (object != 0)", "dateobj->time->d = (object == 0)", "dateobj->time->d = (return_value != 0)", "dateobj->time->d = (return_value != object)", "dateobj->time->d = (return_value != this_ptr)", "dateobj->time->d = (return_value == 0)", "dateobj->time->d = (return_value == object)", "dateobj->time->d = (return_value == this_ptr)", "dateobj->time->d = (return_value_ptr != 0)", "dateobj->time->d = (return_value_ptr == 0)", "dateobj->time->d = (return_value_used != 0)", "dateobj->time->d = (return_value_used != d)", "dateobj->time->d = (return_value_used != w)", "dateobj->time->d = (return_value_used != y)", "dateobj->time->d = (return_value_used * d)", "dateobj->time->d = (return_value_used * ht)", "dateobj->time->d = (return_value_used * w)", "dateobj->time->d = (return_value_used * y)", "dateobj->time->d = (return_value_used + 0)", "dateobj->time->d = (return_value_used + d)", "dateobj->time->d = (return_value_used + w)", "dateobj->time->d = (return_value_used + y)", "dateobj->time->d = (return_value_used - 0)", "dateobj->time->d = (return_value_used - d)", "dateobj->time->d = (return_value_used - w)", "dateobj->time->d = (return_value_used - y)", "dateobj->time->d = (return_value_used == 0)", "dateobj->time->d = (return_value_used == d)", "dateobj->time->d = (return_value_used == w)", "dateobj->time->d = (return_value_used == y)", "dateobj->time->d = (this_ptr != 0)", "dateobj->time->d = (this_ptr != object)", "dateobj->time->d = (this_ptr == 0)", "dateobj->time->d = (this_ptr == object)", "dateobj->time->d = (w != 0)", "dateobj->time->d = (w != d)", "dateobj->time->d = (w * d)", "dateobj->time->d = (w * ht)", "dateobj->time->d = (w * return_value_used)", "dateobj->time->d = (w * y)", "dateobj->time->d = (w + 0)", "dateobj->time->d = (w + d)", "dateobj->time->d = (w - 0)", "dateobj->time->d = (w - d)", "dateobj->time->d = (w == 0)", "dateobj->time->d = (w == d)", "dateobj->time->d = (y != 0)", "dateobj->time->d = (y != d)", "dateobj->time->d = (y != w)", "dateobj->time->d = (y * d)", "dateobj->time->d = (y * ht)", "dateobj->time->d = (y * return_value_used)", "dateobj->time->d = (y * w)", "dateobj->time->d = (y + 0)", "dateobj->time->d = (y + d)", "dateobj->time->d = (y + w)", "dateobj->time->d = (y - 0)", "dateobj->time->d = (y - d)", "dateobj->time->d = (y - w)", "dateobj->time->d = (y == 0)", "dateobj->time->d = (y == d)", "dateobj->time->d = (y == w)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.93332720798877, -6.09675864058877, -6.0128225169887681, -3.4444767785887684, -3.5012420785887688, -3.8150397785887691, -5.05386606058877, -5.3547822595887684, -4.43935325958877, -5.3165488635887685, -6.1612219095887681, -5.866871109588768, -5.4033338095887684, -6.1612219095887681, -5.8701285495887685, -5.3200301195887683, -5.3200301195887683, -5.3200301195887683, -5.3200301195887683, -5.3200301195887683, -5.3200301195887683, -5.3200301195887683, -5.3200301195887683, -5.3200301195887683, -5.3200301195887683, -5.3200301195887683, -5.3200301195887683, -5.3200301195887683, -5.3200301195887683, -5.3200301195887683, -5.3200301195887683, -5.7892901195887685, -6.07791821958877, -5.3200301195887683, -5.3200301195887683, -5.3200301195887683, -5.3200301195887683, -5.3200301195887683, -5.3200301195887683, -5.3200301195887683, -5.3200301195887683, -5.3200301195887683, -5.3200301195887683, -6.07791821958877]
								}, {
									"case":	2,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	3,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	4,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	5,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	6,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	7,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	8,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	9,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	10,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	11,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	12,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	13,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	14,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	15,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	16,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	17,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	18,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	19,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	20,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	21,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	22,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	23,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	24,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	25,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	26,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	27,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	28,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	29,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	30,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	31,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	32,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	33,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	34,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	35,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	36,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	37,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	38,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	39,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	40,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	41,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	42,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	43,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	44,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	45,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	46,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	47,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	48,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	49,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	50,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	51,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	52,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	53,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	54,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	55,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	56,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	57,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	58,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	59,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	60,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	61,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	62,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	63,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	64,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	65,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	66,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	67,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	68,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	69,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	70,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	71,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	72,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	73,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	74,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	75,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	76,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	77,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	78,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	79,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	80,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	81,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	82,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	83,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	84,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	85,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	86,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	87,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	88,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	89,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	90,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	91,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	92,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	93,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	94,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	95,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	96,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	97,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	98,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	99,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	100,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	101,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	102,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	103,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	104,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	105,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	106,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	107,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	108,
									"scores":	[-4.5585096395887685]
								}]
						}]
				}, {
					"line":	3088,
					"switches":	[{
							"switch":	67,
							"types":	[[], [], [], [], [286], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [], [], [], [199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285], [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], [], [], [], [], [], []],
							"begin_line":	3089,
							"begin_column":	0,
							"end_line":	3089,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->d = (-1)", "dateobj->time->d = (0)", "dateobj->time->d = (1)", "dateobj->time->d = (2)", "dateobj->time->d = (3)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->m = (-1)", "dateobj->time->m = (0)", "dateobj->time->m = (1)", "dateobj->time->m = (2)", "dateobj->time->m = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->y = (-1)", "dateobj->time->y = (0)", "dateobj->time->y = (1)", "dateobj->time->y = (2)", "dateobj->time->y = (3)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((dateobj), 0, sizeof(php_date_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->d = 1", "dateobj->time->have_relative = 1", "dateobj->time->m = 1", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, d)", "dateobj->time->y = y", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3089\", 44, &(dateobj), sizeof (dateobj), &(y), sizeof (y), &(w), sizeof (w), &(d), sizeof (d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->y), sizeof (dateobj->time->y), &(return_value), sizeof (return_value), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.53830693227125]
								}, {
									"case":	2,
									"scores":	[-4.53830693227125]
								}, {
									"case":	3,
									"scores":	[-4.53830693227125]
								}, {
									"case":	4,
									"scores":	[-4.53830693227125]
								}, {
									"case":	5,
									"scores":	[-4.53830693227125]
								}, {
									"case":	6,
									"scores":	[-4.53830693227125]
								}, {
									"case":	7,
									"scores":	[-4.53830693227125]
								}, {
									"case":	8,
									"scores":	[-4.53830693227125]
								}, {
									"case":	9,
									"scores":	[-4.53830693227125]
								}, {
									"case":	10,
									"scores":	[-4.53830693227125]
								}, {
									"case":	11,
									"scores":	[-4.53830693227125]
								}, {
									"case":	12,
									"scores":	[-4.53830693227125]
								}, {
									"case":	13,
									"scores":	[-4.53830693227125]
								}, {
									"case":	14,
									"scores":	[-4.53830693227125]
								}, {
									"case":	15,
									"scores":	[-4.53830693227125]
								}, {
									"case":	16,
									"scores":	[-4.53830693227125]
								}, {
									"case":	17,
									"scores":	[-4.53830693227125]
								}, {
									"case":	18,
									"scores":	[-4.53830693227125]
								}, {
									"case":	19,
									"scores":	[-4.53830693227125]
								}, {
									"case":	20,
									"scores":	[-4.53830693227125]
								}, {
									"case":	21,
									"scores":	[-4.53830693227125]
								}, {
									"case":	22,
									"scores":	[-4.53830693227125]
								}, {
									"case":	23,
									"scores":	[-4.53830693227125]
								}, {
									"case":	24,
									"scores":	[-4.53830693227125]
								}, {
									"case":	25,
									"scores":	[-4.53830693227125]
								}, {
									"case":	26,
									"scores":	[-4.53830693227125]
								}, {
									"case":	27,
									"scores":	[-4.53830693227125]
								}, {
									"case":	28,
									"scores":	[-4.53830693227125]
								}, {
									"case":	29,
									"scores":	[-4.53830693227125]
								}, {
									"case":	30,
									"scores":	[-4.53830693227125]
								}, {
									"case":	31,
									"scores":	[-4.53830693227125]
								}, {
									"case":	32,
									"scores":	[-4.53830693227125]
								}, {
									"case":	33,
									"scores":	[-4.53830693227125]
								}, {
									"case":	34,
									"scores":	[-4.53830693227125]
								}, {
									"case":	35,
									"scores":	[-4.53830693227125]
								}, {
									"case":	36,
									"scores":	[-4.53830693227125]
								}, {
									"case":	37,
									"scores":	[-4.53830693227125]
								}, {
									"case":	38,
									"scores":	[-4.53830693227125]
								}, {
									"case":	39,
									"scores":	[-4.53830693227125]
								}, {
									"case":	40,
									"scores":	[-4.53830693227125]
								}, {
									"case":	41,
									"scores":	[-4.53830693227125]
								}, {
									"case":	42,
									"scores":	[-4.53830693227125]
								}, {
									"case":	43,
									"scores":	[-4.53830693227125]
								}, {
									"case":	44,
									"scores":	[-4.53830693227125]
								}, {
									"case":	45,
									"scores":	[-4.53830693227125]
								}, {
									"case":	46,
									"scores":	[-4.53830693227125]
								}, {
									"case":	47,
									"scores":	[-4.53830693227125]
								}, {
									"case":	48,
									"scores":	[-4.53830693227125]
								}, {
									"case":	49,
									"scores":	[-4.53830693227125]
								}, {
									"case":	50,
									"scores":	[-4.53830693227125]
								}, {
									"case":	51,
									"scores":	[-4.53830693227125]
								}, {
									"case":	52,
									"scores":	[-4.53830693227125]
								}, {
									"case":	53,
									"scores":	[-4.53830693227125]
								}, {
									"case":	54,
									"scores":	[-4.53830693227125]
								}, {
									"case":	55,
									"scores":	[-4.53830693227125]
								}, {
									"case":	56,
									"scores":	[-4.53830693227125]
								}, {
									"case":	57,
									"scores":	[-4.53830693227125]
								}, {
									"case":	58,
									"scores":	[-4.53830693227125]
								}, {
									"case":	59,
									"scores":	[-4.53830693227125]
								}, {
									"case":	60,
									"scores":	[-4.53830693227125]
								}, {
									"case":	61,
									"scores":	[-4.53830693227125]
								}, {
									"case":	62,
									"scores":	[-4.53830693227125]
								}, {
									"case":	63,
									"scores":	[-4.53830693227125]
								}, {
									"case":	64,
									"scores":	[-4.53830693227125]
								}, {
									"case":	65,
									"scores":	[-4.53830693227125]
								}, {
									"case":	66,
									"scores":	[-4.53830693227125]
								}, {
									"case":	67,
									"scores":	[-4.53830693227125]
								}, {
									"case":	68,
									"scores":	[-4.53830693227125]
								}, {
									"case":	69,
									"scores":	[-4.53830693227125]
								}, {
									"case":	70,
									"scores":	[-4.53830693227125]
								}, {
									"case":	71,
									"scores":	[-4.53830693227125]
								}, {
									"case":	72,
									"scores":	[-4.53830693227125]
								}, {
									"case":	73,
									"scores":	[-4.53830693227125]
								}, {
									"case":	74,
									"scores":	[-4.53830693227125]
								}, {
									"case":	75,
									"scores":	[-4.53830693227125]
								}, {
									"case":	76,
									"scores":	[-4.53830693227125]
								}, {
									"case":	77,
									"scores":	[-4.53830693227125]
								}, {
									"case":	78,
									"scores":	[-4.53830693227125]
								}, {
									"case":	79,
									"scores":	[-4.53830693227125]
								}, {
									"case":	80,
									"scores":	[-4.53830693227125]
								}, {
									"case":	81,
									"scores":	[-4.53830693227125]
								}, {
									"case":	82,
									"scores":	[-4.53830693227125]
								}, {
									"case":	83,
									"scores":	[-4.53830693227125]
								}, {
									"case":	84,
									"scores":	[-4.53830693227125]
								}, {
									"case":	85,
									"scores":	[-4.53830693227125]
								}, {
									"case":	86,
									"scores":	[-4.53830693227125]
								}, {
									"case":	87,
									"scores":	[-4.53830693227125]
								}, {
									"case":	88,
									"scores":	[-4.53830693227125]
								}, {
									"case":	89,
									"scores":	[-4.53830693227125]
								}, {
									"case":	90,
									"scores":	[-4.53830693227125]
								}, {
									"case":	91,
									"scores":	[-4.53830693227125]
								}, {
									"case":	92,
									"scores":	[-4.53830693227125]
								}, {
									"case":	93,
									"scores":	[-4.53830693227125]
								}, {
									"case":	94,
									"scores":	[-4.53830693227125]
								}, {
									"case":	95,
									"scores":	[-4.53830693227125]
								}, {
									"case":	96,
									"scores":	[-4.53830693227125]
								}, {
									"case":	97,
									"scores":	[-4.53830693227125]
								}, {
									"case":	98,
									"scores":	[-4.53830693227125]
								}, {
									"case":	99,
									"scores":	[-4.53830693227125]
								}, {
									"case":	100,
									"scores":	[-4.53830693227125]
								}, {
									"case":	101,
									"scores":	[-4.53830693227125]
								}, {
									"case":	102,
									"scores":	[-4.53830693227125]
								}, {
									"case":	103,
									"scores":	[-4.53830693227125]
								}, {
									"case":	104,
									"scores":	[-4.53830693227125]
								}, {
									"case":	105,
									"scores":	[-4.53830693227125]
								}, {
									"case":	106,
									"scores":	[-4.53830693227125]
								}, {
									"case":	107,
									"scores":	[-4.53830693227125]
								}, {
									"case":	108,
									"scores":	[-4.53830693227125]
								}, {
									"case":	109,
									"scores":	[-4.53830693227125]
								}, {
									"case":	110,
									"scores":	[-4.53830693227125]
								}, {
									"case":	111,
									"scores":	[-4.53830693227125]
								}, {
									"case":	112,
									"scores":	[-4.53830693227125]
								}, {
									"case":	113,
									"scores":	[-4.53830693227125]
								}, {
									"case":	114,
									"scores":	[-4.53830693227125]
								}, {
									"case":	115,
									"scores":	[-4.53830693227125]
								}, {
									"case":	116,
									"scores":	[-4.53830693227125]
								}, {
									"case":	117,
									"scores":	[-4.53830693227125]
								}, {
									"case":	118,
									"scores":	[-4.53830693227125]
								}, {
									"case":	119,
									"scores":	[-4.53830693227125]
								}, {
									"case":	120,
									"scores":	[-4.53830693227125]
								}, {
									"case":	121,
									"scores":	[-4.53830693227125]
								}, {
									"case":	122,
									"scores":	[-4.53830693227125]
								}, {
									"case":	123,
									"scores":	[-4.53830693227125]
								}, {
									"case":	124,
									"scores":	[-4.53830693227125]
								}, {
									"case":	125,
									"scores":	[-4.53830693227125]
								}, {
									"case":	126,
									"scores":	[-4.53830693227125]
								}, {
									"case":	127,
									"scores":	[-4.53830693227125]
								}, {
									"case":	128,
									"scores":	[-4.53830693227125]
								}, {
									"case":	129,
									"scores":	[-4.53830693227125]
								}, {
									"case":	130,
									"scores":	[-4.53830693227125]
								}, {
									"case":	131,
									"scores":	[-4.53830693227125]
								}, {
									"case":	132,
									"scores":	[-4.53830693227125]
								}, {
									"case":	133,
									"scores":	[-4.53830693227125]
								}, {
									"case":	134,
									"scores":	[-4.53830693227125]
								}, {
									"case":	135,
									"scores":	[-4.53830693227125]
								}, {
									"case":	136,
									"scores":	[-4.53830693227125]
								}, {
									"case":	137,
									"scores":	[-4.53830693227125]
								}, {
									"case":	138,
									"scores":	[-4.53830693227125]
								}, {
									"case":	139,
									"scores":	[-4.53830693227125]
								}, {
									"case":	140,
									"scores":	[-4.53830693227125]
								}, {
									"case":	141,
									"scores":	[-4.53830693227125]
								}, {
									"case":	142,
									"scores":	[-4.53830693227125]
								}, {
									"case":	143,
									"scores":	[-4.53830693227125]
								}, {
									"case":	144,
									"scores":	[-4.53830693227125]
								}, {
									"case":	145,
									"scores":	[-4.53830693227125]
								}, {
									"case":	146,
									"scores":	[-4.53830693227125]
								}, {
									"case":	147,
									"scores":	[-4.53830693227125]
								}, {
									"case":	148,
									"scores":	[-4.53830693227125]
								}, {
									"case":	149,
									"scores":	[-4.53830693227125]
								}, {
									"case":	150,
									"scores":	[-4.53830693227125]
								}, {
									"case":	151,
									"scores":	[-4.53830693227125]
								}, {
									"case":	152,
									"scores":	[-4.53830693227125]
								}, {
									"case":	153,
									"scores":	[-4.53830693227125]
								}, {
									"case":	154,
									"scores":	[-4.53830693227125]
								}, {
									"case":	155,
									"scores":	[-4.53830693227125]
								}, {
									"case":	156,
									"scores":	[-4.53830693227125]
								}, {
									"case":	157,
									"scores":	[-4.53830693227125]
								}, {
									"case":	158,
									"scores":	[-4.53830693227125]
								}, {
									"case":	159,
									"scores":	[-4.53830693227125]
								}, {
									"case":	160,
									"scores":	[-4.53830693227125]
								}, {
									"case":	161,
									"scores":	[-4.53830693227125]
								}, {
									"case":	162,
									"scores":	[-4.53830693227125]
								}, {
									"case":	163,
									"scores":	[-4.53830693227125]
								}, {
									"case":	164,
									"scores":	[-4.53830693227125]
								}, {
									"case":	165,
									"scores":	[-4.53830693227125]
								}, {
									"case":	166,
									"scores":	[-4.53830693227125]
								}, {
									"case":	167,
									"scores":	[-4.53830693227125]
								}, {
									"case":	168,
									"scores":	[-4.53830693227125]
								}, {
									"case":	169,
									"scores":	[-4.53830693227125]
								}, {
									"case":	170,
									"scores":	[-4.53830693227125]
								}, {
									"case":	171,
									"scores":	[-4.53830693227125]
								}, {
									"case":	172,
									"scores":	[-4.53830693227125]
								}, {
									"case":	173,
									"scores":	[-4.53830693227125]
								}, {
									"case":	174,
									"scores":	[-4.53830693227125]
								}, {
									"case":	175,
									"scores":	[-4.53830693227125]
								}, {
									"case":	176,
									"scores":	[-4.53830693227125]
								}, {
									"case":	177,
									"scores":	[-4.53830693227125]
								}, {
									"case":	178,
									"scores":	[-4.53830693227125]
								}, {
									"case":	179,
									"scores":	[-4.53830693227125]
								}, {
									"case":	180,
									"scores":	[-4.53830693227125]
								}, {
									"case":	181,
									"scores":	[-4.53830693227125]
								}, {
									"case":	182,
									"scores":	[-4.53830693227125]
								}, {
									"case":	183,
									"scores":	[-4.53830693227125]
								}, {
									"case":	184,
									"scores":	[-4.53830693227125]
								}, {
									"case":	185,
									"scores":	[-4.53830693227125]
								}, {
									"case":	186,
									"scores":	[-4.53830693227125]
								}, {
									"case":	187,
									"scores":	[-4.53830693227125]
								}, {
									"case":	188,
									"scores":	[-4.53830693227125]
								}, {
									"case":	189,
									"scores":	[-4.53830693227125]
								}, {
									"case":	190,
									"scores":	[-4.53830693227125]
								}, {
									"case":	191,
									"scores":	[-4.53830693227125]
								}, {
									"case":	192,
									"scores":	[-4.53830693227125]
								}, {
									"case":	193,
									"scores":	[-4.53830693227125]
								}, {
									"case":	194,
									"scores":	[-4.53830693227125]
								}, {
									"case":	195,
									"scores":	[-4.53830693227125]
								}, {
									"case":	196,
									"scores":	[-4.53830693227125]
								}, {
									"case":	197,
									"scores":	[-4.53830693227125]
								}, {
									"case":	198,
									"scores":	[-4.53830693227125]
								}, {
									"case":	199,
									"scores":	[-4.53830693227125]
								}, {
									"case":	200,
									"scores":	[-4.53830693227125]
								}, {
									"case":	201,
									"scores":	[-4.53830693227125]
								}, {
									"case":	202,
									"scores":	[-4.53830693227125]
								}, {
									"case":	203,
									"scores":	[-4.53830693227125]
								}, {
									"case":	204,
									"scores":	[-4.53830693227125]
								}, {
									"case":	205,
									"scores":	[-4.53830693227125]
								}, {
									"case":	206,
									"scores":	[-4.53830693227125]
								}, {
									"case":	207,
									"scores":	[-4.53830693227125]
								}, {
									"case":	208,
									"scores":	[-4.53830693227125]
								}, {
									"case":	209,
									"scores":	[-4.53830693227125]
								}, {
									"case":	210,
									"scores":	[-4.53830693227125]
								}, {
									"case":	211,
									"scores":	[-4.53830693227125]
								}, {
									"case":	212,
									"scores":	[-4.53830693227125]
								}, {
									"case":	213,
									"scores":	[-4.53830693227125]
								}, {
									"case":	214,
									"scores":	[-4.53830693227125]
								}, {
									"case":	215,
									"scores":	[-4.53830693227125]
								}, {
									"case":	216,
									"scores":	[-4.53830693227125]
								}, {
									"case":	217,
									"scores":	[-4.53830693227125]
								}, {
									"case":	218,
									"scores":	[-4.53830693227125]
								}, {
									"case":	219,
									"scores":	[-4.53830693227125]
								}, {
									"case":	220,
									"scores":	[-4.53830693227125]
								}, {
									"case":	221,
									"scores":	[-4.53830693227125]
								}, {
									"case":	222,
									"scores":	[-4.53830693227125]
								}, {
									"case":	223,
									"scores":	[-4.53830693227125]
								}, {
									"case":	224,
									"scores":	[-4.53830693227125]
								}, {
									"case":	225,
									"scores":	[-4.53830693227125]
								}, {
									"case":	226,
									"scores":	[-4.53830693227125]
								}, {
									"case":	227,
									"scores":	[-4.53830693227125]
								}, {
									"case":	228,
									"scores":	[-4.53830693227125]
								}, {
									"case":	229,
									"scores":	[-4.53830693227125]
								}, {
									"case":	230,
									"scores":	[-4.53830693227125]
								}, {
									"case":	231,
									"scores":	[-4.53830693227125]
								}, {
									"case":	232,
									"scores":	[-4.53830693227125]
								}, {
									"case":	233,
									"scores":	[-4.53830693227125]
								}, {
									"case":	234,
									"scores":	[-4.53830693227125]
								}, {
									"case":	235,
									"scores":	[-4.53830693227125]
								}, {
									"case":	236,
									"scores":	[-4.53830693227125]
								}, {
									"case":	237,
									"scores":	[-4.53830693227125]
								}, {
									"case":	238,
									"scores":	[-4.53830693227125]
								}, {
									"case":	239,
									"scores":	[-4.53830693227125]
								}, {
									"case":	240,
									"scores":	[-4.53830693227125]
								}, {
									"case":	241,
									"scores":	[-4.53830693227125]
								}, {
									"case":	242,
									"scores":	[-4.53830693227125]
								}, {
									"case":	243,
									"scores":	[-4.53830693227125]
								}, {
									"case":	244,
									"scores":	[-4.53830693227125]
								}, {
									"case":	245,
									"scores":	[-4.53830693227125]
								}, {
									"case":	246,
									"scores":	[-4.53830693227125]
								}, {
									"case":	247,
									"scores":	[-4.53830693227125]
								}, {
									"case":	248,
									"scores":	[-4.53830693227125]
								}, {
									"case":	249,
									"scores":	[-4.53830693227125]
								}, {
									"case":	250,
									"scores":	[-4.53830693227125]
								}, {
									"case":	251,
									"scores":	[-4.53830693227125]
								}, {
									"case":	252,
									"scores":	[-4.53830693227125]
								}, {
									"case":	253,
									"scores":	[-4.53830693227125]
								}, {
									"case":	254,
									"scores":	[-4.53830693227125]
								}, {
									"case":	255,
									"scores":	[-4.53830693227125]
								}, {
									"case":	256,
									"scores":	[-4.53830693227125]
								}, {
									"case":	257,
									"scores":	[-4.53830693227125]
								}, {
									"case":	258,
									"scores":	[-4.53830693227125]
								}, {
									"case":	259,
									"scores":	[-4.53830693227125]
								}, {
									"case":	260,
									"scores":	[-4.53830693227125]
								}, {
									"case":	261,
									"scores":	[-4.53830693227125]
								}, {
									"case":	262,
									"scores":	[-4.53830693227125]
								}, {
									"case":	263,
									"scores":	[-4.53830693227125]
								}, {
									"case":	264,
									"scores":	[-4.53830693227125]
								}, {
									"case":	265,
									"scores":	[-4.53830693227125]
								}, {
									"case":	266,
									"scores":	[-4.53830693227125]
								}, {
									"case":	267,
									"scores":	[-4.53830693227125]
								}, {
									"case":	268,
									"scores":	[-4.53830693227125]
								}, {
									"case":	269,
									"scores":	[-4.53830693227125]
								}, {
									"case":	270,
									"scores":	[-4.53830693227125]
								}, {
									"case":	271,
									"scores":	[-4.53830693227125]
								}, {
									"case":	272,
									"scores":	[-4.53830693227125]
								}, {
									"case":	273,
									"scores":	[-4.53830693227125]
								}, {
									"case":	274,
									"scores":	[-4.53830693227125]
								}, {
									"case":	275,
									"scores":	[-4.53830693227125]
								}, {
									"case":	276,
									"scores":	[-4.53830693227125]
								}, {
									"case":	277,
									"scores":	[-4.53830693227125]
								}, {
									"case":	278,
									"scores":	[-4.53830693227125]
								}, {
									"case":	279,
									"scores":	[-4.53830693227125]
								}, {
									"case":	280,
									"scores":	[-4.53830693227125]
								}, {
									"case":	281,
									"scores":	[-4.53830693227125]
								}, {
									"case":	282,
									"scores":	[-4.53830693227125]
								}, {
									"case":	283,
									"scores":	[-4.53830693227125]
								}, {
									"case":	284,
									"scores":	[-4.53830693227125]
								}, {
									"case":	285,
									"scores":	[-4.53830693227125]
								}, {
									"case":	286,
									"scores":	[-8.55459448837125, -5.36908711467125, -5.32557722067125, -5.58316239467125, -7.82147260467125, -8.97910614137125, -7.46084119867125, -8.80947935667125, -7.46084119867125, -6.90666788367125, -8.90722658737125, -9.24424754437125, -8.19203876367125, -8.43807767747125, -8.40246431147125, -8.71149936367125, -8.71149936367125, -8.71149936367125, -8.71149936367125, -8.71149936367125, -8.71149936367125, -8.71149936367125, -8.71149936367125, -8.71149936367125, -8.71149936367125, -8.71149936367125, -8.71149936367125, -8.71149936367125, -8.71149936367125, -8.71149936367125, -8.71149936367125, -8.92238848067125, -8.95753827747125, -8.71149936367125, -8.71149936367125, -8.71149936367125, -8.71149936367125, -8.71149936367125, -8.71149936367125, -8.71149936367125, -8.71149936367125, -8.71149936367125, -8.71149936367125, -8.95753827747125]
								}]
						}, {
							"switch":	68,
							"types":	[[], [], [1], [], [], [], [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322], [], [3, 4, 5], [], [], [], [], [], [], [], [2]],
							"begin_line":	3089,
							"begin_column":	2,
							"end_line":	3089,
							"end_column":	63,
							"patch_codes":	["if (!__is_neg(\"\", \"L3089\", 44, &(dateobj), sizeof (dateobj), &(y), sizeof (y), &(w), sizeof (w), &(d), sizeof (d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->y), sizeof (dateobj->time->y), &(return_value), sizeof (return_value), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, d);\n", "{\n}\n", "dateobj->time->relative.d = timelib_day_of_week(y, w, d)", "dateobj->time->relative.d = timelib_day_of_year(y, w, d)", "dateobj->time->relative.d = timelib_iso_day_of_week(y, w, d)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((0 * d), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((0 * ht), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((0 * return_value_used), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((0 * w), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((0 * y), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((d != 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((d * ht), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((d * return_value_used), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((d * w), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((d * y), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((d + 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((d - 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((d == 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((d), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((dateobj != 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((dateobj == 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht != 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht != d), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht != return_value_used), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht != w), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht != y), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht * d), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht * return_value_used), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht * w), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht * y), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht + 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht + d), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht + return_value_used), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht + w), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht + y), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht - 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht - d), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht - return_value_used), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht - w), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht - y), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht == 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht == d), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht == return_value_used), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht == w), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((ht == y), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((object != 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((object == 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value != 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value != object), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value != this_ptr), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value == 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value == object), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value == this_ptr), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value_ptr != 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value_ptr == 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value_used != 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value_used != d), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value_used != w), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value_used != y), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value_used * d), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value_used * ht), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value_used * w), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value_used * y), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value_used + 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value_used + d), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value_used + w), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value_used + y), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value_used - 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value_used - d), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value_used - w), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value_used - y), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value_used == 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value_used == d), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value_used == w), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((return_value_used == y), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((this_ptr != 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((this_ptr != object), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((this_ptr == 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((this_ptr == object), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((w != 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((w != d), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((w * d), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((w * ht), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((w * return_value_used), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((w * y), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((w + 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((w + d), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((w - 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((w - d), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((w == 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((w == d), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((w), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((y != 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((y != d), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((y != w), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((y * d), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((y * ht), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((y * return_value_used), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((y * w), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((y + 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((y + d), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((y + w), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((y - 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((y - d), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((y - w), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((y == 0), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((y == d), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((y == w), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr((y), w, d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (0 * d), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (0 * ht), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (0 * return_value_used), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (0 * w), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (0 * y), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (d != 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (d * ht), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (d * return_value_used), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (d * w), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (d * y), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (d + 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (d - 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (d == 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (d), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (dateobj != 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (dateobj == 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht != 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht != d), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht != return_value_used), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht != w), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht != y), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht * d), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht * return_value_used), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht * w), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht * y), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht + 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht + d), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht + return_value_used), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht + w), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht + y), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht - 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht - d), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht - return_value_used), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht - w), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht - y), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht == 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht == d), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht == return_value_used), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht == w), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (ht == y), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (object != 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (object == 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value != 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value != object), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value != this_ptr), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value == 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value == object), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value == this_ptr), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value_ptr != 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value_ptr == 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value_used != 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value_used != d), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value_used != w), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value_used != y), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value_used * d), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value_used * ht), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value_used * w), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value_used * y), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value_used + 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value_used + d), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value_used + w), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value_used + y), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value_used - 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value_used - d), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value_used - w), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value_used - y), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value_used == 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value_used == d), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value_used == w), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (return_value_used == y), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (this_ptr != 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (this_ptr != object), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (this_ptr == 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (this_ptr == object), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (w != 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (w != d), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (w * d), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (w * ht), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (w * return_value_used), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (w * y), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (w + 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (w + d), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (w - 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (w - d), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (w == 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (w == d), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (w), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (y != 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (y != d), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (y != w), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (y * d), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (y * ht), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (y * return_value_used), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (y * w), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (y + 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (y + d), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (y + w), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (y - 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (y - d), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (y - w), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (y == 0), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (y == d), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (y == w), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, (y), d)", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (0 * d))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (0 * ht))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (0 * return_value_used))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (0 * w))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (0 * y))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (d != 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (d * ht))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (d * return_value_used))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (d * w))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (d * y))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (d + 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (d - 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (d == 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (d))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (dateobj != 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (dateobj == 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht != 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht != d))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht != return_value_used))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht != w))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht != y))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht * d))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht * return_value_used))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht * w))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht * y))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht + 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht + d))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht + return_value_used))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht + w))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht + y))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht - 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht - d))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht - return_value_used))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht - w))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht - y))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht == 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht == d))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht == return_value_used))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht == w))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (ht == y))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (object != 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (object == 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value != 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value != object))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value != this_ptr))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value == 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value == object))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value == this_ptr))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value_ptr != 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value_ptr == 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value_used != 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value_used != d))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value_used != w))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value_used != y))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value_used * d))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value_used * ht))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value_used * w))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value_used * y))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value_used + 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value_used + d))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value_used + w))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value_used + y))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value_used - 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value_used - d))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value_used - w))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value_used - y))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value_used == 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value_used == d))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value_used == w))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (return_value_used == y))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (this_ptr != 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (this_ptr != object))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (this_ptr == 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (this_ptr == object))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (w != 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (w != d))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (w * d))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (w * ht))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (w * return_value_used))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (w * y))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (w + 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (w + d))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (w - 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (w - d))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (w == 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (w == d))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (w))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (y != 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (y != d))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (y != w))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (y * d))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (y * ht))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (y * return_value_used))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (y * w))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (y + 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (y + d))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (y + w))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (y - 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (y - d))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (y - w))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (y == 0))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (y == d))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (y == w))", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, (y))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.91931789067125, -3.5160664022712487, -3.572831702271249, -3.8866294022712493, -5.17296332327125, -5.9988131996712486, -5.34077294227125, -6.07926806727125, -5.34077294227125, -4.42534394227125, -6.5984353891712484, -6.7497474901712486, -5.38932449227125, -6.1472125922712486, -5.85611923227125, -5.30602080227125, -5.30602080227125, -5.30602080227125, -5.30602080227125, -5.30602080227125, -5.30602080227125, -5.30602080227125, -5.30602080227125, -5.30602080227125, -5.30602080227125, -5.30602080227125, -5.30602080227125, -5.30602080227125, -5.30602080227125, -5.30602080227125, -5.30602080227125, -5.77528080227125, -6.06390890227125, -5.30602080227125, -5.30602080227125, -5.30602080227125, -5.30602080227125, -5.30602080227125, -5.30602080227125, -5.30602080227125, -5.30602080227125, -5.30602080227125, -5.30602080227125, -6.06390890227125]
								}, {
									"case":	2,
									"scores":	[-4.53830693227125]
								}, {
									"case":	3,
									"scores":	[-4.53830693227125]
								}, {
									"case":	4,
									"scores":	[-4.53830693227125]
								}, {
									"case":	5,
									"scores":	[-4.53830693227125]
								}, {
									"case":	6,
									"scores":	[-4.53830693227125]
								}, {
									"case":	7,
									"scores":	[-4.53830693227125]
								}, {
									"case":	8,
									"scores":	[-4.53830693227125]
								}, {
									"case":	9,
									"scores":	[-4.53830693227125]
								}, {
									"case":	10,
									"scores":	[-4.53830693227125]
								}, {
									"case":	11,
									"scores":	[-4.53830693227125]
								}, {
									"case":	12,
									"scores":	[-4.53830693227125]
								}, {
									"case":	13,
									"scores":	[-4.53830693227125]
								}, {
									"case":	14,
									"scores":	[-4.53830693227125]
								}, {
									"case":	15,
									"scores":	[-4.53830693227125]
								}, {
									"case":	16,
									"scores":	[-4.53830693227125]
								}, {
									"case":	17,
									"scores":	[-4.53830693227125]
								}, {
									"case":	18,
									"scores":	[-4.53830693227125]
								}, {
									"case":	19,
									"scores":	[-4.53830693227125]
								}, {
									"case":	20,
									"scores":	[-4.53830693227125]
								}, {
									"case":	21,
									"scores":	[-4.53830693227125]
								}, {
									"case":	22,
									"scores":	[-4.53830693227125]
								}, {
									"case":	23,
									"scores":	[-4.53830693227125]
								}, {
									"case":	24,
									"scores":	[-4.53830693227125]
								}, {
									"case":	25,
									"scores":	[-4.53830693227125]
								}, {
									"case":	26,
									"scores":	[-4.53830693227125]
								}, {
									"case":	27,
									"scores":	[-4.53830693227125]
								}, {
									"case":	28,
									"scores":	[-4.53830693227125]
								}, {
									"case":	29,
									"scores":	[-4.53830693227125]
								}, {
									"case":	30,
									"scores":	[-4.53830693227125]
								}, {
									"case":	31,
									"scores":	[-4.53830693227125]
								}, {
									"case":	32,
									"scores":	[-4.53830693227125]
								}, {
									"case":	33,
									"scores":	[-4.53830693227125]
								}, {
									"case":	34,
									"scores":	[-4.53830693227125]
								}, {
									"case":	35,
									"scores":	[-4.53830693227125]
								}, {
									"case":	36,
									"scores":	[-4.53830693227125]
								}, {
									"case":	37,
									"scores":	[-4.53830693227125]
								}, {
									"case":	38,
									"scores":	[-4.53830693227125]
								}, {
									"case":	39,
									"scores":	[-4.53830693227125]
								}, {
									"case":	40,
									"scores":	[-4.53830693227125]
								}, {
									"case":	41,
									"scores":	[-4.53830693227125]
								}, {
									"case":	42,
									"scores":	[-4.53830693227125]
								}, {
									"case":	43,
									"scores":	[-4.53830693227125]
								}, {
									"case":	44,
									"scores":	[-4.53830693227125]
								}, {
									"case":	45,
									"scores":	[-4.53830693227125]
								}, {
									"case":	46,
									"scores":	[-4.53830693227125]
								}, {
									"case":	47,
									"scores":	[-4.53830693227125]
								}, {
									"case":	48,
									"scores":	[-4.53830693227125]
								}, {
									"case":	49,
									"scores":	[-4.53830693227125]
								}, {
									"case":	50,
									"scores":	[-4.53830693227125]
								}, {
									"case":	51,
									"scores":	[-4.53830693227125]
								}, {
									"case":	52,
									"scores":	[-4.53830693227125]
								}, {
									"case":	53,
									"scores":	[-4.53830693227125]
								}, {
									"case":	54,
									"scores":	[-4.53830693227125]
								}, {
									"case":	55,
									"scores":	[-4.53830693227125]
								}, {
									"case":	56,
									"scores":	[-4.53830693227125]
								}, {
									"case":	57,
									"scores":	[-4.53830693227125]
								}, {
									"case":	58,
									"scores":	[-4.53830693227125]
								}, {
									"case":	59,
									"scores":	[-4.53830693227125]
								}, {
									"case":	60,
									"scores":	[-4.53830693227125]
								}, {
									"case":	61,
									"scores":	[-4.53830693227125]
								}, {
									"case":	62,
									"scores":	[-4.53830693227125]
								}, {
									"case":	63,
									"scores":	[-4.53830693227125]
								}, {
									"case":	64,
									"scores":	[-4.53830693227125]
								}, {
									"case":	65,
									"scores":	[-4.53830693227125]
								}, {
									"case":	66,
									"scores":	[-4.53830693227125]
								}, {
									"case":	67,
									"scores":	[-4.53830693227125]
								}, {
									"case":	68,
									"scores":	[-4.53830693227125]
								}, {
									"case":	69,
									"scores":	[-4.53830693227125]
								}, {
									"case":	70,
									"scores":	[-4.53830693227125]
								}, {
									"case":	71,
									"scores":	[-4.53830693227125]
								}, {
									"case":	72,
									"scores":	[-4.53830693227125]
								}, {
									"case":	73,
									"scores":	[-4.53830693227125]
								}, {
									"case":	74,
									"scores":	[-4.53830693227125]
								}, {
									"case":	75,
									"scores":	[-4.53830693227125]
								}, {
									"case":	76,
									"scores":	[-4.53830693227125]
								}, {
									"case":	77,
									"scores":	[-4.53830693227125]
								}, {
									"case":	78,
									"scores":	[-4.53830693227125]
								}, {
									"case":	79,
									"scores":	[-4.53830693227125]
								}, {
									"case":	80,
									"scores":	[-4.53830693227125]
								}, {
									"case":	81,
									"scores":	[-4.53830693227125]
								}, {
									"case":	82,
									"scores":	[-4.53830693227125]
								}, {
									"case":	83,
									"scores":	[-4.53830693227125]
								}, {
									"case":	84,
									"scores":	[-4.53830693227125]
								}, {
									"case":	85,
									"scores":	[-4.53830693227125]
								}, {
									"case":	86,
									"scores":	[-4.53830693227125]
								}, {
									"case":	87,
									"scores":	[-4.53830693227125]
								}, {
									"case":	88,
									"scores":	[-4.53830693227125]
								}, {
									"case":	89,
									"scores":	[-4.53830693227125]
								}, {
									"case":	90,
									"scores":	[-4.53830693227125]
								}, {
									"case":	91,
									"scores":	[-4.53830693227125]
								}, {
									"case":	92,
									"scores":	[-4.53830693227125]
								}, {
									"case":	93,
									"scores":	[-4.53830693227125]
								}, {
									"case":	94,
									"scores":	[-4.53830693227125]
								}, {
									"case":	95,
									"scores":	[-4.53830693227125]
								}, {
									"case":	96,
									"scores":	[-4.53830693227125]
								}, {
									"case":	97,
									"scores":	[-4.53830693227125]
								}, {
									"case":	98,
									"scores":	[-4.53830693227125]
								}, {
									"case":	99,
									"scores":	[-4.53830693227125]
								}, {
									"case":	100,
									"scores":	[-4.53830693227125]
								}, {
									"case":	101,
									"scores":	[-4.53830693227125]
								}, {
									"case":	102,
									"scores":	[-4.53830693227125]
								}, {
									"case":	103,
									"scores":	[-4.53830693227125]
								}, {
									"case":	104,
									"scores":	[-4.53830693227125]
								}, {
									"case":	105,
									"scores":	[-4.53830693227125]
								}, {
									"case":	106,
									"scores":	[-4.53830693227125]
								}, {
									"case":	107,
									"scores":	[-4.53830693227125]
								}, {
									"case":	108,
									"scores":	[-4.53830693227125]
								}, {
									"case":	109,
									"scores":	[-4.53830693227125]
								}, {
									"case":	110,
									"scores":	[-4.53830693227125]
								}, {
									"case":	111,
									"scores":	[-4.53830693227125]
								}, {
									"case":	112,
									"scores":	[-4.53830693227125]
								}, {
									"case":	113,
									"scores":	[-4.53830693227125]
								}, {
									"case":	114,
									"scores":	[-4.53830693227125]
								}, {
									"case":	115,
									"scores":	[-4.53830693227125]
								}, {
									"case":	116,
									"scores":	[-4.53830693227125]
								}, {
									"case":	117,
									"scores":	[-4.53830693227125]
								}, {
									"case":	118,
									"scores":	[-4.53830693227125]
								}, {
									"case":	119,
									"scores":	[-4.53830693227125]
								}, {
									"case":	120,
									"scores":	[-4.53830693227125]
								}, {
									"case":	121,
									"scores":	[-4.53830693227125]
								}, {
									"case":	122,
									"scores":	[-4.53830693227125]
								}, {
									"case":	123,
									"scores":	[-4.53830693227125]
								}, {
									"case":	124,
									"scores":	[-4.53830693227125]
								}, {
									"case":	125,
									"scores":	[-4.53830693227125]
								}, {
									"case":	126,
									"scores":	[-4.53830693227125]
								}, {
									"case":	127,
									"scores":	[-4.53830693227125]
								}, {
									"case":	128,
									"scores":	[-4.53830693227125]
								}, {
									"case":	129,
									"scores":	[-4.53830693227125]
								}, {
									"case":	130,
									"scores":	[-4.53830693227125]
								}, {
									"case":	131,
									"scores":	[-4.53830693227125]
								}, {
									"case":	132,
									"scores":	[-4.53830693227125]
								}, {
									"case":	133,
									"scores":	[-4.53830693227125]
								}, {
									"case":	134,
									"scores":	[-4.53830693227125]
								}, {
									"case":	135,
									"scores":	[-4.53830693227125]
								}, {
									"case":	136,
									"scores":	[-4.53830693227125]
								}, {
									"case":	137,
									"scores":	[-4.53830693227125]
								}, {
									"case":	138,
									"scores":	[-4.53830693227125]
								}, {
									"case":	139,
									"scores":	[-4.53830693227125]
								}, {
									"case":	140,
									"scores":	[-4.53830693227125]
								}, {
									"case":	141,
									"scores":	[-4.53830693227125]
								}, {
									"case":	142,
									"scores":	[-4.53830693227125]
								}, {
									"case":	143,
									"scores":	[-4.53830693227125]
								}, {
									"case":	144,
									"scores":	[-4.53830693227125]
								}, {
									"case":	145,
									"scores":	[-4.53830693227125]
								}, {
									"case":	146,
									"scores":	[-4.53830693227125]
								}, {
									"case":	147,
									"scores":	[-4.53830693227125]
								}, {
									"case":	148,
									"scores":	[-4.53830693227125]
								}, {
									"case":	149,
									"scores":	[-4.53830693227125]
								}, {
									"case":	150,
									"scores":	[-4.53830693227125]
								}, {
									"case":	151,
									"scores":	[-4.53830693227125]
								}, {
									"case":	152,
									"scores":	[-4.53830693227125]
								}, {
									"case":	153,
									"scores":	[-4.53830693227125]
								}, {
									"case":	154,
									"scores":	[-4.53830693227125]
								}, {
									"case":	155,
									"scores":	[-4.53830693227125]
								}, {
									"case":	156,
									"scores":	[-4.53830693227125]
								}, {
									"case":	157,
									"scores":	[-4.53830693227125]
								}, {
									"case":	158,
									"scores":	[-4.53830693227125]
								}, {
									"case":	159,
									"scores":	[-4.53830693227125]
								}, {
									"case":	160,
									"scores":	[-4.53830693227125]
								}, {
									"case":	161,
									"scores":	[-4.53830693227125]
								}, {
									"case":	162,
									"scores":	[-4.53830693227125]
								}, {
									"case":	163,
									"scores":	[-4.53830693227125]
								}, {
									"case":	164,
									"scores":	[-4.53830693227125]
								}, {
									"case":	165,
									"scores":	[-4.53830693227125]
								}, {
									"case":	166,
									"scores":	[-4.53830693227125]
								}, {
									"case":	167,
									"scores":	[-4.53830693227125]
								}, {
									"case":	168,
									"scores":	[-4.53830693227125]
								}, {
									"case":	169,
									"scores":	[-4.53830693227125]
								}, {
									"case":	170,
									"scores":	[-4.53830693227125]
								}, {
									"case":	171,
									"scores":	[-4.53830693227125]
								}, {
									"case":	172,
									"scores":	[-4.53830693227125]
								}, {
									"case":	173,
									"scores":	[-4.53830693227125]
								}, {
									"case":	174,
									"scores":	[-4.53830693227125]
								}, {
									"case":	175,
									"scores":	[-4.53830693227125]
								}, {
									"case":	176,
									"scores":	[-4.53830693227125]
								}, {
									"case":	177,
									"scores":	[-4.53830693227125]
								}, {
									"case":	178,
									"scores":	[-4.53830693227125]
								}, {
									"case":	179,
									"scores":	[-4.53830693227125]
								}, {
									"case":	180,
									"scores":	[-4.53830693227125]
								}, {
									"case":	181,
									"scores":	[-4.53830693227125]
								}, {
									"case":	182,
									"scores":	[-4.53830693227125]
								}, {
									"case":	183,
									"scores":	[-4.53830693227125]
								}, {
									"case":	184,
									"scores":	[-4.53830693227125]
								}, {
									"case":	185,
									"scores":	[-4.53830693227125]
								}, {
									"case":	186,
									"scores":	[-4.53830693227125]
								}, {
									"case":	187,
									"scores":	[-4.53830693227125]
								}, {
									"case":	188,
									"scores":	[-4.53830693227125]
								}, {
									"case":	189,
									"scores":	[-4.53830693227125]
								}, {
									"case":	190,
									"scores":	[-4.53830693227125]
								}, {
									"case":	191,
									"scores":	[-4.53830693227125]
								}, {
									"case":	192,
									"scores":	[-4.53830693227125]
								}, {
									"case":	193,
									"scores":	[-4.53830693227125]
								}, {
									"case":	194,
									"scores":	[-4.53830693227125]
								}, {
									"case":	195,
									"scores":	[-4.53830693227125]
								}, {
									"case":	196,
									"scores":	[-4.53830693227125]
								}, {
									"case":	197,
									"scores":	[-4.53830693227125]
								}, {
									"case":	198,
									"scores":	[-4.53830693227125]
								}, {
									"case":	199,
									"scores":	[-4.53830693227125]
								}, {
									"case":	200,
									"scores":	[-4.53830693227125]
								}, {
									"case":	201,
									"scores":	[-4.53830693227125]
								}, {
									"case":	202,
									"scores":	[-4.53830693227125]
								}, {
									"case":	203,
									"scores":	[-4.53830693227125]
								}, {
									"case":	204,
									"scores":	[-4.53830693227125]
								}, {
									"case":	205,
									"scores":	[-4.53830693227125]
								}, {
									"case":	206,
									"scores":	[-4.53830693227125]
								}, {
									"case":	207,
									"scores":	[-4.53830693227125]
								}, {
									"case":	208,
									"scores":	[-4.53830693227125]
								}, {
									"case":	209,
									"scores":	[-4.53830693227125]
								}, {
									"case":	210,
									"scores":	[-4.53830693227125]
								}, {
									"case":	211,
									"scores":	[-4.53830693227125]
								}, {
									"case":	212,
									"scores":	[-4.53830693227125]
								}, {
									"case":	213,
									"scores":	[-4.53830693227125]
								}, {
									"case":	214,
									"scores":	[-4.53830693227125]
								}, {
									"case":	215,
									"scores":	[-4.53830693227125]
								}, {
									"case":	216,
									"scores":	[-4.53830693227125]
								}, {
									"case":	217,
									"scores":	[-4.53830693227125]
								}, {
									"case":	218,
									"scores":	[-4.53830693227125]
								}, {
									"case":	219,
									"scores":	[-4.53830693227125]
								}, {
									"case":	220,
									"scores":	[-4.53830693227125]
								}, {
									"case":	221,
									"scores":	[-4.53830693227125]
								}, {
									"case":	222,
									"scores":	[-4.53830693227125]
								}, {
									"case":	223,
									"scores":	[-4.53830693227125]
								}, {
									"case":	224,
									"scores":	[-4.53830693227125]
								}, {
									"case":	225,
									"scores":	[-4.53830693227125]
								}, {
									"case":	226,
									"scores":	[-4.53830693227125]
								}, {
									"case":	227,
									"scores":	[-4.53830693227125]
								}, {
									"case":	228,
									"scores":	[-4.53830693227125]
								}, {
									"case":	229,
									"scores":	[-4.53830693227125]
								}, {
									"case":	230,
									"scores":	[-4.53830693227125]
								}, {
									"case":	231,
									"scores":	[-4.53830693227125]
								}, {
									"case":	232,
									"scores":	[-4.53830693227125]
								}, {
									"case":	233,
									"scores":	[-4.53830693227125]
								}, {
									"case":	234,
									"scores":	[-4.53830693227125]
								}, {
									"case":	235,
									"scores":	[-4.53830693227125]
								}, {
									"case":	236,
									"scores":	[-4.53830693227125]
								}, {
									"case":	237,
									"scores":	[-4.53830693227125]
								}, {
									"case":	238,
									"scores":	[-4.53830693227125]
								}, {
									"case":	239,
									"scores":	[-4.53830693227125]
								}, {
									"case":	240,
									"scores":	[-4.53830693227125]
								}, {
									"case":	241,
									"scores":	[-4.53830693227125]
								}, {
									"case":	242,
									"scores":	[-4.53830693227125]
								}, {
									"case":	243,
									"scores":	[-4.53830693227125]
								}, {
									"case":	244,
									"scores":	[-4.53830693227125]
								}, {
									"case":	245,
									"scores":	[-4.53830693227125]
								}, {
									"case":	246,
									"scores":	[-4.53830693227125]
								}, {
									"case":	247,
									"scores":	[-4.53830693227125]
								}, {
									"case":	248,
									"scores":	[-4.53830693227125]
								}, {
									"case":	249,
									"scores":	[-4.53830693227125]
								}, {
									"case":	250,
									"scores":	[-4.53830693227125]
								}, {
									"case":	251,
									"scores":	[-4.53830693227125]
								}, {
									"case":	252,
									"scores":	[-4.53830693227125]
								}, {
									"case":	253,
									"scores":	[-4.53830693227125]
								}, {
									"case":	254,
									"scores":	[-4.53830693227125]
								}, {
									"case":	255,
									"scores":	[-4.53830693227125]
								}, {
									"case":	256,
									"scores":	[-4.53830693227125]
								}, {
									"case":	257,
									"scores":	[-4.53830693227125]
								}, {
									"case":	258,
									"scores":	[-4.53830693227125]
								}, {
									"case":	259,
									"scores":	[-4.53830693227125]
								}, {
									"case":	260,
									"scores":	[-4.53830693227125]
								}, {
									"case":	261,
									"scores":	[-4.53830693227125]
								}, {
									"case":	262,
									"scores":	[-4.53830693227125]
								}, {
									"case":	263,
									"scores":	[-4.53830693227125]
								}, {
									"case":	264,
									"scores":	[-4.53830693227125]
								}, {
									"case":	265,
									"scores":	[-4.53830693227125]
								}, {
									"case":	266,
									"scores":	[-4.53830693227125]
								}, {
									"case":	267,
									"scores":	[-4.53830693227125]
								}, {
									"case":	268,
									"scores":	[-4.53830693227125]
								}, {
									"case":	269,
									"scores":	[-4.53830693227125]
								}, {
									"case":	270,
									"scores":	[-4.53830693227125]
								}, {
									"case":	271,
									"scores":	[-4.53830693227125]
								}, {
									"case":	272,
									"scores":	[-4.53830693227125]
								}, {
									"case":	273,
									"scores":	[-4.53830693227125]
								}, {
									"case":	274,
									"scores":	[-4.53830693227125]
								}, {
									"case":	275,
									"scores":	[-4.53830693227125]
								}, {
									"case":	276,
									"scores":	[-4.53830693227125]
								}, {
									"case":	277,
									"scores":	[-4.53830693227125]
								}, {
									"case":	278,
									"scores":	[-4.53830693227125]
								}, {
									"case":	279,
									"scores":	[-4.53830693227125]
								}, {
									"case":	280,
									"scores":	[-4.53830693227125]
								}, {
									"case":	281,
									"scores":	[-4.53830693227125]
								}, {
									"case":	282,
									"scores":	[-4.53830693227125]
								}, {
									"case":	283,
									"scores":	[-4.53830693227125]
								}, {
									"case":	284,
									"scores":	[-4.53830693227125]
								}, {
									"case":	285,
									"scores":	[-4.53830693227125]
								}, {
									"case":	286,
									"scores":	[-4.53830693227125]
								}, {
									"case":	287,
									"scores":	[-4.53830693227125]
								}, {
									"case":	288,
									"scores":	[-4.53830693227125]
								}, {
									"case":	289,
									"scores":	[-4.53830693227125]
								}, {
									"case":	290,
									"scores":	[-4.53830693227125]
								}, {
									"case":	291,
									"scores":	[-4.53830693227125]
								}, {
									"case":	292,
									"scores":	[-4.53830693227125]
								}, {
									"case":	293,
									"scores":	[-4.53830693227125]
								}, {
									"case":	294,
									"scores":	[-4.53830693227125]
								}, {
									"case":	295,
									"scores":	[-4.53830693227125]
								}, {
									"case":	296,
									"scores":	[-4.53830693227125]
								}, {
									"case":	297,
									"scores":	[-4.53830693227125]
								}, {
									"case":	298,
									"scores":	[-4.53830693227125]
								}, {
									"case":	299,
									"scores":	[-4.53830693227125]
								}, {
									"case":	300,
									"scores":	[-4.53830693227125]
								}, {
									"case":	301,
									"scores":	[-4.53830693227125]
								}, {
									"case":	302,
									"scores":	[-4.53830693227125]
								}, {
									"case":	303,
									"scores":	[-4.53830693227125]
								}, {
									"case":	304,
									"scores":	[-4.53830693227125]
								}, {
									"case":	305,
									"scores":	[-4.53830693227125]
								}, {
									"case":	306,
									"scores":	[-4.53830693227125]
								}, {
									"case":	307,
									"scores":	[-4.53830693227125]
								}, {
									"case":	308,
									"scores":	[-4.53830693227125]
								}, {
									"case":	309,
									"scores":	[-4.53830693227125]
								}, {
									"case":	310,
									"scores":	[-4.53830693227125]
								}, {
									"case":	311,
									"scores":	[-4.53830693227125]
								}, {
									"case":	312,
									"scores":	[-4.53830693227125]
								}, {
									"case":	313,
									"scores":	[-4.53830693227125]
								}, {
									"case":	314,
									"scores":	[-4.53830693227125]
								}, {
									"case":	315,
									"scores":	[-4.53830693227125]
								}, {
									"case":	316,
									"scores":	[-4.53830693227125]
								}, {
									"case":	317,
									"scores":	[-4.53830693227125]
								}, {
									"case":	318,
									"scores":	[-4.53830693227125]
								}, {
									"case":	319,
									"scores":	[-4.53830693227125]
								}, {
									"case":	320,
									"scores":	[-4.53830693227125]
								}, {
									"case":	321,
									"scores":	[-4.53830693227125]
								}, {
									"case":	322,
									"scores":	[-4.53830693227125]
								}]
						}]
				}, {
					"line":	3089,
					"switches":	[{
							"switch":	69,
							"types":	[[], [], [], [], [286], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [], [], [], [199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285], [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], [], [], [], [], [], []],
							"begin_line":	3090,
							"begin_column":	0,
							"end_line":	3090,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->d = (-1)", "dateobj->time->d = (0)", "dateobj->time->d = (1)", "dateobj->time->d = (2)", "dateobj->time->d = (3)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->m = (-1)", "dateobj->time->m = (0)", "dateobj->time->m = (1)", "dateobj->time->m = (2)", "dateobj->time->m = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->y = (-1)", "dateobj->time->y = (0)", "dateobj->time->y = (1)", "dateobj->time->y = (2)", "dateobj->time->y = (3)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((dateobj), 0, sizeof(php_date_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->d = 1", "dateobj->time->have_relative = 1", "dateobj->time->m = 1", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, d)", "dateobj->time->y = y", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3090\", 44, &(dateobj), sizeof (dateobj), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time), sizeof (dateobj->time), &(y), sizeof (y), &(w), sizeof (w), &(d), sizeof (d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->m), sizeof (dateobj->time->m), &(return_value), sizeof (return_value), &(object), sizeof (object), &(dateobj->time->y), sizeof (dateobj->time->y), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.51810422495373]
								}, {
									"case":	2,
									"scores":	[-4.51810422495373]
								}, {
									"case":	3,
									"scores":	[-4.51810422495373]
								}, {
									"case":	4,
									"scores":	[-4.51810422495373]
								}, {
									"case":	5,
									"scores":	[-4.51810422495373]
								}, {
									"case":	6,
									"scores":	[-4.51810422495373]
								}, {
									"case":	7,
									"scores":	[-4.51810422495373]
								}, {
									"case":	8,
									"scores":	[-4.51810422495373]
								}, {
									"case":	9,
									"scores":	[-4.51810422495373]
								}, {
									"case":	10,
									"scores":	[-4.51810422495373]
								}, {
									"case":	11,
									"scores":	[-4.51810422495373]
								}, {
									"case":	12,
									"scores":	[-4.51810422495373]
								}, {
									"case":	13,
									"scores":	[-4.51810422495373]
								}, {
									"case":	14,
									"scores":	[-4.51810422495373]
								}, {
									"case":	15,
									"scores":	[-4.51810422495373]
								}, {
									"case":	16,
									"scores":	[-4.51810422495373]
								}, {
									"case":	17,
									"scores":	[-4.51810422495373]
								}, {
									"case":	18,
									"scores":	[-4.51810422495373]
								}, {
									"case":	19,
									"scores":	[-4.51810422495373]
								}, {
									"case":	20,
									"scores":	[-4.51810422495373]
								}, {
									"case":	21,
									"scores":	[-4.51810422495373]
								}, {
									"case":	22,
									"scores":	[-4.51810422495373]
								}, {
									"case":	23,
									"scores":	[-4.51810422495373]
								}, {
									"case":	24,
									"scores":	[-4.51810422495373]
								}, {
									"case":	25,
									"scores":	[-4.51810422495373]
								}, {
									"case":	26,
									"scores":	[-4.51810422495373]
								}, {
									"case":	27,
									"scores":	[-4.51810422495373]
								}, {
									"case":	28,
									"scores":	[-4.51810422495373]
								}, {
									"case":	29,
									"scores":	[-4.51810422495373]
								}, {
									"case":	30,
									"scores":	[-4.51810422495373]
								}, {
									"case":	31,
									"scores":	[-4.51810422495373]
								}, {
									"case":	32,
									"scores":	[-4.51810422495373]
								}, {
									"case":	33,
									"scores":	[-4.51810422495373]
								}, {
									"case":	34,
									"scores":	[-4.51810422495373]
								}, {
									"case":	35,
									"scores":	[-4.51810422495373]
								}, {
									"case":	36,
									"scores":	[-4.51810422495373]
								}, {
									"case":	37,
									"scores":	[-4.51810422495373]
								}, {
									"case":	38,
									"scores":	[-4.51810422495373]
								}, {
									"case":	39,
									"scores":	[-4.51810422495373]
								}, {
									"case":	40,
									"scores":	[-4.51810422495373]
								}, {
									"case":	41,
									"scores":	[-4.51810422495373]
								}, {
									"case":	42,
									"scores":	[-4.51810422495373]
								}, {
									"case":	43,
									"scores":	[-4.51810422495373]
								}, {
									"case":	44,
									"scores":	[-4.51810422495373]
								}, {
									"case":	45,
									"scores":	[-4.51810422495373]
								}, {
									"case":	46,
									"scores":	[-4.51810422495373]
								}, {
									"case":	47,
									"scores":	[-4.51810422495373]
								}, {
									"case":	48,
									"scores":	[-4.51810422495373]
								}, {
									"case":	49,
									"scores":	[-4.51810422495373]
								}, {
									"case":	50,
									"scores":	[-4.51810422495373]
								}, {
									"case":	51,
									"scores":	[-4.51810422495373]
								}, {
									"case":	52,
									"scores":	[-4.51810422495373]
								}, {
									"case":	53,
									"scores":	[-4.51810422495373]
								}, {
									"case":	54,
									"scores":	[-4.51810422495373]
								}, {
									"case":	55,
									"scores":	[-4.51810422495373]
								}, {
									"case":	56,
									"scores":	[-4.51810422495373]
								}, {
									"case":	57,
									"scores":	[-4.51810422495373]
								}, {
									"case":	58,
									"scores":	[-4.51810422495373]
								}, {
									"case":	59,
									"scores":	[-4.51810422495373]
								}, {
									"case":	60,
									"scores":	[-4.51810422495373]
								}, {
									"case":	61,
									"scores":	[-4.51810422495373]
								}, {
									"case":	62,
									"scores":	[-4.51810422495373]
								}, {
									"case":	63,
									"scores":	[-4.51810422495373]
								}, {
									"case":	64,
									"scores":	[-4.51810422495373]
								}, {
									"case":	65,
									"scores":	[-4.51810422495373]
								}, {
									"case":	66,
									"scores":	[-4.51810422495373]
								}, {
									"case":	67,
									"scores":	[-4.51810422495373]
								}, {
									"case":	68,
									"scores":	[-4.51810422495373]
								}, {
									"case":	69,
									"scores":	[-4.51810422495373]
								}, {
									"case":	70,
									"scores":	[-4.51810422495373]
								}, {
									"case":	71,
									"scores":	[-4.51810422495373]
								}, {
									"case":	72,
									"scores":	[-4.51810422495373]
								}, {
									"case":	73,
									"scores":	[-4.51810422495373]
								}, {
									"case":	74,
									"scores":	[-4.51810422495373]
								}, {
									"case":	75,
									"scores":	[-4.51810422495373]
								}, {
									"case":	76,
									"scores":	[-4.51810422495373]
								}, {
									"case":	77,
									"scores":	[-4.51810422495373]
								}, {
									"case":	78,
									"scores":	[-4.51810422495373]
								}, {
									"case":	79,
									"scores":	[-4.51810422495373]
								}, {
									"case":	80,
									"scores":	[-4.51810422495373]
								}, {
									"case":	81,
									"scores":	[-4.51810422495373]
								}, {
									"case":	82,
									"scores":	[-4.51810422495373]
								}, {
									"case":	83,
									"scores":	[-4.51810422495373]
								}, {
									"case":	84,
									"scores":	[-4.51810422495373]
								}, {
									"case":	85,
									"scores":	[-4.51810422495373]
								}, {
									"case":	86,
									"scores":	[-4.51810422495373]
								}, {
									"case":	87,
									"scores":	[-4.51810422495373]
								}, {
									"case":	88,
									"scores":	[-4.51810422495373]
								}, {
									"case":	89,
									"scores":	[-4.51810422495373]
								}, {
									"case":	90,
									"scores":	[-4.51810422495373]
								}, {
									"case":	91,
									"scores":	[-4.51810422495373]
								}, {
									"case":	92,
									"scores":	[-4.51810422495373]
								}, {
									"case":	93,
									"scores":	[-4.51810422495373]
								}, {
									"case":	94,
									"scores":	[-4.51810422495373]
								}, {
									"case":	95,
									"scores":	[-4.51810422495373]
								}, {
									"case":	96,
									"scores":	[-4.51810422495373]
								}, {
									"case":	97,
									"scores":	[-4.51810422495373]
								}, {
									"case":	98,
									"scores":	[-4.51810422495373]
								}, {
									"case":	99,
									"scores":	[-4.51810422495373]
								}, {
									"case":	100,
									"scores":	[-4.51810422495373]
								}, {
									"case":	101,
									"scores":	[-4.51810422495373]
								}, {
									"case":	102,
									"scores":	[-4.51810422495373]
								}, {
									"case":	103,
									"scores":	[-4.51810422495373]
								}, {
									"case":	104,
									"scores":	[-4.51810422495373]
								}, {
									"case":	105,
									"scores":	[-4.51810422495373]
								}, {
									"case":	106,
									"scores":	[-4.51810422495373]
								}, {
									"case":	107,
									"scores":	[-4.51810422495373]
								}, {
									"case":	108,
									"scores":	[-4.51810422495373]
								}, {
									"case":	109,
									"scores":	[-4.51810422495373]
								}, {
									"case":	110,
									"scores":	[-4.51810422495373]
								}, {
									"case":	111,
									"scores":	[-4.51810422495373]
								}, {
									"case":	112,
									"scores":	[-4.51810422495373]
								}, {
									"case":	113,
									"scores":	[-4.51810422495373]
								}, {
									"case":	114,
									"scores":	[-4.51810422495373]
								}, {
									"case":	115,
									"scores":	[-4.51810422495373]
								}, {
									"case":	116,
									"scores":	[-4.51810422495373]
								}, {
									"case":	117,
									"scores":	[-4.51810422495373]
								}, {
									"case":	118,
									"scores":	[-4.51810422495373]
								}, {
									"case":	119,
									"scores":	[-4.51810422495373]
								}, {
									"case":	120,
									"scores":	[-4.51810422495373]
								}, {
									"case":	121,
									"scores":	[-4.51810422495373]
								}, {
									"case":	122,
									"scores":	[-4.51810422495373]
								}, {
									"case":	123,
									"scores":	[-4.51810422495373]
								}, {
									"case":	124,
									"scores":	[-4.51810422495373]
								}, {
									"case":	125,
									"scores":	[-4.51810422495373]
								}, {
									"case":	126,
									"scores":	[-4.51810422495373]
								}, {
									"case":	127,
									"scores":	[-4.51810422495373]
								}, {
									"case":	128,
									"scores":	[-4.51810422495373]
								}, {
									"case":	129,
									"scores":	[-4.51810422495373]
								}, {
									"case":	130,
									"scores":	[-4.51810422495373]
								}, {
									"case":	131,
									"scores":	[-4.51810422495373]
								}, {
									"case":	132,
									"scores":	[-4.51810422495373]
								}, {
									"case":	133,
									"scores":	[-4.51810422495373]
								}, {
									"case":	134,
									"scores":	[-4.51810422495373]
								}, {
									"case":	135,
									"scores":	[-4.51810422495373]
								}, {
									"case":	136,
									"scores":	[-4.51810422495373]
								}, {
									"case":	137,
									"scores":	[-4.51810422495373]
								}, {
									"case":	138,
									"scores":	[-4.51810422495373]
								}, {
									"case":	139,
									"scores":	[-4.51810422495373]
								}, {
									"case":	140,
									"scores":	[-4.51810422495373]
								}, {
									"case":	141,
									"scores":	[-4.51810422495373]
								}, {
									"case":	142,
									"scores":	[-4.51810422495373]
								}, {
									"case":	143,
									"scores":	[-4.51810422495373]
								}, {
									"case":	144,
									"scores":	[-4.51810422495373]
								}, {
									"case":	145,
									"scores":	[-4.51810422495373]
								}, {
									"case":	146,
									"scores":	[-4.51810422495373]
								}, {
									"case":	147,
									"scores":	[-4.51810422495373]
								}, {
									"case":	148,
									"scores":	[-4.51810422495373]
								}, {
									"case":	149,
									"scores":	[-4.51810422495373]
								}, {
									"case":	150,
									"scores":	[-4.51810422495373]
								}, {
									"case":	151,
									"scores":	[-4.51810422495373]
								}, {
									"case":	152,
									"scores":	[-4.51810422495373]
								}, {
									"case":	153,
									"scores":	[-4.51810422495373]
								}, {
									"case":	154,
									"scores":	[-4.51810422495373]
								}, {
									"case":	155,
									"scores":	[-4.51810422495373]
								}, {
									"case":	156,
									"scores":	[-4.51810422495373]
								}, {
									"case":	157,
									"scores":	[-4.51810422495373]
								}, {
									"case":	158,
									"scores":	[-4.51810422495373]
								}, {
									"case":	159,
									"scores":	[-4.51810422495373]
								}, {
									"case":	160,
									"scores":	[-4.51810422495373]
								}, {
									"case":	161,
									"scores":	[-4.51810422495373]
								}, {
									"case":	162,
									"scores":	[-4.51810422495373]
								}, {
									"case":	163,
									"scores":	[-4.51810422495373]
								}, {
									"case":	164,
									"scores":	[-4.51810422495373]
								}, {
									"case":	165,
									"scores":	[-4.51810422495373]
								}, {
									"case":	166,
									"scores":	[-4.51810422495373]
								}, {
									"case":	167,
									"scores":	[-4.51810422495373]
								}, {
									"case":	168,
									"scores":	[-4.51810422495373]
								}, {
									"case":	169,
									"scores":	[-4.51810422495373]
								}, {
									"case":	170,
									"scores":	[-4.51810422495373]
								}, {
									"case":	171,
									"scores":	[-4.51810422495373]
								}, {
									"case":	172,
									"scores":	[-4.51810422495373]
								}, {
									"case":	173,
									"scores":	[-4.51810422495373]
								}, {
									"case":	174,
									"scores":	[-4.51810422495373]
								}, {
									"case":	175,
									"scores":	[-4.51810422495373]
								}, {
									"case":	176,
									"scores":	[-4.51810422495373]
								}, {
									"case":	177,
									"scores":	[-4.51810422495373]
								}, {
									"case":	178,
									"scores":	[-4.51810422495373]
								}, {
									"case":	179,
									"scores":	[-4.51810422495373]
								}, {
									"case":	180,
									"scores":	[-4.51810422495373]
								}, {
									"case":	181,
									"scores":	[-4.51810422495373]
								}, {
									"case":	182,
									"scores":	[-4.51810422495373]
								}, {
									"case":	183,
									"scores":	[-4.51810422495373]
								}, {
									"case":	184,
									"scores":	[-4.51810422495373]
								}, {
									"case":	185,
									"scores":	[-4.51810422495373]
								}, {
									"case":	186,
									"scores":	[-4.51810422495373]
								}, {
									"case":	187,
									"scores":	[-4.51810422495373]
								}, {
									"case":	188,
									"scores":	[-4.51810422495373]
								}, {
									"case":	189,
									"scores":	[-4.51810422495373]
								}, {
									"case":	190,
									"scores":	[-4.51810422495373]
								}, {
									"case":	191,
									"scores":	[-4.51810422495373]
								}, {
									"case":	192,
									"scores":	[-4.51810422495373]
								}, {
									"case":	193,
									"scores":	[-4.51810422495373]
								}, {
									"case":	194,
									"scores":	[-4.51810422495373]
								}, {
									"case":	195,
									"scores":	[-4.51810422495373]
								}, {
									"case":	196,
									"scores":	[-4.51810422495373]
								}, {
									"case":	197,
									"scores":	[-4.51810422495373]
								}, {
									"case":	198,
									"scores":	[-4.51810422495373]
								}, {
									"case":	199,
									"scores":	[-4.51810422495373]
								}, {
									"case":	200,
									"scores":	[-4.51810422495373]
								}, {
									"case":	201,
									"scores":	[-4.51810422495373]
								}, {
									"case":	202,
									"scores":	[-4.51810422495373]
								}, {
									"case":	203,
									"scores":	[-4.51810422495373]
								}, {
									"case":	204,
									"scores":	[-4.51810422495373]
								}, {
									"case":	205,
									"scores":	[-4.51810422495373]
								}, {
									"case":	206,
									"scores":	[-4.51810422495373]
								}, {
									"case":	207,
									"scores":	[-4.51810422495373]
								}, {
									"case":	208,
									"scores":	[-4.51810422495373]
								}, {
									"case":	209,
									"scores":	[-4.51810422495373]
								}, {
									"case":	210,
									"scores":	[-4.51810422495373]
								}, {
									"case":	211,
									"scores":	[-4.51810422495373]
								}, {
									"case":	212,
									"scores":	[-4.51810422495373]
								}, {
									"case":	213,
									"scores":	[-4.51810422495373]
								}, {
									"case":	214,
									"scores":	[-4.51810422495373]
								}, {
									"case":	215,
									"scores":	[-4.51810422495373]
								}, {
									"case":	216,
									"scores":	[-4.51810422495373]
								}, {
									"case":	217,
									"scores":	[-4.51810422495373]
								}, {
									"case":	218,
									"scores":	[-4.51810422495373]
								}, {
									"case":	219,
									"scores":	[-4.51810422495373]
								}, {
									"case":	220,
									"scores":	[-4.51810422495373]
								}, {
									"case":	221,
									"scores":	[-4.51810422495373]
								}, {
									"case":	222,
									"scores":	[-4.51810422495373]
								}, {
									"case":	223,
									"scores":	[-4.51810422495373]
								}, {
									"case":	224,
									"scores":	[-4.51810422495373]
								}, {
									"case":	225,
									"scores":	[-4.51810422495373]
								}, {
									"case":	226,
									"scores":	[-4.51810422495373]
								}, {
									"case":	227,
									"scores":	[-4.51810422495373]
								}, {
									"case":	228,
									"scores":	[-4.51810422495373]
								}, {
									"case":	229,
									"scores":	[-4.51810422495373]
								}, {
									"case":	230,
									"scores":	[-4.51810422495373]
								}, {
									"case":	231,
									"scores":	[-4.51810422495373]
								}, {
									"case":	232,
									"scores":	[-4.51810422495373]
								}, {
									"case":	233,
									"scores":	[-4.51810422495373]
								}, {
									"case":	234,
									"scores":	[-4.51810422495373]
								}, {
									"case":	235,
									"scores":	[-4.51810422495373]
								}, {
									"case":	236,
									"scores":	[-4.51810422495373]
								}, {
									"case":	237,
									"scores":	[-4.51810422495373]
								}, {
									"case":	238,
									"scores":	[-4.51810422495373]
								}, {
									"case":	239,
									"scores":	[-4.51810422495373]
								}, {
									"case":	240,
									"scores":	[-4.51810422495373]
								}, {
									"case":	241,
									"scores":	[-4.51810422495373]
								}, {
									"case":	242,
									"scores":	[-4.51810422495373]
								}, {
									"case":	243,
									"scores":	[-4.51810422495373]
								}, {
									"case":	244,
									"scores":	[-4.51810422495373]
								}, {
									"case":	245,
									"scores":	[-4.51810422495373]
								}, {
									"case":	246,
									"scores":	[-4.51810422495373]
								}, {
									"case":	247,
									"scores":	[-4.51810422495373]
								}, {
									"case":	248,
									"scores":	[-4.51810422495373]
								}, {
									"case":	249,
									"scores":	[-4.51810422495373]
								}, {
									"case":	250,
									"scores":	[-4.51810422495373]
								}, {
									"case":	251,
									"scores":	[-4.51810422495373]
								}, {
									"case":	252,
									"scores":	[-4.51810422495373]
								}, {
									"case":	253,
									"scores":	[-4.51810422495373]
								}, {
									"case":	254,
									"scores":	[-4.51810422495373]
								}, {
									"case":	255,
									"scores":	[-4.51810422495373]
								}, {
									"case":	256,
									"scores":	[-4.51810422495373]
								}, {
									"case":	257,
									"scores":	[-4.51810422495373]
								}, {
									"case":	258,
									"scores":	[-4.51810422495373]
								}, {
									"case":	259,
									"scores":	[-4.51810422495373]
								}, {
									"case":	260,
									"scores":	[-4.51810422495373]
								}, {
									"case":	261,
									"scores":	[-4.51810422495373]
								}, {
									"case":	262,
									"scores":	[-4.51810422495373]
								}, {
									"case":	263,
									"scores":	[-4.51810422495373]
								}, {
									"case":	264,
									"scores":	[-4.51810422495373]
								}, {
									"case":	265,
									"scores":	[-4.51810422495373]
								}, {
									"case":	266,
									"scores":	[-4.51810422495373]
								}, {
									"case":	267,
									"scores":	[-4.51810422495373]
								}, {
									"case":	268,
									"scores":	[-4.51810422495373]
								}, {
									"case":	269,
									"scores":	[-4.51810422495373]
								}, {
									"case":	270,
									"scores":	[-4.51810422495373]
								}, {
									"case":	271,
									"scores":	[-4.51810422495373]
								}, {
									"case":	272,
									"scores":	[-4.51810422495373]
								}, {
									"case":	273,
									"scores":	[-4.51810422495373]
								}, {
									"case":	274,
									"scores":	[-4.51810422495373]
								}, {
									"case":	275,
									"scores":	[-4.51810422495373]
								}, {
									"case":	276,
									"scores":	[-4.51810422495373]
								}, {
									"case":	277,
									"scores":	[-4.51810422495373]
								}, {
									"case":	278,
									"scores":	[-4.51810422495373]
								}, {
									"case":	279,
									"scores":	[-4.51810422495373]
								}, {
									"case":	280,
									"scores":	[-4.51810422495373]
								}, {
									"case":	281,
									"scores":	[-4.51810422495373]
								}, {
									"case":	282,
									"scores":	[-4.51810422495373]
								}, {
									"case":	283,
									"scores":	[-4.51810422495373]
								}, {
									"case":	284,
									"scores":	[-4.51810422495373]
								}, {
									"case":	285,
									"scores":	[-4.51810422495373]
								}, {
									"case":	286,
									"scores":	[-8.53439178105373, -8.42754747335373, -8.95890343405373, -7.94077445635373, -7.68318928235373, -7.94077445635373, -6.88646517635373, -7.44063849135373, -7.44063849135373, -8.88702388005373, -9.22404483705373, -8.69129665635373, -8.17183605635373, -8.41787497015373, -8.38226160415373, -8.69129665635373, -8.69129665635373, -8.69129665635373, -8.69129665635373, -8.69129665635373, -8.69129665635373, -8.69129665635373, -8.69129665635373, -8.69129665635373, -8.69129665635373, -8.69129665635373, -8.69129665635373, -8.69129665635373, -8.69129665635373, -8.69129665635373, -8.69129665635373, -8.90218577335373, -8.93733557015373, -8.69129665635373, -8.69129665635373, -8.69129665635373, -8.69129665635373, -8.69129665635373, -8.69129665635373, -8.69129665635373, -8.69129665635373, -8.69129665635373, -8.69129665635373, -8.93733557015373]
								}]
						}, {
							"switch":	70,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	3090,
							"begin_column":	2,
							"end_line":	3090,
							"end_column":	33,
							"patch_codes":	["if (!__is_neg(\"\", \"L3090\", 44, &(dateobj), sizeof (dateobj), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time), sizeof (dateobj->time), &(y), sizeof (y), &(w), sizeof (w), &(d), sizeof (d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->m), sizeof (dateobj->time->m), &(return_value), sizeof (return_value), &(object), sizeof (object), &(dateobj->time->y), sizeof (dateobj->time->y), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    dateobj->time->have_relative = 1;\n", "{\n}\n", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0 * d)", "dateobj->time->have_relative = (0 * ht)", "dateobj->time->have_relative = (0 * return_value_used)", "dateobj->time->have_relative = (0 * w)", "dateobj->time->have_relative = (0 * y)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->have_relative = (d != 0)", "dateobj->time->have_relative = (d * ht)", "dateobj->time->have_relative = (d * return_value_used)", "dateobj->time->have_relative = (d * w)", "dateobj->time->have_relative = (d * y)", "dateobj->time->have_relative = (d + 0)", "dateobj->time->have_relative = (d - 0)", "dateobj->time->have_relative = (d == 0)", "dateobj->time->have_relative = (dateobj != 0)", "dateobj->time->have_relative = (dateobj == 0)", "dateobj->time->have_relative = (ht != 0)", "dateobj->time->have_relative = (ht != d)", "dateobj->time->have_relative = (ht != return_value_used)", "dateobj->time->have_relative = (ht != w)", "dateobj->time->have_relative = (ht != y)", "dateobj->time->have_relative = (ht * d)", "dateobj->time->have_relative = (ht * return_value_used)", "dateobj->time->have_relative = (ht * w)", "dateobj->time->have_relative = (ht * y)", "dateobj->time->have_relative = (ht + 0)", "dateobj->time->have_relative = (ht + d)", "dateobj->time->have_relative = (ht + return_value_used)", "dateobj->time->have_relative = (ht + w)", "dateobj->time->have_relative = (ht + y)", "dateobj->time->have_relative = (ht - 0)", "dateobj->time->have_relative = (ht - d)", "dateobj->time->have_relative = (ht - return_value_used)", "dateobj->time->have_relative = (ht - w)", "dateobj->time->have_relative = (ht - y)", "dateobj->time->have_relative = (ht == 0)", "dateobj->time->have_relative = (ht == d)", "dateobj->time->have_relative = (ht == return_value_used)", "dateobj->time->have_relative = (ht == w)", "dateobj->time->have_relative = (ht == y)", "dateobj->time->have_relative = (object != 0)", "dateobj->time->have_relative = (object == 0)", "dateobj->time->have_relative = (return_value != 0)", "dateobj->time->have_relative = (return_value != object)", "dateobj->time->have_relative = (return_value != this_ptr)", "dateobj->time->have_relative = (return_value == 0)", "dateobj->time->have_relative = (return_value == object)", "dateobj->time->have_relative = (return_value == this_ptr)", "dateobj->time->have_relative = (return_value_ptr != 0)", "dateobj->time->have_relative = (return_value_ptr == 0)", "dateobj->time->have_relative = (return_value_used != 0)", "dateobj->time->have_relative = (return_value_used != d)", "dateobj->time->have_relative = (return_value_used != w)", "dateobj->time->have_relative = (return_value_used != y)", "dateobj->time->have_relative = (return_value_used * d)", "dateobj->time->have_relative = (return_value_used * ht)", "dateobj->time->have_relative = (return_value_used * w)", "dateobj->time->have_relative = (return_value_used * y)", "dateobj->time->have_relative = (return_value_used + 0)", "dateobj->time->have_relative = (return_value_used + d)", "dateobj->time->have_relative = (return_value_used + w)", "dateobj->time->have_relative = (return_value_used + y)", "dateobj->time->have_relative = (return_value_used - 0)", "dateobj->time->have_relative = (return_value_used - d)", "dateobj->time->have_relative = (return_value_used - w)", "dateobj->time->have_relative = (return_value_used - y)", "dateobj->time->have_relative = (return_value_used == 0)", "dateobj->time->have_relative = (return_value_used == d)", "dateobj->time->have_relative = (return_value_used == w)", "dateobj->time->have_relative = (return_value_used == y)", "dateobj->time->have_relative = (this_ptr != 0)", "dateobj->time->have_relative = (this_ptr != object)", "dateobj->time->have_relative = (this_ptr == 0)", "dateobj->time->have_relative = (this_ptr == object)", "dateobj->time->have_relative = (w != 0)", "dateobj->time->have_relative = (w != d)", "dateobj->time->have_relative = (w * d)", "dateobj->time->have_relative = (w * ht)", "dateobj->time->have_relative = (w * return_value_used)", "dateobj->time->have_relative = (w * y)", "dateobj->time->have_relative = (w + 0)", "dateobj->time->have_relative = (w + d)", "dateobj->time->have_relative = (w - 0)", "dateobj->time->have_relative = (w - d)", "dateobj->time->have_relative = (w == 0)", "dateobj->time->have_relative = (w == d)", "dateobj->time->have_relative = (y != 0)", "dateobj->time->have_relative = (y != d)", "dateobj->time->have_relative = (y != w)", "dateobj->time->have_relative = (y * d)", "dateobj->time->have_relative = (y * ht)", "dateobj->time->have_relative = (y * return_value_used)", "dateobj->time->have_relative = (y * w)", "dateobj->time->have_relative = (y + 0)", "dateobj->time->have_relative = (y + d)", "dateobj->time->have_relative = (y + w)", "dateobj->time->have_relative = (y - 0)", "dateobj->time->have_relative = (y - d)", "dateobj->time->have_relative = (y - w)", "dateobj->time->have_relative = (y == 0)", "dateobj->time->have_relative = (y == d)", "dateobj->time->have_relative = (y == w)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.54628763335373, -6.20704761595373, -4.99162890445373, -4.93769183095373, -4.62389413095373, -4.93769183095373, -4.54964223495373, -5.46507123495373, -5.46507123495373, -6.72273368185373, -6.87404578285373, -5.43031909495373, -5.51362278495373, -6.27151088495373, -5.98041752495373, -5.43031909495373, -5.43031909495373, -5.43031909495373, -5.43031909495373, -5.43031909495373, -5.43031909495373, -5.43031909495373, -5.43031909495373, -5.43031909495373, -5.43031909495373, -5.43031909495373, -5.43031909495373, -5.43031909495373, -5.43031909495373, -5.43031909495373, -5.43031909495373, -5.89957909495373, -6.18820719495373, -5.43031909495373, -5.43031909495373, -5.43031909495373, -5.43031909495373, -5.43031909495373, -5.43031909495373, -5.43031909495373, -5.43031909495373, -5.43031909495373, -5.43031909495373, -6.18820719495373]
								}, {
									"case":	2,
									"scores":	[-4.51810422495373]
								}, {
									"case":	3,
									"scores":	[-4.51810422495373]
								}, {
									"case":	4,
									"scores":	[-4.51810422495373]
								}, {
									"case":	5,
									"scores":	[-4.51810422495373]
								}, {
									"case":	6,
									"scores":	[-4.51810422495373]
								}, {
									"case":	7,
									"scores":	[-4.51810422495373]
								}, {
									"case":	8,
									"scores":	[-4.51810422495373]
								}, {
									"case":	9,
									"scores":	[-4.51810422495373]
								}, {
									"case":	10,
									"scores":	[-4.51810422495373]
								}, {
									"case":	11,
									"scores":	[-4.51810422495373]
								}, {
									"case":	12,
									"scores":	[-4.51810422495373]
								}, {
									"case":	13,
									"scores":	[-4.51810422495373]
								}, {
									"case":	14,
									"scores":	[-4.51810422495373]
								}, {
									"case":	15,
									"scores":	[-4.51810422495373]
								}, {
									"case":	16,
									"scores":	[-4.51810422495373]
								}, {
									"case":	17,
									"scores":	[-4.51810422495373]
								}, {
									"case":	18,
									"scores":	[-4.51810422495373]
								}, {
									"case":	19,
									"scores":	[-4.51810422495373]
								}, {
									"case":	20,
									"scores":	[-4.51810422495373]
								}, {
									"case":	21,
									"scores":	[-4.51810422495373]
								}, {
									"case":	22,
									"scores":	[-4.51810422495373]
								}, {
									"case":	23,
									"scores":	[-4.51810422495373]
								}, {
									"case":	24,
									"scores":	[-4.51810422495373]
								}, {
									"case":	25,
									"scores":	[-4.51810422495373]
								}, {
									"case":	26,
									"scores":	[-4.51810422495373]
								}, {
									"case":	27,
									"scores":	[-4.51810422495373]
								}, {
									"case":	28,
									"scores":	[-4.51810422495373]
								}, {
									"case":	29,
									"scores":	[-4.51810422495373]
								}, {
									"case":	30,
									"scores":	[-4.51810422495373]
								}, {
									"case":	31,
									"scores":	[-4.51810422495373]
								}, {
									"case":	32,
									"scores":	[-4.51810422495373]
								}, {
									"case":	33,
									"scores":	[-4.51810422495373]
								}, {
									"case":	34,
									"scores":	[-4.51810422495373]
								}, {
									"case":	35,
									"scores":	[-4.51810422495373]
								}, {
									"case":	36,
									"scores":	[-4.51810422495373]
								}, {
									"case":	37,
									"scores":	[-4.51810422495373]
								}, {
									"case":	38,
									"scores":	[-4.51810422495373]
								}, {
									"case":	39,
									"scores":	[-4.51810422495373]
								}, {
									"case":	40,
									"scores":	[-4.51810422495373]
								}, {
									"case":	41,
									"scores":	[-4.51810422495373]
								}, {
									"case":	42,
									"scores":	[-4.51810422495373]
								}, {
									"case":	43,
									"scores":	[-4.51810422495373]
								}, {
									"case":	44,
									"scores":	[-4.51810422495373]
								}, {
									"case":	45,
									"scores":	[-4.51810422495373]
								}, {
									"case":	46,
									"scores":	[-4.51810422495373]
								}, {
									"case":	47,
									"scores":	[-4.51810422495373]
								}, {
									"case":	48,
									"scores":	[-4.51810422495373]
								}, {
									"case":	49,
									"scores":	[-4.51810422495373]
								}, {
									"case":	50,
									"scores":	[-4.51810422495373]
								}, {
									"case":	51,
									"scores":	[-4.51810422495373]
								}, {
									"case":	52,
									"scores":	[-4.51810422495373]
								}, {
									"case":	53,
									"scores":	[-4.51810422495373]
								}, {
									"case":	54,
									"scores":	[-4.51810422495373]
								}, {
									"case":	55,
									"scores":	[-4.51810422495373]
								}, {
									"case":	56,
									"scores":	[-4.51810422495373]
								}, {
									"case":	57,
									"scores":	[-4.51810422495373]
								}, {
									"case":	58,
									"scores":	[-4.51810422495373]
								}, {
									"case":	59,
									"scores":	[-4.51810422495373]
								}, {
									"case":	60,
									"scores":	[-4.51810422495373]
								}, {
									"case":	61,
									"scores":	[-4.51810422495373]
								}, {
									"case":	62,
									"scores":	[-4.51810422495373]
								}, {
									"case":	63,
									"scores":	[-4.51810422495373]
								}, {
									"case":	64,
									"scores":	[-4.51810422495373]
								}, {
									"case":	65,
									"scores":	[-4.51810422495373]
								}, {
									"case":	66,
									"scores":	[-4.51810422495373]
								}, {
									"case":	67,
									"scores":	[-4.51810422495373]
								}, {
									"case":	68,
									"scores":	[-4.51810422495373]
								}, {
									"case":	69,
									"scores":	[-4.51810422495373]
								}, {
									"case":	70,
									"scores":	[-4.51810422495373]
								}, {
									"case":	71,
									"scores":	[-4.51810422495373]
								}, {
									"case":	72,
									"scores":	[-4.51810422495373]
								}, {
									"case":	73,
									"scores":	[-4.51810422495373]
								}, {
									"case":	74,
									"scores":	[-4.51810422495373]
								}, {
									"case":	75,
									"scores":	[-4.51810422495373]
								}, {
									"case":	76,
									"scores":	[-4.51810422495373]
								}, {
									"case":	77,
									"scores":	[-4.51810422495373]
								}, {
									"case":	78,
									"scores":	[-4.51810422495373]
								}, {
									"case":	79,
									"scores":	[-4.51810422495373]
								}, {
									"case":	80,
									"scores":	[-4.51810422495373]
								}, {
									"case":	81,
									"scores":	[-4.51810422495373]
								}, {
									"case":	82,
									"scores":	[-4.51810422495373]
								}, {
									"case":	83,
									"scores":	[-4.51810422495373]
								}, {
									"case":	84,
									"scores":	[-4.51810422495373]
								}, {
									"case":	85,
									"scores":	[-4.51810422495373]
								}, {
									"case":	86,
									"scores":	[-4.51810422495373]
								}, {
									"case":	87,
									"scores":	[-4.51810422495373]
								}, {
									"case":	88,
									"scores":	[-4.51810422495373]
								}, {
									"case":	89,
									"scores":	[-4.51810422495373]
								}, {
									"case":	90,
									"scores":	[-4.51810422495373]
								}, {
									"case":	91,
									"scores":	[-4.51810422495373]
								}, {
									"case":	92,
									"scores":	[-4.51810422495373]
								}, {
									"case":	93,
									"scores":	[-4.51810422495373]
								}, {
									"case":	94,
									"scores":	[-4.51810422495373]
								}, {
									"case":	95,
									"scores":	[-4.51810422495373]
								}, {
									"case":	96,
									"scores":	[-4.51810422495373]
								}, {
									"case":	97,
									"scores":	[-4.51810422495373]
								}, {
									"case":	98,
									"scores":	[-4.51810422495373]
								}, {
									"case":	99,
									"scores":	[-4.51810422495373]
								}, {
									"case":	100,
									"scores":	[-4.51810422495373]
								}, {
									"case":	101,
									"scores":	[-4.51810422495373]
								}, {
									"case":	102,
									"scores":	[-4.51810422495373]
								}, {
									"case":	103,
									"scores":	[-4.51810422495373]
								}, {
									"case":	104,
									"scores":	[-4.51810422495373]
								}, {
									"case":	105,
									"scores":	[-4.51810422495373]
								}, {
									"case":	106,
									"scores":	[-4.51810422495373]
								}, {
									"case":	107,
									"scores":	[-4.51810422495373]
								}, {
									"case":	108,
									"scores":	[-4.51810422495373]
								}]
						}]
				}, {
					"line":	3091,
					"switches":	[{
							"switch":	71,
							"types":	[[], [], [], [], [286], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [], [], [], [199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285], [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], [], [], [], [], [], []],
							"begin_line":	3092,
							"begin_column":	0,
							"end_line":	3092,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->d = (-1)", "dateobj->time->d = (0)", "dateobj->time->d = (1)", "dateobj->time->d = (2)", "dateobj->time->d = (3)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->m = (-1)", "dateobj->time->m = (0)", "dateobj->time->m = (1)", "dateobj->time->m = (2)", "dateobj->time->m = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->y = (-1)", "dateobj->time->y = (0)", "dateobj->time->y = (1)", "dateobj->time->y = (2)", "dateobj->time->y = (3)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((dateobj), 0, sizeof(php_date_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->d = 1", "dateobj->time->have_relative = 1", "dateobj->time->m = 1", "dateobj->time->relative.d = timelib_daynr_from_weeknr(y, w, d)", "dateobj->time->y = y", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3092\", 31, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(return_value), sizeof (return_value), &(object), sizeof (object), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(y), sizeof (y), &(w), sizeof (w), &(d), sizeof (d), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->y), sizeof (dateobj->time->y), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.49790151763621]
								}, {
									"case":	2,
									"scores":	[-4.49790151763621]
								}, {
									"case":	3,
									"scores":	[-4.49790151763621]
								}, {
									"case":	4,
									"scores":	[-4.49790151763621]
								}, {
									"case":	5,
									"scores":	[-4.49790151763621]
								}, {
									"case":	6,
									"scores":	[-4.49790151763621]
								}, {
									"case":	7,
									"scores":	[-4.49790151763621]
								}, {
									"case":	8,
									"scores":	[-4.49790151763621]
								}, {
									"case":	9,
									"scores":	[-4.49790151763621]
								}, {
									"case":	10,
									"scores":	[-4.49790151763621]
								}, {
									"case":	11,
									"scores":	[-4.49790151763621]
								}, {
									"case":	12,
									"scores":	[-4.49790151763621]
								}, {
									"case":	13,
									"scores":	[-4.49790151763621]
								}, {
									"case":	14,
									"scores":	[-4.49790151763621]
								}, {
									"case":	15,
									"scores":	[-4.49790151763621]
								}, {
									"case":	16,
									"scores":	[-4.49790151763621]
								}, {
									"case":	17,
									"scores":	[-4.49790151763621]
								}, {
									"case":	18,
									"scores":	[-4.49790151763621]
								}, {
									"case":	19,
									"scores":	[-4.49790151763621]
								}, {
									"case":	20,
									"scores":	[-4.49790151763621]
								}, {
									"case":	21,
									"scores":	[-4.49790151763621]
								}, {
									"case":	22,
									"scores":	[-4.49790151763621]
								}, {
									"case":	23,
									"scores":	[-4.49790151763621]
								}, {
									"case":	24,
									"scores":	[-4.49790151763621]
								}, {
									"case":	25,
									"scores":	[-4.49790151763621]
								}, {
									"case":	26,
									"scores":	[-4.49790151763621]
								}, {
									"case":	27,
									"scores":	[-4.49790151763621]
								}, {
									"case":	28,
									"scores":	[-4.49790151763621]
								}, {
									"case":	29,
									"scores":	[-4.49790151763621]
								}, {
									"case":	30,
									"scores":	[-4.49790151763621]
								}, {
									"case":	31,
									"scores":	[-4.49790151763621]
								}, {
									"case":	32,
									"scores":	[-4.49790151763621]
								}, {
									"case":	33,
									"scores":	[-4.49790151763621]
								}, {
									"case":	34,
									"scores":	[-4.49790151763621]
								}, {
									"case":	35,
									"scores":	[-4.49790151763621]
								}, {
									"case":	36,
									"scores":	[-4.49790151763621]
								}, {
									"case":	37,
									"scores":	[-4.49790151763621]
								}, {
									"case":	38,
									"scores":	[-4.49790151763621]
								}, {
									"case":	39,
									"scores":	[-4.49790151763621]
								}, {
									"case":	40,
									"scores":	[-4.49790151763621]
								}, {
									"case":	41,
									"scores":	[-4.49790151763621]
								}, {
									"case":	42,
									"scores":	[-4.49790151763621]
								}, {
									"case":	43,
									"scores":	[-4.49790151763621]
								}, {
									"case":	44,
									"scores":	[-4.49790151763621]
								}, {
									"case":	45,
									"scores":	[-4.49790151763621]
								}, {
									"case":	46,
									"scores":	[-4.49790151763621]
								}, {
									"case":	47,
									"scores":	[-4.49790151763621]
								}, {
									"case":	48,
									"scores":	[-4.49790151763621]
								}, {
									"case":	49,
									"scores":	[-4.49790151763621]
								}, {
									"case":	50,
									"scores":	[-4.49790151763621]
								}, {
									"case":	51,
									"scores":	[-4.49790151763621]
								}, {
									"case":	52,
									"scores":	[-4.49790151763621]
								}, {
									"case":	53,
									"scores":	[-4.49790151763621]
								}, {
									"case":	54,
									"scores":	[-4.49790151763621]
								}, {
									"case":	55,
									"scores":	[-4.49790151763621]
								}, {
									"case":	56,
									"scores":	[-4.49790151763621]
								}, {
									"case":	57,
									"scores":	[-4.49790151763621]
								}, {
									"case":	58,
									"scores":	[-4.49790151763621]
								}, {
									"case":	59,
									"scores":	[-4.49790151763621]
								}, {
									"case":	60,
									"scores":	[-4.49790151763621]
								}, {
									"case":	61,
									"scores":	[-4.49790151763621]
								}, {
									"case":	62,
									"scores":	[-4.49790151763621]
								}, {
									"case":	63,
									"scores":	[-4.49790151763621]
								}, {
									"case":	64,
									"scores":	[-4.49790151763621]
								}, {
									"case":	65,
									"scores":	[-4.49790151763621]
								}, {
									"case":	66,
									"scores":	[-4.49790151763621]
								}, {
									"case":	67,
									"scores":	[-4.49790151763621]
								}, {
									"case":	68,
									"scores":	[-4.49790151763621]
								}, {
									"case":	69,
									"scores":	[-4.49790151763621]
								}, {
									"case":	70,
									"scores":	[-4.49790151763621]
								}, {
									"case":	71,
									"scores":	[-4.49790151763621]
								}, {
									"case":	72,
									"scores":	[-4.49790151763621]
								}, {
									"case":	73,
									"scores":	[-4.49790151763621]
								}, {
									"case":	74,
									"scores":	[-4.49790151763621]
								}, {
									"case":	75,
									"scores":	[-4.49790151763621]
								}, {
									"case":	76,
									"scores":	[-4.49790151763621]
								}, {
									"case":	77,
									"scores":	[-4.49790151763621]
								}, {
									"case":	78,
									"scores":	[-4.49790151763621]
								}, {
									"case":	79,
									"scores":	[-4.49790151763621]
								}, {
									"case":	80,
									"scores":	[-4.49790151763621]
								}, {
									"case":	81,
									"scores":	[-4.49790151763621]
								}, {
									"case":	82,
									"scores":	[-4.49790151763621]
								}, {
									"case":	83,
									"scores":	[-4.49790151763621]
								}, {
									"case":	84,
									"scores":	[-4.49790151763621]
								}, {
									"case":	85,
									"scores":	[-4.49790151763621]
								}, {
									"case":	86,
									"scores":	[-4.49790151763621]
								}, {
									"case":	87,
									"scores":	[-4.49790151763621]
								}, {
									"case":	88,
									"scores":	[-4.49790151763621]
								}, {
									"case":	89,
									"scores":	[-4.49790151763621]
								}, {
									"case":	90,
									"scores":	[-4.49790151763621]
								}, {
									"case":	91,
									"scores":	[-4.49790151763621]
								}, {
									"case":	92,
									"scores":	[-4.49790151763621]
								}, {
									"case":	93,
									"scores":	[-4.49790151763621]
								}, {
									"case":	94,
									"scores":	[-4.49790151763621]
								}, {
									"case":	95,
									"scores":	[-4.49790151763621]
								}, {
									"case":	96,
									"scores":	[-4.49790151763621]
								}, {
									"case":	97,
									"scores":	[-4.49790151763621]
								}, {
									"case":	98,
									"scores":	[-4.49790151763621]
								}, {
									"case":	99,
									"scores":	[-4.49790151763621]
								}, {
									"case":	100,
									"scores":	[-4.49790151763621]
								}, {
									"case":	101,
									"scores":	[-4.49790151763621]
								}, {
									"case":	102,
									"scores":	[-4.49790151763621]
								}, {
									"case":	103,
									"scores":	[-4.49790151763621]
								}, {
									"case":	104,
									"scores":	[-4.49790151763621]
								}, {
									"case":	105,
									"scores":	[-4.49790151763621]
								}, {
									"case":	106,
									"scores":	[-4.49790151763621]
								}, {
									"case":	107,
									"scores":	[-4.49790151763621]
								}, {
									"case":	108,
									"scores":	[-4.49790151763621]
								}, {
									"case":	109,
									"scores":	[-4.49790151763621]
								}, {
									"case":	110,
									"scores":	[-4.49790151763621]
								}, {
									"case":	111,
									"scores":	[-4.49790151763621]
								}, {
									"case":	112,
									"scores":	[-4.49790151763621]
								}, {
									"case":	113,
									"scores":	[-4.49790151763621]
								}, {
									"case":	114,
									"scores":	[-4.49790151763621]
								}, {
									"case":	115,
									"scores":	[-4.49790151763621]
								}, {
									"case":	116,
									"scores":	[-4.49790151763621]
								}, {
									"case":	117,
									"scores":	[-4.49790151763621]
								}, {
									"case":	118,
									"scores":	[-4.49790151763621]
								}, {
									"case":	119,
									"scores":	[-4.49790151763621]
								}, {
									"case":	120,
									"scores":	[-4.49790151763621]
								}, {
									"case":	121,
									"scores":	[-4.49790151763621]
								}, {
									"case":	122,
									"scores":	[-4.49790151763621]
								}, {
									"case":	123,
									"scores":	[-4.49790151763621]
								}, {
									"case":	124,
									"scores":	[-4.49790151763621]
								}, {
									"case":	125,
									"scores":	[-4.49790151763621]
								}, {
									"case":	126,
									"scores":	[-4.49790151763621]
								}, {
									"case":	127,
									"scores":	[-4.49790151763621]
								}, {
									"case":	128,
									"scores":	[-4.49790151763621]
								}, {
									"case":	129,
									"scores":	[-4.49790151763621]
								}, {
									"case":	130,
									"scores":	[-4.49790151763621]
								}, {
									"case":	131,
									"scores":	[-4.49790151763621]
								}, {
									"case":	132,
									"scores":	[-4.49790151763621]
								}, {
									"case":	133,
									"scores":	[-4.49790151763621]
								}, {
									"case":	134,
									"scores":	[-4.49790151763621]
								}, {
									"case":	135,
									"scores":	[-4.49790151763621]
								}, {
									"case":	136,
									"scores":	[-4.49790151763621]
								}, {
									"case":	137,
									"scores":	[-4.49790151763621]
								}, {
									"case":	138,
									"scores":	[-4.49790151763621]
								}, {
									"case":	139,
									"scores":	[-4.49790151763621]
								}, {
									"case":	140,
									"scores":	[-4.49790151763621]
								}, {
									"case":	141,
									"scores":	[-4.49790151763621]
								}, {
									"case":	142,
									"scores":	[-4.49790151763621]
								}, {
									"case":	143,
									"scores":	[-4.49790151763621]
								}, {
									"case":	144,
									"scores":	[-4.49790151763621]
								}, {
									"case":	145,
									"scores":	[-4.49790151763621]
								}, {
									"case":	146,
									"scores":	[-4.49790151763621]
								}, {
									"case":	147,
									"scores":	[-4.49790151763621]
								}, {
									"case":	148,
									"scores":	[-4.49790151763621]
								}, {
									"case":	149,
									"scores":	[-4.49790151763621]
								}, {
									"case":	150,
									"scores":	[-4.49790151763621]
								}, {
									"case":	151,
									"scores":	[-4.49790151763621]
								}, {
									"case":	152,
									"scores":	[-4.49790151763621]
								}, {
									"case":	153,
									"scores":	[-4.49790151763621]
								}, {
									"case":	154,
									"scores":	[-4.49790151763621]
								}, {
									"case":	155,
									"scores":	[-4.49790151763621]
								}, {
									"case":	156,
									"scores":	[-4.49790151763621]
								}, {
									"case":	157,
									"scores":	[-4.49790151763621]
								}, {
									"case":	158,
									"scores":	[-4.49790151763621]
								}, {
									"case":	159,
									"scores":	[-4.49790151763621]
								}, {
									"case":	160,
									"scores":	[-4.49790151763621]
								}, {
									"case":	161,
									"scores":	[-4.49790151763621]
								}, {
									"case":	162,
									"scores":	[-4.49790151763621]
								}, {
									"case":	163,
									"scores":	[-4.49790151763621]
								}, {
									"case":	164,
									"scores":	[-4.49790151763621]
								}, {
									"case":	165,
									"scores":	[-4.49790151763621]
								}, {
									"case":	166,
									"scores":	[-4.49790151763621]
								}, {
									"case":	167,
									"scores":	[-4.49790151763621]
								}, {
									"case":	168,
									"scores":	[-4.49790151763621]
								}, {
									"case":	169,
									"scores":	[-4.49790151763621]
								}, {
									"case":	170,
									"scores":	[-4.49790151763621]
								}, {
									"case":	171,
									"scores":	[-4.49790151763621]
								}, {
									"case":	172,
									"scores":	[-4.49790151763621]
								}, {
									"case":	173,
									"scores":	[-4.49790151763621]
								}, {
									"case":	174,
									"scores":	[-4.49790151763621]
								}, {
									"case":	175,
									"scores":	[-4.49790151763621]
								}, {
									"case":	176,
									"scores":	[-4.49790151763621]
								}, {
									"case":	177,
									"scores":	[-4.49790151763621]
								}, {
									"case":	178,
									"scores":	[-4.49790151763621]
								}, {
									"case":	179,
									"scores":	[-4.49790151763621]
								}, {
									"case":	180,
									"scores":	[-4.49790151763621]
								}, {
									"case":	181,
									"scores":	[-4.49790151763621]
								}, {
									"case":	182,
									"scores":	[-4.49790151763621]
								}, {
									"case":	183,
									"scores":	[-4.49790151763621]
								}, {
									"case":	184,
									"scores":	[-4.49790151763621]
								}, {
									"case":	185,
									"scores":	[-4.49790151763621]
								}, {
									"case":	186,
									"scores":	[-4.49790151763621]
								}, {
									"case":	187,
									"scores":	[-4.49790151763621]
								}, {
									"case":	188,
									"scores":	[-4.49790151763621]
								}, {
									"case":	189,
									"scores":	[-4.49790151763621]
								}, {
									"case":	190,
									"scores":	[-4.49790151763621]
								}, {
									"case":	191,
									"scores":	[-4.49790151763621]
								}, {
									"case":	192,
									"scores":	[-4.49790151763621]
								}, {
									"case":	193,
									"scores":	[-4.49790151763621]
								}, {
									"case":	194,
									"scores":	[-4.49790151763621]
								}, {
									"case":	195,
									"scores":	[-4.49790151763621]
								}, {
									"case":	196,
									"scores":	[-4.49790151763621]
								}, {
									"case":	197,
									"scores":	[-4.49790151763621]
								}, {
									"case":	198,
									"scores":	[-4.49790151763621]
								}, {
									"case":	199,
									"scores":	[-4.49790151763621]
								}, {
									"case":	200,
									"scores":	[-4.49790151763621]
								}, {
									"case":	201,
									"scores":	[-4.49790151763621]
								}, {
									"case":	202,
									"scores":	[-4.49790151763621]
								}, {
									"case":	203,
									"scores":	[-4.49790151763621]
								}, {
									"case":	204,
									"scores":	[-4.49790151763621]
								}, {
									"case":	205,
									"scores":	[-4.49790151763621]
								}, {
									"case":	206,
									"scores":	[-4.49790151763621]
								}, {
									"case":	207,
									"scores":	[-4.49790151763621]
								}, {
									"case":	208,
									"scores":	[-4.49790151763621]
								}, {
									"case":	209,
									"scores":	[-4.49790151763621]
								}, {
									"case":	210,
									"scores":	[-4.49790151763621]
								}, {
									"case":	211,
									"scores":	[-4.49790151763621]
								}, {
									"case":	212,
									"scores":	[-4.49790151763621]
								}, {
									"case":	213,
									"scores":	[-4.49790151763621]
								}, {
									"case":	214,
									"scores":	[-4.49790151763621]
								}, {
									"case":	215,
									"scores":	[-4.49790151763621]
								}, {
									"case":	216,
									"scores":	[-4.49790151763621]
								}, {
									"case":	217,
									"scores":	[-4.49790151763621]
								}, {
									"case":	218,
									"scores":	[-4.49790151763621]
								}, {
									"case":	219,
									"scores":	[-4.49790151763621]
								}, {
									"case":	220,
									"scores":	[-4.49790151763621]
								}, {
									"case":	221,
									"scores":	[-4.49790151763621]
								}, {
									"case":	222,
									"scores":	[-4.49790151763621]
								}, {
									"case":	223,
									"scores":	[-4.49790151763621]
								}, {
									"case":	224,
									"scores":	[-4.49790151763621]
								}, {
									"case":	225,
									"scores":	[-4.49790151763621]
								}, {
									"case":	226,
									"scores":	[-4.49790151763621]
								}, {
									"case":	227,
									"scores":	[-4.49790151763621]
								}, {
									"case":	228,
									"scores":	[-4.49790151763621]
								}, {
									"case":	229,
									"scores":	[-4.49790151763621]
								}, {
									"case":	230,
									"scores":	[-4.49790151763621]
								}, {
									"case":	231,
									"scores":	[-4.49790151763621]
								}, {
									"case":	232,
									"scores":	[-4.49790151763621]
								}, {
									"case":	233,
									"scores":	[-4.49790151763621]
								}, {
									"case":	234,
									"scores":	[-4.49790151763621]
								}, {
									"case":	235,
									"scores":	[-4.49790151763621]
								}, {
									"case":	236,
									"scores":	[-4.49790151763621]
								}, {
									"case":	237,
									"scores":	[-4.49790151763621]
								}, {
									"case":	238,
									"scores":	[-4.49790151763621]
								}, {
									"case":	239,
									"scores":	[-4.49790151763621]
								}, {
									"case":	240,
									"scores":	[-4.49790151763621]
								}, {
									"case":	241,
									"scores":	[-4.49790151763621]
								}, {
									"case":	242,
									"scores":	[-4.49790151763621]
								}, {
									"case":	243,
									"scores":	[-4.49790151763621]
								}, {
									"case":	244,
									"scores":	[-4.49790151763621]
								}, {
									"case":	245,
									"scores":	[-4.49790151763621]
								}, {
									"case":	246,
									"scores":	[-4.49790151763621]
								}, {
									"case":	247,
									"scores":	[-4.49790151763621]
								}, {
									"case":	248,
									"scores":	[-4.49790151763621]
								}, {
									"case":	249,
									"scores":	[-4.49790151763621]
								}, {
									"case":	250,
									"scores":	[-4.49790151763621]
								}, {
									"case":	251,
									"scores":	[-4.49790151763621]
								}, {
									"case":	252,
									"scores":	[-4.49790151763621]
								}, {
									"case":	253,
									"scores":	[-4.49790151763621]
								}, {
									"case":	254,
									"scores":	[-4.49790151763621]
								}, {
									"case":	255,
									"scores":	[-4.49790151763621]
								}, {
									"case":	256,
									"scores":	[-4.49790151763621]
								}, {
									"case":	257,
									"scores":	[-4.49790151763621]
								}, {
									"case":	258,
									"scores":	[-4.49790151763621]
								}, {
									"case":	259,
									"scores":	[-4.49790151763621]
								}, {
									"case":	260,
									"scores":	[-4.49790151763621]
								}, {
									"case":	261,
									"scores":	[-4.49790151763621]
								}, {
									"case":	262,
									"scores":	[-4.49790151763621]
								}, {
									"case":	263,
									"scores":	[-4.49790151763621]
								}, {
									"case":	264,
									"scores":	[-4.49790151763621]
								}, {
									"case":	265,
									"scores":	[-4.49790151763621]
								}, {
									"case":	266,
									"scores":	[-4.49790151763621]
								}, {
									"case":	267,
									"scores":	[-4.49790151763621]
								}, {
									"case":	268,
									"scores":	[-4.49790151763621]
								}, {
									"case":	269,
									"scores":	[-4.49790151763621]
								}, {
									"case":	270,
									"scores":	[-4.49790151763621]
								}, {
									"case":	271,
									"scores":	[-4.49790151763621]
								}, {
									"case":	272,
									"scores":	[-4.49790151763621]
								}, {
									"case":	273,
									"scores":	[-4.49790151763621]
								}, {
									"case":	274,
									"scores":	[-4.49790151763621]
								}, {
									"case":	275,
									"scores":	[-4.49790151763621]
								}, {
									"case":	276,
									"scores":	[-4.49790151763621]
								}, {
									"case":	277,
									"scores":	[-4.49790151763621]
								}, {
									"case":	278,
									"scores":	[-4.49790151763621]
								}, {
									"case":	279,
									"scores":	[-4.49790151763621]
								}, {
									"case":	280,
									"scores":	[-4.49790151763621]
								}, {
									"case":	281,
									"scores":	[-4.49790151763621]
								}, {
									"case":	282,
									"scores":	[-4.49790151763621]
								}, {
									"case":	283,
									"scores":	[-4.49790151763621]
								}, {
									"case":	284,
									"scores":	[-4.49790151763621]
								}, {
									"case":	285,
									"scores":	[-4.49790151763621]
								}, {
									"case":	286,
									"scores":	[-9.29920625173621, -7.86446811383621, -8.34827597273621, -8.68529692973621, -6.90189058403621, -7.40202654903621, -7.14444137503621, -7.40202654903621, -6.90189058403621, -8.15254874903621, -8.15254874903621, -7.63308814903621, -7.87912706283621, -7.84351369683621, -8.15254874903621, -8.15254874903621, -8.15254874903621, -8.15254874903621, -8.36343786603621, -8.39858766283621, -8.15254874903621, -8.15254874903621, -8.15254874903621, -8.15254874903621, -8.15254874903621, -8.15254874903621, -8.15254874903621, -8.15254874903621, -8.15254874903621, -8.15254874903621, -8.39858766283621]
								}]
						}, {
							"switch":	72,
							"types":	[[], [], [1], [], [], [], [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10], [], [], [11]],
							"begin_line":	3092,
							"begin_column":	2,
							"end_line":	3092,
							"end_column":	39,
							"patch_codes":	["if (!__is_neg(\"\", \"L3092\", 31, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(return_value), sizeof (return_value), &(object), sizeof (object), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(y), sizeof (y), &(w), sizeof (w), &(d), sizeof (d), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->y), sizeof (dateobj->time->y), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type), &(dateobj->props), sizeof (dateobj->props)))\n    timelib_update_ts(dateobj->time, ((void *)0));\n", "timelib_fill_holes(dateobj->time, ((void *)0), -1)", "timelib_fill_holes(dateobj->time, ((void *)0), 0)", "timelib_fill_holes(dateobj->time, ((void *)0), 1)", "timelib_fill_holes(dateobj->time, ((void *)0), 2)", "timelib_fill_holes(dateobj->time, ((void *)0), 3)", "timelib_fill_holes(dateobj->time, ((void *)0), ht)", "timelib_fill_holes(dateobj->time, ((void *)0), le_index_ptr)", "timelib_fill_holes(dateobj->time, ((void *)0), php_date_global_timezone_db_enabled)", "timelib_fill_holes(dateobj->time, ((void *)0), return_value_used)", "{\n}\n", "Debug(dateobj->time, ((void *)0))", "php_printf(dateobj->time, ((void *)0))", "printf(dateobj->time, ((void *)0))", "timelib_date_to_int(dateobj->time, ((void *)0))", "timelib_diff(dateobj->time, ((void *)0))", "timelib_do_rel_normalize(dateobj->time, ((void *)0))", "timelib_set_timezone(dateobj->time, ((void *)0))", "timelib_time_tz_abbr_update(dateobj->time, ((void *)0))", "timelib_time_tz_name_update(dateobj->time, ((void *)0))", "wprintf(dateobj->time, ((void *)0))", "timelib_update_ts((&d)->time, ((void *)0))", "timelib_update_ts((&dateobj)->time, ((void *)0))", "timelib_update_ts((&ht)->time, ((void *)0))", "timelib_update_ts((&object)->time, ((void *)0))", "timelib_update_ts((&return_value)->time, ((void *)0))", "timelib_update_ts((&return_value_ptr)->time, ((void *)0))", "timelib_update_ts((&return_value_used)->time, ((void *)0))", "timelib_update_ts((&this_ptr)->time, ((void *)0))", "timelib_update_ts((&w)->time, ((void *)0))", "timelib_update_ts((&y)->time, ((void *)0))", "timelib_update_ts((dateobj)->time, ((void *)0))", "timelib_update_ts(dateobj->time, ((void *)0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.10032386813621, -7.10667267813621, -7.38243168453621, -7.79182818553621, -7.22574752763621, -6.69836812363621, -6.38457042363621, -6.69836812363621, -7.22574752763621, -7.19099538763621, -7.19099538763621, -7.27429907763621, -8.03218717763621, -7.74109381763621, -7.19099538763621, -7.19099538763621, -7.19099538763621, -7.19099538763621, -7.66025538763621, -7.94888348763621, -7.19099538763621, -7.19099538763621, -7.19099538763621, -7.19099538763621, -7.19099538763621, -7.19099538763621, -7.19099538763621, -7.19099538763621, -7.19099538763621, -7.19099538763621, -7.94888348763621]
								}, {
									"case":	2,
									"scores":	[-4.49790151763621]
								}, {
									"case":	3,
									"scores":	[-4.49790151763621]
								}, {
									"case":	4,
									"scores":	[-4.49790151763621]
								}, {
									"case":	5,
									"scores":	[-4.49790151763621]
								}, {
									"case":	6,
									"scores":	[-4.49790151763621]
								}, {
									"case":	7,
									"scores":	[-4.49790151763621]
								}, {
									"case":	8,
									"scores":	[-4.49790151763621]
								}, {
									"case":	9,
									"scores":	[-4.49790151763621]
								}, {
									"case":	10,
									"scores":	[-4.49790151763621]
								}, {
									"case":	11,
									"scores":	[-4.49790151763621]
								}, {
									"case":	12,
									"scores":	[-4.49790151763621]
								}, {
									"case":	13,
									"scores":	[-4.49790151763621]
								}, {
									"case":	14,
									"scores":	[-4.49790151763621]
								}, {
									"case":	15,
									"scores":	[-4.49790151763621]
								}, {
									"case":	16,
									"scores":	[-4.49790151763621]
								}, {
									"case":	17,
									"scores":	[-4.49790151763621]
								}, {
									"case":	18,
									"scores":	[-4.49790151763621]
								}, {
									"case":	19,
									"scores":	[-4.49790151763621]
								}, {
									"case":	20,
									"scores":	[-4.49790151763621]
								}, {
									"case":	21,
									"scores":	[-4.49790151763621]
								}, {
									"case":	22,
									"scores":	[-4.49790151763621]
								}, {
									"case":	23,
									"scores":	[-4.49790151763621]
								}, {
									"case":	24,
									"scores":	[-4.49790151763621]
								}, {
									"case":	25,
									"scores":	[-4.49790151763621]
								}, {
									"case":	26,
									"scores":	[-4.49790151763621]
								}, {
									"case":	27,
									"scores":	[-4.49790151763621]
								}, {
									"case":	28,
									"scores":	[-4.49790151763621]
								}, {
									"case":	29,
									"scores":	[-4.49790151763621]
								}, {
									"case":	30,
									"scores":	[-4.49790151763621]
								}, {
									"case":	31,
									"scores":	[-4.49790151763621]
								}, {
									"case":	32,
									"scores":	[-4.49790151763621]
								}, {
									"case":	33,
									"scores":	[-4.49790151763621]
								}]
						}]
				}, {
					"line":	3181,
					"switches":	[{
							"switch":	75,
							"types":	[[], [], [], [], [105, 106, 107, 108], [], [], [], [], [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [], [], [], [], [], []],
							"begin_line":	3182,
							"begin_column":	1,
							"end_line":	3182,
							"end_column":	1,
							"patch_codes":	["(date_globals.timezone) = (tz)", "(date_globals.timezone) = (tzid)", "(tz)++", "(tzid)++", "_efree(((tz)))", "_efree(((tzid)))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", (tz))", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", (tzid))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain a start date.\", (tz))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain a start date.\", (tzid))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an end date or a recurrence count.\", (tz))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an end date or a recurrence count.\", (tzid))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an interval.\", (tz))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an interval.\", (tzid))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", (tz))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", (tzid))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", (tz))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", (tzid))", "php_error_docref0(((void *)0), (1 << 3L), \"Timezone ID '%s' is invalid\", (tz))", "php_error_docref0(((void *)0), (1 << 3L), \"Timezone ID '%s' is invalid\", (tzid))", "timelib_tzinfo_dtor(*(tzi))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", tz)", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3182\", 8, &(tzi), sizeof (tzi), &(tzid), sizeof (tzid), &(php_date_global_timezone_db), sizeof (php_date_global_timezone_db), &(tz), sizeof (tz), &(php_date_global_timezone_db->version), sizeof (php_date_global_timezone_db->version), &(php_date_global_timezone_db->index_size), sizeof (php_date_global_timezone_db->index_size), &(php_date_global_timezone_db->index), sizeof (php_date_global_timezone_db->index), &(php_date_global_timezone_db->data), sizeof (php_date_global_timezone_db->data)))\n    return -1;\n", "if (__is_neg(\"\", \"L3182\", 8, &(tzi), sizeof (tzi), &(tzid), sizeof (tzid), &(php_date_global_timezone_db), sizeof (php_date_global_timezone_db), &(tz), sizeof (tz), &(php_date_global_timezone_db->version), sizeof (php_date_global_timezone_db->version), &(php_date_global_timezone_db->index_size), sizeof (php_date_global_timezone_db->index_size), &(php_date_global_timezone_db->index), sizeof (php_date_global_timezone_db->index), &(php_date_global_timezone_db->data), sizeof (php_date_global_timezone_db->data)))\n    return 0;\n", "if (__is_neg(\"\", \"L3182\", 8, &(tzi), sizeof (tzi), &(tzid), sizeof (tzid), &(php_date_global_timezone_db), sizeof (php_date_global_timezone_db), &(tz), sizeof (tz), &(php_date_global_timezone_db->version), sizeof (php_date_global_timezone_db->version), &(php_date_global_timezone_db->index_size), sizeof (php_date_global_timezone_db->index_size), &(php_date_global_timezone_db->index), sizeof (php_date_global_timezone_db->index), &(php_date_global_timezone_db->data), sizeof (php_date_global_timezone_db->data)))\n    return 1;\n", "if (__is_neg(\"\", \"L3182\", 8, &(tzi), sizeof (tzi), &(tzid), sizeof (tzid), &(php_date_global_timezone_db), sizeof (php_date_global_timezone_db), &(tz), sizeof (tz), &(php_date_global_timezone_db->version), sizeof (php_date_global_timezone_db->version), &(php_date_global_timezone_db->index_size), sizeof (php_date_global_timezone_db->index_size), &(php_date_global_timezone_db->index), sizeof (php_date_global_timezone_db->index), &(php_date_global_timezone_db->data), sizeof (php_date_global_timezone_db->data)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	2,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	3,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	4,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	5,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	6,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	7,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	8,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	9,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	10,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	11,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	12,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	13,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	14,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	15,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	16,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	17,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	18,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	19,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	20,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	21,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	22,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	23,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	24,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	25,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	26,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	27,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	28,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	29,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	30,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	31,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	32,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	33,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	34,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	35,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	36,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	37,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	38,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	39,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	40,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	41,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	42,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	43,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	44,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	45,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	46,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	47,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	48,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	49,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	50,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	51,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	52,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	53,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	54,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	55,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	56,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	57,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	58,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	59,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	60,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	61,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	62,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	63,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	64,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	65,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	66,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	67,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	68,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	69,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	70,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	71,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	72,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	73,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	74,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	75,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	76,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	77,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	78,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	79,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	80,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	81,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	82,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	83,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	84,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	85,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	86,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	87,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	88,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	89,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	90,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	91,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	92,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	93,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	94,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	95,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	96,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	97,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	98,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	99,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	100,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	101,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	102,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	103,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	104,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	105,
									"scores":	[-9.6361158355450538, -8.221503666545054, -9.2358600183450541, -10.830380035545053, -11.607425809545054, -11.396536692545054, -11.642575606345053, -11.607425809545054]
								}, {
									"case":	106,
									"scores":	[-6.8116468355450532, -5.3970346665450535, -6.4113910183450535, -8.0059110355450542, -8.7829568095450536, -8.572067692545053, -8.8181066063450544, -8.7829568095450536]
								}, {
									"case":	107,
									"scores":	[-9.6361158355450538, -8.221503666545054, -9.2358600183450541, -10.830380035545053, -11.607425809545054, -11.396536692545054, -11.642575606345053, -11.607425809545054]
								}, {
									"case":	108,
									"scores":	[-9.6361158355450538, -8.221503666545054, -9.2358600183450541, -10.830380035545053, -11.607425809545054, -11.396536692545054, -11.642575606345053, -11.607425809545054]
								}]
						}, {
							"switch":	76,
							"types":	[[], [], [1], [], [], [], [], [], [3], [], [], [], [], [], [], [], [2]],
							"begin_line":	3182,
							"begin_column":	3,
							"end_line":	3182,
							"end_column":	63,
							"patch_codes":	["if (!__is_neg(\"\", \"L3182\", 8, &(tzi), sizeof (tzi), &(tzid), sizeof (tzid), &(php_date_global_timezone_db), sizeof (php_date_global_timezone_db), &(tz), sizeof (tz), &(php_date_global_timezone_db->version), sizeof (php_date_global_timezone_db->version), &(php_date_global_timezone_db->index_size), sizeof (php_date_global_timezone_db->index_size), &(php_date_global_timezone_db->index), sizeof (php_date_global_timezone_db->index), &(php_date_global_timezone_db->data), sizeof (php_date_global_timezone_db->data)))\n    *tzi = php_date_parse_tzfile(tzid, php_date_global_timezone_db ? php_date_global_timezone_db : timelib_builtin_db());\n", "{\n}\n", "*tzi = timelib_parse_tzfile(tzid, php_date_global_timezone_db ? php_date_global_timezone_db : timelib_builtin_db())"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.308379802545053, -5.4989797025450535, -6.2019952425450535, -7.0016747925450531, -7.2321688025450532, -6.7629088025450539, -7.5207969025450536, -7.2321688025450532]
								}, {
									"case":	2,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	3,
									"scores":	[-5.8918883225450536]
								}]
						}]
				}, {
					"line":	3180,
					"switches":	[{
							"switch":	73,
							"types":	[[], [], [], [], [], [], [], [], [], [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [], [], [], [], [], []],
							"begin_line":	3181,
							"begin_column":	0,
							"end_line":	3181,
							"end_column":	0,
							"patch_codes":	["(date_globals.timezone) = (tz)", "(date_globals.timezone) = (tzid)", "(tz)++", "(tzid)++", "_efree(((tz)))", "_efree(((tzid)))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", (tz))", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", (tzid))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain a start date.\", (tz))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain a start date.\", (tzid))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an end date or a recurrence count.\", (tz))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an end date or a recurrence count.\", (tzid))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an interval.\", (tz))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an interval.\", (tzid))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", (tz))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", (tzid))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", (tz))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", (tzid))", "php_error_docref0(((void *)0), (1 << 3L), \"Timezone ID '%s' is invalid\", (tz))", "php_error_docref0(((void *)0), (1 << 3L), \"Timezone ID '%s' is invalid\", (tzid))", "timelib_tzinfo_dtor(*(tzi))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", tz)", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	2,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	3,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	4,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	5,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	6,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	7,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	8,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	9,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	10,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	11,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	12,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	13,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	14,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	15,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	16,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	17,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	18,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	19,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	20,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	21,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	22,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	23,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	24,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	25,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	26,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	27,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	28,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	29,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	30,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	31,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	32,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	33,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	34,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	35,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	36,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	37,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	38,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	39,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	40,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	41,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	42,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	43,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	44,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	45,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	46,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	47,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	48,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	49,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	50,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	51,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	52,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	53,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	54,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	55,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	56,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	57,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	58,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	59,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	60,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	61,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	62,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	63,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	64,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	65,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	66,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	67,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	68,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	69,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	70,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	71,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	72,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	73,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	74,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	75,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	76,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	77,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	78,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	79,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	80,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	81,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	82,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	83,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	84,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	85,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	86,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	87,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	88,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	89,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	90,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	91,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	92,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	93,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	94,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	95,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	96,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	97,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	98,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	99,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	100,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	101,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	102,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	103,
									"scores":	[-5.8918883225450536]
								}, {
									"case":	104,
									"scores":	[-5.8918883225450536]
								}]
						}, {
							"switch":	74,
							"types":	[[2], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	3181,
							"begin_column":	2,
							"end_line":	3185,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L3181\", 8, &(tz), sizeof (tz), &(tzid), sizeof (tzid), &(tzi), sizeof (tzi), &(php_date_global_timezone_db), sizeof (php_date_global_timezone_db), &(php_date_global_timezone_db->version), sizeof (php_date_global_timezone_db->version), &(php_date_global_timezone_db->index_size), sizeof (php_date_global_timezone_db->index_size), &(php_date_global_timezone_db->index), sizeof (php_date_global_timezone_db->index), &(php_date_global_timezone_db->data), sizeof (php_date_global_timezone_db->data))) {\n    *tzi = php_date_parse_tzfile(tzid, php_date_global_timezone_db ? php_date_global_timezone_db : timelib_builtin_db());\n} else {\n    *tzi = php_date_parse_tzfile(tz, php_date_global_timezone_db ? php_date_global_timezone_db : timelib_builtin_db());\n}\n", "if (((tzid = timelib_timezone_id_from_abbr(tz, -1, 0))) && !__is_neg(\"\", \"L3181\", 8, &(tz), sizeof (tz), &(tzid), sizeof (tzid), &(tzi), sizeof (tzi), &(php_date_global_timezone_db), sizeof (php_date_global_timezone_db), &(php_date_global_timezone_db->version), sizeof (php_date_global_timezone_db->version), &(php_date_global_timezone_db->index_size), sizeof (php_date_global_timezone_db->index_size), &(php_date_global_timezone_db->index), sizeof (php_date_global_timezone_db->index), &(php_date_global_timezone_db->data), sizeof (php_date_global_timezone_db->data))) {\n    *tzi = php_date_parse_tzfile(tzid, php_date_global_timezone_db ? php_date_global_timezone_db : timelib_builtin_db());\n} else {\n    *tzi = php_date_parse_tzfile(tz, php_date_global_timezone_db ? php_date_global_timezone_db : timelib_builtin_db());\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.1434360324281458, -2.1777612344281465, -2.0164133339281456, -2.5189252634281454, -3.549098823428146, -3.0798388234281457, -3.8377269234281459, -3.549098823428146]
								}, {
									"case":	2,
									"scores":	[-3.7864904384281455, -3.8208156404281461, -3.6594677399281457, -4.1619796694281455, -5.1921532294281452, -4.7228932294281458, -5.4807813294281456, -5.1921532294281452]
								}]
						}]
				}]
		}],
	"sizes":	[{
			"switch":	0,
			"case":	337,
			"size":	30
		}, {
			"switch":	0,
			"case":	338,
			"size":	30
		}, {
			"switch":	1,
			"case":	336,
			"size":	10
		}, {
			"switch":	1,
			"case":	337,
			"size":	10
		}, {
			"switch":	2,
			"case":	336,
			"size":	10
		}, {
			"switch":	2,
			"case":	337,
			"size":	10
		}, {
			"switch":	3,
			"case":	337,
			"size":	30
		}, {
			"switch":	3,
			"case":	338,
			"size":	30
		}, {
			"switch":	4,
			"case":	297,
			"size":	79
		}, {
			"switch":	5,
			"case":	1,
			"size":	79
		}, {
			"switch":	5,
			"case":	2,
			"size":	79
		}, {
			"switch":	5,
			"case":	6,
			"size":	79
		}, {
			"switch":	6,
			"case":	1,
			"size":	79
		}, {
			"switch":	6,
			"case":	2,
			"size":	79
		}, {
			"switch":	7,
			"case":	298,
			"size":	31
		}, {
			"switch":	8,
			"case":	1,
			"size":	31
		}, {
			"switch":	9,
			"case":	298,
			"size":	33
		}, {
			"switch":	10,
			"case":	1,
			"size":	33
		}, {
			"switch":	10,
			"case":	2,
			"size":	33
		}, {
			"switch":	10,
			"case":	3,
			"size":	33
		}, {
			"switch":	11,
			"case":	1,
			"size":	33
		}, {
			"switch":	11,
			"case":	2,
			"size":	33
		}, {
			"switch":	12,
			"case":	298,
			"size":	33
		}, {
			"switch":	13,
			"case":	1,
			"size":	33
		}, {
			"switch":	14,
			"case":	298,
			"size":	11
		}, {
			"switch":	15,
			"case":	1,
			"size":	11
		}, {
			"switch":	15,
			"case":	2,
			"size":	11
		}, {
			"switch":	15,
			"case":	3,
			"size":	11
		}, {
			"switch":	16,
			"case":	1,
			"size":	11
		}, {
			"switch":	16,
			"case":	2,
			"size":	11
		}, {
			"switch":	17,
			"case":	299,
			"size":	33
		}, {
			"switch":	18,
			"case":	1,
			"size":	33
		}, {
			"switch":	19,
			"case":	298,
			"size":	33
		}, {
			"switch":	20,
			"case":	1,
			"size":	33
		}, {
			"switch":	21,
			"case":	259,
			"size":	44
		}, {
			"switch":	22,
			"case":	1,
			"size":	44
		}, {
			"switch":	22,
			"case":	2,
			"size":	44
		}, {
			"switch":	22,
			"case":	6,
			"size":	44
		}, {
			"switch":	23,
			"case":	1,
			"size":	44
		}, {
			"switch":	23,
			"case":	2,
			"size":	44
		}, {
			"switch":	24,
			"case":	260,
			"size":	31
		}, {
			"switch":	25,
			"case":	1,
			"size":	31
		}, {
			"switch":	26,
			"case":	260,
			"size":	31
		}, {
			"switch":	27,
			"case":	1,
			"size":	31
		}, {
			"switch":	27,
			"case":	2,
			"size":	31
		}, {
			"switch":	27,
			"case":	3,
			"size":	31
		}, {
			"switch":	28,
			"case":	1,
			"size":	31
		}, {
			"switch":	28,
			"case":	2,
			"size":	31
		}, {
			"switch":	29,
			"case":	260,
			"size":	31
		}, {
			"switch":	30,
			"case":	1,
			"size":	31
		}, {
			"switch":	31,
			"case":	260,
			"size":	31
		}, {
			"switch":	32,
			"case":	1,
			"size":	31
		}, {
			"switch":	33,
			"case":	260,
			"size":	31
		}, {
			"switch":	34,
			"case":	1,
			"size":	31
		}, {
			"switch":	35,
			"case":	260,
			"size":	31
		}, {
			"switch":	36,
			"case":	1,
			"size":	31
		}, {
			"switch":	37,
			"case":	259,
			"size":	44
		}, {
			"switch":	38,
			"case":	1,
			"size":	44
		}, {
			"switch":	38,
			"case":	2,
			"size":	44
		}, {
			"switch":	38,
			"case":	6,
			"size":	44
		}, {
			"switch":	39,
			"case":	1,
			"size":	44
		}, {
			"switch":	39,
			"case":	2,
			"size":	44
		}, {
			"switch":	40,
			"case":	260,
			"size":	31
		}, {
			"switch":	41,
			"case":	1,
			"size":	31
		}, {
			"switch":	42,
			"case":	260,
			"size":	31
		}, {
			"switch":	43,
			"case":	1,
			"size":	31
		}, {
			"switch":	43,
			"case":	2,
			"size":	31
		}, {
			"switch":	43,
			"case":	3,
			"size":	31
		}, {
			"switch":	44,
			"case":	1,
			"size":	31
		}, {
			"switch":	44,
			"case":	2,
			"size":	31
		}, {
			"switch":	45,
			"case":	260,
			"size":	31
		}, {
			"switch":	46,
			"case":	1,
			"size":	31
		}, {
			"switch":	47,
			"case":	260,
			"size":	31
		}, {
			"switch":	48,
			"case":	1,
			"size":	31
		}, {
			"switch":	49,
			"case":	260,
			"size":	31
		}, {
			"switch":	50,
			"case":	1,
			"size":	31
		}, {
			"switch":	51,
			"case":	260,
			"size":	31
		}, {
			"switch":	52,
			"case":	1,
			"size":	31
		}, {
			"switch":	53,
			"case":	285,
			"size":	44
		}, {
			"switch":	54,
			"case":	1,
			"size":	44
		}, {
			"switch":	54,
			"case":	2,
			"size":	44
		}, {
			"switch":	54,
			"case":	6,
			"size":	44
		}, {
			"switch":	55,
			"case":	1,
			"size":	44
		}, {
			"switch":	55,
			"case":	2,
			"size":	44
		}, {
			"switch":	56,
			"case":	286,
			"size":	31
		}, {
			"switch":	57,
			"case":	1,
			"size":	31
		}, {
			"switch":	58,
			"case":	286,
			"size":	31
		}, {
			"switch":	59,
			"case":	1,
			"size":	31
		}, {
			"switch":	59,
			"case":	2,
			"size":	31
		}, {
			"switch":	59,
			"case":	3,
			"size":	31
		}, {
			"switch":	60,
			"case":	1,
			"size":	31
		}, {
			"switch":	60,
			"case":	2,
			"size":	31
		}, {
			"switch":	61,
			"case":	286,
			"size":	31
		}, {
			"switch":	62,
			"case":	1,
			"size":	31
		}, {
			"switch":	63,
			"case":	286,
			"size":	31
		}, {
			"switch":	64,
			"case":	1,
			"size":	31
		}, {
			"switch":	65,
			"case":	286,
			"size":	44
		}, {
			"switch":	66,
			"case":	1,
			"size":	44
		}, {
			"switch":	67,
			"case":	286,
			"size":	44
		}, {
			"switch":	68,
			"case":	1,
			"size":	44
		}, {
			"switch":	69,
			"case":	286,
			"size":	44
		}, {
			"switch":	70,
			"case":	1,
			"size":	44
		}, {
			"switch":	71,
			"case":	286,
			"size":	31
		}, {
			"switch":	72,
			"case":	1,
			"size":	31
		}, {
			"switch":	74,
			"case":	1,
			"size":	8
		}, {
			"switch":	74,
			"case":	2,
			"size":	8
		}, {
			"switch":	75,
			"case":	105,
			"size":	8
		}, {
			"switch":	75,
			"case":	106,
			"size":	8
		}, {
			"switch":	75,
			"case":	107,
			"size":	8
		}, {
			"switch":	75,
			"case":	108,
			"size":	8
		}, {
			"switch":	76,
			"case":	1,
			"size":	8
		}],
	"func_locations":	[{
			"file":	"ext/date/php_date.c",
			"functions":	[{
					"function":	"__cmsg_nxthdr",
					"begin":	308,
					"end":	324
				}, {
					"function":	"__uint16_identity",
					"begin":	32,
					"end":	36
				}, {
					"function":	"__uint32_identity",
					"begin":	38,
					"end":	42
				}, {
					"function":	"__uint64_identity",
					"begin":	44,
					"end":	48
				}, {
					"function":	"__zend_calloc",
					"begin":	103,
					"end":	108
				}, {
					"function":	"__zend_malloc",
					"begin":	93,
					"end":	101
				}, {
					"function":	"__zend_realloc",
					"begin":	110,
					"end":	118
				}, {
					"function":	"_php_date_tzinfo_dtor",
					"begin":	603,
					"end":	608
				}, {
					"function":	"_zval_copy_ctor",
					"begin":	40,
					"end":	46
				}, {
					"function":	"_zval_dtor",
					"begin":	30,
					"end":	36
				}, {
					"function":	"atof",
					"begin":	24,
					"end":	28
				}, {
					"function":	"atoi",
					"begin":	360,
					"end":	364
				}, {
					"function":	"atol",
					"begin":	365,
					"end":	369
				}, {
					"function":	"atoll",
					"begin":	372,
					"end":	376
				}, {
					"function":	"bsearch",
					"begin":	19,
					"end":	43
				}, {
					"function":	"btowc",
					"begin":	317,
					"end":	320
				}, {
					"function":	"check_id_allowed",
					"begin":	3824,
					"end":	3838
				}, {
					"function":	"date_format",
					"begin":	1008,
					"end":	1160
				}, {
					"function":	"date_interval_format",
					"begin":	3633,
					"end":	3691
				}, {
					"function":	"date_interval_initialize",
					"begin":	3446,
					"end":	3477
				}, {
					"function":	"date_interval_read_property",
					"begin":	3480,
					"end":	3530
				}, {
					"function":	"date_interval_write_property",
					"begin":	3534,
					"end":	3577
				}, {
					"function":	"date_object_clone_date",
					"begin":	2042,
					"end":	2061
				}, {
					"function":	"date_object_clone_interval",
					"begin":	2213,
					"end":	2223
				}, {
					"function":	"date_object_clone_period",
					"begin":	2288,
					"end":	2298
				}, {
					"function":	"date_object_clone_timezone",
					"begin":	2162,
					"end":	2186
				}, {
					"function":	"date_object_compare_date",
					"begin":	2063,
					"end":	2082
				}, {
					"function":	"date_object_free_storage_date",
					"begin":	2300,
					"end":	2310
				}, {
					"function":	"date_object_free_storage_interval",
					"begin":	2323,
					"end":	2330
				}, {
					"function":	"date_object_free_storage_period",
					"begin":	2332,
					"end":	2351
				}, {
					"function":	"date_object_free_storage_timezone",
					"begin":	2312,
					"end":	2321
				}, {
					"function":	"date_object_get_properties",
					"begin":	2084,
					"end":	2135
				}, {
					"function":	"date_object_get_properties_interval",
					"begin":	2225,
					"end":	2261
				}, {
					"function":	"date_object_new_date",
					"begin":	2037,
					"end":	2040
				}, {
					"function":	"date_object_new_date_ex",
					"begin":	2017,
					"end":	2035
				}, {
					"function":	"date_object_new_interval",
					"begin":	2208,
					"end":	2211
				}, {
					"function":	"date_object_new_interval_ex",
					"begin":	2188,
					"end":	2206
				}, {
					"function":	"date_object_new_period",
					"begin":	2283,
					"end":	2286
				}, {
					"function":	"date_object_new_period_ex",
					"begin":	2263,
					"end":	2281
				}, {
					"function":	"date_object_new_timezone",
					"begin":	2157,
					"end":	2160
				}, {
					"function":	"date_object_new_timezone_ex",
					"begin":	2137,
					"end":	2155
				}, {
					"function":	"date_object_period_get_iterator",
					"begin":	1921,
					"end":	1938
				}, {
					"function":	"date_period_initialize",
					"begin":	3714,
					"end":	3736
				}, {
					"function":	"date_period_it_current_data",
					"begin":	1847,
					"end":	1868
				}, {
					"function":	"date_period_it_current_key",
					"begin":	1873,
					"end":	1878
				}, {
					"function":	"date_period_it_dtor",
					"begin":	1808,
					"end":	1817
				}, {
					"function":	"date_period_it_has_more",
					"begin":	1822,
					"end":	1842
				}, {
					"function":	"date_period_it_invalidate_current",
					"begin":	1795,
					"end":	1803
				}, {
					"function":	"date_period_it_move_forward",
					"begin":	1883,
					"end":	1889
				}, {
					"function":	"date_period_it_rewind",
					"begin":	1894,
					"end":	1904
				}, {
					"function":	"date_register_classes",
					"begin":	1940,
					"end":	2015
				}, {
					"function":	"english_suffix",
					"begin":	972,
					"end":	984
				}, {
					"function":	"feof_unlocked",
					"begin":	124,
					"end":	128
				}, {
					"function":	"ferror_unlocked",
					"begin":	131,
					"end":	135
				}, {
					"function":	"fgetc_unlocked",
					"begin":	52,
					"end":	56
				}, {
					"function":	"fputc_unlocked",
					"begin":	87,
					"end":	91
				}, {
					"function":	"fstat",
					"begin":	462,
					"end":	466
				}, {
					"function":	"fstatat",
					"begin":	469,
					"end":	474
				}, {
					"function":	"gc_remove_from_buffer",
					"begin":	187,
					"end":	194
				}, {
					"function":	"gc_zval_check_possible_root",
					"begin":	180,
					"end":	185
				}, {
					"function":	"get_timezone_info",
					"begin":	936,
					"end":	947
				}, {
					"function":	"getc_unlocked",
					"begin":	62,
					"end":	66
				}, {
					"function":	"getchar",
					"begin":	43,
					"end":	47
				}, {
					"function":	"getchar_unlocked",
					"begin":	69,
					"end":	73
				}, {
					"function":	"gnu_dev_major",
					"begin":	79,
					"end":	79
				}, {
					"function":	"gnu_dev_makedev",
					"begin":	81,
					"end":	81
				}, {
					"function":	"gnu_dev_minor",
					"begin":	80,
					"end":	80
				}, {
					"function":	"guess_timezone",
					"begin":	839,
					"end":	934
				}, {
					"function":	"i_zend_is_true",
					"begin":	101,
					"end":	156
				}, {
					"function":	"i_zval_ptr_dtor",
					"begin":	80,
					"end":	99
				}, {
					"function":	"is_numeric_string",
					"begin":	102,
					"end":	224
				}, {
					"function":	"lstat",
					"begin":	455,
					"end":	459
				}, {
					"function":	"mbrlen",
					"begin":	328,
					"end":	332
				}, {
					"function":	"mknod",
					"begin":	478,
					"end":	482
				}, {
					"function":	"mknodat",
					"begin":	486,
					"end":	491
				}, {
					"function":	"php_date",
					"begin":	1162,
					"end":	1179
				}, {
					"function":	"php_date_do_return_parsed_time",
					"begin":	2634,
					"end":	2707
				}, {
					"function":	"php_date_full_day_name",
					"begin":	988,
					"end":	995
				}, {
					"function":	"php_date_get_date_ce",
					"begin":	510,
					"end":	513
				}, {
					"function":	"php_date_get_timezone_ce",
					"begin":	515,
					"end":	518
				}, {
					"function":	"php_date_initialize",
					"begin":	2374,
					"end":	2454
				}, {
					"function":	"php_date_initialize_from_hash",
					"begin":	2514,
					"end":	2559
				}, {
					"function":	"php_date_instantiate",
					"begin":	2354,
					"end":	2361
				}, {
					"function":	"php_date_llabs",
					"begin":	40,
					"end":	40
				}, {
					"function":	"php_date_parse_tzfile",
					"begin":	817,
					"end":	835
				}, {
					"function":	"php_date_set_tzdb",
					"begin":	1351,
					"end":	1359
				}, {
					"function":	"php_date_short_day_name",
					"begin":	997,
					"end":	1004
				}, {
					"function":	"php_do_date_sunrise_sunset",
					"begin":	3965,
					"end":	4046
				}, {
					"function":	"php_format_date",
					"begin":	1182,
					"end":	1204
				}, {
					"function":	"php_idate",
					"begin":	1209,
					"end":	1300
				}, {
					"function":	"php_mktime",
					"begin":	1449,
					"end":	1537
				}, {
					"function":	"php_parse_date",
					"begin":	1363,
					"end":	1383
				}, {
					"function":	"php_set_error_handling",
					"begin":	292,
					"end":	295
				}, {
					"function":	"php_std_error_handling",
					"begin":	296,
					"end":	296
				}, {
					"function":	"php_strftime",
					"begin":	1576,
					"end":	1656
				}, {
					"function":	"putc_unlocked",
					"begin":	97,
					"end":	101
				}, {
					"function":	"putchar",
					"begin":	78,
					"end":	82
				}, {
					"function":	"putchar_unlocked",
					"begin":	104,
					"end":	108
				}, {
					"function":	"safe_free_zval_ptr_rel",
					"begin":	62,
					"end":	69
				}, {
					"function":	"smart_str_print_long",
					"begin":	153,
					"end":	157
				}, {
					"function":	"smart_str_print_unsigned",
					"begin":	159,
					"end":	163
				}, {
					"function":	"stat",
					"begin":	448,
					"end":	452
				}, {
					"function":	"strtoimax",
					"begin":	323,
					"end":	328
				}, {
					"function":	"strtoumax",
					"begin":	335,
					"end":	340
				}, {
					"function":	"timezone_initialize",
					"begin":	3175,
					"end":	3193
				}, {
					"function":	"tolower",
					"begin":	206,
					"end":	210
				}, {
					"function":	"toupper",
					"begin":	212,
					"end":	216
				}, {
					"function":	"update_errors_warnings",
					"begin":	2365,
					"end":	2372
				}, {
					"function":	"vprintf",
					"begin":	35,
					"end":	39
				}, {
					"function":	"wcstoimax",
					"begin":	347,
					"end":	352
				}, {
					"function":	"wcstoumax",
					"begin":	361,
					"end":	366
				}, {
					"function":	"wctob",
					"begin":	323,
					"end":	326
				}, {
					"function":	"zend_arg_types_stack_2_pop",
					"begin":	355,
					"end":	363
				}, {
					"function":	"zend_arg_types_stack_3_pop",
					"begin":	365,
					"end":	374
				}, {
					"function":	"zend_dval_to_lval",
					"begin":	77,
					"end":	83
				}, {
					"function":	"zend_inline_hash_func",
					"begin":	261,
					"end":	288
				}, {
					"function":	"zend_memnstr",
					"begin":	226,
					"end":	257
				}, {
					"function":	"zend_memrchr",
					"begin":	259,
					"end":	274
				}, {
					"function":	"zend_objects_store_del_ref_by_handle",
					"begin":	71,
					"end":	73
				}, {
					"function":	"zend_ptr_stack_2_pop",
					"begin":	93,
					"end":	98
				}, {
					"function":	"zend_ptr_stack_2_push",
					"begin":	72,
					"end":	83
				}, {
					"function":	"zend_ptr_stack_3_pop",
					"begin":	85,
					"end":	91
				}, {
					"function":	"zend_ptr_stack_3_push",
					"begin":	58,
					"end":	70
				}, {
					"function":	"zend_ptr_stack_pop",
					"begin":	108,
					"end":	112
				}, {
					"function":	"zend_ptr_stack_push",
					"begin":	100,
					"end":	106
				}, {
					"function":	"zend_symtable_del",
					"begin":	355,
					"end":	359
				}, {
					"function":	"zend_symtable_exists",
					"begin":	369,
					"end":	373
				}, {
					"function":	"zend_symtable_find",
					"begin":	362,
					"end":	366
				}, {
					"function":	"zend_symtable_update",
					"begin":	348,
					"end":	352
				}, {
					"function":	"zend_symtable_update_current_key_ex",
					"begin":	375,
					"end":	379
				}, {
					"function":	"zend_vm_stack_alloc",
					"begin":	243,
					"end":	270
				}, {
					"function":	"zend_vm_stack_clear_multiple",
					"begin":	331,
					"end":	342
				}, {
					"function":	"zend_vm_stack_destroy",
					"begin":	197,
					"end":	206
				}, {
					"function":	"zend_vm_stack_extend",
					"begin":	208,
					"end":	213
				}, {
					"function":	"zend_vm_stack_free",
					"begin":	284,
					"end":	300
				}, {
					"function":	"zend_vm_stack_free_int",
					"begin":	272,
					"end":	282
				}, {
					"function":	"zend_vm_stack_get_arg",
					"begin":	344,
					"end":	353
				}, {
					"function":	"zend_vm_stack_init",
					"begin":	192,
					"end":	195
				}, {
					"function":	"zend_vm_stack_new_page",
					"begin":	183,
					"end":	190
				}, {
					"function":	"zend_vm_stack_pop",
					"begin":	231,
					"end":	241
				}, {
					"function":	"zend_vm_stack_push",
					"begin":	220,
					"end":	224
				}, {
					"function":	"zend_vm_stack_push_args",
					"begin":	302,
					"end":	329
				}, {
					"function":	"zend_vm_stack_push_nocheck",
					"begin":	226,
					"end":	229
				}, {
					"function":	"zend_vm_stack_top",
					"begin":	215,
					"end":	218
				}, {
					"function":	"zif_checkdate",
					"begin":	1559,
					"end":	1571
				}, {
					"function":	"zif_date",
					"begin":	1305,
					"end":	1308
				}, {
					"function":	"zif_date_add",
					"begin":	2837,
					"end":	2876
				}, {
					"function":	"zif_date_create",
					"begin":	2459,
					"end":	2473
				}, {
					"function":	"zif_date_create_from_format",
					"begin":	2479,
					"end":	2493
				}, {
					"function":	"zif_date_date_set",
					"begin":	3052,
					"end":	3069
				}, {
					"function":	"zif_date_default_timezone_get",
					"begin":	3953,
					"end":	3959
				}, {
					"function":	"zif_date_default_timezone_set",
					"begin":	3930,
					"end":	3948
				}, {
					"function":	"zif_date_diff",
					"begin":	3148,
					"end":	3172
				}, {
					"function":	"zif_date_format",
					"begin":	2750,
					"end":	2763
				}, {
					"function":	"zif_date_get_last_errors",
					"begin":	2623,
					"end":	2631
				}, {
					"function":	"zif_date_interval_create_from_date_string",
					"begin":	3609,
					"end":	3629
				}, {
					"function":	"zif_date_interval_format",
					"begin":	3697,
					"end":	3711
				}, {
					"function":	"zif_date_isodate_set",
					"begin":	3075,
					"end":	3095
				}, {
					"function":	"zif_date_modify",
					"begin":	2769,
					"end":	2831
				}, {
					"function":	"zif_date_offset_get",
					"begin":	2994,
					"end":	3023
				}, {
					"function":	"zif_date_parse",
					"begin":	2712,
					"end":	2725
				}, {
					"function":	"zif_date_parse_from_format",
					"begin":	2731,
					"end":	2744
				}, {
					"function":	"zif_date_sub",
					"begin":	2882,
					"end":	2923
				}, {
					"function":	"zif_date_sun_info",
					"begin":	4067,
					"end":	4167
				}, {
					"function":	"zif_date_sunrise",
					"begin":	4051,
					"end":	4054
				}, {
					"function":	"zif_date_sunset",
					"begin":	4059,
					"end":	4062
				}, {
					"function":	"zif_date_time_set",
					"begin":	3029,
					"end":	3046
				}, {
					"function":	"zif_date_timestamp_get",
					"begin":	3122,
					"end":	3142
				}, {
					"function":	"zif_date_timestamp_set",
					"begin":	3101,
					"end":	3116
				}, {
					"function":	"zif_date_timezone_get",
					"begin":	2929,
					"end":	2961
				}, {
					"function":	"zif_date_timezone_set",
					"begin":	2967,
					"end":	2988
				}, {
					"function":	"zif_getdate",
					"begin":	1733,
					"end":	1764
				}, {
					"function":	"zif_gmdate",
					"begin":	1313,
					"end":	1316
				}, {
					"function":	"zif_gmmktime",
					"begin":	1550,
					"end":	1553
				}, {
					"function":	"zif_gmstrftime",
					"begin":	1669,
					"end":	1672
				}, {
					"function":	"zif_idate",
					"begin":	1321,
					"end":	1347
				}, {
					"function":	"zif_localtime",
					"begin":	1686,
					"end":	1728
				}, {
					"function":	"zif_mktime",
					"begin":	1542,
					"end":	1545
				}, {
					"function":	"zif_strftime",
					"begin":	1661,
					"end":	1664
				}, {
					"function":	"zif_strtotime",
					"begin":	1389,
					"end":	1444
				}, {
					"function":	"zif_time",
					"begin":	1678,
					"end":	1681
				}, {
					"function":	"zif_timezone_abbreviations_list",
					"begin":	3895,
					"end":	3925
				}, {
					"function":	"zif_timezone_identifiers_list",
					"begin":	3843,
					"end":	3877
				}, {
					"function":	"zif_timezone_location_get",
					"begin":	3424,
					"end":	3443
				}, {
					"function":	"zif_timezone_name_from_abbr",
					"begin":	3284,
					"end":	3302
				}, {
					"function":	"zif_timezone_name_get",
					"begin":	3247,
					"end":	3278
				}, {
					"function":	"zif_timezone_offset_get",
					"begin":	3308,
					"end":	3336
				}, {
					"function":	"zif_timezone_open",
					"begin":	3198,
					"end":	3215
				}, {
					"function":	"zif_timezone_transitions_get",
					"begin":	3342,
					"end":	3418
				}, {
					"function":	"zif_timezone_version_get",
					"begin":	3883,
					"end":	3889
				}, {
					"function":	"zim_DateInterval___construct",
					"begin":	3584,
					"end":	3603
				}, {
					"function":	"zim_DatePeriod___construct",
					"begin":	3741,
					"end":	3821
				}, {
					"function":	"zim_DateTimeZone___construct",
					"begin":	3221,
					"end":	3241
				}, {
					"function":	"zim_DateTime___construct",
					"begin":	2499,
					"end":	2511
				}, {
					"function":	"zim_DateTime___set_state",
					"begin":	2563,
					"end":	2578
				}, {
					"function":	"zim_DateTime___wakeup",
					"begin":	2583,
					"end":	2594
				}, {
					"function":	"zm_activate_date",
					"begin":	611,
					"end":	621
				}, {
					"function":	"zm_deactivate_date",
					"begin":	625,
					"end":	642
				}, {
					"function":	"zm_globals_ctor_date",
					"begin":	594,
					"end":	599
				}, {
					"function":	"zm_info_date",
					"begin":	801,
					"end":	813
				}, {
					"function":	"zm_shutdown_date",
					"begin":	788,
					"end":	797
				}, {
					"function":	"zm_startup_date",
					"begin":	742,
					"end":	784
				}, {
					"function":	"zval_addref_p",
					"begin":	386,
					"end":	388
				}, {
					"function":	"zval_delref_p",
					"begin":	390,
					"end":	392
				}, {
					"function":	"zval_from_error_container",
					"begin":	2598,
					"end":	2618
				}, {
					"function":	"zval_isref_p",
					"begin":	394,
					"end":	396
				}, {
					"function":	"zval_refcount_p",
					"begin":	378,
					"end":	380
				}, {
					"function":	"zval_set_isref_p",
					"begin":	398,
					"end":	400
				}, {
					"function":	"zval_set_isref_to_p",
					"begin":	406,
					"end":	408
				}, {
					"function":	"zval_set_refcount_p",
					"begin":	382,
					"end":	384
				}, {
					"function":	"zval_unset_isref_p",
					"begin":	402,
					"end":	404
				}]
		}]
}
