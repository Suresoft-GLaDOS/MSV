{
	"switch_num":	62,
	"case_num":	[34, 8, 35, 3, 34, 71, 35, 126, 34, 278, 2, 34, 177, 34, 1, 65, 3, 65, 111, 2, 66, 307, 164, 306, 1, 306, 307, 3, 2, 307, 153, 306, 3, 306, 53, 306, 1, 59, 2, 307, 101, 307, 10, 307, 3, 2, 306, 3, 2, 306, 1, 306, 1, 30, 5, 2, 30, 31, 282, 1, 30, 49],
	"switch_cluster":	[[1, 5, 7, 9, 10, 12, 14, 18, 19, 22, 24, 28, 30, 32, 34, 36, 40, 42, 45, 48, 50, 52, 55, 58, 59, 61], [3, 16, 27, 38, 44, 47, 54], [0, 2, 4, 6, 8, 11, 13, 15, 17, 20, 21, 23, 25, 26, 29, 31, 33, 35, 37, 39, 41, 43, 46, 49, 51, 53, 56, 57, 60], []],
	"priority":	[{
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	440,
			"primary_score":	999673,
			"second_score":	3110
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	441,
			"primary_score":	999673,
			"second_score":	3108
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	491,
			"primary_score":	999673,
			"second_score":	3111
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	497,
			"primary_score":	999673,
			"second_score":	2
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	587,
			"primary_score":	999673,
			"second_score":	142661
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	588,
			"primary_score":	999673,
			"second_score":	142660
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	590,
			"primary_score":	999673,
			"second_score":	142659
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	591,
			"primary_score":	999673,
			"second_score":	142456
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	592,
			"primary_score":	999673,
			"second_score":	142455
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	595,
			"primary_score":	999673,
			"second_score":	142454
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	602,
			"primary_score":	999673,
			"second_score":	3107
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	604,
			"primary_score":	999673,
			"second_score":	3106
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	605,
			"primary_score":	999673,
			"second_score":	6
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	606,
			"primary_score":	999673,
			"second_score":	5
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	607,
			"primary_score":	999673,
			"second_score":	25
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	608,
			"primary_score":	999673,
			"second_score":	24
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	609,
			"primary_score":	999673,
			"second_score":	23
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	611,
			"primary_score":	999673,
			"second_score":	4
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	613,
			"primary_score":	999673,
			"second_score":	3
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	644,
			"primary_score":	999673,
			"second_score":	144805
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	645,
			"primary_score":	999673,
			"second_score":	144804
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	647,
			"primary_score":	999673,
			"second_score":	144803
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	653,
			"primary_score":	999673,
			"second_score":	144802
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	654,
			"primary_score":	999673,
			"second_score":	144801
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	655,
			"primary_score":	999673,
			"second_score":	144800
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	657,
			"primary_score":	999673,
			"second_score":	144799
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	664,
			"primary_score":	999673,
			"second_score":	144798
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	666,
			"primary_score":	999673,
			"second_score":	144591
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	667,
			"primary_score":	999673,
			"second_score":	144590
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	668,
			"primary_score":	999673,
			"second_score":	144589
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	669,
			"primary_score":	999673,
			"second_score":	144588
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	670,
			"primary_score":	999673,
			"second_score":	144587
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	675,
			"primary_score":	999673,
			"second_score":	144586
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	676,
			"primary_score":	999673,
			"second_score":	144585
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	683,
			"primary_score":	999673,
			"second_score":	144584
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	684,
			"primary_score":	999673,
			"second_score":	144583
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	685,
			"primary_score":	999673,
			"second_score":	144582
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	686,
			"primary_score":	999673,
			"second_score":	144581
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	687,
			"primary_score":	999673,
			"second_score":	144580
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	697,
			"primary_score":	999673,
			"second_score":	143764
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	700,
			"primary_score":	999673,
			"second_score":	143749
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	701,
			"primary_score":	999673,
			"second_score":	143748
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	703,
			"primary_score":	999673,
			"second_score":	143747
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	704,
			"primary_score":	999673,
			"second_score":	122382
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	709,
			"primary_score":	999673,
			"second_score":	122381
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	711,
			"primary_score":	999673,
			"second_score":	122380
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	716,
			"primary_score":	999673,
			"second_score":	145864
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	747,
			"primary_score":	999673,
			"second_score":	143785
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	748,
			"primary_score":	999673,
			"second_score":	143784
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	754,
			"primary_score":	999673,
			"second_score":	143783
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	756,
			"primary_score":	999673,
			"second_score":	143782
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	757,
			"primary_score":	999673,
			"second_score":	143781
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	758,
			"primary_score":	999673,
			"second_score":	143780
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	760,
			"primary_score":	999673,
			"second_score":	143779
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	761,
			"primary_score":	999673,
			"second_score":	143778
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	765,
			"primary_score":	999673,
			"second_score":	143777
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	766,
			"primary_score":	999673,
			"second_score":	143776
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	767,
			"primary_score":	999673,
			"second_score":	143772
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	770,
			"primary_score":	999673,
			"second_score":	143771
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	776,
			"primary_score":	999673,
			"second_score":	143770
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	814,
			"primary_score":	999673,
			"second_score":	143769
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	816,
			"primary_score":	999673,
			"second_score":	143768
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	818,
			"primary_score":	999673,
			"second_score":	143767
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	820,
			"primary_score":	999673,
			"second_score":	143766
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	821,
			"primary_score":	999673,
			"second_score":	145130
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	823,
			"primary_score":	999673,
			"second_score":	143765
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	824,
			"primary_score":	999673,
			"second_score":	122379
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	828,
			"primary_score":	999673,
			"second_score":	122378
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	831,
			"primary_score":	999673,
			"second_score":	122377
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	832,
			"primary_score":	999673,
			"second_score":	122376
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1032,
			"primary_score":	999673,
			"second_score":	145863
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1041,
			"primary_score":	999673,
			"second_score":	145861
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1042,
			"primary_score":	999673,
			"second_score":	145860
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1044,
			"primary_score":	999673,
			"second_score":	145859
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1075,
			"primary_score":	999673,
			"second_score":	145858
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1076,
			"primary_score":	999673,
			"second_score":	145857
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1077,
			"primary_score":	999673,
			"second_score":	145856
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1080,
			"primary_score":	999673,
			"second_score":	145855
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1086,
			"primary_score":	999673,
			"second_score":	145854
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1087,
			"primary_score":	999673,
			"second_score":	145853
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1090,
			"primary_score":	999673,
			"second_score":	145904
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1091,
			"primary_score":	999673,
			"second_score":	144812
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1092,
			"primary_score":	999673,
			"second_score":	144811
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1111,
			"primary_score":	999673,
			"second_score":	144810
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1115,
			"primary_score":	999673,
			"second_score":	144809
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1116,
			"primary_score":	999673,
			"second_score":	144808
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1120,
			"primary_score":	999673,
			"second_score":	144807
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1122,
			"primary_score":	999673,
			"second_score":	144806
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1125,
			"primary_score":	999673,
			"second_score":	144579
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1126,
			"primary_score":	999673,
			"second_score":	144577
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1135,
			"primary_score":	999673,
			"second_score":	145170
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1136,
			"primary_score":	999673,
			"second_score":	145169
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1137,
			"primary_score":	999673,
			"second_score":	145168
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1138,
			"primary_score":	999673,
			"second_score":	145167
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1139,
			"primary_score":	999673,
			"second_score":	145166
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1140,
			"primary_score":	999673,
			"second_score":	145165
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1141,
			"primary_score":	999673,
			"second_score":	145164
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1142,
			"primary_score":	999673,
			"second_score":	145163
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1143,
			"primary_score":	999673,
			"second_score":	145162
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1145,
			"primary_score":	999673,
			"second_score":	145161
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1165,
			"primary_score":	999673,
			"second_score":	145160
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1216,
			"primary_score":	999673,
			"second_score":	145159
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1268,
			"primary_score":	999673,
			"second_score":	145158
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1269,
			"primary_score":	999673,
			"second_score":	145157
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1270,
			"primary_score":	999673,
			"second_score":	145156
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1272,
			"primary_score":	999673,
			"second_score":	142438
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1277,
			"primary_score":	999673,
			"second_score":	142437
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1280,
			"primary_score":	999673,
			"second_score":	142436
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1286,
			"primary_score":	999673,
			"second_score":	142435
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1291,
			"primary_score":	999673,
			"second_score":	142434
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1316,
			"primary_score":	999673,
			"second_score":	142433
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1317,
			"primary_score":	999673,
			"second_score":	142432
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1318,
			"primary_score":	999673,
			"second_score":	142431
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1324,
			"primary_score":	999673,
			"second_score":	142430
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1326,
			"primary_score":	999673,
			"second_score":	142429
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1327,
			"primary_score":	999673,
			"second_score":	142428
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1333,
			"primary_score":	999673,
			"second_score":	142427
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1910,
			"primary_score":	999673,
			"second_score":	122599
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1911,
			"primary_score":	999673,
			"second_score":	122598
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1914,
			"primary_score":	999673,
			"second_score":	122597
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1915,
			"primary_score":	999673,
			"second_score":	122596
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1916,
			"primary_score":	999673,
			"second_score":	122595
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1917,
			"primary_score":	999673,
			"second_score":	122594
		}, {
			"file":	"Zend/zend.c",
			"line":	213,
			"primary_score":	999673,
			"second_score":	120044
		}, {
			"file":	"Zend/zend.c",
			"line":	214,
			"primary_score":	999673,
			"second_score":	120043
		}, {
			"file":	"Zend/zend.c",
			"line":	215,
			"primary_score":	999673,
			"second_score":	120042
		}, {
			"file":	"Zend/zend.c",
			"line":	291,
			"primary_score":	999673,
			"second_score":	120048
		}, {
			"file":	"Zend/zend.c",
			"line":	297,
			"primary_score":	999673,
			"second_score":	120047
		}, {
			"file":	"Zend/zend.c",
			"line":	298,
			"primary_score":	999673,
			"second_score":	120046
		}, {
			"file":	"Zend/zend.c",
			"line":	300,
			"primary_score":	999673,
			"second_score":	120045
		}, {
			"file":	"Zend/zend.c",
			"line":	301,
			"primary_score":	999673,
			"second_score":	120041
		}, {
			"file":	"Zend/zend.c",
			"line":	304,
			"primary_score":	999673,
			"second_score":	120040
		}, {
			"file":	"Zend/zend.c",
			"line":	305,
			"primary_score":	999673,
			"second_score":	120039
		}, {
			"file":	"Zend/zend.c",
			"line":	308,
			"primary_score":	999673,
			"second_score":	120038
		}, {
			"file":	"Zend/zend.c",
			"line":	310,
			"primary_score":	999673,
			"second_score":	122030
		}, {
			"file":	"Zend/zend.c",
			"line":	311,
			"primary_score":	999673,
			"second_score":	122002
		}, {
			"file":	"Zend/zend.c",
			"line":	314,
			"primary_score":	999673,
			"second_score":	122001
		}, {
			"file":	"Zend/zend.c",
			"line":	758,
			"primary_score":	999673,
			"second_score":	108766
		}, {
			"file":	"Zend/zend.c",
			"line":	759,
			"primary_score":	999673,
			"second_score":	108758
		}, {
			"file":	"Zend/zend.c",
			"line":	761,
			"primary_score":	999673,
			"second_score":	48160
		}, {
			"file":	"Zend/zend.c",
			"line":	762,
			"primary_score":	999673,
			"second_score":	48142
		}, {
			"file":	"Zend/zend.c",
			"line":	764,
			"primary_score":	999673,
			"second_score":	13399
		}, {
			"file":	"Zend/zend.c",
			"line":	765,
			"primary_score":	999673,
			"second_score":	13319
		}, {
			"file":	"Zend/zend.c",
			"line":	767,
			"primary_score":	999673,
			"second_score":	13318
		}, {
			"file":	"Zend/zend.c",
			"line":	768,
			"primary_score":	999673,
			"second_score":	13310
		}, {
			"file":	"Zend/zend.c",
			"line":	770,
			"primary_score":	999673,
			"second_score":	13309
		}, {
			"file":	"Zend/zend.c",
			"line":	771,
			"primary_score":	999673,
			"second_score":	13308
		}, {
			"file":	"Zend/zend.c",
			"line":	773,
			"primary_score":	999673,
			"second_score":	13307
		}, {
			"file":	"Zend/zend.c",
			"line":	774,
			"primary_score":	999673,
			"second_score":	6423
		}, {
			"file":	"Zend/zend.c",
			"line":	775,
			"primary_score":	999673,
			"second_score":	6422
		}, {
			"file":	"Zend/zend.c",
			"line":	783,
			"primary_score":	999673,
			"second_score":	6366
		}, {
			"file":	"Zend/zend.c",
			"line":	848,
			"primary_score":	999673,
			"second_score":	192541
		}, {
			"file":	"Zend/zend.c",
			"line":	849,
			"primary_score":	999673,
			"second_score":	192532
		}, {
			"file":	"Zend/zend.c",
			"line":	850,
			"primary_score":	999673,
			"second_score":	191284
		}, {
			"file":	"Zend/zend.c",
			"line":	851,
			"primary_score":	999673,
			"second_score":	189958
		}, {
			"file":	"Zend/zend.c",
			"line":	857,
			"primary_score":	999673,
			"second_score":	150706
		}, {
			"file":	"Zend/zend.c",
			"line":	863,
			"primary_score":	999673,
			"second_score":	119301
		}, {
			"file":	"Zend/zend.c",
			"line":	865,
			"primary_score":	999673,
			"second_score":	119300
		}, {
			"file":	"Zend/zend.c",
			"line":	866,
			"primary_score":	999673,
			"second_score":	119294
		}, {
			"file":	"Zend/zend.c",
			"line":	867,
			"primary_score":	999673,
			"second_score":	118494
		}, {
			"file":	"Zend/zend.c",
			"line":	873,
			"primary_score":	999673,
			"second_score":	119480
		}, {
			"file":	"Zend/zend.c",
			"line":	874,
			"primary_score":	999673,
			"second_score":	119474
		}, {
			"file":	"Zend/zend.c",
			"line":	875,
			"primary_score":	999673,
			"second_score":	119332
		}, {
			"file":	"Zend/zend.c",
			"line":	882,
			"primary_score":	999673,
			"second_score":	118297
		}, {
			"file":	"Zend/zend.c",
			"line":	883,
			"primary_score":	999673,
			"second_score":	118296
		}, {
			"file":	"Zend/zend.c",
			"line":	885,
			"primary_score":	999673,
			"second_score":	118295
		}, {
			"file":	"Zend/zend.c",
			"line":	886,
			"primary_score":	999673,
			"second_score":	118289
		}, {
			"file":	"Zend/zend.c",
			"line":	887,
			"primary_score":	999673,
			"second_score":	118259
		}, {
			"file":	"Zend/zend.c",
			"line":	890,
			"primary_score":	999673,
			"second_score":	118257
		}, {
			"file":	"Zend/zend.c",
			"line":	892,
			"primary_score":	999673,
			"second_score":	109752
		}, {
			"file":	"Zend/zend.c",
			"line":	893,
			"primary_score":	999673,
			"second_score":	109746
		}, {
			"file":	"Zend/zend.c",
			"line":	894,
			"primary_score":	999673,
			"second_score":	109480
		}, {
			"file":	"Zend/zend.c",
			"line":	896,
			"primary_score":	999673,
			"second_score":	109478
		}, {
			"file":	"Zend/zend.c",
			"line":	899,
			"primary_score":	999673,
			"second_score":	109452
		}, {
			"file":	"Zend/zend.c",
			"line":	900,
			"primary_score":	999673,
			"second_score":	109451
		}, {
			"file":	"Zend/zend.c",
			"line":	918,
			"primary_score":	999673,
			"second_score":	109447
		}, {
			"file":	"Zend/zend.c",
			"line":	919,
			"primary_score":	999673,
			"second_score":	109441
		}, {
			"file":	"Zend/zend.c",
			"line":	920,
			"primary_score":	999673,
			"second_score":	109438
		}, {
			"file":	"Zend/zend.c",
			"line":	926,
			"primary_score":	999673,
			"second_score":	109265
		}, {
			"file":	"Zend/zend.c",
			"line":	929,
			"primary_score":	999673,
			"second_score":	109264
		}, {
			"file":	"Zend/zend.c",
			"line":	935,
			"primary_score":	999673,
			"second_score":	109429
		}, {
			"file":	"Zend/zend.c",
			"line":	936,
			"primary_score":	999673,
			"second_score":	109258
		}, {
			"file":	"Zend/zend.c",
			"line":	1174,
			"primary_score":	999673,
			"second_score":	144084
		}, {
			"file":	"Zend/zend.c",
			"line":	1175,
			"primary_score":	999673,
			"second_score":	144083
		}, {
			"file":	"Zend/zend.c",
			"line":	1176,
			"primary_score":	999673,
			"second_score":	144082
		}, {
			"file":	"Zend/zend.c",
			"line":	1177,
			"primary_score":	999673,
			"second_score":	144081
		}, {
			"file":	"Zend/zend.c",
			"line":	1178,
			"primary_score":	999673,
			"second_score":	144080
		}, {
			"file":	"Zend/zend.c",
			"line":	1180,
			"primary_score":	999673,
			"second_score":	144079
		}, {
			"file":	"Zend/zend.c",
			"line":	1181,
			"primary_score":	999673,
			"second_score":	144078
		}, {
			"file":	"Zend/zend.c",
			"line":	1182,
			"primary_score":	999673,
			"second_score":	119528
		}, {
			"file":	"Zend/zend.c",
			"line":	1183,
			"primary_score":	999673,
			"second_score":	119527
		}, {
			"file":	"Zend/zend.c",
			"line":	1184,
			"primary_score":	999673,
			"second_score":	119526
		}, {
			"file":	"Zend/zend.c",
			"line":	1186,
			"primary_score":	999673,
			"second_score":	144072
		}, {
			"file":	"Zend/zend.c",
			"line":	1187,
			"primary_score":	999673,
			"second_score":	134721
		}, {
			"file":	"Zend/zend.c",
			"line":	1188,
			"primary_score":	999673,
			"second_score":	134720
		}, {
			"file":	"Zend/zend.c",
			"line":	1189,
			"primary_score":	999673,
			"second_score":	134719
		}, {
			"file":	"Zend/zend.c",
			"line":	1191,
			"primary_score":	999673,
			"second_score":	134598
		}, {
			"file":	"Zend/zend.c",
			"line":	1192,
			"primary_score":	999673,
			"second_score":	134519
		}, {
			"file":	"Zend/zend.c",
			"line":	1193,
			"primary_score":	999673,
			"second_score":	134518
		}, {
			"file":	"Zend/zend.c",
			"line":	1194,
			"primary_score":	999673,
			"second_score":	134517
		}, {
			"file":	"Zend/zend.c",
			"line":	1195,
			"primary_score":	999673,
			"second_score":	119985
		}, {
			"file":	"Zend/zend.c",
			"line":	1196,
			"primary_score":	999673,
			"second_score":	119983
		}, {
			"file":	"Zend/zend.c",
			"line":	1221,
			"primary_score":	999673,
			"second_score":	119982
		}, {
			"file":	"Zend/zend.c",
			"line":	1222,
			"primary_score":	999673,
			"second_score":	119547
		}, {
			"file":	"Zend/zend.c",
			"line":	1230,
			"primary_score":	999673,
			"second_score":	119525
		}, {
			"file":	"Zend/zend.c",
			"line":	1231,
			"primary_score":	999673,
			"second_score":	119524
		}, {
			"file":	"Zend/zend.c",
			"line":	1232,
			"primary_score":	999673,
			"second_score":	119523
		}, {
			"file":	"Zend/zend.c",
			"line":	1234,
			"primary_score":	999673,
			"second_score":	119522
		}, {
			"file":	"Zend/zend.c",
			"line":	1264,
			"primary_score":	999673,
			"second_score":	109567
		}, {
			"file":	"Zend/zend.h",
			"line":	373,
			"primary_score":	999673,
			"second_score":	13888
		}, {
			"file":	"Zend/zend.h",
			"line":	377,
			"primary_score":	999673,
			"second_score":	123681
		}, {
			"file":	"Zend/zend.h",
			"line":	381,
			"primary_score":	999673,
			"second_score":	126103
		}, {
			"file":	"Zend/zend.h",
			"line":	385,
			"primary_score":	999673,
			"second_score":	13890
		}, {
			"file":	"Zend/zend.h",
			"line":	389,
			"primary_score":	999673,
			"second_score":	123613
		}, {
			"file":	"Zend/zend.h",
			"line":	393,
			"primary_score":	999673,
			"second_score":	134783
		}, {
			"file":	"Zend/zend.h",
			"line":	397,
			"primary_score":	999673,
			"second_score":	16287
		}, {
			"file":	"Zend/zend_API.c",
			"line":	290,
			"primary_score":	999673,
			"second_score":	124643
		}, {
			"file":	"Zend/zend_API.c",
			"line":	291,
			"primary_score":	999673,
			"second_score":	124642
		}, {
			"file":	"Zend/zend_API.c",
			"line":	292,
			"primary_score":	999673,
			"second_score":	124641
		}, {
			"file":	"Zend/zend_API.c",
			"line":	295,
			"primary_score":	999673,
			"second_score":	124640
		}, {
			"file":	"Zend/zend_API.c",
			"line":	296,
			"primary_score":	999673,
			"second_score":	124639
		}, {
			"file":	"Zend/zend_API.c",
			"line":	298,
			"primary_score":	999673,
			"second_score":	124638
		}, {
			"file":	"Zend/zend_API.c",
			"line":	303,
			"primary_score":	999673,
			"second_score":	124637
		}, {
			"file":	"Zend/zend_API.c",
			"line":	308,
			"primary_score":	999673,
			"second_score":	124636
		}, {
			"file":	"Zend/zend_API.c",
			"line":	399,
			"primary_score":	999673,
			"second_score":	124635
		}, {
			"file":	"Zend/zend_API.c",
			"line":	400,
			"primary_score":	999673,
			"second_score":	124634
		}, {
			"file":	"Zend/zend_API.c",
			"line":	401,
			"primary_score":	999673,
			"second_score":	124633
		}, {
			"file":	"Zend/zend_API.c",
			"line":	414,
			"primary_score":	999673,
			"second_score":	124632
		}, {
			"file":	"Zend/zend_API.c",
			"line":	415,
			"primary_score":	999673,
			"second_score":	124631
		}, {
			"file":	"Zend/zend_API.c",
			"line":	421,
			"primary_score":	999673,
			"second_score":	124629
		}, {
			"file":	"Zend/zend_API.c",
			"line":	422,
			"primary_score":	999673,
			"second_score":	124628
		}, {
			"file":	"Zend/zend_API.c",
			"line":	423,
			"primary_score":	999673,
			"second_score":	124627
		}, {
			"file":	"Zend/zend_API.c",
			"line":	432,
			"primary_score":	999673,
			"second_score":	124626
		}, {
			"file":	"Zend/zend_API.c",
			"line":	622,
			"primary_score":	999673,
			"second_score":	123305
		}, {
			"file":	"Zend/zend_API.c",
			"line":	623,
			"primary_score":	999673,
			"second_score":	123304
		}, {
			"file":	"Zend/zend_API.c",
			"line":	626,
			"primary_score":	999673,
			"second_score":	123303
		}, {
			"file":	"Zend/zend_API.c",
			"line":	629,
			"primary_score":	999673,
			"second_score":	123302
		}, {
			"file":	"Zend/zend_API.c",
			"line":	635,
			"primary_score":	999673,
			"second_score":	124625
		}, {
			"file":	"Zend/zend_API.c",
			"line":	637,
			"primary_score":	999673,
			"second_score":	124624
		}, {
			"file":	"Zend/zend_API.c",
			"line":	643,
			"primary_score":	999673,
			"second_score":	124646
		}, {
			"file":	"Zend/zend_API.c",
			"line":	644,
			"primary_score":	999673,
			"second_score":	124645
		}, {
			"file":	"Zend/zend_API.c",
			"line":	646,
			"primary_score":	999673,
			"second_score":	124644
		}, {
			"file":	"Zend/zend_API.c",
			"line":	647,
			"primary_score":	999673,
			"second_score":	124623
		}, {
			"file":	"Zend/zend_API.c",
			"line":	667,
			"primary_score":	999673,
			"second_score":	124622
		}, {
			"file":	"Zend/zend_API.c",
			"line":	673,
			"primary_score":	999673,
			"second_score":	123529
		}, {
			"file":	"Zend/zend_API.c",
			"line":	674,
			"primary_score":	999673,
			"second_score":	123528
		}, {
			"file":	"Zend/zend_API.c",
			"line":	675,
			"primary_score":	999673,
			"second_score":	123527
		}, {
			"file":	"Zend/zend_API.c",
			"line":	676,
			"primary_score":	999673,
			"second_score":	123526
		}, {
			"file":	"Zend/zend_API.c",
			"line":	677,
			"primary_score":	999673,
			"second_score":	123525
		}, {
			"file":	"Zend/zend_API.c",
			"line":	678,
			"primary_score":	999673,
			"second_score":	123524
		}, {
			"file":	"Zend/zend_API.c",
			"line":	679,
			"primary_score":	999673,
			"second_score":	123523
		}, {
			"file":	"Zend/zend_API.c",
			"line":	680,
			"primary_score":	999673,
			"second_score":	123521
		}, {
			"file":	"Zend/zend_API.c",
			"line":	681,
			"primary_score":	999673,
			"second_score":	123520
		}, {
			"file":	"Zend/zend_API.c",
			"line":	682,
			"primary_score":	999673,
			"second_score":	123519
		}, {
			"file":	"Zend/zend_API.c",
			"line":	683,
			"primary_score":	999673,
			"second_score":	123518
		}, {
			"file":	"Zend/zend_API.c",
			"line":	685,
			"primary_score":	999673,
			"second_score":	123517
		}, {
			"file":	"Zend/zend_API.c",
			"line":	686,
			"primary_score":	999673,
			"second_score":	123516
		}, {
			"file":	"Zend/zend_API.c",
			"line":	687,
			"primary_score":	999673,
			"second_score":	123515
		}, {
			"file":	"Zend/zend_API.c",
			"line":	690,
			"primary_score":	999673,
			"second_score":	124668
		}, {
			"file":	"Zend/zend_API.c",
			"line":	691,
			"primary_score":	999673,
			"second_score":	124666
		}, {
			"file":	"Zend/zend_API.c",
			"line":	696,
			"primary_score":	999673,
			"second_score":	124665
		}, {
			"file":	"Zend/zend_API.c",
			"line":	704,
			"primary_score":	999673,
			"second_score":	124658
		}, {
			"file":	"Zend/zend_API.c",
			"line":	708,
			"primary_score":	999673,
			"second_score":	124661
		}, {
			"file":	"Zend/zend_API.c",
			"line":	728,
			"primary_score":	999714,
			"second_score":	123514
		}, {
			"file":	"Zend/zend_API.c",
			"line":	730,
			"primary_score":	999714,
			"second_score":	123513
		}, {
			"file":	"Zend/zend_API.c",
			"line":	731,
			"primary_score":	999716,
			"second_score":	123512
		}, {
			"file":	"Zend/zend_API.c",
			"line":	734,
			"primary_score":	999714,
			"second_score":	123511
		}, {
			"file":	"Zend/zend_API.c",
			"line":	735,
			"primary_score":	999714,
			"second_score":	123510
		}, {
			"file":	"Zend/zend_API.c",
			"line":	750,
			"primary_score":	999673,
			"second_score":	123509
		}, {
			"file":	"Zend/zend_API.c",
			"line":	751,
			"primary_score":	999673,
			"second_score":	123508
		}, {
			"file":	"Zend/zend_API.c",
			"line":	754,
			"primary_score":	999673,
			"second_score":	123507
		}, {
			"file":	"Zend/zend_API.c",
			"line":	756,
			"primary_score":	999714,
			"second_score":	123506
		}, {
			"file":	"Zend/zend_API.c",
			"line":	757,
			"primary_score":	999714,
			"second_score":	123505
		}, {
			"file":	"Zend/zend_API.c",
			"line":	760,
			"primary_score":	999673,
			"second_score":	123504
		}, {
			"file":	"Zend/zend_API.c",
			"line":	776,
			"primary_score":	999673,
			"second_score":	123503
		}, {
			"file":	"Zend/zend_API.c",
			"line":	782,
			"primary_score":	999673,
			"second_score":	123502
		}, {
			"file":	"Zend/zend_API.c",
			"line":	783,
			"primary_score":	999673,
			"second_score":	123501
		}, {
			"file":	"Zend/zend_API.c",
			"line":	784,
			"primary_score":	999673,
			"second_score":	123500
		}, {
			"file":	"Zend/zend_API.c",
			"line":	785,
			"primary_score":	999673,
			"second_score":	123321
		}, {
			"file":	"Zend/zend_API.c",
			"line":	788,
			"primary_score":	999673,
			"second_score":	123499
		}, {
			"file":	"Zend/zend_API.c",
			"line":	789,
			"primary_score":	999715,
			"second_score":	123498
		}, {
			"file":	"Zend/zend_API.c",
			"line":	792,
			"primary_score":	999715,
			"second_score":	123497
		}, {
			"file":	"Zend/zend_API.c",
			"line":	793,
			"primary_score":	999715,
			"second_score":	123496
		}, {
			"file":	"Zend/zend_API.c",
			"line":	794,
			"primary_score":	999715,
			"second_score":	123495
		}, {
			"file":	"Zend/zend_API.c",
			"line":	796,
			"primary_score":	999715,
			"second_score":	123494
		}, {
			"file":	"Zend/zend_API.c",
			"line":	797,
			"primary_score":	999715,
			"second_score":	123493
		}, {
			"file":	"Zend/zend_API.c",
			"line":	798,
			"primary_score":	999715,
			"second_score":	123492
		}, {
			"file":	"Zend/zend_API.c",
			"line":	800,
			"primary_score":	999715,
			"second_score":	123490
		}, {
			"file":	"Zend/zend_API.c",
			"line":	803,
			"primary_score":	999715,
			"second_score":	123489
		}, {
			"file":	"Zend/zend_API.c",
			"line":	804,
			"primary_score":	999715,
			"second_score":	123461
		}, {
			"file":	"Zend/zend_API.c",
			"line":	805,
			"primary_score":	999715,
			"second_score":	123460
		}, {
			"file":	"Zend/zend_API.c",
			"line":	809,
			"primary_score":	999715,
			"second_score":	123459
		}, {
			"file":	"Zend/zend_API.c",
			"line":	810,
			"primary_score":	999715,
			"second_score":	123458
		}, {
			"file":	"Zend/zend_API.c",
			"line":	811,
			"primary_score":	999715,
			"second_score":	123457
		}, {
			"file":	"Zend/zend_API.c",
			"line":	818,
			"primary_score":	999673,
			"second_score":	124649
		}, {
			"file":	"Zend/zend_API.c",
			"line":	820,
			"primary_score":	999673,
			"second_score":	124647
		}, {
			"file":	"Zend/zend_API.c",
			"line":	828,
			"primary_score":	999673,
			"second_score":	124621
		}, {
			"file":	"Zend/zend_API.c",
			"line":	831,
			"primary_score":	999673,
			"second_score":	123456
		}, {
			"file":	"Zend/zend_API.c",
			"line":	865,
			"primary_score":	999673,
			"second_score":	123537
		}, {
			"file":	"Zend/zend_API.c",
			"line":	866,
			"primary_score":	999673,
			"second_score":	123536
		}, {
			"file":	"Zend/zend_API.c",
			"line":	868,
			"primary_score":	999673,
			"second_score":	123535
		}, {
			"file":	"Zend/zend_API.c",
			"line":	870,
			"primary_score":	999673,
			"second_score":	123531
		}, {
			"file":	"Zend/zend_API.c",
			"line":	871,
			"primary_score":	999673,
			"second_score":	123530
		}, {
			"file":	"Zend/zend_API.c",
			"line":	872,
			"primary_score":	999673,
			"second_score":	123455
		}, {
			"file":	"Zend/zend_API.c",
			"line":	874,
			"primary_score":	999673,
			"second_score":	123454
		}, {
			"file":	"Zend/zend_API.c",
			"line":	957,
			"primary_score":	999673,
			"second_score":	151181
		}, {
			"file":	"Zend/zend_API.c",
			"line":	959,
			"primary_score":	999673,
			"second_score":	151077
		}, {
			"file":	"Zend/zend_API.c",
			"line":	960,
			"primary_score":	999673,
			"second_score":	150940
		}, {
			"file":	"Zend/zend_API.c",
			"line":	961,
			"primary_score":	999673,
			"second_score":	150939
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1170,
			"primary_score":	999983,
			"second_score":	123998
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1172,
			"primary_score":	999983,
			"second_score":	123997
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1173,
			"primary_score":	999983,
			"second_score":	123969
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1175,
			"primary_score":	999983,
			"second_score":	123936
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1336,
			"primary_score":	999673,
			"second_score":	124028
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1338,
			"primary_score":	999673,
			"second_score":	124027
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1339,
			"primary_score":	999673,
			"second_score":	123918
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1341,
			"primary_score":	999673,
			"second_score":	123804
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2045,
			"primary_score":	999673,
			"second_score":	50991
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2046,
			"primary_score":	999673,
			"second_score":	50990
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2047,
			"primary_score":	999673,
			"second_score":	50989
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2049,
			"primary_score":	999673,
			"second_score":	50988
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2050,
			"primary_score":	999673,
			"second_score":	50987
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2052,
			"primary_score":	999673,
			"second_score":	50986
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2053,
			"primary_score":	999673,
			"second_score":	48220
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2059,
			"primary_score":	999673,
			"second_score":	48219
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2060,
			"primary_score":	999673,
			"second_score":	48171
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2061,
			"primary_score":	999673,
			"second_score":	48170
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2087,
			"primary_score":	999673,
			"second_score":	50998
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2089,
			"primary_score":	999673,
			"second_score":	50997
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2094,
			"primary_score":	999673,
			"second_score":	50996
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2098,
			"primary_score":	999673,
			"second_score":	54274
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2102,
			"primary_score":	999673,
			"second_score":	50995
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2106,
			"primary_score":	999673,
			"second_score":	53555
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2107,
			"primary_score":	999673,
			"second_score":	55624
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2112,
			"primary_score":	999673,
			"second_score":	50994
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2113,
			"primary_score":	999673,
			"second_score":	50993
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2114,
			"primary_score":	999673,
			"second_score":	50992
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2119,
			"primary_score":	999673,
			"second_score":	48169
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2130,
			"primary_score":	999673,
			"second_score":	150253
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2134,
			"primary_score":	999673,
			"second_score":	150555
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2139,
			"primary_score":	999673,
			"second_score":	150252
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2146,
			"primary_score":	999673,
			"second_score":	118502
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2150,
			"primary_score":	999673,
			"second_score":	118514
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2152,
			"primary_score":	999673,
			"second_score":	118501
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2158,
			"primary_score":	999673,
			"second_score":	109250
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	144,
			"primary_score":	999673,
			"second_score":	3156
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	287,
			"primary_score":	999673,
			"second_score":	108852
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	297,
			"primary_score":	999673,
			"second_score":	3159
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	668,
			"primary_score":	999673,
			"second_score":	108812
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	670,
			"primary_score":	999673,
			"second_score":	108811
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	671,
			"primary_score":	999673,
			"second_score":	108810
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	694,
			"primary_score":	999673,
			"second_score":	130512
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	696,
			"primary_score":	999673,
			"second_score":	130511
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	697,
			"primary_score":	999673,
			"second_score":	130510
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	720,
			"primary_score":	999673,
			"second_score":	190976
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	722,
			"primary_score":	999673,
			"second_score":	190975
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	724,
			"primary_score":	999673,
			"second_score":	190974
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	728,
			"primary_score":	999673,
			"second_score":	190973
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	729,
			"primary_score":	999673,
			"second_score":	190972
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	730,
			"primary_score":	999673,
			"second_score":	190971
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	731,
			"primary_score":	999673,
			"second_score":	190970
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	732,
			"primary_score":	999673,
			"second_score":	190969
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	737,
			"primary_score":	999673,
			"second_score":	108819
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	738,
			"primary_score":	999673,
			"second_score":	108818
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	740,
			"primary_score":	999673,
			"second_score":	108817
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	742,
			"primary_score":	999673,
			"second_score":	108816
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	743,
			"primary_score":	999673,
			"second_score":	108815
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	744,
			"primary_score":	999673,
			"second_score":	108814
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	746,
			"primary_score":	999673,
			"second_score":	108813
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	747,
			"primary_score":	999673,
			"second_score":	108809
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	748,
			"primary_score":	999673,
			"second_score":	108808
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	749,
			"primary_score":	999673,
			"second_score":	108807
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	750,
			"primary_score":	999673,
			"second_score":	108806
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	751,
			"primary_score":	999673,
			"second_score":	108805
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	752,
			"primary_score":	999673,
			"second_score":	108804
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	753,
			"primary_score":	999673,
			"second_score":	108803
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	755,
			"primary_score":	999673,
			"second_score":	112715
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	757,
			"primary_score":	999673,
			"second_score":	112714
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	758,
			"primary_score":	999673,
			"second_score":	112709
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	760,
			"primary_score":	999673,
			"second_score":	112708
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	761,
			"primary_score":	999673,
			"second_score":	119238
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	762,
			"primary_score":	999673,
			"second_score":	119237
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	763,
			"primary_score":	999673,
			"second_score":	119236
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	764,
			"primary_score":	999673,
			"second_score":	119235
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	765,
			"primary_score":	999673,
			"second_score":	119234
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	766,
			"primary_score":	999673,
			"second_score":	119233
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	769,
			"primary_score":	999673,
			"second_score":	112707
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	771,
			"primary_score":	999673,
			"second_score":	112706
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	772,
			"primary_score":	999673,
			"second_score":	112705
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	773,
			"primary_score":	999673,
			"second_score":	112704
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	774,
			"primary_score":	999673,
			"second_score":	112703
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	775,
			"primary_score":	999673,
			"second_score":	112702
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	798,
			"primary_score":	999673,
			"second_score":	110795
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	799,
			"primary_score":	999673,
			"second_score":	110794
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	801,
			"primary_score":	999673,
			"second_score":	110793
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	803,
			"primary_score":	999673,
			"second_score":	110792
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	804,
			"primary_score":	999673,
			"second_score":	130494
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	807,
			"primary_score":	999673,
			"second_score":	130493
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	812,
			"primary_score":	999673,
			"second_score":	130492
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	813,
			"primary_score":	999673,
			"second_score":	130491
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	814,
			"primary_score":	999673,
			"second_score":	130490
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	815,
			"primary_score":	999673,
			"second_score":	130489
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	817,
			"primary_score":	999673,
			"second_score":	130485
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	818,
			"primary_score":	999673,
			"second_score":	130483
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	819,
			"primary_score":	999673,
			"second_score":	130482
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	820,
			"primary_score":	999673,
			"second_score":	130481
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	845,
			"primary_score":	999673,
			"second_score":	110791
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	850,
			"primary_score":	999673,
			"second_score":	110790
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	851,
			"primary_score":	999673,
			"second_score":	110789
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	853,
			"primary_score":	999673,
			"second_score":	110788
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	854,
			"primary_score":	999673,
			"second_score":	110787
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	855,
			"primary_score":	999673,
			"second_score":	110786
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	857,
			"primary_score":	999673,
			"second_score":	110785
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	858,
			"primary_score":	999673,
			"second_score":	110784
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	869,
			"primary_score":	999673,
			"second_score":	109149
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	870,
			"primary_score":	999673,
			"second_score":	109148
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	872,
			"primary_score":	999673,
			"second_score":	109147
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	873,
			"primary_score":	999673,
			"second_score":	109146
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	875,
			"primary_score":	999673,
			"second_score":	109145
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	876,
			"primary_score":	999673,
			"second_score":	109144
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	883,
			"primary_score":	999673,
			"second_score":	109143
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	884,
			"primary_score":	999673,
			"second_score":	109142
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	885,
			"primary_score":	999673,
			"second_score":	108889
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	886,
			"primary_score":	999673,
			"second_score":	108888
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	887,
			"primary_score":	999673,
			"second_score":	108887
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	888,
			"primary_score":	999673,
			"second_score":	108886
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	890,
			"primary_score":	999673,
			"second_score":	108885
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	895,
			"primary_score":	999673,
			"second_score":	110779
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	897,
			"primary_score":	999673,
			"second_score":	110778
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	900,
			"primary_score":	999673,
			"second_score":	110777
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	901,
			"primary_score":	999673,
			"second_score":	110776
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	902,
			"primary_score":	999673,
			"second_score":	110775
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1576,
			"primary_score":	999673,
			"second_score":	3172
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1577,
			"primary_score":	999673,
			"second_score":	3171
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1578,
			"primary_score":	999673,
			"second_score":	3170
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1579,
			"primary_score":	999673,
			"second_score":	3169
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1581,
			"primary_score":	999673,
			"second_score":	3168
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1587,
			"primary_score":	999673,
			"second_score":	3167
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1642,
			"primary_score":	999673,
			"second_score":	3166
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1643,
			"primary_score":	999673,
			"second_score":	3165
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1644,
			"primary_score":	999673,
			"second_score":	3164
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1645,
			"primary_score":	999673,
			"second_score":	3163
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1646,
			"primary_score":	999673,
			"second_score":	3162
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1647,
			"primary_score":	999673,
			"second_score":	3161
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1648,
			"primary_score":	999673,
			"second_score":	3160
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1650,
			"primary_score":	999673,
			"second_score":	3158
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1651,
			"primary_score":	999673,
			"second_score":	3157
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1652,
			"primary_score":	999673,
			"second_score":	3155
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1653,
			"primary_score":	999673,
			"second_score":	3154
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1656,
			"primary_score":	999673,
			"second_score":	109152
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1660,
			"primary_score":	999673,
			"second_score":	109151
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1661,
			"primary_score":	999673,
			"second_score":	109150
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1662,
			"primary_score":	999673,
			"second_score":	108884
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1663,
			"primary_score":	999673,
			"second_score":	108883
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1664,
			"primary_score":	999673,
			"second_score":	108882
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1665,
			"primary_score":	999673,
			"second_score":	108881
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1666,
			"primary_score":	999673,
			"second_score":	108880
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1667,
			"primary_score":	999673,
			"second_score":	108879
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1669,
			"primary_score":	999673,
			"second_score":	108795
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1739,
			"primary_score":	999673,
			"second_score":	108869
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1740,
			"primary_score":	999673,
			"second_score":	108868
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1741,
			"primary_score":	999673,
			"second_score":	108864
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1742,
			"primary_score":	999673,
			"second_score":	108863
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1744,
			"primary_score":	999673,
			"second_score":	108862
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1745,
			"primary_score":	999673,
			"second_score":	108861
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1748,
			"primary_score":	999673,
			"second_score":	130514
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1801,
			"primary_score":	999673,
			"second_score":	130513
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1802,
			"primary_score":	999673,
			"second_score":	130509
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1807,
			"primary_score":	999673,
			"second_score":	130508
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1812,
			"primary_score":	999673,
			"second_score":	108878
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1813,
			"primary_score":	999673,
			"second_score":	108877
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1814,
			"primary_score":	999673,
			"second_score":	108876
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1815,
			"primary_score":	999673,
			"second_score":	108875
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1816,
			"primary_score":	999673,
			"second_score":	108874
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1817,
			"primary_score":	999673,
			"second_score":	108873
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1818,
			"primary_score":	999673,
			"second_score":	108872
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1820,
			"primary_score":	999673,
			"second_score":	108871
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1821,
			"primary_score":	999673,
			"second_score":	111814
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1822,
			"primary_score":	999673,
			"second_score":	111813
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1824,
			"primary_score":	999673,
			"second_score":	111812
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1828,
			"primary_score":	999673,
			"second_score":	111811
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1834,
			"primary_score":	999673,
			"second_score":	111810
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1835,
			"primary_score":	999673,
			"second_score":	111809
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1836,
			"primary_score":	999673,
			"second_score":	111808
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1837,
			"primary_score":	999673,
			"second_score":	111807
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1838,
			"primary_score":	999673,
			"second_score":	111806
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1839,
			"primary_score":	999673,
			"second_score":	111805
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1846,
			"primary_score":	999673,
			"second_score":	130525
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1847,
			"primary_score":	999673,
			"second_score":	130524
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1862,
			"primary_score":	999673,
			"second_score":	108870
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1864,
			"primary_score":	999673,
			"second_score":	108860
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1881,
			"primary_score":	999673,
			"second_score":	108859
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1882,
			"primary_score":	999673,
			"second_score":	108858
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1885,
			"primary_score":	999673,
			"second_score":	191016
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1886,
			"primary_score":	999673,
			"second_score":	191015
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1887,
			"primary_score":	999673,
			"second_score":	191014
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1889,
			"primary_score":	999673,
			"second_score":	108857
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1892,
			"primary_score":	999673,
			"second_score":	108856
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1894,
			"primary_score":	999673,
			"second_score":	108854
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1908,
			"primary_score":	999673,
			"second_score":	108853
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1910,
			"primary_score":	999673,
			"second_score":	108851
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1925,
			"primary_score":	999673,
			"second_score":	108850
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1926,
			"primary_score":	999673,
			"second_score":	108849
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1927,
			"primary_score":	999673,
			"second_score":	108848
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1930,
			"primary_score":	999673,
			"second_score":	108847
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1931,
			"primary_score":	999673,
			"second_score":	108846
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1932,
			"primary_score":	999673,
			"second_score":	108845
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1934,
			"primary_score":	999673,
			"second_score":	108844
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1935,
			"primary_score":	999673,
			"second_score":	108843
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1937,
			"primary_score":	999673,
			"second_score":	108842
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1939,
			"primary_score":	999673,
			"second_score":	108841
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1942,
			"primary_score":	999673,
			"second_score":	130505
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1944,
			"primary_score":	999673,
			"second_score":	130504
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1945,
			"primary_score":	999673,
			"second_score":	130503
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1946,
			"primary_score":	999673,
			"second_score":	130502
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1947,
			"primary_score":	999673,
			"second_score":	130501
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1948,
			"primary_score":	999673,
			"second_score":	130499
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1950,
			"primary_score":	999673,
			"second_score":	130480
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1953,
			"primary_score":	999673,
			"second_score":	108837
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1955,
			"primary_score":	999673,
			"second_score":	108836
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1959,
			"primary_score":	999673,
			"second_score":	108835
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1962,
			"primary_score":	999673,
			"second_score":	108834
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1963,
			"primary_score":	999673,
			"second_score":	108828
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1964,
			"primary_score":	999673,
			"second_score":	108827
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1967,
			"primary_score":	999673,
			"second_score":	108821
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1968,
			"primary_score":	999673,
			"second_score":	108820
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1970,
			"primary_score":	999673,
			"second_score":	190977
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1974,
			"primary_score":	999673,
			"second_score":	108802
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1976,
			"primary_score":	999673,
			"second_score":	108801
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1977,
			"primary_score":	999673,
			"second_score":	108800
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1978,
			"primary_score":	999673,
			"second_score":	108799
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1981,
			"primary_score":	999673,
			"second_score":	108798
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1983,
			"primary_score":	999673,
			"second_score":	108796
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1989,
			"primary_score":	999673,
			"second_score":	109210
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1990,
			"primary_score":	999673,
			"second_score":	109209
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1991,
			"primary_score":	999673,
			"second_score":	109208
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1993,
			"primary_score":	999673,
			"second_score":	109207
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1997,
			"primary_score":	999673,
			"second_score":	109206
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1998,
			"primary_score":	999673,
			"second_score":	109205
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1999,
			"primary_score":	999673,
			"second_score":	109204
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2006,
			"primary_score":	999673,
			"second_score":	109203
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2007,
			"primary_score":	999673,
			"second_score":	109202
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2008,
			"primary_score":	999673,
			"second_score":	109201
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2010,
			"primary_score":	999673,
			"second_score":	109200
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2011,
			"primary_score":	999673,
			"second_score":	109199
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2012,
			"primary_score":	999673,
			"second_score":	109198
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2013,
			"primary_score":	999673,
			"second_score":	109197
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2019,
			"primary_score":	999673,
			"second_score":	109196
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2023,
			"primary_score":	999673,
			"second_score":	109815
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2025,
			"primary_score":	999673,
			"second_score":	109813
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2027,
			"primary_score":	999673,
			"second_score":	109812
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2028,
			"primary_score":	999673,
			"second_score":	109811
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2029,
			"primary_score":	999673,
			"second_score":	110796
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2030,
			"primary_score":	999673,
			"second_score":	110783
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2032,
			"primary_score":	999673,
			"second_score":	109810
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2037,
			"primary_score":	999673,
			"second_score":	109809
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2039,
			"primary_score":	999673,
			"second_score":	110780
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2041,
			"primary_score":	999673,
			"second_score":	109808
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2042,
			"primary_score":	999673,
			"second_score":	109802
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2044,
			"primary_score":	999673,
			"second_score":	109784
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2049,
			"primary_score":	999673,
			"second_score":	126380
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2050,
			"primary_score":	999673,
			"second_score":	126379
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2051,
			"primary_score":	999673,
			"second_score":	126378
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2052,
			"primary_score":	999673,
			"second_score":	126377
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2053,
			"primary_score":	999673,
			"second_score":	126376
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2055,
			"primary_score":	999673,
			"second_score":	126375
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2056,
			"primary_score":	999673,
			"second_score":	143024
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2058,
			"primary_score":	999673,
			"second_score":	134926
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2059,
			"primary_score":	999673,
			"second_score":	134925
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2060,
			"primary_score":	999673,
			"second_score":	134924
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2061,
			"primary_score":	999673,
			"second_score":	134923
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2063,
			"primary_score":	999673,
			"second_score":	134922
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2067,
			"primary_score":	999673,
			"second_score":	134921
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2068,
			"primary_score":	999673,
			"second_score":	134920
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2070,
			"primary_score":	999673,
			"second_score":	134919
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2071,
			"primary_score":	999673,
			"second_score":	134918
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2073,
			"primary_score":	999673,
			"second_score":	134917
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2074,
			"primary_score":	999673,
			"second_score":	134915
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2075,
			"primary_score":	999673,
			"second_score":	134914
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2081,
			"primary_score":	999673,
			"second_score":	134913
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2082,
			"primary_score":	999673,
			"second_score":	134907
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2084,
			"primary_score":	999673,
			"second_score":	134906
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2087,
			"primary_score":	999673,
			"second_score":	134900
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2088,
			"primary_score":	999673,
			"second_score":	134882
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2089,
			"primary_score":	999673,
			"second_score":	134881
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2091,
			"primary_score":	999673,
			"second_score":	134879
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2092,
			"primary_score":	999673,
			"second_score":	134878
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2096,
			"primary_score":	999673,
			"second_score":	154224
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2097,
			"primary_score":	999673,
			"second_score":	154223
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2099,
			"primary_score":	999673,
			"second_score":	154222
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2100,
			"primary_score":	999673,
			"second_score":	170082
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2101,
			"primary_score":	999673,
			"second_score":	170081
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2107,
			"primary_score":	999673,
			"second_score":	170080
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2108,
			"primary_score":	999673,
			"second_score":	170079
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2109,
			"primary_score":	999673,
			"second_score":	170078
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2110,
			"primary_score":	999673,
			"second_score":	170077
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2112,
			"primary_score":	999673,
			"second_score":	170076
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2117,
			"primary_score":	999673,
			"second_score":	170075
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2120,
			"primary_score":	999673,
			"second_score":	170074
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2122,
			"primary_score":	999673,
			"second_score":	170073
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2123,
			"primary_score":	999673,
			"second_score":	170072
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2125,
			"primary_score":	999673,
			"second_score":	170071
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2126,
			"primary_score":	999673,
			"second_score":	170070
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2127,
			"primary_score":	999673,
			"second_score":	170069
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2134,
			"primary_score":	999673,
			"second_score":	170068
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2139,
			"primary_score":	999673,
			"second_score":	154221
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2141,
			"primary_score":	999673,
			"second_score":	154220
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2142,
			"primary_score":	999673,
			"second_score":	122708
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2143,
			"primary_score":	999673,
			"second_score":	122707
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2144,
			"primary_score":	999673,
			"second_score":	122705
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2145,
			"primary_score":	999673,
			"second_score":	122704
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2146,
			"primary_score":	999673,
			"second_score":	122703
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2148,
			"primary_score":	999673,
			"second_score":	122702
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2149,
			"primary_score":	999673,
			"second_score":	122700
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2151,
			"primary_score":	999673,
			"second_score":	122681
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2155,
			"primary_score":	999673,
			"second_score":	122680
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2158,
			"primary_score":	999673,
			"second_score":	122679
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2159,
			"primary_score":	999673,
			"second_score":	122673
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2160,
			"primary_score":	999673,
			"second_score":	122672
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2163,
			"primary_score":	999673,
			"second_score":	122666
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2167,
			"primary_score":	999673,
			"second_score":	122665
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2170,
			"primary_score":	999673,
			"second_score":	122647
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2171,
			"primary_score":	999673,
			"second_score":	122646
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2172,
			"primary_score":	999673,
			"second_score":	122645
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2175,
			"primary_score":	999673,
			"second_score":	122644
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2176,
			"primary_score":	999673,
			"second_score":	122642
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2183,
			"primary_score":	999673,
			"second_score":	154219
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2281,
			"primary_score":	999673,
			"second_score":	154218
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2285,
			"primary_score":	999673,
			"second_score":	154117
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2287,
			"primary_score":	999673,
			"second_score":	154116
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2288,
			"primary_score":	999673,
			"second_score":	154100
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2345,
			"primary_score":	999673,
			"second_score":	111825
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2347,
			"primary_score":	999673,
			"second_score":	111824
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2350,
			"primary_score":	999673,
			"second_score":	111823
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2355,
			"primary_score":	999673,
			"second_score":	109213
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2357,
			"primary_score":	999673,
			"second_score":	109212
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2361,
			"primary_score":	999673,
			"second_score":	109211
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2366,
			"primary_score":	999673,
			"second_score":	126383
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2368,
			"primary_score":	999673,
			"second_score":	126382
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2371,
			"primary_score":	999673,
			"second_score":	126381
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2406,
			"primary_score":	999673,
			"second_score":	150518
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2407,
			"primary_score":	999673,
			"second_score":	150517
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2409,
			"primary_score":	999673,
			"second_score":	150516
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2415,
			"primary_score":	999673,
			"second_score":	150515
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2419,
			"primary_score":	999673,
			"second_score":	150514
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2454,
			"primary_score":	999673,
			"second_score":	150519
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2464,
			"primary_score":	999673,
			"second_score":	121635
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2475,
			"primary_score":	999673,
			"second_score":	150521
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2477,
			"primary_score":	999673,
			"second_score":	150520
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2478,
			"primary_score":	999673,
			"second_score":	150410
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2481,
			"primary_score":	999673,
			"second_score":	150409
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2482,
			"primary_score":	999673,
			"second_score":	150408
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2487,
			"primary_score":	999673,
			"second_score":	130378
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2488,
			"primary_score":	999673,
			"second_score":	130377
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2490,
			"primary_score":	999673,
			"second_score":	130376
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2491,
			"primary_score":	999673,
			"second_score":	130375
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2492,
			"primary_score":	999673,
			"second_score":	130353
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2495,
			"primary_score":	999673,
			"second_score":	130352
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2496,
			"primary_score":	999673,
			"second_score":	130351
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2501,
			"primary_score":	999673,
			"second_score":	123965
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2503,
			"primary_score":	999673,
			"second_score":	123964
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2504,
			"primary_score":	999673,
			"second_score":	123942
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2507,
			"primary_score":	999673,
			"second_score":	123941
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2508,
			"primary_score":	999673,
			"second_score":	123940
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2509,
			"primary_score":	999673,
			"second_score":	123939
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2515,
			"primary_score":	999673,
			"second_score":	147448
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2517,
			"primary_score":	999673,
			"second_score":	147447
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2518,
			"primary_score":	999673,
			"second_score":	147446
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2521,
			"primary_score":	999673,
			"second_score":	147445
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2522,
			"primary_score":	999673,
			"second_score":	147444
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2524,
			"primary_score":	999673,
			"second_score":	147443
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2525,
			"primary_score":	999673,
			"second_score":	147442
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2562,
			"primary_score":	999673,
			"second_score":	3173
		}, {
			"file":	"Zend/zend_alloc.h",
			"line":	95,
			"primary_score":	999673,
			"second_score":	147400
		}, {
			"file":	"Zend/zend_alloc.h",
			"line":	96,
			"primary_score":	999673,
			"second_score":	147399
		}, {
			"file":	"Zend/zend_alloc.h",
			"line":	97,
			"primary_score":	999673,
			"second_score":	147398
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	328,
			"primary_score":	999673,
			"second_score":	124665
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1270,
			"primary_score":	999673,
			"second_score":	121827
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1271,
			"primary_score":	999673,
			"second_score":	121826
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1272,
			"primary_score":	999673,
			"second_score":	121825
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1273,
			"primary_score":	999673,
			"second_score":	121824
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1274,
			"primary_score":	999673,
			"second_score":	121823
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1276,
			"primary_score":	999673,
			"second_score":	121822
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1280,
			"primary_score":	999673,
			"second_score":	121752
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1283,
			"primary_score":	999673,
			"second_score":	121576
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1284,
			"primary_score":	999673,
			"second_score":	121575
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1289,
			"primary_score":	999673,
			"second_score":	121574
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1291,
			"primary_score":	999673,
			"second_score":	121533
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1297,
			"primary_score":	999673,
			"second_score":	121514
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1302,
			"primary_score":	999673,
			"second_score":	121513
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1788,
			"primary_score":	999673,
			"second_score":	124030
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1789,
			"primary_score":	999673,
			"second_score":	124029
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1790,
			"primary_score":	999673,
			"second_score":	123660
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1818,
			"primary_score":	999673,
			"second_score":	134206
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1820,
			"primary_score":	999673,
			"second_score":	134205
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1824,
			"primary_score":	999673,
			"second_score":	134168
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1826,
			"primary_score":	999673,
			"second_score":	133926
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1829,
			"primary_score":	999673,
			"second_score":	133925
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	72,
			"primary_score":	999673,
			"second_score":	17570
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	107,
			"primary_score":	999673,
			"second_score":	191686
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	108,
			"primary_score":	999673,
			"second_score":	191685
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	115,
			"primary_score":	999673,
			"second_score":	151321
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	117,
			"primary_score":	999673,
			"second_score":	151320
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	120,
			"primary_score":	999673,
			"second_score":	151294
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	121,
			"primary_score":	999673,
			"second_score":	151293
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	128,
			"primary_score":	999673,
			"second_score":	191744
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	129,
			"primary_score":	999673,
			"second_score":	191743
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	136,
			"primary_score":	999673,
			"second_score":	192529
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	137,
			"primary_score":	999673,
			"second_score":	192420
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	138,
			"primary_score":	999673,
			"second_score":	192311
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	139,
			"primary_score":	999673,
			"second_score":	192202
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	140,
			"primary_score":	999673,
			"second_score":	192093
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	141,
			"primary_score":	999673,
			"second_score":	191984
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	142,
			"primary_score":	999673,
			"second_score":	191875
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	143,
			"primary_score":	999673,
			"second_score":	191874
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	144,
			"primary_score":	999673,
			"second_score":	191867
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	145,
			"primary_score":	999673,
			"second_score":	191860
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	146,
			"primary_score":	999673,
			"second_score":	191751
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	147,
			"primary_score":	999673,
			"second_score":	191750
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	148,
			"primary_score":	999673,
			"second_score":	191749
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	149,
			"primary_score":	999673,
			"second_score":	191748
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	150,
			"primary_score":	999673,
			"second_score":	191747
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	151,
			"primary_score":	999673,
			"second_score":	191746
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	152,
			"primary_score":	999673,
			"second_score":	191745
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	153,
			"primary_score":	999673,
			"second_score":	191742
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	154,
			"primary_score":	999673,
			"second_score":	191679
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	155,
			"primary_score":	999673,
			"second_score":	191570
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	172,
			"primary_score":	999673,
			"second_score":	134583
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	174,
			"primary_score":	999673,
			"second_score":	134582
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	181,
			"primary_score":	999673,
			"second_score":	192531
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	182,
			"primary_score":	999673,
			"second_score":	192530
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	183,
			"primary_score":	999673,
			"second_score":	191569
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	184,
			"primary_score":	999673,
			"second_score":	191429
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	185,
			"primary_score":	999673,
			"second_score":	191292
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	186,
			"primary_score":	999673,
			"second_score":	191285
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	193,
			"primary_score":	999673,
			"second_score":	109745
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	194,
			"primary_score":	999673,
			"second_score":	109721
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	195,
			"primary_score":	999673,
			"second_score":	109697
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	196,
			"primary_score":	999673,
			"second_score":	109673
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	197,
			"primary_score":	999673,
			"second_score":	109649
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	198,
			"primary_score":	999673,
			"second_score":	109625
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	199,
			"primary_score":	999673,
			"second_score":	109601
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	200,
			"primary_score":	999673,
			"second_score":	109577
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	201,
			"primary_score":	999673,
			"second_score":	109508
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	202,
			"primary_score":	999673,
			"second_score":	109504
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	215,
			"primary_score":	999673,
			"second_score":	143635
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	216,
			"primary_score":	999673,
			"second_score":	143634
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	218,
			"primary_score":	999673,
			"second_score":	143633
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	222,
			"primary_score":	999673,
			"second_score":	143517
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	223,
			"primary_score":	999673,
			"second_score":	143407
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	224,
			"primary_score":	999673,
			"second_score":	143154
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	225,
			"primary_score":	999673,
			"second_score":	143153
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	232,
			"primary_score":	999673,
			"second_score":	134729
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	239,
			"primary_score":	999673,
			"second_score":	142923
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	253,
			"primary_score":	999673,
			"second_score":	130269
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	260,
			"primary_score":	999673,
			"second_score":	135701
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	535,
			"primary_score":	999673,
			"second_score":	135292
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	537,
			"primary_score":	999673,
			"second_score":	135282
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	538,
			"primary_score":	999673,
			"second_score":	135281
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	539,
			"primary_score":	999673,
			"second_score":	135280
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	696,
			"primary_score":	999673,
			"second_score":	135870
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	698,
			"primary_score":	999673,
			"second_score":	135869
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	972,
			"primary_score":	999673,
			"second_score":	135647
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	974,
			"primary_score":	999673,
			"second_score":	135646
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	975,
			"primary_score":	999673,
			"second_score":	135639
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	981,
			"primary_score":	999673,
			"second_score":	135520
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	982,
			"primary_score":	999673,
			"second_score":	135519
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	983,
			"primary_score":	999673,
			"second_score":	135518
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	984,
			"primary_score":	999673,
			"second_score":	135517
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	985,
			"primary_score":	999673,
			"second_score":	135516
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	987,
			"primary_score":	999673,
			"second_score":	135515
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	989,
			"primary_score":	999673,
			"second_score":	135511
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	993,
			"primary_score":	999673,
			"second_score":	135510
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1061,
			"primary_score":	999673,
			"second_score":	135509
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1062,
			"primary_score":	999673,
			"second_score":	135505
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1120,
			"primary_score":	999676,
			"second_score":	135415
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1126,
			"primary_score":	999676,
			"second_score":	135414
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1127,
			"primary_score":	999676,
			"second_score":	135413
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1129,
			"primary_score":	999676,
			"second_score":	135412
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1132,
			"primary_score":	999676,
			"second_score":	135411
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1134,
			"primary_score":	999676,
			"second_score":	135410
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1555,
			"primary_score":	999673,
			"second_score":	137036
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1556,
			"primary_score":	999673,
			"second_score":	137035
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1557,
			"primary_score":	999673,
			"second_score":	137034
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1559,
			"primary_score":	999673,
			"second_score":	137033
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1561,
			"primary_score":	999673,
			"second_score":	137024
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1571,
			"primary_score":	999673,
			"second_score":	137023
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1572,
			"primary_score":	999673,
			"second_score":	136849
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1579,
			"primary_score":	999673,
			"second_score":	136822
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1580,
			"primary_score":	999673,
			"second_score":	136803
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1582,
			"primary_score":	999673,
			"second_score":	136802
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1583,
			"primary_score":	999673,
			"second_score":	136776
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1584,
			"primary_score":	999673,
			"second_score":	136772
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1699,
			"primary_score":	999673,
			"second_score":	137032
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1700,
			"primary_score":	999673,
			"second_score":	137031
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1701,
			"primary_score":	999673,
			"second_score":	137030
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1702,
			"primary_score":	999673,
			"second_score":	137029
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1704,
			"primary_score":	999673,
			"second_score":	137028
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1711,
			"primary_score":	999673,
			"second_score":	137027
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1715,
			"primary_score":	999673,
			"second_score":	137026
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1735,
			"primary_score":	999673,
			"second_score":	137025
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1959,
			"primary_score":	999673,
			"second_score":	134770
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1963,
			"primary_score":	999673,
			"second_score":	134769
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1970,
			"primary_score":	999673,
			"second_score":	134766
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2041,
			"primary_score":	999673,
			"second_score":	135735
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2043,
			"primary_score":	999673,
			"second_score":	135734
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2050,
			"primary_score":	999673,
			"second_score":	135733
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2051,
			"primary_score":	999673,
			"second_score":	135723
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2052,
			"primary_score":	999673,
			"second_score":	135722
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2053,
			"primary_score":	999673,
			"second_score":	135721
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2054,
			"primary_score":	999673,
			"second_score":	135720
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2061,
			"primary_score":	999673,
			"second_score":	135702
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2062,
			"primary_score":	999673,
			"second_score":	135700
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2063,
			"primary_score":	999673,
			"second_score":	135699
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2064,
			"primary_score":	999673,
			"second_score":	135698
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2066,
			"primary_score":	999673,
			"second_score":	135697
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2067,
			"primary_score":	999673,
			"second_score":	135675
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2073,
			"primary_score":	999673,
			"second_score":	135885
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2074,
			"primary_score":	999673,
			"second_score":	135884
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2075,
			"primary_score":	999673,
			"second_score":	135883
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2076,
			"primary_score":	999673,
			"second_score":	135882
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2077,
			"primary_score":	999673,
			"second_score":	135881
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2079,
			"primary_score":	999673,
			"second_score":	135880
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2080,
			"primary_score":	999673,
			"second_score":	135876
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2082,
			"primary_score":	999673,
			"second_score":	135875
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2097,
			"primary_score":	999673,
			"second_score":	135874
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2098,
			"primary_score":	999673,
			"second_score":	135873
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2111,
			"primary_score":	999673,
			"second_score":	135872
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2117,
			"primary_score":	999673,
			"second_score":	135871
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2119,
			"primary_score":	999673,
			"second_score":	135868
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2120,
			"primary_score":	999673,
			"second_score":	135867
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2121,
			"primary_score":	999673,
			"second_score":	137119
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2125,
			"primary_score":	999673,
			"second_score":	135866
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2138,
			"primary_score":	999673,
			"second_score":	135865
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2139,
			"primary_score":	999673,
			"second_score":	135864
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2142,
			"primary_score":	999673,
			"second_score":	135826
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2156,
			"primary_score":	999673,
			"second_score":	135825
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2158,
			"primary_score":	999673,
			"second_score":	135815
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2159,
			"primary_score":	999673,
			"second_score":	135814
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2160,
			"primary_score":	999673,
			"second_score":	135813
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2165,
			"primary_score":	999673,
			"second_score":	137105
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2166,
			"primary_score":	999673,
			"second_score":	137104
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2171,
			"primary_score":	999673,
			"second_score":	135812
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2172,
			"primary_score":	999673,
			"second_score":	135811
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2173,
			"primary_score":	999673,
			"second_score":	135810
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2174,
			"primary_score":	999673,
			"second_score":	135809
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2227,
			"primary_score":	999673,
			"second_score":	134982
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2228,
			"primary_score":	999673,
			"second_score":	134981
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2230,
			"primary_score":	999673,
			"second_score":	134980
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2238,
			"primary_score":	999673,
			"second_score":	134979
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2244,
			"primary_score":	999673,
			"second_score":	134977
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2245,
			"primary_score":	999673,
			"second_score":	134973
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2248,
			"primary_score":	999673,
			"second_score":	134969
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2249,
			"primary_score":	999673,
			"second_score":	134967
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2254,
			"primary_score":	999673,
			"second_score":	134966
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2256,
			"primary_score":	999673,
			"second_score":	134956
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2258,
			"primary_score":	999673,
			"second_score":	134955
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2259,
			"primary_score":	999673,
			"second_score":	134954
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2261,
			"primary_score":	999673,
			"second_score":	134953
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2265,
			"primary_score":	999673,
			"second_score":	120019
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2266,
			"primary_score":	999673,
			"second_score":	120018
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2269,
			"primary_score":	999673,
			"second_score":	134952
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3838,
			"primary_score":	999673,
			"second_score":	137413
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3840,
			"primary_score":	999673,
			"second_score":	137412
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3853,
			"primary_score":	999673,
			"second_score":	137411
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3865,
			"primary_score":	999673,
			"second_score":	137383
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3868,
			"primary_score":	999673,
			"second_score":	137382
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3873,
			"primary_score":	999673,
			"second_score":	137381
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3881,
			"primary_score":	999673,
			"second_score":	137414
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3883,
			"primary_score":	999673,
			"second_score":	137380
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3884,
			"primary_score":	999673,
			"second_score":	137379
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3885,
			"primary_score":	999673,
			"second_score":	137353
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3886,
			"primary_score":	999673,
			"second_score":	137352
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3887,
			"primary_score":	999673,
			"second_score":	137351
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3888,
			"primary_score":	999673,
			"second_score":	137318
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3889,
			"primary_score":	999673,
			"second_score":	137315
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3897,
			"primary_score":	999673,
			"second_score":	137431
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3898,
			"primary_score":	999673,
			"second_score":	137430
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3899,
			"primary_score":	999673,
			"second_score":	137429
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3900,
			"primary_score":	999673,
			"second_score":	137428
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3901,
			"primary_score":	999673,
			"second_score":	137427
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3903,
			"primary_score":	999673,
			"second_score":	137426
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3939,
			"primary_score":	999673,
			"second_score":	137425
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3960,
			"primary_score":	999673,
			"second_score":	137424
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3962,
			"primary_score":	999673,
			"second_score":	137415
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3963,
			"primary_score":	999673,
			"second_score":	137314
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4796,
			"primary_score":	999673,
			"second_score":	130434
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4797,
			"primary_score":	999673,
			"second_score":	130432
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4799,
			"primary_score":	999673,
			"second_score":	130431
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4801,
			"primary_score":	999673,
			"second_score":	130421
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4802,
			"primary_score":	999673,
			"second_score":	130420
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4803,
			"primary_score":	999673,
			"second_score":	130419
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4804,
			"primary_score":	999673,
			"second_score":	130418
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4805,
			"primary_score":	999673,
			"second_score":	130417
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4807,
			"primary_score":	999673,
			"second_score":	130416
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4813,
			"primary_score":	999673,
			"second_score":	127487
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4815,
			"primary_score":	999673,
			"second_score":	127477
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4817,
			"primary_score":	999673,
			"second_score":	127475
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4818,
			"primary_score":	999673,
			"second_score":	127474
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4819,
			"primary_score":	999673,
			"second_score":	127473
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4820,
			"primary_score":	999673,
			"second_score":	127471
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4821,
			"primary_score":	999673,
			"second_score":	127470
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4823,
			"primary_score":	999673,
			"second_score":	127469
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4824,
			"primary_score":	999673,
			"second_score":	127468
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4826,
			"primary_score":	999673,
			"second_score":	127466
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4827,
			"primary_score":	999673,
			"second_score":	127456
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4828,
			"primary_score":	999673,
			"second_score":	127455
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4829,
			"primary_score":	999673,
			"second_score":	127454
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4835,
			"primary_score":	999673,
			"second_score":	127065
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4837,
			"primary_score":	999673,
			"second_score":	127055
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4838,
			"primary_score":	999673,
			"second_score":	127054
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4839,
			"primary_score":	999673,
			"second_score":	127053
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4840,
			"primary_score":	999673,
			"second_score":	127052
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4842,
			"primary_score":	999673,
			"second_score":	127051
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4844,
			"primary_score":	999673,
			"second_score":	127049
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4846,
			"primary_score":	999673,
			"second_score":	127048
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4852,
			"primary_score":	999673,
			"second_score":	135211
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4854,
			"primary_score":	999673,
			"second_score":	135210
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4855,
			"primary_score":	999673,
			"second_score":	135209
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4868,
			"primary_score":	999673,
			"second_score":	136775
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4870,
			"primary_score":	999673,
			"second_score":	136774
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4871,
			"primary_score":	999673,
			"second_score":	136773
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4884,
			"primary_score":	999673,
			"second_score":	135673
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4886,
			"primary_score":	999673,
			"second_score":	135672
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4887,
			"primary_score":	999673,
			"second_score":	135671
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4900,
			"primary_score":	999673,
			"second_score":	135143
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4913,
			"primary_score":	999673,
			"second_score":	13325
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4919,
			"primary_score":	999673,
			"second_score":	150236
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4921,
			"primary_score":	999673,
			"second_score":	150235
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4922,
			"primary_score":	999673,
			"second_score":	150210
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4925,
			"primary_score":	999673,
			"second_score":	150209
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4945,
			"primary_score":	999673,
			"second_score":	135075
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4947,
			"primary_score":	999673,
			"second_score":	135074
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4948,
			"primary_score":	999680,
			"second_score":	135073
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4949,
			"primary_score":	999680,
			"second_score":	135072
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4952,
			"primary_score":	999673,
			"second_score":	135071
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4954,
			"primary_score":	999673,
			"second_score":	135070
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4955,
			"primary_score":	999673,
			"second_score":	135047
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4964,
			"primary_score":	999680,
			"second_score":	135232
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4966,
			"primary_score":	999673,
			"second_score":	135231
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4969,
			"primary_score":	999673,
			"second_score":	135230
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4970,
			"primary_score":	999673,
			"second_score":	135229
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4979,
			"primary_score":	999673,
			"second_score":	135046
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4980,
			"primary_score":	999673,
			"second_score":	135043
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4981,
			"primary_score":	999673,
			"second_score":	135042
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5289,
			"primary_score":	999673,
			"second_score":	135119
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5297,
			"primary_score":	999673,
			"second_score":	135025
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5298,
			"primary_score":	999673,
			"second_score":	135024
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5303,
			"primary_score":	999673,
			"second_score":	135023
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5313,
			"primary_score":	999673,
			"second_score":	135027
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5314,
			"primary_score":	999673,
			"second_score":	135026
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	32,
			"primary_score":	999673,
			"second_score":	6430
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	33,
			"primary_score":	999673,
			"second_score":	110214
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	35,
			"primary_score":	999673,
			"second_score":	6429
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	58,
			"primary_score":	999673,
			"second_score":	109999
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	169,
			"primary_score":	999673,
			"second_score":	110724
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	172,
			"primary_score":	999673,
			"second_score":	110723
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	415,
			"primary_score":	999673,
			"second_score":	147438
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	416,
			"primary_score":	999673,
			"second_score":	147437
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	417,
			"primary_score":	999673,
			"second_score":	147436
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	423,
			"primary_score":	999673,
			"second_score":	147435
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	429,
			"primary_score":	999673,
			"second_score":	147434
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	430,
			"primary_score":	999673,
			"second_score":	147433
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	435,
			"primary_score":	999673,
			"second_score":	147432
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	440,
			"primary_score":	999673,
			"second_score":	147431
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	456,
			"primary_score":	999673,
			"second_score":	147370
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	459,
			"primary_score":	999673,
			"second_score":	147369
		}, {
			"file":	"Zend/zend_exceptions.c",
			"line":	72,
			"primary_score":	999673,
			"second_score":	119984
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	70,
			"primary_score":	999673,
			"second_score":	123684
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	71,
			"primary_score":	999673,
			"second_score":	123682
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	72,
			"primary_score":	999673,
			"second_score":	123680
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	73,
			"primary_score":	999673,
			"second_score":	123678
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	177,
			"primary_score":	999673,
			"second_score":	120052
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	209,
			"primary_score":	999673,
			"second_score":	123687
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	210,
			"primary_score":	999673,
			"second_score":	123686
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	211,
			"primary_score":	999673,
			"second_score":	123685
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	212,
			"primary_score":	999673,
			"second_score":	123677
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	480,
			"primary_score":	999673,
			"second_score":	123552
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	481,
			"primary_score":	999673,
			"second_score":	123551
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	482,
			"primary_score":	999673,
			"second_score":	123550
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	484,
			"primary_score":	999673,
			"second_score":	123549
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	489,
			"primary_score":	999673,
			"second_score":	123548
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	491,
			"primary_score":	999673,
			"second_score":	123547
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	507,
			"primary_score":	999673,
			"second_score":	123546
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	515,
			"primary_score":	999673,
			"second_score":	123545
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	82,
			"primary_score":	999673,
			"second_score":	121416
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	84,
			"primary_score":	999673,
			"second_score":	121415
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	92,
			"primary_score":	999673,
			"second_score":	121414
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	134,
			"primary_score":	999673,
			"second_score":	121413
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	163,
			"primary_score":	999673,
			"second_score":	191041
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	165,
			"primary_score":	999673,
			"second_score":	190961
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	166,
			"primary_score":	999673,
			"second_score":	190960
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	167,
			"primary_score":	999673,
			"second_score":	190959
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	168,
			"primary_score":	999673,
			"second_score":	190958
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	173,
			"primary_score":	999673,
			"second_score":	191042
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	178,
			"primary_score":	999673,
			"second_score":	110816
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	180,
			"primary_score":	999673,
			"second_score":	110815
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	181,
			"primary_score":	999673,
			"second_score":	110814
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	182,
			"primary_score":	999673,
			"second_score":	110813
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	183,
			"primary_score":	999673,
			"second_score":	110771
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	196,
			"primary_score":	999673,
			"second_score":	123491
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	201,
			"primary_score":	999673,
			"second_score":	165119
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	202,
			"primary_score":	999673,
			"second_score":	165117
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	224,
			"primary_score":	999673,
			"second_score":	134510
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	226,
			"primary_score":	999673,
			"second_score":	134509
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	229,
			"primary_score":	999673,
			"second_score":	134508
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	244,
			"primary_score":	999673,
			"second_score":	134507
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	246,
			"primary_score":	999673,
			"second_score":	134505
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	247,
			"primary_score":	999673,
			"second_score":	134504
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	248,
			"primary_score":	999673,
			"second_score":	134503
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	253,
			"primary_score":	999673,
			"second_score":	120176
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	259,
			"primary_score":	999673,
			"second_score":	120175
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	265,
			"primary_score":	999673,
			"second_score":	119992
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	272,
			"primary_score":	999673,
			"second_score":	119991
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	276,
			"primary_score":	999673,
			"second_score":	119990
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	284,
			"primary_score":	999673,
			"second_score":	123591
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	306,
			"primary_score":	999673,
			"second_score":	123590
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	307,
			"primary_score":	999673,
			"second_score":	123589
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	312,
			"primary_score":	999673,
			"second_score":	122189
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	313,
			"primary_score":	999673,
			"second_score":	122188
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	315,
			"primary_score":	999673,
			"second_score":	122187
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	316,
			"primary_score":	999673,
			"second_score":	120233
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	317,
			"primary_score":	999673,
			"second_score":	120232
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	318,
			"primary_score":	999673,
			"second_score":	120231
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	320,
			"primary_score":	999673,
			"second_score":	120177
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	346,
			"primary_score":	999673,
			"second_score":	123601
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	348,
			"primary_score":	999673,
			"second_score":	123600
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	350,
			"primary_score":	999673,
			"second_score":	123595
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	351,
			"primary_score":	999673,
			"second_score":	123594
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	352,
			"primary_score":	999673,
			"second_score":	123593
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	107,
			"primary_score":	999673,
			"second_score":	110758
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	119,
			"primary_score":	999673,
			"second_score":	110742
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	131,
			"primary_score":	999673,
			"second_score":	191283
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	133,
			"primary_score":	999673,
			"second_score":	191170
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	135,
			"primary_score":	999673,
			"second_score":	191168
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	136,
			"primary_score":	999673,
			"second_score":	191166
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	137,
			"primary_score":	999673,
			"second_score":	191164
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	138,
			"primary_score":	999673,
			"second_score":	191163
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	139,
			"primary_score":	999673,
			"second_score":	191162
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	144,
			"primary_score":	999673,
			"second_score":	191053
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	146,
			"primary_score":	999673,
			"second_score":	191052
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	147,
			"primary_score":	999673,
			"second_score":	191051
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	148,
			"primary_score":	999673,
			"second_score":	191050
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	150,
			"primary_score":	999673,
			"second_score":	191049
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	151,
			"primary_score":	999673,
			"second_score":	191048
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	153,
			"primary_score":	999673,
			"second_score":	191047
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	154,
			"primary_score":	999673,
			"second_score":	191046
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	155,
			"primary_score":	999673,
			"second_score":	191045
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	156,
			"primary_score":	999673,
			"second_score":	191044
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	158,
			"primary_score":	999673,
			"second_score":	191043
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	159,
			"primary_score":	999673,
			"second_score":	190957
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	161,
			"primary_score":	999673,
			"second_score":	190953
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	162,
			"primary_score":	999673,
			"second_score":	190813
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	163,
			"primary_score":	999673,
			"second_score":	190812
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	165,
			"primary_score":	999673,
			"second_score":	190811
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	166,
			"primary_score":	999673,
			"second_score":	190705
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	167,
			"primary_score":	999673,
			"second_score":	190703
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	168,
			"primary_score":	999673,
			"second_score":	190701
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	169,
			"primary_score":	999673,
			"second_score":	190700
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	170,
			"primary_score":	999673,
			"second_score":	190699
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	172,
			"primary_score":	999673,
			"second_score":	190541
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	174,
			"primary_score":	999673,
			"second_score":	190540
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	175,
			"primary_score":	999673,
			"second_score":	190537
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	177,
			"primary_score":	999673,
			"second_score":	190536
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	179,
			"primary_score":	999673,
			"second_score":	190399
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	181,
			"primary_score":	999673,
			"second_score":	190398
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	183,
			"primary_score":	999673,
			"second_score":	190397
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	185,
			"primary_score":	999673,
			"second_score":	190396
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	186,
			"primary_score":	999673,
			"second_score":	190287
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	187,
			"primary_score":	999673,
			"second_score":	190178
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	189,
			"primary_score":	999673,
			"second_score":	190069
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	191,
			"primary_score":	999673,
			"second_score":	189966
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	196,
			"primary_score":	999673,
			"second_score":	189965
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	197,
			"primary_score":	999673,
			"second_score":	189964
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	199,
			"primary_score":	999673,
			"second_score":	189963
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	200,
			"primary_score":	999673,
			"second_score":	189962
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	202,
			"primary_score":	999673,
			"second_score":	189961
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	204,
			"primary_score":	999673,
			"second_score":	189960
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	206,
			"primary_score":	999673,
			"second_score":	189959
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	212,
			"primary_score":	999673,
			"second_score":	119348
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	215,
			"primary_score":	999673,
			"second_score":	119347
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	222,
			"primary_score":	999673,
			"second_score":	119473
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	223,
			"primary_score":	999673,
			"second_score":	119467
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	224,
			"primary_score":	999673,
			"second_score":	119466
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	225,
			"primary_score":	999673,
			"second_score":	119465
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	226,
			"primary_score":	999673,
			"second_score":	119462
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	228,
			"primary_score":	999673,
			"second_score":	119337
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	232,
			"primary_score":	999673,
			"second_score":	119334
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	238,
			"primary_score":	999673,
			"second_score":	118256
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	255,
			"primary_score":	999673,
			"second_score":	118250
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	256,
			"primary_score":	999673,
			"second_score":	118247
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	257,
			"primary_score":	999673,
			"second_score":	111863
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	259,
			"primary_score":	999673,
			"second_score":	111861
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	260,
			"primary_score":	999673,
			"second_score":	111855
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	263,
			"primary_score":	999673,
			"second_score":	111854
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	270,
			"primary_score":	999673,
			"second_score":	111853
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	277,
			"primary_score":	999673,
			"second_score":	111852
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	278,
			"primary_score":	999673,
			"second_score":	111828
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	279,
			"primary_score":	999673,
			"second_score":	111801
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	280,
			"primary_score":	999673,
			"second_score":	111792
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	281,
			"primary_score":	999673,
			"second_score":	111783
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	283,
			"primary_score":	999673,
			"second_score":	111781
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	293,
			"primary_score":	999673,
			"second_score":	111775
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	296,
			"primary_score":	999673,
			"second_score":	111774
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	298,
			"primary_score":	999673,
			"second_score":	111757
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	300,
			"primary_score":	999673,
			"second_score":	110817
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	302,
			"primary_score":	999673,
			"second_score":	110770
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	305,
			"primary_score":	999673,
			"second_score":	110767
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	309,
			"primary_score":	999673,
			"second_score":	110766
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	310,
			"primary_score":	999673,
			"second_score":	110750
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	313,
			"primary_score":	999673,
			"second_score":	110734
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	318,
			"primary_score":	999673,
			"second_score":	110733
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	320,
			"primary_score":	999673,
			"second_score":	110731
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	321,
			"primary_score":	999673,
			"second_score":	110725
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	322,
			"primary_score":	999673,
			"second_score":	109991
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	324,
			"primary_score":	999673,
			"second_score":	109989
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	329,
			"primary_score":	999673,
			"second_score":	109983
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	331,
			"primary_score":	999673,
			"second_score":	109915
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	332,
			"primary_score":	999673,
			"second_score":	109894
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	333,
			"primary_score":	999673,
			"second_score":	109870
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	334,
			"primary_score":	999673,
			"second_score":	109849
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	335,
			"primary_score":	999673,
			"second_score":	109828
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	336,
			"primary_score":	999673,
			"second_score":	109781
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	340,
			"primary_score":	999673,
			"second_score":	109780
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	342,
			"primary_score":	999673,
			"second_score":	109778
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	344,
			"primary_score":	999673,
			"second_score":	109753
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	404,
			"primary_score":	999673,
			"second_score":	130265
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	405,
			"primary_score":	999673,
			"second_score":	130264
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	414,
			"primary_score":	999673,
			"second_score":	130262
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	418,
			"primary_score":	999673,
			"second_score":	130261
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	419,
			"primary_score":	999673,
			"second_score":	130260
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	428,
			"primary_score":	999673,
			"second_score":	130267
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	437,
			"primary_score":	999673,
			"second_score":	111940
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	438,
			"primary_score":	999673,
			"second_score":	111938
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	439,
			"primary_score":	999673,
			"second_score":	111936
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	441,
			"primary_score":	999673,
			"second_score":	111935
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	442,
			"primary_score":	999673,
			"second_score":	114258
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	443,
			"primary_score":	999673,
			"second_score":	111932
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	444,
			"primary_score":	999673,
			"second_score":	111925
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	447,
			"primary_score":	999673,
			"second_score":	114319
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	449,
			"primary_score":	999673,
			"second_score":	114318
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	450,
			"primary_score":	999673,
			"second_score":	114316
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	453,
			"primary_score":	999673,
			"second_score":	114314
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	463,
			"primary_score":	999673,
			"second_score":	13891
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	464,
			"primary_score":	999673,
			"second_score":	13889
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	465,
			"primary_score":	999673,
			"second_score":	13887
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	466,
			"primary_score":	999673,
			"second_score":	13885
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	467,
			"primary_score":	999673,
			"second_score":	16290
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	468,
			"primary_score":	999673,
			"second_score":	16288
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1153,
			"primary_score":	999673,
			"second_score":	122002
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1154,
			"primary_score":	999673,
			"second_score":	122001
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1155,
			"primary_score":	999673,
			"second_score":	122000
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1156,
			"primary_score":	999673,
			"second_score":	121999
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1157,
			"primary_score":	999673,
			"second_score":	121998
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1159,
			"primary_score":	999673,
			"second_score":	121997
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1167,
			"primary_score":	999673,
			"second_score":	121996
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1168,
			"primary_score":	999673,
			"second_score":	121995
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1170,
			"primary_score":	999673,
			"second_score":	121994
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1174,
			"primary_score":	999673,
			"second_score":	121993
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1175,
			"primary_score":	999673,
			"second_score":	121992
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1176,
			"primary_score":	999673,
			"second_score":	121991
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1177,
			"primary_score":	999673,
			"second_score":	119846
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1179,
			"primary_score":	999673,
			"second_score":	119845
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1180,
			"primary_score":	999673,
			"second_score":	119844
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1181,
			"primary_score":	999673,
			"second_score":	119843
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1182,
			"primary_score":	999673,
			"second_score":	119842
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1183,
			"primary_score":	999673,
			"second_score":	119841
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1185,
			"primary_score":	999673,
			"second_score":	119840
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1186,
			"primary_score":	999673,
			"second_score":	119839
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1187,
			"primary_score":	999673,
			"second_score":	119838
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1188,
			"primary_score":	999673,
			"second_score":	119837
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1191,
			"primary_score":	999673,
			"second_score":	119836
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1193,
			"primary_score":	999673,
			"second_score":	119835
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1195,
			"primary_score":	999673,
			"second_score":	119048
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1196,
			"primary_score":	999673,
			"second_score":	119047
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1197,
			"primary_score":	999673,
			"second_score":	119046
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1200,
			"primary_score":	999673,
			"second_score":	119045
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1208,
			"primary_score":	999673,
			"second_score":	119014
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1209,
			"primary_score":	999673,
			"second_score":	119013
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1210,
			"primary_score":	999673,
			"second_score":	119012
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1211,
			"primary_score":	999673,
			"second_score":	119011
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1212,
			"primary_score":	999673,
			"second_score":	118921
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1213,
			"primary_score":	999673,
			"second_score":	118902
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1214,
			"primary_score":	999673,
			"second_score":	118901
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1218,
			"primary_score":	999673,
			"second_score":	118900
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1221,
			"primary_score":	999673,
			"second_score":	118899
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1233,
			"primary_score":	999673,
			"second_score":	122004
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1235,
			"primary_score":	999673,
			"second_score":	122003
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1236,
			"primary_score":	999673,
			"second_score":	118898
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1240,
			"primary_score":	999673,
			"second_score":	118897
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1246,
			"primary_score":	999673,
			"second_score":	122005
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1451,
			"primary_score":	999673,
			"second_score":	189808
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1453,
			"primary_score":	999673,
			"second_score":	189807
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1468,
			"primary_score":	999673,
			"second_score":	189806
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1469,
			"primary_score":	999673,
			"second_score":	189805
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1470,
			"primary_score":	999673,
			"second_score":	189804
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1472,
			"primary_score":	999673,
			"second_score":	189803
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1487,
			"primary_score":	999673,
			"second_score":	189802
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1488,
			"primary_score":	999673,
			"second_score":	189801
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1489,
			"primary_score":	999673,
			"second_score":	189800
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1490,
			"primary_score":	999673,
			"second_score":	189799
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1493,
			"primary_score":	999673,
			"second_score":	189798
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1494,
			"primary_score":	999673,
			"second_score":	189797
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1510,
			"primary_score":	999673,
			"second_score":	108785
		}, {
			"file":	"Zend/zend_extensions.c",
			"line":	182,
			"primary_score":	999673,
			"second_score":	13317
		}, {
			"file":	"Zend/zend_extensions.c",
			"line":	183,
			"primary_score":	999673,
			"second_score":	13314
		}, {
			"file":	"Zend/zend_float.c",
			"line":	28,
			"primary_score":	999673,
			"second_score":	191282
		}, {
			"file":	"Zend/zend_float.c",
			"line":	30,
			"primary_score":	999673,
			"second_score":	191281
		}, {
			"file":	"Zend/zend_float.c",
			"line":	31,
			"primary_score":	999673,
			"second_score":	191280
		}, {
			"file":	"Zend/zend_float.c",
			"line":	33,
			"primary_score":	999673,
			"second_score":	191176
		}, {
			"file":	"Zend/zend_float.c",
			"line":	34,
			"primary_score":	999673,
			"second_score":	191174
		}, {
			"file":	"Zend/zend_float.c",
			"line":	47,
			"primary_score":	999673,
			"second_score":	109777
		}, {
			"file":	"Zend/zend_float.c",
			"line":	48,
			"primary_score":	999673,
			"second_score":	109776
		}, {
			"file":	"Zend/zend_float.c",
			"line":	51,
			"primary_score":	999673,
			"second_score":	109774
		}, {
			"file":	"Zend/zend_float.c",
			"line":	52,
			"primary_score":	999673,
			"second_score":	109773
		}, {
			"file":	"Zend/zend_float.c",
			"line":	53,
			"primary_score":	999673,
			"second_score":	109754
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	35,
			"primary_score":	999673,
			"second_score":	3141
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	36,
			"primary_score":	999673,
			"second_score":	3140
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	37,
			"primary_score":	999673,
			"second_score":	3139
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	84,
			"primary_score":	999673,
			"second_score":	3142
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	90,
			"primary_score":	999673,
			"second_score":	192540
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	91,
			"primary_score":	999673,
			"second_score":	192539
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	106,
			"primary_score":	999673,
			"second_score":	192538
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	107,
			"primary_score":	999673,
			"second_score":	192537
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	109,
			"primary_score":	999673,
			"second_score":	192536
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	110,
			"primary_score":	999673,
			"second_score":	192535
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	111,
			"primary_score":	999673,
			"second_score":	192534
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	113,
			"primary_score":	999673,
			"second_score":	192533
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	132,
			"primary_score":	999673,
			"second_score":	114311
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	142,
			"primary_score":	999673,
			"second_score":	114310
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	147,
			"primary_score":	999673,
			"second_score":	114309
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	149,
			"primary_score":	999673,
			"second_score":	114308
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	150,
			"primary_score":	999673,
			"second_score":	118319
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	152,
			"primary_score":	999673,
			"second_score":	118318
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	153,
			"primary_score":	999673,
			"second_score":	118317
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	155,
			"primary_score":	999673,
			"second_score":	118316
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	156,
			"primary_score":	999673,
			"second_score":	118461
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	157,
			"primary_score":	999673,
			"second_score":	118315
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	158,
			"primary_score":	999673,
			"second_score":	118314
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	159,
			"primary_score":	999673,
			"second_score":	118313
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	176,
			"primary_score":	999673,
			"second_score":	118312
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	177,
			"primary_score":	999673,
			"second_score":	118311
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	178,
			"primary_score":	999673,
			"second_score":	118310
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	179,
			"primary_score":	999673,
			"second_score":	118309
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	181,
			"primary_score":	999673,
			"second_score":	118308
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	183,
			"primary_score":	999673,
			"second_score":	118307
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	184,
			"primary_score":	999673,
			"second_score":	118306
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	186,
			"primary_score":	999673,
			"second_score":	118305
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	187,
			"primary_score":	999673,
			"second_score":	118304
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	188,
			"primary_score":	999673,
			"second_score":	118303
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	251,
			"primary_score":	999673,
			"second_score":	114257
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	253,
			"primary_score":	999673,
			"second_score":	114256
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	264,
			"primary_score":	999673,
			"second_score":	114255
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	265,
			"primary_score":	999673,
			"second_score":	114254
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	266,
			"primary_score":	999673,
			"second_score":	114248
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	653,
			"primary_score":	999673,
			"second_score":	109450
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	655,
			"primary_score":	999673,
			"second_score":	109449
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	728,
			"primary_score":	999673,
			"second_score":	109448
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	182,
			"primary_score":	999673,
			"second_score":	114313
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	183,
			"primary_score":	999673,
			"second_score":	114312
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	189,
			"primary_score":	999673,
			"second_score":	114253
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	190,
			"primary_score":	999673,
			"second_score":	114252
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	191,
			"primary_score":	999673,
			"second_score":	114251
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	192,
			"primary_score":	999673,
			"second_score":	114250
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	193,
			"primary_score":	999673,
			"second_score":	114249
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	102,
			"primary_score":	999673,
			"second_score":	135717
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	142,
			"primary_score":	999673,
			"second_score":	150540
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	143,
			"primary_score":	999673,
			"second_score":	150539
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	145,
			"primary_score":	999673,
			"second_score":	150538
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	147,
			"primary_score":	999673,
			"second_score":	150537
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	151,
			"primary_score":	999673,
			"second_score":	150536
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	152,
			"primary_score":	999673,
			"second_score":	190945
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	154,
			"primary_score":	999673,
			"second_score":	150535
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	157,
			"primary_score":	999673,
			"second_score":	150534
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	158,
			"primary_score":	999673,
			"second_score":	150533
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	159,
			"primary_score":	999673,
			"second_score":	150532
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	160,
			"primary_score":	999673,
			"second_score":	150531
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	161,
			"primary_score":	999673,
			"second_score":	150530
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	162,
			"primary_score":	999673,
			"second_score":	150529
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	163,
			"primary_score":	999673,
			"second_score":	150528
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	164,
			"primary_score":	999673,
			"second_score":	150527
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	165,
			"primary_score":	999673,
			"second_score":	150526
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	166,
			"primary_score":	999673,
			"second_score":	150525
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	167,
			"primary_score":	999673,
			"second_score":	150524
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	170,
			"primary_score":	999673,
			"second_score":	150523
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	177,
			"primary_score":	999673,
			"second_score":	150522
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	178,
			"primary_score":	999673,
			"second_score":	150407
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	179,
			"primary_score":	999673,
			"second_score":	150406
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	183,
			"primary_score":	999673,
			"second_score":	150405
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	205,
			"primary_score":	999673,
			"second_score":	134600
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	206,
			"primary_score":	999673,
			"second_score":	134599
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	207,
			"primary_score":	999673,
			"second_score":	134598
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	209,
			"primary_score":	999673,
			"second_score":	134597
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	211,
			"primary_score":	999673,
			"second_score":	134596
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	218,
			"primary_score":	999673,
			"second_score":	134595
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	219,
			"primary_score":	999673,
			"second_score":	134488
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	221,
			"primary_score":	999673,
			"second_score":	134487
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	222,
			"primary_score":	999673,
			"second_score":	134486
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	223,
			"primary_score":	999673,
			"second_score":	134485
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	224,
			"primary_score":	999673,
			"second_score":	134601
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	225,
			"primary_score":	999673,
			"second_score":	134600
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	226,
			"primary_score":	999673,
			"second_score":	134599
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	228,
			"primary_score":	999673,
			"second_score":	152033
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	236,
			"primary_score":	999673,
			"second_score":	152031
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	237,
			"primary_score":	999673,
			"second_score":	152030
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	239,
			"primary_score":	999673,
			"second_score":	152015
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	240,
			"primary_score":	999673,
			"second_score":	152010
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	243,
			"primary_score":	999673,
			"second_score":	152009
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	244,
			"primary_score":	999673,
			"second_score":	152007
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	247,
			"primary_score":	999673,
			"second_score":	147578
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	250,
			"primary_score":	999673,
			"second_score":	143291
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	251,
			"primary_score":	999673,
			"second_score":	143187
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	254,
			"primary_score":	999673,
			"second_score":	143186
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	255,
			"primary_score":	999673,
			"second_score":	143185
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	256,
			"primary_score":	999673,
			"second_score":	144332
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	257,
			"primary_score":	999673,
			"second_score":	143179
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	258,
			"primary_score":	999673,
			"second_score":	147556
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	259,
			"primary_score":	999673,
			"second_score":	143174
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	260,
			"primary_score":	999673,
			"second_score":	143173
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	263,
			"primary_score":	999673,
			"second_score":	143172
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	264,
			"primary_score":	999673,
			"second_score":	147381
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	265,
			"primary_score":	999673,
			"second_score":	143161
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	266,
			"primary_score":	999673,
			"second_score":	143160
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	268,
			"primary_score":	999673,
			"second_score":	143158
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	269,
			"primary_score":	999673,
			"second_score":	154244
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	270,
			"primary_score":	999673,
			"second_score":	143155
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	352,
			"primary_score":	999673,
			"second_score":	147968
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	353,
			"primary_score":	999673,
			"second_score":	147967
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	355,
			"primary_score":	999673,
			"second_score":	147966
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	357,
			"primary_score":	999673,
			"second_score":	147965
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	358,
			"primary_score":	999673,
			"second_score":	155127
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	360,
			"primary_score":	999673,
			"second_score":	147964
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	362,
			"primary_score":	999673,
			"second_score":	147963
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	363,
			"primary_score":	999673,
			"second_score":	147962
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	364,
			"primary_score":	999673,
			"second_score":	127722
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	389,
			"primary_score":	999673,
			"second_score":	127721
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	391,
			"primary_score":	999673,
			"second_score":	147961
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	392,
			"primary_score":	999673,
			"second_score":	147857
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	395,
			"primary_score":	999673,
			"second_score":	147856
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	396,
			"primary_score":	999673,
			"second_score":	147855
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	397,
			"primary_score":	999673,
			"second_score":	155014
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	398,
			"primary_score":	999673,
			"second_score":	147826
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	402,
			"primary_score":	999673,
			"second_score":	147825
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	404,
			"primary_score":	999673,
			"second_score":	147821
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	405,
			"primary_score":	999673,
			"second_score":	147819
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	406,
			"primary_score":	999673,
			"second_score":	149325
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	407,
			"primary_score":	999673,
			"second_score":	147810
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	409,
			"primary_score":	999673,
			"second_score":	147808
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	410,
			"primary_score":	999673,
			"second_score":	147807
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	412,
			"primary_score":	999673,
			"second_score":	147806
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	413,
			"primary_score":	999673,
			"second_score":	147805
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	414,
			"primary_score":	999673,
			"second_score":	147803
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	420,
			"primary_score":	999673,
			"second_score":	154243
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	422,
			"primary_score":	999673,
			"second_score":	154242
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	424,
			"primary_score":	999673,
			"second_score":	154241
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	425,
			"primary_score":	999673,
			"second_score":	154240
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	426,
			"primary_score":	999673,
			"second_score":	154099
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	427,
			"primary_score":	999673,
			"second_score":	154098
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	428,
			"primary_score":	999673,
			"second_score":	154096
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	429,
			"primary_score":	999673,
			"second_score":	154095
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	430,
			"primary_score":	999673,
			"second_score":	154094
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	431,
			"primary_score":	999673,
			"second_score":	154093
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	432,
			"primary_score":	999673,
			"second_score":	153846
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	433,
			"primary_score":	999673,
			"second_score":	153844
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	442,
			"primary_score":	999673,
			"second_score":	154092
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	443,
			"primary_score":	999673,
			"second_score":	154091
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	445,
			"primary_score":	999673,
			"second_score":	154090
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	447,
			"primary_score":	999673,
			"second_score":	154089
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	448,
			"primary_score":	999673,
			"second_score":	154088
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	449,
			"primary_score":	999673,
			"second_score":	154087
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	450,
			"primary_score":	999673,
			"second_score":	153854
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	451,
			"primary_score":	999673,
			"second_score":	153858
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	452,
			"primary_score":	999673,
			"second_score":	153849
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	453,
			"primary_score":	999673,
			"second_score":	153848
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	455,
			"primary_score":	999673,
			"second_score":	153847
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	460,
			"primary_score":	999673,
			"second_score":	48218
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	461,
			"primary_score":	999673,
			"second_score":	48217
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	463,
			"primary_score":	999673,
			"second_score":	48216
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	465,
			"primary_score":	999673,
			"second_score":	48215
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	466,
			"primary_score":	999673,
			"second_score":	48214
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	468,
			"primary_score":	999673,
			"second_score":	48198
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	470,
			"primary_score":	999673,
			"second_score":	48197
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	471,
			"primary_score":	999673,
			"second_score":	48196
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	472,
			"primary_score":	999673,
			"second_score":	48195
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	476,
			"primary_score":	999673,
			"second_score":	48194
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	477,
			"primary_score":	999673,
			"second_score":	48192
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	478,
			"primary_score":	999673,
			"second_score":	48191
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	480,
			"primary_score":	999673,
			"second_score":	48242
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	482,
			"primary_score":	999673,
			"second_score":	48190
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	483,
			"primary_score":	999673,
			"second_score":	52456
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	485,
			"primary_score":	999673,
			"second_score":	48189
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	486,
			"primary_score":	999673,
			"second_score":	51043
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	489,
			"primary_score":	999673,
			"second_score":	48188
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	491,
			"primary_score":	999673,
			"second_score":	48187
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	492,
			"primary_score":	999673,
			"second_score":	48186
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	494,
			"primary_score":	999673,
			"second_score":	63070
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	496,
			"primary_score":	999673,
			"second_score":	48185
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	497,
			"primary_score":	999673,
			"second_score":	48184
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	499,
			"primary_score":	999673,
			"second_score":	48183
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	500,
			"primary_score":	999673,
			"second_score":	48182
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	502,
			"primary_score":	999673,
			"second_score":	48178
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	503,
			"primary_score":	999673,
			"second_score":	48177
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	505,
			"primary_score":	999673,
			"second_score":	48176
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	506,
			"primary_score":	999673,
			"second_score":	48175
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	507,
			"primary_score":	999673,
			"second_score":	48173
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	508,
			"primary_score":	999673,
			"second_score":	48172
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	510,
			"primary_score":	999673,
			"second_score":	48247
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	518,
			"primary_score":	999673,
			"second_score":	3132
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	520,
			"primary_score":	999673,
			"second_score":	3131
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	522,
			"primary_score":	999673,
			"second_score":	3130
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	524,
			"primary_score":	999673,
			"second_score":	3129
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	525,
			"primary_score":	999673,
			"second_score":	3128
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	526,
			"primary_score":	999673,
			"second_score":	3121
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	527,
			"primary_score":	999673,
			"second_score":	3120
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	528,
			"primary_score":	999673,
			"second_score":	3119
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	529,
			"primary_score":	999673,
			"second_score":	3215
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	531,
			"primary_score":	999673,
			"second_score":	3118
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	532,
			"primary_score":	999673,
			"second_score":	3117
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	534,
			"primary_score":	999673,
			"second_score":	3116
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	536,
			"primary_score":	999673,
			"second_score":	3115
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	538,
			"primary_score":	999673,
			"second_score":	3114
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	579,
			"primary_score":	999673,
			"second_score":	3569
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	581,
			"primary_score":	999673,
			"second_score":	3568
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	582,
			"primary_score":	999673,
			"second_score":	3566
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	583,
			"primary_score":	999673,
			"second_score":	3969
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	585,
			"primary_score":	999673,
			"second_score":	3565
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	587,
			"primary_score":	999673,
			"second_score":	3564
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	588,
			"primary_score":	999673,
			"second_score":	3563
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	590,
			"primary_score":	999673,
			"second_score":	3562
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	591,
			"primary_score":	999673,
			"second_score":	53650
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	596,
			"primary_score":	999673,
			"second_score":	3561
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	597,
			"primary_score":	999673,
			"second_score":	53592
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	600,
			"primary_score":	999673,
			"second_score":	3560
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	602,
			"primary_score":	999673,
			"second_score":	3559
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	603,
			"primary_score":	999673,
			"second_score":	3558
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	605,
			"primary_score":	999673,
			"second_score":	51006
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	607,
			"primary_score":	999673,
			"second_score":	3557
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	608,
			"primary_score":	999673,
			"second_score":	3556
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	610,
			"primary_score":	999673,
			"second_score":	3555
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	611,
			"primary_score":	999673,
			"second_score":	3554
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	613,
			"primary_score":	999673,
			"second_score":	3552
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	614,
			"primary_score":	999673,
			"second_score":	50999
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	616,
			"primary_score":	999673,
			"second_score":	3551
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	617,
			"primary_score":	999673,
			"second_score":	3550
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	619,
			"primary_score":	999673,
			"second_score":	3549
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	620,
			"primary_score":	999673,
			"second_score":	3548
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	622,
			"primary_score":	999673,
			"second_score":	3547
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	643,
			"primary_score":	999673,
			"second_score":	108757
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	645,
			"primary_score":	999673,
			"second_score":	108756
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	647,
			"primary_score":	999673,
			"second_score":	108755
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	648,
			"primary_score":	999673,
			"second_score":	108754
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	649,
			"primary_score":	999673,
			"second_score":	51018
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	650,
			"primary_score":	999673,
			"second_score":	48163
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	653,
			"primary_score":	999673,
			"second_score":	48162
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	655,
			"primary_score":	999673,
			"second_score":	48161
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	669,
			"primary_score":	999673,
			"second_score":	109428
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	671,
			"primary_score":	999673,
			"second_score":	109427
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	673,
			"primary_score":	999673,
			"second_score":	109426
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	674,
			"primary_score":	999673,
			"second_score":	109424
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	675,
			"primary_score":	999673,
			"second_score":	109423
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	676,
			"primary_score":	999673,
			"second_score":	109266
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	678,
			"primary_score":	999673,
			"second_score":	109263
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	681,
			"primary_score":	999673,
			"second_score":	109262
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	683,
			"primary_score":	999673,
			"second_score":	109261
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	687,
			"primary_score":	999673,
			"second_score":	109260
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	693,
			"primary_score":	999673,
			"second_score":	6156
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	695,
			"primary_score":	999673,
			"second_score":	6155
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	697,
			"primary_score":	999673,
			"second_score":	6154
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	698,
			"primary_score":	999673,
			"second_score":	6152
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	699,
			"primary_score":	999673,
			"second_score":	6151
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	700,
			"primary_score":	999673,
			"second_score":	3533
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	702,
			"primary_score":	999673,
			"second_score":	3530
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	703,
			"primary_score":	999673,
			"second_score":	3570
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	705,
			"primary_score":	999673,
			"second_score":	3529
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	707,
			"primary_score":	999673,
			"second_score":	3528
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	711,
			"primary_score":	999673,
			"second_score":	3527
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	723,
			"primary_score":	999935,
			"second_score":	123123
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	727,
			"primary_score":	999938,
			"second_score":	121218
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	728,
			"primary_score":	999938,
			"second_score":	121217
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	729,
			"primary_score":	999938,
			"second_score":	121216
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	730,
			"primary_score":	999938,
			"second_score":	121215
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	731,
			"primary_score":	999938,
			"second_score":	121214
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	732,
			"primary_score":	999938,
			"second_score":	121213
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	734,
			"primary_score":	999938,
			"second_score":	120270
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	737,
			"primary_score":	999938,
			"second_score":	120269
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	739,
			"primary_score":	999938,
			"second_score":	120268
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	742,
			"primary_score":	999938,
			"second_score":	120267
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	745,
			"primary_score":	999935,
			"second_score":	120265
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	751,
			"primary_score":	999673,
			"second_score":	109257
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	753,
			"primary_score":	999673,
			"second_score":	109256
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	755,
			"primary_score":	999673,
			"second_score":	119458
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	756,
			"primary_score":	999673,
			"second_score":	109253
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	757,
			"primary_score":	999673,
			"second_score":	109252
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	758,
			"primary_score":	999673,
			"second_score":	109251
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	760,
			"primary_score":	999673,
			"second_score":	109249
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	761,
			"primary_score":	999673,
			"second_score":	109248
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	762,
			"primary_score":	999673,
			"second_score":	109247
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	763,
			"primary_score":	999673,
			"second_score":	110235
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	765,
			"primary_score":	999673,
			"second_score":	109246
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	766,
			"primary_score":	999673,
			"second_score":	109245
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	769,
			"primary_score":	999673,
			"second_score":	119341
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	874,
			"primary_score":	999673,
			"second_score":	98424
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	875,
			"primary_score":	999673,
			"second_score":	98423
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	876,
			"primary_score":	999673,
			"second_score":	98422
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	878,
			"primary_score":	999673,
			"second_score":	98421
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	880,
			"primary_score":	999673,
			"second_score":	98420
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	881,
			"primary_score":	999673,
			"second_score":	98406
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	883,
			"primary_score":	999673,
			"second_score":	98405
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	884,
			"primary_score":	999673,
			"second_score":	98404
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	885,
			"primary_score":	999673,
			"second_score":	98401
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	886,
			"primary_score":	999673,
			"second_score":	98400
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	887,
			"primary_score":	999673,
			"second_score":	98399
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	888,
			"primary_score":	999673,
			"second_score":	98398
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	891,
			"primary_score":	999673,
			"second_score":	98402
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	893,
			"primary_score":	999673,
			"second_score":	141378
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	926,
			"primary_score":	999673,
			"second_score":	65627
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	927,
			"primary_score":	999673,
			"second_score":	65626
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	928,
			"primary_score":	999673,
			"second_score":	65625
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	930,
			"primary_score":	999673,
			"second_score":	65624
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	932,
			"primary_score":	999673,
			"second_score":	65623
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	933,
			"primary_score":	999673,
			"second_score":	65614
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	935,
			"primary_score":	999673,
			"second_score":	65613
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	936,
			"primary_score":	999673,
			"second_score":	65612
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	937,
			"primary_score":	999673,
			"second_score":	65611
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	938,
			"primary_score":	999673,
			"second_score":	65610
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	939,
			"primary_score":	999673,
			"second_score":	65609
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	977,
			"primary_score":	999673,
			"second_score":	110170
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	978,
			"primary_score":	999673,
			"second_score":	110169
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	980,
			"primary_score":	999673,
			"second_score":	110168
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	982,
			"primary_score":	999673,
			"second_score":	110167
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	984,
			"primary_score":	999673,
			"second_score":	110166
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	985,
			"primary_score":	999673,
			"second_score":	110165
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	986,
			"primary_score":	999673,
			"second_score":	110164
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	987,
			"primary_score":	999673,
			"second_score":	110163
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	988,
			"primary_score":	999673,
			"second_score":	110162
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1018,
			"primary_score":	999673,
			"second_score":	119339
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1020,
			"primary_score":	999673,
			"second_score":	119338
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1059,
			"primary_score":	999673,
			"second_score":	150879
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1061,
			"primary_score":	999673,
			"second_score":	150878
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1062,
			"primary_score":	999673,
			"second_score":	150877
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1084,
			"primary_score":	999673,
			"second_score":	122220
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1086,
			"primary_score":	999673,
			"second_score":	122219
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1088,
			"primary_score":	999673,
			"second_score":	122218
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1089,
			"primary_score":	999673,
			"second_score":	122217
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1090,
			"primary_score":	999673,
			"second_score":	122216
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1159,
			"primary_score":	999673,
			"second_score":	150875
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1161,
			"primary_score":	999673,
			"second_score":	150874
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1163,
			"primary_score":	999673,
			"second_score":	150873
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1165,
			"primary_score":	999673,
			"second_score":	150872
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1166,
			"primary_score":	999673,
			"second_score":	122234
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1167,
			"primary_score":	999673,
			"second_score":	122233
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1169,
			"primary_score":	999673,
			"second_score":	150871
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1515,
			"primary_score":	999673,
			"second_score":	147971
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1517,
			"primary_score":	999673,
			"second_score":	147970
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	263,
			"primary_score":	999673,
			"second_score":	48213
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	266,
			"primary_score":	999673,
			"second_score":	48212
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	267,
			"primary_score":	999673,
			"second_score":	48211
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	268,
			"primary_score":	999673,
			"second_score":	48210
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	269,
			"primary_score":	999673,
			"second_score":	48209
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	270,
			"primary_score":	999673,
			"second_score":	48208
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	271,
			"primary_score":	999673,
			"second_score":	48207
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	272,
			"primary_score":	999673,
			"second_score":	48206
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	273,
			"primary_score":	999673,
			"second_score":	48205
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	274,
			"primary_score":	999673,
			"second_score":	48204
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	276,
			"primary_score":	999673,
			"second_score":	48203
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	278,
			"primary_score":	999673,
			"second_score":	49602
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	279,
			"primary_score":	999673,
			"second_score":	48417
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	280,
			"primary_score":	999673,
			"second_score":	48416
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	281,
			"primary_score":	999673,
			"second_score":	48415
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	282,
			"primary_score":	999673,
			"second_score":	48202
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	283,
			"primary_score":	999673,
			"second_score":	48201
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	287,
			"primary_score":	999673,
			"second_score":	48199
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	345,
			"primary_score":	999673,
			"second_score":	155906
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	346,
			"primary_score":	999673,
			"second_score":	155902
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	39,
			"primary_score":	999673,
			"second_score":	3532
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	40,
			"primary_score":	999673,
			"second_score":	3572
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	42,
			"primary_score":	999673,
			"second_score":	3531
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	104,
			"primary_score":	999673,
			"second_score":	3202
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	105,
			"primary_score":	999673,
			"second_score":	3176
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	106,
			"primary_score":	999673,
			"second_score":	3175
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	120,
			"primary_score":	999673,
			"second_score":	109440
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	126,
			"primary_score":	999673,
			"second_score":	109439
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	224,
			"primary_score":	999673,
			"second_score":	6157
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	348,
			"primary_score":	999673,
			"second_score":	150342
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	349,
			"primary_score":	999673,
			"second_score":	150341
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	351,
			"primary_score":	999673,
			"second_score":	150340
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	352,
			"primary_score":	999673,
			"second_score":	150300
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	355,
			"primary_score":	999673,
			"second_score":	150299
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	382,
			"primary_score":	999673,
			"second_score":	98427
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	383,
			"primary_score":	999673,
			"second_score":	98426
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	385,
			"primary_score":	999673,
			"second_score":	98425
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	386,
			"primary_score":	999673,
			"second_score":	98397
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	390,
			"primary_score":	999673,
			"second_score":	98396
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	393,
			"primary_score":	999673,
			"second_score":	98395
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3049,
			"primary_score":	999673,
			"second_score":	134991
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3051,
			"primary_score":	999673,
			"second_score":	134990
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3053,
			"primary_score":	999673,
			"second_score":	134989
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3055,
			"primary_score":	999673,
			"second_score":	134988
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3112,
			"primary_score":	999673,
			"second_score":	142897
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3115,
			"primary_score":	999673,
			"second_score":	142896
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3118,
			"primary_score":	999673,
			"second_score":	142895
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3120,
			"primary_score":	999673,
			"second_score":	142894
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3121,
			"primary_score":	999673,
			"second_score":	142893
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3122,
			"primary_score":	999673,
			"second_score":	142892
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3124,
			"primary_score":	999673,
			"second_score":	142891
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3126,
			"primary_score":	999673,
			"second_score":	142890
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3129,
			"primary_score":	999673,
			"second_score":	142889
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3130,
			"primary_score":	999673,
			"second_score":	142888
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3131,
			"primary_score":	999673,
			"second_score":	142887
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3143,
			"primary_score":	999673,
			"second_score":	142886
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3144,
			"primary_score":	999673,
			"second_score":	142885
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3145,
			"primary_score":	999673,
			"second_score":	142884
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3148,
			"primary_score":	999673,
			"second_score":	142883
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3149,
			"primary_score":	999673,
			"second_score":	142882
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3150,
			"primary_score":	999673,
			"second_score":	142881
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3156,
			"primary_score":	999673,
			"second_score":	142880
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3160,
			"primary_score":	999673,
			"second_score":	142879
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3165,
			"primary_score":	999673,
			"second_score":	142878
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3167,
			"primary_score":	999673,
			"second_score":	142877
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3169,
			"primary_score":	999673,
			"second_score":	142876
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3170,
			"primary_score":	999673,
			"second_score":	142875
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3171,
			"primary_score":	999673,
			"second_score":	142874
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3172,
			"primary_score":	999673,
			"second_score":	142873
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3179,
			"primary_score":	999673,
			"second_score":	142872
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3180,
			"primary_score":	999673,
			"second_score":	142871
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3182,
			"primary_score":	999673,
			"second_score":	142870
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3192,
			"primary_score":	999673,
			"second_score":	135011
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3195,
			"primary_score":	999673,
			"second_score":	135010
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3260,
			"primary_score":	999673,
			"second_score":	135009
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3262,
			"primary_score":	999673,
			"second_score":	135008
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3274,
			"primary_score":	999673,
			"second_score":	135007
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3275,
			"primary_score":	999673,
			"second_score":	135102
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3280,
			"primary_score":	999673,
			"second_score":	135006
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3282,
			"primary_score":	999673,
			"second_score":	135077
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3283,
			"primary_score":	999673,
			"second_score":	135076
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3286,
			"primary_score":	999673,
			"second_score":	135005
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3288,
			"primary_score":	999673,
			"second_score":	135004
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3289,
			"primary_score":	999673,
			"second_score":	135003
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3293,
			"primary_score":	999673,
			"second_score":	135190
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3294,
			"primary_score":	999673,
			"second_score":	135189
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3299,
			"primary_score":	999673,
			"second_score":	135002
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3300,
			"primary_score":	999673,
			"second_score":	135001
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3301,
			"primary_score":	999673,
			"second_score":	135218
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3302,
			"primary_score":	999673,
			"second_score":	135000
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3303,
			"primary_score":	999673,
			"second_score":	134999
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3305,
			"primary_score":	999673,
			"second_score":	135034
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3307,
			"primary_score":	999673,
			"second_score":	135033
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3308,
			"primary_score":	999673,
			"second_score":	135032
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3311,
			"primary_score":	999673,
			"second_score":	134998
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3312,
			"primary_score":	999673,
			"second_score":	134997
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3316,
			"primary_score":	999673,
			"second_score":	135183
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3320,
			"primary_score":	999673,
			"second_score":	135182
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3323,
			"primary_score":	999673,
			"second_score":	135181
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3324,
			"primary_score":	999673,
			"second_score":	135180
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3326,
			"primary_score":	999673,
			"second_score":	135179
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3327,
			"primary_score":	999673,
			"second_score":	135178
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3329,
			"primary_score":	999673,
			"second_score":	135177
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3337,
			"primary_score":	999673,
			"second_score":	135101
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3339,
			"primary_score":	999673,
			"second_score":	135100
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3357,
			"primary_score":	999673,
			"second_score":	135031
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3360,
			"primary_score":	999673,
			"second_score":	135030
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3361,
			"primary_score":	999673,
			"second_score":	135029
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3365,
			"primary_score":	999673,
			"second_score":	135028
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3366,
			"primary_score":	999673,
			"second_score":	135022
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3370,
			"primary_score":	999673,
			"second_score":	135212
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3371,
			"primary_score":	999673,
			"second_score":	135208
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3375,
			"primary_score":	999673,
			"second_score":	135096
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3376,
			"primary_score":	999673,
			"second_score":	135094
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3380,
			"primary_score":	999673,
			"second_score":	137119
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3381,
			"primary_score":	999673,
			"second_score":	137118
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3390,
			"primary_score":	999673,
			"second_score":	135120
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3391,
			"primary_score":	999673,
			"second_score":	135118
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3490,
			"primary_score":	999673,
			"second_score":	135144
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3491,
			"primary_score":	999673,
			"second_score":	135142
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3630,
			"primary_score":	999677,
			"second_score":	135416
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3631,
			"primary_score":	999677,
			"second_score":	135409
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3995,
			"primary_score":	999673,
			"second_score":	135780
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3996,
			"primary_score":	999673,
			"second_score":	135779
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4000,
			"primary_score":	999673,
			"second_score":	136101
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4001,
			"primary_score":	999673,
			"second_score":	136100
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4005,
			"primary_score":	999673,
			"second_score":	137136
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4006,
			"primary_score":	999673,
			"second_score":	137099
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4010,
			"primary_score":	999673,
			"second_score":	135887
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4011,
			"primary_score":	999673,
			"second_score":	135808
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4020,
			"primary_score":	999673,
			"second_score":	129310
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4021,
			"primary_score":	999673,
			"second_score":	129273
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4025,
			"primary_score":	999673,
			"second_score":	135745
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4026,
			"primary_score":	999673,
			"second_score":	135666
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4195,
			"primary_score":	999673,
			"second_score":	126895
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4196,
			"primary_score":	999673,
			"second_score":	126881
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4200,
			"primary_score":	999673,
			"second_score":	142226
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4201,
			"primary_score":	999673,
			"second_score":	142212
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4515,
			"primary_score":	999673,
			"second_score":	126980
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4516,
			"primary_score":	999673,
			"second_score":	126979
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4520,
			"primary_score":	999673,
			"second_score":	130435
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4521,
			"primary_score":	999673,
			"second_score":	130414
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4525,
			"primary_score":	999673,
			"second_score":	127488
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4526,
			"primary_score":	999673,
			"second_score":	127453
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4530,
			"primary_score":	999673,
			"second_score":	127066
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4531,
			"primary_score":	999673,
			"second_score":	127046
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4600,
			"primary_score":	999673,
			"second_score":	137200
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4601,
			"primary_score":	999673,
			"second_score":	137199
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4655,
			"primary_score":	999673,
			"second_score":	137037
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4656,
			"primary_score":	999673,
			"second_score":	136771
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4660,
			"primary_score":	999673,
			"second_score":	135736
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4661,
			"primary_score":	999673,
			"second_score":	135670
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4855,
			"primary_score":	999673,
			"second_score":	137246
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4856,
			"primary_score":	999673,
			"second_score":	137245
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4960,
			"primary_score":	999673,
			"second_score":	137432
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4961,
			"primary_score":	999673,
			"second_score":	137313
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4975,
			"primary_score":	999673,
			"second_score":	137223
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4976,
			"primary_score":	999673,
			"second_score":	137222
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5020,
			"primary_score":	999673,
			"second_score":	135460
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5021,
			"primary_score":	999673,
			"second_score":	135459
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5025,
			"primary_score":	999673,
			"second_score":	126957
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5026,
			"primary_score":	999673,
			"second_score":	126956
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5030,
			"primary_score":	999673,
			"second_score":	135521
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5031,
			"primary_score":	999673,
			"second_score":	135482
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5062,
			"primary_score":	999673,
			"second_score":	135550
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5063,
			"primary_score":	999673,
			"second_score":	135549
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5133,
			"primary_score":	999673,
			"second_score":	135648
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5134,
			"primary_score":	999673,
			"second_score":	135611
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5441,
			"primary_score":	999673,
			"second_score":	135021
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5443,
			"primary_score":	999673,
			"second_score":	135020
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5444,
			"primary_score":	999673,
			"second_score":	135019
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5445,
			"primary_score":	999673,
			"second_score":	135018
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5447,
			"primary_score":	999673,
			"second_score":	135017
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5454,
			"primary_score":	999673,
			"second_score":	135016
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5456,
			"primary_score":	999673,
			"second_score":	135015
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5457,
			"primary_score":	999673,
			"second_score":	135014
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5458,
			"primary_score":	999673,
			"second_score":	135133
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5460,
			"primary_score":	999673,
			"second_score":	135013
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5462,
			"primary_score":	999673,
			"second_score":	135012
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5606,
			"primary_score":	999673,
			"second_score":	134996
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5631,
			"primary_score":	999673,
			"second_score":	134995
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5632,
			"primary_score":	999673,
			"second_score":	134994
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5633,
			"primary_score":	999673,
			"second_score":	134993
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5635,
			"primary_score":	999673,
			"second_score":	134992
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5637,
			"primary_score":	999673,
			"second_score":	134987
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5640,
			"primary_score":	999673,
			"second_score":	134986
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5644,
			"primary_score":	999673,
			"second_score":	134985
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5647,
			"primary_score":	999673,
			"second_score":	134984
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	143,
			"primary_score":	999673,
			"second_score":	143642
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	144,
			"primary_score":	999673,
			"second_score":	143641
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	145,
			"primary_score":	999673,
			"second_score":	143640
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	146,
			"primary_score":	999673,
			"second_score":	121482
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	152,
			"primary_score":	999673,
			"second_score":	189957
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	153,
			"primary_score":	999673,
			"second_score":	189956
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	154,
			"primary_score":	999673,
			"second_score":	189955
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	155,
			"primary_score":	999673,
			"second_score":	189954
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	156,
			"primary_score":	999673,
			"second_score":	189953
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	161,
			"primary_score":	999673,
			"second_score":	118288
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	165,
			"primary_score":	999673,
			"second_score":	118287
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	166,
			"primary_score":	999673,
			"second_score":	118263
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	171,
			"primary_score":	999673,
			"second_score":	143938
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	172,
			"primary_score":	999673,
			"second_score":	143937
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	173,
			"primary_score":	999673,
			"second_score":	143936
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	174,
			"primary_score":	999673,
			"second_score":	143935
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	175,
			"primary_score":	999673,
			"second_score":	143934
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	176,
			"primary_score":	999673,
			"second_score":	143933
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	178,
			"primary_score":	999673,
			"second_score":	143932
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	179,
			"primary_score":	999673,
			"second_score":	143931
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	181,
			"primary_score":	999673,
			"second_score":	143822
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	182,
			"primary_score":	999673,
			"second_score":	143821
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	183,
			"primary_score":	999673,
			"second_score":	143820
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	184,
			"primary_score":	999673,
			"second_score":	143818
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	200,
			"primary_score":	999673,
			"second_score":	134764
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	201,
			"primary_score":	999673,
			"second_score":	134763
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	202,
			"primary_score":	999673,
			"second_score":	134762
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	203,
			"primary_score":	999673,
			"second_score":	134761
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	204,
			"primary_score":	999673,
			"second_score":	134760
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	205,
			"primary_score":	999673,
			"second_score":	134759
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	207,
			"primary_score":	999673,
			"second_score":	134758
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	208,
			"primary_score":	999673,
			"second_score":	134734
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	210,
			"primary_score":	999673,
			"second_score":	134733
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	211,
			"primary_score":	999673,
			"second_score":	134732
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	212,
			"primary_score":	999673,
			"second_score":	134731
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	213,
			"primary_score":	999673,
			"second_score":	134730
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	233,
			"primary_score":	999673,
			"second_score":	134728
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	242,
			"primary_score":	999673,
			"second_score":	134597
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	244,
			"primary_score":	999673,
			"second_score":	134521
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	245,
			"primary_score":	999673,
			"second_score":	134520
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	253,
			"primary_score":	999673,
			"second_score":	143815
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	254,
			"primary_score":	999673,
			"second_score":	143814
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	257,
			"primary_score":	999673,
			"second_score":	143813
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	263,
			"primary_score":	999673,
			"second_score":	143812
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	267,
			"primary_score":	999673,
			"second_score":	143768
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	268,
			"primary_score":	999673,
			"second_score":	143656
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	269,
			"primary_score":	999673,
			"second_score":	143655
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	270,
			"primary_score":	999673,
			"second_score":	143650
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	271,
			"primary_score":	999673,
			"second_score":	143649
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	272,
			"primary_score":	999673,
			"second_score":	143648
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	276,
			"primary_score":	999673,
			"second_score":	143647
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	277,
			"primary_score":	999673,
			"second_score":	143646
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	279,
			"primary_score":	999673,
			"second_score":	143645
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	303,
			"primary_score":	999673,
			"second_score":	143644
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	304,
			"primary_score":	999673,
			"second_score":	143643
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	310,
			"primary_score":	999673,
			"second_score":	143639
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	312,
			"primary_score":	999673,
			"second_score":	143638
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	313,
			"primary_score":	999673,
			"second_score":	143637
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	318,
			"primary_score":	999673,
			"second_score":	143636
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	320,
			"primary_score":	999673,
			"second_score":	143152
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	321,
			"primary_score":	999673,
			"second_score":	143151
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	322,
			"primary_score":	999673,
			"second_score":	143150
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	327,
			"primary_score":	999673,
			"second_score":	143149
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	328,
			"primary_score":	999673,
			"second_score":	143148
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	335,
			"primary_score":	999673,
			"second_score":	144057
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	336,
			"primary_score":	999673,
			"second_score":	144056
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	337,
			"primary_score":	999673,
			"second_score":	143952
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	338,
			"primary_score":	999673,
			"second_score":	143951
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	339,
			"primary_score":	999673,
			"second_score":	143950
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	340,
			"primary_score":	999673,
			"second_score":	143949
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	341,
			"primary_score":	999673,
			"second_score":	143948
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	342,
			"primary_score":	999673,
			"second_score":	143947
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	344,
			"primary_score":	999673,
			"second_score":	143946
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	345,
			"primary_score":	999673,
			"second_score":	143945
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	346,
			"primary_score":	999673,
			"second_score":	143944
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	347,
			"primary_score":	999673,
			"second_score":	143943
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	348,
			"primary_score":	999673,
			"second_score":	143941
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	350,
			"primary_score":	999673,
			"second_score":	143939
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	352,
			"primary_score":	999673,
			"second_score":	143817
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	354,
			"primary_score":	999673,
			"second_score":	143816
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	363,
			"primary_score":	999673,
			"second_score":	143147
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	364,
			"primary_score":	999673,
			"second_score":	142900
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	365,
			"primary_score":	999673,
			"second_score":	142899
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	366,
			"primary_score":	999673,
			"second_score":	142898
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	367,
			"primary_score":	999673,
			"second_score":	134983
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	368,
			"primary_score":	999673,
			"second_score":	134951
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	369,
			"primary_score":	999673,
			"second_score":	134950
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	372,
			"primary_score":	999673,
			"second_score":	134949
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	375,
			"primary_score":	999673,
			"second_score":	134948
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	376,
			"primary_score":	999673,
			"second_score":	134947
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	377,
			"primary_score":	999673,
			"second_score":	134946
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	378,
			"primary_score":	999673,
			"second_score":	134945
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	379,
			"primary_score":	999673,
			"second_score":	134771
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	385,
			"primary_score":	999673,
			"second_score":	134765
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	386,
			"primary_score":	999673,
			"second_score":	134727
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	434,
			"primary_score":	999673,
			"second_score":	121636
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	436,
			"primary_score":	999673,
			"second_score":	121489
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	438,
			"primary_score":	999673,
			"second_score":	121488
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	439,
			"primary_score":	999673,
			"second_score":	121487
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	457,
			"primary_score":	999673,
			"second_score":	121486
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	460,
			"primary_score":	999673,
			"second_score":	121481
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	461,
			"primary_score":	999673,
			"second_score":	121247
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	462,
			"primary_score":	999673,
			"second_score":	121246
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	463,
			"primary_score":	999673,
			"second_score":	121245
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	493,
			"primary_score":	999673,
			"second_score":	121990
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	494,
			"primary_score":	999673,
			"second_score":	121989
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	495,
			"primary_score":	999673,
			"second_score":	121885
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	496,
			"primary_score":	999673,
			"second_score":	121884
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	497,
			"primary_score":	999673,
			"second_score":	121883
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	498,
			"primary_score":	999673,
			"second_score":	121882
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	499,
			"primary_score":	999673,
			"second_score":	121881
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	501,
			"primary_score":	999673,
			"second_score":	121880
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	506,
			"primary_score":	999673,
			"second_score":	121879
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	508,
			"primary_score":	999673,
			"second_score":	121878
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	509,
			"primary_score":	999673,
			"second_score":	121877
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	510,
			"primary_score":	999673,
			"second_score":	121762
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	511,
			"primary_score":	999673,
			"second_score":	121760
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	513,
			"primary_score":	999673,
			"second_score":	121759
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	514,
			"primary_score":	999673,
			"second_score":	121637
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	518,
			"primary_score":	999673,
			"second_score":	121244
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	520,
			"primary_score":	999673,
			"second_score":	121243
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	521,
			"primary_score":	999673,
			"second_score":	121242
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	522,
			"primary_score":	999673,
			"second_score":	120995
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	523,
			"primary_score":	999673,
			"second_score":	120994
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	524,
			"primary_score":	999673,
			"second_score":	120993
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	525,
			"primary_score":	999673,
			"second_score":	120992
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	538,
			"primary_score":	999673,
			"second_score":	120049
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	543,
			"primary_score":	999673,
			"second_score":	120048
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	544,
			"primary_score":	999673,
			"second_score":	120015
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	545,
			"primary_score":	999673,
			"second_score":	120014
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	546,
			"primary_score":	999673,
			"second_score":	119919
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	547,
			"primary_score":	999673,
			"second_score":	119913
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	550,
			"primary_score":	999673,
			"second_score":	119912
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	551,
			"primary_score":	999673,
			"second_score":	119874
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	552,
			"primary_score":	999673,
			"second_score":	119848
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	553,
			"primary_score":	999673,
			"second_score":	119847
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	739,
			"primary_score":	999673,
			"second_score":	137405
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	740,
			"primary_score":	999673,
			"second_score":	137404
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	742,
			"primary_score":	999673,
			"second_score":	137403
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	745,
			"primary_score":	999673,
			"second_score":	137287
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	746,
			"primary_score":	999673,
			"second_score":	137286
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	747,
			"primary_score":	999673,
			"second_score":	137285
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	748,
			"primary_score":	999673,
			"second_score":	137284
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	749,
			"primary_score":	999673,
			"second_score":	129831
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	750,
			"primary_score":	999673,
			"second_score":	129830
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	755,
			"primary_score":	999673,
			"second_score":	129829
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	758,
			"primary_score":	999673,
			"second_score":	129828
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	759,
			"primary_score":	999673,
			"second_score":	129827
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	830,
			"primary_score":	999673,
			"second_score":	137283
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	833,
			"primary_score":	999673,
			"second_score":	137282
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	834,
			"primary_score":	999673,
			"second_score":	132551
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	836,
			"primary_score":	999673,
			"second_score":	137281
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	838,
			"primary_score":	999673,
			"second_score":	137280
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	853,
			"primary_score":	999673,
			"second_score":	135069
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	856,
			"primary_score":	999673,
			"second_score":	135068
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	861,
			"primary_score":	999673,
			"second_score":	135067
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	862,
			"primary_score":	999673,
			"second_score":	135066
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	863,
			"primary_score":	999673,
			"second_score":	135065
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	864,
			"primary_score":	999673,
			"second_score":	135259
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	865,
			"primary_score":	999673,
			"second_score":	135258
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	866,
			"primary_score":	999673,
			"second_score":	135257
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	882,
			"primary_score":	999673,
			"second_score":	135064
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	889,
			"primary_score":	999673,
			"second_score":	135063
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	890,
			"primary_score":	999673,
			"second_score":	135062
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	903,
			"primary_score":	999673,
			"second_score":	135061
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	938,
			"primary_score":	999673,
			"second_score":	135060
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	939,
			"primary_score":	999673,
			"second_score":	135059
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	940,
			"primary_score":	999673,
			"second_score":	135056
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	941,
			"primary_score":	999673,
			"second_score":	135055
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	942,
			"primary_score":	999673,
			"second_score":	142822
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	943,
			"primary_score":	999673,
			"second_score":	142821
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	944,
			"primary_score":	999673,
			"second_score":	142820
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	945,
			"primary_score":	999673,
			"second_score":	142819
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	946,
			"primary_score":	999673,
			"second_score":	142818
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	947,
			"primary_score":	999673,
			"second_score":	142817
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	957,
			"primary_score":	999673,
			"second_score":	135051
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	959,
			"primary_score":	999673,
			"second_score":	135050
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	960,
			"primary_score":	999673,
			"second_score":	135049
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	961,
			"primary_score":	999673,
			"second_score":	135048
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1026,
			"primary_score":	999673,
			"second_score":	135053
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1027,
			"primary_score":	999673,
			"second_score":	135052
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1030,
			"primary_score":	999673,
			"second_score":	142815
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1031,
			"primary_score":	999673,
			"second_score":	142814
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1032,
			"primary_score":	999673,
			"second_score":	142813
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1035,
			"primary_score":	999673,
			"second_score":	142812
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1036,
			"primary_score":	999673,
			"second_score":	142811
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1335,
			"primary_score":	999673,
			"second_score":	142809
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1336,
			"primary_score":	999673,
			"second_score":	142808
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1337,
			"primary_score":	999673,
			"second_score":	142807
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1338,
			"primary_score":	999673,
			"second_score":	142806
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1340,
			"primary_score":	999673,
			"second_score":	142805
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1341,
			"primary_score":	999673,
			"second_score":	142804
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1342,
			"primary_score":	999673,
			"second_score":	142803
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1343,
			"primary_score":	999673,
			"second_score":	142802
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1345,
			"primary_score":	999673,
			"second_score":	142801
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1346,
			"primary_score":	999673,
			"second_score":	142800
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1347,
			"primary_score":	999694,
			"second_score":	140658
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1348,
			"primary_score":	999694,
			"second_score":	140657
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1350,
			"primary_score":	999673,
			"second_score":	142799
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1351,
			"primary_score":	999673,
			"second_score":	142798
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1353,
			"primary_score":	999673,
			"second_score":	142797
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1355,
			"primary_score":	999673,
			"second_score":	142796
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1356,
			"primary_score":	999673,
			"second_score":	142795
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1358,
			"primary_score":	999673,
			"second_score":	142794
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1360,
			"primary_score":	999673,
			"second_score":	142793
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1361,
			"primary_score":	999673,
			"second_score":	142792
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1362,
			"primary_score":	999673,
			"second_score":	142791
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1363,
			"primary_score":	999673,
			"second_score":	142790
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1364,
			"primary_score":	999692,
			"second_score":	140646
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1365,
			"primary_score":	999673,
			"second_score":	142786
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1366,
			"primary_score":	999673,
			"second_score":	142785
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2089,
			"primary_score":	999673,
			"second_score":	135256
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2123,
			"primary_score":	999673,
			"second_score":	135255
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2124,
			"primary_score":	999673,
			"second_score":	135254
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2125,
			"primary_score":	999673,
			"second_score":	135251
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2126,
			"primary_score":	999673,
			"second_score":	135250
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2127,
			"primary_score":	999673,
			"second_score":	135249
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2245,
			"primary_score":	999673,
			"second_score":	142766
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2246,
			"primary_score":	999673,
			"second_score":	142765
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2247,
			"primary_score":	999673,
			"second_score":	142764
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2264,
			"primary_score":	999673,
			"second_score":	137267
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2266,
			"primary_score":	999673,
			"second_score":	137266
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2267,
			"primary_score":	999673,
			"second_score":	137155
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2268,
			"primary_score":	999673,
			"second_score":	137153
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2269,
			"primary_score":	999673,
			"second_score":	137152
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2296,
			"primary_score":	999673,
			"second_score":	132106
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2297,
			"primary_score":	999673,
			"second_score":	132105
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2307,
			"primary_score":	999673,
			"second_score":	132104
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2311,
			"primary_score":	999673,
			"second_score":	132103
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2312,
			"primary_score":	999673,
			"second_score":	132102
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2340,
			"primary_score":	999673,
			"second_score":	135114
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2341,
			"primary_score":	999673,
			"second_score":	135113
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2342,
			"primary_score":	999673,
			"second_score":	135112
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2417,
			"primary_score":	999673,
			"second_score":	130569
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2418,
			"primary_score":	999673,
			"second_score":	130568
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2423,
			"primary_score":	999673,
			"second_score":	130567
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2424,
			"primary_score":	999673,
			"second_score":	130566
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2425,
			"primary_score":	999673,
			"second_score":	130565
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2455,
			"primary_score":	999673,
			"second_score":	137003
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2456,
			"primary_score":	999673,
			"second_score":	137002
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2461,
			"primary_score":	999673,
			"second_score":	137001
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2462,
			"primary_score":	999673,
			"second_score":	137000
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2471,
			"primary_score":	999673,
			"second_score":	137338
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2472,
			"primary_score":	999673,
			"second_score":	137337
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2473,
			"primary_score":	999673,
			"second_score":	137723
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2474,
			"primary_score":	999673,
			"second_score":	137722
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2477,
			"primary_score":	999673,
			"second_score":	137336
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2478,
			"primary_score":	999673,
			"second_score":	137335
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2496,
			"primary_score":	999673,
			"second_score":	135570
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2498,
			"primary_score":	999673,
			"second_score":	135569
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2499,
			"primary_score":	999673,
			"second_score":	135568
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2504,
			"primary_score":	999673,
			"second_score":	135298
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2505,
			"primary_score":	999673,
			"second_score":	135297
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2506,
			"primary_score":	999673,
			"second_score":	135296
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2509,
			"primary_score":	999673,
			"second_score":	135281
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2511,
			"primary_score":	999673,
			"second_score":	135280
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2512,
			"primary_score":	999673,
			"second_score":	135279
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2513,
			"primary_score":	999673,
			"second_score":	135278
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2514,
			"primary_score":	999673,
			"second_score":	135277
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2515,
			"primary_score":	999673,
			"second_score":	135276
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2516,
			"primary_score":	999673,
			"second_score":	135267
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2521,
			"primary_score":	999673,
			"second_score":	127645
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2522,
			"primary_score":	999673,
			"second_score":	127644
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2523,
			"primary_score":	999673,
			"second_score":	127643
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2552,
			"primary_score":	999716,
			"second_score":	137791
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2553,
			"primary_score":	999716,
			"second_score":	137790
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2554,
			"primary_score":	999716,
			"second_score":	137789
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2558,
			"primary_score":	999673,
			"second_score":	137079
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2559,
			"primary_score":	999673,
			"second_score":	137078
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2560,
			"primary_score":	999673,
			"second_score":	137077
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2561,
			"primary_score":	999673,
			"second_score":	137076
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2562,
			"primary_score":	999673,
			"second_score":	137075
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2567,
			"primary_score":	999673,
			"second_score":	137074
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2583,
			"primary_score":	999673,
			"second_score":	137622
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2584,
			"primary_score":	999673,
			"second_score":	132178
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2589,
			"primary_score":	999673,
			"second_score":	132177
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2590,
			"primary_score":	999673,
			"second_score":	132176
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2591,
			"primary_score":	999673,
			"second_score":	132175
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2594,
			"primary_score":	999673,
			"second_score":	137621
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2595,
			"primary_score":	999673,
			"second_score":	134862
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2596,
			"primary_score":	999673,
			"second_score":	134861
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2599,
			"primary_score":	999912,
			"second_score":	137620
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2600,
			"primary_score":	999989,
			"second_score":	137618
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2749,
			"primary_score":	999673,
			"second_score":	135572
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2750,
			"primary_score":	999673,
			"second_score":	135571
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2753,
			"primary_score":	999673,
			"second_score":	135248
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2754,
			"primary_score":	999673,
			"second_score":	135247
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2755,
			"primary_score":	999673,
			"second_score":	130777
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2844,
			"primary_score":	999673,
			"second_score":	139331
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2845,
			"primary_score":	999673,
			"second_score":	139330
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2889,
			"primary_score":	999673,
			"second_score":	131514
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2890,
			"primary_score":	999673,
			"second_score":	131513
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2892,
			"primary_score":	999673,
			"second_score":	131512
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2894,
			"primary_score":	999673,
			"second_score":	131511
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2895,
			"primary_score":	999673,
			"second_score":	131510
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2896,
			"primary_score":	999673,
			"second_score":	131509
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2897,
			"primary_score":	999673,
			"second_score":	131508
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2899,
			"primary_score":	999673,
			"second_score":	131507
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2900,
			"primary_score":	999673,
			"second_score":	131443
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2901,
			"primary_score":	999673,
			"second_score":	131442
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2902,
			"primary_score":	999673,
			"second_score":	131441
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2903,
			"primary_score":	999673,
			"second_score":	131440
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2905,
			"primary_score":	999673,
			"second_score":	131439
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2906,
			"primary_score":	999673,
			"second_score":	131444
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2919,
			"primary_score":	999673,
			"second_score":	131438
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2920,
			"primary_score":	999673,
			"second_score":	131328
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2921,
			"primary_score":	999673,
			"second_score":	131327
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2924,
			"primary_score":	999673,
			"second_score":	131326
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2925,
			"primary_score":	999673,
			"second_score":	131325
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2926,
			"primary_score":	999673,
			"second_score":	131324
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2927,
			"primary_score":	999673,
			"second_score":	131243
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2942,
			"primary_score":	999673,
			"second_score":	131242
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2945,
			"primary_score":	999673,
			"second_score":	131241
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2948,
			"primary_score":	999673,
			"second_score":	131240
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2950,
			"primary_score":	999673,
			"second_score":	131239
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2961,
			"primary_score":	999673,
			"second_score":	131238
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2966,
			"primary_score":	999673,
			"second_score":	137414
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2967,
			"primary_score":	999673,
			"second_score":	137413
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2969,
			"primary_score":	999673,
			"second_score":	137412
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2971,
			"primary_score":	999673,
			"second_score":	137411
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2972,
			"primary_score":	999673,
			"second_score":	137410
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2974,
			"primary_score":	999673,
			"second_score":	137409
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2975,
			"primary_score":	999673,
			"second_score":	137407
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2978,
			"primary_score":	999673,
			"second_score":	137406
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2979,
			"primary_score":	999673,
			"second_score":	137279
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2992,
			"primary_score":	999673,
			"second_score":	129957
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2995,
			"primary_score":	999673,
			"second_score":	129956
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3025,
			"primary_score":	999673,
			"second_score":	120119
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3026,
			"primary_score":	999673,
			"second_score":	120118
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3027,
			"primary_score":	999673,
			"second_score":	120117
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3029,
			"primary_score":	999673,
			"second_score":	120116
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3030,
			"primary_score":	999673,
			"second_score":	120115
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3031,
			"primary_score":	999673,
			"second_score":	120114
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3040,
			"primary_score":	999673,
			"second_score":	137275
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3041,
			"primary_score":	999673,
			"second_score":	137274
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3042,
			"primary_score":	999673,
			"second_score":	137271
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3043,
			"primary_score":	999673,
			"second_score":	137270
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3045,
			"primary_score":	999673,
			"second_score":	137269
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3046,
			"primary_score":	999673,
			"second_score":	137276
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3048,
			"primary_score":	999673,
			"second_score":	137268
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3101,
			"primary_score":	999673,
			"second_score":	132163
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3102,
			"primary_score":	999673,
			"second_score":	132162
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3103,
			"primary_score":	999673,
			"second_score":	132161
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3104,
			"primary_score":	999673,
			"second_score":	132160
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3107,
			"primary_score":	999673,
			"second_score":	132159
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3179,
			"primary_score":	999673,
			"second_score":	135245
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3180,
			"primary_score":	999682,
			"second_score":	135243
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3181,
			"primary_score":	999673,
			"second_score":	135085
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3182,
			"primary_score":	999673,
			"second_score":	135084
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3184,
			"primary_score":	999673,
			"second_score":	135240
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3186,
			"primary_score":	999673,
			"second_score":	135239
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3187,
			"primary_score":	999673,
			"second_score":	135238
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3188,
			"primary_score":	999673,
			"second_score":	135237
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3189,
			"primary_score":	999673,
			"second_score":	135236
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3190,
			"primary_score":	999673,
			"second_score":	135235
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3191,
			"primary_score":	999673,
			"second_score":	135234
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3196,
			"primary_score":	999680,
			"second_score":	135242
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3197,
			"primary_score":	999680,
			"second_score":	135241
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4396,
			"primary_score":	999673,
			"second_score":	132174
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4429,
			"primary_score":	999673,
			"second_score":	132173
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4430,
			"primary_score":	999673,
			"second_score":	132172
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4435,
			"primary_score":	999673,
			"second_score":	132171
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4439,
			"primary_score":	999673,
			"second_score":	132170
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4440,
			"primary_score":	999673,
			"second_score":	132169
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4441,
			"primary_score":	999673,
			"second_score":	132168
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4517,
			"primary_score":	999673,
			"second_score":	132167
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4518,
			"primary_score":	999673,
			"second_score":	132166
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4519,
			"primary_score":	999673,
			"second_score":	132165
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4520,
			"primary_score":	999673,
			"second_score":	132164
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4898,
			"primary_score":	999716,
			"second_score":	137787
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4899,
			"primary_score":	999716,
			"second_score":	137786
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4900,
			"primary_score":	999716,
			"second_score":	137785
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4901,
			"primary_score":	999716,
			"second_score":	137784
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4903,
			"primary_score":	999716,
			"second_score":	137783
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4904,
			"primary_score":	999716,
			"second_score":	137782
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4905,
			"primary_score":	999716,
			"second_score":	137781
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4993,
			"primary_score":	999704,
			"second_score":	135291
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4994,
			"primary_score":	999704,
			"second_score":	135290
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4995,
			"primary_score":	999704,
			"second_score":	135287
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4996,
			"primary_score":	999704,
			"second_score":	135286
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4998,
			"primary_score":	999673,
			"second_score":	135285
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4999,
			"primary_score":	999705,
			"second_score":	135294
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5000,
			"primary_score":	999706,
			"second_score":	135293
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5003,
			"primary_score":	999673,
			"second_score":	135284
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5004,
			"primary_score":	999673,
			"second_score":	135283
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5005,
			"primary_score":	999673,
			"second_score":	135282
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5298,
			"primary_score":	999673,
			"second_score":	130564
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5299,
			"primary_score":	999673,
			"second_score":	130563
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5300,
			"primary_score":	999673,
			"second_score":	130562
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5301,
			"primary_score":	999673,
			"second_score":	130561
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5834,
			"primary_score":	999673,
			"second_score":	135110
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5835,
			"primary_score":	999673,
			"second_score":	135109
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5839,
			"primary_score":	999673,
			"second_score":	135108
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5840,
			"primary_score":	999673,
			"second_score":	135107
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6154,
			"primary_score":	999673,
			"second_score":	132100
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6155,
			"primary_score":	999673,
			"second_score":	132099
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6156,
			"primary_score":	999673,
			"second_score":	132098
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6157,
			"primary_score":	999673,
			"second_score":	132097
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6159,
			"primary_score":	999673,
			"second_score":	132096
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6160,
			"primary_score":	999673,
			"second_score":	132095
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6161,
			"primary_score":	999673,
			"second_score":	132094
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6162,
			"primary_score":	999673,
			"second_score":	132093
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6164,
			"primary_score":	999673,
			"second_score":	132092
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6165,
			"primary_score":	999673,
			"second_score":	132091
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6166,
			"primary_score":	999673,
			"second_score":	132090
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6167,
			"primary_score":	999673,
			"second_score":	132089
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6169,
			"primary_score":	999673,
			"second_score":	132088
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6170,
			"primary_score":	999673,
			"second_score":	132087
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6171,
			"primary_score":	999673,
			"second_score":	132086
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6172,
			"primary_score":	999673,
			"second_score":	132085
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6174,
			"primary_score":	999673,
			"second_score":	132084
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6175,
			"primary_score":	999673,
			"second_score":	132083
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6176,
			"primary_score":	999673,
			"second_score":	132082
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6177,
			"primary_score":	999673,
			"second_score":	132081
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6179,
			"primary_score":	999673,
			"second_score":	132080
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6180,
			"primary_score":	999673,
			"second_score":	132079
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6181,
			"primary_score":	999673,
			"second_score":	132078
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6182,
			"primary_score":	999673,
			"second_score":	132077
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6184,
			"primary_score":	999673,
			"second_score":	132076
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6185,
			"primary_score":	999673,
			"second_score":	132075
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6186,
			"primary_score":	999673,
			"second_score":	132074
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6391,
			"primary_score":	999673,
			"second_score":	142763
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6392,
			"primary_score":	999673,
			"second_score":	142762
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6393,
			"primary_score":	999673,
			"second_score":	142761
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6799,
			"primary_score":	999673,
			"second_score":	142759
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6800,
			"primary_score":	999673,
			"second_score":	142758
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6801,
			"primary_score":	999673,
			"second_score":	142757
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6802,
			"primary_score":	999673,
			"second_score":	142756
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6804,
			"primary_score":	999673,
			"second_score":	142755
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6805,
			"primary_score":	999673,
			"second_score":	142754
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6808,
			"primary_score":	999673,
			"second_score":	142753
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6809,
			"primary_score":	999673,
			"second_score":	142752
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6811,
			"primary_score":	999673,
			"second_score":	142751
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6812,
			"primary_score":	999673,
			"second_score":	142750
		}, {
			"file":	"Zend/zend_list.c",
			"line":	37,
			"primary_score":	999673,
			"second_score":	147978
		}, {
			"file":	"Zend/zend_list.c",
			"line":	38,
			"primary_score":	999673,
			"second_score":	147977
		}, {
			"file":	"Zend/zend_list.c",
			"line":	39,
			"primary_score":	999673,
			"second_score":	147976
		}, {
			"file":	"Zend/zend_list.c",
			"line":	41,
			"primary_score":	999673,
			"second_score":	147975
		}, {
			"file":	"Zend/zend_list.c",
			"line":	42,
			"primary_score":	999673,
			"second_score":	147974
		}, {
			"file":	"Zend/zend_list.c",
			"line":	43,
			"primary_score":	999673,
			"second_score":	147973
		}, {
			"file":	"Zend/zend_list.c",
			"line":	45,
			"primary_score":	999673,
			"second_score":	147972
		}, {
			"file":	"Zend/zend_list.c",
			"line":	47,
			"primary_score":	999673,
			"second_score":	147969
		}, {
			"file":	"Zend/zend_list.c",
			"line":	48,
			"primary_score":	999673,
			"second_score":	147802
		}, {
			"file":	"Zend/zend_list.c",
			"line":	53,
			"primary_score":	999673,
			"second_score":	110208
		}, {
			"file":	"Zend/zend_list.c",
			"line":	55,
			"primary_score":	999673,
			"second_score":	110207
		}, {
			"file":	"Zend/zend_list.c",
			"line":	57,
			"primary_score":	999673,
			"second_score":	110197
		}, {
			"file":	"Zend/zend_list.c",
			"line":	58,
			"primary_score":	999673,
			"second_score":	110196
		}, {
			"file":	"Zend/zend_list.c",
			"line":	97,
			"primary_score":	999673,
			"second_score":	147980
		}, {
			"file":	"Zend/zend_list.c",
			"line":	99,
			"primary_score":	999673,
			"second_score":	147979
		}, {
			"file":	"Zend/zend_list.c",
			"line":	101,
			"primary_score":	999673,
			"second_score":	147801
		}, {
			"file":	"Zend/zend_list.c",
			"line":	106,
			"primary_score":	999673,
			"second_score":	147800
		}, {
			"file":	"Zend/zend_list.c",
			"line":	171,
			"primary_score":	999673,
			"second_score":	110174
		}, {
			"file":	"Zend/zend_list.c",
			"line":	172,
			"primary_score":	999673,
			"second_score":	110173
		}, {
			"file":	"Zend/zend_list.c",
			"line":	173,
			"primary_score":	999673,
			"second_score":	110172
		}, {
			"file":	"Zend/zend_list.c",
			"line":	175,
			"primary_score":	999673,
			"second_score":	110171
		}, {
			"file":	"Zend/zend_list.c",
			"line":	176,
			"primary_score":	999673,
			"second_score":	110161
		}, {
			"file":	"Zend/zend_list.c",
			"line":	184,
			"primary_score":	999673,
			"second_score":	110160
		}, {
			"file":	"Zend/zend_list.c",
			"line":	186,
			"primary_score":	999673,
			"second_score":	110052
		}, {
			"file":	"Zend/zend_list.c",
			"line":	223,
			"primary_score":	999673,
			"second_score":	191568
		}, {
			"file":	"Zend/zend_list.c",
			"line":	224,
			"primary_score":	999673,
			"second_score":	191431
		}, {
			"file":	"Zend/zend_list.c",
			"line":	225,
			"primary_score":	999673,
			"second_score":	191430
		}, {
			"file":	"Zend/zend_list.c",
			"line":	240,
			"primary_score":	999673,
			"second_score":	108765
		}, {
			"file":	"Zend/zend_list.c",
			"line":	348,
			"primary_score":	999673,
			"second_score":	6365
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	28,
			"primary_score":	999673,
			"second_score":	164005
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	29,
			"primary_score":	999673,
			"second_score":	164004
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	30,
			"primary_score":	999673,
			"second_score":	164003
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	31,
			"primary_score":	999673,
			"second_score":	164002
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	32,
			"primary_score":	999673,
			"second_score":	164001
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	33,
			"primary_score":	999673,
			"second_score":	164000
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	39,
			"primary_score":	999673,
			"second_score":	143767
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	41,
			"primary_score":	999673,
			"second_score":	143663
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	42,
			"primary_score":	999673,
			"second_score":	143662
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	43,
			"primary_score":	999673,
			"second_score":	143661
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	46,
			"primary_score":	999673,
			"second_score":	143660
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	48,
			"primary_score":	999673,
			"second_score":	143659
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	49,
			"primary_score":	999673,
			"second_score":	143658
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	51,
			"primary_score":	999673,
			"second_score":	143657
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	93,
			"primary_score":	999673,
			"second_score":	134596
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	94,
			"primary_score":	999673,
			"second_score":	134595
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	96,
			"primary_score":	999673,
			"second_score":	134594
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	97,
			"primary_score":	999673,
			"second_score":	134593
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	98,
			"primary_score":	999673,
			"second_score":	134592
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	99,
			"primary_score":	999673,
			"second_score":	134589
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	100,
			"primary_score":	999673,
			"second_score":	134522
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	109,
			"primary_score":	999673,
			"second_score":	3146
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	111,
			"primary_score":	999673,
			"second_score":	3145
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	120,
			"primary_score":	999673,
			"second_score":	3144
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	126,
			"primary_score":	999673,
			"second_score":	119502
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	127,
			"primary_score":	999673,
			"second_score":	119498
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	190,
			"primary_score":	999673,
			"second_score":	13316
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	192,
			"primary_score":	999673,
			"second_score":	13315
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	233,
			"primary_score":	999673,
			"second_score":	119550
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	235,
			"primary_score":	999673,
			"second_score":	119549
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	275,
			"primary_score":	999673,
			"second_score":	143654
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	277,
			"primary_score":	999673,
			"second_score":	143653
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	278,
			"primary_score":	999673,
			"second_score":	143652
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	279,
			"primary_score":	999673,
			"second_score":	143651
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	32,
			"primary_score":	999673,
			"second_score":	190068
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	33,
			"primary_score":	999673,
			"second_score":	189970
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	34,
			"primary_score":	999673,
			"second_score":	189969
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	35,
			"primary_score":	999673,
			"second_score":	189968
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	36,
			"primary_score":	999673,
			"second_score":	189967
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	41,
			"primary_score":	999673,
			"second_score":	109827
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	42,
			"primary_score":	999673,
			"second_score":	109782
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	47,
			"primary_score":	999673,
			"second_score":	119336
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	49,
			"primary_score":	999673,
			"second_score":	119335
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	82,
			"primary_score":	999673,
			"second_score":	110769
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	84,
			"primary_score":	999673,
			"second_score":	110768
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	48,
			"primary_score":	999673,
			"second_score":	143034
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	53,
			"primary_score":	999673,
			"second_score":	143146
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	55,
			"primary_score":	999673,
			"second_score":	143145
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	56,
			"primary_score":	999673,
			"second_score":	143144
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	63,
			"primary_score":	999673,
			"second_score":	143143
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	64,
			"primary_score":	999673,
			"second_score":	143039
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	65,
			"primary_score":	999673,
			"second_score":	143038
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	66,
			"primary_score":	999673,
			"second_score":	143037
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	67,
			"primary_score":	999673,
			"second_score":	143036
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	68,
			"primary_score":	999673,
			"second_score":	143035
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	70,
			"primary_score":	999673,
			"second_score":	142929
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	71,
			"primary_score":	999673,
			"second_score":	142928
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	72,
			"primary_score":	999673,
			"second_score":	142927
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	74,
			"primary_score":	999673,
			"second_score":	142926
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	76,
			"primary_score":	999673,
			"second_score":	142925
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	77,
			"primary_score":	999673,
			"second_score":	142924
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	78,
			"primary_score":	999673,
			"second_score":	142922
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	79,
			"primary_score":	999673,
			"second_score":	142921
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	81,
			"primary_score":	999673,
			"second_score":	142920
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	82,
			"primary_score":	999673,
			"second_score":	142919
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	83,
			"primary_score":	999673,
			"second_score":	142918
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	85,
			"primary_score":	999673,
			"second_score":	142917
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	87,
			"primary_score":	999673,
			"second_score":	142916
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	88,
			"primary_score":	999673,
			"second_score":	142915
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	89,
			"primary_score":	999673,
			"second_score":	142914
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	90,
			"primary_score":	999673,
			"second_score":	142913
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	92,
			"primary_score":	999673,
			"second_score":	142912
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	93,
			"primary_score":	999673,
			"second_score":	142911
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	95,
			"primary_score":	999673,
			"second_score":	142910
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	96,
			"primary_score":	999673,
			"second_score":	142909
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	98,
			"primary_score":	999673,
			"second_score":	142908
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	100,
			"primary_score":	999673,
			"second_score":	142907
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	102,
			"primary_score":	999673,
			"second_score":	142906
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	104,
			"primary_score":	999673,
			"second_score":	142905
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	106,
			"primary_score":	999673,
			"second_score":	142904
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	108,
			"primary_score":	999673,
			"second_score":	142903
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	113,
			"primary_score":	999673,
			"second_score":	13421
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	125,
			"primary_score":	999673,
			"second_score":	13423
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	127,
			"primary_score":	999673,
			"second_score":	13422
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	139,
			"primary_score":	999673,
			"second_score":	111766
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	143,
			"primary_score":	999673,
			"second_score":	111765
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	157,
			"primary_score":	999673,
			"second_score":	110825
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	166,
			"primary_score":	999673,
			"second_score":	110824
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	175,
			"primary_score":	999673,
			"second_score":	110823
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	180,
			"primary_score":	999673,
			"second_score":	13870
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	182,
			"primary_score":	999673,
			"second_score":	13869
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	185,
			"primary_score":	999673,
			"second_score":	13868
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	203,
			"primary_score":	999673,
			"second_score":	13860
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	204,
			"primary_score":	999673,
			"second_score":	13852
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	205,
			"primary_score":	999673,
			"second_score":	13844
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	206,
			"primary_score":	999673,
			"second_score":	13843
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	207,
			"primary_score":	999673,
			"second_score":	13415
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	208,
			"primary_score":	999673,
			"second_score":	13407
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	209,
			"primary_score":	999673,
			"second_score":	14952
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	211,
			"primary_score":	999673,
			"second_score":	13406
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	214,
			"primary_score":	999673,
			"second_score":	13405
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	215,
			"primary_score":	999673,
			"second_score":	13404
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	226,
			"primary_score":	999673,
			"second_score":	119981
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	227,
			"primary_score":	999673,
			"second_score":	119980
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	228,
			"primary_score":	999673,
			"second_score":	119979
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	230,
			"primary_score":	999673,
			"second_score":	119978
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	235,
			"primary_score":	999673,
			"second_score":	119977
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	239,
			"primary_score":	999673,
			"second_score":	119976
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	241,
			"primary_score":	999673,
			"second_score":	119957
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	250,
			"primary_score":	999673,
			"second_score":	119956
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	251,
			"primary_score":	999673,
			"second_score":	119607
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	255,
			"primary_score":	999673,
			"second_score":	119606
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	257,
			"primary_score":	999673,
			"second_score":	119603
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	263,
			"primary_score":	999673,
			"second_score":	119602
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	265,
			"primary_score":	999673,
			"second_score":	119601
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	267,
			"primary_score":	999673,
			"second_score":	119556
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	270,
			"primary_score":	999673,
			"second_score":	119555
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	273,
			"primary_score":	999673,
			"second_score":	119554
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	276,
			"primary_score":	999673,
			"second_score":	119553
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	279,
			"primary_score":	999673,
			"second_score":	119552
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	280,
			"primary_score":	999673,
			"second_score":	119551
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	282,
			"primary_score":	999673,
			"second_score":	119548
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	295,
			"primary_score":	999673,
			"second_score":	134960
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	296,
			"primary_score":	999673,
			"second_score":	134959
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	297,
			"primary_score":	999673,
			"second_score":	134958
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	302,
			"primary_score":	999673,
			"second_score":	134965
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	303,
			"primary_score":	999673,
			"second_score":	134964
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	305,
			"primary_score":	999673,
			"second_score":	134963
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	316,
			"primary_score":	999673,
			"second_score":	134962
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	318,
			"primary_score":	999673,
			"second_score":	134961
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	320,
			"primary_score":	999673,
			"second_score":	134957
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	325,
			"primary_score":	999673,
			"second_score":	134968
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	367,
			"primary_score":	999673,
			"second_score":	134944
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	369,
			"primary_score":	999673,
			"second_score":	134943
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	372,
			"primary_score":	999673,
			"second_score":	134942
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	375,
			"primary_score":	999673,
			"second_score":	134941
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	376,
			"primary_score":	999673,
			"second_score":	134940
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	379,
			"primary_score":	999673,
			"second_score":	134937
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	380,
			"primary_score":	999673,
			"second_score":	134936
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	381,
			"primary_score":	999673,
			"second_score":	134877
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	384,
			"primary_score":	999673,
			"second_score":	134876
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	385,
			"primary_score":	999673,
			"second_score":	134875
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	386,
			"primary_score":	999673,
			"second_score":	134874
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	387,
			"primary_score":	999673,
			"second_score":	134785
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	388,
			"primary_score":	999673,
			"second_score":	134784
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	389,
			"primary_score":	999673,
			"second_score":	134782
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	391,
			"primary_score":	999673,
			"second_score":	134780
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	395,
			"primary_score":	999673,
			"second_score":	134779
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	403,
			"primary_score":	999673,
			"second_score":	126001
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	410,
			"primary_score":	999673,
			"second_score":	126074
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	412,
			"primary_score":	999673,
			"second_score":	134778
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	413,
			"primary_score":	999673,
			"second_score":	134774
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	416,
			"primary_score":	999673,
			"second_score":	134773
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	417,
			"primary_score":	999673,
			"second_score":	134772
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	359,
			"primary_score":	999673,
			"second_score":	195408
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	360,
			"primary_score":	999673,
			"second_score":	195407
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	362,
			"primary_score":	999673,
			"second_score":	195386
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	391,
			"primary_score":	999673,
			"second_score":	195385
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	543,
			"primary_score":	999673,
			"second_score":	120591
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	544,
			"primary_score":	999673,
			"second_score":	120590
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	546,
			"primary_score":	999673,
			"second_score":	120589
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	558,
			"primary_score":	999673,
			"second_score":	120588
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	559,
			"primary_score":	999673,
			"second_score":	120479
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	561,
			"primary_score":	999673,
			"second_score":	120478
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	608,
			"primary_score":	999673,
			"second_score":	120477
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1869,
			"primary_score":	999673,
			"second_score":	168021
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1870,
			"primary_score":	999673,
			"second_score":	168020
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1871,
			"primary_score":	999673,
			"second_score":	168019
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1873,
			"primary_score":	999673,
			"second_score":	168018
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1874,
			"primary_score":	999673,
			"second_score":	168010
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1876,
			"primary_score":	999673,
			"second_score":	168003
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1878,
			"primary_score":	999673,
			"second_score":	168002
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1884,
			"primary_score":	999673,
			"second_score":	168043
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	30,
			"primary_score":	999673,
			"second_score":	190176
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	31,
			"primary_score":	999673,
			"second_score":	190072
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	32,
			"primary_score":	999673,
			"second_score":	190071
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	33,
			"primary_score":	999673,
			"second_score":	190070
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	38,
			"primary_score":	999673,
			"second_score":	190177
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	79,
			"primary_score":	999673,
			"second_score":	109848
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	80,
			"primary_score":	999673,
			"second_score":	109847
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	87,
			"primary_score":	999673,
			"second_score":	111790
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	89,
			"primary_score":	999673,
			"second_score":	111789
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	97,
			"primary_score":	999673,
			"second_score":	111791
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	98,
			"primary_score":	999673,
			"second_score":	111788
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	99,
			"primary_score":	999673,
			"second_score":	111787
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	101,
			"primary_score":	999673,
			"second_score":	111786
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	105,
			"primary_score":	999673,
			"second_score":	111785
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	106,
			"primary_score":	999673,
			"second_score":	111784
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	61,
			"primary_score":	999673,
			"second_score":	123626
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	63,
			"primary_score":	999673,
			"second_score":	123625
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	64,
			"primary_score":	999673,
			"second_score":	123624
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	65,
			"primary_score":	999673,
			"second_score":	123623
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	66,
			"primary_score":	999673,
			"second_score":	123622
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	86,
			"primary_score":	999673,
			"second_score":	123599
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	87,
			"primary_score":	999673,
			"second_score":	123598
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	88,
			"primary_score":	999673,
			"second_score":	123597
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	89,
			"primary_score":	999673,
			"second_score":	123596
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	27,
			"primary_score":	999673,
			"second_score":	111827
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	28,
			"primary_score":	999673,
			"second_score":	111826
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	29,
			"primary_score":	999673,
			"second_score":	111804
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	32,
			"primary_score":	999673,
			"second_score":	111803
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	33,
			"primary_score":	999673,
			"second_score":	111802
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	54,
			"primary_score":	999673,
			"second_score":	135514
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	55,
			"primary_score":	999673,
			"second_score":	135513
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	56,
			"primary_score":	999673,
			"second_score":	135512
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	66,
			"primary_score":	999673,
			"second_score":	135504
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	67,
			"primary_score":	999673,
			"second_score":	135503
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	69,
			"primary_score":	999673,
			"second_score":	135484
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	87,
			"primary_score":	999673,
			"second_score":	134768
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	88,
			"primary_score":	999673,
			"second_score":	134767
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	97,
			"primary_score":	999673,
			"second_score":	109503
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	99,
			"primary_score":	999673,
			"second_score":	109502
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	100,
			"primary_score":	999673,
			"second_score":	109501
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	104,
			"primary_score":	999673,
			"second_score":	109500
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	107,
			"primary_score":	999673,
			"second_score":	109481
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	125,
			"primary_score":	999673,
			"second_score":	134972
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	127,
			"primary_score":	999673,
			"second_score":	134971
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	134,
			"primary_score":	999673,
			"second_score":	134970
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	46,
			"primary_score":	999673,
			"second_score":	134569
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	47,
			"primary_score":	999673,
			"second_score":	134568
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	67,
			"primary_score":	999673,
			"second_score":	134578
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	68,
			"primary_score":	999673,
			"second_score":	134577
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	74,
			"primary_score":	999673,
			"second_score":	134576
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	75,
			"primary_score":	999673,
			"second_score":	134575
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	76,
			"primary_score":	999673,
			"second_score":	134574
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	77,
			"primary_score":	999673,
			"second_score":	134573
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	78,
			"primary_score":	999673,
			"second_score":	134572
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	83,
			"primary_score":	999673,
			"second_score":	134579
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	84,
			"primary_score":	999673,
			"second_score":	134571
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	85,
			"primary_score":	999673,
			"second_score":	134570
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	90,
			"primary_score":	999673,
			"second_score":	143797
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	95,
			"primary_score":	999673,
			"second_score":	143799
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	97,
			"primary_score":	999673,
			"second_score":	143798
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	100,
			"primary_score":	999673,
			"second_score":	143796
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	103,
			"primary_score":	999673,
			"second_score":	143795
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	105,
			"primary_score":	999673,
			"second_score":	143793
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	109,
			"primary_score":	999673,
			"second_score":	143792
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	169,
			"primary_score":	999673,
			"second_score":	143811
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	170,
			"primary_score":	999673,
			"second_score":	143810
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	172,
			"primary_score":	999673,
			"second_score":	143809
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	178,
			"primary_score":	999673,
			"second_score":	143808
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	187,
			"primary_score":	999673,
			"second_score":	143807
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	188,
			"primary_score":	999673,
			"second_score":	143806
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	189,
			"primary_score":	999673,
			"second_score":	143805
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	190,
			"primary_score":	999673,
			"second_score":	143804
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	191,
			"primary_score":	999673,
			"second_score":	143803
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	192,
			"primary_score":	999673,
			"second_score":	143802
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	194,
			"primary_score":	999673,
			"second_score":	143801
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	208,
			"primary_score":	999673,
			"second_score":	143800
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	209,
			"primary_score":	999673,
			"second_score":	143791
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	213,
			"primary_score":	999673,
			"second_score":	143790
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	214,
			"primary_score":	999673,
			"second_score":	143789
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	216,
			"primary_score":	999673,
			"second_score":	143788
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	218,
			"primary_score":	999673,
			"second_score":	143787
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	222,
			"primary_score":	999673,
			"second_score":	143786
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	223,
			"primary_score":	999673,
			"second_score":	143785
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	224,
			"primary_score":	999673,
			"second_score":	143784
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	225,
			"primary_score":	999673,
			"second_score":	143783
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	227,
			"primary_score":	999673,
			"second_score":	143782
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	228,
			"primary_score":	999673,
			"second_score":	143781
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	229,
			"primary_score":	999673,
			"second_score":	143780
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	231,
			"primary_score":	999673,
			"second_score":	143779
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	232,
			"primary_score":	999673,
			"second_score":	143778
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	234,
			"primary_score":	999673,
			"second_score":	143777
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	276,
			"primary_score":	999673,
			"second_score":	143776
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	277,
			"primary_score":	999673,
			"second_score":	143775
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	278,
			"primary_score":	999673,
			"second_score":	143774
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	279,
			"primary_score":	999673,
			"second_score":	143773
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	280,
			"primary_score":	999673,
			"second_score":	143772
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	282,
			"primary_score":	999673,
			"second_score":	143771
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	283,
			"primary_score":	999673,
			"second_score":	143770
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	285,
			"primary_score":	999673,
			"second_score":	143769
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	290,
			"primary_score":	999673,
			"second_score":	134581
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	300,
			"primary_score":	999673,
			"second_score":	134580
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	302,
			"primary_score":	999673,
			"second_score":	134567
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	303,
			"primary_score":	999673,
			"second_score":	134566
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	310,
			"primary_score":	999673,
			"second_score":	134565
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	311,
			"primary_score":	999673,
			"second_score":	134564
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	312,
			"primary_score":	999673,
			"second_score":	134545
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	314,
			"primary_score":	999673,
			"second_score":	134544
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	323,
			"primary_score":	999673,
			"second_score":	134591
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	326,
			"primary_score":	999673,
			"second_score":	134590
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	459,
			"primary_score":	999673,
			"second_score":	6421
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	467,
			"primary_score":	999673,
			"second_score":	6367
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1379,
			"primary_score":	999673,
			"second_score":	6420
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1380,
			"primary_score":	999673,
			"second_score":	6419
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1382,
			"primary_score":	999673,
			"second_score":	6418
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1383,
			"primary_score":	999673,
			"second_score":	6417
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1384,
			"primary_score":	999673,
			"second_score":	6371
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1385,
			"primary_score":	999673,
			"second_score":	6370
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1389,
			"primary_score":	999673,
			"second_score":	6369
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1391,
			"primary_score":	999673,
			"second_score":	6368
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	32,
			"primary_score":	999673,
			"second_score":	110211
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	36,
			"primary_score":	999673,
			"second_score":	112103
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	37,
			"primary_score":	999673,
			"second_score":	112082
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	40,
			"primary_score":	999673,
			"second_score":	111928
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	42,
			"primary_score":	999673,
			"second_score":	111927
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	43,
			"primary_score":	999673,
			"second_score":	114240
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	44,
			"primary_score":	999673,
			"second_score":	112022
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	47,
			"primary_score":	999673,
			"second_score":	111926
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	57,
			"primary_score":	999673,
			"second_score":	110210
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	60,
			"primary_score":	999673,
			"second_score":	110209
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	62,
			"primary_score":	999673,
			"second_score":	110008
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	76,
			"primary_score":	999673,
			"second_score":	13886
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	80,
			"primary_score":	999673,
			"second_score":	17700
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	81,
			"primary_score":	999673,
			"second_score":	17699
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	106,
			"primary_score":	999673,
			"second_score":	134322
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	120,
			"primary_score":	999673,
			"second_score":	134321
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	121,
			"primary_score":	999673,
			"second_score":	134293
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	150,
			"primary_score":	999673,
			"second_score":	120049
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	32,
			"primary_score":	999673,
			"second_score":	110213
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	33,
			"primary_score":	999673,
			"second_score":	114594
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	35,
			"primary_score":	999673,
			"second_score":	110212
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	42,
			"primary_score":	999673,
			"second_score":	134324
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	43,
			"primary_score":	999673,
			"second_score":	119065
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	45,
			"primary_score":	999673,
			"second_score":	134323
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	44,
			"primary_score":	999673,
			"second_score":	134516
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	45,
			"primary_score":	999673,
			"second_score":	134515
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	46,
			"primary_score":	999673,
			"second_score":	134514
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	49,
			"primary_score":	999673,
			"second_score":	134513
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	53,
			"primary_score":	999673,
			"second_score":	134512
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	55,
			"primary_score":	999673,
			"second_score":	134511
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	62,
			"primary_score":	999673,
			"second_score":	134502
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	63,
			"primary_score":	999673,
			"second_score":	134501
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	64,
			"primary_score":	999673,
			"second_score":	134500
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	65,
			"primary_score":	999673,
			"second_score":	134499
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	66,
			"primary_score":	999673,
			"second_score":	134498
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	67,
			"primary_score":	999673,
			"second_score":	134497
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	68,
			"primary_score":	999673,
			"second_score":	134496
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	69,
			"primary_score":	999673,
			"second_score":	134495
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	70,
			"primary_score":	999673,
			"second_score":	134494
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	71,
			"primary_score":	999673,
			"second_score":	134493
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	72,
			"primary_score":	999673,
			"second_score":	134492
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	73,
			"primary_score":	999673,
			"second_score":	134491
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	74,
			"primary_score":	999673,
			"second_score":	134490
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	76,
			"primary_score":	999673,
			"second_score":	134489
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	79,
			"primary_score":	999673,
			"second_score":	134488
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	82,
			"primary_score":	999673,
			"second_score":	134487
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	94,
			"primary_score":	999673,
			"second_score":	134486
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	96,
			"primary_score":	999673,
			"second_score":	134485
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	97,
			"primary_score":	999673,
			"second_score":	134484
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	99,
			"primary_score":	999673,
			"second_score":	134483
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	100,
			"primary_score":	999673,
			"second_score":	120009
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	107,
			"primary_score":	999673,
			"second_score":	120008
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	108,
			"primary_score":	999673,
			"second_score":	119987
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	111,
			"primary_score":	999673,
			"second_score":	119986
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	131,
			"primary_score":	999673,
			"second_score":	120060
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	132,
			"primary_score":	999673,
			"second_score":	120059
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	150,
			"primary_score":	999673,
			"second_score":	119999
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	151,
			"primary_score":	999673,
			"second_score":	119998
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	153,
			"primary_score":	999673,
			"second_score":	119997
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	154,
			"primary_score":	999673,
			"second_score":	119996
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	155,
			"primary_score":	999673,
			"second_score":	119995
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	166,
			"primary_score":	999673,
			"second_score":	119994
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	168,
			"primary_score":	999673,
			"second_score":	119993
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	170,
			"primary_score":	999673,
			"second_score":	119989
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	251,
			"primary_score":	999673,
			"second_score":	119988
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	256,
			"primary_score":	999673,
			"second_score":	123607
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	257,
			"primary_score":	999673,
			"second_score":	123606
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	259,
			"primary_score":	999673,
			"second_score":	123605
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	271,
			"primary_score":	999673,
			"second_score":	123604
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	285,
			"primary_score":	999673,
			"second_score":	123603
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	296,
			"primary_score":	999673,
			"second_score":	123602
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	297,
			"primary_score":	999673,
			"second_score":	123592
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	299,
			"primary_score":	999673,
			"second_score":	123588
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	300,
			"primary_score":	999673,
			"second_score":	123587
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	301,
			"primary_score":	999673,
			"second_score":	123560
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	302,
			"primary_score":	999673,
			"second_score":	123559
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	304,
			"primary_score":	999673,
			"second_score":	123558
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	305,
			"primary_score":	999673,
			"second_score":	123557
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	306,
			"primary_score":	999673,
			"second_score":	123556
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	307,
			"primary_score":	999673,
			"second_score":	123555
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	309,
			"primary_score":	999673,
			"second_score":	123554
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	310,
			"primary_score":	999673,
			"second_score":	123553
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	311,
			"primary_score":	999673,
			"second_score":	123544
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	314,
			"primary_score":	999673,
			"second_score":	123543
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	316,
			"primary_score":	999673,
			"second_score":	123542
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	321,
			"primary_score":	999673,
			"second_score":	122196
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	322,
			"primary_score":	999690,
			"second_score":	120211
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	383,
			"primary_score":	999673,
			"second_score":	122195
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	384,
			"primary_score":	999673,
			"second_score":	122194
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	386,
			"primary_score":	999673,
			"second_score":	122193
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	403,
			"primary_score":	999673,
			"second_score":	122192
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	404,
			"primary_score":	999673,
			"second_score":	122191
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	406,
			"primary_score":	999673,
			"second_score":	122190
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	408,
			"primary_score":	999673,
			"second_score":	120174
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	415,
			"primary_score":	999673,
			"second_score":	120173
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1293,
			"primary_score":	999673,
			"second_score":	122045
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1295,
			"primary_score":	999673,
			"second_score":	122044
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1296,
			"primary_score":	999673,
			"second_score":	122043
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1298,
			"primary_score":	999673,
			"second_score":	122042
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1304,
			"primary_score":	999673,
			"second_score":	122041
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1307,
			"primary_score":	999673,
			"second_score":	122000
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1595,
			"primary_score":	999673,
			"second_score":	123629
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1597,
			"primary_score":	999673,
			"second_score":	123628
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1599,
			"primary_score":	999673,
			"second_score":	123627
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1601,
			"primary_score":	999673,
			"second_score":	123621
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1604,
			"primary_score":	999673,
			"second_score":	123609
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1606,
			"primary_score":	999673,
			"second_score":	123608
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1611,
			"primary_score":	999673,
			"second_score":	120007
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1612,
			"primary_score":	999673,
			"second_score":	120006
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1613,
			"primary_score":	999673,
			"second_score":	120005
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1616,
			"primary_score":	999673,
			"second_score":	120004
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1649,
			"primary_score":	999673,
			"second_score":	120003
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1653,
			"primary_score":	999673,
			"second_score":	120002
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1654,
			"primary_score":	999673,
			"second_score":	120001
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1657,
			"primary_score":	999673,
			"second_score":	119101
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1658,
			"primary_score":	999673,
			"second_score":	119100
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1661,
			"primary_score":	999673,
			"second_score":	119099
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1663,
			"primary_score":	999673,
			"second_score":	119098
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1664,
			"primary_score":	999673,
			"second_score":	119074
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1665,
			"primary_score":	999673,
			"second_score":	119067
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1666,
			"primary_score":	999673,
			"second_score":	119064
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1686,
			"primary_score":	999673,
			"second_score":	120000
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1717,
			"primary_score":	999673,
			"second_score":	134363
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1718,
			"primary_score":	999673,
			"second_score":	134362
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1722,
			"primary_score":	999673,
			"second_score":	134361
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1723,
			"primary_score":	999673,
			"second_score":	134360
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1724,
			"primary_score":	999673,
			"second_score":	134359
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1727,
			"primary_score":	999673,
			"second_score":	134358
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1729,
			"primary_score":	999673,
			"second_score":	134357
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1730,
			"primary_score":	999673,
			"second_score":	134333
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1731,
			"primary_score":	999673,
			"second_score":	134326
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1732,
			"primary_score":	999673,
			"second_score":	134325
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1734,
			"primary_score":	999673,
			"second_score":	134292
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1737,
			"primary_score":	999673,
			"second_score":	134288
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4586,
			"primary_score":	999673,
			"second_score":	120056
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4587,
			"primary_score":	999673,
			"second_score":	120055
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4588,
			"primary_score":	999673,
			"second_score":	120054
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4589,
			"primary_score":	999673,
			"second_score":	120053
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4591,
			"primary_score":	999673,
			"second_score":	120051
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4597,
			"primary_score":	999673,
			"second_score":	120050
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4600,
			"primary_score":	999673,
			"second_score":	120037
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4601,
			"primary_score":	999673,
			"second_score":	120011
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	7845,
			"primary_score":	999673,
			"second_score":	122162
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	7846,
			"primary_score":	999673,
			"second_score":	122161
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	7847,
			"primary_score":	999673,
			"second_score":	122160
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	7848,
			"primary_score":	999673,
			"second_score":	122159
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	7850,
			"primary_score":	999673,
			"second_score":	122147
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	7856,
			"primary_score":	999673,
			"second_score":	122146
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	7859,
			"primary_score":	999673,
			"second_score":	122105
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	7860,
			"primary_score":	999673,
			"second_score":	122049
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8007,
			"primary_score":	999673,
			"second_score":	121433
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8008,
			"primary_score":	999673,
			"second_score":	121432
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8009,
			"primary_score":	999673,
			"second_score":	121431
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8010,
			"primary_score":	999673,
			"second_score":	121419
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8012,
			"primary_score":	999673,
			"second_score":	121418
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8015,
			"primary_score":	999673,
			"second_score":	121417
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8016,
			"primary_score":	999673,
			"second_score":	121412
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8017,
			"primary_score":	999673,
			"second_score":	121379
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8021,
			"primary_score":	999673,
			"second_score":	121378
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8029,
			"primary_score":	999673,
			"second_score":	121377
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8279,
			"primary_score":	999673,
			"second_score":	123691
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8280,
			"primary_score":	999673,
			"second_score":	123690
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8281,
			"primary_score":	999673,
			"second_score":	123689
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8282,
			"primary_score":	999673,
			"second_score":	123688
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8284,
			"primary_score":	999673,
			"second_score":	123676
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8288,
			"primary_score":	999673,
			"second_score":	123675
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8297,
			"primary_score":	999673,
			"second_score":	123673
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8298,
			"primary_score":	999673,
			"second_score":	123671
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8299,
			"primary_score":	999673,
			"second_score":	123667
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8301,
			"primary_score":	999673,
			"second_score":	123633
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8306,
			"primary_score":	999673,
			"second_score":	123697
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8307,
			"primary_score":	999673,
			"second_score":	123696
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8308,
			"primary_score":	999673,
			"second_score":	123695
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8310,
			"primary_score":	999673,
			"second_score":	123694
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8311,
			"primary_score":	999673,
			"second_score":	123693
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	8312,
			"primary_score":	999673,
			"second_score":	123692
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9168,
			"primary_score":	999673,
			"second_score":	120169
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9169,
			"primary_score":	999673,
			"second_score":	120168
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9170,
			"primary_score":	999673,
			"second_score":	120167
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9172,
			"primary_score":	999673,
			"second_score":	120155
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9173,
			"primary_score":	999673,
			"second_score":	120154
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9174,
			"primary_score":	999673,
			"second_score":	120153
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9176,
			"primary_score":	999673,
			"second_score":	120120
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9177,
			"primary_score":	999673,
			"second_score":	120064
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	33934,
			"primary_score":	999673,
			"second_score":	134776
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	33953,
			"primary_score":	999673,
			"second_score":	134775
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	33958,
			"primary_score":	999673,
			"second_score":	134777
		}, {
			"file":	"ext/date/php_date.c",
			"line":	612,
			"primary_score":	999673,
			"second_score":	150690
		}, {
			"file":	"ext/date/php_date.c",
			"line":	615,
			"primary_score":	999673,
			"second_score":	150689
		}, {
			"file":	"ext/date/php_date.c",
			"line":	616,
			"primary_score":	999673,
			"second_score":	150688
		}, {
			"file":	"ext/date/php_date.c",
			"line":	617,
			"primary_score":	999673,
			"second_score":	150687
		}, {
			"file":	"ext/date/php_date.c",
			"line":	619,
			"primary_score":	999673,
			"second_score":	150686
		}, {
			"file":	"ext/date/php_date.c",
			"line":	626,
			"primary_score":	999673,
			"second_score":	118513
		}, {
			"file":	"ext/date/php_date.c",
			"line":	629,
			"primary_score":	999673,
			"second_score":	118512
		}, {
			"file":	"ext/date/php_date.c",
			"line":	630,
			"primary_score":	999673,
			"second_score":	118511
		}, {
			"file":	"ext/date/php_date.c",
			"line":	635,
			"primary_score":	999673,
			"second_score":	118510
		}, {
			"file":	"ext/date/php_date.c",
			"line":	640,
			"primary_score":	999673,
			"second_score":	118509
		}, {
			"file":	"ext/date/php_date.c",
			"line":	789,
			"primary_score":	999673,
			"second_score":	54273
		}, {
			"file":	"ext/date/php_date.c",
			"line":	791,
			"primary_score":	999673,
			"second_score":	53558
		}, {
			"file":	"ext/date/php_date.c",
			"line":	795,
			"primary_score":	999673,
			"second_score":	53557
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	910,
			"primary_score":	999673,
			"second_score":	59387
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	911,
			"primary_score":	999673,
			"second_score":	59373
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	912,
			"primary_score":	999673,
			"second_score":	59359
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	913,
			"primary_score":	999673,
			"second_score":	59345
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	914,
			"primary_score":	999673,
			"second_score":	59127
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	915,
			"primary_score":	999673,
			"second_score":	59023
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	916,
			"primary_score":	999673,
			"second_score":	58967
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	917,
			"primary_score":	999673,
			"second_score":	58953
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	918,
			"primary_score":	999673,
			"second_score":	58939
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	919,
			"primary_score":	999673,
			"second_score":	58823
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	920,
			"primary_score":	999673,
			"second_score":	58689
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	921,
			"primary_score":	999673,
			"second_score":	58573
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	922,
			"primary_score":	999673,
			"second_score":	58451
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	923,
			"primary_score":	999673,
			"second_score":	58431
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	924,
			"primary_score":	999673,
			"second_score":	58387
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	925,
			"primary_score":	999673,
			"second_score":	58349
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	926,
			"primary_score":	999673,
			"second_score":	58209
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	927,
			"primary_score":	999673,
			"second_score":	58093
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	928,
			"primary_score":	999673,
			"second_score":	57953
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	930,
			"primary_score":	999673,
			"second_score":	57837
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	932,
			"primary_score":	999673,
			"second_score":	57823
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	939,
			"primary_score":	999673,
			"second_score":	57671
		}, {
			"file":	"ext/ereg/ereg.c",
			"line":	214,
			"primary_score":	999673,
			"second_score":	54660
		}, {
			"file":	"ext/ereg/ereg.c",
			"line":	226,
			"primary_score":	999673,
			"second_score":	54661
		}, {
			"file":	"ext/ereg/ereg.c",
			"line":	229,
			"primary_score":	999673,
			"second_score":	54652
		}, {
			"file":	"ext/filter/filter.c",
			"line":	287,
			"primary_score":	999673,
			"second_score":	60831
		}, {
			"file":	"ext/filter/filter.c",
			"line":	289,
			"primary_score":	999673,
			"second_score":	60153
		}, {
			"file":	"ext/filter/filter.c",
			"line":	303,
			"primary_score":	999673,
			"second_score":	119056
		}, {
			"file":	"ext/filter/filter.c",
			"line":	304,
			"primary_score":	999673,
			"second_score":	119055
		}, {
			"file":	"ext/filter/filter.c",
			"line":	305,
			"primary_score":	999673,
			"second_score":	119054
		}, {
			"file":	"ext/filter/filter.c",
			"line":	306,
			"primary_score":	999673,
			"second_score":	119053
		}, {
			"file":	"ext/filter/filter.c",
			"line":	307,
			"primary_score":	999673,
			"second_score":	118586
		}, {
			"file":	"ext/filter/filter.c",
			"line":	308,
			"primary_score":	999673,
			"second_score":	118585
		}, {
			"file":	"ext/filter/filter.c",
			"line":	309,
			"primary_score":	999673,
			"second_score":	118584
		}, {
			"file":	"ext/filter/filter.c",
			"line":	348,
			"primary_score":	999673,
			"second_score":	189817
		}, {
			"file":	"ext/filter/filter.c",
			"line":	349,
			"primary_score":	999673,
			"second_score":	189816
		}, {
			"file":	"ext/filter/filter.c",
			"line":	350,
			"primary_score":	999673,
			"second_score":	189815
		}, {
			"file":	"ext/filter/filter.c",
			"line":	351,
			"primary_score":	999673,
			"second_score":	189814
		}, {
			"file":	"ext/filter/filter.c",
			"line":	352,
			"primary_score":	999673,
			"second_score":	189813
		}, {
			"file":	"ext/filter/filter.c",
			"line":	353,
			"primary_score":	999673,
			"second_score":	189812
		}, {
			"file":	"ext/filter/filter.c",
			"line":	354,
			"primary_score":	999673,
			"second_score":	189811
		}, {
			"file":	"ext/filter/filter.c",
			"line":	405,
			"primary_score":	999673,
			"second_score":	157166
		}, {
			"file":	"ext/filter/filter.c",
			"line":	406,
			"primary_score":	999673,
			"second_score":	157165
		}, {
			"file":	"ext/filter/filter.c",
			"line":	407,
			"primary_score":	999673,
			"second_score":	157164
		}, {
			"file":	"ext/filter/filter.c",
			"line":	408,
			"primary_score":	999673,
			"second_score":	157163
		}, {
			"file":	"ext/filter/filter.c",
			"line":	410,
			"primary_score":	999673,
			"second_score":	157162
		}, {
			"file":	"ext/filter/filter.c",
			"line":	425,
			"primary_score":	999673,
			"second_score":	157161
		}, {
			"file":	"ext/filter/filter.c",
			"line":	429,
			"primary_score":	999673,
			"second_score":	161727
		}, {
			"file":	"ext/filter/filter.c",
			"line":	443,
			"primary_score":	999673,
			"second_score":	157157
		}, {
			"file":	"ext/filter/filter.c",
			"line":	447,
			"primary_score":	999673,
			"second_score":	157156
		}, {
			"file":	"ext/filter/filter.c",
			"line":	450,
			"primary_score":	999673,
			"second_score":	157155
		}, {
			"file":	"ext/filter/filter.c",
			"line":	455,
			"primary_score":	999673,
			"second_score":	157126
		}, {
			"file":	"ext/filter/filter.c",
			"line":	456,
			"primary_score":	999673,
			"second_score":	157125
		}, {
			"file":	"ext/filter/filter.c",
			"line":	457,
			"primary_score":	999673,
			"second_score":	157097
		}, {
			"file":	"ext/filter/filter.c",
			"line":	459,
			"primary_score":	999673,
			"second_score":	157096
		}, {
			"file":	"ext/filter/filter.c",
			"line":	462,
			"primary_score":	999673,
			"second_score":	156632
		}, {
			"file":	"ext/filter/filter.c",
			"line":	466,
			"primary_score":	999673,
			"second_score":	157693
		}, {
			"file":	"ext/filter/filter.c",
			"line":	467,
			"primary_score":	999673,
			"second_score":	157692
		}, {
			"file":	"ext/filter/filter.c",
			"line":	469,
			"primary_score":	999673,
			"second_score":	157691
		}, {
			"file":	"ext/filter/filter.c",
			"line":	474,
			"primary_score":	999673,
			"second_score":	157690
		}, {
			"file":	"ext/filter/filter.c",
			"line":	477,
			"primary_score":	999673,
			"second_score":	157689
		}, {
			"file":	"ext/filter/filter.c",
			"line":	480,
			"primary_score":	999673,
			"second_score":	156631
		}, {
			"file":	"ext/filter/filter.c",
			"line":	483,
			"primary_score":	999673,
			"second_score":	156599
		}, {
			"file":	"ext/filter/filter.c",
			"line":	484,
			"primary_score":	999673,
			"second_score":	156598
		}, {
			"file":	"ext/filter/filter.c",
			"line":	486,
			"primary_score":	999673,
			"second_score":	156131
		}, {
			"file":	"ext/filter/filter.c",
			"line":	487,
			"primary_score":	999673,
			"second_score":	156130
		}, {
			"file":	"ext/filter/filter.c",
			"line":	490,
			"primary_score":	999673,
			"second_score":	156111
		}, {
			"file":	"ext/filter/filter.c",
			"line":	503,
			"primary_score":	999673,
			"second_score":	156110
		}, {
			"file":	"ext/hash/hash.c",
			"line":	881,
			"primary_score":	999673,
			"second_score":	61691
		}, {
			"file":	"ext/hash/hash.c",
			"line":	883,
			"primary_score":	999673,
			"second_score":	61431
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	288,
			"primary_score":	999673,
			"second_score":	63110
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	289,
			"primary_score":	999673,
			"second_score":	63059
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	290,
			"primary_score":	999673,
			"second_score":	62340
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	2843,
			"primary_score":	999673,
			"second_score":	63109
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	2847,
			"primary_score":	999673,
			"second_score":	63060
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	579,
			"primary_score":	999673,
			"second_score":	55102
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	581,
			"primary_score":	999673,
			"second_score":	55101
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	583,
			"primary_score":	999673,
			"second_score":	55100
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	584,
			"primary_score":	999673,
			"second_score":	55099
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	585,
			"primary_score":	999673,
			"second_score":	55081
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	646,
			"primary_score":	999673,
			"second_score":	150672
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	647,
			"primary_score":	999673,
			"second_score":	150671
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	648,
			"primary_score":	999673,
			"second_score":	150670
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	649,
			"primary_score":	999673,
			"second_score":	150669
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	655,
			"primary_score":	999673,
			"second_score":	55103
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	657,
			"primary_score":	999673,
			"second_score":	55080
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	664,
			"primary_score":	999673,
			"second_score":	118540
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	665,
			"primary_score":	999673,
			"second_score":	118539
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	667,
			"primary_score":	999673,
			"second_score":	118538
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	668,
			"primary_score":	999673,
			"second_score":	118537
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	670,
			"primary_score":	999673,
			"second_score":	118536
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	674,
			"primary_score":	999673,
			"second_score":	118535
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	675,
			"primary_score":	999673,
			"second_score":	118531
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	680,
			"primary_score":	999673,
			"second_score":	118530
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	682,
			"primary_score":	999673,
			"second_score":	118529
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	113,
			"primary_score":	999673,
			"second_score":	55623
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	163,
			"primary_score":	999673,
			"second_score":	56287
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	165,
			"primary_score":	999673,
			"second_score":	55627
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	199,
			"primary_score":	999673,
			"second_score":	65628
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	203,
			"primary_score":	999673,
			"second_score":	65608
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	389,
			"primary_score":	999673,
			"second_score":	65528
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	390,
			"primary_score":	999673,
			"second_score":	65520
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	391,
			"primary_score":	999673,
			"second_score":	64181
		}, {
			"file":	"ext/pdo/pdo_sqlstate.c",
			"line":	309,
			"primary_score":	999673,
			"second_score":	65519
		}, {
			"file":	"ext/pdo_sqlite/pdo_sqlite.c",
			"line":	87,
			"primary_score":	999673,
			"second_score":	65629
		}, {
			"file":	"ext/pdo_sqlite/pdo_sqlite.c",
			"line":	88,
			"primary_score":	999673,
			"second_score":	65570
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1102,
			"primary_score":	999673,
			"second_score":	104155
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1104,
			"primary_score":	999673,
			"second_score":	104154
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1105,
			"primary_score":	999673,
			"second_score":	104128
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1106,
			"primary_score":	999673,
			"second_score":	104090
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1107,
			"primary_score":	999673,
			"second_score":	104062
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1108,
			"primary_score":	999673,
			"second_score":	104035
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1109,
			"primary_score":	999673,
			"second_score":	104007
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1110,
			"primary_score":	999673,
			"second_score":	103975
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1111,
			"primary_score":	999673,
			"second_score":	103945
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1112,
			"primary_score":	999673,
			"second_score":	103915
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1113,
			"primary_score":	999673,
			"second_score":	103886
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1114,
			"primary_score":	999673,
			"second_score":	103856
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1115,
			"primary_score":	999673,
			"second_score":	103826
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1116,
			"primary_score":	999673,
			"second_score":	103796
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1117,
			"primary_score":	999673,
			"second_score":	103766
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1118,
			"primary_score":	999673,
			"second_score":	103736
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1119,
			"primary_score":	999673,
			"second_score":	103707
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1120,
			"primary_score":	999673,
			"second_score":	103675
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1121,
			"primary_score":	999673,
			"second_score":	103643
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1122,
			"primary_score":	999673,
			"second_score":	103609
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1123,
			"primary_score":	999673,
			"second_score":	103583
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1124,
			"primary_score":	999673,
			"second_score":	103558
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1125,
			"primary_score":	999673,
			"second_score":	103527
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3334,
			"primary_score":	999673,
			"second_score":	144071
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3335,
			"primary_score":	999673,
			"second_score":	144070
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3336,
			"primary_score":	999673,
			"second_score":	144069
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3337,
			"primary_score":	999673,
			"second_score":	144068
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3339,
			"primary_score":	999673,
			"second_score":	144067
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3342,
			"primary_score":	999673,
			"second_score":	144066
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3391,
			"primary_score":	999673,
			"second_score":	144065
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3392,
			"primary_score":	999673,
			"second_score":	144059
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3393,
			"primary_score":	999673,
			"second_score":	144058
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3396,
			"primary_score":	999673,
			"second_score":	134726
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3398,
			"primary_score":	999673,
			"second_score":	134724
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3402,
			"primary_score":	999673,
			"second_score":	134723
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3406,
			"primary_score":	999673,
			"second_score":	134722
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3529,
			"primary_score":	999673,
			"second_score":	103519
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3559,
			"primary_score":	999673,
			"second_score":	104193
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3561,
			"primary_score":	999673,
			"second_score":	104156
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3563,
			"primary_score":	999673,
			"second_score":	103526
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3564,
			"primary_score":	999673,
			"second_score":	103525
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3572,
			"primary_score":	999673,
			"second_score":	103524
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3577,
			"primary_score":	999673,
			"second_score":	103523
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3619,
			"primary_score":	999673,
			"second_score":	119256
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3621,
			"primary_score":	999673,
			"second_score":	119255
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3623,
			"primary_score":	999673,
			"second_score":	119254
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3659,
			"primary_score":	999673,
			"second_score":	119253
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3660,
			"primary_score":	999673,
			"second_score":	119252
		}, {
			"file":	"ext/session/session.c",
			"line":	77,
			"primary_score":	999673,
			"second_score":	150582
		}, {
			"file":	"ext/session/session.c",
			"line":	78,
			"primary_score":	999673,
			"second_score":	150581
		}, {
			"file":	"ext/session/session.c",
			"line":	79,
			"primary_score":	999673,
			"second_score":	150580
		}, {
			"file":	"ext/session/session.c",
			"line":	81,
			"primary_score":	999673,
			"second_score":	150579
		}, {
			"file":	"ext/session/session.c",
			"line":	88,
			"primary_score":	999673,
			"second_score":	119122
		}, {
			"file":	"ext/session/session.c",
			"line":	93,
			"primary_score":	999673,
			"second_score":	119121
		}, {
			"file":	"ext/session/session.c",
			"line":	98,
			"primary_score":	999673,
			"second_score":	119120
		}, {
			"file":	"ext/session/session.c",
			"line":	1513,
			"primary_score":	999673,
			"second_score":	119124
		}, {
			"file":	"ext/session/session.c",
			"line":	2132,
			"primary_score":	999673,
			"second_score":	150583
		}, {
			"file":	"ext/session/session.c",
			"line":	2134,
			"primary_score":	999673,
			"second_score":	150578
		}, {
			"file":	"ext/session/session.c",
			"line":	2143,
			"primary_score":	999673,
			"second_score":	150577
		}, {
			"file":	"ext/session/session.c",
			"line":	2152,
			"primary_score":	999673,
			"second_score":	150576
		}, {
			"file":	"ext/session/session.c",
			"line":	2158,
			"primary_score":	999673,
			"second_score":	150575
		}, {
			"file":	"ext/session/session.c",
			"line":	2162,
			"primary_score":	999673,
			"second_score":	150574
		}, {
			"file":	"ext/session/session.c",
			"line":	2168,
			"primary_score":	999673,
			"second_score":	119126
		}, {
			"file":	"ext/session/session.c",
			"line":	2170,
			"primary_score":	999673,
			"second_score":	119125
		}, {
			"file":	"ext/session/session.c",
			"line":	2171,
			"primary_score":	999673,
			"second_score":	119123
		}, {
			"file":	"ext/session/session.c",
			"line":	2174,
			"primary_score":	999673,
			"second_score":	119119
		}, {
			"file":	"ext/session/session.c",
			"line":	2175,
			"primary_score":	999673,
			"second_score":	119113
		}, {
			"file":	"ext/session/session.c",
			"line":	2181,
			"primary_score":	999673,
			"second_score":	119112
		}, {
			"file":	"ext/session/session.c",
			"line":	2221,
			"primary_score":	999673,
			"second_score":	68187
		}, {
			"file":	"ext/session/session.c",
			"line":	2227,
			"primary_score":	999673,
			"second_score":	66831
		}, {
			"file":	"ext/session/session.c",
			"line":	2228,
			"primary_score":	999673,
			"second_score":	66830
		}, {
			"file":	"ext/session/session.c",
			"line":	2230,
			"primary_score":	999673,
			"second_score":	66829
		}, {
			"file":	"ext/simplexml/simplexml.c",
			"line":	2600,
			"primary_score":	999673,
			"second_score":	99970
		}, {
			"file":	"ext/simplexml/simplexml.c",
			"line":	2601,
			"primary_score":	999673,
			"second_score":	99969
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	903,
			"primary_score":	999673,
			"second_score":	150607
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	904,
			"primary_score":	999673,
			"second_score":	150606
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	905,
			"primary_score":	999673,
			"second_score":	150605
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	906,
			"primary_score":	999673,
			"second_score":	150604
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	907,
			"primary_score":	999673,
			"second_score":	150603
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	912,
			"primary_score":	999673,
			"second_score":	119089
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	917,
			"primary_score":	999673,
			"second_score":	119088
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	922,
			"primary_score":	999673,
			"second_score":	119087
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	925,
			"primary_score":	999673,
			"second_score":	119086
		}, {
			"file":	"ext/sqlite/sqlite.c",
			"line":	763,
			"primary_score":	999673,
			"second_score":	119243
		}, {
			"file":	"ext/sqlite/sqlite.c",
			"line":	764,
			"primary_score":	999673,
			"second_score":	119234
		}, {
			"file":	"ext/sqlite/sqlite.c",
			"line":	1448,
			"primary_score":	999673,
			"second_score":	103232
		}, {
			"file":	"ext/sqlite/sqlite.c",
			"line":	1451,
			"primary_score":	999673,
			"second_score":	102329
		}, {
			"file":	"ext/sqlite/sqlite.c",
			"line":	1454,
			"primary_score":	999673,
			"second_score":	102270
		}, {
			"file":	"ext/sqlite3/sqlite3.c",
			"line":	2146,
			"primary_score":	999673,
			"second_score":	56967
		}, {
			"file":	"ext/sqlite3/sqlite3.c",
			"line":	2148,
			"primary_score":	999673,
			"second_score":	56322
		}, {
			"file":	"ext/standard/array.c",
			"line":	138,
			"primary_score":	999673,
			"second_score":	98391
		}, {
			"file":	"ext/standard/assert.c",
			"line":	114,
			"primary_score":	999673,
			"second_score":	98389
		}, {
			"file":	"ext/standard/assert.c",
			"line":	118,
			"primary_score":	999673,
			"second_score":	98388
		}, {
			"file":	"ext/standard/assert.c",
			"line":	124,
			"primary_score":	999673,
			"second_score":	119179
		}, {
			"file":	"ext/standard/assert.c",
			"line":	129,
			"primary_score":	999673,
			"second_score":	119178
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3495,
			"primary_score":	999673,
			"second_score":	99744
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3496,
			"primary_score":	999673,
			"second_score":	99730
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3497,
			"primary_score":	999673,
			"second_score":	99729
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3499,
			"primary_score":	999673,
			"second_score":	99728
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3500,
			"primary_score":	999673,
			"second_score":	99727
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3501,
			"primary_score":	999673,
			"second_score":	99689
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3674,
			"primary_score":	999673,
			"second_score":	99748
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3682,
			"primary_score":	999673,
			"second_score":	99745
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3688,
			"primary_score":	999673,
			"second_score":	99688
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3690,
			"primary_score":	999673,
			"second_score":	99647
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3691,
			"primary_score":	999673,
			"second_score":	99609
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3694,
			"primary_score":	999673,
			"second_score":	99572
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3696,
			"primary_score":	999673,
			"second_score":	98429
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3697,
			"primary_score":	999673,
			"second_score":	98392
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3698,
			"primary_score":	999673,
			"second_score":	98390
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3699,
			"primary_score":	999673,
			"second_score":	98387
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3700,
			"primary_score":	999673,
			"second_score":	97583
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3701,
			"primary_score":	999673,
			"second_score":	97580
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3706,
			"primary_score":	999673,
			"second_score":	97258
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3709,
			"primary_score":	999673,
			"second_score":	97255
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3715,
			"primary_score":	999673,
			"second_score":	150554
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3716,
			"primary_score":	999673,
			"second_score":	150553
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3717,
			"primary_score":	999673,
			"second_score":	150552
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3718,
			"primary_score":	999673,
			"second_score":	150551
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3719,
			"primary_score":	999673,
			"second_score":	150550
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3720,
			"primary_score":	999673,
			"second_score":	150549
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3721,
			"primary_score":	999673,
			"second_score":	150548
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3722,
			"primary_score":	999673,
			"second_score":	150547
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3723,
			"primary_score":	999673,
			"second_score":	150546
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3724,
			"primary_score":	999673,
			"second_score":	150545
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3725,
			"primary_score":	999673,
			"second_score":	150544
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3726,
			"primary_score":	999673,
			"second_score":	150543
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3727,
			"primary_score":	999673,
			"second_score":	150542
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3729,
			"primary_score":	999673,
			"second_score":	150541
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3733,
			"primary_score":	999673,
			"second_score":	150404
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3735,
			"primary_score":	999673,
			"second_score":	150403
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3737,
			"primary_score":	999673,
			"second_score":	150399
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3739,
			"primary_score":	999673,
			"second_score":	150349
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3740,
			"primary_score":	999673,
			"second_score":	150346
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3743,
			"primary_score":	999673,
			"second_score":	150343
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3746,
			"primary_score":	999673,
			"second_score":	150298
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3749,
			"primary_score":	999673,
			"second_score":	150297
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3752,
			"primary_score":	999673,
			"second_score":	150296
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3754,
			"primary_score":	999673,
			"second_score":	150295
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3760,
			"primary_score":	999673,
			"second_score":	119218
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3763,
			"primary_score":	999673,
			"second_score":	119217
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3764,
			"primary_score":	999673,
			"second_score":	119216
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3766,
			"primary_score":	999673,
			"second_score":	119215
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3769,
			"primary_score":	999673,
			"second_score":	119189
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3775,
			"primary_score":	999673,
			"second_score":	119188
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3780,
			"primary_score":	999673,
			"second_score":	119187
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3781,
			"primary_score":	999673,
			"second_score":	119185
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3786,
			"primary_score":	999673,
			"second_score":	119184
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3792,
			"primary_score":	999673,
			"second_score":	119180
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3793,
			"primary_score":	999673,
			"second_score":	119177
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3794,
			"primary_score":	999673,
			"second_score":	119166
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3799,
			"primary_score":	999673,
			"second_score":	119155
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3805,
			"primary_score":	999673,
			"second_score":	119154
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3807,
			"primary_score":	999673,
			"second_score":	119151
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3808,
			"primary_score":	999673,
			"second_score":	119150
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3809,
			"primary_score":	999673,
			"second_score":	119149
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4593,
			"primary_score":	999673,
			"second_score":	123043
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4594,
			"primary_score":	999673,
			"second_score":	123042
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4595,
			"primary_score":	999673,
			"second_score":	123041
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4597,
			"primary_score":	999673,
			"second_score":	123040
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4601,
			"primary_score":	999673,
			"second_score":	122970
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4603,
			"primary_score":	999673,
			"second_score":	122939
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4612,
			"primary_score":	999673,
			"second_score":	122938
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5077,
			"primary_score":	999673,
			"second_score":	119490
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5089,
			"primary_score":	999673,
			"second_score":	118491
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5095,
			"primary_score":	999673,
			"second_score":	118490
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	234,
			"primary_score":	999673,
			"second_score":	98428
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	235,
			"primary_score":	999673,
			"second_score":	98394
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	238,
			"primary_score":	999673,
			"second_score":	98393
		}, {
			"file":	"ext/standard/crypt.c",
			"line":	130,
			"primary_score":	999673,
			"second_score":	97257
		}, {
			"file":	"ext/standard/crypt.c",
			"line":	133,
			"primary_score":	999673,
			"second_score":	97256
		}, {
			"file":	"ext/standard/dir.c",
			"line":	127,
			"primary_score":	999673,
			"second_score":	150348
		}, {
			"file":	"ext/standard/dir.c",
			"line":	128,
			"primary_score":	999673,
			"second_score":	150347
		}, {
			"file":	"ext/standard/file.c",
			"line":	319,
			"primary_score":	999673,
			"second_score":	97582
		}, {
			"file":	"ext/standard/file.c",
			"line":	321,
			"primary_score":	999673,
			"second_score":	97581
		}, {
			"file":	"ext/standard/file.c",
			"line":	2441,
			"primary_score":	999673,
			"second_score":	122722
		}, {
			"file":	"ext/standard/file.c",
			"line":	2442,
			"primary_score":	999673,
			"second_score":	122721
		}, {
			"file":	"ext/standard/file.c",
			"line":	2443,
			"primary_score":	999673,
			"second_score":	122720
		}, {
			"file":	"ext/standard/file.c",
			"line":	2445,
			"primary_score":	999673,
			"second_score":	122719
		}, {
			"file":	"ext/standard/file.c",
			"line":	2449,
			"primary_score":	999673,
			"second_score":	122604
		}, {
			"file":	"ext/standard/file.c",
			"line":	2453,
			"primary_score":	999673,
			"second_score":	122603
		}, {
			"file":	"ext/standard/file.c",
			"line":	2454,
			"primary_score":	999673,
			"second_score":	122357
		}, {
			"file":	"ext/standard/file.c",
			"line":	2458,
			"primary_score":	999673,
			"second_score":	122356
		}, {
			"file":	"ext/standard/file.c",
			"line":	2467,
			"primary_score":	999673,
			"second_score":	122352
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	103,
			"primary_score":	999673,
			"second_score":	150402
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	104,
			"primary_score":	999673,
			"second_score":	150401
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	105,
			"primary_score":	999673,
			"second_score":	150400
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	111,
			"primary_score":	999673,
			"second_score":	119183
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	115,
			"primary_score":	999673,
			"second_score":	119182
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	119,
			"primary_score":	999673,
			"second_score":	119181
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2148,
			"primary_score":	999673,
			"second_score":	97579
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2150,
			"primary_score":	999673,
			"second_score":	97578
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2151,
			"primary_score":	999673,
			"second_score":	97299
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2153,
			"primary_score":	999673,
			"second_score":	97259
		}, {
			"file":	"ext/standard/head.c",
			"line":	69,
			"primary_score":	999673,
			"second_score":	130652
		}, {
			"file":	"ext/standard/head.c",
			"line":	72,
			"primary_score":	999673,
			"second_score":	130271
		}, {
			"file":	"ext/standard/info.c",
			"line":	476,
			"primary_score":	999673,
			"second_score":	124224
		}, {
			"file":	"ext/standard/info.c",
			"line":	477,
			"primary_score":	999673,
			"second_score":	124223
		}, {
			"file":	"ext/standard/info.c",
			"line":	537,
			"primary_score":	999673,
			"second_score":	124222
		}, {
			"file":	"ext/standard/info.c",
			"line":	538,
			"primary_score":	999673,
			"second_score":	124221
		}, {
			"file":	"ext/standard/info.c",
			"line":	565,
			"primary_score":	999673,
			"second_score":	124220
		}, {
			"file":	"ext/standard/info.c",
			"line":	567,
			"primary_score":	999673,
			"second_score":	124219
		}, {
			"file":	"ext/standard/info.c",
			"line":	569,
			"primary_score":	999673,
			"second_score":	124218
		}, {
			"file":	"ext/standard/info.c",
			"line":	571,
			"primary_score":	999673,
			"second_score":	124217
		}, {
			"file":	"ext/standard/info.c",
			"line":	573,
			"primary_score":	999673,
			"second_score":	124216
		}, {
			"file":	"ext/standard/info.c",
			"line":	576,
			"primary_score":	999673,
			"second_score":	124215
		}, {
			"file":	"ext/standard/info.c",
			"line":	579,
			"primary_score":	999673,
			"second_score":	123514
		}, {
			"file":	"ext/standard/info.c",
			"line":	587,
			"primary_score":	999673,
			"second_score":	123513
		}, {
			"file":	"ext/standard/info.c",
			"line":	1265,
			"primary_score":	999673,
			"second_score":	124966
		}, {
			"file":	"ext/standard/info.c",
			"line":	1266,
			"primary_score":	999673,
			"second_score":	124965
		}, {
			"file":	"ext/standard/info.c",
			"line":	1267,
			"primary_score":	999673,
			"second_score":	124964
		}, {
			"file":	"ext/standard/info.c",
			"line":	1269,
			"primary_score":	999673,
			"second_score":	124963
		}, {
			"file":	"ext/standard/info.c",
			"line":	1270,
			"primary_score":	999673,
			"second_score":	124962
		}, {
			"file":	"ext/standard/info.c",
			"line":	1397,
			"primary_score":	999673,
			"second_score":	124267
		}, {
			"file":	"ext/standard/info.c",
			"line":	1398,
			"primary_score":	999673,
			"second_score":	124266
		}, {
			"file":	"ext/standard/info.c",
			"line":	1399,
			"primary_score":	999673,
			"second_score":	124265
		}, {
			"file":	"ext/standard/info.c",
			"line":	1402,
			"primary_score":	999673,
			"second_score":	124227
		}, {
			"file":	"ext/standard/info.c",
			"line":	1411,
			"primary_score":	999673,
			"second_score":	121054
		}, {
			"file":	"ext/standard/info.c",
			"line":	1415,
			"primary_score":	999673,
			"second_score":	121022
		}, {
			"file":	"ext/standard/info.c",
			"line":	1418,
			"primary_score":	999673,
			"second_score":	121021
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	162,
			"primary_score":	999673,
			"second_score":	148249
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	163,
			"primary_score":	999673,
			"second_score":	148248
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	164,
			"primary_score":	999673,
			"second_score":	148247
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	165,
			"primary_score":	999673,
			"second_score":	148246
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	166,
			"primary_score":	999673,
			"second_score":	148245
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	167,
			"primary_score":	999673,
			"second_score":	148244
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	169,
			"primary_score":	999673,
			"second_score":	148243
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	170,
			"primary_score":	999673,
			"second_score":	148242
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	173,
			"primary_score":	999673,
			"second_score":	148241
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	192,
			"primary_score":	999673,
			"second_score":	148240
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	201,
			"primary_score":	999673,
			"second_score":	148239
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	205,
			"primary_score":	999673,
			"second_score":	148238
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	215,
			"primary_score":	999673,
			"second_score":	148237
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	216,
			"primary_score":	999673,
			"second_score":	149747
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	222,
			"primary_score":	999673,
			"second_score":	149746
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	223,
			"primary_score":	999673,
			"second_score":	149734
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	224,
			"primary_score":	999673,
			"second_score":	149733
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	225,
			"primary_score":	999673,
			"second_score":	149732
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	228,
			"primary_score":	999673,
			"second_score":	149731
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	229,
			"primary_score":	999673,
			"second_score":	149730
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	234,
			"primary_score":	999673,
			"second_score":	148236
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	235,
			"primary_score":	999673,
			"second_score":	149031
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	236,
			"primary_score":	999673,
			"second_score":	149019
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	237,
			"primary_score":	999673,
			"second_score":	149018
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	238,
			"primary_score":	999673,
			"second_score":	149017
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	241,
			"primary_score":	999673,
			"second_score":	149016
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	242,
			"primary_score":	999673,
			"second_score":	149015
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	247,
			"primary_score":	999673,
			"second_score":	148235
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	248,
			"primary_score":	999673,
			"second_score":	148234
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	249,
			"primary_score":	999673,
			"second_score":	148222
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	250,
			"primary_score":	999673,
			"second_score":	148221
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	251,
			"primary_score":	999673,
			"second_score":	148220
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	254,
			"primary_score":	999673,
			"second_score":	148219
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	255,
			"primary_score":	999673,
			"second_score":	148218
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	336,
			"primary_score":	999673,
			"second_score":	148217
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	342,
			"primary_score":	999673,
			"second_score":	148216
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	343,
			"primary_score":	999673,
			"second_score":	148215
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	344,
			"primary_score":	999673,
			"second_score":	148214
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	345,
			"primary_score":	999673,
			"second_score":	148213
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	355,
			"primary_score":	999673,
			"second_score":	148211
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	356,
			"primary_score":	999673,
			"second_score":	148210
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	364,
			"primary_score":	999673,
			"second_score":	147770
		}, {
			"file":	"ext/standard/string.c",
			"line":	1058,
			"primary_score":	999673,
			"second_score":	123285
		}, {
			"file":	"ext/standard/string.c",
			"line":	1059,
			"primary_score":	999673,
			"second_score":	123284
		}, {
			"file":	"ext/standard/string.c",
			"line":	1060,
			"primary_score":	999673,
			"second_score":	123283
		}, {
			"file":	"ext/standard/string.c",
			"line":	1061,
			"primary_score":	999673,
			"second_score":	123282
		}, {
			"file":	"ext/standard/string.c",
			"line":	1062,
			"primary_score":	999673,
			"second_score":	123281
		}, {
			"file":	"ext/standard/string.c",
			"line":	1063,
			"primary_score":	999673,
			"second_score":	123280
		}, {
			"file":	"ext/standard/string.c",
			"line":	1065,
			"primary_score":	999673,
			"second_score":	123279
		}, {
			"file":	"ext/standard/string.c",
			"line":	1067,
			"primary_score":	999673,
			"second_score":	123276
		}, {
			"file":	"ext/standard/string.c",
			"line":	1071,
			"primary_score":	999673,
			"second_score":	123275
		}, {
			"file":	"ext/standard/string.c",
			"line":	1073,
			"primary_score":	999673,
			"second_score":	123271
		}, {
			"file":	"ext/standard/string.c",
			"line":	1074,
			"primary_score":	999673,
			"second_score":	122232
		}, {
			"file":	"ext/standard/string.c",
			"line":	1076,
			"primary_score":	999673,
			"second_score":	123259
		}, {
			"file":	"ext/standard/string.c",
			"line":	1077,
			"primary_score":	999673,
			"second_score":	122223
		}, {
			"file":	"ext/standard/string.c",
			"line":	1124,
			"primary_score":	999673,
			"second_score":	122222
		}, {
			"file":	"ext/standard/string.c",
			"line":	1125,
			"primary_score":	999673,
			"second_score":	122253
		}, {
			"file":	"ext/standard/string.c",
			"line":	1127,
			"primary_score":	999673,
			"second_score":	122221
		}, {
			"file":	"ext/standard/string.c",
			"line":	1129,
			"primary_score":	999673,
			"second_score":	122210
		}, {
			"file":	"ext/standard/string.c",
			"line":	1131,
			"primary_score":	999673,
			"second_score":	122207
		}, {
			"file":	"ext/standard/string.c",
			"line":	1132,
			"primary_score":	999673,
			"second_score":	122206
		}, {
			"file":	"ext/standard/string.c",
			"line":	1144,
			"primary_score":	999673,
			"second_score":	123385
		}, {
			"file":	"ext/standard/string.c",
			"line":	1146,
			"primary_score":	999673,
			"second_score":	123384
		}, {
			"file":	"ext/standard/string.c",
			"line":	1150,
			"primary_score":	999673,
			"second_score":	123293
		}, {
			"file":	"ext/standard/string.c",
			"line":	1163,
			"primary_score":	999673,
			"second_score":	123292
		}, {
			"file":	"ext/standard/string.c",
			"line":	1167,
			"primary_score":	999673,
			"second_score":	123291
		}, {
			"file":	"ext/standard/string.c",
			"line":	1168,
			"primary_score":	999673,
			"second_score":	123290
		}, {
			"file":	"ext/standard/string.c",
			"line":	1169,
			"primary_score":	999673,
			"second_score":	123289
		}, {
			"file":	"ext/standard/string.c",
			"line":	1170,
			"primary_score":	999673,
			"second_score":	123287
		}, {
			"file":	"ext/standard/string.c",
			"line":	1177,
			"primary_score":	999673,
			"second_score":	123286
		}, {
			"file":	"ext/standard/string.c",
			"line":	1179,
			"primary_score":	999673,
			"second_score":	122197
		}, {
			"file":	"ext/standard/string.c",
			"line":	3536,
			"primary_score":	999673,
			"second_score":	120605
		}, {
			"file":	"ext/standard/string.c",
			"line":	3539,
			"primary_score":	999673,
			"second_score":	120604
		}, {
			"file":	"ext/standard/string.c",
			"line":	3540,
			"primary_score":	999673,
			"second_score":	120603
		}, {
			"file":	"ext/standard/string.c",
			"line":	3543,
			"primary_score":	999673,
			"second_score":	120602
		}, {
			"file":	"ext/standard/string.c",
			"line":	3544,
			"primary_score":	999673,
			"second_score":	120474
		}, {
			"file":	"ext/standard/string.c",
			"line":	3545,
			"primary_score":	999673,
			"second_score":	120473
		}, {
			"file":	"ext/standard/string.c",
			"line":	3546,
			"primary_score":	999673,
			"second_score":	120472
		}, {
			"file":	"ext/standard/string.c",
			"line":	3547,
			"primary_score":	999673,
			"second_score":	120357
		}, {
			"file":	"ext/standard/string.c",
			"line":	3647,
			"primary_score":	999673,
			"second_score":	120755
		}, {
			"file":	"ext/standard/string.c",
			"line":	3648,
			"primary_score":	999673,
			"second_score":	120754
		}, {
			"file":	"ext/standard/string.c",
			"line":	3649,
			"primary_score":	999673,
			"second_score":	120753
		}, {
			"file":	"ext/standard/string.c",
			"line":	3650,
			"primary_score":	999673,
			"second_score":	120752
		}, {
			"file":	"ext/standard/string.c",
			"line":	3651,
			"primary_score":	999673,
			"second_score":	120751
		}, {
			"file":	"ext/standard/string.c",
			"line":	3652,
			"primary_score":	999673,
			"second_score":	120750
		}, {
			"file":	"ext/standard/string.c",
			"line":	3653,
			"primary_score":	999673,
			"second_score":	120749
		}, {
			"file":	"ext/standard/string.c",
			"line":	3655,
			"primary_score":	999673,
			"second_score":	120748
		}, {
			"file":	"ext/standard/string.c",
			"line":	3659,
			"primary_score":	999673,
			"second_score":	120627
		}, {
			"file":	"ext/standard/string.c",
			"line":	3660,
			"primary_score":	999673,
			"second_score":	120622
		}, {
			"file":	"ext/standard/string.c",
			"line":	3661,
			"primary_score":	999673,
			"second_score":	120617
		}, {
			"file":	"ext/standard/string.c",
			"line":	3664,
			"primary_score":	999673,
			"second_score":	120612
		}, {
			"file":	"ext/standard/string.c",
			"line":	3665,
			"primary_score":	999673,
			"second_score":	120611
		}, {
			"file":	"ext/standard/string.c",
			"line":	3666,
			"primary_score":	999673,
			"second_score":	120609
		}, {
			"file":	"ext/standard/string.c",
			"line":	3672,
			"primary_score":	999673,
			"second_score":	120607
		}, {
			"file":	"ext/standard/string.c",
			"line":	3703,
			"primary_score":	999673,
			"second_score":	120606
		}, {
			"file":	"ext/standard/string.c",
			"line":	3705,
			"primary_score":	999673,
			"second_score":	120356
		}, {
			"file":	"ext/standard/string.c",
			"line":	3716,
			"primary_score":	999673,
			"second_score":	120756
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	108,
			"primary_score":	999673,
			"second_score":	150398
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	111,
			"primary_score":	999673,
			"second_score":	150352
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	113,
			"primary_score":	999673,
			"second_score":	150351
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	114,
			"primary_score":	999673,
			"second_score":	150350
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	128,
			"primary_score":	999673,
			"second_score":	99747
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	132,
			"primary_score":	999673,
			"second_score":	99746
		}, {
			"file":	"ext/standard/url.c",
			"line":	44,
			"primary_score":	999996,
			"second_score":	123854
		}, {
			"file":	"ext/standard/url.c",
			"line":	45,
			"primary_score":	999997,
			"second_score":	123853
		}, {
			"file":	"ext/standard/url.c",
			"line":	46,
			"primary_score":	999996,
			"second_score":	123834
		}, {
			"file":	"ext/standard/url.c",
			"line":	48,
			"primary_score":	999996,
			"second_score":	123833
		}, {
			"file":	"ext/standard/url.c",
			"line":	50,
			"primary_score":	999996,
			"second_score":	123832
		}, {
			"file":	"ext/standard/url.c",
			"line":	51,
			"primary_score":	999997,
			"second_score":	123831
		}, {
			"file":	"ext/standard/url.c",
			"line":	52,
			"primary_score":	999996,
			"second_score":	123812
		}, {
			"file":	"ext/standard/url.c",
			"line":	53,
			"primary_score":	999996,
			"second_score":	131410
		}, {
			"file":	"ext/standard/url.c",
			"line":	54,
			"primary_score":	999996,
			"second_score":	123811
		}, {
			"file":	"ext/standard/url.c",
			"line":	55,
			"primary_score":	999998,
			"second_score":	131390
		}, {
			"file":	"ext/standard/url.c",
			"line":	56,
			"primary_score":	999996,
			"second_score":	123810
		}, {
			"file":	"ext/standard/url.c",
			"line":	57,
			"primary_score":	999998,
			"second_score":	123809
		}, {
			"file":	"ext/standard/url.c",
			"line":	58,
			"primary_score":	999996,
			"second_score":	123790
		}, {
			"file":	"ext/standard/url.c",
			"line":	66,
			"primary_score":	999996,
			"second_score":	124404
		}, {
			"file":	"ext/standard/url.c",
			"line":	67,
			"primary_score":	999996,
			"second_score":	124403
		}, {
			"file":	"ext/standard/url.c",
			"line":	69,
			"primary_score":	999996,
			"second_score":	124402
		}, {
			"file":	"ext/standard/url.c",
			"line":	73,
			"primary_score":	999996,
			"second_score":	124401
		}, {
			"file":	"ext/standard/url.c",
			"line":	75,
			"primary_score":	999996,
			"second_score":	124376
		}, {
			"file":	"ext/standard/url.c",
			"line":	78,
			"primary_score":	999996,
			"second_score":	124375
		}, {
			"file":	"ext/standard/url.c",
			"line":	81,
			"primary_score":	999996,
			"second_score":	124374
		}, {
			"file":	"ext/standard/url.c",
			"line":	99,
			"primary_score":	999996,
			"second_score":	124616
		}, {
			"file":	"ext/standard/url.c",
			"line":	100,
			"primary_score":	999996,
			"second_score":	124615
		}, {
			"file":	"ext/standard/url.c",
			"line":	101,
			"primary_score":	999996,
			"second_score":	124582
		}, {
			"file":	"ext/standard/url.c",
			"line":	103,
			"primary_score":	999996,
			"second_score":	124581
		}, {
			"file":	"ext/standard/url.c",
			"line":	104,
			"primary_score":	999996,
			"second_score":	124580
		}, {
			"file":	"ext/standard/url.c",
			"line":	107,
			"primary_score":	999996,
			"second_score":	124579
		}, {
			"file":	"ext/standard/url.c",
			"line":	109,
			"primary_score":	999997,
			"second_score":	124578
		}, {
			"file":	"ext/standard/url.c",
			"line":	110,
			"primary_score":	999997,
			"second_score":	124577
		}, {
			"file":	"ext/standard/url.c",
			"line":	112,
			"primary_score":	999997,
			"second_score":	124570
		}, {
			"file":	"ext/standard/url.c",
			"line":	119,
			"primary_score":	999997,
			"second_score":	124569
		}, {
			"file":	"ext/standard/url.c",
			"line":	122,
			"primary_score":	999997,
			"second_score":	124568
		}, {
			"file":	"ext/standard/url.c",
			"line":	132,
			"primary_score":	999997,
			"second_score":	124567
		}, {
			"file":	"ext/standard/url.c",
			"line":	152,
			"primary_score":	999997,
			"second_score":	124566
		}, {
			"file":	"ext/standard/url.c",
			"line":	153,
			"primary_score":	999997,
			"second_score":	124538
		}, {
			"file":	"ext/standard/url.c",
			"line":	155,
			"primary_score":	999997,
			"second_score":	124524
		}, {
			"file":	"ext/standard/url.c",
			"line":	156,
			"primary_score":	999997,
			"second_score":	124523
		}, {
			"file":	"ext/standard/url.c",
			"line":	157,
			"primary_score":	999997,
			"second_score":	124522
		}, {
			"file":	"ext/standard/url.c",
			"line":	209,
			"primary_score":	999997,
			"second_score":	124521
		}, {
			"file":	"ext/standard/url.c",
			"line":	211,
			"primary_score":	999997,
			"second_score":	124520
		}, {
			"file":	"ext/standard/url.c",
			"line":	229,
			"primary_score":	999997,
			"second_score":	124519
		}, {
			"file":	"ext/standard/url.c",
			"line":	233,
			"primary_score":	999997,
			"second_score":	124518
		}, {
			"file":	"ext/standard/url.c",
			"line":	254,
			"primary_score":	999997,
			"second_score":	124502
		}, {
			"file":	"ext/standard/url.c",
			"line":	262,
			"primary_score":	999997,
			"second_score":	124501
		}, {
			"file":	"ext/standard/url.c",
			"line":	265,
			"primary_score":	999997,
			"second_score":	124500
		}, {
			"file":	"ext/standard/url.c",
			"line":	292,
			"primary_score":	999999,
			"second_score":	124499
		}, {
			"file":	"ext/standard/url.c",
			"line":	296,
			"primary_score":	999997,
			"second_score":	124498
		}, {
			"file":	"ext/standard/url.c",
			"line":	304,
			"primary_score":	999997,
			"second_score":	124497
		}, {
			"file":	"ext/standard/url.c",
			"line":	305,
			"primary_score":	999997,
			"second_score":	124469
		}, {
			"file":	"ext/standard/url.c",
			"line":	307,
			"primary_score":	999997,
			"second_score":	124441
		}, {
			"file":	"ext/standard/url.c",
			"line":	311,
			"primary_score":	999997,
			"second_score":	124440
		}, {
			"file":	"ext/standard/url.c",
			"line":	313,
			"primary_score":	999997,
			"second_score":	124439
		}, {
			"file":	"ext/standard/url.c",
			"line":	316,
			"primary_score":	999998,
			"second_score":	124438
		}, {
			"file":	"ext/standard/url.c",
			"line":	318,
			"primary_score":	999998,
			"second_score":	124437
		}, {
			"file":	"ext/standard/url.c",
			"line":	319,
			"primary_score":	1000000,
			"second_score":	124436
		}, {
			"file":	"ext/standard/url.c",
			"line":	320,
			"primary_score":	1000000,
			"second_score":	124435
		}, {
			"file":	"ext/standard/url.c",
			"line":	323,
			"primary_score":	999998,
			"second_score":	133972
		}, {
			"file":	"ext/standard/url.c",
			"line":	324,
			"primary_score":	999998,
			"second_score":	133971
		}, {
			"file":	"ext/standard/url.c",
			"line":	325,
			"primary_score":	999998,
			"second_score":	133862
		}, {
			"file":	"ext/standard/url.c",
			"line":	328,
			"primary_score":	999998,
			"second_score":	133822
		}, {
			"file":	"ext/standard/url.c",
			"line":	329,
			"primary_score":	999998,
			"second_score":	133821
		}, {
			"file":	"ext/standard/url.c",
			"line":	330,
			"primary_score":	999998,
			"second_score":	133820
		}, {
			"file":	"ext/standard/url.c",
			"line":	331,
			"primary_score":	999998,
			"second_score":	133711
		}, {
			"file":	"ext/standard/url.c",
			"line":	333,
			"primary_score":	999998,
			"second_score":	133699
		}, {
			"file":	"ext/standard/url.c",
			"line":	334,
			"primary_score":	999998,
			"second_score":	133698
		}, {
			"file":	"ext/standard/url.c",
			"line":	348,
			"primary_score":	999998,
			"second_score":	124434
		}, {
			"file":	"ext/standard/url.c",
			"line":	349,
			"primary_score":	999998,
			"second_score":	124433
		}, {
			"file":	"ext/standard/url.c",
			"line":	350,
			"primary_score":	999998,
			"second_score":	124405
		}, {
			"file":	"ext/standard/url.c",
			"line":	356,
			"primary_score":	999996,
			"second_score":	124373
		}, {
			"file":	"ext/standard/url.c",
			"line":	365,
			"primary_score":	999996,
			"second_score":	124696
		}, {
			"file":	"ext/standard/url.c",
			"line":	366,
			"primary_score":	999996,
			"second_score":	124695
		}, {
			"file":	"ext/standard/url.c",
			"line":	367,
			"primary_score":	999996,
			"second_score":	124694
		}, {
			"file":	"ext/standard/url.c",
			"line":	368,
			"primary_score":	999996,
			"second_score":	124693
		}, {
			"file":	"ext/standard/url.c",
			"line":	370,
			"primary_score":	999996,
			"second_score":	124692
		}, {
			"file":	"ext/standard/url.c",
			"line":	374,
			"primary_score":	999997,
			"second_score":	124617
		}, {
			"file":	"ext/standard/url.c",
			"line":	375,
			"primary_score":	999997,
			"second_score":	124372
		}, {
			"file":	"ext/standard/url.c",
			"line":	380,
			"primary_score":	999997,
			"second_score":	124371
		}, {
			"file":	"ext/standard/url.c",
			"line":	414,
			"primary_score":	999997,
			"second_score":	124370
		}, {
			"file":	"ext/standard/url.c",
			"line":	417,
			"primary_score":	999997,
			"second_score":	124290
		}, {
			"file":	"ext/standard/url.c",
			"line":	418,
			"primary_score":	999998,
			"second_score":	124289
		}, {
			"file":	"ext/standard/url.c",
			"line":	419,
			"primary_score":	999997,
			"second_score":	124146
		}, {
			"file":	"ext/standard/url.c",
			"line":	420,
			"primary_score":	999998,
			"second_score":	124145
		}, {
			"file":	"ext/standard/url.c",
			"line":	421,
			"primary_score":	999997,
			"second_score":	124005
		}, {
			"file":	"ext/standard/url.c",
			"line":	423,
			"primary_score":	999997,
			"second_score":	124004
		}, {
			"file":	"ext/standard/url.c",
			"line":	425,
			"primary_score":	999997,
			"second_score":	124003
		}, {
			"file":	"ext/standard/url.c",
			"line":	427,
			"primary_score":	999997,
			"second_score":	124002
		}, {
			"file":	"ext/standard/url.c",
			"line":	428,
			"primary_score":	999997,
			"second_score":	132616
		}, {
			"file":	"ext/standard/url.c",
			"line":	429,
			"primary_score":	999997,
			"second_score":	124001
		}, {
			"file":	"ext/standard/url.c",
			"line":	430,
			"primary_score":	999998,
			"second_score":	132229
		}, {
			"file":	"ext/standard/url.c",
			"line":	431,
			"primary_score":	999997,
			"second_score":	124000
		}, {
			"file":	"ext/standard/url.c",
			"line":	432,
			"primary_score":	999998,
			"second_score":	123999
		}, {
			"file":	"ext/standard/url.c",
			"line":	433,
			"primary_score":	999997,
			"second_score":	123855
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1083,
			"primary_score":	999673,
			"second_score":	98386
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1085,
			"primary_score":	999673,
			"second_score":	97584
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1090,
			"primary_score":	999673,
			"second_score":	150345
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1092,
			"primary_score":	999673,
			"second_score":	150344
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1097,
			"primary_score":	999673,
			"second_score":	119176
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1102,
			"primary_score":	999673,
			"second_score":	119175
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1103,
			"primary_score":	999673,
			"second_score":	119171
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1105,
			"primary_score":	999673,
			"second_score":	119167
		}, {
			"file":	"ext/standard/user_filters.c",
			"line":	129,
			"primary_score":	999673,
			"second_score":	119153
		}, {
			"file":	"ext/standard/user_filters.c",
			"line":	135,
			"primary_score":	999673,
			"second_score":	119152
		}, {
			"file":	"ext/standard/var.c",
			"line":	40,
			"primary_score":	999955,
			"second_score":	121212
		}, {
			"file":	"ext/standard/var.c",
			"line":	42,
			"primary_score":	999955,
			"second_score":	121211
		}, {
			"file":	"ext/standard/var.c",
			"line":	44,
			"primary_score":	999955,
			"second_score":	121210
		}, {
			"file":	"ext/standard/var.c",
			"line":	47,
			"primary_score":	999976,
			"second_score":	121209
		}, {
			"file":	"ext/standard/var.c",
			"line":	48,
			"primary_score":	999976,
			"second_score":	121015
		}, {
			"file":	"ext/standard/var.c",
			"line":	49,
			"primary_score":	999976,
			"second_score":	120989
		}, {
			"file":	"ext/standard/var.c",
			"line":	51,
			"primary_score":	999955,
			"second_score":	120817
		}, {
			"file":	"ext/standard/var.c",
			"line":	52,
			"primary_score":	999955,
			"second_score":	120271
		}, {
			"file":	"ext/standard/var.c",
			"line":	89,
			"primary_score":	999721,
			"second_score":	120816
		}, {
			"file":	"ext/standard/var.c",
			"line":	90,
			"primary_score":	999721,
			"second_score":	120815
		}, {
			"file":	"ext/standard/var.c",
			"line":	91,
			"primary_score":	999721,
			"second_score":	120814
		}, {
			"file":	"ext/standard/var.c",
			"line":	92,
			"primary_score":	999721,
			"second_score":	120813
		}, {
			"file":	"ext/standard/var.c",
			"line":	93,
			"primary_score":	999721,
			"second_score":	120812
		}, {
			"file":	"ext/standard/var.c",
			"line":	95,
			"primary_score":	999721,
			"second_score":	120811
		}, {
			"file":	"ext/standard/var.c",
			"line":	96,
			"primary_score":	999941,
			"second_score":	120810
		}, {
			"file":	"ext/standard/var.c",
			"line":	99,
			"primary_score":	999721,
			"second_score":	120638
		}, {
			"file":	"ext/standard/var.c",
			"line":	114,
			"primary_score":	999895,
			"second_score":	120326
		}, {
			"file":	"ext/standard/var.c",
			"line":	115,
			"primary_score":	999895,
			"second_score":	120300
		}, {
			"file":	"ext/standard/var.c",
			"line":	116,
			"primary_score":	999895,
			"second_score":	120272
		}, {
			"file":	"ext/standard/var.c",
			"line":	119,
			"primary_score":	999954,
			"second_score":	123444
		}, {
			"file":	"ext/standard/var.c",
			"line":	124,
			"primary_score":	999954,
			"second_score":	123443
		}, {
			"file":	"ext/standard/var.c",
			"line":	125,
			"primary_score":	999954,
			"second_score":	123132
		}, {
			"file":	"ext/standard/var.c",
			"line":	126,
			"primary_score":	999954,
			"second_score":	123131
		}, {
			"file":	"ext/standard/var.c",
			"line":	127,
			"primary_score":	999954,
			"second_score":	123130
		}, {
			"file":	"ext/standard/var.c",
			"line":	142,
			"primary_score":	999938,
			"second_score":	123129
		}, {
			"file":	"ext/standard/var.c",
			"line":	143,
			"primary_score":	999938,
			"second_score":	120263
		}, {
			"file":	"ext/standard/var.c",
			"line":	144,
			"primary_score":	999938,
			"second_score":	120262
		}, {
			"file":	"ext/standard/var.c",
			"line":	149,
			"primary_score":	999938,
			"second_score":	120261
		}, {
			"file":	"ext/standard/var.c",
			"line":	152,
			"primary_score":	999938,
			"second_score":	120260
		}, {
			"file":	"ext/standard/var.c",
			"line":	153,
			"primary_score":	999938,
			"second_score":	120232
		}, {
			"file":	"ext/standard/var.c",
			"line":	172,
			"primary_score":	999721,
			"second_score":	123541
		}, {
			"file":	"ext/standard/var.c",
			"line":	173,
			"primary_score":	999721,
			"second_score":	123540
		}, {
			"file":	"ext/standard/var.c",
			"line":	174,
			"primary_score":	999721,
			"second_score":	123539
		}, {
			"file":	"ext/standard/var.c",
			"line":	176,
			"primary_score":	999721,
			"second_score":	123538
		}, {
			"file":	"ext/standard/var.c",
			"line":	180,
			"primary_score":	999721,
			"second_score":	123453
		}, {
			"file":	"ext/standard/var.c",
			"line":	181,
			"primary_score":	999721,
			"second_score":	123452
		}, {
			"file":	"ext/standard/var.c",
			"line":	183,
			"primary_score":	999721,
			"second_score":	120231
		}, {
			"file":	"ext/xmlreader/php_xmlreader.c",
			"line":	1379,
			"primary_score":	999673,
			"second_score":	106038
		}, {
			"file":	"ext/xmlreader/php_xmlreader.c",
			"line":	1380,
			"primary_score":	999673,
			"second_score":	105946
		}, {
			"file":	"ext/xmlwriter/php_xmlwriter.c",
			"line":	1974,
			"primary_score":	999673,
			"second_score":	108730
		}, {
			"file":	"main/SAPI.c",
			"line":	67,
			"primary_score":	999673,
			"second_score":	3133
		}, {
			"file":	"main/SAPI.c",
			"line":	99,
			"primary_score":	999673,
			"second_score":	3134
		}, {
			"file":	"main/SAPI.c",
			"line":	102,
			"primary_score":	999673,
			"second_score":	3113
		}, {
			"file":	"main/SAPI.c",
			"line":	104,
			"primary_score":	999673,
			"second_score":	3112
		}, {
			"file":	"main/SAPI.c",
			"line":	114,
			"primary_score":	999673,
			"second_score":	130321
		}, {
			"file":	"main/SAPI.c",
			"line":	229,
			"primary_score":	999673,
			"second_score":	130644
		}, {
			"file":	"main/SAPI.c",
			"line":	231,
			"primary_score":	999673,
			"second_score":	130643
		}, {
			"file":	"main/SAPI.c",
			"line":	232,
			"primary_score":	999673,
			"second_score":	130642
		}, {
			"file":	"main/SAPI.c",
			"line":	234,
			"primary_score":	999673,
			"second_score":	130641
		}, {
			"file":	"main/SAPI.c",
			"line":	239,
			"primary_score":	999673,
			"second_score":	130640
		}, {
			"file":	"main/SAPI.c",
			"line":	241,
			"primary_score":	999673,
			"second_score":	130611
		}, {
			"file":	"main/SAPI.c",
			"line":	247,
			"primary_score":	999673,
			"second_score":	130645
		}, {
			"file":	"main/SAPI.c",
			"line":	248,
			"primary_score":	999673,
			"second_score":	130610
		}, {
			"file":	"main/SAPI.c",
			"line":	250,
			"primary_score":	999673,
			"second_score":	130609
		}, {
			"file":	"main/SAPI.c",
			"line":	251,
			"primary_score":	999673,
			"second_score":	130608
		}, {
			"file":	"main/SAPI.c",
			"line":	252,
			"primary_score":	999673,
			"second_score":	130586
		}, {
			"file":	"main/SAPI.c",
			"line":	253,
			"primary_score":	999673,
			"second_score":	130585
		}, {
			"file":	"main/SAPI.c",
			"line":	254,
			"primary_score":	999673,
			"second_score":	130584
		}, {
			"file":	"main/SAPI.c",
			"line":	255,
			"primary_score":	999673,
			"second_score":	130583
		}, {
			"file":	"main/SAPI.c",
			"line":	271,
			"primary_score":	999673,
			"second_score":	130386
		}, {
			"file":	"main/SAPI.c",
			"line":	272,
			"primary_score":	999673,
			"second_score":	130385
		}, {
			"file":	"main/SAPI.c",
			"line":	273,
			"primary_score":	999673,
			"second_score":	130384
		}, {
			"file":	"main/SAPI.c",
			"line":	275,
			"primary_score":	999673,
			"second_score":	130383
		}, {
			"file":	"main/SAPI.c",
			"line":	276,
			"primary_score":	999673,
			"second_score":	130382
		}, {
			"file":	"main/SAPI.c",
			"line":	287,
			"primary_score":	999673,
			"second_score":	130381
		}, {
			"file":	"main/SAPI.c",
			"line":	337,
			"primary_score":	999673,
			"second_score":	189843
		}, {
			"file":	"main/SAPI.c",
			"line":	338,
			"primary_score":	999673,
			"second_score":	189836
		}, {
			"file":	"main/SAPI.c",
			"line":	343,
			"primary_score":	999673,
			"second_score":	189835
		}, {
			"file":	"main/SAPI.c",
			"line":	344,
			"primary_score":	999673,
			"second_score":	189834
		}, {
			"file":	"main/SAPI.c",
			"line":	345,
			"primary_score":	999673,
			"second_score":	189833
		}, {
			"file":	"main/SAPI.c",
			"line":	346,
			"primary_score":	999673,
			"second_score":	189832
		}, {
			"file":	"main/SAPI.c",
			"line":	347,
			"primary_score":	999673,
			"second_score":	189831
		}, {
			"file":	"main/SAPI.c",
			"line":	348,
			"primary_score":	999673,
			"second_score":	189830
		}, {
			"file":	"main/SAPI.c",
			"line":	349,
			"primary_score":	999673,
			"second_score":	189829
		}, {
			"file":	"main/SAPI.c",
			"line":	350,
			"primary_score":	999673,
			"second_score":	189828
		}, {
			"file":	"main/SAPI.c",
			"line":	351,
			"primary_score":	999673,
			"second_score":	189827
		}, {
			"file":	"main/SAPI.c",
			"line":	352,
			"primary_score":	999673,
			"second_score":	189826
		}, {
			"file":	"main/SAPI.c",
			"line":	353,
			"primary_score":	999673,
			"second_score":	189825
		}, {
			"file":	"main/SAPI.c",
			"line":	354,
			"primary_score":	999673,
			"second_score":	189824
		}, {
			"file":	"main/SAPI.c",
			"line":	359,
			"primary_score":	999673,
			"second_score":	189823
		}, {
			"file":	"main/SAPI.c",
			"line":	362,
			"primary_score":	999673,
			"second_score":	189822
		}, {
			"file":	"main/SAPI.c",
			"line":	364,
			"primary_score":	999673,
			"second_score":	189821
		}, {
			"file":	"main/SAPI.c",
			"line":	367,
			"primary_score":	999673,
			"second_score":	189820
		}, {
			"file":	"main/SAPI.c",
			"line":	395,
			"primary_score":	999673,
			"second_score":	189819
		}, {
			"file":	"main/SAPI.c",
			"line":	396,
			"primary_score":	999673,
			"second_score":	189818
		}, {
			"file":	"main/SAPI.c",
			"line":	403,
			"primary_score":	999673,
			"second_score":	109193
		}, {
			"file":	"main/SAPI.c",
			"line":	411,
			"primary_score":	999673,
			"second_score":	109233
		}, {
			"file":	"main/SAPI.c",
			"line":	412,
			"primary_score":	999673,
			"second_score":	109229
		}, {
			"file":	"main/SAPI.c",
			"line":	414,
			"primary_score":	999673,
			"second_score":	109228
		}, {
			"file":	"main/SAPI.c",
			"line":	425,
			"primary_score":	999673,
			"second_score":	109227
		}, {
			"file":	"main/SAPI.c",
			"line":	428,
			"primary_score":	999673,
			"second_score":	109226
		}, {
			"file":	"main/SAPI.c",
			"line":	431,
			"primary_score":	999673,
			"second_score":	109225
		}, {
			"file":	"main/SAPI.c",
			"line":	434,
			"primary_score":	999673,
			"second_score":	109224
		}, {
			"file":	"main/SAPI.c",
			"line":	437,
			"primary_score":	999673,
			"second_score":	109223
		}, {
			"file":	"main/SAPI.c",
			"line":	440,
			"primary_score":	999673,
			"second_score":	109222
		}, {
			"file":	"main/SAPI.c",
			"line":	443,
			"primary_score":	999673,
			"second_score":	109221
		}, {
			"file":	"main/SAPI.c",
			"line":	444,
			"primary_score":	999673,
			"second_score":	109220
		}, {
			"file":	"main/SAPI.c",
			"line":	446,
			"primary_score":	999673,
			"second_score":	109216
		}, {
			"file":	"main/SAPI.c",
			"line":	449,
			"primary_score":	999673,
			"second_score":	109215
		}, {
			"file":	"main/SAPI.c",
			"line":	450,
			"primary_score":	999673,
			"second_score":	109214
		}, {
			"file":	"main/SAPI.c",
			"line":	451,
			"primary_score":	999673,
			"second_score":	109195
		}, {
			"file":	"main/SAPI.c",
			"line":	453,
			"primary_score":	999673,
			"second_score":	109194
		}, {
			"file":	"main/SAPI.c",
			"line":	454,
			"primary_score":	999673,
			"second_score":	109192
		}, {
			"file":	"main/SAPI.c",
			"line":	455,
			"primary_score":	999673,
			"second_score":	109191
		}, {
			"file":	"main/SAPI.c",
			"line":	456,
			"primary_score":	999673,
			"second_score":	109190
		}, {
			"file":	"main/SAPI.c",
			"line":	457,
			"primary_score":	999673,
			"second_score":	109189
		}, {
			"file":	"main/SAPI.c",
			"line":	509,
			"primary_score":	999673,
			"second_score":	130563
		}, {
			"file":	"main/SAPI.c",
			"line":	510,
			"primary_score":	999673,
			"second_score":	130562
		}, {
			"file":	"main/SAPI.c",
			"line":	512,
			"primary_score":	999673,
			"second_score":	130561
		}, {
			"file":	"main/SAPI.c",
			"line":	513,
			"primary_score":	999673,
			"second_score":	130560
		}, {
			"file":	"main/SAPI.c",
			"line":	515,
			"primary_score":	999673,
			"second_score":	130559
		}, {
			"file":	"main/SAPI.c",
			"line":	518,
			"primary_score":	999673,
			"second_score":	130301
		}, {
			"file":	"main/SAPI.c",
			"line":	519,
			"primary_score":	999673,
			"second_score":	130300
		}, {
			"file":	"main/SAPI.c",
			"line":	521,
			"primary_score":	999673,
			"second_score":	130281
		}, {
			"file":	"main/SAPI.c",
			"line":	526,
			"primary_score":	999673,
			"second_score":	130558
		}, {
			"file":	"main/SAPI.c",
			"line":	527,
			"primary_score":	999673,
			"second_score":	130557
		}, {
			"file":	"main/SAPI.c",
			"line":	528,
			"primary_score":	999673,
			"second_score":	130556
		}, {
			"file":	"main/SAPI.c",
			"line":	529,
			"primary_score":	999673,
			"second_score":	130555
		}, {
			"file":	"main/SAPI.c",
			"line":	530,
			"primary_score":	999673,
			"second_score":	130554
		}, {
			"file":	"main/SAPI.c",
			"line":	531,
			"primary_score":	999673,
			"second_score":	130553
		}, {
			"file":	"main/SAPI.c",
			"line":	532,
			"primary_score":	999673,
			"second_score":	130552
		}, {
			"file":	"main/SAPI.c",
			"line":	534,
			"primary_score":	999673,
			"second_score":	130551
		}, {
			"file":	"main/SAPI.c",
			"line":	547,
			"primary_score":	999673,
			"second_score":	130550
		}, {
			"file":	"main/SAPI.c",
			"line":	555,
			"primary_score":	999673,
			"second_score":	130549
		}, {
			"file":	"main/SAPI.c",
			"line":	557,
			"primary_score":	999673,
			"second_score":	130548
		}, {
			"file":	"main/SAPI.c",
			"line":	560,
			"primary_score":	999673,
			"second_score":	130547
		}, {
			"file":	"main/SAPI.c",
			"line":	561,
			"primary_score":	999673,
			"second_score":	130546
		}, {
			"file":	"main/SAPI.c",
			"line":	562,
			"primary_score":	999673,
			"second_score":	130545
		}, {
			"file":	"main/SAPI.c",
			"line":	563,
			"primary_score":	999673,
			"second_score":	130544
		}, {
			"file":	"main/SAPI.c",
			"line":	577,
			"primary_score":	999673,
			"second_score":	130543
		}, {
			"file":	"main/SAPI.c",
			"line":	580,
			"primary_score":	999673,
			"second_score":	130434
		}, {
			"file":	"main/SAPI.c",
			"line":	583,
			"primary_score":	999673,
			"second_score":	130433
		}, {
			"file":	"main/SAPI.c",
			"line":	591,
			"primary_score":	999673,
			"second_score":	130432
		}, {
			"file":	"main/SAPI.c",
			"line":	592,
			"primary_score":	999673,
			"second_score":	130431
		}, {
			"file":	"main/SAPI.c",
			"line":	603,
			"primary_score":	999673,
			"second_score":	130430
		}, {
			"file":	"main/SAPI.c",
			"line":	604,
			"primary_score":	999673,
			"second_score":	130429
		}, {
			"file":	"main/SAPI.c",
			"line":	606,
			"primary_score":	999673,
			"second_score":	130428
		}, {
			"file":	"main/SAPI.c",
			"line":	616,
			"primary_score":	999673,
			"second_score":	130427
		}, {
			"file":	"main/SAPI.c",
			"line":	627,
			"primary_score":	999673,
			"second_score":	130426
		}, {
			"file":	"main/SAPI.c",
			"line":	628,
			"primary_score":	999673,
			"second_score":	130425
		}, {
			"file":	"main/SAPI.c",
			"line":	629,
			"primary_score":	999673,
			"second_score":	130424
		}, {
			"file":	"main/SAPI.c",
			"line":	630,
			"primary_score":	999673,
			"second_score":	130423
		}, {
			"file":	"main/SAPI.c",
			"line":	631,
			"primary_score":	999673,
			"second_score":	130422
		}, {
			"file":	"main/SAPI.c",
			"line":	632,
			"primary_score":	999673,
			"second_score":	130421
		}, {
			"file":	"main/SAPI.c",
			"line":	633,
			"primary_score":	999673,
			"second_score":	130420
		}, {
			"file":	"main/SAPI.c",
			"line":	634,
			"primary_score":	999673,
			"second_score":	130419
		}, {
			"file":	"main/SAPI.c",
			"line":	635,
			"primary_score":	999673,
			"second_score":	130418
		}, {
			"file":	"main/SAPI.c",
			"line":	639,
			"primary_score":	999673,
			"second_score":	130417
		}, {
			"file":	"main/SAPI.c",
			"line":	643,
			"primary_score":	999673,
			"second_score":	130416
		}, {
			"file":	"main/SAPI.c",
			"line":	644,
			"primary_score":	999673,
			"second_score":	130387
		}, {
			"file":	"main/SAPI.c",
			"line":	645,
			"primary_score":	999673,
			"second_score":	130380
		}, {
			"file":	"main/SAPI.c",
			"line":	646,
			"primary_score":	999673,
			"second_score":	130379
		}, {
			"file":	"main/SAPI.c",
			"line":	649,
			"primary_score":	999673,
			"second_score":	130350
		}, {
			"file":	"main/SAPI.c",
			"line":	658,
			"primary_score":	999673,
			"second_score":	130349
		}, {
			"file":	"main/SAPI.c",
			"line":	659,
			"primary_score":	999673,
			"second_score":	130330
		}, {
			"file":	"main/SAPI.c",
			"line":	660,
			"primary_score":	999673,
			"second_score":	189651
		}, {
			"file":	"main/SAPI.c",
			"line":	676,
			"primary_score":	999673,
			"second_score":	189650
		}, {
			"file":	"main/SAPI.c",
			"line":	747,
			"primary_score":	999673,
			"second_score":	130329
		}, {
			"file":	"main/SAPI.c",
			"line":	748,
			"primary_score":	999673,
			"second_score":	130328
		}, {
			"file":	"main/SAPI.c",
			"line":	752,
			"primary_score":	999673,
			"second_score":	130327
		}, {
			"file":	"main/SAPI.c",
			"line":	755,
			"primary_score":	999673,
			"second_score":	130326
		}, {
			"file":	"main/SAPI.c",
			"line":	756,
			"primary_score":	999673,
			"second_score":	130325
		}, {
			"file":	"main/SAPI.c",
			"line":	760,
			"primary_score":	999673,
			"second_score":	130323
		}, {
			"file":	"main/SAPI.c",
			"line":	775,
			"primary_score":	999673,
			"second_score":	130322
		}, {
			"file":	"main/SAPI.c",
			"line":	777,
			"primary_score":	999673,
			"second_score":	130302
		}, {
			"file":	"main/SAPI.c",
			"line":	783,
			"primary_score":	999673,
			"second_score":	119309
		}, {
			"file":	"main/SAPI.c",
			"line":	784,
			"primary_score":	999673,
			"second_score":	119308
		}, {
			"file":	"main/SAPI.c",
			"line":	786,
			"primary_score":	999673,
			"second_score":	119307
		}, {
			"file":	"main/SAPI.c",
			"line":	787,
			"primary_score":	999673,
			"second_score":	119306
		}, {
			"file":	"main/SAPI.c",
			"line":	793,
			"primary_score":	999673,
			"second_score":	130648
		}, {
			"file":	"main/SAPI.c",
			"line":	794,
			"primary_score":	999673,
			"second_score":	130647
		}, {
			"file":	"main/SAPI.c",
			"line":	795,
			"primary_score":	999673,
			"second_score":	130646
		}, {
			"file":	"main/SAPI.c",
			"line":	796,
			"primary_score":	999673,
			"second_score":	130564
		}, {
			"file":	"main/SAPI.c",
			"line":	799,
			"primary_score":	999673,
			"second_score":	130280
		}, {
			"file":	"main/SAPI.c",
			"line":	801,
			"primary_score":	999673,
			"second_score":	130279
		}, {
			"file":	"main/SAPI.c",
			"line":	802,
			"primary_score":	999673,
			"second_score":	130278
		}, {
			"file":	"main/SAPI.c",
			"line":	807,
			"primary_score":	999673,
			"second_score":	130276
		}, {
			"file":	"main/SAPI.c",
			"line":	810,
			"primary_score":	999673,
			"second_score":	130275
		}, {
			"file":	"main/SAPI.c",
			"line":	841,
			"primary_score":	999673,
			"second_score":	130274
		}, {
			"file":	"main/SAPI.c",
			"line":	843,
			"primary_score":	999673,
			"second_score":	130272
		}, {
			"file":	"main/SAPI.c",
			"line":	915,
			"primary_score":	999673,
			"second_score":	108771
		}, {
			"file":	"main/SAPI.c",
			"line":	916,
			"primary_score":	999673,
			"second_score":	108770
		}, {
			"file":	"main/SAPI.c",
			"line":	917,
			"primary_score":	999673,
			"second_score":	108768
		}, {
			"file":	"main/SAPI.c",
			"line":	989,
			"primary_score":	999673,
			"second_score":	156102
		}, {
			"file":	"main/SAPI.c",
			"line":	991,
			"primary_score":	999673,
			"second_score":	156101
		}, {
			"file":	"main/SAPI.c",
			"line":	994,
			"primary_score":	999673,
			"second_score":	156100
		}, {
			"file":	"main/SAPI.c",
			"line":	996,
			"primary_score":	999673,
			"second_score":	156099
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	838,
			"primary_score":	999673,
			"second_score":	147277
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	846,
			"primary_score":	999673,
			"second_score":	147276
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	847,
			"primary_score":	999673,
			"second_score":	147275
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	848,
			"primary_score":	999673,
			"second_score":	147274
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	850,
			"primary_score":	999673,
			"second_score":	147273
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	852,
			"primary_score":	999673,
			"second_score":	147272
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	853,
			"primary_score":	999673,
			"second_score":	147271
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	887,
			"primary_score":	999673,
			"second_score":	147270
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	888,
			"primary_score":	999673,
			"second_score":	147269
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	890,
			"primary_score":	999673,
			"second_score":	147268
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	895,
			"primary_score":	999673,
			"second_score":	144564
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	896,
			"primary_score":	999673,
			"second_score":	144563
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	897,
			"primary_score":	999673,
			"second_score":	144562
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	898,
			"primary_score":	999673,
			"second_score":	144561
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	902,
			"primary_score":	999673,
			"second_score":	144560
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	904,
			"primary_score":	999673,
			"second_score":	144559
		}, {
			"file":	"main/getopt.c",
			"line":	60,
			"primary_score":	999673,
			"second_score":	192597
		}, {
			"file":	"main/getopt.c",
			"line":	61,
			"primary_score":	999673,
			"second_score":	192596
		}, {
			"file":	"main/getopt.c",
			"line":	63,
			"primary_score":	999673,
			"second_score":	192595
		}, {
			"file":	"main/getopt.c",
			"line":	65,
			"primary_score":	999673,
			"second_score":	192594
		}, {
			"file":	"main/getopt.c",
			"line":	66,
			"primary_score":	999673,
			"second_score":	192593
		}, {
			"file":	"main/getopt.c",
			"line":	68,
			"primary_score":	999673,
			"second_score":	192648
		}, {
			"file":	"main/getopt.c",
			"line":	69,
			"primary_score":	999673,
			"second_score":	192647
		}, {
			"file":	"main/getopt.c",
			"line":	70,
			"primary_score":	999673,
			"second_score":	192067
		}, {
			"file":	"main/getopt.c",
			"line":	72,
			"primary_score":	999673,
			"second_score":	192646
		}, {
			"file":	"main/getopt.c",
			"line":	82,
			"primary_score":	999673,
			"second_score":	192645
		}, {
			"file":	"main/getopt.c",
			"line":	116,
			"primary_score":	999673,
			"second_score":	192644
		}, {
			"file":	"main/getopt.c",
			"line":	117,
			"primary_score":	999673,
			"second_score":	192643
		}, {
			"file":	"main/getopt.c",
			"line":	118,
			"primary_score":	999673,
			"second_score":	192642
		}, {
			"file":	"main/getopt.c",
			"line":	121,
			"primary_score":	999673,
			"second_score":	192641
		}, {
			"file":	"main/getopt.c",
			"line":	126,
			"primary_score":	999673,
			"second_score":	192640
		}, {
			"file":	"main/getopt.c",
			"line":	128,
			"primary_score":	999673,
			"second_score":	192639
		}, {
			"file":	"main/getopt.c",
			"line":	129,
			"primary_score":	999673,
			"second_score":	192638
		}, {
			"file":	"main/getopt.c",
			"line":	130,
			"primary_score":	999673,
			"second_score":	192613
		}, {
			"file":	"main/getopt.c",
			"line":	131,
			"primary_score":	999673,
			"second_score":	192612
		}, {
			"file":	"main/getopt.c",
			"line":	143,
			"primary_score":	999673,
			"second_score":	192611
		}, {
			"file":	"main/getopt.c",
			"line":	144,
			"primary_score":	999673,
			"second_score":	192610
		}, {
			"file":	"main/getopt.c",
			"line":	148,
			"primary_score":	999673,
			"second_score":	192609
		}, {
			"file":	"main/getopt.c",
			"line":	151,
			"primary_score":	999673,
			"second_score":	192608
		}, {
			"file":	"main/getopt.c",
			"line":	152,
			"primary_score":	999673,
			"second_score":	192607
		}, {
			"file":	"main/getopt.c",
			"line":	153,
			"primary_score":	999673,
			"second_score":	192606
		}, {
			"file":	"main/getopt.c",
			"line":	154,
			"primary_score":	999673,
			"second_score":	192605
		}, {
			"file":	"main/getopt.c",
			"line":	160,
			"primary_score":	999673,
			"second_score":	192604
		}, {
			"file":	"main/getopt.c",
			"line":	161,
			"primary_score":	999673,
			"second_score":	192603
		}, {
			"file":	"main/getopt.c",
			"line":	171,
			"primary_score":	999673,
			"second_score":	192602
		}, {
			"file":	"main/getopt.c",
			"line":	174,
			"primary_score":	999673,
			"second_score":	166838
		}, {
			"file":	"main/getopt.c",
			"line":	175,
			"primary_score":	999673,
			"second_score":	166837
		}, {
			"file":	"main/getopt.c",
			"line":	177,
			"primary_score":	999673,
			"second_score":	166836
		}, {
			"file":	"main/getopt.c",
			"line":	178,
			"primary_score":	999673,
			"second_score":	166835
		}, {
			"file":	"main/getopt.c",
			"line":	185,
			"primary_score":	999673,
			"second_score":	166834
		}, {
			"file":	"main/main.c",
			"line":	620,
			"primary_score":	999704,
			"second_score":	120636
		}, {
			"file":	"main/main.c",
			"line":	621,
			"primary_score":	999704,
			"second_score":	120635
		}, {
			"file":	"main/main.c",
			"line":	622,
			"primary_score":	999704,
			"second_score":	120634
		}, {
			"file":	"main/main.c",
			"line":	623,
			"primary_score":	999704,
			"second_score":	120633
		}, {
			"file":	"main/main.c",
			"line":	624,
			"primary_score":	999704,
			"second_score":	120632
		}, {
			"file":	"main/main.c",
			"line":	626,
			"primary_score":	999704,
			"second_score":	120631
		}, {
			"file":	"main/main.c",
			"line":	627,
			"primary_score":	999704,
			"second_score":	120630
		}, {
			"file":	"main/main.c",
			"line":	628,
			"primary_score":	999704,
			"second_score":	120373
		}, {
			"file":	"main/main.c",
			"line":	629,
			"primary_score":	999704,
			"second_score":	120347
		}, {
			"file":	"main/main.c",
			"line":	630,
			"primary_score":	999704,
			"second_score":	120328
		}, {
			"file":	"main/main.c",
			"line":	632,
			"primary_score":	999704,
			"second_score":	120327
		}, {
			"file":	"main/main.c",
			"line":	1387,
			"primary_score":	999673,
			"second_score":	192563
		}, {
			"file":	"main/main.c",
			"line":	1397,
			"primary_score":	999673,
			"second_score":	192562
		}, {
			"file":	"main/main.c",
			"line":	1398,
			"primary_score":	999673,
			"second_score":	192556
		}, {
			"file":	"main/main.c",
			"line":	1399,
			"primary_score":	999673,
			"second_score":	192555
		}, {
			"file":	"main/main.c",
			"line":	1401,
			"primary_score":	999673,
			"second_score":	192554
		}, {
			"file":	"main/main.c",
			"line":	1404,
			"primary_score":	999673,
			"second_score":	192546
		}, {
			"file":	"main/main.c",
			"line":	1405,
			"primary_score":	999673,
			"second_score":	192545
		}, {
			"file":	"main/main.c",
			"line":	1406,
			"primary_score":	999673,
			"second_score":	192544
		}, {
			"file":	"main/main.c",
			"line":	1407,
			"primary_score":	999673,
			"second_score":	192543
		}, {
			"file":	"main/main.c",
			"line":	1409,
			"primary_score":	999673,
			"second_score":	192542
		}, {
			"file":	"main/main.c",
			"line":	1410,
			"primary_score":	999673,
			"second_score":	189844
		}, {
			"file":	"main/main.c",
			"line":	1412,
			"primary_score":	999673,
			"second_score":	189810
		}, {
			"file":	"main/main.c",
			"line":	1413,
			"primary_score":	999673,
			"second_score":	189809
		}, {
			"file":	"main/main.c",
			"line":	1419,
			"primary_score":	999673,
			"second_score":	189796
		}, {
			"file":	"main/main.c",
			"line":	1423,
			"primary_score":	999673,
			"second_score":	189795
		}, {
			"file":	"main/main.c",
			"line":	1424,
			"primary_score":	999673,
			"second_score":	189794
		}, {
			"file":	"main/main.c",
			"line":	1427,
			"primary_score":	999673,
			"second_score":	189619
		}, {
			"file":	"main/main.c",
			"line":	1429,
			"primary_score":	999673,
			"second_score":	189618
		}, {
			"file":	"main/main.c",
			"line":	1435,
			"primary_score":	999673,
			"second_score":	189617
		}, {
			"file":	"main/main.c",
			"line":	1436,
			"primary_score":	999673,
			"second_score":	189616
		}, {
			"file":	"main/main.c",
			"line":	1442,
			"primary_score":	999673,
			"second_score":	189614
		}, {
			"file":	"main/main.c",
			"line":	1443,
			"primary_score":	999673,
			"second_score":	150707
		}, {
			"file":	"main/main.c",
			"line":	1444,
			"primary_score":	999673,
			"second_score":	150246
		}, {
			"file":	"main/main.c",
			"line":	1447,
			"primary_score":	999673,
			"second_score":	150245
		}, {
			"file":	"main/main.c",
			"line":	1449,
			"primary_score":	999673,
			"second_score":	150243
		}, {
			"file":	"main/main.c",
			"line":	1451,
			"primary_score":	999673,
			"second_score":	150242
		}, {
			"file":	"main/main.c",
			"line":	1569,
			"primary_score":	999673,
			"second_score":	119509
		}, {
			"file":	"main/main.c",
			"line":	1570,
			"primary_score":	999673,
			"second_score":	119508
		}, {
			"file":	"main/main.c",
			"line":	1572,
			"primary_score":	999673,
			"second_score":	119507
		}, {
			"file":	"main/main.c",
			"line":	1577,
			"primary_score":	999673,
			"second_score":	119506
		}, {
			"file":	"main/main.c",
			"line":	1578,
			"primary_score":	999673,
			"second_score":	119505
		}, {
			"file":	"main/main.c",
			"line":	1580,
			"primary_score":	999673,
			"second_score":	119504
		}, {
			"file":	"main/main.c",
			"line":	1583,
			"primary_score":	999673,
			"second_score":	119497
		}, {
			"file":	"main/main.c",
			"line":	1584,
			"primary_score":	999673,
			"second_score":	119491
		}, {
			"file":	"main/main.c",
			"line":	1585,
			"primary_score":	999673,
			"second_score":	119489
		}, {
			"file":	"main/main.c",
			"line":	1588,
			"primary_score":	999673,
			"second_score":	119487
		}, {
			"file":	"main/main.c",
			"line":	1589,
			"primary_score":	999673,
			"second_score":	119481
		}, {
			"file":	"main/main.c",
			"line":	1590,
			"primary_score":	999673,
			"second_score":	119330
		}, {
			"file":	"main/main.c",
			"line":	1593,
			"primary_score":	999673,
			"second_score":	119328
		}, {
			"file":	"main/main.c",
			"line":	1594,
			"primary_score":	999673,
			"second_score":	119322
		}, {
			"file":	"main/main.c",
			"line":	1595,
			"primary_score":	999673,
			"second_score":	119321
		}, {
			"file":	"main/main.c",
			"line":	1599,
			"primary_score":	999673,
			"second_score":	119320
		}, {
			"file":	"main/main.c",
			"line":	1600,
			"primary_score":	999673,
			"second_score":	119318
		}, {
			"file":	"main/main.c",
			"line":	1603,
			"primary_score":	999673,
			"second_score":	119316
		}, {
			"file":	"main/main.c",
			"line":	1604,
			"primary_score":	999673,
			"second_score":	119310
		}, {
			"file":	"main/main.c",
			"line":	1605,
			"primary_score":	999673,
			"second_score":	119305
		}, {
			"file":	"main/main.c",
			"line":	1608,
			"primary_score":	999673,
			"second_score":	119303
		}, {
			"file":	"main/main.c",
			"line":	1609,
			"primary_score":	999673,
			"second_score":	119302
		}, {
			"file":	"main/main.c",
			"line":	1610,
			"primary_score":	999673,
			"second_score":	118492
		}, {
			"file":	"main/main.c",
			"line":	1614,
			"primary_score":	999673,
			"second_score":	118489
		}, {
			"file":	"main/main.c",
			"line":	1615,
			"primary_score":	999673,
			"second_score":	118483
		}, {
			"file":	"main/main.c",
			"line":	1617,
			"primary_score":	999673,
			"second_score":	118482
		}, {
			"file":	"main/main.c",
			"line":	1618,
			"primary_score":	999673,
			"second_score":	118335
		}, {
			"file":	"main/main.c",
			"line":	1619,
			"primary_score":	999673,
			"second_score":	118334
		}, {
			"file":	"main/main.c",
			"line":	1622,
			"primary_score":	999673,
			"second_score":	118302
		}, {
			"file":	"main/main.c",
			"line":	1625,
			"primary_score":	999673,
			"second_score":	118300
		}, {
			"file":	"main/main.c",
			"line":	1629,
			"primary_score":	999673,
			"second_score":	118299
		}, {
			"file":	"main/main.c",
			"line":	1635,
			"primary_score":	999673,
			"second_score":	118298
		}, {
			"file":	"main/main.c",
			"line":	1638,
			"primary_score":	999673,
			"second_score":	109436
		}, {
			"file":	"main/main.c",
			"line":	1639,
			"primary_score":	999673,
			"second_score":	109430
		}, {
			"file":	"main/main.c",
			"line":	1640,
			"primary_score":	999673,
			"second_score":	109242
		}, {
			"file":	"main/main.c",
			"line":	1643,
			"primary_score":	999673,
			"second_score":	109240
		}, {
			"file":	"main/main.c",
			"line":	1644,
			"primary_score":	999673,
			"second_score":	109234
		}, {
			"file":	"main/main.c",
			"line":	1645,
			"primary_score":	999673,
			"second_score":	109188
		}, {
			"file":	"main/main.c",
			"line":	1648,
			"primary_score":	999673,
			"second_score":	109186
		}, {
			"file":	"main/main.c",
			"line":	1649,
			"primary_score":	999673,
			"second_score":	109180
		}, {
			"file":	"main/main.c",
			"line":	1650,
			"primary_score":	999673,
			"second_score":	109177
		}, {
			"file":	"main/main.c",
			"line":	1653,
			"primary_score":	999673,
			"second_score":	109175
		}, {
			"file":	"main/main.c",
			"line":	1654,
			"primary_score":	999673,
			"second_score":	109169
		}, {
			"file":	"main/main.c",
			"line":	1655,
			"primary_score":	999673,
			"second_score":	108794
		}, {
			"file":	"main/main.c",
			"line":	1658,
			"primary_score":	999673,
			"second_score":	108792
		}, {
			"file":	"main/main.c",
			"line":	1659,
			"primary_score":	999673,
			"second_score":	108786
		}, {
			"file":	"main/main.c",
			"line":	1660,
			"primary_score":	999673,
			"second_score":	108784
		}, {
			"file":	"main/main.c",
			"line":	1689,
			"primary_score":	999673,
			"second_score":	122029
		}, {
			"file":	"main/main.c",
			"line":	1690,
			"primary_score":	999673,
			"second_score":	122028
		}, {
			"file":	"main/main.c",
			"line":	1710,
			"primary_score":	999673,
			"second_score":	3152
		}, {
			"file":	"main/main.c",
			"line":	1713,
			"primary_score":	999673,
			"second_score":	3151
		}, {
			"file":	"main/main.c",
			"line":	1716,
			"primary_score":	999673,
			"second_score":	3150
		}, {
			"file":	"main/main.c",
			"line":	1719,
			"primary_score":	999673,
			"second_score":	3149
		}, {
			"file":	"main/main.c",
			"line":	1723,
			"primary_score":	999673,
			"second_score":	3148
		}, {
			"file":	"main/main.c",
			"line":	2086,
			"primary_score":	999673,
			"second_score":	195381
		}, {
			"file":	"main/main.c",
			"line":	2089,
			"primary_score":	999673,
			"second_score":	195341
		}, {
			"file":	"main/main.c",
			"line":	2093,
			"primary_score":	999673,
			"second_score":	195340
		}, {
			"file":	"main/main.c",
			"line":	2098,
			"primary_score":	999673,
			"second_score":	195288
		}, {
			"file":	"main/main.c",
			"line":	2099,
			"primary_score":	999673,
			"second_score":	195262
		}, {
			"file":	"main/main.c",
			"line":	2101,
			"primary_score":	999673,
			"second_score":	195261
		}, {
			"file":	"main/main.c",
			"line":	2104,
			"primary_score":	999673,
			"second_score":	194886
		}, {
			"file":	"main/main.c",
			"line":	2127,
			"primary_score":	999673,
			"second_score":	108775
		}, {
			"file":	"main/main.c",
			"line":	2129,
			"primary_score":	999673,
			"second_score":	108774
		}, {
			"file":	"main/main.c",
			"line":	2131,
			"primary_score":	999673,
			"second_score":	108773
		}, {
			"file":	"main/main.c",
			"line":	2144,
			"primary_score":	999673,
			"second_score":	108772
		}, {
			"file":	"main/main.c",
			"line":	2146,
			"primary_score":	999673,
			"second_score":	108767
		}, {
			"file":	"main/main.c",
			"line":	2149,
			"primary_score":	999673,
			"second_score":	6249
		}, {
			"file":	"main/main.c",
			"line":	2151,
			"primary_score":	999673,
			"second_score":	6186
		}, {
			"file":	"main/main.c",
			"line":	2152,
			"primary_score":	999673,
			"second_score":	6158
		}, {
			"file":	"main/main.c",
			"line":	2155,
			"primary_score":	999673,
			"second_score":	3525
		}, {
			"file":	"main/main.c",
			"line":	2158,
			"primary_score":	999673,
			"second_score":	3203
		}, {
			"file":	"main/main.c",
			"line":	2159,
			"primary_score":	999673,
			"second_score":	3174
		}, {
			"file":	"main/main.c",
			"line":	2160,
			"primary_score":	999673,
			"second_score":	3153
		}, {
			"file":	"main/main.c",
			"line":	2161,
			"primary_score":	999673,
			"second_score":	3143
		}, {
			"file":	"main/main.c",
			"line":	2167,
			"primary_score":	999673,
			"second_score":	3138
		}, {
			"file":	"main/main.c",
			"line":	2169,
			"primary_score":	999673,
			"second_score":	3136
		}, {
			"file":	"main/main.c",
			"line":	2183,
			"primary_score":	999673,
			"second_score":	147301
		}, {
			"file":	"main/main.c",
			"line":	2184,
			"primary_score":	999673,
			"second_score":	147300
		}, {
			"file":	"main/main.c",
			"line":	2188,
			"primary_score":	999673,
			"second_score":	147299
		}, {
			"file":	"main/main.c",
			"line":	2189,
			"primary_score":	999673,
			"second_score":	147298
		}, {
			"file":	"main/main.c",
			"line":	2191,
			"primary_score":	999673,
			"second_score":	147297
		}, {
			"file":	"main/main.c",
			"line":	2193,
			"primary_score":	999673,
			"second_score":	147296
		}, {
			"file":	"main/main.c",
			"line":	2194,
			"primary_score":	999673,
			"second_score":	147295
		}, {
			"file":	"main/main.c",
			"line":	2200,
			"primary_score":	999673,
			"second_score":	147292
		}, {
			"file":	"main/main.c",
			"line":	2201,
			"primary_score":	999673,
			"second_score":	147291
		}, {
			"file":	"main/main.c",
			"line":	2204,
			"primary_score":	999673,
			"second_score":	147290
		}, {
			"file":	"main/main.c",
			"line":	2205,
			"primary_score":	999673,
			"second_score":	147284
		}, {
			"file":	"main/main.c",
			"line":	2213,
			"primary_score":	999673,
			"second_score":	147283
		}, {
			"file":	"main/main.c",
			"line":	2215,
			"primary_score":	999673,
			"second_score":	147282
		}, {
			"file":	"main/main.c",
			"line":	2228,
			"primary_score":	999673,
			"second_score":	147281
		}, {
			"file":	"main/main.c",
			"line":	2233,
			"primary_score":	999673,
			"second_score":	147280
		}, {
			"file":	"main/main.c",
			"line":	2234,
			"primary_score":	999673,
			"second_score":	147279
		}, {
			"file":	"main/main.c",
			"line":	2236,
			"primary_score":	999673,
			"second_score":	147278
		}, {
			"file":	"main/main.c",
			"line":	2237,
			"primary_score":	999673,
			"second_score":	144558
		}, {
			"file":	"main/main.c",
			"line":	2238,
			"primary_score":	999673,
			"second_score":	144557
		}, {
			"file":	"main/main.c",
			"line":	2239,
			"primary_score":	999673,
			"second_score":	144200
		}, {
			"file":	"main/main.c",
			"line":	2243,
			"primary_score":	999673,
			"second_score":	144090
		}, {
			"file":	"main/main.c",
			"line":	2250,
			"primary_score":	999673,
			"second_score":	144089
		}, {
			"file":	"main/main.c",
			"line":	2253,
			"primary_score":	999673,
			"second_score":	144088
		}, {
			"file":	"main/main.c",
			"line":	2260,
			"primary_score":	999673,
			"second_score":	144087
		}, {
			"file":	"main/main.c",
			"line":	2262,
			"primary_score":	999673,
			"second_score":	144086
		}, {
			"file":	"main/main.c",
			"line":	2268,
			"primary_score":	999673,
			"second_score":	144085
		}, {
			"file":	"main/main.c",
			"line":	2270,
			"primary_score":	999673,
			"second_score":	119521
		}, {
			"file":	"main/main.c",
			"line":	2278,
			"primary_score":	999673,
			"second_score":	119519
		}, {
			"file":	"main/main.c",
			"line":	2281,
			"primary_score":	999673,
			"second_score":	119518
		}, {
			"file":	"main/main.c",
			"line":	2283,
			"primary_score":	999673,
			"second_score":	119516
		}, {
			"file":	"main/output.c",
			"line":	88,
			"primary_score":	999673,
			"second_score":	192553
		}, {
			"file":	"main/output.c",
			"line":	89,
			"primary_score":	999673,
			"second_score":	192552
		}, {
			"file":	"main/output.c",
			"line":	90,
			"primary_score":	999673,
			"second_score":	192551
		}, {
			"file":	"main/output.c",
			"line":	91,
			"primary_score":	999673,
			"second_score":	192550
		}, {
			"file":	"main/output.c",
			"line":	92,
			"primary_score":	999673,
			"second_score":	192549
		}, {
			"file":	"main/output.c",
			"line":	93,
			"primary_score":	999673,
			"second_score":	192548
		}, {
			"file":	"main/output.c",
			"line":	94,
			"primary_score":	999673,
			"second_score":	192547
		}, {
			"file":	"main/output.c",
			"line":	119,
			"primary_score":	999673,
			"second_score":	122027
		}, {
			"file":	"main/output.c",
			"line":	332,
			"primary_score":	999673,
			"second_score":	119319
		}, {
			"file":	"main/output.c",
			"line":	342,
			"primary_score":	999673,
			"second_score":	189615
		}, {
			"file":	"main/output.c",
			"line":	677,
			"primary_score":	999673,
			"second_score":	122026
		}, {
			"file":	"main/output.c",
			"line":	679,
			"primary_score":	999673,
			"second_score":	122025
		}, {
			"file":	"main/output.c",
			"line":	683,
			"primary_score":	999673,
			"second_score":	122024
		}, {
			"file":	"main/output.c",
			"line":	685,
			"primary_score":	999673,
			"second_score":	122009
		}, {
			"file":	"main/output.c",
			"line":	686,
			"primary_score":	999673,
			"second_score":	122008
		}, {
			"file":	"main/output.c",
			"line":	689,
			"primary_score":	999673,
			"second_score":	122003
		}, {
			"file":	"main/output.c",
			"line":	697,
			"primary_score":	999673,
			"second_score":	130655
		}, {
			"file":	"main/output.c",
			"line":	699,
			"primary_score":	999673,
			"second_score":	130654
		}, {
			"file":	"main/output.c",
			"line":	706,
			"primary_score":	999673,
			"second_score":	130653
		}, {
			"file":	"main/output.c",
			"line":	707,
			"primary_score":	999673,
			"second_score":	130270
		}, {
			"file":	"main/output.c",
			"line":	710,
			"primary_score":	999673,
			"second_score":	130268
		}, {
			"file":	"main/output.c",
			"line":	711,
			"primary_score":	999673,
			"second_score":	130266
		}, {
			"file":	"main/output.c",
			"line":	712,
			"primary_score":	999673,
			"second_score":	130263
		}, {
			"file":	"main/output.c",
			"line":	715,
			"primary_score":	999673,
			"second_score":	130259
		}, {
			"file":	"main/output.c",
			"line":	716,
			"primary_score":	999673,
			"second_score":	130258
		}, {
			"file":	"main/output.c",
			"line":	719,
			"primary_score":	999673,
			"second_score":	130233
		}, {
			"file":	"main/php_ini.c",
			"line":	194,
			"primary_score":	999673,
			"second_score":	3214
		}, {
			"file":	"main/php_ini.c",
			"line":	197,
			"primary_score":	999673,
			"second_score":	3213
		}, {
			"file":	"main/php_ini.c",
			"line":	198,
			"primary_score":	999673,
			"second_score":	3212
		}, {
			"file":	"main/php_ini.c",
			"line":	733,
			"primary_score":	999673,
			"second_score":	3524
		}, {
			"file":	"main/php_ini.c",
			"line":	734,
			"primary_score":	999673,
			"second_score":	3206
		}, {
			"file":	"main/php_ini.c",
			"line":	738,
			"primary_score":	999673,
			"second_score":	3205
		}, {
			"file":	"main/php_ini.c",
			"line":	742,
			"primary_score":	999673,
			"second_score":	3204
		}, {
			"file":	"main/php_ini.c",
			"line":	897,
			"primary_score":	999673,
			"second_score":	195339
		}, {
			"file":	"main/php_ini.c",
			"line":	899,
			"primary_score":	999673,
			"second_score":	195338
		}, {
			"file":	"main/php_ini.c",
			"line":	900,
			"primary_score":	999673,
			"second_score":	195290
		}, {
			"file":	"main/php_ini.c",
			"line":	901,
			"primary_score":	999673,
			"second_score":	195289
		}, {
			"file":	"main/php_ini.c",
			"line":	906,
			"primary_score":	999673,
			"second_score":	195384
		}, {
			"file":	"main/php_ini.c",
			"line":	907,
			"primary_score":	999673,
			"second_score":	195383
		}, {
			"file":	"main/php_logos.c",
			"line":	67,
			"primary_score":	999673,
			"second_score":	6185
		}, {
			"file":	"main/php_logos.c",
			"line":	68,
			"primary_score":	999673,
			"second_score":	6159
		}, {
			"file":	"main/php_open_temporary_file.c",
			"line":	183,
			"primary_score":	999673,
			"second_score":	3137
		}, {
			"file":	"main/php_ticks.c",
			"line":	32,
			"primary_score":	999673,
			"second_score":	119503
		}, {
			"file":	"main/php_ticks.c",
			"line":	37,
			"primary_score":	999673,
			"second_score":	3147
		}, {
			"file":	"main/php_variables.c",
			"line":	39,
			"primary_score":	999673,
			"second_score":	162223
		}, {
			"file":	"main/php_variables.c",
			"line":	45,
			"primary_score":	999673,
			"second_score":	162222
		}, {
			"file":	"main/php_variables.c",
			"line":	46,
			"primary_score":	999673,
			"second_score":	162221
		}, {
			"file":	"main/php_variables.c",
			"line":	49,
			"primary_score":	999673,
			"second_score":	162220
		}, {
			"file":	"main/php_variables.c",
			"line":	50,
			"primary_score":	999673,
			"second_score":	162219
		}, {
			"file":	"main/php_variables.c",
			"line":	53,
			"primary_score":	999673,
			"second_score":	162218
		}, {
			"file":	"main/php_variables.c",
			"line":	55,
			"primary_score":	999673,
			"second_score":	162190
		}, {
			"file":	"main/php_variables.c",
			"line":	57,
			"primary_score":	999673,
			"second_score":	162189
		}, {
			"file":	"main/php_variables.c",
			"line":	62,
			"primary_score":	999673,
			"second_score":	156097
		}, {
			"file":	"main/php_variables.c",
			"line":	63,
			"primary_score":	999673,
			"second_score":	156096
		}, {
			"file":	"main/php_variables.c",
			"line":	64,
			"primary_score":	999673,
			"second_score":	156095
		}, {
			"file":	"main/php_variables.c",
			"line":	65,
			"primary_score":	999673,
			"second_score":	156094
		}, {
			"file":	"main/php_variables.c",
			"line":	66,
			"primary_score":	999673,
			"second_score":	156093
		}, {
			"file":	"main/php_variables.c",
			"line":	67,
			"primary_score":	999673,
			"second_score":	156092
		}, {
			"file":	"main/php_variables.c",
			"line":	68,
			"primary_score":	999673,
			"second_score":	156091
		}, {
			"file":	"main/php_variables.c",
			"line":	69,
			"primary_score":	999673,
			"second_score":	156090
		}, {
			"file":	"main/php_variables.c",
			"line":	71,
			"primary_score":	999673,
			"second_score":	156089
		}, {
			"file":	"main/php_variables.c",
			"line":	73,
			"primary_score":	999673,
			"second_score":	156088
		}, {
			"file":	"main/php_variables.c",
			"line":	74,
			"primary_score":	999673,
			"second_score":	156087
		}, {
			"file":	"main/php_variables.c",
			"line":	81,
			"primary_score":	999673,
			"second_score":	156086
		}, {
			"file":	"main/php_variables.c",
			"line":	91,
			"primary_score":	999673,
			"second_score":	156085
		}, {
			"file":	"main/php_variables.c",
			"line":	92,
			"primary_score":	999673,
			"second_score":	156056
		}, {
			"file":	"main/php_variables.c",
			"line":	94,
			"primary_score":	999673,
			"second_score":	156055
		}, {
			"file":	"main/php_variables.c",
			"line":	99,
			"primary_score":	999673,
			"second_score":	156054
		}, {
			"file":	"main/php_variables.c",
			"line":	100,
			"primary_score":	999673,
			"second_score":	156031
		}, {
			"file":	"main/php_variables.c",
			"line":	102,
			"primary_score":	999673,
			"second_score":	156030
		}, {
			"file":	"main/php_variables.c",
			"line":	109,
			"primary_score":	999673,
			"second_score":	156029
		}, {
			"file":	"main/php_variables.c",
			"line":	111,
			"primary_score":	999673,
			"second_score":	156028
		}, {
			"file":	"main/php_variables.c",
			"line":	118,
			"primary_score":	999673,
			"second_score":	156027
		}, {
			"file":	"main/php_variables.c",
			"line":	126,
			"primary_score":	999673,
			"second_score":	156026
		}, {
			"file":	"main/php_variables.c",
			"line":	127,
			"primary_score":	999673,
			"second_score":	156025
		}, {
			"file":	"main/php_variables.c",
			"line":	129,
			"primary_score":	999673,
			"second_score":	156024
		}, {
			"file":	"main/php_variables.c",
			"line":	216,
			"primary_score":	999673,
			"second_score":	156023
		}, {
			"file":	"main/php_variables.c",
			"line":	217,
			"primary_score":	999673,
			"second_score":	156022
		}, {
			"file":	"main/php_variables.c",
			"line":	218,
			"primary_score":	999673,
			"second_score":	155913
		}, {
			"file":	"main/php_variables.c",
			"line":	219,
			"primary_score":	999673,
			"second_score":	155912
		}, {
			"file":	"main/php_variables.c",
			"line":	220,
			"primary_score":	999673,
			"second_score":	155911
		}, {
			"file":	"main/php_variables.c",
			"line":	223,
			"primary_score":	999673,
			"second_score":	155910
		}, {
			"file":	"main/php_variables.c",
			"line":	226,
			"primary_score":	999673,
			"second_score":	155909
		}, {
			"file":	"main/php_variables.c",
			"line":	234,
			"primary_score":	999673,
			"second_score":	155908
		}, {
			"file":	"main/php_variables.c",
			"line":	239,
			"primary_score":	999673,
			"second_score":	155907
		}, {
			"file":	"main/php_variables.c",
			"line":	241,
			"primary_score":	999673,
			"second_score":	155739
		}, {
			"file":	"main/php_variables.c",
			"line":	246,
			"primary_score":	999673,
			"second_score":	155738
		}, {
			"file":	"main/php_variables.c",
			"line":	294,
			"primary_score":	999673,
			"second_score":	175225
		}, {
			"file":	"main/php_variables.c",
			"line":	295,
			"primary_score":	999673,
			"second_score":	175224
		}, {
			"file":	"main/php_variables.c",
			"line":	296,
			"primary_score":	999673,
			"second_score":	175223
		}, {
			"file":	"main/php_variables.c",
			"line":	297,
			"primary_score":	999673,
			"second_score":	175222
		}, {
			"file":	"main/php_variables.c",
			"line":	298,
			"primary_score":	999673,
			"second_score":	175221
		}, {
			"file":	"main/php_variables.c",
			"line":	300,
			"primary_score":	999673,
			"second_score":	175220
		}, {
			"file":	"main/php_variables.c",
			"line":	304,
			"primary_score":	999673,
			"second_score":	175219
		}, {
			"file":	"main/php_variables.c",
			"line":	305,
			"primary_score":	999673,
			"second_score":	175114
		}, {
			"file":	"main/php_variables.c",
			"line":	306,
			"primary_score":	999673,
			"second_score":	174870
		}, {
			"file":	"main/php_variables.c",
			"line":	307,
			"primary_score":	999673,
			"second_score":	174867
		}, {
			"file":	"main/php_variables.c",
			"line":	318,
			"primary_score":	999673,
			"second_score":	175242
		}, {
			"file":	"main/php_variables.c",
			"line":	319,
			"primary_score":	999673,
			"second_score":	175241
		}, {
			"file":	"main/php_variables.c",
			"line":	324,
			"primary_score":	999673,
			"second_score":	174866
		}, {
			"file":	"main/php_variables.c",
			"line":	325,
			"primary_score":	999673,
			"second_score":	174865
		}, {
			"file":	"main/php_variables.c",
			"line":	327,
			"primary_score":	999673,
			"second_score":	174864
		}, {
			"file":	"main/php_variables.c",
			"line":	333,
			"primary_score":	999673,
			"second_score":	174863
		}, {
			"file":	"main/php_variables.c",
			"line":	338,
			"primary_score":	999673,
			"second_score":	174862
		}, {
			"file":	"main/php_variables.c",
			"line":	339,
			"primary_score":	999673,
			"second_score":	175237
		}, {
			"file":	"main/php_variables.c",
			"line":	340,
			"primary_score":	999673,
			"second_score":	175236
		}, {
			"file":	"main/php_variables.c",
			"line":	344,
			"primary_score":	999673,
			"second_score":	175235
		}, {
			"file":	"main/php_variables.c",
			"line":	346,
			"primary_score":	999673,
			"second_score":	174861
		}, {
			"file":	"main/php_variables.c",
			"line":	347,
			"primary_score":	999673,
			"second_score":	174860
		}, {
			"file":	"main/php_variables.c",
			"line":	348,
			"primary_score":	999673,
			"second_score":	174859
		}, {
			"file":	"main/php_variables.c",
			"line":	352,
			"primary_score":	999673,
			"second_score":	174858
		}, {
			"file":	"main/php_variables.c",
			"line":	359,
			"primary_score":	999673,
			"second_score":	174857
		}, {
			"file":	"main/php_variables.c",
			"line":	360,
			"primary_score":	999673,
			"second_score":	174856
		}, {
			"file":	"main/php_variables.c",
			"line":	427,
			"primary_score":	999673,
			"second_score":	174458
		}, {
			"file":	"main/php_variables.c",
			"line":	428,
			"primary_score":	999673,
			"second_score":	174457
		}, {
			"file":	"main/php_variables.c",
			"line":	429,
			"primary_score":	999673,
			"second_score":	174456
		}, {
			"file":	"main/php_variables.c",
			"line":	430,
			"primary_score":	999673,
			"second_score":	174455
		}, {
			"file":	"main/php_variables.c",
			"line":	433,
			"primary_score":	999673,
			"second_score":	174454
		}, {
			"file":	"main/php_variables.c",
			"line":	434,
			"primary_score":	999673,
			"second_score":	174453
		}, {
			"file":	"main/php_variables.c",
			"line":	436,
			"primary_score":	999673,
			"second_score":	174452
		}, {
			"file":	"main/php_variables.c",
			"line":	437,
			"primary_score":	999673,
			"second_score":	162230
		}, {
			"file":	"main/php_variables.c",
			"line":	438,
			"primary_score":	999673,
			"second_score":	162229
		}, {
			"file":	"main/php_variables.c",
			"line":	441,
			"primary_score":	999673,
			"second_score":	162228
		}, {
			"file":	"main/php_variables.c",
			"line":	442,
			"primary_score":	999673,
			"second_score":	162227
		}, {
			"file":	"main/php_variables.c",
			"line":	446,
			"primary_score":	999673,
			"second_score":	162226
		}, {
			"file":	"main/php_variables.c",
			"line":	447,
			"primary_score":	999673,
			"second_score":	162225
		}, {
			"file":	"main/php_variables.c",
			"line":	448,
			"primary_score":	999673,
			"second_score":	162224
		}, {
			"file":	"main/php_variables.c",
			"line":	450,
			"primary_score":	999673,
			"second_score":	161737
		}, {
			"file":	"main/php_variables.c",
			"line":	453,
			"primary_score":	999673,
			"second_score":	161736
		}, {
			"file":	"main/php_variables.c",
			"line":	466,
			"primary_score":	999673,
			"second_score":	155713
		}, {
			"file":	"main/php_variables.c",
			"line":	467,
			"primary_score":	999673,
			"second_score":	155712
		}, {
			"file":	"main/php_variables.c",
			"line":	468,
			"primary_score":	999673,
			"second_score":	155711
		}, {
			"file":	"main/php_variables.c",
			"line":	470,
			"primary_score":	999673,
			"second_score":	155710
		}, {
			"file":	"main/php_variables.c",
			"line":	474,
			"primary_score":	999673,
			"second_score":	155709
		}, {
			"file":	"main/php_variables.c",
			"line":	475,
			"primary_score":	999673,
			"second_score":	155600
		}, {
			"file":	"main/php_variables.c",
			"line":	478,
			"primary_score":	999673,
			"second_score":	155356
		}, {
			"file":	"main/php_variables.c",
			"line":	479,
			"primary_score":	999673,
			"second_score":	155355
		}, {
			"file":	"main/php_variables.c",
			"line":	480,
			"primary_score":	999673,
			"second_score":	155354
		}, {
			"file":	"main/php_variables.c",
			"line":	481,
			"primary_score":	999673,
			"second_score":	155353
		}, {
			"file":	"main/php_variables.c",
			"line":	482,
			"primary_score":	999673,
			"second_score":	155247
		}, {
			"file":	"main/php_variables.c",
			"line":	483,
			"primary_score":	999673,
			"second_score":	155246
		}, {
			"file":	"main/php_variables.c",
			"line":	484,
			"primary_score":	999673,
			"second_score":	155245
		}, {
			"file":	"main/php_variables.c",
			"line":	485,
			"primary_score":	999673,
			"second_score":	155135
		}, {
			"file":	"main/php_variables.c",
			"line":	486,
			"primary_score":	999673,
			"second_score":	155132
		}, {
			"file":	"main/php_variables.c",
			"line":	521,
			"primary_score":	999673,
			"second_score":	154986
		}, {
			"file":	"main/php_variables.c",
			"line":	522,
			"primary_score":	999673,
			"second_score":	154877
		}, {
			"file":	"main/php_variables.c",
			"line":	523,
			"primary_score":	999673,
			"second_score":	154876
		}, {
			"file":	"main/php_variables.c",
			"line":	527,
			"primary_score":	999673,
			"second_score":	154875
		}, {
			"file":	"main/php_variables.c",
			"line":	529,
			"primary_score":	999673,
			"second_score":	154874
		}, {
			"file":	"main/php_variables.c",
			"line":	530,
			"primary_score":	999673,
			"second_score":	154873
		}, {
			"file":	"main/php_variables.c",
			"line":	531,
			"primary_score":	999673,
			"second_score":	154871
		}, {
			"file":	"main/php_variables.c",
			"line":	532,
			"primary_score":	999673,
			"second_score":	154869
		}, {
			"file":	"main/php_variables.c",
			"line":	533,
			"primary_score":	999673,
			"second_score":	154715
		}, {
			"file":	"main/php_variables.c",
			"line":	535,
			"primary_score":	999673,
			"second_score":	154561
		}, {
			"file":	"main/php_variables.c",
			"line":	536,
			"primary_score":	999673,
			"second_score":	154560
		}, {
			"file":	"main/php_variables.c",
			"line":	537,
			"primary_score":	999673,
			"second_score":	154558
		}, {
			"file":	"main/php_variables.c",
			"line":	538,
			"primary_score":	999673,
			"second_score":	154556
		}, {
			"file":	"main/php_variables.c",
			"line":	539,
			"primary_score":	999673,
			"second_score":	154399
		}, {
			"file":	"main/php_variables.c",
			"line":	541,
			"primary_score":	999673,
			"second_score":	153841
		}, {
			"file":	"main/php_variables.c",
			"line":	542,
			"primary_score":	999673,
			"second_score":	153809
		}, {
			"file":	"main/php_variables.c",
			"line":	550,
			"primary_score":	999673,
			"second_score":	147294
		}, {
			"file":	"main/php_variables.c",
			"line":	558,
			"primary_score":	999673,
			"second_score":	147293
		}, {
			"file":	"main/php_variables.c",
			"line":	566,
			"primary_score":	999673,
			"second_score":	174821
		}, {
			"file":	"main/php_variables.c",
			"line":	568,
			"primary_score":	999673,
			"second_score":	174820
		}, {
			"file":	"main/php_variables.c",
			"line":	570,
			"primary_score":	999673,
			"second_score":	174819
		}, {
			"file":	"main/php_variables.c",
			"line":	571,
			"primary_score":	999673,
			"second_score":	174713
		}, {
			"file":	"main/php_variables.c",
			"line":	572,
			"primary_score":	999673,
			"second_score":	174469
		}, {
			"file":	"main/php_variables.c",
			"line":	573,
			"primary_score":	999673,
			"second_score":	174466
		}, {
			"file":	"main/php_variables.c",
			"line":	576,
			"primary_score":	999673,
			"second_score":	174465
		}, {
			"file":	"main/php_variables.c",
			"line":	577,
			"primary_score":	999673,
			"second_score":	174464
		}, {
			"file":	"main/php_variables.c",
			"line":	580,
			"primary_score":	999673,
			"second_score":	174463
		}, {
			"file":	"main/php_variables.c",
			"line":	581,
			"primary_score":	999673,
			"second_score":	174462
		}, {
			"file":	"main/php_variables.c",
			"line":	585,
			"primary_score":	999673,
			"second_score":	156109
		}, {
			"file":	"main/php_variables.c",
			"line":	588,
			"primary_score":	999673,
			"second_score":	156108
		}, {
			"file":	"main/php_variables.c",
			"line":	591,
			"primary_score":	999673,
			"second_score":	156107
		}, {
			"file":	"main/php_variables.c",
			"line":	595,
			"primary_score":	999673,
			"second_score":	156106
		}, {
			"file":	"main/php_variables.c",
			"line":	596,
			"primary_score":	999673,
			"second_score":	156105
		}, {
			"file":	"main/php_variables.c",
			"line":	597,
			"primary_score":	999673,
			"second_score":	156104
		}, {
			"file":	"main/php_variables.c",
			"line":	598,
			"primary_score":	999673,
			"second_score":	156103
		}, {
			"file":	"main/php_variables.c",
			"line":	599,
			"primary_score":	999673,
			"second_score":	156098
		}, {
			"file":	"main/php_variables.c",
			"line":	602,
			"primary_score":	999673,
			"second_score":	155719
		}, {
			"file":	"main/php_variables.c",
			"line":	610,
			"primary_score":	999673,
			"second_score":	150887
		}, {
			"file":	"main/php_variables.c",
			"line":	611,
			"primary_score":	999673,
			"second_score":	150886
		}, {
			"file":	"main/php_variables.c",
			"line":	612,
			"primary_score":	999673,
			"second_score":	150885
		}, {
			"file":	"main/php_variables.c",
			"line":	613,
			"primary_score":	999673,
			"second_score":	150884
		}, {
			"file":	"main/php_variables.c",
			"line":	614,
			"primary_score":	999673,
			"second_score":	150883
		}, {
			"file":	"main/php_variables.c",
			"line":	615,
			"primary_score":	999673,
			"second_score":	150882
		}, {
			"file":	"main/php_variables.c",
			"line":	616,
			"primary_score":	999673,
			"second_score":	150881
		}, {
			"file":	"main/php_variables.c",
			"line":	618,
			"primary_score":	999673,
			"second_score":	150880
		}, {
			"file":	"main/php_variables.c",
			"line":	619,
			"primary_score":	999673,
			"second_score":	150876
		}, {
			"file":	"main/php_variables.c",
			"line":	654,
			"primary_score":	999673,
			"second_score":	189613
		}, {
			"file":	"main/php_variables.c",
			"line":	655,
			"primary_score":	999673,
			"second_score":	189612
		}, {
			"file":	"main/php_variables.c",
			"line":	656,
			"primary_score":	999673,
			"second_score":	189611
		}, {
			"file":	"main/php_variables.c",
			"line":	657,
			"primary_score":	999673,
			"second_score":	189610
		}, {
			"file":	"main/php_variables.c",
			"line":	671,
			"primary_score":	999673,
			"second_score":	189609
		}, {
			"file":	"main/php_variables.c",
			"line":	672,
			"primary_score":	999673,
			"second_score":	189608
		}, {
			"file":	"main/php_variables.c",
			"line":	675,
			"primary_score":	999673,
			"second_score":	189607
		}, {
			"file":	"main/php_variables.c",
			"line":	676,
			"primary_score":	999673,
			"second_score":	189601
		}, {
			"file":	"main/php_variables.c",
			"line":	679,
			"primary_score":	999673,
			"second_score":	189600
		}, {
			"file":	"main/php_variables.c",
			"line":	680,
			"primary_score":	999673,
			"second_score":	174852
		}, {
			"file":	"main/php_variables.c",
			"line":	690,
			"primary_score":	999673,
			"second_score":	175228
		}, {
			"file":	"main/php_variables.c",
			"line":	694,
			"primary_score":	999673,
			"second_score":	175226
		}, {
			"file":	"main/php_variables.c",
			"line":	695,
			"primary_score":	999673,
			"second_score":	174855
		}, {
			"file":	"main/php_variables.c",
			"line":	696,
			"primary_score":	999673,
			"second_score":	174854
		}, {
			"file":	"main/php_variables.c",
			"line":	700,
			"primary_score":	999673,
			"second_score":	174853
		}, {
			"file":	"main/php_variables.c",
			"line":	704,
			"primary_score":	999673,
			"second_score":	175520
		}, {
			"file":	"main/php_variables.c",
			"line":	705,
			"primary_score":	999673,
			"second_score":	175232
		}, {
			"file":	"main/php_variables.c",
			"line":	706,
			"primary_score":	999673,
			"second_score":	175231
		}, {
			"file":	"main/php_variables.c",
			"line":	710,
			"primary_score":	999673,
			"second_score":	175230
		}, {
			"file":	"main/php_variables.c",
			"line":	714,
			"primary_score":	999673,
			"second_score":	189598
		}, {
			"file":	"main/php_variables.c",
			"line":	715,
			"primary_score":	999673,
			"second_score":	189570
		}, {
			"file":	"main/php_variables.c",
			"line":	716,
			"primary_score":	999673,
			"second_score":	175524
		}, {
			"file":	"main/php_variables.c",
			"line":	717,
			"primary_score":	999673,
			"second_score":	175523
		}, {
			"file":	"main/php_variables.c",
			"line":	721,
			"primary_score":	999673,
			"second_score":	175522
		}, {
			"file":	"main/php_variables.c",
			"line":	725,
			"primary_score":	999673,
			"second_score":	174851
		}, {
			"file":	"main/php_variables.c",
			"line":	726,
			"primary_score":	999673,
			"second_score":	174822
		}, {
			"file":	"main/php_variables.c",
			"line":	727,
			"primary_score":	999673,
			"second_score":	155718
		}, {
			"file":	"main/php_variables.c",
			"line":	728,
			"primary_score":	999673,
			"second_score":	155717
		}, {
			"file":	"main/php_variables.c",
			"line":	732,
			"primary_score":	999673,
			"second_score":	155716
		}, {
			"file":	"main/php_variables.c",
			"line":	737,
			"primary_score":	999673,
			"second_score":	155715
		}, {
			"file":	"main/php_variables.c",
			"line":	738,
			"primary_score":	999673,
			"second_score":	155714
		}, {
			"file":	"main/php_variables.c",
			"line":	741,
			"primary_score":	999673,
			"second_score":	153799
		}, {
			"file":	"main/php_variables.c",
			"line":	742,
			"primary_score":	999673,
			"second_score":	152004
		}, {
			"file":	"main/php_variables.c",
			"line":	745,
			"primary_score":	999673,
			"second_score":	152003
		}, {
			"file":	"main/php_variables.c",
			"line":	746,
			"primary_score":	999673,
			"second_score":	152002
		}, {
			"file":	"main/php_variables.c",
			"line":	747,
			"primary_score":	999673,
			"second_score":	151896
		}, {
			"file":	"main/php_variables.c",
			"line":	748,
			"primary_score":	999673,
			"second_score":	151652
		}, {
			"file":	"main/php_variables.c",
			"line":	751,
			"primary_score":	999673,
			"second_score":	151649
		}, {
			"file":	"main/php_variables.c",
			"line":	752,
			"primary_score":	999673,
			"second_score":	151647
		}, {
			"file":	"main/php_variables.c",
			"line":	753,
			"primary_score":	999673,
			"second_score":	151491
		}, {
			"file":	"main/php_variables.c",
			"line":	754,
			"primary_score":	999673,
			"second_score":	151490
		}, {
			"file":	"main/php_variables.c",
			"line":	755,
			"primary_score":	999673,
			"second_score":	151325
		}, {
			"file":	"main/php_variables.c",
			"line":	760,
			"primary_score":	999673,
			"second_score":	151323
		}, {
			"file":	"main/php_variables.c",
			"line":	761,
			"primary_score":	999673,
			"second_score":	151322
		}, {
			"file":	"main/php_variables.c",
			"line":	762,
			"primary_score":	999673,
			"second_score":	151292
		}, {
			"file":	"main/php_variables.c",
			"line":	765,
			"primary_score":	999673,
			"second_score":	150708
		}, {
			"file":	"main/php_variables.c",
			"line":	814,
			"primary_score":	999673,
			"second_score":	189569
		}, {
			"file":	"main/php_variables.c",
			"line":	815,
			"primary_score":	999673,
			"second_score":	189568
		}, {
			"file":	"main/php_variables.c",
			"line":	816,
			"primary_score":	999673,
			"second_score":	189544
		}, {
			"file":	"main/php_variables.c",
			"line":	817,
			"primary_score":	999673,
			"second_score":	189300
		}, {
			"file":	"main/php_variables.c",
			"line":	818,
			"primary_score":	999673,
			"second_score":	189297
		}, {
			"file":	"main/php_variables.c",
			"line":	821,
			"primary_score":	999673,
			"second_score":	189296
		}, {
			"file":	"main/php_variables.c",
			"line":	823,
			"primary_score":	999673,
			"second_score":	189295
		}, {
			"file":	"main/php_variables.c",
			"line":	824,
			"primary_score":	999673,
			"second_score":	189294
		}, {
			"file":	"main/php_variables.c",
			"line":	827,
			"primary_score":	999673,
			"second_score":	175847
		}, {
			"file":	"main/php_variables.c",
			"line":	828,
			"primary_score":	999673,
			"second_score":	175693
		}, {
			"file":	"main/php_variables.c",
			"line":	830,
			"primary_score":	999673,
			"second_score":	175691
		}, {
			"file":	"main/php_variables.c",
			"line":	831,
			"primary_score":	999673,
			"second_score":	175690
		}, {
			"file":	"main/php_variables.c",
			"line":	832,
			"primary_score":	999673,
			"second_score":	175527
		}, {
			"file":	"main/php_variables.c",
			"line":	835,
			"primary_score":	999673,
			"second_score":	175525
		}, {
			"file":	"main/php_variables.c",
			"line":	840,
			"primary_score":	999673,
			"second_score":	151291
		}, {
			"file":	"main/php_variables.c",
			"line":	841,
			"primary_score":	999673,
			"second_score":	151290
		}, {
			"file":	"main/php_variables.c",
			"line":	842,
			"primary_score":	999673,
			"second_score":	151289
		}, {
			"file":	"main/php_variables.c",
			"line":	844,
			"primary_score":	999673,
			"second_score":	151288
		}, {
			"file":	"main/php_variables.c",
			"line":	845,
			"primary_score":	999673,
			"second_score":	151182
		}, {
			"file":	"main/php_variables.c",
			"line":	846,
			"primary_score":	999673,
			"second_score":	150938
		}, {
			"file":	"main/php_variables.c",
			"line":	848,
			"primary_score":	999673,
			"second_score":	150935
		}, {
			"file":	"main/php_variables.c",
			"line":	851,
			"primary_score":	999673,
			"second_score":	150934
		}, {
			"file":	"main/php_variables.c",
			"line":	854,
			"primary_score":	999673,
			"second_score":	150933
		}, {
			"file":	"main/php_variables.c",
			"line":	855,
			"primary_score":	999673,
			"second_score":	150868
		}, {
			"file":	"main/php_variables.c",
			"line":	859,
			"primary_score":	999673,
			"second_score":	150930
		}, {
			"file":	"main/php_variables.c",
			"line":	860,
			"primary_score":	999673,
			"second_score":	150912
		}, {
			"file":	"main/php_variables.c",
			"line":	862,
			"primary_score":	999673,
			"second_score":	150911
		}, {
			"file":	"main/php_variables.c",
			"line":	866,
			"primary_score":	999673,
			"second_score":	150909
		}, {
			"file":	"main/php_variables.c",
			"line":	867,
			"primary_score":	999673,
			"second_score":	150891
		}, {
			"file":	"main/php_variables.c",
			"line":	869,
			"primary_score":	999673,
			"second_score":	150890
		}, {
			"file":	"main/php_variables.c",
			"line":	873,
			"primary_score":	999673,
			"second_score":	150888
		}, {
			"file":	"main/php_variables.c",
			"line":	874,
			"primary_score":	999673,
			"second_score":	150870
		}, {
			"file":	"main/php_variables.c",
			"line":	876,
			"primary_score":	999673,
			"second_score":	150869
		}, {
			"file":	"main/php_variables.c",
			"line":	880,
			"primary_score":	999673,
			"second_score":	150867
		}, {
			"file":	"main/php_variables.c",
			"line":	881,
			"primary_score":	999673,
			"second_score":	150709
		}, {
			"file":	"main/snprintf.c",
			"line":	317,
			"primary_score":	999709,
			"second_score":	120450
		}, {
			"file":	"main/snprintf.c",
			"line":	318,
			"primary_score":	999709,
			"second_score":	120449
		}, {
			"file":	"main/snprintf.c",
			"line":	320,
			"primary_score":	999709,
			"second_score":	120448
		}, {
			"file":	"main/snprintf.c",
			"line":	324,
			"primary_score":	999709,
			"second_score":	120447
		}, {
			"file":	"main/snprintf.c",
			"line":	335,
			"primary_score":	999709,
			"second_score":	120446
		}, {
			"file":	"main/snprintf.c",
			"line":	339,
			"primary_score":	999709,
			"second_score":	120445
		}, {
			"file":	"main/snprintf.c",
			"line":	346,
			"primary_score":	999709,
			"second_score":	120444
		}, {
			"file":	"main/snprintf.c",
			"line":	347,
			"primary_score":	999709,
			"second_score":	120440
		}, {
			"file":	"main/snprintf.c",
			"line":	349,
			"primary_score":	999709,
			"second_score":	120439
		}, {
			"file":	"main/snprintf.c",
			"line":	350,
			"primary_score":	999709,
			"second_score":	120438
		}, {
			"file":	"main/snprintf.c",
			"line":	354,
			"primary_score":	999709,
			"second_score":	120437
		}, {
			"file":	"main/snprintf.c",
			"line":	355,
			"primary_score":	999709,
			"second_score":	120436
		}, {
			"file":	"main/spprintf.c",
			"line":	254,
			"primary_score":	999865,
			"second_score":	120769
		}, {
			"file":	"main/spprintf.c",
			"line":	255,
			"primary_score":	999865,
			"second_score":	120768
		}, {
			"file":	"main/spprintf.c",
			"line":	257,
			"primary_score":	999865,
			"second_score":	120767
		}, {
			"file":	"main/spprintf.c",
			"line":	259,
			"primary_score":	999865,
			"second_score":	120766
		}, {
			"file":	"main/spprintf.c",
			"line":	261,
			"primary_score":	999865,
			"second_score":	120765
		}, {
			"file":	"main/spprintf.c",
			"line":	263,
			"primary_score":	999865,
			"second_score":	120764
		}, {
			"file":	"main/spprintf.c",
			"line":	266,
			"primary_score":	999865,
			"second_score":	120763
		}, {
			"file":	"main/spprintf.c",
			"line":	272,
			"primary_score":	999865,
			"second_score":	120762
		}, {
			"file":	"main/spprintf.c",
			"line":	275,
			"primary_score":	999865,
			"second_score":	120761
		}, {
			"file":	"main/spprintf.c",
			"line":	276,
			"primary_score":	999938,
			"second_score":	120760
		}, {
			"file":	"main/spprintf.c",
			"line":	277,
			"primary_score":	999938,
			"second_score":	120759
		}, {
			"file":	"main/spprintf.c",
			"line":	278,
			"primary_score":	999938,
			"second_score":	120758
		}, {
			"file":	"main/spprintf.c",
			"line":	279,
			"primary_score":	999938,
			"second_score":	120757
		}, {
			"file":	"main/spprintf.c",
			"line":	289,
			"primary_score":	999865,
			"second_score":	120756
		}, {
			"file":	"main/spprintf.c",
			"line":	306,
			"primary_score":	999938,
			"second_score":	120755
		}, {
			"file":	"main/spprintf.c",
			"line":	441,
			"primary_score":	999711,
			"second_score":	120453
		}, {
			"file":	"main/spprintf.c",
			"line":	444,
			"primary_score":	999761,
			"second_score":	120452
		}, {
			"file":	"main/spprintf.c",
			"line":	474,
			"primary_score":	999711,
			"second_score":	120451
		}, {
			"file":	"main/spprintf.c",
			"line":	476,
			"primary_score":	999711,
			"second_score":	120435
		}, {
			"file":	"main/spprintf.c",
			"line":	478,
			"primary_score":	999711,
			"second_score":	120433
		}, {
			"file":	"main/spprintf.c",
			"line":	479,
			"primary_score":	999711,
			"second_score":	120432
		}, {
			"file":	"main/spprintf.c",
			"line":	481,
			"primary_score":	999711,
			"second_score":	120431
		}, {
			"file":	"main/spprintf.c",
			"line":	483,
			"primary_score":	999711,
			"second_score":	120430
		}, {
			"file":	"main/spprintf.c",
			"line":	486,
			"primary_score":	999711,
			"second_score":	120429
		}, {
			"file":	"main/spprintf.c",
			"line":	686,
			"primary_score":	999881,
			"second_score":	120751
		}, {
			"file":	"main/spprintf.c",
			"line":	687,
			"primary_score":	999881,
			"second_score":	120750
		}, {
			"file":	"main/spprintf.c",
			"line":	688,
			"primary_score":	999881,
			"second_score":	120749
		}, {
			"file":	"main/spprintf.c",
			"line":	689,
			"primary_score":	999881,
			"second_score":	120748
		}, {
			"file":	"main/spprintf.c",
			"line":	764,
			"primary_score":	999938,
			"second_score":	120745
		}, {
			"file":	"main/spprintf.c",
			"line":	770,
			"primary_score":	999938,
			"second_score":	120744
		}, {
			"file":	"main/spprintf.c",
			"line":	775,
			"primary_score":	999680,
			"second_score":	120579
		}, {
			"file":	"main/streams/filter.c",
			"line":	37,
			"primary_score":	999673,
			"second_score":	6224
		}, {
			"file":	"main/streams/filter.c",
			"line":	54,
			"primary_score":	999673,
			"second_score":	63108
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	134,
			"primary_score":	999673,
			"second_score":	147781
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	135,
			"primary_score":	999673,
			"second_score":	147780
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	136,
			"primary_score":	999673,
			"second_score":	147779
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	138,
			"primary_score":	999673,
			"second_score":	147778
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	139,
			"primary_score":	999673,
			"second_score":	147777
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	140,
			"primary_score":	999673,
			"second_score":	147775
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	142,
			"primary_score":	999673,
			"second_score":	147774
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	165,
			"primary_score":	999673,
			"second_score":	148208
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	167,
			"primary_score":	999673,
			"second_score":	148207
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	168,
			"primary_score":	999673,
			"second_score":	148103
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	169,
			"primary_score":	999673,
			"second_score":	148102
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	170,
			"primary_score":	999673,
			"second_score":	148101
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	171,
			"primary_score":	999673,
			"second_score":	148100
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	172,
			"primary_score":	999673,
			"second_score":	148099
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	173,
			"primary_score":	999673,
			"second_score":	148098
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	174,
			"primary_score":	999673,
			"second_score":	148097
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	176,
			"primary_score":	999673,
			"second_score":	148096
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	264,
			"primary_score":	999673,
			"second_score":	148209
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	266,
			"primary_score":	999673,
			"second_score":	147785
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	267,
			"primary_score":	999673,
			"second_score":	147784
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	271,
			"primary_score":	999673,
			"second_score":	147783
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	272,
			"primary_score":	999673,
			"second_score":	147782
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	284,
			"primary_score":	999673,
			"second_score":	147773
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	285,
			"primary_score":	999673,
			"second_score":	148569
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	287,
			"primary_score":	999673,
			"second_score":	147772
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	291,
			"primary_score":	999673,
			"second_score":	147771
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	371,
			"primary_score":	999673,
			"second_score":	110133
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	372,
			"primary_score":	999673,
			"second_score":	110132
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	374,
			"primary_score":	999673,
			"second_score":	110131
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	377,
			"primary_score":	999673,
			"second_score":	110130
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	392,
			"primary_score":	999673,
			"second_score":	110129
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	393,
			"primary_score":	999673,
			"second_score":	110128
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	394,
			"primary_score":	999673,
			"second_score":	110127
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	404,
			"primary_score":	999673,
			"second_score":	110126
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	405,
			"primary_score":	999673,
			"second_score":	110125
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	413,
			"primary_score":	999673,
			"second_score":	110124
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	425,
			"primary_score":	999673,
			"second_score":	110123
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	427,
			"primary_score":	999673,
			"second_score":	110104
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	432,
			"primary_score":	999673,
			"second_score":	110143
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	434,
			"primary_score":	999673,
			"second_score":	110142
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	441,
			"primary_score":	999673,
			"second_score":	110141
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	442,
			"primary_score":	999673,
			"second_score":	110140
		}, {
			"file":	"main/streams/streams.c",
			"line":	104,
			"primary_score":	999673,
			"second_score":	119165
		}, {
			"file":	"main/streams/streams.c",
			"line":	105,
			"primary_score":	999673,
			"second_score":	119156
		}, {
			"file":	"main/streams/streams.c",
			"line":	187,
			"primary_score":	999673,
			"second_score":	147647
		}, {
			"file":	"main/streams/streams.c",
			"line":	189,
			"primary_score":	999673,
			"second_score":	147646
		}, {
			"file":	"main/streams/streams.c",
			"line":	191,
			"primary_score":	999673,
			"second_score":	147645
		}, {
			"file":	"main/streams/streams.c",
			"line":	194,
			"primary_score":	999673,
			"second_score":	147644
		}, {
			"file":	"main/streams/streams.c",
			"line":	197,
			"primary_score":	999673,
			"second_score":	147643
		}, {
			"file":	"main/streams/streams.c",
			"line":	198,
			"primary_score":	999673,
			"second_score":	147642
		}, {
			"file":	"main/streams/streams.c",
			"line":	229,
			"primary_score":	999673,
			"second_score":	148095
		}, {
			"file":	"main/streams/streams.c",
			"line":	231,
			"primary_score":	999673,
			"second_score":	148094
		}, {
			"file":	"main/streams/streams.c",
			"line":	233,
			"primary_score":	999673,
			"second_score":	147990
		}, {
			"file":	"main/streams/streams.c",
			"line":	235,
			"primary_score":	999673,
			"second_score":	147989
		}, {
			"file":	"main/streams/streams.c",
			"line":	236,
			"primary_score":	999673,
			"second_score":	147988
		}, {
			"file":	"main/streams/streams.c",
			"line":	242,
			"primary_score":	999673,
			"second_score":	147987
		}, {
			"file":	"main/streams/streams.c",
			"line":	243,
			"primary_score":	999673,
			"second_score":	147986
		}, {
			"file":	"main/streams/streams.c",
			"line":	244,
			"primary_score":	999673,
			"second_score":	147985
		}, {
			"file":	"main/streams/streams.c",
			"line":	245,
			"primary_score":	999673,
			"second_score":	147984
		}, {
			"file":	"main/streams/streams.c",
			"line":	252,
			"primary_score":	999673,
			"second_score":	147983
		}, {
			"file":	"main/streams/streams.c",
			"line":	256,
			"primary_score":	999673,
			"second_score":	147982
		}, {
			"file":	"main/streams/streams.c",
			"line":	272,
			"primary_score":	999673,
			"second_score":	147981
		}, {
			"file":	"main/streams/streams.c",
			"line":	273,
			"primary_score":	999673,
			"second_score":	147798
		}, {
			"file":	"main/streams/streams.c",
			"line":	275,
			"primary_score":	999673,
			"second_score":	147786
		}, {
			"file":	"main/streams/streams.c",
			"line":	286,
			"primary_score":	999673,
			"second_score":	110157
		}, {
			"file":	"main/streams/streams.c",
			"line":	287,
			"primary_score":	999673,
			"second_score":	110156
		}, {
			"file":	"main/streams/streams.c",
			"line":	288,
			"primary_score":	999673,
			"second_score":	110155
		}, {
			"file":	"main/streams/streams.c",
			"line":	289,
			"primary_score":	999673,
			"second_score":	110154
		}, {
			"file":	"main/streams/streams.c",
			"line":	290,
			"primary_score":	999673,
			"second_score":	110153
		}, {
			"file":	"main/streams/streams.c",
			"line":	292,
			"primary_score":	999673,
			"second_score":	110152
		}, {
			"file":	"main/streams/streams.c",
			"line":	301,
			"primary_score":	999673,
			"second_score":	110151
		}, {
			"file":	"main/streams/streams.c",
			"line":	305,
			"primary_score":	999673,
			"second_score":	110150
		}, {
			"file":	"main/streams/streams.c",
			"line":	312,
			"primary_score":	999673,
			"second_score":	110149
		}, {
			"file":	"main/streams/streams.c",
			"line":	331,
			"primary_score":	999673,
			"second_score":	110148
		}, {
			"file":	"main/streams/streams.c",
			"line":	334,
			"primary_score":	999673,
			"second_score":	110138
		}, {
			"file":	"main/streams/streams.c",
			"line":	339,
			"primary_score":	999673,
			"second_score":	110137
		}, {
			"file":	"main/streams/streams.c",
			"line":	343,
			"primary_score":	999673,
			"second_score":	110136
		}, {
			"file":	"main/streams/streams.c",
			"line":	344,
			"primary_score":	999673,
			"second_score":	110135
		}, {
			"file":	"main/streams/streams.c",
			"line":	356,
			"primary_score":	999673,
			"second_score":	110134
		}, {
			"file":	"main/streams/streams.c",
			"line":	357,
			"primary_score":	999673,
			"second_score":	110103
		}, {
			"file":	"main/streams/streams.c",
			"line":	360,
			"primary_score":	999673,
			"second_score":	110102
		}, {
			"file":	"main/streams/streams.c",
			"line":	367,
			"primary_score":	999673,
			"second_score":	110101
		}, {
			"file":	"main/streams/streams.c",
			"line":	368,
			"primary_score":	999673,
			"second_score":	110100
		}, {
			"file":	"main/streams/streams.c",
			"line":	371,
			"primary_score":	999673,
			"second_score":	110099
		}, {
			"file":	"main/streams/streams.c",
			"line":	375,
			"primary_score":	999673,
			"second_score":	110098
		}, {
			"file":	"main/streams/streams.c",
			"line":	380,
			"primary_score":	999673,
			"second_score":	110097
		}, {
			"file":	"main/streams/streams.c",
			"line":	385,
			"primary_score":	999673,
			"second_score":	110096
		}, {
			"file":	"main/streams/streams.c",
			"line":	390,
			"primary_score":	999673,
			"second_score":	110095
		}, {
			"file":	"main/streams/streams.c",
			"line":	422,
			"primary_score":	999673,
			"second_score":	110094
		}, {
			"file":	"main/streams/streams.c",
			"line":	423,
			"primary_score":	999673,
			"second_score":	110093
		}, {
			"file":	"main/streams/streams.c",
			"line":	424,
			"primary_score":	999673,
			"second_score":	110074
		}, {
			"file":	"main/streams/streams.c",
			"line":	427,
			"primary_score":	999673,
			"second_score":	110073
		}, {
			"file":	"main/streams/streams.c",
			"line":	431,
			"primary_score":	999673,
			"second_score":	110054
		}, {
			"file":	"main/streams/streams.c",
			"line":	435,
			"primary_score":	999673,
			"second_score":	110053
		}, {
			"file":	"main/streams/streams.c",
			"line":	1047,
			"primary_score":	999673,
			"second_score":	110147
		}, {
			"file":	"main/streams/streams.c",
			"line":	1049,
			"primary_score":	999673,
			"second_score":	110146
		}, {
			"file":	"main/streams/streams.c",
			"line":	1053,
			"primary_score":	999673,
			"second_score":	110145
		}, {
			"file":	"main/streams/streams.c",
			"line":	1054,
			"primary_score":	999673,
			"second_score":	110144
		}, {
			"file":	"main/streams/streams.c",
			"line":	1057,
			"primary_score":	999673,
			"second_score":	110139
		}, {
			"file":	"main/streams/streams.c",
			"line":	1431,
			"primary_score":	999673,
			"second_score":	110159
		}, {
			"file":	"main/streams/streams.c",
			"line":	1433,
			"primary_score":	999673,
			"second_score":	110158
		}, {
			"file":	"main/streams/streams.c",
			"line":	1444,
			"primary_score":	999673,
			"second_score":	109179
		}, {
			"file":	"main/streams/streams.c",
			"line":	1450,
			"primary_score":	999673,
			"second_score":	109178
		}, {
			"file":	"main/streams/streams.c",
			"line":	1486,
			"primary_score":	999673,
			"second_score":	6248
		}, {
			"file":	"main/streams/streams.c",
			"line":	1487,
			"primary_score":	999673,
			"second_score":	6225
		}, {
			"file":	"main/streams/streams.c",
			"line":	1488,
			"primary_score":	999673,
			"second_score":	6216
		}, {
			"file":	"main/streams/streams.c",
			"line":	1489,
			"primary_score":	999673,
			"second_score":	6187
		}, {
			"file":	"main/streams/streams.c",
			"line":	1525,
			"primary_score":	999673,
			"second_score":	99608
		}, {
			"file":	"main/streams/streams.c",
			"line":	1566,
			"primary_score":	999673,
			"second_score":	148424
		}, {
			"file":	"main/streams/streams.c",
			"line":	1567,
			"primary_score":	999673,
			"second_score":	148423
		}, {
			"file":	"main/streams/streams.c",
			"line":	1568,
			"primary_score":	999673,
			"second_score":	148422
		}, {
			"file":	"main/streams/streams.c",
			"line":	1569,
			"primary_score":	999673,
			"second_score":	148421
		}, {
			"file":	"main/streams/streams.c",
			"line":	1571,
			"primary_score":	999673,
			"second_score":	148420
		}, {
			"file":	"main/streams/streams.c",
			"line":	1572,
			"primary_score":	999673,
			"second_score":	148419
		}, {
			"file":	"main/streams/streams.c",
			"line":	1575,
			"primary_score":	999673,
			"second_score":	148418
		}, {
			"file":	"main/streams/streams.c",
			"line":	1579,
			"primary_score":	999673,
			"second_score":	148417
		}, {
			"file":	"main/streams/streams.c",
			"line":	1580,
			"primary_score":	999673,
			"second_score":	148414
		}, {
			"file":	"main/streams/streams.c",
			"line":	1583,
			"primary_score":	999673,
			"second_score":	148413
		}, {
			"file":	"main/streams/streams.c",
			"line":	1584,
			"primary_score":	999673,
			"second_score":	148412
		}, {
			"file":	"main/streams/streams.c",
			"line":	1592,
			"primary_score":	999673,
			"second_score":	148411
		}, {
			"file":	"main/streams/streams.c",
			"line":	1593,
			"primary_score":	999673,
			"second_score":	148410
		}, {
			"file":	"main/streams/streams.c",
			"line":	1594,
			"primary_score":	999673,
			"second_score":	148300
		}, {
			"file":	"main/streams/streams.c",
			"line":	1610,
			"primary_score":	999673,
			"second_score":	148275
		}, {
			"file":	"main/streams/streams.c",
			"line":	1613,
			"primary_score":	999673,
			"second_score":	148256
		}, {
			"file":	"main/streams/streams.c",
			"line":	1675,
			"primary_score":	999673,
			"second_score":	148255
		}, {
			"file":	"main/streams/streams.c",
			"line":	1693,
			"primary_score":	999673,
			"second_score":	148254
		}, {
			"file":	"main/streams/streams.c",
			"line":	1825,
			"primary_score":	999673,
			"second_score":	148435
		}, {
			"file":	"main/streams/streams.c",
			"line":	1826,
			"primary_score":	999673,
			"second_score":	148434
		}, {
			"file":	"main/streams/streams.c",
			"line":	1827,
			"primary_score":	999673,
			"second_score":	148433
		}, {
			"file":	"main/streams/streams.c",
			"line":	1828,
			"primary_score":	999673,
			"second_score":	148432
		}, {
			"file":	"main/streams/streams.c",
			"line":	1829,
			"primary_score":	999673,
			"second_score":	148431
		}, {
			"file":	"main/streams/streams.c",
			"line":	1830,
			"primary_score":	999673,
			"second_score":	148430
		}, {
			"file":	"main/streams/streams.c",
			"line":	1833,
			"primary_score":	999673,
			"second_score":	148429
		}, {
			"file":	"main/streams/streams.c",
			"line":	1837,
			"primary_score":	999673,
			"second_score":	148428
		}, {
			"file":	"main/streams/streams.c",
			"line":	1842,
			"primary_score":	999673,
			"second_score":	148427
		}, {
			"file":	"main/streams/streams.c",
			"line":	1852,
			"primary_score":	999673,
			"second_score":	148426
		}, {
			"file":	"main/streams/streams.c",
			"line":	1854,
			"primary_score":	999673,
			"second_score":	148425
		}, {
			"file":	"main/streams/streams.c",
			"line":	1855,
			"primary_score":	999673,
			"second_score":	148253
		}, {
			"file":	"main/streams/streams.c",
			"line":	1863,
			"primary_score":	999673,
			"second_score":	148252
		}, {
			"file":	"main/streams/streams.c",
			"line":	1864,
			"primary_score":	999673,
			"second_score":	148251
		}, {
			"file":	"main/streams/streams.c",
			"line":	1868,
			"primary_score":	999673,
			"second_score":	148250
		}, {
			"file":	"main/streams/streams.c",
			"line":	1875,
			"primary_score":	999673,
			"second_score":	147769
		}, {
			"file":	"main/streams/streams.c",
			"line":	1882,
			"primary_score":	999673,
			"second_score":	147768
		}, {
			"file":	"main/streams/streams.c",
			"line":	1883,
			"primary_score":	999673,
			"second_score":	147767
		}, {
			"file":	"main/streams/streams.c",
			"line":	1887,
			"primary_score":	999673,
			"second_score":	147766
		}, {
			"file":	"main/streams/streams.c",
			"line":	1888,
			"primary_score":	999673,
			"second_score":	147765
		}, {
			"file":	"main/streams/streams.c",
			"line":	1892,
			"primary_score":	999673,
			"second_score":	147764
		}, {
			"file":	"main/streams/streams.c",
			"line":	1895,
			"primary_score":	999673,
			"second_score":	147763
		}, {
			"file":	"main/streams/streams.c",
			"line":	1896,
			"primary_score":	999673,
			"second_score":	147652
		}, {
			"file":	"main/streams/streams.c",
			"line":	1903,
			"primary_score":	999673,
			"second_score":	147651
		}, {
			"file":	"main/streams/streams.c",
			"line":	1938,
			"primary_score":	999673,
			"second_score":	147650
		}, {
			"file":	"main/streams/streams.c",
			"line":	1947,
			"primary_score":	999673,
			"second_score":	147649
		}, {
			"file":	"main/streams/streams.c",
			"line":	1954,
			"primary_score":	999673,
			"second_score":	147648
		}, {
			"file":	"main/streams/streams.c",
			"line":	1960,
			"primary_score":	999673,
			"second_score":	147641
		}, {
			"file":	"main/streams/streams.c",
			"line":	1963,
			"primary_score":	999673,
			"second_score":	147640
		}, {
			"file":	"main/streams/transports.c",
			"line":	29,
			"primary_score":	999673,
			"second_score":	6215
		}, {
			"file":	"main/strlcpy.c",
			"line":	71,
			"primary_score":	999673,
			"second_score":	147797
		}, {
			"file":	"main/strlcpy.c",
			"line":	72,
			"primary_score":	999673,
			"second_score":	147796
		}, {
			"file":	"main/strlcpy.c",
			"line":	73,
			"primary_score":	999673,
			"second_score":	147795
		}, {
			"file":	"main/strlcpy.c",
			"line":	76,
			"primary_score":	999673,
			"second_score":	147794
		}, {
			"file":	"main/strlcpy.c",
			"line":	77,
			"primary_score":	999673,
			"second_score":	147793
		}, {
			"file":	"main/strlcpy.c",
			"line":	78,
			"primary_score":	999673,
			"second_score":	147790
		}, {
			"file":	"main/strlcpy.c",
			"line":	79,
			"primary_score":	999673,
			"second_score":	147789
		}, {
			"file":	"main/strlcpy.c",
			"line":	84,
			"primary_score":	999673,
			"second_score":	147788
		}, {
			"file":	"main/strlcpy.c",
			"line":	91,
			"primary_score":	999673,
			"second_score":	147787
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	258,
			"primary_score":	999673,
			"second_score":	122018
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	260,
			"primary_score":	999673,
			"second_score":	122017
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	261,
			"primary_score":	999673,
			"second_score":	122016
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	264,
			"primary_score":	999673,
			"second_score":	122015
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	268,
			"primary_score":	999673,
			"second_score":	122014
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	280,
			"primary_score":	999673,
			"second_score":	122023
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	281,
			"primary_score":	999673,
			"second_score":	122022
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	282,
			"primary_score":	999673,
			"second_score":	122021
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	291,
			"primary_score":	999673,
			"second_score":	122020
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	293,
			"primary_score":	999673,
			"second_score":	122019
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	294,
			"primary_score":	999673,
			"second_score":	122013
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	300,
			"primary_score":	999673,
			"second_score":	122012
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	301,
			"primary_score":	999673,
			"second_score":	122011
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	304,
			"primary_score":	999673,
			"second_score":	122010
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	313,
			"primary_score":	999673,
			"second_score":	108769
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	326,
			"primary_score":	999673,
			"second_score":	174461
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	327,
			"primary_score":	999673,
			"second_score":	174460
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	332,
			"primary_score":	999673,
			"second_score":	174459
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	335,
			"primary_score":	999673,
			"second_score":	161735
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	336,
			"primary_score":	999673,
			"second_score":	161734
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	339,
			"primary_score":	999673,
			"second_score":	160352
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	343,
			"primary_score":	999673,
			"second_score":	159309
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	344,
			"primary_score":	999673,
			"second_score":	159308
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	347,
			"primary_score":	999673,
			"second_score":	158235
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	351,
			"primary_score":	999673,
			"second_score":	157168
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	352,
			"primary_score":	999673,
			"second_score":	157167
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	366,
			"primary_score":	999673,
			"second_score":	109219
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	367,
			"primary_score":	999673,
			"second_score":	109218
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	371,
			"primary_score":	999673,
			"second_score":	109217
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	383,
			"primary_score":	999673,
			"second_score":	130324
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	391,
			"primary_score":	999673,
			"second_score":	130277
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	405,
			"primary_score":	999673,
			"second_score":	194885
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	537,
			"primary_score":	999673,
			"second_score":	150199
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	538,
			"primary_score":	999673,
			"second_score":	150198
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	539,
			"primary_score":	999673,
			"second_score":	150197
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	540,
			"primary_score":	999673,
			"second_score":	150196
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	542,
			"primary_score":	999673,
			"second_score":	150195
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	543,
			"primary_score":	999673,
			"second_score":	150085
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	544,
			"primary_score":	999673,
			"second_score":	149975
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	546,
			"primary_score":	999673,
			"second_score":	149865
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	547,
			"primary_score":	999673,
			"second_score":	149232
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	548,
			"primary_score":	999673,
			"second_score":	148436
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	550,
			"primary_score":	999673,
			"second_score":	147639
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	566,
			"primary_score":	999673,
			"second_score":	147638
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	568,
			"primary_score":	999673,
			"second_score":	147637
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	569,
			"primary_score":	999673,
			"second_score":	147631
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	570,
			"primary_score":	999673,
			"second_score":	147625
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	572,
			"primary_score":	999673,
			"second_score":	147619
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	573,
			"primary_score":	999673,
			"second_score":	147618
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	574,
			"primary_score":	999673,
			"second_score":	147617
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	575,
			"primary_score":	999673,
			"second_score":	147609
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	576,
			"primary_score":	999673,
			"second_score":	147608
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	577,
			"primary_score":	999673,
			"second_score":	147607
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	579,
			"primary_score":	999673,
			"second_score":	147534
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	580,
			"primary_score":	999673,
			"second_score":	147533
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	581,
			"primary_score":	999673,
			"second_score":	147532
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	582,
			"primary_score":	999673,
			"second_score":	147524
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	583,
			"primary_score":	999673,
			"second_score":	147523
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	584,
			"primary_score":	999673,
			"second_score":	147522
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	586,
			"primary_score":	999673,
			"second_score":	147451
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	587,
			"primary_score":	999673,
			"second_score":	147450
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	588,
			"primary_score":	999673,
			"second_score":	147449
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	589,
			"primary_score":	999673,
			"second_score":	147441
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	590,
			"primary_score":	999673,
			"second_score":	147440
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	591,
			"primary_score":	999673,
			"second_score":	147439
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	593,
			"primary_score":	999673,
			"second_score":	147368
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	594,
			"primary_score":	999673,
			"second_score":	147346
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	595,
			"primary_score":	999673,
			"second_score":	147324
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	605,
			"primary_score":	999673,
			"second_score":	192586
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	607,
			"primary_score":	999673,
			"second_score":	192585
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	609,
			"primary_score":	999673,
			"second_score":	192584
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	610,
			"primary_score":	999673,
			"second_score":	192583
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	611,
			"primary_score":	999673,
			"second_score":	192582
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	612,
			"primary_score":	999673,
			"second_score":	192581
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	616,
			"primary_score":	999673,
			"second_score":	192580
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	619,
			"primary_score":	999673,
			"second_score":	192579
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	620,
			"primary_score":	999673,
			"second_score":	192578
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	633,
			"primary_score":	999673,
			"second_score":	192577
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	636,
			"primary_score":	999673,
			"second_score":	192576
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	785,
			"primary_score":	999673,
			"second_score":	194884
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	787,
			"primary_score":	999673,
			"second_score":	194882
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	788,
			"primary_score":	999673,
			"second_score":	194876
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	789,
			"primary_score":	999673,
			"second_score":	194875
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	791,
			"primary_score":	999673,
			"second_score":	194874
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	792,
			"primary_score":	999673,
			"second_score":	193742
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	858,
			"primary_score":	999673,
			"second_score":	193736
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	860,
			"primary_score":	999673,
			"second_score":	193735
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	861,
			"primary_score":	999673,
			"second_score":	193734
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	862,
			"primary_score":	999673,
			"second_score":	193733
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	863,
			"primary_score":	999673,
			"second_score":	192601
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	902,
			"primary_score":	999675,
			"second_score":	192600
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	906,
			"primary_score":	999675,
			"second_score":	192599
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	907,
			"primary_score":	999675,
			"second_score":	192598
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	936,
			"primary_score":	999673,
			"second_score":	166753
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	940,
			"primary_score":	999673,
			"second_score":	166752
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	941,
			"primary_score":	999673,
			"second_score":	166751
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	942,
			"primary_score":	999673,
			"second_score":	166750
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1035,
			"primary_score":	999673,
			"second_score":	192592
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1041,
			"primary_score":	999673,
			"second_score":	192591
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1050,
			"primary_score":	999673,
			"second_score":	192590
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1053,
			"primary_score":	999673,
			"second_score":	192589
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1057,
			"primary_score":	999673,
			"second_score":	192062
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1059,
			"primary_score":	999673,
			"second_score":	192056
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1060,
			"primary_score":	999673,
			"second_score":	192055
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1062,
			"primary_score":	999673,
			"second_score":	192588
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1063,
			"primary_score":	999673,
			"second_score":	192587
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1066,
			"primary_score":	999673,
			"second_score":	192575
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1072,
			"primary_score":	999673,
			"second_score":	166739
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1073,
			"primary_score":	999673,
			"second_score":	166738
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1075,
			"primary_score":	999673,
			"second_score":	192574
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1076,
			"primary_score":	999673,
			"second_score":	192573
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1077,
			"primary_score":	999673,
			"second_score":	192572
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1078,
			"primary_score":	999673,
			"second_score":	192571
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1082,
			"primary_score":	999673,
			"second_score":	192570
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1083,
			"primary_score":	999673,
			"second_score":	192569
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1084,
			"primary_score":	999673,
			"second_score":	192568
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1085,
			"primary_score":	999673,
			"second_score":	192567
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1086,
			"primary_score":	999673,
			"second_score":	192566
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1087,
			"primary_score":	999673,
			"second_score":	192565
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1089,
			"primary_score":	999673,
			"second_score":	192564
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1095,
			"primary_score":	999673,
			"second_score":	150241
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1096,
			"primary_score":	999673,
			"second_score":	150240
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1097,
			"primary_score":	999673,
			"second_score":	150239
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1099,
			"primary_score":	999673,
			"second_score":	150238
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1106,
			"primary_score":	999673,
			"second_score":	150237
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1108,
			"primary_score":	999673,
			"second_score":	150208
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1109,
			"primary_score":	999673,
			"second_score":	150207
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1111,
			"primary_score":	999673,
			"second_score":	150206
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1112,
			"primary_score":	999673,
			"second_score":	150200
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1193,
			"primary_score":	999673,
			"second_score":	147302
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1194,
			"primary_score":	999673,
			"second_score":	119515
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1195,
			"primary_score":	999673,
			"second_score":	119514
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1232,
			"primary_score":	999673,
			"second_score":	122006
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1235,
			"primary_score":	999673,
			"second_score":	118896
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1370,
			"primary_score":	999673,
			"second_score":	119513
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1372,
			"primary_score":	999673,
			"second_score":	119511
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1374,
			"primary_score":	999673,
			"second_score":	119510
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1376,
			"primary_score":	999673,
			"second_score":	108782
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1377,
			"primary_score":	999673,
			"second_score":	108781
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1379,
			"primary_score":	999673,
			"second_score":	108780
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1383,
			"primary_score":	999673,
			"second_score":	108779
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1384,
			"primary_score":	999673,
			"second_score":	108778
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1387,
			"primary_score":	999673,
			"second_score":	108777
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1388,
			"primary_score":	999673,
			"second_score":	108776
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1390,
			"primary_score":	999673,
			"second_score":	3135
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1395,
			"primary_score":	999673,
			"second_score":	1
		}],
	"mutation_info":	[{
			"file":	"ext/standard/var.c",
			"functions":	[]
		}],
	"rules":	[{
			"file_name":	"ext/standard/var.c",
			"lines":	[{
					"line":	40,
					"switches":	[]
				}, {
					"line":	42,
					"switches":	[{
							"switch":	0,
							"types":	[[], [], [], [], [32, 33, 34], [1, 2, 3, 4], [], [], [], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [], [], []],
							"begin_line":	43,
							"begin_column":	0,
							"end_line":	43,
							"end_column":	0,
							"patch_codes":	["memset(&hash_key->arKey, 0, sizeof (*(&hash_key->arKey)))", "memset(&hash_key->h, 0, sizeof (*(&hash_key->h)))", "memset(&hash_key->nKeyLength, 0, sizeof (*(&hash_key->nKeyLength)))", "memset(hash_key->arKey, 0, sizeof (*(hash_key->arKey)))", "(**(zv)).value.ht->nApplyCount++", "(**(zv)).value.ht->nApplyCount--", "level = (0)", "level = (1)", "level = (2)", "level = (level)", "level = (num_args)", "php_body_write(((hash_key)->arKey), (hash_key->nKeyLength - 1))", "php_body_write((hash_key->arKey), ((hash_key)->nKeyLength - 1))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(zv)).value.str.val)", "php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', (hash_key)->h)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((zv))))", "php_var_dump((zv), level + 2)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "exit(1)", "level = __builtin_va_arg(args, int)", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - 1))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', hash_key->h)", "php_printf(\"%*c[\\\"\", level + 1, ' ')", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "php_var_dump(zv, level + 2)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L43\", 4, &(args), sizeof (args), &(level), sizeof (level), &(hash_key), sizeof (hash_key), &(zv), sizeof (zv)))\n    return 0;\n", "if (__is_neg(\"\", \"L43\", 4, &(args), sizeof (args), &(level), sizeof (level), &(hash_key), sizeof (hash_key), &(zv), sizeof (zv)))\n    return 1;\n", "if (__is_neg(\"\", \"L43\", 4, &(args), sizeof (args), &(level), sizeof (level), &(hash_key), sizeof (hash_key), &(zv), sizeof (zv)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.194928932307846]
								}, {
									"case":	2,
									"scores":	[-6.194928932307846]
								}, {
									"case":	3,
									"scores":	[-6.194928932307846]
								}, {
									"case":	4,
									"scores":	[-6.194928932307846]
								}, {
									"case":	5,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	6,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	7,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	8,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	9,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	10,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	11,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	12,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	13,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	14,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	15,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	16,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	17,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-7.918970203507846, -8.4899184801078444, -10.779673460407846, -9.7459710597078448]
								}, {
									"case":	33,
									"scores":	[-10.743439203507846, -11.314387480107845, -13.604142460407846, -12.570440059707845]
								}, {
									"case":	34,
									"scores":	[-10.743439203507846, -11.314387480107845, -13.604142460407846, -12.570440059707845]
								}]
						}, {
							"switch":	1,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	43,
							"begin_column":	2,
							"end_line":	43,
							"end_column":	10,
							"patch_codes":	["if (!__is_neg(\"\", \"L43\", 4, &(args), sizeof (args), &(level), sizeof (level), &(hash_key), sizeof (hash_key), &(zv), sizeof (zv)))\n    level = __builtin_va_arg(args, int);\n", "{\n}\n", "level = (0)", "level = (1)", "level = (2)", "level = (level)", "level = (num_args)", "level = __builtin_va_arg(args, int)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.6203886023078464, -5.7786258727078454, -8.3081096402078458, -7.8598450013078462]
								}, {
									"case":	2,
									"scores":	[-6.194928932307846]
								}, {
									"case":	3,
									"scores":	[-6.194928932307846]
								}, {
									"case":	4,
									"scores":	[-6.194928932307846]
								}, {
									"case":	5,
									"scores":	[-6.194928932307846]
								}, {
									"case":	6,
									"scores":	[-6.194928932307846]
								}, {
									"case":	7,
									"scores":	[-6.194928932307846]
								}, {
									"case":	8,
									"scores":	[-6.194928932307846]
								}]
						}]
				}, {
					"line":	47,
					"switches":	[{
							"switch":	4,
							"types":	[[], [], [], [], [32, 33, 34], [1, 2, 3, 4], [], [], [], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [], [], []],
							"begin_line":	48,
							"begin_column":	1,
							"end_line":	48,
							"end_column":	1,
							"patch_codes":	["memset(&hash_key->arKey, 0, sizeof (*(&hash_key->arKey)))", "memset(&hash_key->h, 0, sizeof (*(&hash_key->h)))", "memset(&hash_key->nKeyLength, 0, sizeof (*(&hash_key->nKeyLength)))", "memset(hash_key->arKey, 0, sizeof (*(hash_key->arKey)))", "(**(zv)).value.ht->nApplyCount++", "(**(zv)).value.ht->nApplyCount--", "level = (0)", "level = (1)", "level = (2)", "level = (level)", "level = (num_args)", "php_body_write(((hash_key)->arKey), (hash_key->nKeyLength - 1))", "php_body_write((hash_key->arKey), ((hash_key)->nKeyLength - 1))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(zv)).value.str.val)", "php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', (hash_key)->h)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((zv))))", "php_var_dump((zv), level + 2)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "exit(1)", "level = __builtin_va_arg(args, int)", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - 1))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', hash_key->h)", "php_printf(\"%*c[\\\"\", level + 1, ' ')", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "php_var_dump(zv, level + 2)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L48\", 7, &(level), sizeof (level), &(hash_key), sizeof (hash_key), &(hash_key->arKey), sizeof (hash_key->arKey), &(hash_key->nKeyLength), sizeof (hash_key->nKeyLength), &(hash_key->h), sizeof (hash_key->h), &(zv), sizeof (zv), &(args), sizeof (args)))\n    return 0;\n", "if (__is_neg(\"\", \"L48\", 7, &(level), sizeof (level), &(hash_key), sizeof (hash_key), &(hash_key->arKey), sizeof (hash_key->arKey), &(hash_key->nKeyLength), sizeof (hash_key->nKeyLength), &(hash_key->h), sizeof (hash_key->h), &(zv), sizeof (zv), &(args), sizeof (args)))\n    return 1;\n", "if (__is_neg(\"\", \"L48\", 7, &(level), sizeof (level), &(hash_key), sizeof (hash_key), &(hash_key->arKey), sizeof (hash_key->arKey), &(hash_key->nKeyLength), sizeof (hash_key->nKeyLength), &(hash_key->h), sizeof (hash_key->h), &(zv), sizeof (zv), &(args), sizeof (args)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.114118103037768]
								}, {
									"case":	2,
									"scores":	[-6.114118103037768]
								}, {
									"case":	3,
									"scores":	[-6.114118103037768]
								}, {
									"case":	4,
									"scores":	[-6.114118103037768]
								}, {
									"case":	5,
									"scores":	[-6.114118103037768]
								}, {
									"case":	6,
									"scores":	[-6.114118103037768]
								}, {
									"case":	7,
									"scores":	[-6.114118103037768]
								}, {
									"case":	8,
									"scores":	[-6.114118103037768]
								}, {
									"case":	9,
									"scores":	[-6.114118103037768]
								}, {
									"case":	10,
									"scores":	[-6.114118103037768]
								}, {
									"case":	11,
									"scores":	[-6.114118103037768]
								}, {
									"case":	12,
									"scores":	[-6.114118103037768]
								}, {
									"case":	13,
									"scores":	[-6.114118103037768]
								}, {
									"case":	14,
									"scores":	[-6.114118103037768]
								}, {
									"case":	15,
									"scores":	[-6.114118103037768]
								}, {
									"case":	16,
									"scores":	[-6.114118103037768]
								}, {
									"case":	17,
									"scores":	[-6.114118103037768]
								}, {
									"case":	18,
									"scores":	[-6.114118103037768]
								}, {
									"case":	19,
									"scores":	[-6.114118103037768]
								}, {
									"case":	20,
									"scores":	[-6.114118103037768]
								}, {
									"case":	21,
									"scores":	[-6.114118103037768]
								}, {
									"case":	22,
									"scores":	[-6.114118103037768]
								}, {
									"case":	23,
									"scores":	[-6.114118103037768]
								}, {
									"case":	24,
									"scores":	[-6.114118103037768]
								}, {
									"case":	25,
									"scores":	[-6.114118103037768]
								}, {
									"case":	26,
									"scores":	[-6.114118103037768]
								}, {
									"case":	27,
									"scores":	[-6.114118103037768]
								}, {
									"case":	28,
									"scores":	[-6.114118103037768]
								}, {
									"case":	29,
									"scores":	[-6.114118103037768]
								}, {
									"case":	30,
									"scores":	[-6.114118103037768]
								}, {
									"case":	31,
									"scores":	[-6.114118103037768]
								}, {
									"case":	32,
									"scores":	[-7.0546118878377682, -8.88895073113777, -8.63229410443777, -8.29938770343777, -8.27572233443777, -7.7095656774377677, -7.7447154742377684]
								}, {
									"case":	33,
									"scores":	[-9.87908088783777, -11.713419731137769, -11.456763104437769, -11.123856703437768, -11.100191334437767, -10.534034677437768, -10.569184474237769]
								}, {
									"case":	34,
									"scores":	[-9.87908088783777, -11.713419731137769, -11.456763104437769, -11.123856703437768, -11.100191334437767, -10.534034677437768, -10.569184474237769]
								}]
						}, {
							"switch":	5,
							"types":	[[], [], [1], [], [], [], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], [], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [], [2, 3, 4, 5], [], [], [6]],
							"begin_line":	48,
							"begin_column":	3,
							"end_line":	48,
							"end_column":	38,
							"patch_codes":	["if (!__is_neg(\"\", \"L48\", 7, &(level), sizeof (level), &(hash_key), sizeof (hash_key), &(hash_key->arKey), sizeof (hash_key->arKey), &(hash_key->nKeyLength), sizeof (hash_key->nKeyLength), &(hash_key->h), sizeof (hash_key->h), &(zv), sizeof (zv), &(args), sizeof (args)))\n    php_printf(\"%*c[\\\"\", level + 1, ' ');\n", "_php_stream_mkdir(\"%*c[\\\"\", level + 1, ' ', 0)", "_php_stream_set_option(\"%*c[\\\"\", level + 1, ' ', 0)", "php_stat(\"%*c[\\\"\", level + 1, ' ', 0)", "zend_lookup_class_ex(\"%*c[\\\"\", level + 1, ' ', 0)", "{\n}\n", "Debug(\"%*c[\\\"\", level + 1, ' ')", "php_ini_activate_config(\"%*c[\\\"\", level + 1, ' ')", "printf(\"%*c[\\\"\", level + 1, ' ')", "virtual_open(\"%*c[\\\"\", level + 1, ' ')", "wprintf(\"%*c[\\\"\", level + 1, ' ')", "zend_class_implements(\"%*c[\\\"\", level + 1, ' ')", "zend_do_end_variable_parse(\"%*c[\\\"\", level + 1, ' ')", "zend_fcall_info_argn(\"%*c[\\\"\", level + 1, ' ')", "zend_mm_shutdown(\"%*c[\\\"\", level + 1, ' ')", "zend_ptr_stack_n_pop(\"%*c[\\\"\", level + 1, ' ')", "zend_ptr_stack_n_push(\"%*c[\\\"\", level + 1, ' ')", "php_printf(\"%*c[\\\" or the directory does not exist\", level + 1, ' ')", "php_printf(\"%*c[\\\"\", (0 * level) + 1, ' ')", "php_printf(\"%*c[\\\"\", (0 * num_args) + 1, ' ')", "php_printf(\"%*c[\\\"\", (args != 0) + 1, ' ')", "php_printf(\"%*c[\\\"\", (args == 0) + 1, ' ')", "php_printf(\"%*c[\\\"\", (hash_key != 0) + 1, ' ')", "php_printf(\"%*c[\\\"\", (hash_key == 0) + 1, ' ')", "php_printf(\"%*c[\\\"\", (level != 0) + 1, ' ')", "php_printf(\"%*c[\\\"\", (level * num_args) + 1, ' ')", "php_printf(\"%*c[\\\"\", (level + 0) + 1, ' ')", "php_printf(\"%*c[\\\"\", (level - 0) + 1, ' ')", "php_printf(\"%*c[\\\"\", (level == 0) + 1, ' ')", "php_printf(\"%*c[\\\"\", (level) + 1, ' ')", "php_printf(\"%*c[\\\"\", (num_args != 0) + 1, ' ')", "php_printf(\"%*c[\\\"\", (num_args != level) + 1, ' ')", "php_printf(\"%*c[\\\"\", (num_args * level) + 1, ' ')", "php_printf(\"%*c[\\\"\", (num_args + 0) + 1, ' ')", "php_printf(\"%*c[\\\"\", (num_args + level) + 1, ' ')", "php_printf(\"%*c[\\\"\", (num_args - 0) + 1, ' ')", "php_printf(\"%*c[\\\"\", (num_args - level) + 1, ' ')", "php_printf(\"%*c[\\\"\", (num_args == 0) + 1, ' ')", "php_printf(\"%*c[\\\"\", (num_args == level) + 1, ' ')", "php_printf(\"%*c[\\\"\", (num_args) + 1, ' ')", "php_printf(\"%*c[\\\"\", (zv != 0) + 1, ' ')", "php_printf(\"%*c[\\\"\", (zv == 0) + 1, ' ')", "php_printf(\"%*c[\\\"\", level + (0 * level), ' ')", "php_printf(\"%*c[\\\"\", level + (0 * num_args), ' ')", "php_printf(\"%*c[\\\"\", level + (0), ' ')", "php_printf(\"%*c[\\\"\", level + (args != 0), ' ')", "php_printf(\"%*c[\\\"\", level + (args == 0), ' ')", "php_printf(\"%*c[\\\"\", level + (hash_key != 0), ' ')", "php_printf(\"%*c[\\\"\", level + (hash_key == 0), ' ')", "php_printf(\"%*c[\\\"\", level + (level != 0), ' ')", "php_printf(\"%*c[\\\"\", level + (level * num_args), ' ')", "php_printf(\"%*c[\\\"\", level + (level + 0), ' ')", "php_printf(\"%*c[\\\"\", level + (level - 0), ' ')", "php_printf(\"%*c[\\\"\", level + (level == 0), ' ')", "php_printf(\"%*c[\\\"\", level + (num_args != 0), ' ')", "php_printf(\"%*c[\\\"\", level + (num_args != level), ' ')", "php_printf(\"%*c[\\\"\", level + (num_args * level), ' ')", "php_printf(\"%*c[\\\"\", level + (num_args + 0), ' ')", "php_printf(\"%*c[\\\"\", level + (num_args + level), ' ')", "php_printf(\"%*c[\\\"\", level + (num_args - 0), ' ')", "php_printf(\"%*c[\\\"\", level + (num_args - level), ' ')", "php_printf(\"%*c[\\\"\", level + (num_args == 0), ' ')", "php_printf(\"%*c[\\\"\", level + (num_args == level), ' ')", "php_printf(\"%*c[\\\"\", level + (zv != 0), ' ')", "php_printf(\"%*c[\\\"\", level + (zv == 0), ' ')", "php_printf((&args), level + 1, ' ')", "php_printf((&hash_key), level + 1, ' ')", "php_printf((&level), level + 1, ' ')", "php_printf((&num_args), level + 1, ' ')", "php_printf((&zv), level + 1, ' ')", "php_printf((0), level + 1, ' ')"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.621187773037768, -7.4560497209377683, -6.5248437920377684, -5.3236328930377681, -6.7358435830377683, -6.9746095730377684, -7.2632376730377679]
								}, {
									"case":	2,
									"scores":	[-6.114118103037768]
								}, {
									"case":	3,
									"scores":	[-6.114118103037768]
								}, {
									"case":	4,
									"scores":	[-6.114118103037768]
								}, {
									"case":	5,
									"scores":	[-6.114118103037768]
								}, {
									"case":	6,
									"scores":	[-6.114118103037768]
								}, {
									"case":	7,
									"scores":	[-6.114118103037768]
								}, {
									"case":	8,
									"scores":	[-6.114118103037768]
								}, {
									"case":	9,
									"scores":	[-6.114118103037768]
								}, {
									"case":	10,
									"scores":	[-6.114118103037768]
								}, {
									"case":	11,
									"scores":	[-6.114118103037768]
								}, {
									"case":	12,
									"scores":	[-6.114118103037768]
								}, {
									"case":	13,
									"scores":	[-6.114118103037768]
								}, {
									"case":	14,
									"scores":	[-6.114118103037768]
								}, {
									"case":	15,
									"scores":	[-6.114118103037768]
								}, {
									"case":	16,
									"scores":	[-6.114118103037768]
								}, {
									"case":	17,
									"scores":	[-6.114118103037768]
								}, {
									"case":	18,
									"scores":	[-6.114118103037768]
								}, {
									"case":	19,
									"scores":	[-6.114118103037768]
								}, {
									"case":	20,
									"scores":	[-6.114118103037768]
								}, {
									"case":	21,
									"scores":	[-6.114118103037768]
								}, {
									"case":	22,
									"scores":	[-6.114118103037768]
								}, {
									"case":	23,
									"scores":	[-6.114118103037768]
								}, {
									"case":	24,
									"scores":	[-6.114118103037768]
								}, {
									"case":	25,
									"scores":	[-6.114118103037768]
								}, {
									"case":	26,
									"scores":	[-6.114118103037768]
								}, {
									"case":	27,
									"scores":	[-6.114118103037768]
								}, {
									"case":	28,
									"scores":	[-6.114118103037768]
								}, {
									"case":	29,
									"scores":	[-6.114118103037768]
								}, {
									"case":	30,
									"scores":	[-6.114118103037768]
								}, {
									"case":	31,
									"scores":	[-6.114118103037768]
								}, {
									"case":	32,
									"scores":	[-6.114118103037768]
								}, {
									"case":	33,
									"scores":	[-6.114118103037768]
								}, {
									"case":	34,
									"scores":	[-6.114118103037768]
								}, {
									"case":	35,
									"scores":	[-6.114118103037768]
								}, {
									"case":	36,
									"scores":	[-6.114118103037768]
								}, {
									"case":	37,
									"scores":	[-6.114118103037768]
								}, {
									"case":	38,
									"scores":	[-6.114118103037768]
								}, {
									"case":	39,
									"scores":	[-6.114118103037768]
								}, {
									"case":	40,
									"scores":	[-6.114118103037768]
								}, {
									"case":	41,
									"scores":	[-6.114118103037768]
								}, {
									"case":	42,
									"scores":	[-6.114118103037768]
								}, {
									"case":	43,
									"scores":	[-6.114118103037768]
								}, {
									"case":	44,
									"scores":	[-6.114118103037768]
								}, {
									"case":	45,
									"scores":	[-6.114118103037768]
								}, {
									"case":	46,
									"scores":	[-6.114118103037768]
								}, {
									"case":	47,
									"scores":	[-6.114118103037768]
								}, {
									"case":	48,
									"scores":	[-6.114118103037768]
								}, {
									"case":	49,
									"scores":	[-6.114118103037768]
								}, {
									"case":	50,
									"scores":	[-6.114118103037768]
								}, {
									"case":	51,
									"scores":	[-6.114118103037768]
								}, {
									"case":	52,
									"scores":	[-6.114118103037768]
								}, {
									"case":	53,
									"scores":	[-6.114118103037768]
								}, {
									"case":	54,
									"scores":	[-6.114118103037768]
								}, {
									"case":	55,
									"scores":	[-6.114118103037768]
								}, {
									"case":	56,
									"scores":	[-6.114118103037768]
								}, {
									"case":	57,
									"scores":	[-6.114118103037768]
								}, {
									"case":	58,
									"scores":	[-6.114118103037768]
								}, {
									"case":	59,
									"scores":	[-6.114118103037768]
								}, {
									"case":	60,
									"scores":	[-6.114118103037768]
								}, {
									"case":	61,
									"scores":	[-6.114118103037768]
								}, {
									"case":	62,
									"scores":	[-6.114118103037768]
								}, {
									"case":	63,
									"scores":	[-6.114118103037768]
								}, {
									"case":	64,
									"scores":	[-6.114118103037768]
								}, {
									"case":	65,
									"scores":	[-6.114118103037768]
								}, {
									"case":	66,
									"scores":	[-6.114118103037768]
								}, {
									"case":	67,
									"scores":	[-6.114118103037768]
								}, {
									"case":	68,
									"scores":	[-6.114118103037768]
								}, {
									"case":	69,
									"scores":	[-6.114118103037768]
								}, {
									"case":	70,
									"scores":	[-6.114118103037768]
								}, {
									"case":	71,
									"scores":	[-6.114118103037768]
								}]
						}]
				}, {
					"line":	48,
					"switches":	[{
							"switch":	6,
							"types":	[[], [], [], [], [33, 34, 35], [1, 2, 3, 4, 5], [], [], [], [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [], [], [], [], [], []],
							"begin_line":	49,
							"begin_column":	1,
							"end_line":	49,
							"end_column":	1,
							"patch_codes":	["memset(&hash_key->arKey, 0, sizeof (*(&hash_key->arKey)))", "memset(&hash_key->h, 0, sizeof (*(&hash_key->h)))", "memset(&hash_key->nKeyLength, 0, sizeof (*(&hash_key->nKeyLength)))", "memset(hash_key, 0, sizeof (*(hash_key)))", "memset(hash_key->arKey, 0, sizeof (*(hash_key->arKey)))", "(**(zv)).value.ht->nApplyCount++", "(**(zv)).value.ht->nApplyCount--", "level = (0)", "level = (1)", "level = (2)", "level = (level)", "level = (num_args)", "php_body_write(((hash_key)->arKey), (hash_key->nKeyLength - 1))", "php_body_write((hash_key->arKey), ((hash_key)->nKeyLength - 1))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(zv)).value.str.val)", "php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', (hash_key)->h)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((zv))))", "php_var_dump((zv), level + 2)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "exit(1)", "level = __builtin_va_arg(args, int)", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - 1))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', hash_key->h)", "php_printf(\"%*c[\\\"\", level + 1, ' ')", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "php_var_dump(zv, level + 2)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L49\", 7, &(hash_key), sizeof (hash_key), &(hash_key->arKey), sizeof (hash_key->arKey), &(hash_key->nKeyLength), sizeof (hash_key->nKeyLength), &(level), sizeof (level), &(zv), sizeof (zv), &(hash_key->h), sizeof (hash_key->h), &(args), sizeof (args)))\n    return 0;\n", "if (__is_neg(\"\", \"L49\", 7, &(hash_key), sizeof (hash_key), &(hash_key->arKey), sizeof (hash_key->arKey), &(hash_key->nKeyLength), sizeof (hash_key->nKeyLength), &(level), sizeof (level), &(zv), sizeof (zv), &(hash_key->h), sizeof (hash_key->h), &(args), sizeof (args)))\n    return 1;\n", "if (__is_neg(\"\", \"L49\", 7, &(hash_key), sizeof (hash_key), &(hash_key->arKey), sizeof (hash_key->arKey), &(hash_key->nKeyLength), sizeof (hash_key->nKeyLength), &(level), sizeof (level), &(zv), sizeof (zv), &(hash_key->h), sizeof (hash_key->h), &(args), sizeof (args)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	2,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	3,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	4,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	5,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	6,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	7,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	8,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	9,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	10,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	11,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	12,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	13,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	14,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	15,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	16,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	17,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	18,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	19,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	20,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	21,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	22,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	23,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	24,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	25,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	26,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	27,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	28,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	29,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	30,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	31,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	32,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	33,
									"scores":	[-9.03460893582025, -7.7852057751202484, -7.54066937412025, -7.9572148931202484, -7.8634679701202481, -8.42962462712025, -7.898617766920248]
								}, {
									"case":	34,
									"scores":	[-11.859077935820249, -10.609674775120249, -10.365138374120249, -10.781683893120249, -10.687936970120248, -11.254093627120248, -10.723086766920249]
								}, {
									"case":	35,
									"scores":	[-11.859077935820249, -10.609674775120249, -10.365138374120249, -10.781683893120249, -10.687936970120248, -11.254093627120248, -10.723086766920249]
								}]
						}, {
							"switch":	7,
							"types":	[[], [], [1], [], [], [], [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], [], [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [], [], [51]],
							"begin_line":	49,
							"begin_column":	3,
							"end_line":	49,
							"end_column":	53,
							"patch_codes":	["if (!__is_neg(\"\", \"L49\", 7, &(hash_key), sizeof (hash_key), &(hash_key->arKey), sizeof (hash_key->arKey), &(hash_key->nKeyLength), sizeof (hash_key->nKeyLength), &(level), sizeof (level), &(zv), sizeof (zv), &(hash_key->h), sizeof (hash_key->h), &(args), sizeof (args)))\n    php_body_write((hash_key->arKey), (hash_key->nKeyLength - 1));\n", "chown((hash_key->arKey), (hash_key->nKeyLength - 1), 0)", "chown((hash_key->arKey), (hash_key->nKeyLength - 1), 1)", "chown((hash_key->arKey), (hash_key->nKeyLength - 1), 2)", "lchown((hash_key->arKey), (hash_key->nKeyLength - 1), 0)", "lchown((hash_key->arKey), (hash_key->nKeyLength - 1), 1)", "lchown((hash_key->arKey), (hash_key->nKeyLength - 1), 2)", "mknod((hash_key->arKey), (hash_key->nKeyLength - 1), 0)", "mknod((hash_key->arKey), (hash_key->nKeyLength - 1), 1)", "mknod((hash_key->arKey), (hash_key->nKeyLength - 1), 2)", "php_start_ob_buffer((hash_key->arKey), (hash_key->nKeyLength - 1), 0)", "php_start_ob_buffer((hash_key->arKey), (hash_key->nKeyLength - 1), 1)", "php_start_ob_buffer((hash_key->arKey), (hash_key->nKeyLength - 1), 2)", "php_start_ob_buffer_named((hash_key->arKey), (hash_key->nKeyLength - 1), 0)", "php_start_ob_buffer_named((hash_key->arKey), (hash_key->nKeyLength - 1), 1)", "php_start_ob_buffer_named((hash_key->arKey), (hash_key->nKeyLength - 1), 2)", "zend_fetch_class((hash_key->arKey), (hash_key->nKeyLength - 1), 0)", "zend_fetch_class((hash_key->arKey), (hash_key->nKeyLength - 1), 1)", "zend_fetch_class((hash_key->arKey), (hash_key->nKeyLength - 1), 2)", "zend_fetch_class((hash_key->arKey), (hash_key->nKeyLength - 1), level)", "zend_fetch_class((hash_key->arKey), (hash_key->nKeyLength - 1), num_args)", "zend_get_compiled_variable_name((hash_key->arKey), (hash_key->nKeyLength - 1), 0)", "zend_get_configuration_directive((hash_key->arKey), (hash_key->nKeyLength - 1), 0)", "zend_get_constant((hash_key->arKey), (hash_key->nKeyLength - 1), 0)", "zend_ini_double((hash_key->arKey), (hash_key->nKeyLength - 1), 0)", "zend_ini_double((hash_key->arKey), (hash_key->nKeyLength - 1), 1)", "zend_ini_double((hash_key->arKey), (hash_key->nKeyLength - 1), 2)", "zend_ini_double((hash_key->arKey), (hash_key->nKeyLength - 1), level)", "zend_ini_double((hash_key->arKey), (hash_key->nKeyLength - 1), num_args)", "zend_ini_long((hash_key->arKey), (hash_key->nKeyLength - 1), 0)", "zend_ini_long((hash_key->arKey), (hash_key->nKeyLength - 1), 1)", "zend_ini_long((hash_key->arKey), (hash_key->nKeyLength - 1), 2)", "zend_ini_long((hash_key->arKey), (hash_key->nKeyLength - 1), level)", "zend_ini_long((hash_key->arKey), (hash_key->nKeyLength - 1), num_args)", "zend_ini_register_displayer((hash_key->arKey), (hash_key->nKeyLength - 1), 0)", "zend_ini_register_displayer((hash_key->arKey), (hash_key->nKeyLength - 1), display_link_numbers)", "zend_ini_register_displayer((hash_key->arKey), (hash_key->nKeyLength - 1), zend_ini_boolean_displayer_cb)", "zend_ini_register_displayer((hash_key->arKey), (hash_key->nKeyLength - 1), zend_ini_color_displayer_cb)", "zend_ini_string((hash_key->arKey), (hash_key->nKeyLength - 1), 0)", "zend_ini_string((hash_key->arKey), (hash_key->nKeyLength - 1), 1)", "zend_ini_string((hash_key->arKey), (hash_key->nKeyLength - 1), 2)", "zend_ini_string((hash_key->arKey), (hash_key->nKeyLength - 1), level)", "zend_ini_string((hash_key->arKey), (hash_key->nKeyLength - 1), num_args)", "zend_is_callable((hash_key->arKey), (hash_key->nKeyLength - 1), 0)", "zend_register_auto_global((hash_key->arKey), (hash_key->nKeyLength - 1), 0)", "zend_restore_ini_entry((hash_key->arKey), (hash_key->nKeyLength - 1), 0)", "zend_restore_ini_entry((hash_key->arKey), (hash_key->nKeyLength - 1), 1)", "zend_restore_ini_entry((hash_key->arKey), (hash_key->nKeyLength - 1), 2)", "zend_restore_ini_entry((hash_key->arKey), (hash_key->nKeyLength - 1), level)", "zend_restore_ini_entry((hash_key->arKey), (hash_key->nKeyLength - 1), num_args)", "{\n}\n", "Debug((hash_key->arKey), (hash_key->nKeyLength - 1))", "_array_init((hash_key->arKey), (hash_key->nKeyLength - 1))", "_estrndup((hash_key->arKey), (hash_key->nKeyLength - 1))", "_zend_bailout((hash_key->arKey), (hash_key->nKeyLength - 1))", "cfg_get_entry((hash_key->arKey), (hash_key->nKeyLength - 1))", "chmod((hash_key->arKey), (hash_key->nKeyLength - 1))", "lchmod((hash_key->arKey), (hash_key->nKeyLength - 1))", "mkdir((hash_key->arKey), (hash_key->nKeyLength - 1))", "mkfifo((hash_key->arKey), (hash_key->nKeyLength - 1))", "php_default_output_func((hash_key->arKey), (hash_key->nKeyLength - 1))", "php_header_write((hash_key->arKey), (hash_key->nKeyLength - 1))", "php_ini_activate_per_dir_config((hash_key->arKey), (hash_key->nKeyLength - 1))", "php_ini_activate_per_host_config((hash_key->arKey), (hash_key->nKeyLength - 1))", "php_printf((hash_key->arKey), (hash_key->nKeyLength - 1))", "php_ub_body_write((hash_key->arKey), (hash_key->nKeyLength - 1))", "php_ub_body_write_no_header((hash_key->arKey), (hash_key->nKeyLength - 1))", "php_write((hash_key->arKey), (hash_key->nKeyLength - 1))", "printf((hash_key->arKey), (hash_key->nKeyLength - 1))", "virtual_chmod((hash_key->arKey), (hash_key->nKeyLength - 1))", "virtual_creat((hash_key->arKey), (hash_key->nKeyLength - 1))", "virtual_mkdir((hash_key->arKey), (hash_key->nKeyLength - 1))", "wprintf((hash_key->arKey), (hash_key->nKeyLength - 1))", "zend_auto_global_disable_jit((hash_key->arKey), (hash_key->nKeyLength - 1))", "zend_disable_class((hash_key->arKey), (hash_key->nKeyLength - 1))", "zend_disable_function((hash_key->arKey), (hash_key->nKeyLength - 1))", "zend_get_class_fetch_type((hash_key->arKey), (hash_key->nKeyLength - 1))", "zend_get_compiled_variable_value((hash_key->arKey), (hash_key->nKeyLength - 1))", "zend_get_hash_value((hash_key->arKey), (hash_key->nKeyLength - 1))", "zend_hash_func((hash_key->arKey), (hash_key->nKeyLength - 1))", "zend_html_puts((hash_key->arKey), (hash_key->nKeyLength - 1))", "zend_inline_hash_func((hash_key->arKey), (hash_key->nKeyLength - 1))", "zend_is_auto_global((hash_key->arKey), (hash_key->nKeyLength - 1))", "zend_objects_destroy_object((hash_key->arKey), (hash_key->nKeyLength - 1))", "zend_objects_store_init((hash_key->arKey), (hash_key->nKeyLength - 1))", "zend_str_tolower((hash_key->arKey), (hash_key->nKeyLength - 1))", "zend_str_tolower_dup((hash_key->arKey), (hash_key->nKeyLength - 1))", "zend_string_to_double((hash_key->arKey), (hash_key->nKeyLength - 1))", "zend_strndup((hash_key->arKey), (hash_key->nKeyLength - 1))", "zend_ts_hash_func((hash_key->arKey), (hash_key->nKeyLength - 1))", "zval_set_refcount_p((hash_key->arKey), (hash_key->nKeyLength - 1))", "php_body_write(((&args)->arKey), (hash_key->nKeyLength - 1))", "php_body_write(((&hash_key)->arKey), (hash_key->nKeyLength - 1))", "php_body_write(((&level)->arKey), (hash_key->nKeyLength - 1))", "php_body_write(((&num_args)->arKey), (hash_key->nKeyLength - 1))", "php_body_write(((&zv)->arKey), (hash_key->nKeyLength - 1))", "php_body_write(((hash_key)->arKey), (hash_key->nKeyLength - 1))", "php_body_write((hash_key->arKey), ((&args)->nKeyLength - 1))", "php_body_write((hash_key->arKey), ((&hash_key)->nKeyLength - 1))", "php_body_write((hash_key->arKey), ((&level)->nKeyLength - 1))", "php_body_write((hash_key->arKey), ((&num_args)->nKeyLength - 1))", "php_body_write((hash_key->arKey), ((&zv)->nKeyLength - 1))", "php_body_write((hash_key->arKey), ((hash_key)->nKeyLength - 1))", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - (0 * level)))", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - (0 * num_args)))", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - (0)))", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - (args != 0)))", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - (args == 0)))", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - (hash_key != 0)))", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - (hash_key == 0)))", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - (level != 0)))", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - (level * num_args)))", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - (level + 0)))", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - (level - 0)))", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - (level == 0)))", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - (num_args != 0)))", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - (num_args != level)))", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - (num_args * level)))", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - (num_args + 0)))", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - (num_args + level)))", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - (num_args - 0)))", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - (num_args - level)))", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - (num_args == 0)))", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - (num_args == level)))", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - (zv != 0)))", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - (zv == 0)))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.93260196572025, -6.66976957572025, -5.6934698757202487, -6.76151979772025, -7.1527108657202483, -6.9139448757202482, -7.4413389657202487]
								}, {
									"case":	2,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	3,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	4,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	5,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	6,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	7,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	8,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	9,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	10,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	11,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	12,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	13,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	14,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	15,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	16,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	17,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	18,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	19,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	20,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	21,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	22,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	23,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	24,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	25,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	26,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	27,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	28,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	29,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	30,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	31,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	32,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	33,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	34,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	35,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	36,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	37,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	38,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	39,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	40,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	41,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	42,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	43,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	44,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	45,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	46,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	47,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	48,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	49,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	50,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	51,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	52,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	53,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	54,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	55,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	56,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	57,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	58,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	59,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	60,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	61,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	62,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	63,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	64,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	65,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	66,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	67,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	68,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	69,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	70,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	71,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	72,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	73,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	74,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	75,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	76,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	77,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	78,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	79,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	80,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	81,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	82,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	83,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	84,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	85,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	86,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	87,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	88,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	89,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	90,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	91,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	92,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	93,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	94,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	95,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	96,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	97,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	98,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	99,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	100,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	101,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	102,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	103,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	104,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	105,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	106,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	107,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	108,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	109,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	110,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	111,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	112,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	113,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	114,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	115,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	116,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	117,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	118,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	119,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	120,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	121,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	122,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	123,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	124,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	125,
									"scores":	[-6.0939153957202485]
								}, {
									"case":	126,
									"scores":	[-6.0939153957202485]
								}]
						}]
				}, {
					"line":	49,
					"switches":	[{
							"switch":	8,
							"types":	[[], [], [], [], [32, 33, 34], [1, 2, 3, 4], [], [], [], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [], [], []],
							"begin_line":	50,
							"begin_column":	1,
							"end_line":	50,
							"end_column":	1,
							"patch_codes":	["memset(&hash_key->arKey, 0, sizeof (*(&hash_key->arKey)))", "memset(&hash_key->h, 0, sizeof (*(&hash_key->h)))", "memset(&hash_key->nKeyLength, 0, sizeof (*(&hash_key->nKeyLength)))", "memset(hash_key->arKey, 0, sizeof (*(hash_key->arKey)))", "(**(zv)).value.ht->nApplyCount++", "(**(zv)).value.ht->nApplyCount--", "level = (0)", "level = (1)", "level = (2)", "level = (level)", "level = (num_args)", "php_body_write(((hash_key)->arKey), (hash_key->nKeyLength - 1))", "php_body_write((hash_key->arKey), ((hash_key)->nKeyLength - 1))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(zv)).value.str.val)", "php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', (hash_key)->h)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((zv))))", "php_var_dump((zv), level + 2)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "exit(1)", "level = __builtin_va_arg(args, int)", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - 1))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', hash_key->h)", "php_printf(\"%*c[\\\"\", level + 1, ' ')", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "php_var_dump(zv, level + 2)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L50\", 7, &(hash_key), sizeof (hash_key), &(hash_key->arKey), sizeof (hash_key->arKey), &(hash_key->nKeyLength), sizeof (hash_key->nKeyLength), &(zv), sizeof (zv), &(level), sizeof (level), &(hash_key->h), sizeof (hash_key->h), &(args), sizeof (args)))\n    return 0;\n", "if (__is_neg(\"\", \"L50\", 7, &(hash_key), sizeof (hash_key), &(hash_key->arKey), sizeof (hash_key->arKey), &(hash_key->nKeyLength), sizeof (hash_key->nKeyLength), &(zv), sizeof (zv), &(level), sizeof (level), &(hash_key->h), sizeof (hash_key->h), &(args), sizeof (args)))\n    return 1;\n", "if (__is_neg(\"\", \"L50\", 7, &(hash_key), sizeof (hash_key), &(hash_key->arKey), sizeof (hash_key->arKey), &(hash_key->nKeyLength), sizeof (hash_key->nKeyLength), &(zv), sizeof (zv), &(level), sizeof (level), &(hash_key->h), sizeof (hash_key->h), &(args), sizeof (args)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.07371268840273]
								}, {
									"case":	2,
									"scores":	[-6.07371268840273]
								}, {
									"case":	3,
									"scores":	[-6.07371268840273]
								}, {
									"case":	4,
									"scores":	[-6.07371268840273]
								}, {
									"case":	5,
									"scores":	[-6.07371268840273]
								}, {
									"case":	6,
									"scores":	[-6.07371268840273]
								}, {
									"case":	7,
									"scores":	[-6.07371268840273]
								}, {
									"case":	8,
									"scores":	[-6.07371268840273]
								}, {
									"case":	9,
									"scores":	[-6.07371268840273]
								}, {
									"case":	10,
									"scores":	[-6.07371268840273]
								}, {
									"case":	11,
									"scores":	[-6.07371268840273]
								}, {
									"case":	12,
									"scores":	[-6.07371268840273]
								}, {
									"case":	13,
									"scores":	[-6.07371268840273]
								}, {
									"case":	14,
									"scores":	[-6.07371268840273]
								}, {
									"case":	15,
									"scores":	[-6.07371268840273]
								}, {
									"case":	16,
									"scores":	[-6.07371268840273]
								}, {
									"case":	17,
									"scores":	[-6.07371268840273]
								}, {
									"case":	18,
									"scores":	[-6.07371268840273]
								}, {
									"case":	19,
									"scores":	[-6.07371268840273]
								}, {
									"case":	20,
									"scores":	[-6.07371268840273]
								}, {
									"case":	21,
									"scores":	[-6.07371268840273]
								}, {
									"case":	22,
									"scores":	[-6.07371268840273]
								}, {
									"case":	23,
									"scores":	[-6.07371268840273]
								}, {
									"case":	24,
									"scores":	[-6.07371268840273]
								}, {
									"case":	25,
									"scores":	[-6.07371268840273]
								}, {
									"case":	26,
									"scores":	[-6.07371268840273]
								}, {
									"case":	27,
									"scores":	[-6.07371268840273]
								}, {
									"case":	28,
									"scores":	[-6.07371268840273]
								}, {
									"case":	29,
									"scores":	[-6.07371268840273]
								}, {
									"case":	30,
									"scores":	[-6.07371268840273]
								}, {
									"case":	31,
									"scores":	[-6.07371268840273]
								}, {
									"case":	32,
									"scores":	[-8.42934499960273, -8.64042511680273, -8.68099141680273, -7.8432652628027286, -7.93701218580273, -8.40942191980273, -7.8784150596027285]
								}, {
									"case":	33,
									"scores":	[-11.253813999602729, -11.464894116802729, -11.50546041680273, -10.667734262802728, -10.761481185802729, -11.233890919802729, -10.702884059602729]
								}, {
									"case":	34,
									"scores":	[-11.253813999602729, -11.464894116802729, -11.50546041680273, -10.667734262802728, -10.761481185802729, -11.233890919802729, -10.702884059602729]
								}]
						}, {
							"switch":	9,
							"types":	[[], [], [1], [], [], [], [272, 273, 274, 275, 276, 277, 278], [], [226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], [], [], [225]],
							"begin_line":	50,
							"begin_column":	3,
							"end_line":	50,
							"end_column":	23,
							"patch_codes":	["if (!__is_neg(\"\", \"L50\", 7, &(hash_key), sizeof (hash_key), &(hash_key->arKey), sizeof (hash_key->arKey), &(hash_key->nKeyLength), sizeof (hash_key->nKeyLength), &(zv), sizeof (zv), &(level), sizeof (level), &(hash_key->h), sizeof (hash_key->h), &(args), sizeof (args)))\n    php_printf(\"\\\"]=>\\n\");\n", "__stat_file_close(\"\\\"]=>\\n\", 0)", "_estrndup(\"\\\"]=>\\n\", 0)", "_estrndup(\"\\\"]=>\\n\", 1)", "_estrndup(\"\\\"]=>\\n\", 2)", "access(\"\\\"]=>\\n\", 0)", "access(\"\\\"]=>\\n\", 1)", "access(\"\\\"]=>\\n\", 2)", "access(\"\\\"]=>\\n\", level)", "access(\"\\\"]=>\\n\", num_args)", "cfg_get_double(\"\\\"]=>\\n\", 0)", "cfg_get_entry(\"\\\"]=>\\n\", 0)", "cfg_get_entry(\"\\\"]=>\\n\", 1)", "cfg_get_entry(\"\\\"]=>\\n\", 2)", "cfg_get_long(\"\\\"]=>\\n\", 0)", "cfg_get_string(\"\\\"]=>\\n\", 0)", "chmod(\"\\\"]=>\\n\", 0)", "chmod(\"\\\"]=>\\n\", 1)", "chmod(\"\\\"]=>\\n\", 2)", "dlopen(\"\\\"]=>\\n\", 0)", "dlopen(\"\\\"]=>\\n\", 1)", "dlopen(\"\\\"]=>\\n\", 2)", "dlopen(\"\\\"]=>\\n\", level)", "dlopen(\"\\\"]=>\\n\", num_args)", "execv(\"\\\"]=>\\n\", 0)", "execvp(\"\\\"]=>\\n\", 0)", "expand_filepath(\"\\\"]=>\\n\", 0)", "fopen(\"\\\"]=>\\n\", 0)", "fputs(\"\\\"]=>\\n\", 0)", "index(\"\\\"]=>\\n\", 0)", "index(\"\\\"]=>\\n\", 1)", "index(\"\\\"]=>\\n\", 2)", "index(\"\\\"]=>\\n\", level)", "index(\"\\\"]=>\\n\", num_args)", "lchmod(\"\\\"]=>\\n\", 0)", "lchmod(\"\\\"]=>\\n\", 1)", "lchmod(\"\\\"]=>\\n\", 2)", "link(\"\\\"]=>\\n\", 0)", "lstat(\"\\\"]=>\\n\", 0)", "lutimes(\"\\\"]=>\\n\", 0)", "mblen(\"\\\"]=>\\n\", 0)", "mblen(\"\\\"]=>\\n\", 1)", "mblen(\"\\\"]=>\\n\", 2)", "mkdir(\"\\\"]=>\\n\", 0)", "mkdir(\"\\\"]=>\\n\", 1)", "mkdir(\"\\\"]=>\\n\", 2)", "mkfifo(\"\\\"]=>\\n\", 0)", "mkfifo(\"\\\"]=>\\n\", 1)", "mkfifo(\"\\\"]=>\\n\", 2)", "pathconf(\"\\\"]=>\\n\", 0)", "pathconf(\"\\\"]=>\\n\", 1)", "pathconf(\"\\\"]=>\\n\", 2)", "pathconf(\"\\\"]=>\\n\", level)", "pathconf(\"\\\"]=>\\n\", num_args)", "php_body_write(\"\\\"]=>\\n\", 0)", "php_body_write(\"\\\"]=>\\n\", 1)", "php_body_write(\"\\\"]=>\\n\", 2)", "php_check_open_basedir_ex(\"\\\"]=>\\n\", 0)", "php_check_open_basedir_ex(\"\\\"]=>\\n\", 1)", "php_check_open_basedir_ex(\"\\\"]=>\\n\", 2)", "php_check_open_basedir_ex(\"\\\"]=>\\n\", level)", "php_check_open_basedir_ex(\"\\\"]=>\\n\", num_args)", "php_check_specific_open_basedir(\"\\\"]=>\\n\", 0)", "php_default_output_func(\"\\\"]=>\\n\", 0)", "php_default_output_func(\"\\\"]=>\\n\", 1)", "php_default_output_func(\"\\\"]=>\\n\", 2)", "php_header_write(\"\\\"]=>\\n\", 0)", "php_header_write(\"\\\"]=>\\n\", 1)", "php_header_write(\"\\\"]=>\\n\", 2)", "php_ini_activate_per_host_config(\"\\\"]=>\\n\", 0)", "php_ini_activate_per_host_config(\"\\\"]=>\\n\", 1)", "php_ini_activate_per_host_config(\"\\\"]=>\\n\", 2)", "php_stream_filter_register_factory(\"\\\"]=>\\n\", 0)", "php_stream_filter_register_factory_volatile(\"\\\"]=>\\n\", 0)", "php_stream_from_persistent_id(\"\\\"]=>\\n\", 0)", "php_ub_body_write(\"\\\"]=>\\n\", 0)", "php_ub_body_write(\"\\\"]=>\\n\", 1)", "php_ub_body_write(\"\\\"]=>\\n\", 2)", "php_ub_body_write_no_header(\"\\\"]=>\\n\", 0)", "php_ub_body_write_no_header(\"\\\"]=>\\n\", 1)", "php_ub_body_write_no_header(\"\\\"]=>\\n\", 2)", "popen(\"\\\"]=>\\n\", 0)", "realpath(\"\\\"]=>\\n\", 0)", "realpath_cache_del(\"\\\"]=>\\n\", 0)", "realpath_cache_del(\"\\\"]=>\\n\", 1)", "realpath_cache_del(\"\\\"]=>\\n\", 2)", "realpath_cache_del(\"\\\"]=>\\n\", level)", "realpath_cache_del(\"\\\"]=>\\n\", num_args)", "rename(\"\\\"]=>\\n\", 0)", "rindex(\"\\\"]=>\\n\", 0)", "rindex(\"\\\"]=>\\n\", 1)", "rindex(\"\\\"]=>\\n\", 2)", "rindex(\"\\\"]=>\\n\", level)", "rindex(\"\\\"]=>\\n\", num_args)", "setdomainname(\"\\\"]=>\\n\", 0)", "setdomainname(\"\\\"]=>\\n\", 1)", "setdomainname(\"\\\"]=>\\n\", 2)", "sethostname(\"\\\"]=>\\n\", 0)", "sethostname(\"\\\"]=>\\n\", 1)", "sethostname(\"\\\"]=>\\n\", 2)", "stat(\"\\\"]=>\\n\", 0)", "strcasecmp(\"\\\"]=>\\n\", 0)", "strchr(\"\\\"]=>\\n\", 0)", "strchr(\"\\\"]=>\\n\", 1)", "strchr(\"\\\"]=>\\n\", 2)", "strchr(\"\\\"]=>\\n\", level)", "strchr(\"\\\"]=>\\n\", num_args)", "strcmp(\"\\\"]=>\\n\", 0)", "strcoll(\"\\\"]=>\\n\", 0)", "strcspn(\"\\\"]=>\\n\", 0)", "strndup(\"\\\"]=>\\n\", 0)", "strndup(\"\\\"]=>\\n\", 1)", "strndup(\"\\\"]=>\\n\", 2)", "strnlen(\"\\\"]=>\\n\", 0)", "strnlen(\"\\\"]=>\\n\", 1)", "strnlen(\"\\\"]=>\\n\", 2)", "strpbrk(\"\\\"]=>\\n\", 0)", "strrchr(\"\\\"]=>\\n\", 0)", "strrchr(\"\\\"]=>\\n\", 1)", "strrchr(\"\\\"]=>\\n\", 2)", "strrchr(\"\\\"]=>\\n\", level)", "strrchr(\"\\\"]=>\\n\", num_args)", "strspn(\"\\\"]=>\\n\", 0)", "strstr(\"\\\"]=>\\n\", 0)", "strtod(\"\\\"]=>\\n\", 0)", "strtof(\"\\\"]=>\\n\", 0)", "strtold(\"\\\"]=>\\n\", 0)", "symlink(\"\\\"]=>\\n\", 0)", "tempnam(\"\\\"]=>\\n\", 0)", "truncate(\"\\\"]=>\\n\", 0)", "truncate(\"\\\"]=>\\n\", 1)", "truncate(\"\\\"]=>\\n\", 2)", "tsrm_realpath(\"\\\"]=>\\n\", 0)", "utime(\"\\\"]=>\\n\", 0)", "utimes(\"\\\"]=>\\n\", 0)", "virtual_access(\"\\\"]=>\\n\", 0)", "virtual_access(\"\\\"]=>\\n\", 1)", "virtual_access(\"\\\"]=>\\n\", 2)", "virtual_access(\"\\\"]=>\\n\", level)", "virtual_access(\"\\\"]=>\\n\", num_args)", "virtual_chdir_file(\"\\\"]=>\\n\", 0)", "virtual_chdir_file(\"\\\"]=>\\n\", __choose)", "virtual_chdir_file(\"\\\"]=>\\n\", acct)", "virtual_chdir_file(\"\\\"]=>\\n\", atoi)", "virtual_chdir_file(\"\\\"]=>\\n\", chdir)", "virtual_chdir_file(\"\\\"]=>\\n\", chroot)", "virtual_chdir_file(\"\\\"]=>\\n\", php_check_open_basedir)", "virtual_chdir_file(\"\\\"]=>\\n\", php_check_safe_mode_include_dir)", "virtual_chdir_file(\"\\\"]=>\\n\", php_stream_filter_unregister_factory)", "virtual_chdir_file(\"\\\"]=>\\n\", puts)", "virtual_chdir_file(\"\\\"]=>\\n\", remove)", "virtual_chdir_file(\"\\\"]=>\\n\", revoke)", "virtual_chdir_file(\"\\\"]=>\\n\", rmdir)", "virtual_chdir_file(\"\\\"]=>\\n\", rpmatch)", "virtual_chdir_file(\"\\\"]=>\\n\", setlogin)", "virtual_chdir_file(\"\\\"]=>\\n\", system)", "virtual_chdir_file(\"\\\"]=>\\n\", unlink)", "virtual_chdir_file(\"\\\"]=>\\n\", unsetenv)", "virtual_chdir_file(\"\\\"]=>\\n\", virtual_chdir)", "virtual_chdir_file(\"\\\"]=>\\n\", virtual_rmdir)", "virtual_chdir_file(\"\\\"]=>\\n\", virtual_unlink)", "virtual_chdir_file(\"\\\"]=>\\n\", zend_get_module_started)", "virtual_chmod(\"\\\"]=>\\n\", 0)", "virtual_chmod(\"\\\"]=>\\n\", 1)", "virtual_chmod(\"\\\"]=>\\n\", 2)", "virtual_creat(\"\\\"]=>\\n\", 0)", "virtual_creat(\"\\\"]=>\\n\", 1)", "virtual_creat(\"\\\"]=>\\n\", 2)", "virtual_filepath(\"\\\"]=>\\n\", 0)", "virtual_fopen(\"\\\"]=>\\n\", 0)", "virtual_lstat(\"\\\"]=>\\n\", 0)", "virtual_mkdir(\"\\\"]=>\\n\", 0)", "virtual_mkdir(\"\\\"]=>\\n\", 1)", "virtual_mkdir(\"\\\"]=>\\n\", 2)", "virtual_popen(\"\\\"]=>\\n\", 0)", "virtual_realpath(\"\\\"]=>\\n\", 0)", "virtual_stat(\"\\\"]=>\\n\", 0)", "virtual_utime(\"\\\"]=>\\n\", 0)", "vprintf(\"\\\"]=>\\n\", 0)", "vprintf(\"\\\"]=>\\n\", args)", "zend_atoi(\"\\\"]=>\\n\", 0)", "zend_atoi(\"\\\"]=>\\n\", 1)", "zend_atoi(\"\\\"]=>\\n\", 2)", "zend_atoi(\"\\\"]=>\\n\", level)", "zend_atoi(\"\\\"]=>\\n\", num_args)", "zend_atol(\"\\\"]=>\\n\", 0)", "zend_atol(\"\\\"]=>\\n\", 1)", "zend_atol(\"\\\"]=>\\n\", 2)", "zend_atol(\"\\\"]=>\\n\", level)", "zend_atol(\"\\\"]=>\\n\", num_args)", "zend_auto_global_disable_jit(\"\\\"]=>\\n\", 0)", "zend_auto_global_disable_jit(\"\\\"]=>\\n\", 1)", "zend_auto_global_disable_jit(\"\\\"]=>\\n\", 2)", "zend_get_class_fetch_type(\"\\\"]=>\\n\", 0)", "zend_get_class_fetch_type(\"\\\"]=>\\n\", 1)", "zend_get_class_fetch_type(\"\\\"]=>\\n\", 2)", "zend_get_hash_value(\"\\\"]=>\\n\", 0)", "zend_get_hash_value(\"\\\"]=>\\n\", 1)", "zend_get_hash_value(\"\\\"]=>\\n\", 2)", "zend_hash_func(\"\\\"]=>\\n\", 0)", "zend_hash_func(\"\\\"]=>\\n\", 1)", "zend_hash_func(\"\\\"]=>\\n\", 2)", "zend_hex_strtod(\"\\\"]=>\\n\", 0)", "zend_html_puts(\"\\\"]=>\\n\", 0)", "zend_html_puts(\"\\\"]=>\\n\", 1)", "zend_html_puts(\"\\\"]=>\\n\", 2)", "zend_inline_hash_func(\"\\\"]=>\\n\", 0)", "zend_inline_hash_func(\"\\\"]=>\\n\", 1)", "zend_inline_hash_func(\"\\\"]=>\\n\", 2)", "zend_is_auto_global(\"\\\"]=>\\n\", 0)", "zend_is_auto_global(\"\\\"]=>\\n\", 1)", "zend_is_auto_global(\"\\\"]=>\\n\", 2)", "zend_oct_strtod(\"\\\"]=>\\n\", 0)", "zend_str_tolower_dup(\"\\\"]=>\\n\", 0)", "zend_str_tolower_dup(\"\\\"]=>\\n\", 1)", "zend_str_tolower_dup(\"\\\"]=>\\n\", 2)", "zend_stream_open(\"\\\"]=>\\n\", 0)", "zend_string_to_double(\"\\\"]=>\\n\", 0)", "zend_string_to_double(\"\\\"]=>\\n\", 1)", "zend_string_to_double(\"\\\"]=>\\n\", 2)", "zend_strndup(\"\\\"]=>\\n\", 0)", "zend_strndup(\"\\\"]=>\\n\", 1)", "zend_strndup(\"\\\"]=>\\n\", 2)", "zend_strtod(\"\\\"]=>\\n\", 0)", "{\n}\n", "__choose(\"\\\"]=>\\n\")", "__nan(\"\\\"]=>\\n\")", "__nanf(\"\\\"]=>\\n\")", "__nanl(\"\\\"]=>\\n\")", "__stat_write_init(\"\\\"]=>\\n\")", "_estrdup(\"\\\"]=>\\n\")", "a64l(\"\\\"]=>\\n\")", "acct(\"\\\"]=>\\n\")", "atof(\"\\\"]=>\\n\")", "atoi(\"\\\"]=>\\n\")", "atol(\"\\\"]=>\\n\")", "atoll(\"\\\"]=>\\n\")", "chdir(\"\\\"]=>\\n\")", "chroot(\"\\\"]=>\\n\")", "getenv(\"\\\"]=>\\n\")", "getpass(\"\\\"]=>\\n\")", "getpwnam(\"\\\"]=>\\n\")", "nan(\"\\\"]=>\\n\")", "nanf(\"\\\"]=>\\n\")", "nanl(\"\\\"]=>\\n\")", "opendir(\"\\\"]=>\\n\")", "perror(\"\\\"]=>\\n\")", "php_check_open_basedir(\"\\\"]=>\\n\")", "php_check_safe_mode_include_dir(\"\\\"]=>\\n\")", "php_stream_filter_unregister_factory(\"\\\"]=>\\n\")", "printf(\"\\\"]=>\\n\")", "puts(\"\\\"]=>\\n\")", "remove(\"\\\"]=>\\n\")", "revoke(\"\\\"]=>\\n\")", "rmdir(\"\\\"]=>\\n\")", "rpmatch(\"\\\"]=>\\n\")", "setlogin(\"\\\"]=>\\n\")", "strdup(\"\\\"]=>\\n\")", "strlen(\"\\\"]=>\\n\")", "system(\"\\\"]=>\\n\")", "unlink(\"\\\"]=>\\n\")", "unsetenv(\"\\\"]=>\\n\")", "virtual_chdir(\"\\\"]=>\\n\")", "virtual_opendir(\"\\\"]=>\\n\")", "virtual_rmdir(\"\\\"]=>\\n\")", "virtual_unlink(\"\\\"]=>\\n\")", "zend_get_module_started(\"\\\"]=>\\n\")", "zend_get_module_version(\"\\\"]=>\\n\")", "zend_make_compiled_string_description(\"\\\"]=>\\n\")", "zend_set_compiled_filename(\"\\\"]=>\\n\")", "zenderror(\"\\\"]=>\\n\")", "php_printf(\"\\\"]=>\\n or the directory does not exist\")", "php_printf((&args))", "php_printf((&hash_key))", "php_printf((&level))", "php_printf((&num_args))", "php_printf((&zv))", "php_printf((0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.07959754890273, -7.78438501440273, -7.65557766840273, -7.4649081584027286, -7.07371709040273, -7.22614216840273, -7.75353625840273]
								}, {
									"case":	2,
									"scores":	[-6.07371268840273]
								}, {
									"case":	3,
									"scores":	[-6.07371268840273]
								}, {
									"case":	4,
									"scores":	[-6.07371268840273]
								}, {
									"case":	5,
									"scores":	[-6.07371268840273]
								}, {
									"case":	6,
									"scores":	[-6.07371268840273]
								}, {
									"case":	7,
									"scores":	[-6.07371268840273]
								}, {
									"case":	8,
									"scores":	[-6.07371268840273]
								}, {
									"case":	9,
									"scores":	[-6.07371268840273]
								}, {
									"case":	10,
									"scores":	[-6.07371268840273]
								}, {
									"case":	11,
									"scores":	[-6.07371268840273]
								}, {
									"case":	12,
									"scores":	[-6.07371268840273]
								}, {
									"case":	13,
									"scores":	[-6.07371268840273]
								}, {
									"case":	14,
									"scores":	[-6.07371268840273]
								}, {
									"case":	15,
									"scores":	[-6.07371268840273]
								}, {
									"case":	16,
									"scores":	[-6.07371268840273]
								}, {
									"case":	17,
									"scores":	[-6.07371268840273]
								}, {
									"case":	18,
									"scores":	[-6.07371268840273]
								}, {
									"case":	19,
									"scores":	[-6.07371268840273]
								}, {
									"case":	20,
									"scores":	[-6.07371268840273]
								}, {
									"case":	21,
									"scores":	[-6.07371268840273]
								}, {
									"case":	22,
									"scores":	[-6.07371268840273]
								}, {
									"case":	23,
									"scores":	[-6.07371268840273]
								}, {
									"case":	24,
									"scores":	[-6.07371268840273]
								}, {
									"case":	25,
									"scores":	[-6.07371268840273]
								}, {
									"case":	26,
									"scores":	[-6.07371268840273]
								}, {
									"case":	27,
									"scores":	[-6.07371268840273]
								}, {
									"case":	28,
									"scores":	[-6.07371268840273]
								}, {
									"case":	29,
									"scores":	[-6.07371268840273]
								}, {
									"case":	30,
									"scores":	[-6.07371268840273]
								}, {
									"case":	31,
									"scores":	[-6.07371268840273]
								}, {
									"case":	32,
									"scores":	[-6.07371268840273]
								}, {
									"case":	33,
									"scores":	[-6.07371268840273]
								}, {
									"case":	34,
									"scores":	[-6.07371268840273]
								}, {
									"case":	35,
									"scores":	[-6.07371268840273]
								}, {
									"case":	36,
									"scores":	[-6.07371268840273]
								}, {
									"case":	37,
									"scores":	[-6.07371268840273]
								}, {
									"case":	38,
									"scores":	[-6.07371268840273]
								}, {
									"case":	39,
									"scores":	[-6.07371268840273]
								}, {
									"case":	40,
									"scores":	[-6.07371268840273]
								}, {
									"case":	41,
									"scores":	[-6.07371268840273]
								}, {
									"case":	42,
									"scores":	[-6.07371268840273]
								}, {
									"case":	43,
									"scores":	[-6.07371268840273]
								}, {
									"case":	44,
									"scores":	[-6.07371268840273]
								}, {
									"case":	45,
									"scores":	[-6.07371268840273]
								}, {
									"case":	46,
									"scores":	[-6.07371268840273]
								}, {
									"case":	47,
									"scores":	[-6.07371268840273]
								}, {
									"case":	48,
									"scores":	[-6.07371268840273]
								}, {
									"case":	49,
									"scores":	[-6.07371268840273]
								}, {
									"case":	50,
									"scores":	[-6.07371268840273]
								}, {
									"case":	51,
									"scores":	[-6.07371268840273]
								}, {
									"case":	52,
									"scores":	[-6.07371268840273]
								}, {
									"case":	53,
									"scores":	[-6.07371268840273]
								}, {
									"case":	54,
									"scores":	[-6.07371268840273]
								}, {
									"case":	55,
									"scores":	[-6.07371268840273]
								}, {
									"case":	56,
									"scores":	[-6.07371268840273]
								}, {
									"case":	57,
									"scores":	[-6.07371268840273]
								}, {
									"case":	58,
									"scores":	[-6.07371268840273]
								}, {
									"case":	59,
									"scores":	[-6.07371268840273]
								}, {
									"case":	60,
									"scores":	[-6.07371268840273]
								}, {
									"case":	61,
									"scores":	[-6.07371268840273]
								}, {
									"case":	62,
									"scores":	[-6.07371268840273]
								}, {
									"case":	63,
									"scores":	[-6.07371268840273]
								}, {
									"case":	64,
									"scores":	[-6.07371268840273]
								}, {
									"case":	65,
									"scores":	[-6.07371268840273]
								}, {
									"case":	66,
									"scores":	[-6.07371268840273]
								}, {
									"case":	67,
									"scores":	[-6.07371268840273]
								}, {
									"case":	68,
									"scores":	[-6.07371268840273]
								}, {
									"case":	69,
									"scores":	[-6.07371268840273]
								}, {
									"case":	70,
									"scores":	[-6.07371268840273]
								}, {
									"case":	71,
									"scores":	[-6.07371268840273]
								}, {
									"case":	72,
									"scores":	[-6.07371268840273]
								}, {
									"case":	73,
									"scores":	[-6.07371268840273]
								}, {
									"case":	74,
									"scores":	[-6.07371268840273]
								}, {
									"case":	75,
									"scores":	[-6.07371268840273]
								}, {
									"case":	76,
									"scores":	[-6.07371268840273]
								}, {
									"case":	77,
									"scores":	[-6.07371268840273]
								}, {
									"case":	78,
									"scores":	[-6.07371268840273]
								}, {
									"case":	79,
									"scores":	[-6.07371268840273]
								}, {
									"case":	80,
									"scores":	[-6.07371268840273]
								}, {
									"case":	81,
									"scores":	[-6.07371268840273]
								}, {
									"case":	82,
									"scores":	[-6.07371268840273]
								}, {
									"case":	83,
									"scores":	[-6.07371268840273]
								}, {
									"case":	84,
									"scores":	[-6.07371268840273]
								}, {
									"case":	85,
									"scores":	[-6.07371268840273]
								}, {
									"case":	86,
									"scores":	[-6.07371268840273]
								}, {
									"case":	87,
									"scores":	[-6.07371268840273]
								}, {
									"case":	88,
									"scores":	[-6.07371268840273]
								}, {
									"case":	89,
									"scores":	[-6.07371268840273]
								}, {
									"case":	90,
									"scores":	[-6.07371268840273]
								}, {
									"case":	91,
									"scores":	[-6.07371268840273]
								}, {
									"case":	92,
									"scores":	[-6.07371268840273]
								}, {
									"case":	93,
									"scores":	[-6.07371268840273]
								}, {
									"case":	94,
									"scores":	[-6.07371268840273]
								}, {
									"case":	95,
									"scores":	[-6.07371268840273]
								}, {
									"case":	96,
									"scores":	[-6.07371268840273]
								}, {
									"case":	97,
									"scores":	[-6.07371268840273]
								}, {
									"case":	98,
									"scores":	[-6.07371268840273]
								}, {
									"case":	99,
									"scores":	[-6.07371268840273]
								}, {
									"case":	100,
									"scores":	[-6.07371268840273]
								}, {
									"case":	101,
									"scores":	[-6.07371268840273]
								}, {
									"case":	102,
									"scores":	[-6.07371268840273]
								}, {
									"case":	103,
									"scores":	[-6.07371268840273]
								}, {
									"case":	104,
									"scores":	[-6.07371268840273]
								}, {
									"case":	105,
									"scores":	[-6.07371268840273]
								}, {
									"case":	106,
									"scores":	[-6.07371268840273]
								}, {
									"case":	107,
									"scores":	[-6.07371268840273]
								}, {
									"case":	108,
									"scores":	[-6.07371268840273]
								}, {
									"case":	109,
									"scores":	[-6.07371268840273]
								}, {
									"case":	110,
									"scores":	[-6.07371268840273]
								}, {
									"case":	111,
									"scores":	[-6.07371268840273]
								}, {
									"case":	112,
									"scores":	[-6.07371268840273]
								}, {
									"case":	113,
									"scores":	[-6.07371268840273]
								}, {
									"case":	114,
									"scores":	[-6.07371268840273]
								}, {
									"case":	115,
									"scores":	[-6.07371268840273]
								}, {
									"case":	116,
									"scores":	[-6.07371268840273]
								}, {
									"case":	117,
									"scores":	[-6.07371268840273]
								}, {
									"case":	118,
									"scores":	[-6.07371268840273]
								}, {
									"case":	119,
									"scores":	[-6.07371268840273]
								}, {
									"case":	120,
									"scores":	[-6.07371268840273]
								}, {
									"case":	121,
									"scores":	[-6.07371268840273]
								}, {
									"case":	122,
									"scores":	[-6.07371268840273]
								}, {
									"case":	123,
									"scores":	[-6.07371268840273]
								}, {
									"case":	124,
									"scores":	[-6.07371268840273]
								}, {
									"case":	125,
									"scores":	[-6.07371268840273]
								}, {
									"case":	126,
									"scores":	[-6.07371268840273]
								}, {
									"case":	127,
									"scores":	[-6.07371268840273]
								}, {
									"case":	128,
									"scores":	[-6.07371268840273]
								}, {
									"case":	129,
									"scores":	[-6.07371268840273]
								}, {
									"case":	130,
									"scores":	[-6.07371268840273]
								}, {
									"case":	131,
									"scores":	[-6.07371268840273]
								}, {
									"case":	132,
									"scores":	[-6.07371268840273]
								}, {
									"case":	133,
									"scores":	[-6.07371268840273]
								}, {
									"case":	134,
									"scores":	[-6.07371268840273]
								}, {
									"case":	135,
									"scores":	[-6.07371268840273]
								}, {
									"case":	136,
									"scores":	[-6.07371268840273]
								}, {
									"case":	137,
									"scores":	[-6.07371268840273]
								}, {
									"case":	138,
									"scores":	[-6.07371268840273]
								}, {
									"case":	139,
									"scores":	[-6.07371268840273]
								}, {
									"case":	140,
									"scores":	[-6.07371268840273]
								}, {
									"case":	141,
									"scores":	[-6.07371268840273]
								}, {
									"case":	142,
									"scores":	[-6.07371268840273]
								}, {
									"case":	143,
									"scores":	[-6.07371268840273]
								}, {
									"case":	144,
									"scores":	[-6.07371268840273]
								}, {
									"case":	145,
									"scores":	[-6.07371268840273]
								}, {
									"case":	146,
									"scores":	[-6.07371268840273]
								}, {
									"case":	147,
									"scores":	[-6.07371268840273]
								}, {
									"case":	148,
									"scores":	[-6.07371268840273]
								}, {
									"case":	149,
									"scores":	[-6.07371268840273]
								}, {
									"case":	150,
									"scores":	[-6.07371268840273]
								}, {
									"case":	151,
									"scores":	[-6.07371268840273]
								}, {
									"case":	152,
									"scores":	[-6.07371268840273]
								}, {
									"case":	153,
									"scores":	[-6.07371268840273]
								}, {
									"case":	154,
									"scores":	[-6.07371268840273]
								}, {
									"case":	155,
									"scores":	[-6.07371268840273]
								}, {
									"case":	156,
									"scores":	[-6.07371268840273]
								}, {
									"case":	157,
									"scores":	[-6.07371268840273]
								}, {
									"case":	158,
									"scores":	[-6.07371268840273]
								}, {
									"case":	159,
									"scores":	[-6.07371268840273]
								}, {
									"case":	160,
									"scores":	[-6.07371268840273]
								}, {
									"case":	161,
									"scores":	[-6.07371268840273]
								}, {
									"case":	162,
									"scores":	[-6.07371268840273]
								}, {
									"case":	163,
									"scores":	[-6.07371268840273]
								}, {
									"case":	164,
									"scores":	[-6.07371268840273]
								}, {
									"case":	165,
									"scores":	[-6.07371268840273]
								}, {
									"case":	166,
									"scores":	[-6.07371268840273]
								}, {
									"case":	167,
									"scores":	[-6.07371268840273]
								}, {
									"case":	168,
									"scores":	[-6.07371268840273]
								}, {
									"case":	169,
									"scores":	[-6.07371268840273]
								}, {
									"case":	170,
									"scores":	[-6.07371268840273]
								}, {
									"case":	171,
									"scores":	[-6.07371268840273]
								}, {
									"case":	172,
									"scores":	[-6.07371268840273]
								}, {
									"case":	173,
									"scores":	[-6.07371268840273]
								}, {
									"case":	174,
									"scores":	[-6.07371268840273]
								}, {
									"case":	175,
									"scores":	[-6.07371268840273]
								}, {
									"case":	176,
									"scores":	[-6.07371268840273]
								}, {
									"case":	177,
									"scores":	[-6.07371268840273]
								}, {
									"case":	178,
									"scores":	[-6.07371268840273]
								}, {
									"case":	179,
									"scores":	[-6.07371268840273]
								}, {
									"case":	180,
									"scores":	[-6.07371268840273]
								}, {
									"case":	181,
									"scores":	[-6.07371268840273]
								}, {
									"case":	182,
									"scores":	[-6.07371268840273]
								}, {
									"case":	183,
									"scores":	[-6.07371268840273]
								}, {
									"case":	184,
									"scores":	[-6.07371268840273]
								}, {
									"case":	185,
									"scores":	[-6.07371268840273]
								}, {
									"case":	186,
									"scores":	[-6.07371268840273]
								}, {
									"case":	187,
									"scores":	[-6.07371268840273]
								}, {
									"case":	188,
									"scores":	[-6.07371268840273]
								}, {
									"case":	189,
									"scores":	[-6.07371268840273]
								}, {
									"case":	190,
									"scores":	[-6.07371268840273]
								}, {
									"case":	191,
									"scores":	[-6.07371268840273]
								}, {
									"case":	192,
									"scores":	[-6.07371268840273]
								}, {
									"case":	193,
									"scores":	[-6.07371268840273]
								}, {
									"case":	194,
									"scores":	[-6.07371268840273]
								}, {
									"case":	195,
									"scores":	[-6.07371268840273]
								}, {
									"case":	196,
									"scores":	[-6.07371268840273]
								}, {
									"case":	197,
									"scores":	[-6.07371268840273]
								}, {
									"case":	198,
									"scores":	[-6.07371268840273]
								}, {
									"case":	199,
									"scores":	[-6.07371268840273]
								}, {
									"case":	200,
									"scores":	[-6.07371268840273]
								}, {
									"case":	201,
									"scores":	[-6.07371268840273]
								}, {
									"case":	202,
									"scores":	[-6.07371268840273]
								}, {
									"case":	203,
									"scores":	[-6.07371268840273]
								}, {
									"case":	204,
									"scores":	[-6.07371268840273]
								}, {
									"case":	205,
									"scores":	[-6.07371268840273]
								}, {
									"case":	206,
									"scores":	[-6.07371268840273]
								}, {
									"case":	207,
									"scores":	[-6.07371268840273]
								}, {
									"case":	208,
									"scores":	[-6.07371268840273]
								}, {
									"case":	209,
									"scores":	[-6.07371268840273]
								}, {
									"case":	210,
									"scores":	[-6.07371268840273]
								}, {
									"case":	211,
									"scores":	[-6.07371268840273]
								}, {
									"case":	212,
									"scores":	[-6.07371268840273]
								}, {
									"case":	213,
									"scores":	[-6.07371268840273]
								}, {
									"case":	214,
									"scores":	[-6.07371268840273]
								}, {
									"case":	215,
									"scores":	[-6.07371268840273]
								}, {
									"case":	216,
									"scores":	[-6.07371268840273]
								}, {
									"case":	217,
									"scores":	[-6.07371268840273]
								}, {
									"case":	218,
									"scores":	[-6.07371268840273]
								}, {
									"case":	219,
									"scores":	[-6.07371268840273]
								}, {
									"case":	220,
									"scores":	[-6.07371268840273]
								}, {
									"case":	221,
									"scores":	[-6.07371268840273]
								}, {
									"case":	222,
									"scores":	[-6.07371268840273]
								}, {
									"case":	223,
									"scores":	[-6.07371268840273]
								}, {
									"case":	224,
									"scores":	[-6.07371268840273]
								}, {
									"case":	225,
									"scores":	[-6.07371268840273]
								}, {
									"case":	226,
									"scores":	[-6.07371268840273]
								}, {
									"case":	227,
									"scores":	[-6.07371268840273]
								}, {
									"case":	228,
									"scores":	[-6.07371268840273]
								}, {
									"case":	229,
									"scores":	[-6.07371268840273]
								}, {
									"case":	230,
									"scores":	[-6.07371268840273]
								}, {
									"case":	231,
									"scores":	[-6.07371268840273]
								}, {
									"case":	232,
									"scores":	[-6.07371268840273]
								}, {
									"case":	233,
									"scores":	[-6.07371268840273]
								}, {
									"case":	234,
									"scores":	[-6.07371268840273]
								}, {
									"case":	235,
									"scores":	[-6.07371268840273]
								}, {
									"case":	236,
									"scores":	[-6.07371268840273]
								}, {
									"case":	237,
									"scores":	[-6.07371268840273]
								}, {
									"case":	238,
									"scores":	[-6.07371268840273]
								}, {
									"case":	239,
									"scores":	[-6.07371268840273]
								}, {
									"case":	240,
									"scores":	[-6.07371268840273]
								}, {
									"case":	241,
									"scores":	[-6.07371268840273]
								}, {
									"case":	242,
									"scores":	[-6.07371268840273]
								}, {
									"case":	243,
									"scores":	[-6.07371268840273]
								}, {
									"case":	244,
									"scores":	[-6.07371268840273]
								}, {
									"case":	245,
									"scores":	[-6.07371268840273]
								}, {
									"case":	246,
									"scores":	[-6.07371268840273]
								}, {
									"case":	247,
									"scores":	[-6.07371268840273]
								}, {
									"case":	248,
									"scores":	[-6.07371268840273]
								}, {
									"case":	249,
									"scores":	[-6.07371268840273]
								}, {
									"case":	250,
									"scores":	[-6.07371268840273]
								}, {
									"case":	251,
									"scores":	[-6.07371268840273]
								}, {
									"case":	252,
									"scores":	[-6.07371268840273]
								}, {
									"case":	253,
									"scores":	[-6.07371268840273]
								}, {
									"case":	254,
									"scores":	[-6.07371268840273]
								}, {
									"case":	255,
									"scores":	[-6.07371268840273]
								}, {
									"case":	256,
									"scores":	[-6.07371268840273]
								}, {
									"case":	257,
									"scores":	[-6.07371268840273]
								}, {
									"case":	258,
									"scores":	[-6.07371268840273]
								}, {
									"case":	259,
									"scores":	[-6.07371268840273]
								}, {
									"case":	260,
									"scores":	[-6.07371268840273]
								}, {
									"case":	261,
									"scores":	[-6.07371268840273]
								}, {
									"case":	262,
									"scores":	[-6.07371268840273]
								}, {
									"case":	263,
									"scores":	[-6.07371268840273]
								}, {
									"case":	264,
									"scores":	[-6.07371268840273]
								}, {
									"case":	265,
									"scores":	[-6.07371268840273]
								}, {
									"case":	266,
									"scores":	[-6.07371268840273]
								}, {
									"case":	267,
									"scores":	[-6.07371268840273]
								}, {
									"case":	268,
									"scores":	[-6.07371268840273]
								}, {
									"case":	269,
									"scores":	[-6.07371268840273]
								}, {
									"case":	270,
									"scores":	[-6.07371268840273]
								}, {
									"case":	271,
									"scores":	[-6.07371268840273]
								}, {
									"case":	272,
									"scores":	[-6.07371268840273]
								}, {
									"case":	273,
									"scores":	[-6.07371268840273]
								}, {
									"case":	274,
									"scores":	[-6.07371268840273]
								}, {
									"case":	275,
									"scores":	[-6.07371268840273]
								}, {
									"case":	276,
									"scores":	[-6.07371268840273]
								}, {
									"case":	277,
									"scores":	[-6.07371268840273]
								}, {
									"case":	278,
									"scores":	[-6.07371268840273]
								}]
						}]
				}, {
					"line":	44,
					"switches":	[{
							"switch":	2,
							"types":	[[], [], [], [], [33, 34, 35], [1, 2, 3, 4, 5], [], [], [], [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [], [], [], [], [], []],
							"begin_line":	45,
							"begin_column":	0,
							"end_line":	45,
							"end_column":	0,
							"patch_codes":	["memset(&hash_key->arKey, 0, sizeof (*(&hash_key->arKey)))", "memset(&hash_key->h, 0, sizeof (*(&hash_key->h)))", "memset(&hash_key->nKeyLength, 0, sizeof (*(&hash_key->nKeyLength)))", "memset(hash_key, 0, sizeof (*(hash_key)))", "memset(hash_key->arKey, 0, sizeof (*(hash_key->arKey)))", "(**(zv)).value.ht->nApplyCount++", "(**(zv)).value.ht->nApplyCount--", "level = (0)", "level = (1)", "level = (2)", "level = (level)", "level = (num_args)", "php_body_write(((hash_key)->arKey), (hash_key->nKeyLength - 1))", "php_body_write((hash_key->arKey), ((hash_key)->nKeyLength - 1))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(zv)).value.str.val)", "php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', (hash_key)->h)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((zv))))", "php_var_dump((zv), level + 2)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "exit(1)", "level = __builtin_va_arg(args, int)", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - 1))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', hash_key->h)", "php_printf(\"%*c[\\\"\", level + 1, ' ')", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "php_var_dump(zv, level + 2)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L45\", 7, &(hash_key), sizeof (hash_key), &(hash_key->nKeyLength), sizeof (hash_key->nKeyLength), &(level), sizeof (level), &(hash_key->h), sizeof (hash_key->h), &(args), sizeof (args), &(hash_key->arKey), sizeof (hash_key->arKey), &(zv), sizeof (zv)))\n    return 0;\n", "if (__is_neg(\"\", \"L45\", 7, &(hash_key), sizeof (hash_key), &(hash_key->nKeyLength), sizeof (hash_key->nKeyLength), &(level), sizeof (level), &(hash_key->h), sizeof (hash_key->h), &(args), sizeof (args), &(hash_key->arKey), sizeof (hash_key->arKey), &(zv), sizeof (zv)))\n    return 1;\n", "if (__is_neg(\"\", \"L45\", 7, &(hash_key), sizeof (hash_key), &(hash_key->nKeyLength), sizeof (hash_key->nKeyLength), &(level), sizeof (level), &(hash_key->h), sizeof (hash_key->h), &(args), sizeof (args), &(hash_key->arKey), sizeof (hash_key->arKey), &(zv), sizeof (zv)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	2,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	3,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	4,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	5,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	6,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	7,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	8,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	9,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	10,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	11,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	12,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	13,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	14,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	15,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	16,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	17,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	18,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	19,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	20,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	21,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	22,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	23,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	24,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	25,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	26,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	27,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	28,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	29,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	30,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	31,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	32,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	33,
									"scores":	[-11.596578965090327, -10.069479023390326, -7.9656527297903263, -10.136286687390328, -10.246512516190327, -10.347175804390325, -10.571120652390327]
								}, {
									"case":	34,
									"scores":	[-14.421047965090327, -12.893948023390326, -10.790121729790327, -12.960755687390327, -13.070981516190326, -13.171644804390326, -13.395589652390326]
								}, {
									"case":	35,
									"scores":	[-14.421047965090327, -12.893948023390326, -10.790121729790327, -12.960755687390327, -13.070981516190326, -13.171644804390326, -13.395589652390326]
								}]
						}, {
							"switch":	3,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	45,
							"begin_column":	2,
							"end_line":	51,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L45\", 7, &(hash_key), sizeof (hash_key), &(hash_key->nKeyLength), sizeof (hash_key->nKeyLength), &(level), sizeof (level), &(hash_key->h), sizeof (hash_key->h), &(args), sizeof (args), &(hash_key->arKey), sizeof (hash_key->arKey), &(zv), sizeof (zv))) {\n    php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', hash_key->h);\n} else {\n    php_printf(\"%*c[\\\"\", level + 1, ' ');\n    php_body_write((hash_key->arKey), (hash_key->nKeyLength - 1));\n    php_printf(\"\\\"]=>\\n\");\n}\n", "if ((hash_key->nKeyLength == 0) || __is_neg(\"\", \"L45\", 7, &(hash_key), sizeof (hash_key), &(hash_key->nKeyLength), sizeof (hash_key->nKeyLength), &(level), sizeof (level), &(hash_key->h), sizeof (hash_key->h), &(args), sizeof (args), &(hash_key->arKey), sizeof (hash_key->arKey), &(zv), sizeof (zv))) {\n    php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', hash_key->h);\n} else {\n    php_printf(\"%*c[\\\"\", level + 1, ' ');\n    php_body_write((hash_key->arKey), (hash_key->nKeyLength - 1));\n    php_printf(\"\\\"]=>\\n\");\n}\n", "if ((hash_key->nKeyLength == 0) && !__is_neg(\"\", \"L45\", 7, &(hash_key), sizeof (hash_key), &(hash_key->nKeyLength), sizeof (hash_key->nKeyLength), &(level), sizeof (level), &(hash_key->h), sizeof (hash_key->h), &(args), sizeof (args), &(hash_key->arKey), sizeof (hash_key->arKey), &(zv), sizeof (zv))) {\n    php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', hash_key->h);\n} else {\n    php_printf(\"%*c[\\\"\", level + 1, ' ');\n    php_body_write((hash_key->arKey), (hash_key->nKeyLength - 1));\n    php_printf(\"\\\"]=>\\n\");\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.4375437554281456, -1.0744216654281442, -1.8619896548281454, -3.7054513654281451, -4.5757177554281458, -4.1747113654281449, -4.6908281644281455]
								}, {
									"case":	2,
									"scores":	[-5.0716233674281463, -1.7085012774281449, -2.4960692668281448, -4.3395309774281463, -5.2097973674281466, -4.8087909774281457, -5.3249077764281463]
								}, {
									"case":	3,
									"scores":	[-5.0716233674281463, -1.7085012774281449, -2.4960692668281448, -4.3395309774281463, -5.2097973674281466, -4.8087909774281457, -5.3249077764281463]
								}]
						}, {
							"switch":	10,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	45,
							"begin_column":	2,
							"end_line":	51,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L45\", 7, &(hash_key), sizeof (hash_key), &(hash_key->nKeyLength), sizeof (hash_key->nKeyLength), &(level), sizeof (level), &(hash_key->h), sizeof (hash_key->h), &(args), sizeof (args), &(hash_key->arKey), sizeof (hash_key->arKey), &(zv), sizeof (zv)))\n    if (hash_key->nKeyLength == 0) {\n        php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', hash_key->h);\n    } else {\n        php_printf(\"%*c[\\\"\", level + 1, ' ');\n        php_body_write((hash_key->arKey), (hash_key->nKeyLength - 1));\n        php_printf(\"\\\"]=>\\n\");\n    }\n", "if (!__is_neg(\"\", \"L45\", 7, &(hash_key), sizeof (hash_key), &(hash_key->nKeyLength), sizeof (hash_key->nKeyLength), &(level), sizeof (level), &(hash_key->h), sizeof (hash_key->h), &(args), sizeof (args), &(hash_key->arKey), sizeof (hash_key->arKey), &(zv), sizeof (zv)) && (hash_key->nKeyLength == 0)) {\n    php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', hash_key->h);\n} else {\n    php_printf(\"%*c[\\\"\", level + 1, ' ');\n    php_body_write((hash_key->arKey), (hash_key->nKeyLength - 1));\n    php_printf(\"\\\"]=>\\n\");\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.1629717949903267, -4.7998497049903266, -5.5874176943903269, -7.4308794049903266, -8.301145794990326, -7.9001394049903269, -7.702820903990327]
								}, {
									"case":	2,
									"scores":	[-7.6320784499903276, -4.2689563599903257, -5.056524349390326, -6.8999860599903267, -7.7702524499903269, -7.3692460599903269, -7.8853628589903266]
								}]
						}]
				}, {
					"line":	51,
					"switches":	[{
							"switch":	11,
							"types":	[[], [], [], [], [32, 33, 34], [1, 2, 3, 4], [], [], [], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [], [], []],
							"begin_line":	52,
							"begin_column":	0,
							"end_line":	52,
							"end_column":	0,
							"patch_codes":	["memset(&hash_key->arKey, 0, sizeof (*(&hash_key->arKey)))", "memset(&hash_key->h, 0, sizeof (*(&hash_key->h)))", "memset(&hash_key->nKeyLength, 0, sizeof (*(&hash_key->nKeyLength)))", "memset(hash_key->arKey, 0, sizeof (*(hash_key->arKey)))", "(**(zv)).value.ht->nApplyCount++", "(**(zv)).value.ht->nApplyCount--", "level = (0)", "level = (1)", "level = (2)", "level = (level)", "level = (num_args)", "php_body_write(((hash_key)->arKey), (hash_key->nKeyLength - 1))", "php_body_write((hash_key->arKey), ((hash_key)->nKeyLength - 1))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(zv)).value.str.val)", "php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', (hash_key)->h)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((zv))))", "php_var_dump((zv), level + 2)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "exit(1)", "level = __builtin_va_arg(args, int)", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - 1))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', hash_key->h)", "php_printf(\"%*c[\\\"\", level + 1, ' ')", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "php_var_dump(zv, level + 2)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L52\", 4, &(zv), sizeof (zv), &(level), sizeof (level), &(hash_key), sizeof (hash_key), &(args), sizeof (args)))\n    return 0;\n", "if (__is_neg(\"\", \"L52\", 4, &(zv), sizeof (zv), &(level), sizeof (level), &(hash_key), sizeof (hash_key), &(args), sizeof (args)))\n    return 1;\n", "if (__is_neg(\"\", \"L52\", 4, &(zv), sizeof (zv), &(level), sizeof (level), &(hash_key), sizeof (hash_key), &(args), sizeof (args)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.154523517672807]
								}, {
									"case":	2,
									"scores":	[-6.154523517672807]
								}, {
									"case":	3,
									"scores":	[-6.154523517672807]
								}, {
									"case":	4,
									"scores":	[-6.154523517672807]
								}, {
									"case":	5,
									"scores":	[-6.154523517672807]
								}, {
									"case":	6,
									"scores":	[-6.154523517672807]
								}, {
									"case":	7,
									"scores":	[-6.154523517672807]
								}, {
									"case":	8,
									"scores":	[-6.154523517672807]
								}, {
									"case":	9,
									"scores":	[-6.154523517672807]
								}, {
									"case":	10,
									"scores":	[-6.154523517672807]
								}, {
									"case":	11,
									"scores":	[-6.154523517672807]
								}, {
									"case":	12,
									"scores":	[-6.154523517672807]
								}, {
									"case":	13,
									"scores":	[-6.154523517672807]
								}, {
									"case":	14,
									"scores":	[-6.154523517672807]
								}, {
									"case":	15,
									"scores":	[-6.154523517672807]
								}, {
									"case":	16,
									"scores":	[-6.154523517672807]
								}, {
									"case":	17,
									"scores":	[-6.154523517672807]
								}, {
									"case":	18,
									"scores":	[-6.154523517672807]
								}, {
									"case":	19,
									"scores":	[-6.154523517672807]
								}, {
									"case":	20,
									"scores":	[-6.154523517672807]
								}, {
									"case":	21,
									"scores":	[-6.154523517672807]
								}, {
									"case":	22,
									"scores":	[-6.154523517672807]
								}, {
									"case":	23,
									"scores":	[-6.154523517672807]
								}, {
									"case":	24,
									"scores":	[-6.154523517672807]
								}, {
									"case":	25,
									"scores":	[-6.154523517672807]
								}, {
									"case":	26,
									"scores":	[-6.154523517672807]
								}, {
									"case":	27,
									"scores":	[-6.154523517672807]
								}, {
									"case":	28,
									"scores":	[-6.154523517672807]
								}, {
									"case":	29,
									"scores":	[-6.154523517672807]
								}, {
									"case":	30,
									"scores":	[-6.154523517672807]
								}, {
									"case":	31,
									"scores":	[-6.154523517672807]
								}, {
									"case":	32,
									"scores":	[-8.2640758230728064, -7.0013349624728072, -9.7054635288728068, -8.940458308872806]
								}, {
									"case":	33,
									"scores":	[-11.088544823072807, -9.82580396247281, -12.529932528872807, -11.764927308872807]
								}, {
									"case":	34,
									"scores":	[-11.088544823072807, -9.82580396247281, -12.529932528872807, -11.764927308872807]
								}]
						}, {
							"switch":	12,
							"types":	[[], [], [1], [], [], [], [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177], [], [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], [], [], [61]],
							"begin_line":	52,
							"begin_column":	2,
							"end_line":	52,
							"end_column":	38,
							"patch_codes":	["if (!__is_neg(\"\", \"L52\", 4, &(zv), sizeof (zv), &(level), sizeof (level), &(hash_key), sizeof (hash_key), &(args), sizeof (args)))\n    php_var_dump(zv, level + 2);\n", "_IO_padn(zv, level + 2, 0)", "_IO_padn(zv, level + 2, 1)", "_IO_padn(zv, level + 2, 2)", "_php_glob_stream_get_path(zv, level + 2, 0)", "_php_glob_stream_get_pattern(zv, level + 2, 0)", "_php_stream_opendir(zv, level + 2, 0)", "_php_stream_rmdir(zv, level + 2, 0)", "fgets(zv, level + 2, 0)", "fgetws(zv, level + 2, 0)", "memchr(zv, level + 2, 0)", "memchr(zv, level + 2, 1)", "memchr(zv, level + 2, 2)", "memset(zv, level + 2, 0)", "memset(zv, level + 2, 1)", "memset(zv, level + 2, 2)", "php_ini_activate_config(zv, level + 2, 0)", "php_ini_activate_config(zv, level + 2, 1)", "php_ini_activate_config(zv, level + 2, 2)", "php_ini_activate_config(zv, level + 2, level)", "php_ini_activate_config(zv, level + 2, num_args)", "php_resolve_path(zv, level + 2, 0)", "php_stream_xport_listen(zv, level + 2, 0)", "php_var_export_ex(zv, level + 2, 0)", "php_varname_check(zv, level + 2, 0)", "php_varname_check(zv, level + 2, 1)", "php_varname_check(zv, level + 2, 2)", "realpath_cache_lookup(zv, level + 2, 0)", "realpath_cache_lookup(zv, level + 2, 1)", "realpath_cache_lookup(zv, level + 2, 2)", "symlinkat(zv, level + 2, 0)", "wcrtomb(zv, level + 2, 0)", "wmemchr(zv, level + 2, 0)", "wmemchr(zv, level + 2, 1)", "wmemchr(zv, level + 2, 2)", "wmemset(zv, level + 2, 0)", "wmemset(zv, level + 2, 1)", "wmemset(zv, level + 2, 2)", "zend_do_end_variable_parse(zv, level + 2, 0)", "zend_do_end_variable_parse(zv, level + 2, 1)", "zend_do_end_variable_parse(zv, level + 2, 2)", "zend_do_end_variable_parse(zv, level + 2, level)", "zend_do_end_variable_parse(zv, level + 2, num_args)", "zend_fcall_info_argp(zv, level + 2, 0)", "zend_fcall_info_args_restore(zv, level + 2, 0)", "zend_fcall_info_argv(zv, level + 2, 0)", "zend_lookup_class(zv, level + 2, 0)", "zend_memrchr(zv, level + 2, 0)", "zend_memrchr(zv, level + 2, 1)", "zend_memrchr(zv, level + 2, 2)", "zend_mm_shutdown(zv, level + 2, 0)", "zend_mm_shutdown(zv, level + 2, 1)", "zend_mm_shutdown(zv, level + 2, 2)", "zend_mm_shutdown(zv, level + 2, level)", "zend_mm_shutdown(zv, level + 2, num_args)", "zend_register_class_alias_ex(zv, level + 2, 0)", "zend_stack_apply(zv, level + 2, 0)", "zend_stack_apply(zv, level + 2, brk)", "zend_stack_apply(zv, level + 2, dlclose)", "zend_unregister_functions(zv, level + 2, 0)", "{\n}\n", "Debug(zv, level + 2)", "__overflow(zv, level + 2)", "__sigsetjmp(zv, level + 2)", "_longjmp(zv, level + 2)", "_php_stream_filter_flush(zv, level + 2)", "_php_stream_flush(zv, level + 2)", "_php_stream_free(zv, level + 2)", "_php_stream_putc(zv, level + 2)", "access(zv, level + 2)", "add_next_index_bool(zv, level + 2)", "add_next_index_resource(zv, level + 2)", "compile_file(zv, level + 2)", "convert_to_long_base(zv, level + 2)", "display_link_numbers(zv, level + 2)", "dlopen(zv, level + 2)", "execute_internal(zv, level + 2)", "fwide(zv, level + 2)", "getloadavg(zv, level + 2)", "index(zv, level + 2)", "longjmp(zv, level + 2)", "mkstemps(zv, level + 2)", "pathconf(zv, level + 2)", "php_check_open_basedir_ex(zv, level + 2)", "php_create_empty_class(zv, level + 2)", "php_debug_zval_dump(zv, level + 2)", "php_printf(zv, level + 2)", "php_stream_filter_remove(zv, level + 2)", "php_stream_xport_crypto_enable(zv, level + 2)", "php_var_dump(zv, level + 2)", "php_var_export(zv, level + 2)", "print_op_array(zv, level + 2)", "printf(zv, level + 2)", "realpath_cache_del(zv, level + 2)", "rindex(zv, level + 2)", "sigaddset(zv, level + 2)", "sigdelset(zv, level + 2)", "sigismember(zv, level + 2)", "siglongjmp(zv, level + 2)", "strchr(zv, level + 2)", "strrchr(zv, level + 2)", "timespec_get(zv, level + 2)", "virtual_access(zv, level + 2)", "virtual_open(zv, level + 2)", "wcschr(zv, level + 2)", "wcsrchr(zv, level + 2)", "wctomb(zv, level + 2)", "wprintf(zv, level + 2)", "zend_atoi(zv, level + 2)", "zend_atol(zv, level + 2)", "zend_class_implements(zv, level + 2)", "zend_delete_global_variable(zv, level + 2)", "zend_do_begin_dynamic_function_call(zv, level + 2)", "zend_do_return(zv, level + 2)", "zend_fcall_info_argn(zv, level + 2)", "zend_fcall_info_args_clear(zv, level + 2)", "zend_ini_boolean_displayer_cb(zv, level + 2)", "zend_ini_color_displayer_cb(zv, level + 2)", "zend_list_insert(zv, level + 2)", "zend_print_zval(zv, level + 2)", "zend_print_zval_r(zv, level + 2)", "zend_ptr_stack_n_pop(zv, level + 2)", "zend_ptr_stack_n_push(zv, level + 2)", "zend_register_ini_entries(zv, level + 2)", "php_var_dump((&args), level + 2)", "php_var_dump((&hash_key), level + 2)", "php_var_dump((&level), level + 2)", "php_var_dump((&num_args), level + 2)", "php_var_dump((&zv), level + 2)", "php_var_dump((zv), level + 2)", "php_var_dump(zv, (0 * level) + 2)", "php_var_dump(zv, (0 * num_args) + 2)", "php_var_dump(zv, (args != 0) + 2)", "php_var_dump(zv, (args == 0) + 2)", "php_var_dump(zv, (hash_key != 0) + 2)", "php_var_dump(zv, (hash_key == 0) + 2)", "php_var_dump(zv, (level != 0) + 2)", "php_var_dump(zv, (level * num_args) + 2)", "php_var_dump(zv, (level + 0) + 2)", "php_var_dump(zv, (level - 0) + 2)", "php_var_dump(zv, (level == 0) + 2)", "php_var_dump(zv, (level) + 2)", "php_var_dump(zv, (num_args != 0) + 2)", "php_var_dump(zv, (num_args != level) + 2)", "php_var_dump(zv, (num_args * level) + 2)", "php_var_dump(zv, (num_args + 0) + 2)", "php_var_dump(zv, (num_args + level) + 2)", "php_var_dump(zv, (num_args - 0) + 2)", "php_var_dump(zv, (num_args - level) + 2)", "php_var_dump(zv, (num_args == 0) + 2)", "php_var_dump(zv, (num_args == level) + 2)", "php_var_dump(zv, (num_args) + 2)", "php_var_dump(zv, (zv != 0) + 2)", "php_var_dump(zv, (zv == 0) + 2)", "php_var_dump(zv, level + (0 * level))", "php_var_dump(zv, level + (0 * num_args))", "php_var_dump(zv, level + (0))", "php_var_dump(zv, level + (args != 0))", "php_var_dump(zv, level + (args == 0))", "php_var_dump(zv, level + (hash_key != 0))", "php_var_dump(zv, level + (hash_key == 0))", "php_var_dump(zv, level + (level != 0))", "php_var_dump(zv, level + (level * num_args))", "php_var_dump(zv, level + (level + 0))", "php_var_dump(zv, level + (level - 0))", "php_var_dump(zv, level + (level == 0))", "php_var_dump(zv, level + (num_args != 0))", "php_var_dump(zv, level + (num_args != level))", "php_var_dump(zv, level + (num_args * level))", "php_var_dump(zv, level + (num_args + 0))", "php_var_dump(zv, level + (num_args + level))", "php_var_dump(zv, level + (num_args - 0))", "php_var_dump(zv, level + (num_args - level))", "php_var_dump(zv, level + (num_args == 0))", "php_var_dump(zv, level + (num_args == level))", "php_var_dump(zv, level + (zv != 0))", "php_var_dump(zv, level + (zv == 0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.0197869876728065, -4.871543359672807, -8.3479116781728067, -7.6512873876728076]
								}, {
									"case":	2,
									"scores":	[-6.154523517672807]
								}, {
									"case":	3,
									"scores":	[-6.154523517672807]
								}, {
									"case":	4,
									"scores":	[-6.154523517672807]
								}, {
									"case":	5,
									"scores":	[-6.154523517672807]
								}, {
									"case":	6,
									"scores":	[-6.154523517672807]
								}, {
									"case":	7,
									"scores":	[-6.154523517672807]
								}, {
									"case":	8,
									"scores":	[-6.154523517672807]
								}, {
									"case":	9,
									"scores":	[-6.154523517672807]
								}, {
									"case":	10,
									"scores":	[-6.154523517672807]
								}, {
									"case":	11,
									"scores":	[-6.154523517672807]
								}, {
									"case":	12,
									"scores":	[-6.154523517672807]
								}, {
									"case":	13,
									"scores":	[-6.154523517672807]
								}, {
									"case":	14,
									"scores":	[-6.154523517672807]
								}, {
									"case":	15,
									"scores":	[-6.154523517672807]
								}, {
									"case":	16,
									"scores":	[-6.154523517672807]
								}, {
									"case":	17,
									"scores":	[-6.154523517672807]
								}, {
									"case":	18,
									"scores":	[-6.154523517672807]
								}, {
									"case":	19,
									"scores":	[-6.154523517672807]
								}, {
									"case":	20,
									"scores":	[-6.154523517672807]
								}, {
									"case":	21,
									"scores":	[-6.154523517672807]
								}, {
									"case":	22,
									"scores":	[-6.154523517672807]
								}, {
									"case":	23,
									"scores":	[-6.154523517672807]
								}, {
									"case":	24,
									"scores":	[-6.154523517672807]
								}, {
									"case":	25,
									"scores":	[-6.154523517672807]
								}, {
									"case":	26,
									"scores":	[-6.154523517672807]
								}, {
									"case":	27,
									"scores":	[-6.154523517672807]
								}, {
									"case":	28,
									"scores":	[-6.154523517672807]
								}, {
									"case":	29,
									"scores":	[-6.154523517672807]
								}, {
									"case":	30,
									"scores":	[-6.154523517672807]
								}, {
									"case":	31,
									"scores":	[-6.154523517672807]
								}, {
									"case":	32,
									"scores":	[-6.154523517672807]
								}, {
									"case":	33,
									"scores":	[-6.154523517672807]
								}, {
									"case":	34,
									"scores":	[-6.154523517672807]
								}, {
									"case":	35,
									"scores":	[-6.154523517672807]
								}, {
									"case":	36,
									"scores":	[-6.154523517672807]
								}, {
									"case":	37,
									"scores":	[-6.154523517672807]
								}, {
									"case":	38,
									"scores":	[-6.154523517672807]
								}, {
									"case":	39,
									"scores":	[-6.154523517672807]
								}, {
									"case":	40,
									"scores":	[-6.154523517672807]
								}, {
									"case":	41,
									"scores":	[-6.154523517672807]
								}, {
									"case":	42,
									"scores":	[-6.154523517672807]
								}, {
									"case":	43,
									"scores":	[-6.154523517672807]
								}, {
									"case":	44,
									"scores":	[-6.154523517672807]
								}, {
									"case":	45,
									"scores":	[-6.154523517672807]
								}, {
									"case":	46,
									"scores":	[-6.154523517672807]
								}, {
									"case":	47,
									"scores":	[-6.154523517672807]
								}, {
									"case":	48,
									"scores":	[-6.154523517672807]
								}, {
									"case":	49,
									"scores":	[-6.154523517672807]
								}, {
									"case":	50,
									"scores":	[-6.154523517672807]
								}, {
									"case":	51,
									"scores":	[-6.154523517672807]
								}, {
									"case":	52,
									"scores":	[-6.154523517672807]
								}, {
									"case":	53,
									"scores":	[-6.154523517672807]
								}, {
									"case":	54,
									"scores":	[-6.154523517672807]
								}, {
									"case":	55,
									"scores":	[-6.154523517672807]
								}, {
									"case":	56,
									"scores":	[-6.154523517672807]
								}, {
									"case":	57,
									"scores":	[-6.154523517672807]
								}, {
									"case":	58,
									"scores":	[-6.154523517672807]
								}, {
									"case":	59,
									"scores":	[-6.154523517672807]
								}, {
									"case":	60,
									"scores":	[-6.154523517672807]
								}, {
									"case":	61,
									"scores":	[-6.154523517672807]
								}, {
									"case":	62,
									"scores":	[-6.154523517672807]
								}, {
									"case":	63,
									"scores":	[-6.154523517672807]
								}, {
									"case":	64,
									"scores":	[-6.154523517672807]
								}, {
									"case":	65,
									"scores":	[-6.154523517672807]
								}, {
									"case":	66,
									"scores":	[-6.154523517672807]
								}, {
									"case":	67,
									"scores":	[-6.154523517672807]
								}, {
									"case":	68,
									"scores":	[-6.154523517672807]
								}, {
									"case":	69,
									"scores":	[-6.154523517672807]
								}, {
									"case":	70,
									"scores":	[-6.154523517672807]
								}, {
									"case":	71,
									"scores":	[-6.154523517672807]
								}, {
									"case":	72,
									"scores":	[-6.154523517672807]
								}, {
									"case":	73,
									"scores":	[-6.154523517672807]
								}, {
									"case":	74,
									"scores":	[-6.154523517672807]
								}, {
									"case":	75,
									"scores":	[-6.154523517672807]
								}, {
									"case":	76,
									"scores":	[-6.154523517672807]
								}, {
									"case":	77,
									"scores":	[-6.154523517672807]
								}, {
									"case":	78,
									"scores":	[-6.154523517672807]
								}, {
									"case":	79,
									"scores":	[-6.154523517672807]
								}, {
									"case":	80,
									"scores":	[-6.154523517672807]
								}, {
									"case":	81,
									"scores":	[-6.154523517672807]
								}, {
									"case":	82,
									"scores":	[-6.154523517672807]
								}, {
									"case":	83,
									"scores":	[-6.154523517672807]
								}, {
									"case":	84,
									"scores":	[-6.154523517672807]
								}, {
									"case":	85,
									"scores":	[-6.154523517672807]
								}, {
									"case":	86,
									"scores":	[-6.154523517672807]
								}, {
									"case":	87,
									"scores":	[-6.154523517672807]
								}, {
									"case":	88,
									"scores":	[-6.154523517672807]
								}, {
									"case":	89,
									"scores":	[-6.154523517672807]
								}, {
									"case":	90,
									"scores":	[-6.154523517672807]
								}, {
									"case":	91,
									"scores":	[-6.154523517672807]
								}, {
									"case":	92,
									"scores":	[-6.154523517672807]
								}, {
									"case":	93,
									"scores":	[-6.154523517672807]
								}, {
									"case":	94,
									"scores":	[-6.154523517672807]
								}, {
									"case":	95,
									"scores":	[-6.154523517672807]
								}, {
									"case":	96,
									"scores":	[-6.154523517672807]
								}, {
									"case":	97,
									"scores":	[-6.154523517672807]
								}, {
									"case":	98,
									"scores":	[-6.154523517672807]
								}, {
									"case":	99,
									"scores":	[-6.154523517672807]
								}, {
									"case":	100,
									"scores":	[-6.154523517672807]
								}, {
									"case":	101,
									"scores":	[-6.154523517672807]
								}, {
									"case":	102,
									"scores":	[-6.154523517672807]
								}, {
									"case":	103,
									"scores":	[-6.154523517672807]
								}, {
									"case":	104,
									"scores":	[-6.154523517672807]
								}, {
									"case":	105,
									"scores":	[-6.154523517672807]
								}, {
									"case":	106,
									"scores":	[-6.154523517672807]
								}, {
									"case":	107,
									"scores":	[-6.154523517672807]
								}, {
									"case":	108,
									"scores":	[-6.154523517672807]
								}, {
									"case":	109,
									"scores":	[-6.154523517672807]
								}, {
									"case":	110,
									"scores":	[-6.154523517672807]
								}, {
									"case":	111,
									"scores":	[-6.154523517672807]
								}, {
									"case":	112,
									"scores":	[-6.154523517672807]
								}, {
									"case":	113,
									"scores":	[-6.154523517672807]
								}, {
									"case":	114,
									"scores":	[-6.154523517672807]
								}, {
									"case":	115,
									"scores":	[-6.154523517672807]
								}, {
									"case":	116,
									"scores":	[-6.154523517672807]
								}, {
									"case":	117,
									"scores":	[-6.154523517672807]
								}, {
									"case":	118,
									"scores":	[-6.154523517672807]
								}, {
									"case":	119,
									"scores":	[-6.154523517672807]
								}, {
									"case":	120,
									"scores":	[-6.154523517672807]
								}, {
									"case":	121,
									"scores":	[-6.154523517672807]
								}, {
									"case":	122,
									"scores":	[-6.154523517672807]
								}, {
									"case":	123,
									"scores":	[-6.154523517672807]
								}, {
									"case":	124,
									"scores":	[-6.154523517672807]
								}, {
									"case":	125,
									"scores":	[-6.154523517672807]
								}, {
									"case":	126,
									"scores":	[-6.154523517672807]
								}, {
									"case":	127,
									"scores":	[-6.154523517672807]
								}, {
									"case":	128,
									"scores":	[-6.154523517672807]
								}, {
									"case":	129,
									"scores":	[-6.154523517672807]
								}, {
									"case":	130,
									"scores":	[-6.154523517672807]
								}, {
									"case":	131,
									"scores":	[-6.154523517672807]
								}, {
									"case":	132,
									"scores":	[-6.154523517672807]
								}, {
									"case":	133,
									"scores":	[-6.154523517672807]
								}, {
									"case":	134,
									"scores":	[-6.154523517672807]
								}, {
									"case":	135,
									"scores":	[-6.154523517672807]
								}, {
									"case":	136,
									"scores":	[-6.154523517672807]
								}, {
									"case":	137,
									"scores":	[-6.154523517672807]
								}, {
									"case":	138,
									"scores":	[-6.154523517672807]
								}, {
									"case":	139,
									"scores":	[-6.154523517672807]
								}, {
									"case":	140,
									"scores":	[-6.154523517672807]
								}, {
									"case":	141,
									"scores":	[-6.154523517672807]
								}, {
									"case":	142,
									"scores":	[-6.154523517672807]
								}, {
									"case":	143,
									"scores":	[-6.154523517672807]
								}, {
									"case":	144,
									"scores":	[-6.154523517672807]
								}, {
									"case":	145,
									"scores":	[-6.154523517672807]
								}, {
									"case":	146,
									"scores":	[-6.154523517672807]
								}, {
									"case":	147,
									"scores":	[-6.154523517672807]
								}, {
									"case":	148,
									"scores":	[-6.154523517672807]
								}, {
									"case":	149,
									"scores":	[-6.154523517672807]
								}, {
									"case":	150,
									"scores":	[-6.154523517672807]
								}, {
									"case":	151,
									"scores":	[-6.154523517672807]
								}, {
									"case":	152,
									"scores":	[-6.154523517672807]
								}, {
									"case":	153,
									"scores":	[-6.154523517672807]
								}, {
									"case":	154,
									"scores":	[-6.154523517672807]
								}, {
									"case":	155,
									"scores":	[-6.154523517672807]
								}, {
									"case":	156,
									"scores":	[-6.154523517672807]
								}, {
									"case":	157,
									"scores":	[-6.154523517672807]
								}, {
									"case":	158,
									"scores":	[-6.154523517672807]
								}, {
									"case":	159,
									"scores":	[-6.154523517672807]
								}, {
									"case":	160,
									"scores":	[-6.154523517672807]
								}, {
									"case":	161,
									"scores":	[-6.154523517672807]
								}, {
									"case":	162,
									"scores":	[-6.154523517672807]
								}, {
									"case":	163,
									"scores":	[-6.154523517672807]
								}, {
									"case":	164,
									"scores":	[-6.154523517672807]
								}, {
									"case":	165,
									"scores":	[-6.154523517672807]
								}, {
									"case":	166,
									"scores":	[-6.154523517672807]
								}, {
									"case":	167,
									"scores":	[-6.154523517672807]
								}, {
									"case":	168,
									"scores":	[-6.154523517672807]
								}, {
									"case":	169,
									"scores":	[-6.154523517672807]
								}, {
									"case":	170,
									"scores":	[-6.154523517672807]
								}, {
									"case":	171,
									"scores":	[-6.154523517672807]
								}, {
									"case":	172,
									"scores":	[-6.154523517672807]
								}, {
									"case":	173,
									"scores":	[-6.154523517672807]
								}, {
									"case":	174,
									"scores":	[-6.154523517672807]
								}, {
									"case":	175,
									"scores":	[-6.154523517672807]
								}, {
									"case":	176,
									"scores":	[-6.154523517672807]
								}, {
									"case":	177,
									"scores":	[-6.154523517672807]
								}]
						}]
				}, {
					"line":	52,
					"switches":	[{
							"switch":	13,
							"types":	[[], [], [], [], [32, 33, 34], [1, 2, 3, 4], [], [], [], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [], [], []],
							"begin_line":	53,
							"begin_column":	0,
							"end_line":	53,
							"end_column":	0,
							"patch_codes":	["memset(&hash_key->arKey, 0, sizeof (*(&hash_key->arKey)))", "memset(&hash_key->h, 0, sizeof (*(&hash_key->h)))", "memset(&hash_key->nKeyLength, 0, sizeof (*(&hash_key->nKeyLength)))", "memset(hash_key->arKey, 0, sizeof (*(hash_key->arKey)))", "(**(zv)).value.ht->nApplyCount++", "(**(zv)).value.ht->nApplyCount--", "level = (0)", "level = (1)", "level = (2)", "level = (level)", "level = (num_args)", "php_body_write(((hash_key)->arKey), (hash_key->nKeyLength - 1))", "php_body_write((hash_key->arKey), ((hash_key)->nKeyLength - 1))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(zv)).value.str.val)", "php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', (hash_key)->h)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((zv))))", "php_var_dump((zv), level + 2)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "exit(1)", "level = __builtin_va_arg(args, int)", "php_body_write((hash_key->arKey), (hash_key->nKeyLength - 1))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', hash_key->h)", "php_printf(\"%*c[\\\"\", level + 1, ' ')", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "php_var_dump(zv, level + 2)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L53\", 4, &(zv), sizeof (zv), &(level), sizeof (level), &(hash_key), sizeof (hash_key), &(args), sizeof (args)))\n    return 0;\n", "if (__is_neg(\"\", \"L53\", 4, &(zv), sizeof (zv), &(level), sizeof (level), &(hash_key), sizeof (hash_key), &(args), sizeof (args)))\n    return 1;\n", "if (__is_neg(\"\", \"L53\", 4, &(zv), sizeof (zv), &(level), sizeof (level), &(hash_key), sizeof (hash_key), &(args), sizeof (args)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	2,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	3,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	4,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	5,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	6,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	7,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	8,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	9,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	10,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	11,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	12,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	13,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	14,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	15,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	16,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	17,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	18,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	19,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	20,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	21,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	22,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	23,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	24,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	25,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	26,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	27,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	28,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	29,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	30,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	31,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	32,
									"scores":	[-9.06170230335529, -7.3305036663552876, -9.62766796015529, -8.8626627401552867]
								}, {
									"case":	33,
									"scores":	[-11.886171303355287, -10.154972666355288, -12.452136960155286, -11.687131740155287]
								}, {
									"case":	34,
									"scores":	[-11.886171303355287, -10.154972666355288, -12.452136960155286, -11.687131740155287]
								}]
						}, {
							"switch":	14,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	53,
							"begin_column":	2,
							"end_line":	53,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L53\", 4, &(zv), sizeof (zv), &(level), sizeof (level), &(hash_key), sizeof (hash_key), &(args), sizeof (args)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.49903242635529, -7.1381816523552875, -9.024738970855287, -8.32811468035529]
								}]
						}]
				}, {
					"line":	89,
					"switches":	[]
				}, {
					"line":	90,
					"switches":	[]
				}, {
					"line":	91,
					"switches":	[]
				}, {
					"line":	92,
					"switches":	[]
				}, {
					"line":	93,
					"switches":	[]
				}, {
					"line":	96,
					"switches":	[{
							"switch":	17,
							"types":	[[], [], [], [], [64, 65], [1, 2, 3, 4], [], [], [], [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [], [], [], [], [], []],
							"begin_line":	97,
							"begin_column":	1,
							"end_line":	97,
							"end_column":	1,
							"patch_codes":	["memset(&(**struc).is_ref__gc, 0, sizeof (*(&(**struc).is_ref__gc)))", "memset(&(**struc).refcount__gc, 0, sizeof (*(&(**struc).refcount__gc)))", "memset(&(**struc).type, 0, sizeof (*(&(**struc).type)))", "memset(&(**struc).value, 0, sizeof (*(&(**struc).value)))", "((**(struc))).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*(struc), &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*struc, &(class_name), &class_name_len, 0)", "(**(struc)).value.ht->nApplyCount++", "(**(struc)).value.ht->nApplyCount--", "(class_name)++", "--(myht)->nApplyCount", "_efree(((class_name)))", "_efree(((myht)))", "is_temp = (0)", "is_temp = (1)", "is_temp = (2)", "is_temp = (3)", "is_temp = (4)", "is_temp = (5)", "is_temp = (6)", "is_temp = (7)", "is_temp = (is_temp)", "is_temp = (level)", "php_body_write(((**(struc)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(struc)).value.str.len))", "php_element_dump_func = (php_element_dump_func)", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted long input array (%s) overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted super-global (%s) variable overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(struc)).value.str.val)", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((myht)))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), (class_name), (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**(struc)).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, (myht) ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements((myht)) : 0)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((struc))))", "php_printf(\"\\\"%s\\\"\", (class_name))", "php_printf(\"\\\"%s\\\":protected\", (class_name))", "zend_hash_apply_with_arguments((myht), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy((myht))", "((**struc)).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "--myht->nApplyCount", "_efree((class_name))", "_efree((myht))", "exit(1)", "is_temp = 0", "php_body_write(((**struc).value.str.val), ((**struc).value.str.len))", "php_element_dump_func = php_array_element_dump", "php_element_dump_func = php_object_property_dump", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c\", level - 1, ' ')", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy(myht)", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L97\", 7, &(level), sizeof (level), &(struc), sizeof (struc), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len)))\n    goto head_done;\n", "if (__is_neg(\"\", \"L97\", 7, &(level), sizeof (level), &(struc), sizeof (struc), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	2,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	3,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	4,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	5,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	6,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	7,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	8,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	9,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	10,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	11,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	12,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	13,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	14,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	15,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	16,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	17,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	18,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	19,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	20,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	21,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	22,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	23,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	24,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	25,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	26,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	27,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	28,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	29,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	30,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	31,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	32,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	33,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	34,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	35,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	36,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	37,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	38,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	39,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	40,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	41,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	42,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	43,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	44,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	45,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	46,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	47,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	48,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	49,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	50,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	51,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	52,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	53,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	54,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	55,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	56,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	57,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	58,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	59,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	60,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	61,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	62,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	63,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	64,
									"scores":	[-7.0088485619304821, -7.8511077579304818, -7.8491571547304826, -7.6031182409304821, -7.6031182409304821, -7.8140073579304818, -7.1021832409304819]
								}, {
									"case":	65,
									"scores":	[-7.0098485619304824, -7.852107757930483, -7.8501571547304829, -7.6041182409304824, -7.6041182409304824, -7.8150073579304831, -7.1031832409304823]
								}]
						}, {
							"switch":	18,
							"types":	[[], [], [1], [], [], [], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], [], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [], [2, 3, 4, 5], [], [], [6]],
							"begin_line":	97,
							"begin_column":	3,
							"end_line":	97,
							"end_column":	35,
							"patch_codes":	["if (!__is_neg(\"\", \"L97\", 7, &(level), sizeof (level), &(struc), sizeof (struc), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len)))\n    php_printf(\"%*c\", level - 1, ' ');\n", "_php_stream_mkdir(\"%*c\", level - 1, ' ', 0)", "_php_stream_set_option(\"%*c\", level - 1, ' ', 0)", "php_stat(\"%*c\", level - 1, ' ', 0)", "zend_lookup_class_ex(\"%*c\", level - 1, ' ', 0)", "{\n}\n", "Debug(\"%*c\", level - 1, ' ')", "php_ini_activate_config(\"%*c\", level - 1, ' ')", "printf(\"%*c\", level - 1, ' ')", "virtual_open(\"%*c\", level - 1, ' ')", "wprintf(\"%*c\", level - 1, ' ')", "zend_class_implements(\"%*c\", level - 1, ' ')", "zend_do_end_variable_parse(\"%*c\", level - 1, ' ')", "zend_fcall_info_argn(\"%*c\", level - 1, ' ')", "zend_mm_shutdown(\"%*c\", level - 1, ' ')", "zend_ptr_stack_n_pop(\"%*c\", level - 1, ' ')", "zend_ptr_stack_n_push(\"%*c\", level - 1, ' ')", "php_printf(\"%*c or the directory does not exist\", level - 1, ' ')", "php_printf(\"%*c\", (0 * class_name_len) - 1, ' ')", "php_printf(\"%*c\", (0 * is_temp) - 1, ' ')", "php_printf(\"%*c\", (0 * level) - 1, ' ')", "php_printf(\"%*c\", (class_name != 0) - 1, ' ')", "php_printf(\"%*c\", (class_name == 0) - 1, ' ')", "php_printf(\"%*c\", (class_name_len != 0) - 1, ' ')", "php_printf(\"%*c\", (class_name_len != is_temp) - 1, ' ')", "php_printf(\"%*c\", (class_name_len * is_temp) - 1, ' ')", "php_printf(\"%*c\", (class_name_len * level) - 1, ' ')", "php_printf(\"%*c\", (class_name_len + 0) - 1, ' ')", "php_printf(\"%*c\", (class_name_len + is_temp) - 1, ' ')", "php_printf(\"%*c\", (class_name_len - 0) - 1, ' ')", "php_printf(\"%*c\", (class_name_len - is_temp) - 1, ' ')", "php_printf(\"%*c\", (class_name_len == 0) - 1, ' ')", "php_printf(\"%*c\", (class_name_len == is_temp) - 1, ' ')", "php_printf(\"%*c\", (is_temp != 0) - 1, ' ')", "php_printf(\"%*c\", (is_temp * class_name_len) - 1, ' ')", "php_printf(\"%*c\", (is_temp * level) - 1, ' ')", "php_printf(\"%*c\", (is_temp + 0) - 1, ' ')", "php_printf(\"%*c\", (is_temp - 0) - 1, ' ')", "php_printf(\"%*c\", (is_temp == 0) - 1, ' ')", "php_printf(\"%*c\", (is_temp) - 1, ' ')", "php_printf(\"%*c\", (level != 0) - 1, ' ')", "php_printf(\"%*c\", (level != class_name_len) - 1, ' ')", "php_printf(\"%*c\", (level != is_temp) - 1, ' ')", "php_printf(\"%*c\", (level * class_name_len) - 1, ' ')", "php_printf(\"%*c\", (level * is_temp) - 1, ' ')", "php_printf(\"%*c\", (level + 0) - 1, ' ')", "php_printf(\"%*c\", (level + class_name_len) - 1, ' ')", "php_printf(\"%*c\", (level + is_temp) - 1, ' ')", "php_printf(\"%*c\", (level - 0) - 1, ' ')", "php_printf(\"%*c\", (level - class_name_len) - 1, ' ')", "php_printf(\"%*c\", (level - is_temp) - 1, ' ')", "php_printf(\"%*c\", (level == 0) - 1, ' ')", "php_printf(\"%*c\", (level == class_name_len) - 1, ' ')", "php_printf(\"%*c\", (level == is_temp) - 1, ' ')", "php_printf(\"%*c\", (level) - 1, ' ')", "php_printf(\"%*c\", (myht != 0) - 1, ' ')", "php_printf(\"%*c\", (myht == 0) - 1, ' ')", "php_printf(\"%*c\", (php_element_dump_func != 0) - 1, ' ')", "php_printf(\"%*c\", (php_element_dump_func == 0) - 1, ' ')", "php_printf(\"%*c\", (struc != 0) - 1, ' ')", "php_printf(\"%*c\", (struc == 0) - 1, ' ')", "php_printf(\"%*c\", level - (0 * class_name_len), ' ')", "php_printf(\"%*c\", level - (0 * is_temp), ' ')", "php_printf(\"%*c\", level - (0 * level), ' ')", "php_printf(\"%*c\", level - (0), ' ')", "php_printf(\"%*c\", level - (class_name != 0), ' ')", "php_printf(\"%*c\", level - (class_name == 0), ' ')", "php_printf(\"%*c\", level - (class_name_len != 0), ' ')", "php_printf(\"%*c\", level - (class_name_len != is_temp), ' ')", "php_printf(\"%*c\", level - (class_name_len * is_temp), ' ')", "php_printf(\"%*c\", level - (class_name_len * level), ' ')", "php_printf(\"%*c\", level - (class_name_len + 0), ' ')", "php_printf(\"%*c\", level - (class_name_len + is_temp), ' ')", "php_printf(\"%*c\", level - (class_name_len - 0), ' ')", "php_printf(\"%*c\", level - (class_name_len - is_temp), ' ')", "php_printf(\"%*c\", level - (class_name_len == 0), ' ')", "php_printf(\"%*c\", level - (class_name_len == is_temp), ' ')", "php_printf(\"%*c\", level - (is_temp != 0), ' ')", "php_printf(\"%*c\", level - (is_temp * class_name_len), ' ')", "php_printf(\"%*c\", level - (is_temp * level), ' ')", "php_printf(\"%*c\", level - (is_temp + 0), ' ')", "php_printf(\"%*c\", level - (is_temp - 0), ' ')", "php_printf(\"%*c\", level - (is_temp == 0), ' ')", "php_printf(\"%*c\", level - (level != 0), ' ')", "php_printf(\"%*c\", level - (level != class_name_len), ' ')", "php_printf(\"%*c\", level - (level != is_temp), ' ')", "php_printf(\"%*c\", level - (level * class_name_len), ' ')", "php_printf(\"%*c\", level - (level * is_temp), ' ')", "php_printf(\"%*c\", level - (level + 0), ' ')", "php_printf(\"%*c\", level - (level + class_name_len), ' ')", "php_printf(\"%*c\", level - (level + is_temp), ' ')", "php_printf(\"%*c\", level - (level - 0), ' ')", "php_printf(\"%*c\", level - (level - class_name_len), ' ')", "php_printf(\"%*c\", level - (level - is_temp), ' ')", "php_printf(\"%*c\", level - (level == 0), ' ')", "php_printf(\"%*c\", level - (level == class_name_len), ' ')", "php_printf(\"%*c\", level - (level == is_temp), ' ')", "php_printf(\"%*c\", level - (myht != 0), ' ')", "php_printf(\"%*c\", level - (myht == 0), ' ')", "php_printf(\"%*c\", level - (php_element_dump_func != 0), ' ')", "php_printf(\"%*c\", level - (php_element_dump_func == 0), ' ')", "php_printf(\"%*c\", level - (struc != 0), ' ')", "php_printf(\"%*c\", level - (struc == 0), ' ')", "php_printf((&class_name), level - 1, ' ')", "php_printf((&class_name_len), level - 1, ' ')", "php_printf((&is_temp), level - 1, ' ')", "php_printf((&level), level - 1, ' ')", "php_printf((&myht), level - 1, ' ')", "php_printf((&php_element_dump_func), level - 1, ' ')", "php_printf((&struc), level - 1, ' ')", "php_printf((0), level - 1, ' ')"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.2178353535304822, -7.5937726535304826, -7.5880499535304828, -6.8301618535304822, -6.8301618535304822, -7.2994218535304825, -6.5081508235304826]
								}, {
									"case":	2,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	3,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	4,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	5,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	6,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	7,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	8,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	9,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	10,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	11,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	12,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	13,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	14,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	15,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	16,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	17,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	18,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	19,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	20,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	21,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	22,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	23,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	24,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	25,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	26,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	27,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	28,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	29,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	30,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	31,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	32,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	33,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	34,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	35,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	36,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	37,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	38,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	39,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	40,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	41,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	42,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	43,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	44,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	45,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	46,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	47,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	48,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	49,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	50,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	51,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	52,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	53,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	54,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	55,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	56,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	57,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	58,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	59,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	60,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	61,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	62,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	63,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	64,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	65,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	66,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	67,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	68,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	69,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	70,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	71,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	72,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	73,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	74,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	75,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	76,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	77,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	78,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	79,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	80,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	81,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	82,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	83,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	84,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	85,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	86,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	87,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	88,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	89,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	90,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	91,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	92,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	93,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	94,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	95,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	96,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	97,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	98,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	99,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	100,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	101,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	102,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	103,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	104,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	105,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	106,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	107,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	108,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	109,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	110,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	111,
									"scores":	[-6.3363478835304825]
								}]
						}]
				}, {
					"line":	95,
					"switches":	[{
							"switch":	15,
							"types":	[[], [], [], [], [64, 65], [1, 2, 3, 4], [], [], [], [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [], [], [], [], [], []],
							"begin_line":	96,
							"begin_column":	0,
							"end_line":	96,
							"end_column":	0,
							"patch_codes":	["memset(&(**struc).is_ref__gc, 0, sizeof (*(&(**struc).is_ref__gc)))", "memset(&(**struc).refcount__gc, 0, sizeof (*(&(**struc).refcount__gc)))", "memset(&(**struc).type, 0, sizeof (*(&(**struc).type)))", "memset(&(**struc).value, 0, sizeof (*(&(**struc).value)))", "((**(struc))).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*(struc), &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*struc, &(class_name), &class_name_len, 0)", "(**(struc)).value.ht->nApplyCount++", "(**(struc)).value.ht->nApplyCount--", "(class_name)++", "--(myht)->nApplyCount", "_efree(((class_name)))", "_efree(((myht)))", "is_temp = (0)", "is_temp = (1)", "is_temp = (2)", "is_temp = (3)", "is_temp = (4)", "is_temp = (5)", "is_temp = (6)", "is_temp = (7)", "is_temp = (is_temp)", "is_temp = (level)", "php_body_write(((**(struc)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(struc)).value.str.len))", "php_element_dump_func = (php_element_dump_func)", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted long input array (%s) overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted super-global (%s) variable overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(struc)).value.str.val)", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((myht)))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), (class_name), (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**(struc)).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, (myht) ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements((myht)) : 0)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((struc))))", "php_printf(\"\\\"%s\\\"\", (class_name))", "php_printf(\"\\\"%s\\\":protected\", (class_name))", "zend_hash_apply_with_arguments((myht), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy((myht))", "((**struc)).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "--myht->nApplyCount", "_efree((class_name))", "_efree((myht))", "exit(1)", "is_temp = 0", "php_body_write(((**struc).value.str.val), ((**struc).value.str.len))", "php_element_dump_func = php_array_element_dump", "php_element_dump_func = php_object_property_dump", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c\", level - 1, ' ')", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy(myht)", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L96\", 7, &(level), sizeof (level), &(struc), sizeof (struc), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len)))\n    goto head_done;\n", "if (__is_neg(\"\", \"L96\", 7, &(level), sizeof (level), &(struc), sizeof (struc), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	2,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	3,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	4,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	5,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	6,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	7,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	8,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	9,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	10,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	11,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	12,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	13,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	14,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	15,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	16,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	17,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-9.36927467521669, -11.166879750216689, -11.544915576916686, -10.564422753216688, -10.938471743216688, -10.916733013216689, -10.336958243216689]
								}, {
									"case":	65,
									"scores":	[-9.37027467521669, -11.167879750216688, -11.545915576916688, -10.565422753216689, -10.939471743216687, -10.917733013216688, -10.337958243216688]
								}]
						}, {
							"switch":	16,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	96,
							"begin_column":	2,
							"end_line":	98,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L96\", 7, &(level), sizeof (level), &(struc), sizeof (struc), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len))) {\n    php_printf(\"%*c\", level - 1, ' ');\n}\n", "if ((level > 1) || __is_neg(\"\", \"L96\", 7, &(level), sizeof (level), &(struc), sizeof (struc), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len))) {\n    php_printf(\"%*c\", level - 1, ' ');\n}\n", "if ((level > 1) && !__is_neg(\"\", \"L96\", 7, &(level), sizeof (level), &(struc), sizeof (struc), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len))) {\n    php_printf(\"%*c\", level - 1, ' ');\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.9091481831281452, -2.8174969441281457, -4.0878204620281462, -2.9146287251281455, -4.4706713391281454, -3.896031883128146, -3.3336449541281459]
								}, {
									"case":	2,
									"scores":	[-1.8858127749281457, -2.7941615359281453, -4.0644850538281458, -2.8912933169281461, -4.4473359309281459, -3.8726964749281461, -3.3103095459281455]
								}, {
									"case":	3,
									"scores":	[-1.8858127749281457, -2.7941615359281453, -4.0644850538281458, -2.8912933169281461, -4.4473359309281459, -3.8726964749281461, -3.3103095459281455]
								}]
						}, {
							"switch":	19,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	96,
							"begin_column":	2,
							"end_line":	98,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L96\", 7, &(level), sizeof (level), &(struc), sizeof (struc), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len)))\n    if (level > 1) {\n        php_printf(\"%*c\", level - 1, ' ');\n    }\n", "if (!__is_neg(\"\", \"L96\", 7, &(level), sizeof (level), &(struc), sizeof (struc), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len)) && (level > 1)) {\n    php_printf(\"%*c\", level - 1, ' ');\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.17441180621669, -8.08276056721669, -9.35308408511669, -8.17989234821669, -9.73593496221669, -9.16129550621669, -8.59890857721669]
								}, {
									"case":	2,
									"scores":	[-6.60850219671669, -7.51685095771669, -8.78717447561669, -7.61398273871669, -9.17002535271669, -8.59538589671669, -8.03299896771669]
								}]
						}]
				}, {
					"line":	114,
					"switches":	[{
							"switch":	21,
							"types":	[[], [], [], [], [306, 307], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246], [], [], [], [284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305], [247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], [], [], [], [], [], []],
							"begin_line":	115,
							"begin_column":	1,
							"end_line":	115,
							"end_column":	1,
							"patch_codes":	["memset(&(((**struc))).is_ref__gc, 0, sizeof (*(&(((**struc))).is_ref__gc)))", "memset(&(((**struc))).refcount__gc, 0, sizeof (*(&(((**struc))).refcount__gc)))", "memset(&(((**struc))).type, 0, sizeof (*(&(((**struc))).type)))", "memset(&(((**struc))).value, 0, sizeof (*(&(((**struc))).value)))", "memset(&(((**struc))).value.dval, 0, sizeof (*(&(((**struc))).value.dval)))", "memset(&(((**struc))).value.ht, 0, sizeof (*(&(((**struc))).value.ht)))", "memset(&(((**struc))).value.lval, 0, sizeof (*(&(((**struc))).value.lval)))", "memset(&(((**struc))).value.obj, 0, sizeof (*(&(((**struc))).value.obj)))", "memset(&(((**struc))).value.obj.handle, 0, sizeof (*(&(((**struc))).value.obj.handle)))", "memset(&(((**struc))).value.obj.handlers, 0, sizeof (*(&(((**struc))).value.obj.handlers)))", "memset(&(((**struc))).value.obj.handlers->add_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->add_ref)))", "memset(&(((**struc))).value.obj.handlers->call_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->call_method)))", "memset(&(((**struc))).value.obj.handlers->cast_object, 0, sizeof (*(&(((**struc))).value.obj.handlers->cast_object)))", "memset(&(((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*(&(((**struc))).value.obj.handlers->clone_obj)))", "memset(&(((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*(&(((**struc))).value.obj.handlers->compare_objects)))", "memset(&(((**struc))).value.obj.handlers->count_elements, 0, sizeof (*(&(((**struc))).value.obj.handlers->count_elements)))", "memset(&(((**struc))).value.obj.handlers->del_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->del_ref)))", "memset(&(((**struc))).value.obj.handlers->get, 0, sizeof (*(&(((**struc))).value.obj.handlers->get)))", "memset(&(((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_entry)))", "memset(&(((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_name)))", "memset(&(((**struc))).value.obj.handlers->get_closure, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_closure)))", "memset(&(((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_constructor)))", "memset(&(((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_debug_info)))", "memset(&(((**struc))).value.obj.handlers->get_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_method)))", "memset(&(((**struc))).value.obj.handlers->get_properties, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_properties)))", "memset(&(((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_dimension)))", "memset(&(((**struc))).value.obj.handlers->has_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_property)))", "memset(&(((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_dimension)))", "memset(&(((**struc))).value.obj.handlers->read_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_property)))", "memset(&(((**struc))).value.obj.handlers->set, 0, sizeof (*(&(((**struc))).value.obj.handlers->set)))", "memset(&(((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_dimension)))", "memset(&(((**struc))).value.obj.handlers->unset_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_property)))", "memset(&(((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_dimension)))", "memset(&(((**struc))).value.obj.handlers->write_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_property)))", "memset(&(((**struc))).value.str, 0, sizeof (*(&(((**struc))).value.str)))", "memset(&((**struc)).is_ref__gc, 0, sizeof (*(&((**struc)).is_ref__gc)))", "memset(&((**struc)).refcount__gc, 0, sizeof (*(&((**struc)).refcount__gc)))", "memset(&((**struc)).type, 0, sizeof (*(&((**struc)).type)))", "memset(&((**struc)).value, 0, sizeof (*(&((**struc)).value)))", "memset(&((**struc)).value.dval, 0, sizeof (*(&((**struc)).value.dval)))", "memset(&((**struc)).value.ht, 0, sizeof (*(&((**struc)).value.ht)))", "memset(&((**struc)).value.lval, 0, sizeof (*(&((**struc)).value.lval)))", "memset(&((**struc)).value.obj, 0, sizeof (*(&((**struc)).value.obj)))", "memset(&((**struc)).value.obj.handle, 0, sizeof (*(&((**struc)).value.obj.handle)))", "memset(&((**struc)).value.obj.handlers, 0, sizeof (*(&((**struc)).value.obj.handlers)))", "memset(&((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->add_ref)))", "memset(&((**struc)).value.obj.handlers->call_method, 0, sizeof (*(&((**struc)).value.obj.handlers->call_method)))", "memset(&((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(&((**struc)).value.obj.handlers->cast_object)))", "memset(&((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(&((**struc)).value.obj.handlers->clone_obj)))", "memset(&((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(&((**struc)).value.obj.handlers->compare_objects)))", "memset(&((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(&((**struc)).value.obj.handlers->count_elements)))", "memset(&((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->del_ref)))", "memset(&((**struc)).value.obj.handlers->get, 0, sizeof (*(&((**struc)).value.obj.handlers->get)))", "memset(&((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_entry)))", "memset(&((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_name)))", "memset(&((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(&((**struc)).value.obj.handlers->get_closure)))", "memset(&((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(&((**struc)).value.obj.handlers->get_constructor)))", "memset(&((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(&((**struc)).value.obj.handlers->get_debug_info)))", "memset(&((**struc)).value.obj.handlers->get_method, 0, sizeof (*(&((**struc)).value.obj.handlers->get_method)))", "memset(&((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(&((**struc)).value.obj.handlers->get_properties)))", "memset(&((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(&((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->has_dimension)))", "memset(&((**struc)).value.obj.handlers->has_property, 0, sizeof (*(&((**struc)).value.obj.handlers->has_property)))", "memset(&((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->read_dimension)))", "memset(&((**struc)).value.obj.handlers->read_property, 0, sizeof (*(&((**struc)).value.obj.handlers->read_property)))", "memset(&((**struc)).value.obj.handlers->set, 0, sizeof (*(&((**struc)).value.obj.handlers->set)))", "memset(&((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_dimension)))", "memset(&((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_property)))", "memset(&((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->write_dimension)))", "memset(&((**struc)).value.obj.handlers->write_property, 0, sizeof (*(&((**struc)).value.obj.handlers->write_property)))", "memset(&((**struc)).value.str, 0, sizeof (*(&((**struc)).value.str)))", "memset(&(**struc), 0, sizeof (*(&(**struc))))", "memset(&(**struc).is_ref__gc, 0, sizeof (*(&(**struc).is_ref__gc)))", "memset(&(**struc).refcount__gc, 0, sizeof (*(&(**struc).refcount__gc)))", "memset(&(**struc).type, 0, sizeof (*(&(**struc).type)))", "memset(&(**struc).value, 0, sizeof (*(&(**struc).value)))", "memset(&(**struc).value.dval, 0, sizeof (*(&(**struc).value.dval)))", "memset(&(**struc).value.ht, 0, sizeof (*(&(**struc).value.ht)))", "memset(&(**struc).value.lval, 0, sizeof (*(&(**struc).value.lval)))", "memset(&(**struc).value.obj, 0, sizeof (*(&(**struc).value.obj)))", "memset(&(**struc).value.obj.handle, 0, sizeof (*(&(**struc).value.obj.handle)))", "memset(&(**struc).value.obj.handlers, 0, sizeof (*(&(**struc).value.obj.handlers)))", "memset(&(**struc).value.str, 0, sizeof (*(&(**struc).value.str)))", "memset(&(**struc).value.str.len, 0, sizeof (*(&(**struc).value.str.len)))", "memset(&(**struc).value.str.val, 0, sizeof (*(&(**struc).value.str.val)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((((**struc))).value.ht, 0, sizeof (*((((**struc))).value.ht)))", "memset((((**struc))).value.obj.handlers, 0, sizeof (*((((**struc))).value.obj.handlers)))", "memset((((**struc))).value.obj.handlers->add_ref, 0, sizeof (*((((**struc))).value.obj.handlers->add_ref)))", "memset((((**struc))).value.obj.handlers->call_method, 0, sizeof (*((((**struc))).value.obj.handlers->call_method)))", "memset((((**struc))).value.obj.handlers->cast_object, 0, sizeof (*((((**struc))).value.obj.handlers->cast_object)))", "memset((((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*((((**struc))).value.obj.handlers->clone_obj)))", "memset((((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*((((**struc))).value.obj.handlers->compare_objects)))", "memset((((**struc))).value.obj.handlers->count_elements, 0, sizeof (*((((**struc))).value.obj.handlers->count_elements)))", "memset((((**struc))).value.obj.handlers->del_ref, 0, sizeof (*((((**struc))).value.obj.handlers->del_ref)))", "memset((((**struc))).value.obj.handlers->get, 0, sizeof (*((((**struc))).value.obj.handlers->get)))", "memset((((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_entry)))", "memset((((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_name)))", "memset((((**struc))).value.obj.handlers->get_closure, 0, sizeof (*((((**struc))).value.obj.handlers->get_closure)))", "memset((((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*((((**struc))).value.obj.handlers->get_constructor)))", "memset((((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*((((**struc))).value.obj.handlers->get_debug_info)))", "memset((((**struc))).value.obj.handlers->get_method, 0, sizeof (*((((**struc))).value.obj.handlers->get_method)))", "memset((((**struc))).value.obj.handlers->get_properties, 0, sizeof (*((((**struc))).value.obj.handlers->get_properties)))", "memset((((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset((((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->has_dimension)))", "memset((((**struc))).value.obj.handlers->has_property, 0, sizeof (*((((**struc))).value.obj.handlers->has_property)))", "memset((((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->read_dimension)))", "memset((((**struc))).value.obj.handlers->read_property, 0, sizeof (*((((**struc))).value.obj.handlers->read_property)))", "memset((((**struc))).value.obj.handlers->set, 0, sizeof (*((((**struc))).value.obj.handlers->set)))", "memset((((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->unset_dimension)))", "memset((((**struc))).value.obj.handlers->unset_property, 0, sizeof (*((((**struc))).value.obj.handlers->unset_property)))", "memset((((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->write_dimension)))", "memset((((**struc))).value.obj.handlers->write_property, 0, sizeof (*((((**struc))).value.obj.handlers->write_property)))", "memset(((**struc)).value.ht, 0, sizeof (*(((**struc)).value.ht)))", "memset(((**struc)).value.obj.handlers, 0, sizeof (*(((**struc)).value.obj.handlers)))", "memset(((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(((**struc)).value.obj.handlers->add_ref)))", "memset(((**struc)).value.obj.handlers->call_method, 0, sizeof (*(((**struc)).value.obj.handlers->call_method)))", "memset(((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(((**struc)).value.obj.handlers->cast_object)))", "memset(((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(((**struc)).value.obj.handlers->clone_obj)))", "memset(((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(((**struc)).value.obj.handlers->compare_objects)))", "memset(((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(((**struc)).value.obj.handlers->count_elements)))", "memset(((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(((**struc)).value.obj.handlers->del_ref)))", "memset(((**struc)).value.obj.handlers->get, 0, sizeof (*(((**struc)).value.obj.handlers->get)))", "memset(((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_entry)))", "memset(((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_name)))", "memset(((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(((**struc)).value.obj.handlers->get_closure)))", "memset(((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(((**struc)).value.obj.handlers->get_constructor)))", "memset(((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(((**struc)).value.obj.handlers->get_debug_info)))", "memset(((**struc)).value.obj.handlers->get_method, 0, sizeof (*(((**struc)).value.obj.handlers->get_method)))", "memset(((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(((**struc)).value.obj.handlers->get_properties)))", "memset(((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->has_dimension)))", "memset(((**struc)).value.obj.handlers->has_property, 0, sizeof (*(((**struc)).value.obj.handlers->has_property)))", "memset(((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->read_dimension)))", "memset(((**struc)).value.obj.handlers->read_property, 0, sizeof (*(((**struc)).value.obj.handlers->read_property)))", "memset(((**struc)).value.obj.handlers->set, 0, sizeof (*(((**struc)).value.obj.handlers->set)))", "memset(((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->unset_dimension)))", "memset(((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(((**struc)).value.obj.handlers->unset_property)))", "memset(((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->write_dimension)))", "memset(((**struc)).value.obj.handlers->write_property, 0, sizeof (*(((**struc)).value.obj.handlers->write_property)))", "memset((**struc).value.ht, 0, sizeof (*((**struc).value.ht)))", "memset((**struc).value.obj.handlers, 0, sizeof (*((**struc).value.obj.handlers)))", "memset((**struc).value.str.val, 0, sizeof (*((**struc).value.str.val)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw, 0, sizeof (*(executor_globals.saved_fpu_cw)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "((**(struc))).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*(struc), &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*struc, &(class_name), &class_name_len, 0)", "(**(struc)).value.ht->nApplyCount++", "(**(struc)).value.ht->nApplyCount--", "(class_name)++", "--(myht)->nApplyCount", "_efree(((class_name)))", "_efree(((myht)))", "is_temp = (0)", "is_temp = (1)", "is_temp = (2)", "is_temp = (3)", "is_temp = (4)", "is_temp = (5)", "is_temp = (6)", "is_temp = (7)", "is_temp = (is_temp)", "is_temp = (level)", "php_body_write(((**(struc)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(struc)).value.str.len))", "php_element_dump_func = (php_element_dump_func)", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted long input array (%s) overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted super-global (%s) variable overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(struc)).value.str.val)", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((myht)))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), (class_name), (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**(struc)).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, (myht) ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements((myht)) : 0)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((struc))))", "php_printf(\"\\\"%s\\\"\", (class_name))", "php_printf(\"\\\"%s\\\":protected\", (class_name))", "zend_hash_apply_with_arguments((myht), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy((myht))", "((**struc)).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "--myht->nApplyCount", "_efree((class_name))", "_efree((myht))", "exit(1)", "is_temp = 0", "php_body_write(((**struc).value.str.val), ((**struc).value.str.len))", "php_element_dump_func = php_array_element_dump", "php_element_dump_func = php_object_property_dump", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c\", level - 1, ' ')", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy(myht)", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L115\", 12, &(struc), sizeof (struc), &((**struc).value.str.val), sizeof ((**struc).value.str.val), &((**struc).value.str.len), sizeof ((**struc).value.str.len), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &((**struc).type), sizeof ((**struc).type), &(level), sizeof (level), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &((**struc).refcount__gc), sizeof ((**struc).refcount__gc), &((**struc).is_ref__gc), sizeof ((**struc).is_ref__gc)))\n    goto head_done;\n", "if (__is_neg(\"\", \"L115\", 12, &(struc), sizeof (struc), &((**struc).value.str.val), sizeof ((**struc).value.str.val), &((**struc).value.str.len), sizeof ((**struc).value.str.len), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &((**struc).type), sizeof ((**struc).type), &(level), sizeof (level), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &((**struc).refcount__gc), sizeof ((**struc).refcount__gc), &((**struc).is_ref__gc), sizeof ((**struc).is_ref__gc)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	2,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	3,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	4,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	5,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	6,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	7,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	8,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	9,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	10,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	11,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	12,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	13,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	14,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	15,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	16,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	17,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	18,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	19,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	20,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	21,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	22,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	23,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	24,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	25,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	26,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	27,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	28,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	29,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	30,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	31,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	32,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	33,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	34,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	35,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	36,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	37,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	38,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	39,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	40,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	41,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	42,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	43,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	44,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	45,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	46,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	47,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	48,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	49,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	50,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	51,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	52,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	53,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	54,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	55,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	56,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	57,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	58,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	59,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	60,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	61,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	62,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	63,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	64,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	65,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	66,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	67,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	68,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	69,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	70,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	71,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	72,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	73,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	74,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	75,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	76,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	77,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	78,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	79,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	80,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	81,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	82,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	83,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	84,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	85,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	86,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	87,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	88,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	89,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	90,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	91,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	92,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	93,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	94,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	95,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	96,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	97,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	98,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	99,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	100,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	101,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	102,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	103,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	104,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	105,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	106,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	107,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	108,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	109,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	110,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	111,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	112,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	113,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	114,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	115,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	116,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	117,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	118,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	119,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	120,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	121,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	122,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	123,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	124,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	125,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	126,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	127,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	128,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	129,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	130,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	131,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	132,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	133,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	134,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	135,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	136,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	137,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	138,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	139,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	140,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	141,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	142,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	143,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	144,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	145,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	146,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	147,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	148,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	149,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	150,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	151,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	152,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	153,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	154,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	155,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	156,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	157,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	158,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	159,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	160,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	161,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	162,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	163,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	164,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	165,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	166,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	167,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	168,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	169,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	170,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	171,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	172,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	173,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	174,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	175,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	176,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	177,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	178,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	179,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	180,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	181,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	182,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	183,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	184,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	185,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	186,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	187,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	188,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	189,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	190,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	191,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	192,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	193,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	194,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	195,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	196,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	197,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	198,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	199,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	200,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	201,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	202,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	203,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	204,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	205,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	206,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	207,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	208,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	209,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	210,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	211,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	212,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	213,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	214,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	215,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	216,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	217,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	218,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	219,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	220,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	221,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	222,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	223,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	224,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	225,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	226,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	227,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	228,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	229,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	230,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	231,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	232,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	233,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	234,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	235,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	236,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	237,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	238,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	239,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	240,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	241,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	242,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	243,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	244,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	245,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	246,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	247,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	248,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	249,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	250,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	251,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	252,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	253,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	254,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	255,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	256,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	257,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	258,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	259,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	260,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	261,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	262,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	263,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	264,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	265,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	266,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	267,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	268,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	269,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	270,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	271,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	272,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	273,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	274,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	275,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	276,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	277,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	278,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	279,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	280,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	281,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	282,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	283,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	284,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	285,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	286,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	287,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	288,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	289,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	290,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	291,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	292,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	293,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	294,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	295,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	296,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	297,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	298,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	299,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	300,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	301,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	302,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	303,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	304,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	305,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	306,
									"scores":	[-9.51795946790134, -9.27098445490134, -8.57927441790134, -9.31589756670134, -9.10125713290134, -9.10125713290134, -9.91540330690134, -9.39594270690134, -9.31214624990134, -8.60032213290134, -9.91540330690134, -9.91540330690134]
								}, {
									"case":	307,
									"scores":	[-9.51895946790134, -9.27198445490134, -8.58027441790134, -9.31689756670134, -9.10225713290134, -9.10225713290134, -9.91640330690134, -9.39694270690134, -9.31314624990134, -8.60132213290134, -9.91640330690134, -9.91640330690134]
								}]
						}, {
							"switch":	22,
							"types":	[[], [], [1], [], [], [], [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], [], [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], [], [], [108]],
							"begin_line":	115,
							"begin_column":	3,
							"end_line":	115,
							"end_column":	50,
							"patch_codes":	["if (!__is_neg(\"\", \"L115\", 12, &(struc), sizeof (struc), &((**struc).value.str.val), sizeof ((**struc).value.str.val), &((**struc).value.str.len), sizeof ((**struc).value.str.len), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &((**struc).type), sizeof ((**struc).type), &(level), sizeof (level), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &((**struc).refcount__gc), sizeof ((**struc).refcount__gc), &((**struc).is_ref__gc), sizeof ((**struc).is_ref__gc)))\n    php_body_write(((**struc).value.str.val), ((**struc).value.str.len));\n", "chown(((**struc).value.str.val), ((**struc).value.str.len), 0)", "chown(((**struc).value.str.val), ((**struc).value.str.len), 1)", "chown(((**struc).value.str.val), ((**struc).value.str.len), 2)", "chown(((**struc).value.str.val), ((**struc).value.str.len), 3)", "chown(((**struc).value.str.val), ((**struc).value.str.len), 4)", "chown(((**struc).value.str.val), ((**struc).value.str.len), 5)", "chown(((**struc).value.str.val), ((**struc).value.str.len), 6)", "chown(((**struc).value.str.val), ((**struc).value.str.len), 7)", "chown(((**struc).value.str.val), ((**struc).value.str.len), class_name_len)", "lchown(((**struc).value.str.val), ((**struc).value.str.len), 0)", "lchown(((**struc).value.str.val), ((**struc).value.str.len), 1)", "lchown(((**struc).value.str.val), ((**struc).value.str.len), 2)", "lchown(((**struc).value.str.val), ((**struc).value.str.len), 3)", "lchown(((**struc).value.str.val), ((**struc).value.str.len), 4)", "lchown(((**struc).value.str.val), ((**struc).value.str.len), 5)", "lchown(((**struc).value.str.val), ((**struc).value.str.len), 6)", "lchown(((**struc).value.str.val), ((**struc).value.str.len), 7)", "lchown(((**struc).value.str.val), ((**struc).value.str.len), class_name_len)", "mknod(((**struc).value.str.val), ((**struc).value.str.len), 0)", "mknod(((**struc).value.str.val), ((**struc).value.str.len), 1)", "mknod(((**struc).value.str.val), ((**struc).value.str.len), 2)", "mknod(((**struc).value.str.val), ((**struc).value.str.len), 3)", "mknod(((**struc).value.str.val), ((**struc).value.str.len), 4)", "mknod(((**struc).value.str.val), ((**struc).value.str.len), 5)", "mknod(((**struc).value.str.val), ((**struc).value.str.len), 6)", "mknod(((**struc).value.str.val), ((**struc).value.str.len), 7)", "php_start_ob_buffer(((**struc).value.str.val), ((**struc).value.str.len), 0)", "php_start_ob_buffer(((**struc).value.str.val), ((**struc).value.str.len), 1)", "php_start_ob_buffer(((**struc).value.str.val), ((**struc).value.str.len), 2)", "php_start_ob_buffer(((**struc).value.str.val), ((**struc).value.str.len), 3)", "php_start_ob_buffer(((**struc).value.str.val), ((**struc).value.str.len), 4)", "php_start_ob_buffer(((**struc).value.str.val), ((**struc).value.str.len), 5)", "php_start_ob_buffer(((**struc).value.str.val), ((**struc).value.str.len), 6)", "php_start_ob_buffer(((**struc).value.str.val), ((**struc).value.str.len), 7)", "php_start_ob_buffer_named(((**struc).value.str.val), ((**struc).value.str.len), 0)", "php_start_ob_buffer_named(((**struc).value.str.val), ((**struc).value.str.len), 1)", "php_start_ob_buffer_named(((**struc).value.str.val), ((**struc).value.str.len), 2)", "php_start_ob_buffer_named(((**struc).value.str.val), ((**struc).value.str.len), 3)", "php_start_ob_buffer_named(((**struc).value.str.val), ((**struc).value.str.len), 4)", "php_start_ob_buffer_named(((**struc).value.str.val), ((**struc).value.str.len), 5)", "php_start_ob_buffer_named(((**struc).value.str.val), ((**struc).value.str.len), 6)", "php_start_ob_buffer_named(((**struc).value.str.val), ((**struc).value.str.len), 7)", "zend_fetch_class(((**struc).value.str.val), ((**struc).value.str.len), 0)", "zend_fetch_class(((**struc).value.str.val), ((**struc).value.str.len), 1)", "zend_fetch_class(((**struc).value.str.val), ((**struc).value.str.len), 2)", "zend_fetch_class(((**struc).value.str.val), ((**struc).value.str.len), 3)", "zend_fetch_class(((**struc).value.str.val), ((**struc).value.str.len), 4)", "zend_fetch_class(((**struc).value.str.val), ((**struc).value.str.len), 5)", "zend_fetch_class(((**struc).value.str.val), ((**struc).value.str.len), 6)", "zend_fetch_class(((**struc).value.str.val), ((**struc).value.str.len), 7)", "zend_fetch_class(((**struc).value.str.val), ((**struc).value.str.len), is_temp)", "zend_fetch_class(((**struc).value.str.val), ((**struc).value.str.len), le_index_ptr)", "zend_fetch_class(((**struc).value.str.val), ((**struc).value.str.len), level)", "zend_get_compiled_variable_name(((**struc).value.str.val), ((**struc).value.str.len), 0)", "zend_get_configuration_directive(((**struc).value.str.val), ((**struc).value.str.len), 0)", "zend_get_constant(((**struc).value.str.val), ((**struc).value.str.len), 0)", "zend_ini_double(((**struc).value.str.val), ((**struc).value.str.len), 0)", "zend_ini_double(((**struc).value.str.val), ((**struc).value.str.len), 1)", "zend_ini_double(((**struc).value.str.val), ((**struc).value.str.len), 2)", "zend_ini_double(((**struc).value.str.val), ((**struc).value.str.len), 3)", "zend_ini_double(((**struc).value.str.val), ((**struc).value.str.len), 4)", "zend_ini_double(((**struc).value.str.val), ((**struc).value.str.len), 5)", "zend_ini_double(((**struc).value.str.val), ((**struc).value.str.len), 6)", "zend_ini_double(((**struc).value.str.val), ((**struc).value.str.len), 7)", "zend_ini_double(((**struc).value.str.val), ((**struc).value.str.len), is_temp)", "zend_ini_double(((**struc).value.str.val), ((**struc).value.str.len), le_index_ptr)", "zend_ini_double(((**struc).value.str.val), ((**struc).value.str.len), level)", "zend_ini_long(((**struc).value.str.val), ((**struc).value.str.len), 0)", "zend_ini_long(((**struc).value.str.val), ((**struc).value.str.len), 1)", "zend_ini_long(((**struc).value.str.val), ((**struc).value.str.len), 2)", "zend_ini_long(((**struc).value.str.val), ((**struc).value.str.len), 3)", "zend_ini_long(((**struc).value.str.val), ((**struc).value.str.len), 4)", "zend_ini_long(((**struc).value.str.val), ((**struc).value.str.len), 5)", "zend_ini_long(((**struc).value.str.val), ((**struc).value.str.len), 6)", "zend_ini_long(((**struc).value.str.val), ((**struc).value.str.len), 7)", "zend_ini_long(((**struc).value.str.val), ((**struc).value.str.len), is_temp)", "zend_ini_long(((**struc).value.str.val), ((**struc).value.str.len), le_index_ptr)", "zend_ini_long(((**struc).value.str.val), ((**struc).value.str.len), level)", "zend_ini_register_displayer(((**struc).value.str.val), ((**struc).value.str.len), 0)", "zend_ini_register_displayer(((**struc).value.str.val), ((**struc).value.str.len), display_link_numbers)", "zend_ini_register_displayer(((**struc).value.str.val), ((**struc).value.str.len), zend_ini_boolean_displayer_cb)", "zend_ini_register_displayer(((**struc).value.str.val), ((**struc).value.str.len), zend_ini_color_displayer_cb)", "zend_ini_string(((**struc).value.str.val), ((**struc).value.str.len), 0)", "zend_ini_string(((**struc).value.str.val), ((**struc).value.str.len), 1)", "zend_ini_string(((**struc).value.str.val), ((**struc).value.str.len), 2)", "zend_ini_string(((**struc).value.str.val), ((**struc).value.str.len), 3)", "zend_ini_string(((**struc).value.str.val), ((**struc).value.str.len), 4)", "zend_ini_string(((**struc).value.str.val), ((**struc).value.str.len), 5)", "zend_ini_string(((**struc).value.str.val), ((**struc).value.str.len), 6)", "zend_ini_string(((**struc).value.str.val), ((**struc).value.str.len), 7)", "zend_ini_string(((**struc).value.str.val), ((**struc).value.str.len), is_temp)", "zend_ini_string(((**struc).value.str.val), ((**struc).value.str.len), le_index_ptr)", "zend_ini_string(((**struc).value.str.val), ((**struc).value.str.len), level)", "zend_is_callable(((**struc).value.str.val), ((**struc).value.str.len), 0)", "zend_register_auto_global(((**struc).value.str.val), ((**struc).value.str.len), 0)", "zend_restore_ini_entry(((**struc).value.str.val), ((**struc).value.str.len), 0)", "zend_restore_ini_entry(((**struc).value.str.val), ((**struc).value.str.len), 1)", "zend_restore_ini_entry(((**struc).value.str.val), ((**struc).value.str.len), 2)", "zend_restore_ini_entry(((**struc).value.str.val), ((**struc).value.str.len), 3)", "zend_restore_ini_entry(((**struc).value.str.val), ((**struc).value.str.len), 4)", "zend_restore_ini_entry(((**struc).value.str.val), ((**struc).value.str.len), 5)", "zend_restore_ini_entry(((**struc).value.str.val), ((**struc).value.str.len), 6)", "zend_restore_ini_entry(((**struc).value.str.val), ((**struc).value.str.len), 7)", "zend_restore_ini_entry(((**struc).value.str.val), ((**struc).value.str.len), is_temp)", "zend_restore_ini_entry(((**struc).value.str.val), ((**struc).value.str.len), le_index_ptr)", "zend_restore_ini_entry(((**struc).value.str.val), ((**struc).value.str.len), level)", "{\n}\n", "Debug(((**struc).value.str.val), ((**struc).value.str.len))", "_array_init(((**struc).value.str.val), ((**struc).value.str.len))", "_estrndup(((**struc).value.str.val), ((**struc).value.str.len))", "_zend_bailout(((**struc).value.str.val), ((**struc).value.str.len))", "cfg_get_entry(((**struc).value.str.val), ((**struc).value.str.len))", "chmod(((**struc).value.str.val), ((**struc).value.str.len))", "lchmod(((**struc).value.str.val), ((**struc).value.str.len))", "mkdir(((**struc).value.str.val), ((**struc).value.str.len))", "mkfifo(((**struc).value.str.val), ((**struc).value.str.len))", "php_default_output_func(((**struc).value.str.val), ((**struc).value.str.len))", "php_header_write(((**struc).value.str.val), ((**struc).value.str.len))", "php_ini_activate_per_dir_config(((**struc).value.str.val), ((**struc).value.str.len))", "php_ini_activate_per_host_config(((**struc).value.str.val), ((**struc).value.str.len))", "php_printf(((**struc).value.str.val), ((**struc).value.str.len))", "php_ub_body_write(((**struc).value.str.val), ((**struc).value.str.len))", "php_ub_body_write_no_header(((**struc).value.str.val), ((**struc).value.str.len))", "php_write(((**struc).value.str.val), ((**struc).value.str.len))", "printf(((**struc).value.str.val), ((**struc).value.str.len))", "virtual_chmod(((**struc).value.str.val), ((**struc).value.str.len))", "virtual_creat(((**struc).value.str.val), ((**struc).value.str.len))", "virtual_mkdir(((**struc).value.str.val), ((**struc).value.str.len))", "wprintf(((**struc).value.str.val), ((**struc).value.str.len))", "zend_auto_global_disable_jit(((**struc).value.str.val), ((**struc).value.str.len))", "zend_disable_class(((**struc).value.str.val), ((**struc).value.str.len))", "zend_disable_function(((**struc).value.str.val), ((**struc).value.str.len))", "zend_get_class_fetch_type(((**struc).value.str.val), ((**struc).value.str.len))", "zend_get_compiled_variable_value(((**struc).value.str.val), ((**struc).value.str.len))", "zend_get_hash_value(((**struc).value.str.val), ((**struc).value.str.len))", "zend_hash_func(((**struc).value.str.val), ((**struc).value.str.len))", "zend_html_puts(((**struc).value.str.val), ((**struc).value.str.len))", "zend_inline_hash_func(((**struc).value.str.val), ((**struc).value.str.len))", "zend_is_auto_global(((**struc).value.str.val), ((**struc).value.str.len))", "zend_objects_destroy_object(((**struc).value.str.val), ((**struc).value.str.len))", "zend_objects_store_init(((**struc).value.str.val), ((**struc).value.str.len))", "zend_str_tolower(((**struc).value.str.val), ((**struc).value.str.len))", "zend_str_tolower_dup(((**struc).value.str.val), ((**struc).value.str.len))", "zend_string_to_double(((**struc).value.str.val), ((**struc).value.str.len))", "zend_strndup(((**struc).value.str.val), ((**struc).value.str.len))", "zend_ts_hash_func(((**struc).value.str.val), ((**struc).value.str.len))", "zval_set_refcount_p(((**struc).value.str.val), ((**struc).value.str.len))", "php_body_write(((**(&class_name)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**(&class_name_len)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**(&is_temp)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**(&level)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**(&myht)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**(&php_element_dump_func)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**(&struc)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**(struc)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(&class_name)).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(&class_name_len)).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(&is_temp)).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(&level)).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(&myht)).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(&php_element_dump_func)).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(&struc)).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(struc)).value.str.len))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.75370140600134, -7.35808325550134, -6.6557950715013385, -7.70219526550134, -7.07741374550134, -7.07741374550134, -7.60225855550134, -7.6855622455013384, -7.54667374550134, -6.7554027155013383, -7.60225855550134, -7.60225855550134]
								}, {
									"case":	2,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	3,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	4,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	5,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	6,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	7,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	8,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	9,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	10,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	11,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	12,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	13,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	14,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	15,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	16,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	17,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	18,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	19,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	20,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	21,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	22,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	23,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	24,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	25,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	26,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	27,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	28,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	29,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	30,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	31,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	32,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	33,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	34,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	35,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	36,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	37,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	38,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	39,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	40,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	41,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	42,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	43,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	44,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	45,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	46,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	47,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	48,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	49,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	50,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	51,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	52,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	53,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	54,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	55,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	56,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	57,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	58,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	59,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	60,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	61,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	62,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	63,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	64,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	65,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	66,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	67,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	68,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	69,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	70,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	71,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	72,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	73,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	74,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	75,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	76,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	77,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	78,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	79,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	80,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	81,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	82,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	83,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	84,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	85,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	86,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	87,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	88,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	89,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	90,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	91,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	92,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	93,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	94,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	95,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	96,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	97,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	98,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	99,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	100,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	101,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	102,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	103,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	104,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	105,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	106,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	107,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	108,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	109,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	110,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	111,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	112,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	113,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	114,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	115,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	116,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	117,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	118,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	119,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	120,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	121,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	122,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	123,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	124,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	125,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	126,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	127,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	128,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	129,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	130,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	131,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	132,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	133,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	134,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	135,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	136,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	137,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	138,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	139,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	140,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	141,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	142,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	143,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	144,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	145,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	146,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	147,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	148,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	149,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	150,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	151,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	152,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	153,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	154,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	155,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	156,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	157,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	158,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	159,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	160,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	161,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	162,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	163,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	164,
									"scores":	[-7.2252670055013386]
								}]
						}]
				}, {
					"line":	115,
					"switches":	[{
							"switch":	23,
							"types":	[[], [], [], [], [305, 306], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], [], [], [], [283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282], [], [], [], [], [], []],
							"begin_line":	116,
							"begin_column":	1,
							"end_line":	116,
							"end_column":	1,
							"patch_codes":	["memset(&(((**struc))).is_ref__gc, 0, sizeof (*(&(((**struc))).is_ref__gc)))", "memset(&(((**struc))).refcount__gc, 0, sizeof (*(&(((**struc))).refcount__gc)))", "memset(&(((**struc))).type, 0, sizeof (*(&(((**struc))).type)))", "memset(&(((**struc))).value, 0, sizeof (*(&(((**struc))).value)))", "memset(&(((**struc))).value.dval, 0, sizeof (*(&(((**struc))).value.dval)))", "memset(&(((**struc))).value.ht, 0, sizeof (*(&(((**struc))).value.ht)))", "memset(&(((**struc))).value.lval, 0, sizeof (*(&(((**struc))).value.lval)))", "memset(&(((**struc))).value.obj, 0, sizeof (*(&(((**struc))).value.obj)))", "memset(&(((**struc))).value.obj.handle, 0, sizeof (*(&(((**struc))).value.obj.handle)))", "memset(&(((**struc))).value.obj.handlers, 0, sizeof (*(&(((**struc))).value.obj.handlers)))", "memset(&(((**struc))).value.obj.handlers->add_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->add_ref)))", "memset(&(((**struc))).value.obj.handlers->call_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->call_method)))", "memset(&(((**struc))).value.obj.handlers->cast_object, 0, sizeof (*(&(((**struc))).value.obj.handlers->cast_object)))", "memset(&(((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*(&(((**struc))).value.obj.handlers->clone_obj)))", "memset(&(((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*(&(((**struc))).value.obj.handlers->compare_objects)))", "memset(&(((**struc))).value.obj.handlers->count_elements, 0, sizeof (*(&(((**struc))).value.obj.handlers->count_elements)))", "memset(&(((**struc))).value.obj.handlers->del_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->del_ref)))", "memset(&(((**struc))).value.obj.handlers->get, 0, sizeof (*(&(((**struc))).value.obj.handlers->get)))", "memset(&(((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_entry)))", "memset(&(((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_name)))", "memset(&(((**struc))).value.obj.handlers->get_closure, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_closure)))", "memset(&(((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_constructor)))", "memset(&(((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_debug_info)))", "memset(&(((**struc))).value.obj.handlers->get_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_method)))", "memset(&(((**struc))).value.obj.handlers->get_properties, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_properties)))", "memset(&(((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_dimension)))", "memset(&(((**struc))).value.obj.handlers->has_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_property)))", "memset(&(((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_dimension)))", "memset(&(((**struc))).value.obj.handlers->read_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_property)))", "memset(&(((**struc))).value.obj.handlers->set, 0, sizeof (*(&(((**struc))).value.obj.handlers->set)))", "memset(&(((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_dimension)))", "memset(&(((**struc))).value.obj.handlers->unset_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_property)))", "memset(&(((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_dimension)))", "memset(&(((**struc))).value.obj.handlers->write_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_property)))", "memset(&(((**struc))).value.str, 0, sizeof (*(&(((**struc))).value.str)))", "memset(&((**struc)).is_ref__gc, 0, sizeof (*(&((**struc)).is_ref__gc)))", "memset(&((**struc)).refcount__gc, 0, sizeof (*(&((**struc)).refcount__gc)))", "memset(&((**struc)).type, 0, sizeof (*(&((**struc)).type)))", "memset(&((**struc)).value, 0, sizeof (*(&((**struc)).value)))", "memset(&((**struc)).value.dval, 0, sizeof (*(&((**struc)).value.dval)))", "memset(&((**struc)).value.ht, 0, sizeof (*(&((**struc)).value.ht)))", "memset(&((**struc)).value.lval, 0, sizeof (*(&((**struc)).value.lval)))", "memset(&((**struc)).value.obj, 0, sizeof (*(&((**struc)).value.obj)))", "memset(&((**struc)).value.obj.handle, 0, sizeof (*(&((**struc)).value.obj.handle)))", "memset(&((**struc)).value.obj.handlers, 0, sizeof (*(&((**struc)).value.obj.handlers)))", "memset(&((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->add_ref)))", "memset(&((**struc)).value.obj.handlers->call_method, 0, sizeof (*(&((**struc)).value.obj.handlers->call_method)))", "memset(&((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(&((**struc)).value.obj.handlers->cast_object)))", "memset(&((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(&((**struc)).value.obj.handlers->clone_obj)))", "memset(&((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(&((**struc)).value.obj.handlers->compare_objects)))", "memset(&((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(&((**struc)).value.obj.handlers->count_elements)))", "memset(&((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->del_ref)))", "memset(&((**struc)).value.obj.handlers->get, 0, sizeof (*(&((**struc)).value.obj.handlers->get)))", "memset(&((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_entry)))", "memset(&((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_name)))", "memset(&((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(&((**struc)).value.obj.handlers->get_closure)))", "memset(&((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(&((**struc)).value.obj.handlers->get_constructor)))", "memset(&((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(&((**struc)).value.obj.handlers->get_debug_info)))", "memset(&((**struc)).value.obj.handlers->get_method, 0, sizeof (*(&((**struc)).value.obj.handlers->get_method)))", "memset(&((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(&((**struc)).value.obj.handlers->get_properties)))", "memset(&((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(&((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->has_dimension)))", "memset(&((**struc)).value.obj.handlers->has_property, 0, sizeof (*(&((**struc)).value.obj.handlers->has_property)))", "memset(&((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->read_dimension)))", "memset(&((**struc)).value.obj.handlers->read_property, 0, sizeof (*(&((**struc)).value.obj.handlers->read_property)))", "memset(&((**struc)).value.obj.handlers->set, 0, sizeof (*(&((**struc)).value.obj.handlers->set)))", "memset(&((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_dimension)))", "memset(&((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_property)))", "memset(&((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->write_dimension)))", "memset(&((**struc)).value.obj.handlers->write_property, 0, sizeof (*(&((**struc)).value.obj.handlers->write_property)))", "memset(&((**struc)).value.str, 0, sizeof (*(&((**struc)).value.str)))", "memset(&(**struc).is_ref__gc, 0, sizeof (*(&(**struc).is_ref__gc)))", "memset(&(**struc).refcount__gc, 0, sizeof (*(&(**struc).refcount__gc)))", "memset(&(**struc).type, 0, sizeof (*(&(**struc).type)))", "memset(&(**struc).value, 0, sizeof (*(&(**struc).value)))", "memset(&(**struc).value.dval, 0, sizeof (*(&(**struc).value.dval)))", "memset(&(**struc).value.ht, 0, sizeof (*(&(**struc).value.ht)))", "memset(&(**struc).value.lval, 0, sizeof (*(&(**struc).value.lval)))", "memset(&(**struc).value.obj, 0, sizeof (*(&(**struc).value.obj)))", "memset(&(**struc).value.obj.handle, 0, sizeof (*(&(**struc).value.obj.handle)))", "memset(&(**struc).value.obj.handlers, 0, sizeof (*(&(**struc).value.obj.handlers)))", "memset(&(**struc).value.str, 0, sizeof (*(&(**struc).value.str)))", "memset(&(**struc).value.str.len, 0, sizeof (*(&(**struc).value.str.len)))", "memset(&(**struc).value.str.val, 0, sizeof (*(&(**struc).value.str.val)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((((**struc))).value.ht, 0, sizeof (*((((**struc))).value.ht)))", "memset((((**struc))).value.obj.handlers, 0, sizeof (*((((**struc))).value.obj.handlers)))", "memset((((**struc))).value.obj.handlers->add_ref, 0, sizeof (*((((**struc))).value.obj.handlers->add_ref)))", "memset((((**struc))).value.obj.handlers->call_method, 0, sizeof (*((((**struc))).value.obj.handlers->call_method)))", "memset((((**struc))).value.obj.handlers->cast_object, 0, sizeof (*((((**struc))).value.obj.handlers->cast_object)))", "memset((((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*((((**struc))).value.obj.handlers->clone_obj)))", "memset((((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*((((**struc))).value.obj.handlers->compare_objects)))", "memset((((**struc))).value.obj.handlers->count_elements, 0, sizeof (*((((**struc))).value.obj.handlers->count_elements)))", "memset((((**struc))).value.obj.handlers->del_ref, 0, sizeof (*((((**struc))).value.obj.handlers->del_ref)))", "memset((((**struc))).value.obj.handlers->get, 0, sizeof (*((((**struc))).value.obj.handlers->get)))", "memset((((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_entry)))", "memset((((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_name)))", "memset((((**struc))).value.obj.handlers->get_closure, 0, sizeof (*((((**struc))).value.obj.handlers->get_closure)))", "memset((((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*((((**struc))).value.obj.handlers->get_constructor)))", "memset((((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*((((**struc))).value.obj.handlers->get_debug_info)))", "memset((((**struc))).value.obj.handlers->get_method, 0, sizeof (*((((**struc))).value.obj.handlers->get_method)))", "memset((((**struc))).value.obj.handlers->get_properties, 0, sizeof (*((((**struc))).value.obj.handlers->get_properties)))", "memset((((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset((((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->has_dimension)))", "memset((((**struc))).value.obj.handlers->has_property, 0, sizeof (*((((**struc))).value.obj.handlers->has_property)))", "memset((((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->read_dimension)))", "memset((((**struc))).value.obj.handlers->read_property, 0, sizeof (*((((**struc))).value.obj.handlers->read_property)))", "memset((((**struc))).value.obj.handlers->set, 0, sizeof (*((((**struc))).value.obj.handlers->set)))", "memset((((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->unset_dimension)))", "memset((((**struc))).value.obj.handlers->unset_property, 0, sizeof (*((((**struc))).value.obj.handlers->unset_property)))", "memset((((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->write_dimension)))", "memset((((**struc))).value.obj.handlers->write_property, 0, sizeof (*((((**struc))).value.obj.handlers->write_property)))", "memset(((**struc)).value.ht, 0, sizeof (*(((**struc)).value.ht)))", "memset(((**struc)).value.obj.handlers, 0, sizeof (*(((**struc)).value.obj.handlers)))", "memset(((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(((**struc)).value.obj.handlers->add_ref)))", "memset(((**struc)).value.obj.handlers->call_method, 0, sizeof (*(((**struc)).value.obj.handlers->call_method)))", "memset(((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(((**struc)).value.obj.handlers->cast_object)))", "memset(((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(((**struc)).value.obj.handlers->clone_obj)))", "memset(((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(((**struc)).value.obj.handlers->compare_objects)))", "memset(((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(((**struc)).value.obj.handlers->count_elements)))", "memset(((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(((**struc)).value.obj.handlers->del_ref)))", "memset(((**struc)).value.obj.handlers->get, 0, sizeof (*(((**struc)).value.obj.handlers->get)))", "memset(((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_entry)))", "memset(((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_name)))", "memset(((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(((**struc)).value.obj.handlers->get_closure)))", "memset(((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(((**struc)).value.obj.handlers->get_constructor)))", "memset(((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(((**struc)).value.obj.handlers->get_debug_info)))", "memset(((**struc)).value.obj.handlers->get_method, 0, sizeof (*(((**struc)).value.obj.handlers->get_method)))", "memset(((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(((**struc)).value.obj.handlers->get_properties)))", "memset(((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->has_dimension)))", "memset(((**struc)).value.obj.handlers->has_property, 0, sizeof (*(((**struc)).value.obj.handlers->has_property)))", "memset(((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->read_dimension)))", "memset(((**struc)).value.obj.handlers->read_property, 0, sizeof (*(((**struc)).value.obj.handlers->read_property)))", "memset(((**struc)).value.obj.handlers->set, 0, sizeof (*(((**struc)).value.obj.handlers->set)))", "memset(((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->unset_dimension)))", "memset(((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(((**struc)).value.obj.handlers->unset_property)))", "memset(((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->write_dimension)))", "memset(((**struc)).value.obj.handlers->write_property, 0, sizeof (*(((**struc)).value.obj.handlers->write_property)))", "memset((**struc).value.ht, 0, sizeof (*((**struc).value.ht)))", "memset((**struc).value.obj.handlers, 0, sizeof (*((**struc).value.obj.handlers)))", "memset((**struc).value.str.val, 0, sizeof (*((**struc).value.str.val)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw, 0, sizeof (*(executor_globals.saved_fpu_cw)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "((**(struc))).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*(struc), &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*struc, &(class_name), &class_name_len, 0)", "(**(struc)).value.ht->nApplyCount++", "(**(struc)).value.ht->nApplyCount--", "(class_name)++", "--(myht)->nApplyCount", "_efree(((class_name)))", "_efree(((myht)))", "is_temp = (0)", "is_temp = (1)", "is_temp = (2)", "is_temp = (3)", "is_temp = (4)", "is_temp = (5)", "is_temp = (6)", "is_temp = (7)", "is_temp = (is_temp)", "is_temp = (level)", "php_body_write(((**(struc)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(struc)).value.str.len))", "php_element_dump_func = (php_element_dump_func)", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted long input array (%s) overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted super-global (%s) variable overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(struc)).value.str.val)", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((myht)))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), (class_name), (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**(struc)).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, (myht) ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements((myht)) : 0)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((struc))))", "php_printf(\"\\\"%s\\\"\", (class_name))", "php_printf(\"\\\"%s\\\":protected\", (class_name))", "zend_hash_apply_with_arguments((myht), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy((myht))", "((**struc)).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "--myht->nApplyCount", "_efree((class_name))", "_efree((myht))", "exit(1)", "is_temp = 0", "php_body_write(((**struc).value.str.val), ((**struc).value.str.len))", "php_element_dump_func = php_array_element_dump", "php_element_dump_func = php_object_property_dump", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c\", level - 1, ' ')", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy(myht)", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L116\", 12, &(struc), sizeof (struc), &((**struc).value.str.val), sizeof ((**struc).value.str.val), &((**struc).value.str.len), sizeof ((**struc).value.str.len), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &((**struc).type), sizeof ((**struc).type), &(level), sizeof (level), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &((**struc).refcount__gc), sizeof ((**struc).refcount__gc), &((**struc).is_ref__gc), sizeof ((**struc).is_ref__gc)))\n    goto head_done;\n", "if (__is_neg(\"\", \"L116\", 12, &(struc), sizeof (struc), &((**struc).value.str.val), sizeof ((**struc).value.str.val), &((**struc).value.str.len), sizeof ((**struc).value.str.len), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &((**struc).type), sizeof ((**struc).type), &(level), sizeof (level), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &((**struc).refcount__gc), sizeof ((**struc).refcount__gc), &((**struc).is_ref__gc), sizeof ((**struc).is_ref__gc)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.20506429818382]
								}, {
									"case":	2,
									"scores":	[-7.20506429818382]
								}, {
									"case":	3,
									"scores":	[-7.20506429818382]
								}, {
									"case":	4,
									"scores":	[-7.20506429818382]
								}, {
									"case":	5,
									"scores":	[-7.20506429818382]
								}, {
									"case":	6,
									"scores":	[-7.20506429818382]
								}, {
									"case":	7,
									"scores":	[-7.20506429818382]
								}, {
									"case":	8,
									"scores":	[-7.20506429818382]
								}, {
									"case":	9,
									"scores":	[-7.20506429818382]
								}, {
									"case":	10,
									"scores":	[-7.20506429818382]
								}, {
									"case":	11,
									"scores":	[-7.20506429818382]
								}, {
									"case":	12,
									"scores":	[-7.20506429818382]
								}, {
									"case":	13,
									"scores":	[-7.20506429818382]
								}, {
									"case":	14,
									"scores":	[-7.20506429818382]
								}, {
									"case":	15,
									"scores":	[-7.20506429818382]
								}, {
									"case":	16,
									"scores":	[-7.20506429818382]
								}, {
									"case":	17,
									"scores":	[-7.20506429818382]
								}, {
									"case":	18,
									"scores":	[-7.20506429818382]
								}, {
									"case":	19,
									"scores":	[-7.20506429818382]
								}, {
									"case":	20,
									"scores":	[-7.20506429818382]
								}, {
									"case":	21,
									"scores":	[-7.20506429818382]
								}, {
									"case":	22,
									"scores":	[-7.20506429818382]
								}, {
									"case":	23,
									"scores":	[-7.20506429818382]
								}, {
									"case":	24,
									"scores":	[-7.20506429818382]
								}, {
									"case":	25,
									"scores":	[-7.20506429818382]
								}, {
									"case":	26,
									"scores":	[-7.20506429818382]
								}, {
									"case":	27,
									"scores":	[-7.20506429818382]
								}, {
									"case":	28,
									"scores":	[-7.20506429818382]
								}, {
									"case":	29,
									"scores":	[-7.20506429818382]
								}, {
									"case":	30,
									"scores":	[-7.20506429818382]
								}, {
									"case":	31,
									"scores":	[-7.20506429818382]
								}, {
									"case":	32,
									"scores":	[-7.20506429818382]
								}, {
									"case":	33,
									"scores":	[-7.20506429818382]
								}, {
									"case":	34,
									"scores":	[-7.20506429818382]
								}, {
									"case":	35,
									"scores":	[-7.20506429818382]
								}, {
									"case":	36,
									"scores":	[-7.20506429818382]
								}, {
									"case":	37,
									"scores":	[-7.20506429818382]
								}, {
									"case":	38,
									"scores":	[-7.20506429818382]
								}, {
									"case":	39,
									"scores":	[-7.20506429818382]
								}, {
									"case":	40,
									"scores":	[-7.20506429818382]
								}, {
									"case":	41,
									"scores":	[-7.20506429818382]
								}, {
									"case":	42,
									"scores":	[-7.20506429818382]
								}, {
									"case":	43,
									"scores":	[-7.20506429818382]
								}, {
									"case":	44,
									"scores":	[-7.20506429818382]
								}, {
									"case":	45,
									"scores":	[-7.20506429818382]
								}, {
									"case":	46,
									"scores":	[-7.20506429818382]
								}, {
									"case":	47,
									"scores":	[-7.20506429818382]
								}, {
									"case":	48,
									"scores":	[-7.20506429818382]
								}, {
									"case":	49,
									"scores":	[-7.20506429818382]
								}, {
									"case":	50,
									"scores":	[-7.20506429818382]
								}, {
									"case":	51,
									"scores":	[-7.20506429818382]
								}, {
									"case":	52,
									"scores":	[-7.20506429818382]
								}, {
									"case":	53,
									"scores":	[-7.20506429818382]
								}, {
									"case":	54,
									"scores":	[-7.20506429818382]
								}, {
									"case":	55,
									"scores":	[-7.20506429818382]
								}, {
									"case":	56,
									"scores":	[-7.20506429818382]
								}, {
									"case":	57,
									"scores":	[-7.20506429818382]
								}, {
									"case":	58,
									"scores":	[-7.20506429818382]
								}, {
									"case":	59,
									"scores":	[-7.20506429818382]
								}, {
									"case":	60,
									"scores":	[-7.20506429818382]
								}, {
									"case":	61,
									"scores":	[-7.20506429818382]
								}, {
									"case":	62,
									"scores":	[-7.20506429818382]
								}, {
									"case":	63,
									"scores":	[-7.20506429818382]
								}, {
									"case":	64,
									"scores":	[-7.20506429818382]
								}, {
									"case":	65,
									"scores":	[-7.20506429818382]
								}, {
									"case":	66,
									"scores":	[-7.20506429818382]
								}, {
									"case":	67,
									"scores":	[-7.20506429818382]
								}, {
									"case":	68,
									"scores":	[-7.20506429818382]
								}, {
									"case":	69,
									"scores":	[-7.20506429818382]
								}, {
									"case":	70,
									"scores":	[-7.20506429818382]
								}, {
									"case":	71,
									"scores":	[-7.20506429818382]
								}, {
									"case":	72,
									"scores":	[-7.20506429818382]
								}, {
									"case":	73,
									"scores":	[-7.20506429818382]
								}, {
									"case":	74,
									"scores":	[-7.20506429818382]
								}, {
									"case":	75,
									"scores":	[-7.20506429818382]
								}, {
									"case":	76,
									"scores":	[-7.20506429818382]
								}, {
									"case":	77,
									"scores":	[-7.20506429818382]
								}, {
									"case":	78,
									"scores":	[-7.20506429818382]
								}, {
									"case":	79,
									"scores":	[-7.20506429818382]
								}, {
									"case":	80,
									"scores":	[-7.20506429818382]
								}, {
									"case":	81,
									"scores":	[-7.20506429818382]
								}, {
									"case":	82,
									"scores":	[-7.20506429818382]
								}, {
									"case":	83,
									"scores":	[-7.20506429818382]
								}, {
									"case":	84,
									"scores":	[-7.20506429818382]
								}, {
									"case":	85,
									"scores":	[-7.20506429818382]
								}, {
									"case":	86,
									"scores":	[-7.20506429818382]
								}, {
									"case":	87,
									"scores":	[-7.20506429818382]
								}, {
									"case":	88,
									"scores":	[-7.20506429818382]
								}, {
									"case":	89,
									"scores":	[-7.20506429818382]
								}, {
									"case":	90,
									"scores":	[-7.20506429818382]
								}, {
									"case":	91,
									"scores":	[-7.20506429818382]
								}, {
									"case":	92,
									"scores":	[-7.20506429818382]
								}, {
									"case":	93,
									"scores":	[-7.20506429818382]
								}, {
									"case":	94,
									"scores":	[-7.20506429818382]
								}, {
									"case":	95,
									"scores":	[-7.20506429818382]
								}, {
									"case":	96,
									"scores":	[-7.20506429818382]
								}, {
									"case":	97,
									"scores":	[-7.20506429818382]
								}, {
									"case":	98,
									"scores":	[-7.20506429818382]
								}, {
									"case":	99,
									"scores":	[-7.20506429818382]
								}, {
									"case":	100,
									"scores":	[-7.20506429818382]
								}, {
									"case":	101,
									"scores":	[-7.20506429818382]
								}, {
									"case":	102,
									"scores":	[-7.20506429818382]
								}, {
									"case":	103,
									"scores":	[-7.20506429818382]
								}, {
									"case":	104,
									"scores":	[-7.20506429818382]
								}, {
									"case":	105,
									"scores":	[-7.20506429818382]
								}, {
									"case":	106,
									"scores":	[-7.20506429818382]
								}, {
									"case":	107,
									"scores":	[-7.20506429818382]
								}, {
									"case":	108,
									"scores":	[-7.20506429818382]
								}, {
									"case":	109,
									"scores":	[-7.20506429818382]
								}, {
									"case":	110,
									"scores":	[-7.20506429818382]
								}, {
									"case":	111,
									"scores":	[-7.20506429818382]
								}, {
									"case":	112,
									"scores":	[-7.20506429818382]
								}, {
									"case":	113,
									"scores":	[-7.20506429818382]
								}, {
									"case":	114,
									"scores":	[-7.20506429818382]
								}, {
									"case":	115,
									"scores":	[-7.20506429818382]
								}, {
									"case":	116,
									"scores":	[-7.20506429818382]
								}, {
									"case":	117,
									"scores":	[-7.20506429818382]
								}, {
									"case":	118,
									"scores":	[-7.20506429818382]
								}, {
									"case":	119,
									"scores":	[-7.20506429818382]
								}, {
									"case":	120,
									"scores":	[-7.20506429818382]
								}, {
									"case":	121,
									"scores":	[-7.20506429818382]
								}, {
									"case":	122,
									"scores":	[-7.20506429818382]
								}, {
									"case":	123,
									"scores":	[-7.20506429818382]
								}, {
									"case":	124,
									"scores":	[-7.20506429818382]
								}, {
									"case":	125,
									"scores":	[-7.20506429818382]
								}, {
									"case":	126,
									"scores":	[-7.20506429818382]
								}, {
									"case":	127,
									"scores":	[-7.20506429818382]
								}, {
									"case":	128,
									"scores":	[-7.20506429818382]
								}, {
									"case":	129,
									"scores":	[-7.20506429818382]
								}, {
									"case":	130,
									"scores":	[-7.20506429818382]
								}, {
									"case":	131,
									"scores":	[-7.20506429818382]
								}, {
									"case":	132,
									"scores":	[-7.20506429818382]
								}, {
									"case":	133,
									"scores":	[-7.20506429818382]
								}, {
									"case":	134,
									"scores":	[-7.20506429818382]
								}, {
									"case":	135,
									"scores":	[-7.20506429818382]
								}, {
									"case":	136,
									"scores":	[-7.20506429818382]
								}, {
									"case":	137,
									"scores":	[-7.20506429818382]
								}, {
									"case":	138,
									"scores":	[-7.20506429818382]
								}, {
									"case":	139,
									"scores":	[-7.20506429818382]
								}, {
									"case":	140,
									"scores":	[-7.20506429818382]
								}, {
									"case":	141,
									"scores":	[-7.20506429818382]
								}, {
									"case":	142,
									"scores":	[-7.20506429818382]
								}, {
									"case":	143,
									"scores":	[-7.20506429818382]
								}, {
									"case":	144,
									"scores":	[-7.20506429818382]
								}, {
									"case":	145,
									"scores":	[-7.20506429818382]
								}, {
									"case":	146,
									"scores":	[-7.20506429818382]
								}, {
									"case":	147,
									"scores":	[-7.20506429818382]
								}, {
									"case":	148,
									"scores":	[-7.20506429818382]
								}, {
									"case":	149,
									"scores":	[-7.20506429818382]
								}, {
									"case":	150,
									"scores":	[-7.20506429818382]
								}, {
									"case":	151,
									"scores":	[-7.20506429818382]
								}, {
									"case":	152,
									"scores":	[-7.20506429818382]
								}, {
									"case":	153,
									"scores":	[-7.20506429818382]
								}, {
									"case":	154,
									"scores":	[-7.20506429818382]
								}, {
									"case":	155,
									"scores":	[-7.20506429818382]
								}, {
									"case":	156,
									"scores":	[-7.20506429818382]
								}, {
									"case":	157,
									"scores":	[-7.20506429818382]
								}, {
									"case":	158,
									"scores":	[-7.20506429818382]
								}, {
									"case":	159,
									"scores":	[-7.20506429818382]
								}, {
									"case":	160,
									"scores":	[-7.20506429818382]
								}, {
									"case":	161,
									"scores":	[-7.20506429818382]
								}, {
									"case":	162,
									"scores":	[-7.20506429818382]
								}, {
									"case":	163,
									"scores":	[-7.20506429818382]
								}, {
									"case":	164,
									"scores":	[-7.20506429818382]
								}, {
									"case":	165,
									"scores":	[-7.20506429818382]
								}, {
									"case":	166,
									"scores":	[-7.20506429818382]
								}, {
									"case":	167,
									"scores":	[-7.20506429818382]
								}, {
									"case":	168,
									"scores":	[-7.20506429818382]
								}, {
									"case":	169,
									"scores":	[-7.20506429818382]
								}, {
									"case":	170,
									"scores":	[-7.20506429818382]
								}, {
									"case":	171,
									"scores":	[-7.20506429818382]
								}, {
									"case":	172,
									"scores":	[-7.20506429818382]
								}, {
									"case":	173,
									"scores":	[-7.20506429818382]
								}, {
									"case":	174,
									"scores":	[-7.20506429818382]
								}, {
									"case":	175,
									"scores":	[-7.20506429818382]
								}, {
									"case":	176,
									"scores":	[-7.20506429818382]
								}, {
									"case":	177,
									"scores":	[-7.20506429818382]
								}, {
									"case":	178,
									"scores":	[-7.20506429818382]
								}, {
									"case":	179,
									"scores":	[-7.20506429818382]
								}, {
									"case":	180,
									"scores":	[-7.20506429818382]
								}, {
									"case":	181,
									"scores":	[-7.20506429818382]
								}, {
									"case":	182,
									"scores":	[-7.20506429818382]
								}, {
									"case":	183,
									"scores":	[-7.20506429818382]
								}, {
									"case":	184,
									"scores":	[-7.20506429818382]
								}, {
									"case":	185,
									"scores":	[-7.20506429818382]
								}, {
									"case":	186,
									"scores":	[-7.20506429818382]
								}, {
									"case":	187,
									"scores":	[-7.20506429818382]
								}, {
									"case":	188,
									"scores":	[-7.20506429818382]
								}, {
									"case":	189,
									"scores":	[-7.20506429818382]
								}, {
									"case":	190,
									"scores":	[-7.20506429818382]
								}, {
									"case":	191,
									"scores":	[-7.20506429818382]
								}, {
									"case":	192,
									"scores":	[-7.20506429818382]
								}, {
									"case":	193,
									"scores":	[-7.20506429818382]
								}, {
									"case":	194,
									"scores":	[-7.20506429818382]
								}, {
									"case":	195,
									"scores":	[-7.20506429818382]
								}, {
									"case":	196,
									"scores":	[-7.20506429818382]
								}, {
									"case":	197,
									"scores":	[-7.20506429818382]
								}, {
									"case":	198,
									"scores":	[-7.20506429818382]
								}, {
									"case":	199,
									"scores":	[-7.20506429818382]
								}, {
									"case":	200,
									"scores":	[-7.20506429818382]
								}, {
									"case":	201,
									"scores":	[-7.20506429818382]
								}, {
									"case":	202,
									"scores":	[-7.20506429818382]
								}, {
									"case":	203,
									"scores":	[-7.20506429818382]
								}, {
									"case":	204,
									"scores":	[-7.20506429818382]
								}, {
									"case":	205,
									"scores":	[-7.20506429818382]
								}, {
									"case":	206,
									"scores":	[-7.20506429818382]
								}, {
									"case":	207,
									"scores":	[-7.20506429818382]
								}, {
									"case":	208,
									"scores":	[-7.20506429818382]
								}, {
									"case":	209,
									"scores":	[-7.20506429818382]
								}, {
									"case":	210,
									"scores":	[-7.20506429818382]
								}, {
									"case":	211,
									"scores":	[-7.20506429818382]
								}, {
									"case":	212,
									"scores":	[-7.20506429818382]
								}, {
									"case":	213,
									"scores":	[-7.20506429818382]
								}, {
									"case":	214,
									"scores":	[-7.20506429818382]
								}, {
									"case":	215,
									"scores":	[-7.20506429818382]
								}, {
									"case":	216,
									"scores":	[-7.20506429818382]
								}, {
									"case":	217,
									"scores":	[-7.20506429818382]
								}, {
									"case":	218,
									"scores":	[-7.20506429818382]
								}, {
									"case":	219,
									"scores":	[-7.20506429818382]
								}, {
									"case":	220,
									"scores":	[-7.20506429818382]
								}, {
									"case":	221,
									"scores":	[-7.20506429818382]
								}, {
									"case":	222,
									"scores":	[-7.20506429818382]
								}, {
									"case":	223,
									"scores":	[-7.20506429818382]
								}, {
									"case":	224,
									"scores":	[-7.20506429818382]
								}, {
									"case":	225,
									"scores":	[-7.20506429818382]
								}, {
									"case":	226,
									"scores":	[-7.20506429818382]
								}, {
									"case":	227,
									"scores":	[-7.20506429818382]
								}, {
									"case":	228,
									"scores":	[-7.20506429818382]
								}, {
									"case":	229,
									"scores":	[-7.20506429818382]
								}, {
									"case":	230,
									"scores":	[-7.20506429818382]
								}, {
									"case":	231,
									"scores":	[-7.20506429818382]
								}, {
									"case":	232,
									"scores":	[-7.20506429818382]
								}, {
									"case":	233,
									"scores":	[-7.20506429818382]
								}, {
									"case":	234,
									"scores":	[-7.20506429818382]
								}, {
									"case":	235,
									"scores":	[-7.20506429818382]
								}, {
									"case":	236,
									"scores":	[-7.20506429818382]
								}, {
									"case":	237,
									"scores":	[-7.20506429818382]
								}, {
									"case":	238,
									"scores":	[-7.20506429818382]
								}, {
									"case":	239,
									"scores":	[-7.20506429818382]
								}, {
									"case":	240,
									"scores":	[-7.20506429818382]
								}, {
									"case":	241,
									"scores":	[-7.20506429818382]
								}, {
									"case":	242,
									"scores":	[-7.20506429818382]
								}, {
									"case":	243,
									"scores":	[-7.20506429818382]
								}, {
									"case":	244,
									"scores":	[-7.20506429818382]
								}, {
									"case":	245,
									"scores":	[-7.20506429818382]
								}, {
									"case":	246,
									"scores":	[-7.20506429818382]
								}, {
									"case":	247,
									"scores":	[-7.20506429818382]
								}, {
									"case":	248,
									"scores":	[-7.20506429818382]
								}, {
									"case":	249,
									"scores":	[-7.20506429818382]
								}, {
									"case":	250,
									"scores":	[-7.20506429818382]
								}, {
									"case":	251,
									"scores":	[-7.20506429818382]
								}, {
									"case":	252,
									"scores":	[-7.20506429818382]
								}, {
									"case":	253,
									"scores":	[-7.20506429818382]
								}, {
									"case":	254,
									"scores":	[-7.20506429818382]
								}, {
									"case":	255,
									"scores":	[-7.20506429818382]
								}, {
									"case":	256,
									"scores":	[-7.20506429818382]
								}, {
									"case":	257,
									"scores":	[-7.20506429818382]
								}, {
									"case":	258,
									"scores":	[-7.20506429818382]
								}, {
									"case":	259,
									"scores":	[-7.20506429818382]
								}, {
									"case":	260,
									"scores":	[-7.20506429818382]
								}, {
									"case":	261,
									"scores":	[-7.20506429818382]
								}, {
									"case":	262,
									"scores":	[-7.20506429818382]
								}, {
									"case":	263,
									"scores":	[-7.20506429818382]
								}, {
									"case":	264,
									"scores":	[-7.20506429818382]
								}, {
									"case":	265,
									"scores":	[-7.20506429818382]
								}, {
									"case":	266,
									"scores":	[-7.20506429818382]
								}, {
									"case":	267,
									"scores":	[-7.20506429818382]
								}, {
									"case":	268,
									"scores":	[-7.20506429818382]
								}, {
									"case":	269,
									"scores":	[-7.20506429818382]
								}, {
									"case":	270,
									"scores":	[-7.20506429818382]
								}, {
									"case":	271,
									"scores":	[-7.20506429818382]
								}, {
									"case":	272,
									"scores":	[-7.20506429818382]
								}, {
									"case":	273,
									"scores":	[-7.20506429818382]
								}, {
									"case":	274,
									"scores":	[-7.20506429818382]
								}, {
									"case":	275,
									"scores":	[-7.20506429818382]
								}, {
									"case":	276,
									"scores":	[-7.20506429818382]
								}, {
									"case":	277,
									"scores":	[-7.20506429818382]
								}, {
									"case":	278,
									"scores":	[-7.20506429818382]
								}, {
									"case":	279,
									"scores":	[-7.20506429818382]
								}, {
									"case":	280,
									"scores":	[-7.20506429818382]
								}, {
									"case":	281,
									"scores":	[-7.20506429818382]
								}, {
									"case":	282,
									"scores":	[-7.20506429818382]
								}, {
									"case":	283,
									"scores":	[-7.20506429818382]
								}, {
									"case":	284,
									"scores":	[-7.20506429818382]
								}, {
									"case":	285,
									"scores":	[-7.20506429818382]
								}, {
									"case":	286,
									"scores":	[-7.20506429818382]
								}, {
									"case":	287,
									"scores":	[-7.20506429818382]
								}, {
									"case":	288,
									"scores":	[-7.20506429818382]
								}, {
									"case":	289,
									"scores":	[-7.20506429818382]
								}, {
									"case":	290,
									"scores":	[-7.20506429818382]
								}, {
									"case":	291,
									"scores":	[-7.20506429818382]
								}, {
									"case":	292,
									"scores":	[-7.20506429818382]
								}, {
									"case":	293,
									"scores":	[-7.20506429818382]
								}, {
									"case":	294,
									"scores":	[-7.20506429818382]
								}, {
									"case":	295,
									"scores":	[-7.20506429818382]
								}, {
									"case":	296,
									"scores":	[-7.20506429818382]
								}, {
									"case":	297,
									"scores":	[-7.20506429818382]
								}, {
									"case":	298,
									"scores":	[-7.20506429818382]
								}, {
									"case":	299,
									"scores":	[-7.20506429818382]
								}, {
									"case":	300,
									"scores":	[-7.20506429818382]
								}, {
									"case":	301,
									"scores":	[-7.20506429818382]
								}, {
									"case":	302,
									"scores":	[-7.20506429818382]
								}, {
									"case":	303,
									"scores":	[-7.20506429818382]
								}, {
									"case":	304,
									"scores":	[-7.20506429818382]
								}, {
									"case":	305,
									"scores":	[-11.006842582583818, -11.156213796583819, -10.444389679583818, -11.192208116283819, -10.111064425583818, -10.111064425583818, -10.925210599583819, -10.405749999583819, -10.321953542583818, -9.61012942558382, -10.925210599583819, -10.925210599583819]
								}, {
									"case":	306,
									"scores":	[-11.00784258258382, -11.157213796583818, -10.445389679583819, -11.193208116283818, -10.112064425583819, -10.112064425583819, -10.926210599583818, -10.40674999958382, -10.322953542583818, -9.61112942558382, -10.926210599583818, -10.926210599583818]
								}]
						}, {
							"switch":	24,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	116,
							"begin_column":	3,
							"end_line":	116,
							"end_column":	14,
							"patch_codes":	["if (!__is_neg(\"\", \"L116\", 12, &(struc), sizeof (struc), &((**struc).value.str.val), sizeof ((**struc).value.str.val), &((**struc).value.str.len), sizeof ((**struc).value.str.len), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &((**struc).type), sizeof ((**struc).type), &(level), sizeof (level), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &((**struc).refcount__gc), sizeof ((**struc).refcount__gc), &((**struc).is_ref__gc), sizeof ((**struc).is_ref__gc)))\n    do {\n        const char *__str = (\"\\\"\\n\");\n        php_body_write(__str, strlen(__str));\n    } while (0);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.93890568868382, -8.53121668418382, -7.73994565418382, -8.60973228608382, -7.44812902818382, -7.44812902818382, -7.97297383818382, -8.05627752818382, -7.91738902818382, -7.12611799818382, -7.97297383818382, -7.97297383818382]
								}]
						}]
				}, {
					"line":	116,
					"switches":	[{
							"switch":	25,
							"types":	[[], [], [], [], [305, 306], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], [], [], [], [283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282], [], [], [], [], [], []],
							"begin_line":	117,
							"begin_column":	1,
							"end_line":	117,
							"end_column":	1,
							"patch_codes":	["memset(&(((**struc))).is_ref__gc, 0, sizeof (*(&(((**struc))).is_ref__gc)))", "memset(&(((**struc))).refcount__gc, 0, sizeof (*(&(((**struc))).refcount__gc)))", "memset(&(((**struc))).type, 0, sizeof (*(&(((**struc))).type)))", "memset(&(((**struc))).value, 0, sizeof (*(&(((**struc))).value)))", "memset(&(((**struc))).value.dval, 0, sizeof (*(&(((**struc))).value.dval)))", "memset(&(((**struc))).value.ht, 0, sizeof (*(&(((**struc))).value.ht)))", "memset(&(((**struc))).value.lval, 0, sizeof (*(&(((**struc))).value.lval)))", "memset(&(((**struc))).value.obj, 0, sizeof (*(&(((**struc))).value.obj)))", "memset(&(((**struc))).value.obj.handle, 0, sizeof (*(&(((**struc))).value.obj.handle)))", "memset(&(((**struc))).value.obj.handlers, 0, sizeof (*(&(((**struc))).value.obj.handlers)))", "memset(&(((**struc))).value.obj.handlers->add_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->add_ref)))", "memset(&(((**struc))).value.obj.handlers->call_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->call_method)))", "memset(&(((**struc))).value.obj.handlers->cast_object, 0, sizeof (*(&(((**struc))).value.obj.handlers->cast_object)))", "memset(&(((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*(&(((**struc))).value.obj.handlers->clone_obj)))", "memset(&(((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*(&(((**struc))).value.obj.handlers->compare_objects)))", "memset(&(((**struc))).value.obj.handlers->count_elements, 0, sizeof (*(&(((**struc))).value.obj.handlers->count_elements)))", "memset(&(((**struc))).value.obj.handlers->del_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->del_ref)))", "memset(&(((**struc))).value.obj.handlers->get, 0, sizeof (*(&(((**struc))).value.obj.handlers->get)))", "memset(&(((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_entry)))", "memset(&(((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_name)))", "memset(&(((**struc))).value.obj.handlers->get_closure, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_closure)))", "memset(&(((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_constructor)))", "memset(&(((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_debug_info)))", "memset(&(((**struc))).value.obj.handlers->get_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_method)))", "memset(&(((**struc))).value.obj.handlers->get_properties, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_properties)))", "memset(&(((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_dimension)))", "memset(&(((**struc))).value.obj.handlers->has_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_property)))", "memset(&(((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_dimension)))", "memset(&(((**struc))).value.obj.handlers->read_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_property)))", "memset(&(((**struc))).value.obj.handlers->set, 0, sizeof (*(&(((**struc))).value.obj.handlers->set)))", "memset(&(((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_dimension)))", "memset(&(((**struc))).value.obj.handlers->unset_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_property)))", "memset(&(((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_dimension)))", "memset(&(((**struc))).value.obj.handlers->write_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_property)))", "memset(&(((**struc))).value.str, 0, sizeof (*(&(((**struc))).value.str)))", "memset(&((**struc)).is_ref__gc, 0, sizeof (*(&((**struc)).is_ref__gc)))", "memset(&((**struc)).refcount__gc, 0, sizeof (*(&((**struc)).refcount__gc)))", "memset(&((**struc)).type, 0, sizeof (*(&((**struc)).type)))", "memset(&((**struc)).value, 0, sizeof (*(&((**struc)).value)))", "memset(&((**struc)).value.dval, 0, sizeof (*(&((**struc)).value.dval)))", "memset(&((**struc)).value.ht, 0, sizeof (*(&((**struc)).value.ht)))", "memset(&((**struc)).value.lval, 0, sizeof (*(&((**struc)).value.lval)))", "memset(&((**struc)).value.obj, 0, sizeof (*(&((**struc)).value.obj)))", "memset(&((**struc)).value.obj.handle, 0, sizeof (*(&((**struc)).value.obj.handle)))", "memset(&((**struc)).value.obj.handlers, 0, sizeof (*(&((**struc)).value.obj.handlers)))", "memset(&((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->add_ref)))", "memset(&((**struc)).value.obj.handlers->call_method, 0, sizeof (*(&((**struc)).value.obj.handlers->call_method)))", "memset(&((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(&((**struc)).value.obj.handlers->cast_object)))", "memset(&((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(&((**struc)).value.obj.handlers->clone_obj)))", "memset(&((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(&((**struc)).value.obj.handlers->compare_objects)))", "memset(&((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(&((**struc)).value.obj.handlers->count_elements)))", "memset(&((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->del_ref)))", "memset(&((**struc)).value.obj.handlers->get, 0, sizeof (*(&((**struc)).value.obj.handlers->get)))", "memset(&((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_entry)))", "memset(&((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_name)))", "memset(&((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(&((**struc)).value.obj.handlers->get_closure)))", "memset(&((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(&((**struc)).value.obj.handlers->get_constructor)))", "memset(&((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(&((**struc)).value.obj.handlers->get_debug_info)))", "memset(&((**struc)).value.obj.handlers->get_method, 0, sizeof (*(&((**struc)).value.obj.handlers->get_method)))", "memset(&((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(&((**struc)).value.obj.handlers->get_properties)))", "memset(&((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(&((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->has_dimension)))", "memset(&((**struc)).value.obj.handlers->has_property, 0, sizeof (*(&((**struc)).value.obj.handlers->has_property)))", "memset(&((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->read_dimension)))", "memset(&((**struc)).value.obj.handlers->read_property, 0, sizeof (*(&((**struc)).value.obj.handlers->read_property)))", "memset(&((**struc)).value.obj.handlers->set, 0, sizeof (*(&((**struc)).value.obj.handlers->set)))", "memset(&((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_dimension)))", "memset(&((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_property)))", "memset(&((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->write_dimension)))", "memset(&((**struc)).value.obj.handlers->write_property, 0, sizeof (*(&((**struc)).value.obj.handlers->write_property)))", "memset(&((**struc)).value.str, 0, sizeof (*(&((**struc)).value.str)))", "memset(&(**struc).is_ref__gc, 0, sizeof (*(&(**struc).is_ref__gc)))", "memset(&(**struc).refcount__gc, 0, sizeof (*(&(**struc).refcount__gc)))", "memset(&(**struc).type, 0, sizeof (*(&(**struc).type)))", "memset(&(**struc).value, 0, sizeof (*(&(**struc).value)))", "memset(&(**struc).value.dval, 0, sizeof (*(&(**struc).value.dval)))", "memset(&(**struc).value.ht, 0, sizeof (*(&(**struc).value.ht)))", "memset(&(**struc).value.lval, 0, sizeof (*(&(**struc).value.lval)))", "memset(&(**struc).value.obj, 0, sizeof (*(&(**struc).value.obj)))", "memset(&(**struc).value.obj.handle, 0, sizeof (*(&(**struc).value.obj.handle)))", "memset(&(**struc).value.obj.handlers, 0, sizeof (*(&(**struc).value.obj.handlers)))", "memset(&(**struc).value.str, 0, sizeof (*(&(**struc).value.str)))", "memset(&(**struc).value.str.len, 0, sizeof (*(&(**struc).value.str.len)))", "memset(&(**struc).value.str.val, 0, sizeof (*(&(**struc).value.str.val)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((((**struc))).value.ht, 0, sizeof (*((((**struc))).value.ht)))", "memset((((**struc))).value.obj.handlers, 0, sizeof (*((((**struc))).value.obj.handlers)))", "memset((((**struc))).value.obj.handlers->add_ref, 0, sizeof (*((((**struc))).value.obj.handlers->add_ref)))", "memset((((**struc))).value.obj.handlers->call_method, 0, sizeof (*((((**struc))).value.obj.handlers->call_method)))", "memset((((**struc))).value.obj.handlers->cast_object, 0, sizeof (*((((**struc))).value.obj.handlers->cast_object)))", "memset((((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*((((**struc))).value.obj.handlers->clone_obj)))", "memset((((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*((((**struc))).value.obj.handlers->compare_objects)))", "memset((((**struc))).value.obj.handlers->count_elements, 0, sizeof (*((((**struc))).value.obj.handlers->count_elements)))", "memset((((**struc))).value.obj.handlers->del_ref, 0, sizeof (*((((**struc))).value.obj.handlers->del_ref)))", "memset((((**struc))).value.obj.handlers->get, 0, sizeof (*((((**struc))).value.obj.handlers->get)))", "memset((((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_entry)))", "memset((((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_name)))", "memset((((**struc))).value.obj.handlers->get_closure, 0, sizeof (*((((**struc))).value.obj.handlers->get_closure)))", "memset((((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*((((**struc))).value.obj.handlers->get_constructor)))", "memset((((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*((((**struc))).value.obj.handlers->get_debug_info)))", "memset((((**struc))).value.obj.handlers->get_method, 0, sizeof (*((((**struc))).value.obj.handlers->get_method)))", "memset((((**struc))).value.obj.handlers->get_properties, 0, sizeof (*((((**struc))).value.obj.handlers->get_properties)))", "memset((((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset((((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->has_dimension)))", "memset((((**struc))).value.obj.handlers->has_property, 0, sizeof (*((((**struc))).value.obj.handlers->has_property)))", "memset((((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->read_dimension)))", "memset((((**struc))).value.obj.handlers->read_property, 0, sizeof (*((((**struc))).value.obj.handlers->read_property)))", "memset((((**struc))).value.obj.handlers->set, 0, sizeof (*((((**struc))).value.obj.handlers->set)))", "memset((((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->unset_dimension)))", "memset((((**struc))).value.obj.handlers->unset_property, 0, sizeof (*((((**struc))).value.obj.handlers->unset_property)))", "memset((((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->write_dimension)))", "memset((((**struc))).value.obj.handlers->write_property, 0, sizeof (*((((**struc))).value.obj.handlers->write_property)))", "memset(((**struc)).value.ht, 0, sizeof (*(((**struc)).value.ht)))", "memset(((**struc)).value.obj.handlers, 0, sizeof (*(((**struc)).value.obj.handlers)))", "memset(((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(((**struc)).value.obj.handlers->add_ref)))", "memset(((**struc)).value.obj.handlers->call_method, 0, sizeof (*(((**struc)).value.obj.handlers->call_method)))", "memset(((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(((**struc)).value.obj.handlers->cast_object)))", "memset(((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(((**struc)).value.obj.handlers->clone_obj)))", "memset(((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(((**struc)).value.obj.handlers->compare_objects)))", "memset(((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(((**struc)).value.obj.handlers->count_elements)))", "memset(((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(((**struc)).value.obj.handlers->del_ref)))", "memset(((**struc)).value.obj.handlers->get, 0, sizeof (*(((**struc)).value.obj.handlers->get)))", "memset(((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_entry)))", "memset(((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_name)))", "memset(((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(((**struc)).value.obj.handlers->get_closure)))", "memset(((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(((**struc)).value.obj.handlers->get_constructor)))", "memset(((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(((**struc)).value.obj.handlers->get_debug_info)))", "memset(((**struc)).value.obj.handlers->get_method, 0, sizeof (*(((**struc)).value.obj.handlers->get_method)))", "memset(((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(((**struc)).value.obj.handlers->get_properties)))", "memset(((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->has_dimension)))", "memset(((**struc)).value.obj.handlers->has_property, 0, sizeof (*(((**struc)).value.obj.handlers->has_property)))", "memset(((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->read_dimension)))", "memset(((**struc)).value.obj.handlers->read_property, 0, sizeof (*(((**struc)).value.obj.handlers->read_property)))", "memset(((**struc)).value.obj.handlers->set, 0, sizeof (*(((**struc)).value.obj.handlers->set)))", "memset(((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->unset_dimension)))", "memset(((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(((**struc)).value.obj.handlers->unset_property)))", "memset(((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->write_dimension)))", "memset(((**struc)).value.obj.handlers->write_property, 0, sizeof (*(((**struc)).value.obj.handlers->write_property)))", "memset((**struc).value.ht, 0, sizeof (*((**struc).value.ht)))", "memset((**struc).value.obj.handlers, 0, sizeof (*((**struc).value.obj.handlers)))", "memset((**struc).value.str.val, 0, sizeof (*((**struc).value.str.val)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw, 0, sizeof (*(executor_globals.saved_fpu_cw)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "((**(struc))).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*(struc), &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*struc, &(class_name), &class_name_len, 0)", "(**(struc)).value.ht->nApplyCount++", "(**(struc)).value.ht->nApplyCount--", "(class_name)++", "--(myht)->nApplyCount", "_efree(((class_name)))", "_efree(((myht)))", "is_temp = (0)", "is_temp = (1)", "is_temp = (2)", "is_temp = (3)", "is_temp = (4)", "is_temp = (5)", "is_temp = (6)", "is_temp = (7)", "is_temp = (is_temp)", "is_temp = (level)", "php_body_write(((**(struc)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(struc)).value.str.len))", "php_element_dump_func = (php_element_dump_func)", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted long input array (%s) overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted super-global (%s) variable overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(struc)).value.str.val)", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((myht)))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), (class_name), (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**(struc)).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, (myht) ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements((myht)) : 0)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((struc))))", "php_printf(\"\\\"%s\\\"\", (class_name))", "php_printf(\"\\\"%s\\\":protected\", (class_name))", "zend_hash_apply_with_arguments((myht), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy((myht))", "((**struc)).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "--myht->nApplyCount", "_efree((class_name))", "_efree((myht))", "exit(1)", "is_temp = 0", "php_body_write(((**struc).value.str.val), ((**struc).value.str.len))", "php_element_dump_func = php_array_element_dump", "php_element_dump_func = php_object_property_dump", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c\", level - 1, ' ')", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy(myht)", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L117\", 7, &(struc), sizeof (struc), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(level), sizeof (level), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len)))\n    goto head_done;\n", "if (__is_neg(\"\", \"L117\", 7, &(struc), sizeof (struc), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(level), sizeof (level), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.14445617623126]
								}, {
									"case":	2,
									"scores":	[-7.14445617623126]
								}, {
									"case":	3,
									"scores":	[-7.14445617623126]
								}, {
									"case":	4,
									"scores":	[-7.14445617623126]
								}, {
									"case":	5,
									"scores":	[-7.14445617623126]
								}, {
									"case":	6,
									"scores":	[-7.14445617623126]
								}, {
									"case":	7,
									"scores":	[-7.14445617623126]
								}, {
									"case":	8,
									"scores":	[-7.14445617623126]
								}, {
									"case":	9,
									"scores":	[-7.14445617623126]
								}, {
									"case":	10,
									"scores":	[-7.14445617623126]
								}, {
									"case":	11,
									"scores":	[-7.14445617623126]
								}, {
									"case":	12,
									"scores":	[-7.14445617623126]
								}, {
									"case":	13,
									"scores":	[-7.14445617623126]
								}, {
									"case":	14,
									"scores":	[-7.14445617623126]
								}, {
									"case":	15,
									"scores":	[-7.14445617623126]
								}, {
									"case":	16,
									"scores":	[-7.14445617623126]
								}, {
									"case":	17,
									"scores":	[-7.14445617623126]
								}, {
									"case":	18,
									"scores":	[-7.14445617623126]
								}, {
									"case":	19,
									"scores":	[-7.14445617623126]
								}, {
									"case":	20,
									"scores":	[-7.14445617623126]
								}, {
									"case":	21,
									"scores":	[-7.14445617623126]
								}, {
									"case":	22,
									"scores":	[-7.14445617623126]
								}, {
									"case":	23,
									"scores":	[-7.14445617623126]
								}, {
									"case":	24,
									"scores":	[-7.14445617623126]
								}, {
									"case":	25,
									"scores":	[-7.14445617623126]
								}, {
									"case":	26,
									"scores":	[-7.14445617623126]
								}, {
									"case":	27,
									"scores":	[-7.14445617623126]
								}, {
									"case":	28,
									"scores":	[-7.14445617623126]
								}, {
									"case":	29,
									"scores":	[-7.14445617623126]
								}, {
									"case":	30,
									"scores":	[-7.14445617623126]
								}, {
									"case":	31,
									"scores":	[-7.14445617623126]
								}, {
									"case":	32,
									"scores":	[-7.14445617623126]
								}, {
									"case":	33,
									"scores":	[-7.14445617623126]
								}, {
									"case":	34,
									"scores":	[-7.14445617623126]
								}, {
									"case":	35,
									"scores":	[-7.14445617623126]
								}, {
									"case":	36,
									"scores":	[-7.14445617623126]
								}, {
									"case":	37,
									"scores":	[-7.14445617623126]
								}, {
									"case":	38,
									"scores":	[-7.14445617623126]
								}, {
									"case":	39,
									"scores":	[-7.14445617623126]
								}, {
									"case":	40,
									"scores":	[-7.14445617623126]
								}, {
									"case":	41,
									"scores":	[-7.14445617623126]
								}, {
									"case":	42,
									"scores":	[-7.14445617623126]
								}, {
									"case":	43,
									"scores":	[-7.14445617623126]
								}, {
									"case":	44,
									"scores":	[-7.14445617623126]
								}, {
									"case":	45,
									"scores":	[-7.14445617623126]
								}, {
									"case":	46,
									"scores":	[-7.14445617623126]
								}, {
									"case":	47,
									"scores":	[-7.14445617623126]
								}, {
									"case":	48,
									"scores":	[-7.14445617623126]
								}, {
									"case":	49,
									"scores":	[-7.14445617623126]
								}, {
									"case":	50,
									"scores":	[-7.14445617623126]
								}, {
									"case":	51,
									"scores":	[-7.14445617623126]
								}, {
									"case":	52,
									"scores":	[-7.14445617623126]
								}, {
									"case":	53,
									"scores":	[-7.14445617623126]
								}, {
									"case":	54,
									"scores":	[-7.14445617623126]
								}, {
									"case":	55,
									"scores":	[-7.14445617623126]
								}, {
									"case":	56,
									"scores":	[-7.14445617623126]
								}, {
									"case":	57,
									"scores":	[-7.14445617623126]
								}, {
									"case":	58,
									"scores":	[-7.14445617623126]
								}, {
									"case":	59,
									"scores":	[-7.14445617623126]
								}, {
									"case":	60,
									"scores":	[-7.14445617623126]
								}, {
									"case":	61,
									"scores":	[-7.14445617623126]
								}, {
									"case":	62,
									"scores":	[-7.14445617623126]
								}, {
									"case":	63,
									"scores":	[-7.14445617623126]
								}, {
									"case":	64,
									"scores":	[-7.14445617623126]
								}, {
									"case":	65,
									"scores":	[-7.14445617623126]
								}, {
									"case":	66,
									"scores":	[-7.14445617623126]
								}, {
									"case":	67,
									"scores":	[-7.14445617623126]
								}, {
									"case":	68,
									"scores":	[-7.14445617623126]
								}, {
									"case":	69,
									"scores":	[-7.14445617623126]
								}, {
									"case":	70,
									"scores":	[-7.14445617623126]
								}, {
									"case":	71,
									"scores":	[-7.14445617623126]
								}, {
									"case":	72,
									"scores":	[-7.14445617623126]
								}, {
									"case":	73,
									"scores":	[-7.14445617623126]
								}, {
									"case":	74,
									"scores":	[-7.14445617623126]
								}, {
									"case":	75,
									"scores":	[-7.14445617623126]
								}, {
									"case":	76,
									"scores":	[-7.14445617623126]
								}, {
									"case":	77,
									"scores":	[-7.14445617623126]
								}, {
									"case":	78,
									"scores":	[-7.14445617623126]
								}, {
									"case":	79,
									"scores":	[-7.14445617623126]
								}, {
									"case":	80,
									"scores":	[-7.14445617623126]
								}, {
									"case":	81,
									"scores":	[-7.14445617623126]
								}, {
									"case":	82,
									"scores":	[-7.14445617623126]
								}, {
									"case":	83,
									"scores":	[-7.14445617623126]
								}, {
									"case":	84,
									"scores":	[-7.14445617623126]
								}, {
									"case":	85,
									"scores":	[-7.14445617623126]
								}, {
									"case":	86,
									"scores":	[-7.14445617623126]
								}, {
									"case":	87,
									"scores":	[-7.14445617623126]
								}, {
									"case":	88,
									"scores":	[-7.14445617623126]
								}, {
									"case":	89,
									"scores":	[-7.14445617623126]
								}, {
									"case":	90,
									"scores":	[-7.14445617623126]
								}, {
									"case":	91,
									"scores":	[-7.14445617623126]
								}, {
									"case":	92,
									"scores":	[-7.14445617623126]
								}, {
									"case":	93,
									"scores":	[-7.14445617623126]
								}, {
									"case":	94,
									"scores":	[-7.14445617623126]
								}, {
									"case":	95,
									"scores":	[-7.14445617623126]
								}, {
									"case":	96,
									"scores":	[-7.14445617623126]
								}, {
									"case":	97,
									"scores":	[-7.14445617623126]
								}, {
									"case":	98,
									"scores":	[-7.14445617623126]
								}, {
									"case":	99,
									"scores":	[-7.14445617623126]
								}, {
									"case":	100,
									"scores":	[-7.14445617623126]
								}, {
									"case":	101,
									"scores":	[-7.14445617623126]
								}, {
									"case":	102,
									"scores":	[-7.14445617623126]
								}, {
									"case":	103,
									"scores":	[-7.14445617623126]
								}, {
									"case":	104,
									"scores":	[-7.14445617623126]
								}, {
									"case":	105,
									"scores":	[-7.14445617623126]
								}, {
									"case":	106,
									"scores":	[-7.14445617623126]
								}, {
									"case":	107,
									"scores":	[-7.14445617623126]
								}, {
									"case":	108,
									"scores":	[-7.14445617623126]
								}, {
									"case":	109,
									"scores":	[-7.14445617623126]
								}, {
									"case":	110,
									"scores":	[-7.14445617623126]
								}, {
									"case":	111,
									"scores":	[-7.14445617623126]
								}, {
									"case":	112,
									"scores":	[-7.14445617623126]
								}, {
									"case":	113,
									"scores":	[-7.14445617623126]
								}, {
									"case":	114,
									"scores":	[-7.14445617623126]
								}, {
									"case":	115,
									"scores":	[-7.14445617623126]
								}, {
									"case":	116,
									"scores":	[-7.14445617623126]
								}, {
									"case":	117,
									"scores":	[-7.14445617623126]
								}, {
									"case":	118,
									"scores":	[-7.14445617623126]
								}, {
									"case":	119,
									"scores":	[-7.14445617623126]
								}, {
									"case":	120,
									"scores":	[-7.14445617623126]
								}, {
									"case":	121,
									"scores":	[-7.14445617623126]
								}, {
									"case":	122,
									"scores":	[-7.14445617623126]
								}, {
									"case":	123,
									"scores":	[-7.14445617623126]
								}, {
									"case":	124,
									"scores":	[-7.14445617623126]
								}, {
									"case":	125,
									"scores":	[-7.14445617623126]
								}, {
									"case":	126,
									"scores":	[-7.14445617623126]
								}, {
									"case":	127,
									"scores":	[-7.14445617623126]
								}, {
									"case":	128,
									"scores":	[-7.14445617623126]
								}, {
									"case":	129,
									"scores":	[-7.14445617623126]
								}, {
									"case":	130,
									"scores":	[-7.14445617623126]
								}, {
									"case":	131,
									"scores":	[-7.14445617623126]
								}, {
									"case":	132,
									"scores":	[-7.14445617623126]
								}, {
									"case":	133,
									"scores":	[-7.14445617623126]
								}, {
									"case":	134,
									"scores":	[-7.14445617623126]
								}, {
									"case":	135,
									"scores":	[-7.14445617623126]
								}, {
									"case":	136,
									"scores":	[-7.14445617623126]
								}, {
									"case":	137,
									"scores":	[-7.14445617623126]
								}, {
									"case":	138,
									"scores":	[-7.14445617623126]
								}, {
									"case":	139,
									"scores":	[-7.14445617623126]
								}, {
									"case":	140,
									"scores":	[-7.14445617623126]
								}, {
									"case":	141,
									"scores":	[-7.14445617623126]
								}, {
									"case":	142,
									"scores":	[-7.14445617623126]
								}, {
									"case":	143,
									"scores":	[-7.14445617623126]
								}, {
									"case":	144,
									"scores":	[-7.14445617623126]
								}, {
									"case":	145,
									"scores":	[-7.14445617623126]
								}, {
									"case":	146,
									"scores":	[-7.14445617623126]
								}, {
									"case":	147,
									"scores":	[-7.14445617623126]
								}, {
									"case":	148,
									"scores":	[-7.14445617623126]
								}, {
									"case":	149,
									"scores":	[-7.14445617623126]
								}, {
									"case":	150,
									"scores":	[-7.14445617623126]
								}, {
									"case":	151,
									"scores":	[-7.14445617623126]
								}, {
									"case":	152,
									"scores":	[-7.14445617623126]
								}, {
									"case":	153,
									"scores":	[-7.14445617623126]
								}, {
									"case":	154,
									"scores":	[-7.14445617623126]
								}, {
									"case":	155,
									"scores":	[-7.14445617623126]
								}, {
									"case":	156,
									"scores":	[-7.14445617623126]
								}, {
									"case":	157,
									"scores":	[-7.14445617623126]
								}, {
									"case":	158,
									"scores":	[-7.14445617623126]
								}, {
									"case":	159,
									"scores":	[-7.14445617623126]
								}, {
									"case":	160,
									"scores":	[-7.14445617623126]
								}, {
									"case":	161,
									"scores":	[-7.14445617623126]
								}, {
									"case":	162,
									"scores":	[-7.14445617623126]
								}, {
									"case":	163,
									"scores":	[-7.14445617623126]
								}, {
									"case":	164,
									"scores":	[-7.14445617623126]
								}, {
									"case":	165,
									"scores":	[-7.14445617623126]
								}, {
									"case":	166,
									"scores":	[-7.14445617623126]
								}, {
									"case":	167,
									"scores":	[-7.14445617623126]
								}, {
									"case":	168,
									"scores":	[-7.14445617623126]
								}, {
									"case":	169,
									"scores":	[-7.14445617623126]
								}, {
									"case":	170,
									"scores":	[-7.14445617623126]
								}, {
									"case":	171,
									"scores":	[-7.14445617623126]
								}, {
									"case":	172,
									"scores":	[-7.14445617623126]
								}, {
									"case":	173,
									"scores":	[-7.14445617623126]
								}, {
									"case":	174,
									"scores":	[-7.14445617623126]
								}, {
									"case":	175,
									"scores":	[-7.14445617623126]
								}, {
									"case":	176,
									"scores":	[-7.14445617623126]
								}, {
									"case":	177,
									"scores":	[-7.14445617623126]
								}, {
									"case":	178,
									"scores":	[-7.14445617623126]
								}, {
									"case":	179,
									"scores":	[-7.14445617623126]
								}, {
									"case":	180,
									"scores":	[-7.14445617623126]
								}, {
									"case":	181,
									"scores":	[-7.14445617623126]
								}, {
									"case":	182,
									"scores":	[-7.14445617623126]
								}, {
									"case":	183,
									"scores":	[-7.14445617623126]
								}, {
									"case":	184,
									"scores":	[-7.14445617623126]
								}, {
									"case":	185,
									"scores":	[-7.14445617623126]
								}, {
									"case":	186,
									"scores":	[-7.14445617623126]
								}, {
									"case":	187,
									"scores":	[-7.14445617623126]
								}, {
									"case":	188,
									"scores":	[-7.14445617623126]
								}, {
									"case":	189,
									"scores":	[-7.14445617623126]
								}, {
									"case":	190,
									"scores":	[-7.14445617623126]
								}, {
									"case":	191,
									"scores":	[-7.14445617623126]
								}, {
									"case":	192,
									"scores":	[-7.14445617623126]
								}, {
									"case":	193,
									"scores":	[-7.14445617623126]
								}, {
									"case":	194,
									"scores":	[-7.14445617623126]
								}, {
									"case":	195,
									"scores":	[-7.14445617623126]
								}, {
									"case":	196,
									"scores":	[-7.14445617623126]
								}, {
									"case":	197,
									"scores":	[-7.14445617623126]
								}, {
									"case":	198,
									"scores":	[-7.14445617623126]
								}, {
									"case":	199,
									"scores":	[-7.14445617623126]
								}, {
									"case":	200,
									"scores":	[-7.14445617623126]
								}, {
									"case":	201,
									"scores":	[-7.14445617623126]
								}, {
									"case":	202,
									"scores":	[-7.14445617623126]
								}, {
									"case":	203,
									"scores":	[-7.14445617623126]
								}, {
									"case":	204,
									"scores":	[-7.14445617623126]
								}, {
									"case":	205,
									"scores":	[-7.14445617623126]
								}, {
									"case":	206,
									"scores":	[-7.14445617623126]
								}, {
									"case":	207,
									"scores":	[-7.14445617623126]
								}, {
									"case":	208,
									"scores":	[-7.14445617623126]
								}, {
									"case":	209,
									"scores":	[-7.14445617623126]
								}, {
									"case":	210,
									"scores":	[-7.14445617623126]
								}, {
									"case":	211,
									"scores":	[-7.14445617623126]
								}, {
									"case":	212,
									"scores":	[-7.14445617623126]
								}, {
									"case":	213,
									"scores":	[-7.14445617623126]
								}, {
									"case":	214,
									"scores":	[-7.14445617623126]
								}, {
									"case":	215,
									"scores":	[-7.14445617623126]
								}, {
									"case":	216,
									"scores":	[-7.14445617623126]
								}, {
									"case":	217,
									"scores":	[-7.14445617623126]
								}, {
									"case":	218,
									"scores":	[-7.14445617623126]
								}, {
									"case":	219,
									"scores":	[-7.14445617623126]
								}, {
									"case":	220,
									"scores":	[-7.14445617623126]
								}, {
									"case":	221,
									"scores":	[-7.14445617623126]
								}, {
									"case":	222,
									"scores":	[-7.14445617623126]
								}, {
									"case":	223,
									"scores":	[-7.14445617623126]
								}, {
									"case":	224,
									"scores":	[-7.14445617623126]
								}, {
									"case":	225,
									"scores":	[-7.14445617623126]
								}, {
									"case":	226,
									"scores":	[-7.14445617623126]
								}, {
									"case":	227,
									"scores":	[-7.14445617623126]
								}, {
									"case":	228,
									"scores":	[-7.14445617623126]
								}, {
									"case":	229,
									"scores":	[-7.14445617623126]
								}, {
									"case":	230,
									"scores":	[-7.14445617623126]
								}, {
									"case":	231,
									"scores":	[-7.14445617623126]
								}, {
									"case":	232,
									"scores":	[-7.14445617623126]
								}, {
									"case":	233,
									"scores":	[-7.14445617623126]
								}, {
									"case":	234,
									"scores":	[-7.14445617623126]
								}, {
									"case":	235,
									"scores":	[-7.14445617623126]
								}, {
									"case":	236,
									"scores":	[-7.14445617623126]
								}, {
									"case":	237,
									"scores":	[-7.14445617623126]
								}, {
									"case":	238,
									"scores":	[-7.14445617623126]
								}, {
									"case":	239,
									"scores":	[-7.14445617623126]
								}, {
									"case":	240,
									"scores":	[-7.14445617623126]
								}, {
									"case":	241,
									"scores":	[-7.14445617623126]
								}, {
									"case":	242,
									"scores":	[-7.14445617623126]
								}, {
									"case":	243,
									"scores":	[-7.14445617623126]
								}, {
									"case":	244,
									"scores":	[-7.14445617623126]
								}, {
									"case":	245,
									"scores":	[-7.14445617623126]
								}, {
									"case":	246,
									"scores":	[-7.14445617623126]
								}, {
									"case":	247,
									"scores":	[-7.14445617623126]
								}, {
									"case":	248,
									"scores":	[-7.14445617623126]
								}, {
									"case":	249,
									"scores":	[-7.14445617623126]
								}, {
									"case":	250,
									"scores":	[-7.14445617623126]
								}, {
									"case":	251,
									"scores":	[-7.14445617623126]
								}, {
									"case":	252,
									"scores":	[-7.14445617623126]
								}, {
									"case":	253,
									"scores":	[-7.14445617623126]
								}, {
									"case":	254,
									"scores":	[-7.14445617623126]
								}, {
									"case":	255,
									"scores":	[-7.14445617623126]
								}, {
									"case":	256,
									"scores":	[-7.14445617623126]
								}, {
									"case":	257,
									"scores":	[-7.14445617623126]
								}, {
									"case":	258,
									"scores":	[-7.14445617623126]
								}, {
									"case":	259,
									"scores":	[-7.14445617623126]
								}, {
									"case":	260,
									"scores":	[-7.14445617623126]
								}, {
									"case":	261,
									"scores":	[-7.14445617623126]
								}, {
									"case":	262,
									"scores":	[-7.14445617623126]
								}, {
									"case":	263,
									"scores":	[-7.14445617623126]
								}, {
									"case":	264,
									"scores":	[-7.14445617623126]
								}, {
									"case":	265,
									"scores":	[-7.14445617623126]
								}, {
									"case":	266,
									"scores":	[-7.14445617623126]
								}, {
									"case":	267,
									"scores":	[-7.14445617623126]
								}, {
									"case":	268,
									"scores":	[-7.14445617623126]
								}, {
									"case":	269,
									"scores":	[-7.14445617623126]
								}, {
									"case":	270,
									"scores":	[-7.14445617623126]
								}, {
									"case":	271,
									"scores":	[-7.14445617623126]
								}, {
									"case":	272,
									"scores":	[-7.14445617623126]
								}, {
									"case":	273,
									"scores":	[-7.14445617623126]
								}, {
									"case":	274,
									"scores":	[-7.14445617623126]
								}, {
									"case":	275,
									"scores":	[-7.14445617623126]
								}, {
									"case":	276,
									"scores":	[-7.14445617623126]
								}, {
									"case":	277,
									"scores":	[-7.14445617623126]
								}, {
									"case":	278,
									"scores":	[-7.14445617623126]
								}, {
									"case":	279,
									"scores":	[-7.14445617623126]
								}, {
									"case":	280,
									"scores":	[-7.14445617623126]
								}, {
									"case":	281,
									"scores":	[-7.14445617623126]
								}, {
									"case":	282,
									"scores":	[-7.14445617623126]
								}, {
									"case":	283,
									"scores":	[-7.14445617623126]
								}, {
									"case":	284,
									"scores":	[-7.14445617623126]
								}, {
									"case":	285,
									"scores":	[-7.14445617623126]
								}, {
									"case":	286,
									"scores":	[-7.14445617623126]
								}, {
									"case":	287,
									"scores":	[-7.14445617623126]
								}, {
									"case":	288,
									"scores":	[-7.14445617623126]
								}, {
									"case":	289,
									"scores":	[-7.14445617623126]
								}, {
									"case":	290,
									"scores":	[-7.14445617623126]
								}, {
									"case":	291,
									"scores":	[-7.14445617623126]
								}, {
									"case":	292,
									"scores":	[-7.14445617623126]
								}, {
									"case":	293,
									"scores":	[-7.14445617623126]
								}, {
									"case":	294,
									"scores":	[-7.14445617623126]
								}, {
									"case":	295,
									"scores":	[-7.14445617623126]
								}, {
									"case":	296,
									"scores":	[-7.14445617623126]
								}, {
									"case":	297,
									"scores":	[-7.14445617623126]
								}, {
									"case":	298,
									"scores":	[-7.14445617623126]
								}, {
									"case":	299,
									"scores":	[-7.14445617623126]
								}, {
									"case":	300,
									"scores":	[-7.14445617623126]
								}, {
									"case":	301,
									"scores":	[-7.14445617623126]
								}, {
									"case":	302,
									"scores":	[-7.14445617623126]
								}, {
									"case":	303,
									"scores":	[-7.14445617623126]
								}, {
									"case":	304,
									"scores":	[-7.14445617623126]
								}, {
									"case":	305,
									"scores":	[-11.216358360631261, -11.26967454733126, -10.042848203631261, -10.042848203631261, -10.337533777631261, -10.253737320631259, -9.54191320363126]
								}, {
									"case":	306,
									"scores":	[-11.217358360631261, -11.270674547331261, -10.04384820363126, -10.04384820363126, -10.338533777631261, -10.254737320631261, -9.54291320363126]
								}]
						}]
				}, {
					"line":	119,
					"switches":	[{
							"switch":	26,
							"types":	[[], [], [], [], [306, 307], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246], [], [], [], [284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305], [247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], [], [], [], [], [], []],
							"begin_line":	120,
							"begin_column":	1,
							"end_line":	120,
							"end_column":	1,
							"patch_codes":	["memset(&(((**struc))).is_ref__gc, 0, sizeof (*(&(((**struc))).is_ref__gc)))", "memset(&(((**struc))).refcount__gc, 0, sizeof (*(&(((**struc))).refcount__gc)))", "memset(&(((**struc))).type, 0, sizeof (*(&(((**struc))).type)))", "memset(&(((**struc))).value, 0, sizeof (*(&(((**struc))).value)))", "memset(&(((**struc))).value.dval, 0, sizeof (*(&(((**struc))).value.dval)))", "memset(&(((**struc))).value.ht, 0, sizeof (*(&(((**struc))).value.ht)))", "memset(&(((**struc))).value.lval, 0, sizeof (*(&(((**struc))).value.lval)))", "memset(&(((**struc))).value.obj, 0, sizeof (*(&(((**struc))).value.obj)))", "memset(&(((**struc))).value.obj.handle, 0, sizeof (*(&(((**struc))).value.obj.handle)))", "memset(&(((**struc))).value.obj.handlers, 0, sizeof (*(&(((**struc))).value.obj.handlers)))", "memset(&(((**struc))).value.obj.handlers->add_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->add_ref)))", "memset(&(((**struc))).value.obj.handlers->call_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->call_method)))", "memset(&(((**struc))).value.obj.handlers->cast_object, 0, sizeof (*(&(((**struc))).value.obj.handlers->cast_object)))", "memset(&(((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*(&(((**struc))).value.obj.handlers->clone_obj)))", "memset(&(((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*(&(((**struc))).value.obj.handlers->compare_objects)))", "memset(&(((**struc))).value.obj.handlers->count_elements, 0, sizeof (*(&(((**struc))).value.obj.handlers->count_elements)))", "memset(&(((**struc))).value.obj.handlers->del_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->del_ref)))", "memset(&(((**struc))).value.obj.handlers->get, 0, sizeof (*(&(((**struc))).value.obj.handlers->get)))", "memset(&(((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_entry)))", "memset(&(((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_name)))", "memset(&(((**struc))).value.obj.handlers->get_closure, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_closure)))", "memset(&(((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_constructor)))", "memset(&(((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_debug_info)))", "memset(&(((**struc))).value.obj.handlers->get_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_method)))", "memset(&(((**struc))).value.obj.handlers->get_properties, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_properties)))", "memset(&(((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_dimension)))", "memset(&(((**struc))).value.obj.handlers->has_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_property)))", "memset(&(((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_dimension)))", "memset(&(((**struc))).value.obj.handlers->read_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_property)))", "memset(&(((**struc))).value.obj.handlers->set, 0, sizeof (*(&(((**struc))).value.obj.handlers->set)))", "memset(&(((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_dimension)))", "memset(&(((**struc))).value.obj.handlers->unset_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_property)))", "memset(&(((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_dimension)))", "memset(&(((**struc))).value.obj.handlers->write_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_property)))", "memset(&(((**struc))).value.str, 0, sizeof (*(&(((**struc))).value.str)))", "memset(&((**struc)).is_ref__gc, 0, sizeof (*(&((**struc)).is_ref__gc)))", "memset(&((**struc)).refcount__gc, 0, sizeof (*(&((**struc)).refcount__gc)))", "memset(&((**struc)).type, 0, sizeof (*(&((**struc)).type)))", "memset(&((**struc)).value, 0, sizeof (*(&((**struc)).value)))", "memset(&((**struc)).value.dval, 0, sizeof (*(&((**struc)).value.dval)))", "memset(&((**struc)).value.ht, 0, sizeof (*(&((**struc)).value.ht)))", "memset(&((**struc)).value.lval, 0, sizeof (*(&((**struc)).value.lval)))", "memset(&((**struc)).value.obj, 0, sizeof (*(&((**struc)).value.obj)))", "memset(&((**struc)).value.obj.handle, 0, sizeof (*(&((**struc)).value.obj.handle)))", "memset(&((**struc)).value.obj.handlers, 0, sizeof (*(&((**struc)).value.obj.handlers)))", "memset(&((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->add_ref)))", "memset(&((**struc)).value.obj.handlers->call_method, 0, sizeof (*(&((**struc)).value.obj.handlers->call_method)))", "memset(&((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(&((**struc)).value.obj.handlers->cast_object)))", "memset(&((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(&((**struc)).value.obj.handlers->clone_obj)))", "memset(&((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(&((**struc)).value.obj.handlers->compare_objects)))", "memset(&((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(&((**struc)).value.obj.handlers->count_elements)))", "memset(&((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->del_ref)))", "memset(&((**struc)).value.obj.handlers->get, 0, sizeof (*(&((**struc)).value.obj.handlers->get)))", "memset(&((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_entry)))", "memset(&((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_name)))", "memset(&((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(&((**struc)).value.obj.handlers->get_closure)))", "memset(&((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(&((**struc)).value.obj.handlers->get_constructor)))", "memset(&((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(&((**struc)).value.obj.handlers->get_debug_info)))", "memset(&((**struc)).value.obj.handlers->get_method, 0, sizeof (*(&((**struc)).value.obj.handlers->get_method)))", "memset(&((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(&((**struc)).value.obj.handlers->get_properties)))", "memset(&((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(&((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->has_dimension)))", "memset(&((**struc)).value.obj.handlers->has_property, 0, sizeof (*(&((**struc)).value.obj.handlers->has_property)))", "memset(&((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->read_dimension)))", "memset(&((**struc)).value.obj.handlers->read_property, 0, sizeof (*(&((**struc)).value.obj.handlers->read_property)))", "memset(&((**struc)).value.obj.handlers->set, 0, sizeof (*(&((**struc)).value.obj.handlers->set)))", "memset(&((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_dimension)))", "memset(&((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_property)))", "memset(&((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->write_dimension)))", "memset(&((**struc)).value.obj.handlers->write_property, 0, sizeof (*(&((**struc)).value.obj.handlers->write_property)))", "memset(&((**struc)).value.str, 0, sizeof (*(&((**struc)).value.str)))", "memset(&(**struc).is_ref__gc, 0, sizeof (*(&(**struc).is_ref__gc)))", "memset(&(**struc).refcount__gc, 0, sizeof (*(&(**struc).refcount__gc)))", "memset(&(**struc).type, 0, sizeof (*(&(**struc).type)))", "memset(&(**struc).value, 0, sizeof (*(&(**struc).value)))", "memset(&(**struc).value.dval, 0, sizeof (*(&(**struc).value.dval)))", "memset(&(**struc).value.ht, 0, sizeof (*(&(**struc).value.ht)))", "memset(&(**struc).value.lval, 0, sizeof (*(&(**struc).value.lval)))", "memset(&(**struc).value.obj, 0, sizeof (*(&(**struc).value.obj)))", "memset(&(**struc).value.obj.handle, 0, sizeof (*(&(**struc).value.obj.handle)))", "memset(&(**struc).value.obj.handlers, 0, sizeof (*(&(**struc).value.obj.handlers)))", "memset(&(**struc).value.str, 0, sizeof (*(&(**struc).value.str)))", "memset(&(**struc).value.str.len, 0, sizeof (*(&(**struc).value.str.len)))", "memset(&(**struc).value.str.val, 0, sizeof (*(&(**struc).value.str.val)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((((**struc))).value.ht, 0, sizeof (*((((**struc))).value.ht)))", "memset((((**struc))).value.obj.handlers, 0, sizeof (*((((**struc))).value.obj.handlers)))", "memset((((**struc))).value.obj.handlers->add_ref, 0, sizeof (*((((**struc))).value.obj.handlers->add_ref)))", "memset((((**struc))).value.obj.handlers->call_method, 0, sizeof (*((((**struc))).value.obj.handlers->call_method)))", "memset((((**struc))).value.obj.handlers->cast_object, 0, sizeof (*((((**struc))).value.obj.handlers->cast_object)))", "memset((((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*((((**struc))).value.obj.handlers->clone_obj)))", "memset((((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*((((**struc))).value.obj.handlers->compare_objects)))", "memset((((**struc))).value.obj.handlers->count_elements, 0, sizeof (*((((**struc))).value.obj.handlers->count_elements)))", "memset((((**struc))).value.obj.handlers->del_ref, 0, sizeof (*((((**struc))).value.obj.handlers->del_ref)))", "memset((((**struc))).value.obj.handlers->get, 0, sizeof (*((((**struc))).value.obj.handlers->get)))", "memset((((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_entry)))", "memset((((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_name)))", "memset((((**struc))).value.obj.handlers->get_closure, 0, sizeof (*((((**struc))).value.obj.handlers->get_closure)))", "memset((((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*((((**struc))).value.obj.handlers->get_constructor)))", "memset((((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*((((**struc))).value.obj.handlers->get_debug_info)))", "memset((((**struc))).value.obj.handlers->get_method, 0, sizeof (*((((**struc))).value.obj.handlers->get_method)))", "memset((((**struc))).value.obj.handlers->get_properties, 0, sizeof (*((((**struc))).value.obj.handlers->get_properties)))", "memset((((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset((((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->has_dimension)))", "memset((((**struc))).value.obj.handlers->has_property, 0, sizeof (*((((**struc))).value.obj.handlers->has_property)))", "memset((((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->read_dimension)))", "memset((((**struc))).value.obj.handlers->read_property, 0, sizeof (*((((**struc))).value.obj.handlers->read_property)))", "memset((((**struc))).value.obj.handlers->set, 0, sizeof (*((((**struc))).value.obj.handlers->set)))", "memset((((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->unset_dimension)))", "memset((((**struc))).value.obj.handlers->unset_property, 0, sizeof (*((((**struc))).value.obj.handlers->unset_property)))", "memset((((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->write_dimension)))", "memset((((**struc))).value.obj.handlers->write_property, 0, sizeof (*((((**struc))).value.obj.handlers->write_property)))", "memset(((**struc)).value.ht, 0, sizeof (*(((**struc)).value.ht)))", "memset(((**struc)).value.obj.handlers, 0, sizeof (*(((**struc)).value.obj.handlers)))", "memset(((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(((**struc)).value.obj.handlers->add_ref)))", "memset(((**struc)).value.obj.handlers->call_method, 0, sizeof (*(((**struc)).value.obj.handlers->call_method)))", "memset(((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(((**struc)).value.obj.handlers->cast_object)))", "memset(((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(((**struc)).value.obj.handlers->clone_obj)))", "memset(((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(((**struc)).value.obj.handlers->compare_objects)))", "memset(((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(((**struc)).value.obj.handlers->count_elements)))", "memset(((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(((**struc)).value.obj.handlers->del_ref)))", "memset(((**struc)).value.obj.handlers->get, 0, sizeof (*(((**struc)).value.obj.handlers->get)))", "memset(((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_entry)))", "memset(((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_name)))", "memset(((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(((**struc)).value.obj.handlers->get_closure)))", "memset(((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(((**struc)).value.obj.handlers->get_constructor)))", "memset(((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(((**struc)).value.obj.handlers->get_debug_info)))", "memset(((**struc)).value.obj.handlers->get_method, 0, sizeof (*(((**struc)).value.obj.handlers->get_method)))", "memset(((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(((**struc)).value.obj.handlers->get_properties)))", "memset(((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->has_dimension)))", "memset(((**struc)).value.obj.handlers->has_property, 0, sizeof (*(((**struc)).value.obj.handlers->has_property)))", "memset(((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->read_dimension)))", "memset(((**struc)).value.obj.handlers->read_property, 0, sizeof (*(((**struc)).value.obj.handlers->read_property)))", "memset(((**struc)).value.obj.handlers->set, 0, sizeof (*(((**struc)).value.obj.handlers->set)))", "memset(((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->unset_dimension)))", "memset(((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(((**struc)).value.obj.handlers->unset_property)))", "memset(((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->write_dimension)))", "memset(((**struc)).value.obj.handlers->write_property, 0, sizeof (*(((**struc)).value.obj.handlers->write_property)))", "memset((**struc).value.ht, 0, sizeof (*((**struc).value.ht)))", "memset((**struc).value.obj.handlers, 0, sizeof (*((**struc).value.obj.handlers)))", "memset((**struc).value.str.val, 0, sizeof (*((**struc).value.str.val)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw, 0, sizeof (*(executor_globals.saved_fpu_cw)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(myht, 0, sizeof (*(myht)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "((**(struc))).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*(struc), &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*struc, &(class_name), &class_name_len, 0)", "(**(struc)).value.ht->nApplyCount++", "(**(struc)).value.ht->nApplyCount--", "(class_name)++", "--(myht)->nApplyCount", "_efree(((class_name)))", "_efree(((myht)))", "is_temp = (0)", "is_temp = (1)", "is_temp = (2)", "is_temp = (3)", "is_temp = (4)", "is_temp = (5)", "is_temp = (6)", "is_temp = (7)", "is_temp = (is_temp)", "is_temp = (level)", "php_body_write(((**(struc)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(struc)).value.str.len))", "php_element_dump_func = (php_element_dump_func)", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted long input array (%s) overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted super-global (%s) variable overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(struc)).value.str.val)", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((myht)))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), (class_name), (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**(struc)).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, (myht) ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements((myht)) : 0)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((struc))))", "php_printf(\"\\\"%s\\\"\", (class_name))", "php_printf(\"\\\"%s\\\":protected\", (class_name))", "zend_hash_apply_with_arguments((myht), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy((myht))", "((**struc)).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "--myht->nApplyCount", "_efree((class_name))", "_efree((myht))", "exit(1)", "is_temp = 0", "php_body_write(((**struc).value.str.val), ((**struc).value.str.len))", "php_element_dump_func = php_array_element_dump", "php_element_dump_func = php_object_property_dump", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c\", level - 1, ' ')", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy(myht)", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L120\", 22, &(myht), sizeof (myht), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(struc), sizeof (struc), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &((**struc).type), sizeof ((**struc).type), &(level), sizeof (level), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection), &((**struc).refcount__gc), sizeof ((**struc).refcount__gc), &((**struc).is_ref__gc), sizeof ((**struc).is_ref__gc)))\n    goto head_done;\n", "if (__is_neg(\"\", \"L120\", 22, &(myht), sizeof (myht), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(struc), sizeof (struc), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &((**struc).type), sizeof ((**struc).type), &(level), sizeof (level), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection), &((**struc).refcount__gc), sizeof ((**struc).refcount__gc), &((**struc).is_ref__gc), sizeof ((**struc).is_ref__gc)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.316145176212963]
								}, {
									"case":	2,
									"scores":	[-6.316145176212963]
								}, {
									"case":	3,
									"scores":	[-6.316145176212963]
								}, {
									"case":	4,
									"scores":	[-6.316145176212963]
								}, {
									"case":	5,
									"scores":	[-6.316145176212963]
								}, {
									"case":	6,
									"scores":	[-6.316145176212963]
								}, {
									"case":	7,
									"scores":	[-6.316145176212963]
								}, {
									"case":	8,
									"scores":	[-6.316145176212963]
								}, {
									"case":	9,
									"scores":	[-6.316145176212963]
								}, {
									"case":	10,
									"scores":	[-6.316145176212963]
								}, {
									"case":	11,
									"scores":	[-6.316145176212963]
								}, {
									"case":	12,
									"scores":	[-6.316145176212963]
								}, {
									"case":	13,
									"scores":	[-6.316145176212963]
								}, {
									"case":	14,
									"scores":	[-6.316145176212963]
								}, {
									"case":	15,
									"scores":	[-6.316145176212963]
								}, {
									"case":	16,
									"scores":	[-6.316145176212963]
								}, {
									"case":	17,
									"scores":	[-6.316145176212963]
								}, {
									"case":	18,
									"scores":	[-6.316145176212963]
								}, {
									"case":	19,
									"scores":	[-6.316145176212963]
								}, {
									"case":	20,
									"scores":	[-6.316145176212963]
								}, {
									"case":	21,
									"scores":	[-6.316145176212963]
								}, {
									"case":	22,
									"scores":	[-6.316145176212963]
								}, {
									"case":	23,
									"scores":	[-6.316145176212963]
								}, {
									"case":	24,
									"scores":	[-6.316145176212963]
								}, {
									"case":	25,
									"scores":	[-6.316145176212963]
								}, {
									"case":	26,
									"scores":	[-6.316145176212963]
								}, {
									"case":	27,
									"scores":	[-6.316145176212963]
								}, {
									"case":	28,
									"scores":	[-6.316145176212963]
								}, {
									"case":	29,
									"scores":	[-6.316145176212963]
								}, {
									"case":	30,
									"scores":	[-6.316145176212963]
								}, {
									"case":	31,
									"scores":	[-6.316145176212963]
								}, {
									"case":	32,
									"scores":	[-6.316145176212963]
								}, {
									"case":	33,
									"scores":	[-6.316145176212963]
								}, {
									"case":	34,
									"scores":	[-6.316145176212963]
								}, {
									"case":	35,
									"scores":	[-6.316145176212963]
								}, {
									"case":	36,
									"scores":	[-6.316145176212963]
								}, {
									"case":	37,
									"scores":	[-6.316145176212963]
								}, {
									"case":	38,
									"scores":	[-6.316145176212963]
								}, {
									"case":	39,
									"scores":	[-6.316145176212963]
								}, {
									"case":	40,
									"scores":	[-6.316145176212963]
								}, {
									"case":	41,
									"scores":	[-6.316145176212963]
								}, {
									"case":	42,
									"scores":	[-6.316145176212963]
								}, {
									"case":	43,
									"scores":	[-6.316145176212963]
								}, {
									"case":	44,
									"scores":	[-6.316145176212963]
								}, {
									"case":	45,
									"scores":	[-6.316145176212963]
								}, {
									"case":	46,
									"scores":	[-6.316145176212963]
								}, {
									"case":	47,
									"scores":	[-6.316145176212963]
								}, {
									"case":	48,
									"scores":	[-6.316145176212963]
								}, {
									"case":	49,
									"scores":	[-6.316145176212963]
								}, {
									"case":	50,
									"scores":	[-6.316145176212963]
								}, {
									"case":	51,
									"scores":	[-6.316145176212963]
								}, {
									"case":	52,
									"scores":	[-6.316145176212963]
								}, {
									"case":	53,
									"scores":	[-6.316145176212963]
								}, {
									"case":	54,
									"scores":	[-6.316145176212963]
								}, {
									"case":	55,
									"scores":	[-6.316145176212963]
								}, {
									"case":	56,
									"scores":	[-6.316145176212963]
								}, {
									"case":	57,
									"scores":	[-6.316145176212963]
								}, {
									"case":	58,
									"scores":	[-6.316145176212963]
								}, {
									"case":	59,
									"scores":	[-6.316145176212963]
								}, {
									"case":	60,
									"scores":	[-6.316145176212963]
								}, {
									"case":	61,
									"scores":	[-6.316145176212963]
								}, {
									"case":	62,
									"scores":	[-6.316145176212963]
								}, {
									"case":	63,
									"scores":	[-6.316145176212963]
								}, {
									"case":	64,
									"scores":	[-6.316145176212963]
								}, {
									"case":	65,
									"scores":	[-6.316145176212963]
								}, {
									"case":	66,
									"scores":	[-6.316145176212963]
								}, {
									"case":	67,
									"scores":	[-6.316145176212963]
								}, {
									"case":	68,
									"scores":	[-6.316145176212963]
								}, {
									"case":	69,
									"scores":	[-6.316145176212963]
								}, {
									"case":	70,
									"scores":	[-6.316145176212963]
								}, {
									"case":	71,
									"scores":	[-6.316145176212963]
								}, {
									"case":	72,
									"scores":	[-6.316145176212963]
								}, {
									"case":	73,
									"scores":	[-6.316145176212963]
								}, {
									"case":	74,
									"scores":	[-6.316145176212963]
								}, {
									"case":	75,
									"scores":	[-6.316145176212963]
								}, {
									"case":	76,
									"scores":	[-6.316145176212963]
								}, {
									"case":	77,
									"scores":	[-6.316145176212963]
								}, {
									"case":	78,
									"scores":	[-6.316145176212963]
								}, {
									"case":	79,
									"scores":	[-6.316145176212963]
								}, {
									"case":	80,
									"scores":	[-6.316145176212963]
								}, {
									"case":	81,
									"scores":	[-6.316145176212963]
								}, {
									"case":	82,
									"scores":	[-6.316145176212963]
								}, {
									"case":	83,
									"scores":	[-6.316145176212963]
								}, {
									"case":	84,
									"scores":	[-6.316145176212963]
								}, {
									"case":	85,
									"scores":	[-6.316145176212963]
								}, {
									"case":	86,
									"scores":	[-6.316145176212963]
								}, {
									"case":	87,
									"scores":	[-6.316145176212963]
								}, {
									"case":	88,
									"scores":	[-6.316145176212963]
								}, {
									"case":	89,
									"scores":	[-6.316145176212963]
								}, {
									"case":	90,
									"scores":	[-6.316145176212963]
								}, {
									"case":	91,
									"scores":	[-6.316145176212963]
								}, {
									"case":	92,
									"scores":	[-6.316145176212963]
								}, {
									"case":	93,
									"scores":	[-6.316145176212963]
								}, {
									"case":	94,
									"scores":	[-6.316145176212963]
								}, {
									"case":	95,
									"scores":	[-6.316145176212963]
								}, {
									"case":	96,
									"scores":	[-6.316145176212963]
								}, {
									"case":	97,
									"scores":	[-6.316145176212963]
								}, {
									"case":	98,
									"scores":	[-6.316145176212963]
								}, {
									"case":	99,
									"scores":	[-6.316145176212963]
								}, {
									"case":	100,
									"scores":	[-6.316145176212963]
								}, {
									"case":	101,
									"scores":	[-6.316145176212963]
								}, {
									"case":	102,
									"scores":	[-6.316145176212963]
								}, {
									"case":	103,
									"scores":	[-6.316145176212963]
								}, {
									"case":	104,
									"scores":	[-6.316145176212963]
								}, {
									"case":	105,
									"scores":	[-6.316145176212963]
								}, {
									"case":	106,
									"scores":	[-6.316145176212963]
								}, {
									"case":	107,
									"scores":	[-6.316145176212963]
								}, {
									"case":	108,
									"scores":	[-6.316145176212963]
								}, {
									"case":	109,
									"scores":	[-6.316145176212963]
								}, {
									"case":	110,
									"scores":	[-6.316145176212963]
								}, {
									"case":	111,
									"scores":	[-6.316145176212963]
								}, {
									"case":	112,
									"scores":	[-6.316145176212963]
								}, {
									"case":	113,
									"scores":	[-6.316145176212963]
								}, {
									"case":	114,
									"scores":	[-6.316145176212963]
								}, {
									"case":	115,
									"scores":	[-6.316145176212963]
								}, {
									"case":	116,
									"scores":	[-6.316145176212963]
								}, {
									"case":	117,
									"scores":	[-6.316145176212963]
								}, {
									"case":	118,
									"scores":	[-6.316145176212963]
								}, {
									"case":	119,
									"scores":	[-6.316145176212963]
								}, {
									"case":	120,
									"scores":	[-6.316145176212963]
								}, {
									"case":	121,
									"scores":	[-6.316145176212963]
								}, {
									"case":	122,
									"scores":	[-6.316145176212963]
								}, {
									"case":	123,
									"scores":	[-6.316145176212963]
								}, {
									"case":	124,
									"scores":	[-6.316145176212963]
								}, {
									"case":	125,
									"scores":	[-6.316145176212963]
								}, {
									"case":	126,
									"scores":	[-6.316145176212963]
								}, {
									"case":	127,
									"scores":	[-6.316145176212963]
								}, {
									"case":	128,
									"scores":	[-6.316145176212963]
								}, {
									"case":	129,
									"scores":	[-6.316145176212963]
								}, {
									"case":	130,
									"scores":	[-6.316145176212963]
								}, {
									"case":	131,
									"scores":	[-6.316145176212963]
								}, {
									"case":	132,
									"scores":	[-6.316145176212963]
								}, {
									"case":	133,
									"scores":	[-6.316145176212963]
								}, {
									"case":	134,
									"scores":	[-6.316145176212963]
								}, {
									"case":	135,
									"scores":	[-6.316145176212963]
								}, {
									"case":	136,
									"scores":	[-6.316145176212963]
								}, {
									"case":	137,
									"scores":	[-6.316145176212963]
								}, {
									"case":	138,
									"scores":	[-6.316145176212963]
								}, {
									"case":	139,
									"scores":	[-6.316145176212963]
								}, {
									"case":	140,
									"scores":	[-6.316145176212963]
								}, {
									"case":	141,
									"scores":	[-6.316145176212963]
								}, {
									"case":	142,
									"scores":	[-6.316145176212963]
								}, {
									"case":	143,
									"scores":	[-6.316145176212963]
								}, {
									"case":	144,
									"scores":	[-6.316145176212963]
								}, {
									"case":	145,
									"scores":	[-6.316145176212963]
								}, {
									"case":	146,
									"scores":	[-6.316145176212963]
								}, {
									"case":	147,
									"scores":	[-6.316145176212963]
								}, {
									"case":	148,
									"scores":	[-6.316145176212963]
								}, {
									"case":	149,
									"scores":	[-6.316145176212963]
								}, {
									"case":	150,
									"scores":	[-6.316145176212963]
								}, {
									"case":	151,
									"scores":	[-6.316145176212963]
								}, {
									"case":	152,
									"scores":	[-6.316145176212963]
								}, {
									"case":	153,
									"scores":	[-6.316145176212963]
								}, {
									"case":	154,
									"scores":	[-6.316145176212963]
								}, {
									"case":	155,
									"scores":	[-6.316145176212963]
								}, {
									"case":	156,
									"scores":	[-6.316145176212963]
								}, {
									"case":	157,
									"scores":	[-6.316145176212963]
								}, {
									"case":	158,
									"scores":	[-6.316145176212963]
								}, {
									"case":	159,
									"scores":	[-6.316145176212963]
								}, {
									"case":	160,
									"scores":	[-6.316145176212963]
								}, {
									"case":	161,
									"scores":	[-6.316145176212963]
								}, {
									"case":	162,
									"scores":	[-6.316145176212963]
								}, {
									"case":	163,
									"scores":	[-6.316145176212963]
								}, {
									"case":	164,
									"scores":	[-6.316145176212963]
								}, {
									"case":	165,
									"scores":	[-6.316145176212963]
								}, {
									"case":	166,
									"scores":	[-6.316145176212963]
								}, {
									"case":	167,
									"scores":	[-6.316145176212963]
								}, {
									"case":	168,
									"scores":	[-6.316145176212963]
								}, {
									"case":	169,
									"scores":	[-6.316145176212963]
								}, {
									"case":	170,
									"scores":	[-6.316145176212963]
								}, {
									"case":	171,
									"scores":	[-6.316145176212963]
								}, {
									"case":	172,
									"scores":	[-6.316145176212963]
								}, {
									"case":	173,
									"scores":	[-6.316145176212963]
								}, {
									"case":	174,
									"scores":	[-6.316145176212963]
								}, {
									"case":	175,
									"scores":	[-6.316145176212963]
								}, {
									"case":	176,
									"scores":	[-6.316145176212963]
								}, {
									"case":	177,
									"scores":	[-6.316145176212963]
								}, {
									"case":	178,
									"scores":	[-6.316145176212963]
								}, {
									"case":	179,
									"scores":	[-6.316145176212963]
								}, {
									"case":	180,
									"scores":	[-6.316145176212963]
								}, {
									"case":	181,
									"scores":	[-6.316145176212963]
								}, {
									"case":	182,
									"scores":	[-6.316145176212963]
								}, {
									"case":	183,
									"scores":	[-6.316145176212963]
								}, {
									"case":	184,
									"scores":	[-6.316145176212963]
								}, {
									"case":	185,
									"scores":	[-6.316145176212963]
								}, {
									"case":	186,
									"scores":	[-6.316145176212963]
								}, {
									"case":	187,
									"scores":	[-6.316145176212963]
								}, {
									"case":	188,
									"scores":	[-6.316145176212963]
								}, {
									"case":	189,
									"scores":	[-6.316145176212963]
								}, {
									"case":	190,
									"scores":	[-6.316145176212963]
								}, {
									"case":	191,
									"scores":	[-6.316145176212963]
								}, {
									"case":	192,
									"scores":	[-6.316145176212963]
								}, {
									"case":	193,
									"scores":	[-6.316145176212963]
								}, {
									"case":	194,
									"scores":	[-6.316145176212963]
								}, {
									"case":	195,
									"scores":	[-6.316145176212963]
								}, {
									"case":	196,
									"scores":	[-6.316145176212963]
								}, {
									"case":	197,
									"scores":	[-6.316145176212963]
								}, {
									"case":	198,
									"scores":	[-6.316145176212963]
								}, {
									"case":	199,
									"scores":	[-6.316145176212963]
								}, {
									"case":	200,
									"scores":	[-6.316145176212963]
								}, {
									"case":	201,
									"scores":	[-6.316145176212963]
								}, {
									"case":	202,
									"scores":	[-6.316145176212963]
								}, {
									"case":	203,
									"scores":	[-6.316145176212963]
								}, {
									"case":	204,
									"scores":	[-6.316145176212963]
								}, {
									"case":	205,
									"scores":	[-6.316145176212963]
								}, {
									"case":	206,
									"scores":	[-6.316145176212963]
								}, {
									"case":	207,
									"scores":	[-6.316145176212963]
								}, {
									"case":	208,
									"scores":	[-6.316145176212963]
								}, {
									"case":	209,
									"scores":	[-6.316145176212963]
								}, {
									"case":	210,
									"scores":	[-6.316145176212963]
								}, {
									"case":	211,
									"scores":	[-6.316145176212963]
								}, {
									"case":	212,
									"scores":	[-6.316145176212963]
								}, {
									"case":	213,
									"scores":	[-6.316145176212963]
								}, {
									"case":	214,
									"scores":	[-6.316145176212963]
								}, {
									"case":	215,
									"scores":	[-6.316145176212963]
								}, {
									"case":	216,
									"scores":	[-6.316145176212963]
								}, {
									"case":	217,
									"scores":	[-6.316145176212963]
								}, {
									"case":	218,
									"scores":	[-6.316145176212963]
								}, {
									"case":	219,
									"scores":	[-6.316145176212963]
								}, {
									"case":	220,
									"scores":	[-6.316145176212963]
								}, {
									"case":	221,
									"scores":	[-6.316145176212963]
								}, {
									"case":	222,
									"scores":	[-6.316145176212963]
								}, {
									"case":	223,
									"scores":	[-6.316145176212963]
								}, {
									"case":	224,
									"scores":	[-6.316145176212963]
								}, {
									"case":	225,
									"scores":	[-6.316145176212963]
								}, {
									"case":	226,
									"scores":	[-6.316145176212963]
								}, {
									"case":	227,
									"scores":	[-6.316145176212963]
								}, {
									"case":	228,
									"scores":	[-6.316145176212963]
								}, {
									"case":	229,
									"scores":	[-6.316145176212963]
								}, {
									"case":	230,
									"scores":	[-6.316145176212963]
								}, {
									"case":	231,
									"scores":	[-6.316145176212963]
								}, {
									"case":	232,
									"scores":	[-6.316145176212963]
								}, {
									"case":	233,
									"scores":	[-6.316145176212963]
								}, {
									"case":	234,
									"scores":	[-6.316145176212963]
								}, {
									"case":	235,
									"scores":	[-6.316145176212963]
								}, {
									"case":	236,
									"scores":	[-6.316145176212963]
								}, {
									"case":	237,
									"scores":	[-6.316145176212963]
								}, {
									"case":	238,
									"scores":	[-6.316145176212963]
								}, {
									"case":	239,
									"scores":	[-6.316145176212963]
								}, {
									"case":	240,
									"scores":	[-6.316145176212963]
								}, {
									"case":	241,
									"scores":	[-6.316145176212963]
								}, {
									"case":	242,
									"scores":	[-6.316145176212963]
								}, {
									"case":	243,
									"scores":	[-6.316145176212963]
								}, {
									"case":	244,
									"scores":	[-6.316145176212963]
								}, {
									"case":	245,
									"scores":	[-6.316145176212963]
								}, {
									"case":	246,
									"scores":	[-6.316145176212963]
								}, {
									"case":	247,
									"scores":	[-6.316145176212963]
								}, {
									"case":	248,
									"scores":	[-6.316145176212963]
								}, {
									"case":	249,
									"scores":	[-6.316145176212963]
								}, {
									"case":	250,
									"scores":	[-6.316145176212963]
								}, {
									"case":	251,
									"scores":	[-6.316145176212963]
								}, {
									"case":	252,
									"scores":	[-6.316145176212963]
								}, {
									"case":	253,
									"scores":	[-6.316145176212963]
								}, {
									"case":	254,
									"scores":	[-6.316145176212963]
								}, {
									"case":	255,
									"scores":	[-6.316145176212963]
								}, {
									"case":	256,
									"scores":	[-6.316145176212963]
								}, {
									"case":	257,
									"scores":	[-6.316145176212963]
								}, {
									"case":	258,
									"scores":	[-6.316145176212963]
								}, {
									"case":	259,
									"scores":	[-6.316145176212963]
								}, {
									"case":	260,
									"scores":	[-6.316145176212963]
								}, {
									"case":	261,
									"scores":	[-6.316145176212963]
								}, {
									"case":	262,
									"scores":	[-6.316145176212963]
								}, {
									"case":	263,
									"scores":	[-6.316145176212963]
								}, {
									"case":	264,
									"scores":	[-6.316145176212963]
								}, {
									"case":	265,
									"scores":	[-6.316145176212963]
								}, {
									"case":	266,
									"scores":	[-6.316145176212963]
								}, {
									"case":	267,
									"scores":	[-6.316145176212963]
								}, {
									"case":	268,
									"scores":	[-6.316145176212963]
								}, {
									"case":	269,
									"scores":	[-6.316145176212963]
								}, {
									"case":	270,
									"scores":	[-6.316145176212963]
								}, {
									"case":	271,
									"scores":	[-6.316145176212963]
								}, {
									"case":	272,
									"scores":	[-6.316145176212963]
								}, {
									"case":	273,
									"scores":	[-6.316145176212963]
								}, {
									"case":	274,
									"scores":	[-6.316145176212963]
								}, {
									"case":	275,
									"scores":	[-6.316145176212963]
								}, {
									"case":	276,
									"scores":	[-6.316145176212963]
								}, {
									"case":	277,
									"scores":	[-6.316145176212963]
								}, {
									"case":	278,
									"scores":	[-6.316145176212963]
								}, {
									"case":	279,
									"scores":	[-6.316145176212963]
								}, {
									"case":	280,
									"scores":	[-6.316145176212963]
								}, {
									"case":	281,
									"scores":	[-6.316145176212963]
								}, {
									"case":	282,
									"scores":	[-6.316145176212963]
								}, {
									"case":	283,
									"scores":	[-6.316145176212963]
								}, {
									"case":	284,
									"scores":	[-6.316145176212963]
								}, {
									"case":	285,
									"scores":	[-6.316145176212963]
								}, {
									"case":	286,
									"scores":	[-6.316145176212963]
								}, {
									"case":	287,
									"scores":	[-6.316145176212963]
								}, {
									"case":	288,
									"scores":	[-6.316145176212963]
								}, {
									"case":	289,
									"scores":	[-6.316145176212963]
								}, {
									"case":	290,
									"scores":	[-6.316145176212963]
								}, {
									"case":	291,
									"scores":	[-6.316145176212963]
								}, {
									"case":	292,
									"scores":	[-6.316145176212963]
								}, {
									"case":	293,
									"scores":	[-6.316145176212963]
								}, {
									"case":	294,
									"scores":	[-6.316145176212963]
								}, {
									"case":	295,
									"scores":	[-6.316145176212963]
								}, {
									"case":	296,
									"scores":	[-6.316145176212963]
								}, {
									"case":	297,
									"scores":	[-6.316145176212963]
								}, {
									"case":	298,
									"scores":	[-6.316145176212963]
								}, {
									"case":	299,
									"scores":	[-6.316145176212963]
								}, {
									"case":	300,
									"scores":	[-6.316145176212963]
								}, {
									"case":	301,
									"scores":	[-6.316145176212963]
								}, {
									"case":	302,
									"scores":	[-6.316145176212963]
								}, {
									"case":	303,
									"scores":	[-6.316145176212963]
								}, {
									"case":	304,
									"scores":	[-6.316145176212963]
								}, {
									"case":	305,
									"scores":	[-6.316145176212963]
								}, {
									"case":	306,
									"scores":	[-9.83858191131296, -11.242656261612961, -11.467332670612963, -9.94912855361296, -10.081105533612961, -10.191416150612962, -9.47959203361296, -10.794673207612963, -10.275212607612962, -10.794673207612963, -10.794673207612963, -10.794673207612963, -10.794673207612963, -11.040712121412962, -11.040712121412962, -11.040712121412962, -11.005562324612962, -10.794673207612963, -10.794673207612963, -10.794673207612963, -10.794673207612963, -10.794673207612963]
								}, {
									"case":	307,
									"scores":	[-9.83958191131296, -11.243656261612962, -11.468332670612963, -9.9501285536129629, -10.082105533612962, -10.192416150612964, -9.4805920336129628, -10.795673207612962, -10.276212607612964, -10.795673207612962, -10.795673207612962, -10.795673207612962, -10.795673207612962, -11.041712121412964, -11.041712121412964, -11.041712121412964, -11.006562324612961, -10.795673207612962, -10.795673207612962, -10.795673207612962, -10.795673207612962, -10.795673207612962]
								}]
						}, {
							"switch":	27,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	120,
							"begin_column":	3,
							"end_line":	124,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L120\", 22, &(myht), sizeof (myht), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(struc), sizeof (struc), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &((**struc).type), sizeof ((**struc).type), &(level), sizeof (level), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection), &((**struc).refcount__gc), sizeof ((**struc).refcount__gc), &((**struc).is_ref__gc), sizeof ((**struc).is_ref__gc))) {\n    do {\n        const char *__str = (\"*RECURSION*\\n\");\n        php_body_write(__str, strlen(__str));\n    } while (0);\n    --myht->nApplyCount;\n    return;\n}\n", "if ((++myht->nApplyCount > 1) || __is_neg(\"\", \"L120\", 22, &(myht), sizeof (myht), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(struc), sizeof (struc), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &((**struc).type), sizeof ((**struc).type), &(level), sizeof (level), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection), &((**struc).refcount__gc), sizeof ((**struc).refcount__gc), &((**struc).is_ref__gc), sizeof ((**struc).is_ref__gc))) {\n    do {\n        const char *__str = (\"*RECURSION*\\n\");\n        php_body_write(__str, strlen(__str));\n    } while (0);\n    --myht->nApplyCount;\n    return;\n}\n", "if ((++myht->nApplyCount > 1) && !__is_neg(\"\", \"L120\", 22, &(myht), sizeof (myht), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(struc), sizeof (struc), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &((**struc).type), sizeof ((**struc).type), &(level), sizeof (level), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection), &((**struc).refcount__gc), sizeof ((**struc).refcount__gc), &((**struc).is_ref__gc), sizeof ((**struc).is_ref__gc))) {\n    do {\n        const char *__str = (\"*RECURSION*\\n\");\n        php_body_write(__str, strlen(__str));\n    } while (0);\n    --myht->nApplyCount;\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.459596280128145, -3.7979650581281459, -2.660231451628146, -3.0221722511281466, -3.154931495128146, -3.6245388311281461, -2.8332678011281462, -3.6801236411281462, -3.7634273311281459, -3.6801236411281462, -3.6801236411281462, -3.6801236411281462, -3.6801236411281462, -4.4380117411281459, -4.4380117411281459, -4.4380117411281459, -4.1493836411281464, -3.6801236411281462, -3.6801236411281462, -3.6801236411281462, -3.6801236411281462, -3.6801236411281462]
								}, {
									"case":	2,
									"scores":	[-4.0601904761281453, -5.3985592541281457, -4.2608256476281472, -4.6227664471281456, -4.7555256911281463, -5.2251330271281464, -4.4338619971281457, -5.2807178371281456, -5.3640215271281457, -5.2807178371281456, -5.2807178371281456, -5.2807178371281456, -5.2807178371281456, -6.0386059371281462, -6.0386059371281462, -6.0386059371281462, -5.7499778371281458, -5.2807178371281456, -5.2807178371281456, -5.2807178371281456, -5.2807178371281456, -5.2807178371281456]
								}, {
									"case":	3,
									"scores":	[-4.0601904761281453, -5.3985592541281457, -4.2608256476281472, -4.6227664471281456, -4.7555256911281463, -5.2251330271281464, -4.4338619971281457, -5.2807178371281456, -5.3640215271281457, -5.2807178371281456, -5.2807178371281456, -5.2807178371281456, -5.2807178371281456, -6.0386059371281462, -6.0386059371281462, -6.0386059371281462, -5.7499778371281458, -5.2807178371281456, -5.2807178371281456, -5.2807178371281456, -5.2807178371281456, -5.2807178371281456]
								}]
						}, {
							"switch":	28,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	120,
							"begin_column":	3,
							"end_line":	124,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L120\", 22, &(myht), sizeof (myht), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(struc), sizeof (struc), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &((**struc).type), sizeof ((**struc).type), &(level), sizeof (level), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection), &((**struc).refcount__gc), sizeof ((**struc).refcount__gc), &((**struc).is_ref__gc), sizeof ((**struc).is_ref__gc)))\n    if (++myht->nApplyCount > 1) {\n        do {\n            const char *__str = (\"*RECURSION*\\n\");\n            php_body_write(__str, strlen(__str));\n        } while (0);\n        --myht->nApplyCount;\n        return;\n    }\n", "if (!__is_neg(\"\", \"L120\", 22, &(myht), sizeof (myht), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(struc), sizeof (struc), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &((**struc).type), sizeof ((**struc).type), &(level), sizeof (level), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection), &((**struc).refcount__gc), sizeof ((**struc).refcount__gc), &((**struc).is_ref__gc), sizeof ((**struc).is_ref__gc)) && (++myht->nApplyCount > 1)) {\n    do {\n        const char *__str = (\"*RECURSION*\\n\");\n        php_body_write(__str, strlen(__str));\n    } while (0);\n    --myht->nApplyCount;\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.0320398952129635, -8.3704086732129639, -7.2326750667129627, -7.5946158662129637, -7.7273751102129626, -8.1969824462129637, -7.4057114162129629, -8.2525672562129628, -8.3358709462129639, -8.2525672562129628, -8.2525672562129628, -8.2525672562129628, -8.2525672562129628, -9.01045535621296, -9.01045535621296, -9.01045535621296, -8.7218272562129631, -8.2525672562129628, -8.2525672562129628, -8.2525672562129628, -8.2525672562129628, -8.2525672562129628]
								}, {
									"case":	2,
									"scores":	[-7.6472791439129626, -8.9856479219129639, -7.8479143154129627, -8.2098551149129637, -8.34261435891296, -8.8122216949129637, -8.0209506649129629, -8.8678065049129629, -8.9511101949129639, -8.8678065049129629, -8.8678065049129629, -8.8678065049129629, -8.8678065049129629, -9.62569460491296, -9.62569460491296, -9.62569460491296, -9.3370665049129631, -8.8678065049129629, -8.8678065049129629, -8.8678065049129629, -8.8678065049129629, -8.8678065049129629]
								}]
						}]
				}, {
					"line":	124,
					"switches":	[{
							"switch":	29,
							"types":	[[], [], [], [], [306, 307], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246], [], [], [], [284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305], [247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], [], [], [], [], [], []],
							"begin_line":	125,
							"begin_column":	1,
							"end_line":	125,
							"end_column":	1,
							"patch_codes":	["memset(&(((**struc))).is_ref__gc, 0, sizeof (*(&(((**struc))).is_ref__gc)))", "memset(&(((**struc))).refcount__gc, 0, sizeof (*(&(((**struc))).refcount__gc)))", "memset(&(((**struc))).type, 0, sizeof (*(&(((**struc))).type)))", "memset(&(((**struc))).value, 0, sizeof (*(&(((**struc))).value)))", "memset(&(((**struc))).value.dval, 0, sizeof (*(&(((**struc))).value.dval)))", "memset(&(((**struc))).value.ht, 0, sizeof (*(&(((**struc))).value.ht)))", "memset(&(((**struc))).value.lval, 0, sizeof (*(&(((**struc))).value.lval)))", "memset(&(((**struc))).value.obj, 0, sizeof (*(&(((**struc))).value.obj)))", "memset(&(((**struc))).value.obj.handle, 0, sizeof (*(&(((**struc))).value.obj.handle)))", "memset(&(((**struc))).value.obj.handlers, 0, sizeof (*(&(((**struc))).value.obj.handlers)))", "memset(&(((**struc))).value.obj.handlers->add_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->add_ref)))", "memset(&(((**struc))).value.obj.handlers->call_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->call_method)))", "memset(&(((**struc))).value.obj.handlers->cast_object, 0, sizeof (*(&(((**struc))).value.obj.handlers->cast_object)))", "memset(&(((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*(&(((**struc))).value.obj.handlers->clone_obj)))", "memset(&(((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*(&(((**struc))).value.obj.handlers->compare_objects)))", "memset(&(((**struc))).value.obj.handlers->count_elements, 0, sizeof (*(&(((**struc))).value.obj.handlers->count_elements)))", "memset(&(((**struc))).value.obj.handlers->del_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->del_ref)))", "memset(&(((**struc))).value.obj.handlers->get, 0, sizeof (*(&(((**struc))).value.obj.handlers->get)))", "memset(&(((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_entry)))", "memset(&(((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_name)))", "memset(&(((**struc))).value.obj.handlers->get_closure, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_closure)))", "memset(&(((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_constructor)))", "memset(&(((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_debug_info)))", "memset(&(((**struc))).value.obj.handlers->get_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_method)))", "memset(&(((**struc))).value.obj.handlers->get_properties, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_properties)))", "memset(&(((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_dimension)))", "memset(&(((**struc))).value.obj.handlers->has_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_property)))", "memset(&(((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_dimension)))", "memset(&(((**struc))).value.obj.handlers->read_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_property)))", "memset(&(((**struc))).value.obj.handlers->set, 0, sizeof (*(&(((**struc))).value.obj.handlers->set)))", "memset(&(((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_dimension)))", "memset(&(((**struc))).value.obj.handlers->unset_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_property)))", "memset(&(((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_dimension)))", "memset(&(((**struc))).value.obj.handlers->write_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_property)))", "memset(&(((**struc))).value.str, 0, sizeof (*(&(((**struc))).value.str)))", "memset(&((**struc)).is_ref__gc, 0, sizeof (*(&((**struc)).is_ref__gc)))", "memset(&((**struc)).refcount__gc, 0, sizeof (*(&((**struc)).refcount__gc)))", "memset(&((**struc)).type, 0, sizeof (*(&((**struc)).type)))", "memset(&((**struc)).value, 0, sizeof (*(&((**struc)).value)))", "memset(&((**struc)).value.dval, 0, sizeof (*(&((**struc)).value.dval)))", "memset(&((**struc)).value.ht, 0, sizeof (*(&((**struc)).value.ht)))", "memset(&((**struc)).value.lval, 0, sizeof (*(&((**struc)).value.lval)))", "memset(&((**struc)).value.obj, 0, sizeof (*(&((**struc)).value.obj)))", "memset(&((**struc)).value.obj.handle, 0, sizeof (*(&((**struc)).value.obj.handle)))", "memset(&((**struc)).value.obj.handlers, 0, sizeof (*(&((**struc)).value.obj.handlers)))", "memset(&((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->add_ref)))", "memset(&((**struc)).value.obj.handlers->call_method, 0, sizeof (*(&((**struc)).value.obj.handlers->call_method)))", "memset(&((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(&((**struc)).value.obj.handlers->cast_object)))", "memset(&((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(&((**struc)).value.obj.handlers->clone_obj)))", "memset(&((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(&((**struc)).value.obj.handlers->compare_objects)))", "memset(&((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(&((**struc)).value.obj.handlers->count_elements)))", "memset(&((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->del_ref)))", "memset(&((**struc)).value.obj.handlers->get, 0, sizeof (*(&((**struc)).value.obj.handlers->get)))", "memset(&((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_entry)))", "memset(&((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_name)))", "memset(&((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(&((**struc)).value.obj.handlers->get_closure)))", "memset(&((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(&((**struc)).value.obj.handlers->get_constructor)))", "memset(&((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(&((**struc)).value.obj.handlers->get_debug_info)))", "memset(&((**struc)).value.obj.handlers->get_method, 0, sizeof (*(&((**struc)).value.obj.handlers->get_method)))", "memset(&((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(&((**struc)).value.obj.handlers->get_properties)))", "memset(&((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(&((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->has_dimension)))", "memset(&((**struc)).value.obj.handlers->has_property, 0, sizeof (*(&((**struc)).value.obj.handlers->has_property)))", "memset(&((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->read_dimension)))", "memset(&((**struc)).value.obj.handlers->read_property, 0, sizeof (*(&((**struc)).value.obj.handlers->read_property)))", "memset(&((**struc)).value.obj.handlers->set, 0, sizeof (*(&((**struc)).value.obj.handlers->set)))", "memset(&((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_dimension)))", "memset(&((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_property)))", "memset(&((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->write_dimension)))", "memset(&((**struc)).value.obj.handlers->write_property, 0, sizeof (*(&((**struc)).value.obj.handlers->write_property)))", "memset(&((**struc)).value.str, 0, sizeof (*(&((**struc)).value.str)))", "memset(&(**struc).is_ref__gc, 0, sizeof (*(&(**struc).is_ref__gc)))", "memset(&(**struc).refcount__gc, 0, sizeof (*(&(**struc).refcount__gc)))", "memset(&(**struc).type, 0, sizeof (*(&(**struc).type)))", "memset(&(**struc).value, 0, sizeof (*(&(**struc).value)))", "memset(&(**struc).value.dval, 0, sizeof (*(&(**struc).value.dval)))", "memset(&(**struc).value.ht, 0, sizeof (*(&(**struc).value.ht)))", "memset(&(**struc).value.lval, 0, sizeof (*(&(**struc).value.lval)))", "memset(&(**struc).value.obj, 0, sizeof (*(&(**struc).value.obj)))", "memset(&(**struc).value.obj.handle, 0, sizeof (*(&(**struc).value.obj.handle)))", "memset(&(**struc).value.obj.handlers, 0, sizeof (*(&(**struc).value.obj.handlers)))", "memset(&(**struc).value.str, 0, sizeof (*(&(**struc).value.str)))", "memset(&(**struc).value.str.len, 0, sizeof (*(&(**struc).value.str.len)))", "memset(&(**struc).value.str.val, 0, sizeof (*(&(**struc).value.str.val)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((((**struc))).value.ht, 0, sizeof (*((((**struc))).value.ht)))", "memset((((**struc))).value.obj.handlers, 0, sizeof (*((((**struc))).value.obj.handlers)))", "memset((((**struc))).value.obj.handlers->add_ref, 0, sizeof (*((((**struc))).value.obj.handlers->add_ref)))", "memset((((**struc))).value.obj.handlers->call_method, 0, sizeof (*((((**struc))).value.obj.handlers->call_method)))", "memset((((**struc))).value.obj.handlers->cast_object, 0, sizeof (*((((**struc))).value.obj.handlers->cast_object)))", "memset((((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*((((**struc))).value.obj.handlers->clone_obj)))", "memset((((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*((((**struc))).value.obj.handlers->compare_objects)))", "memset((((**struc))).value.obj.handlers->count_elements, 0, sizeof (*((((**struc))).value.obj.handlers->count_elements)))", "memset((((**struc))).value.obj.handlers->del_ref, 0, sizeof (*((((**struc))).value.obj.handlers->del_ref)))", "memset((((**struc))).value.obj.handlers->get, 0, sizeof (*((((**struc))).value.obj.handlers->get)))", "memset((((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_entry)))", "memset((((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_name)))", "memset((((**struc))).value.obj.handlers->get_closure, 0, sizeof (*((((**struc))).value.obj.handlers->get_closure)))", "memset((((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*((((**struc))).value.obj.handlers->get_constructor)))", "memset((((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*((((**struc))).value.obj.handlers->get_debug_info)))", "memset((((**struc))).value.obj.handlers->get_method, 0, sizeof (*((((**struc))).value.obj.handlers->get_method)))", "memset((((**struc))).value.obj.handlers->get_properties, 0, sizeof (*((((**struc))).value.obj.handlers->get_properties)))", "memset((((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset((((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->has_dimension)))", "memset((((**struc))).value.obj.handlers->has_property, 0, sizeof (*((((**struc))).value.obj.handlers->has_property)))", "memset((((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->read_dimension)))", "memset((((**struc))).value.obj.handlers->read_property, 0, sizeof (*((((**struc))).value.obj.handlers->read_property)))", "memset((((**struc))).value.obj.handlers->set, 0, sizeof (*((((**struc))).value.obj.handlers->set)))", "memset((((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->unset_dimension)))", "memset((((**struc))).value.obj.handlers->unset_property, 0, sizeof (*((((**struc))).value.obj.handlers->unset_property)))", "memset((((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->write_dimension)))", "memset((((**struc))).value.obj.handlers->write_property, 0, sizeof (*((((**struc))).value.obj.handlers->write_property)))", "memset(((**struc)).value.ht, 0, sizeof (*(((**struc)).value.ht)))", "memset(((**struc)).value.obj.handlers, 0, sizeof (*(((**struc)).value.obj.handlers)))", "memset(((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(((**struc)).value.obj.handlers->add_ref)))", "memset(((**struc)).value.obj.handlers->call_method, 0, sizeof (*(((**struc)).value.obj.handlers->call_method)))", "memset(((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(((**struc)).value.obj.handlers->cast_object)))", "memset(((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(((**struc)).value.obj.handlers->clone_obj)))", "memset(((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(((**struc)).value.obj.handlers->compare_objects)))", "memset(((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(((**struc)).value.obj.handlers->count_elements)))", "memset(((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(((**struc)).value.obj.handlers->del_ref)))", "memset(((**struc)).value.obj.handlers->get, 0, sizeof (*(((**struc)).value.obj.handlers->get)))", "memset(((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_entry)))", "memset(((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_name)))", "memset(((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(((**struc)).value.obj.handlers->get_closure)))", "memset(((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(((**struc)).value.obj.handlers->get_constructor)))", "memset(((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(((**struc)).value.obj.handlers->get_debug_info)))", "memset(((**struc)).value.obj.handlers->get_method, 0, sizeof (*(((**struc)).value.obj.handlers->get_method)))", "memset(((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(((**struc)).value.obj.handlers->get_properties)))", "memset(((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->has_dimension)))", "memset(((**struc)).value.obj.handlers->has_property, 0, sizeof (*(((**struc)).value.obj.handlers->has_property)))", "memset(((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->read_dimension)))", "memset(((**struc)).value.obj.handlers->read_property, 0, sizeof (*(((**struc)).value.obj.handlers->read_property)))", "memset(((**struc)).value.obj.handlers->set, 0, sizeof (*(((**struc)).value.obj.handlers->set)))", "memset(((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->unset_dimension)))", "memset(((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(((**struc)).value.obj.handlers->unset_property)))", "memset(((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->write_dimension)))", "memset(((**struc)).value.obj.handlers->write_property, 0, sizeof (*(((**struc)).value.obj.handlers->write_property)))", "memset((**struc).value.ht, 0, sizeof (*((**struc).value.ht)))", "memset((**struc).value.obj.handlers, 0, sizeof (*((**struc).value.obj.handlers)))", "memset((**struc).value.str.val, 0, sizeof (*((**struc).value.str.val)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw, 0, sizeof (*(executor_globals.saved_fpu_cw)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(myht, 0, sizeof (*(myht)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "((**(struc))).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*(struc), &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*struc, &(class_name), &class_name_len, 0)", "(**(struc)).value.ht->nApplyCount++", "(**(struc)).value.ht->nApplyCount--", "(class_name)++", "--(myht)->nApplyCount", "_efree(((class_name)))", "_efree(((myht)))", "is_temp = (0)", "is_temp = (1)", "is_temp = (2)", "is_temp = (3)", "is_temp = (4)", "is_temp = (5)", "is_temp = (6)", "is_temp = (7)", "is_temp = (is_temp)", "is_temp = (level)", "php_body_write(((**(struc)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(struc)).value.str.len))", "php_element_dump_func = (php_element_dump_func)", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted long input array (%s) overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted super-global (%s) variable overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(struc)).value.str.val)", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((myht)))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), (class_name), (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**(struc)).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, (myht) ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements((myht)) : 0)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((struc))))", "php_printf(\"\\\"%s\\\"\", (class_name))", "php_printf(\"\\\"%s\\\":protected\", (class_name))", "zend_hash_apply_with_arguments((myht), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy((myht))", "((**struc)).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "--myht->nApplyCount", "_efree((class_name))", "_efree((myht))", "exit(1)", "is_temp = 0", "php_body_write(((**struc).value.str.val), ((**struc).value.str.len))", "php_element_dump_func = php_array_element_dump", "php_element_dump_func = php_object_property_dump", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c\", level - 1, ' ')", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy(myht)", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L125\", 19, &(struc), sizeof (struc), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &(level), sizeof (level), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection)))\n    goto head_done;\n", "if (__is_neg(\"\", \"L125\", 19, &(struc), sizeof (struc), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &(level), sizeof (level), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	2,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	3,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	4,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	5,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	6,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	7,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	8,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	9,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	10,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	11,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	12,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	13,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	14,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	15,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	16,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	17,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	18,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	19,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	20,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	21,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	22,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	23,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	24,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	25,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	26,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	27,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	28,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	29,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	30,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	31,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	32,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	33,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	34,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	35,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	36,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	37,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	38,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	39,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	40,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	41,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	42,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	43,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	44,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	45,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	46,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	47,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	48,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	49,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	50,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	51,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	52,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	53,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	54,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	55,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	56,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	57,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	58,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	59,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	60,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	61,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	62,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	63,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	64,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	65,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	66,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	67,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	68,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	69,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	70,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	71,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	72,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	73,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	74,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	75,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	76,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	77,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	78,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	79,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	80,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	81,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	82,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	83,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	84,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	85,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	86,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	87,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	88,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	89,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	90,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	91,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	92,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	93,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	94,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	95,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	96,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	97,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	98,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	99,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	100,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	101,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	102,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	103,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	104,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	105,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	106,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	107,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	108,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	109,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	110,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	111,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	112,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	113,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	114,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	115,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	116,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	117,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	118,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	119,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	120,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	121,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	122,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	123,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	124,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	125,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	126,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	127,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	128,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	129,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	130,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	131,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	132,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	133,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	134,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	135,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	136,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	137,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	138,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	139,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	140,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	141,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	142,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	143,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	144,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	145,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	146,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	147,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	148,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	149,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	150,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	151,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	152,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	153,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	154,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	155,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	156,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	157,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	158,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	159,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	160,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	161,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	162,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	163,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	164,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	165,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	166,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	167,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	168,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	169,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	170,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	171,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	172,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	173,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	174,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	175,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	176,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	177,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	178,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	179,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	180,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	181,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	182,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	183,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	184,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	185,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	186,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	187,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	188,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	189,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	190,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	191,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	192,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	193,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	194,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	195,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	196,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	197,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	198,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	199,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	200,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	201,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	202,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	203,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	204,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	205,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	206,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	207,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	208,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	209,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	210,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	211,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	212,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	213,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	214,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	215,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	216,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	217,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	218,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	219,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	220,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	221,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	222,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	223,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	224,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	225,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	226,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	227,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	228,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	229,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	230,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	231,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	232,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	233,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	234,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	235,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	236,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	237,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	238,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	239,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	240,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	241,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	242,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	243,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	244,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	245,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	246,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	247,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	248,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	249,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	250,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	251,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	252,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	253,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	254,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	255,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	256,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	257,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	258,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	259,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	260,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	261,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	262,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	263,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	264,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	265,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	266,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	267,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	268,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	269,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	270,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	271,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	272,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	273,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	274,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	275,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	276,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	277,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	278,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	279,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	280,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	281,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	282,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	283,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	284,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	285,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	286,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	287,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	288,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	289,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	290,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	291,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	292,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	293,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	294,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	295,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	296,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	297,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	298,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	299,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	300,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	301,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	302,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	303,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	304,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	305,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	306,
									"scores":	[-9.2776249412954428, -6.6687902910954433, -8.51622864629544, -8.648205626295443, -9.0033980549954435, -8.75851624329544, -8.04669212629544, -8.8423127002954427, -9.3617733002954431, -9.3617733002954431, -9.3617733002954431, -9.3617733002954431, -9.6078122140954427, -9.6078122140954427, -9.6078122140954427, -9.5726624172954438, -9.3617733002954431, -9.3617733002954431, -9.3617733002954431]
								}, {
									"case":	307,
									"scores":	[-9.278624941295444, -6.6697902910954436, -8.5172286462954432, -8.64920562629544, -9.004398054995443, -8.7595162432954439, -8.0476921262954431, -8.8433127002954439, -9.3627733002954443, -9.3627733002954443, -9.3627733002954443, -9.3627733002954443, -9.6088122140954439, -9.6088122140954439, -9.6088122140954439, -9.5736624172954432, -9.3627733002954443, -9.3627733002954443, -9.3627733002954443]
								}]
						}, {
							"switch":	30,
							"types":	[[], [], [1], [], [], [], [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153], [], [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], [], [], [87]],
							"begin_line":	125,
							"begin_column":	3,
							"end_line":	125,
							"end_column":	69,
							"patch_codes":	["if (!__is_neg(\"\", \"L125\", 19, &(struc), sizeof (struc), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &(level), sizeof (level), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection)))\n    php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht));\n", "_php_stream_open_wrapper_as_file(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 0)", "php_checkuid_ex(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 0)", "php_checkuid_ex(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 1)", "php_checkuid_ex(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 2)", "php_checkuid_ex(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 3)", "php_checkuid_ex(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 4)", "php_checkuid_ex(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 5)", "php_checkuid_ex(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 6)", "php_checkuid_ex(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 7)", "php_checkuid_ex(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), is_temp)", "php_checkuid_ex(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), le_index_ptr)", "php_checkuid_ex(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), level)", "setvbuf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 0)", "setvbuf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 1)", "setvbuf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 2)", "setvbuf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 3)", "setvbuf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 4)", "setvbuf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 5)", "setvbuf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 6)", "setvbuf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 7)", "zend_declare_property_null(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 0)", "zend_declare_property_null(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 1)", "zend_declare_property_null(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 2)", "zend_declare_property_null(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 3)", "zend_declare_property_null(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 4)", "zend_declare_property_null(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 5)", "zend_declare_property_null(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 6)", "zend_declare_property_null(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 7)", "zend_declare_property_null(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), is_temp)", "zend_declare_property_null(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), le_index_ptr)", "zend_declare_property_null(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), level)", "zend_hash_get_pointer(myht, 0)", "zend_hash_index_exists(myht, 0)", "zend_hash_index_exists(myht, 1)", "zend_hash_index_exists(myht, 2)", "zend_hash_index_exists(myht, 3)", "zend_hash_index_exists(myht, 4)", "zend_hash_index_exists(myht, 5)", "zend_hash_index_exists(myht, 6)", "zend_hash_index_exists(myht, 7)", "zend_make_callable(*(struc), 0)", "zend_memnstr(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 0)", "zend_memnstr(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), class_name)", "zend_read_static_property(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 0)", "zend_read_static_property(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 1)", "zend_read_static_property(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 2)", "zend_read_static_property(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 3)", "zend_read_static_property(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 4)", "zend_read_static_property(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 5)", "zend_read_static_property(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 6)", "zend_read_static_property(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 7)", "zend_std_get_static_property(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 0)", "zend_std_get_static_property(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 1)", "zend_std_get_static_property(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 2)", "zend_std_get_static_property(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 3)", "zend_std_get_static_property(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 4)", "zend_std_get_static_property(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 5)", "zend_std_get_static_property(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 6)", "zend_std_get_static_property(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 7)", "zend_update_static_property(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 0)", "zend_update_static_property_bool(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 0)", "zend_update_static_property_bool(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 1)", "zend_update_static_property_bool(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 2)", "zend_update_static_property_bool(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 3)", "zend_update_static_property_bool(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 4)", "zend_update_static_property_bool(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 5)", "zend_update_static_property_bool(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 6)", "zend_update_static_property_bool(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 7)", "zend_update_static_property_long(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 0)", "zend_update_static_property_long(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 1)", "zend_update_static_property_long(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 2)", "zend_update_static_property_long(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 3)", "zend_update_static_property_long(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 4)", "zend_update_static_property_long(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 5)", "zend_update_static_property_long(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 6)", "zend_update_static_property_long(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 7)", "zend_update_static_property_string(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht), 0)", "zval_set_isref_to_p(*(struc), 0)", "zval_set_isref_to_p(*(struc), 1)", "zval_set_isref_to_p(*(struc), 2)", "zval_set_isref_to_p(*(struc), 3)", "zval_set_isref_to_p(*(struc), 4)", "zval_set_isref_to_p(*(struc), 5)", "zval_set_isref_to_p(*(struc), 6)", "zval_set_isref_to_p(*(struc), 7)", "{\n}\n", "Debug(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "__assert(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "__trident_output(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "execl(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "execle(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "execlp(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_checkuid(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_set_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_unset_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_stream_filter_create(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_stream_locate_url_wrapper(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_var_serialize_string(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "setenv(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "strtol(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "strtoll(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "strtoq(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "strtoul(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "strtoull(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "strtouq(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "wprintf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "zend_check_property_access(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "zend_std_get_static_method(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "zend_std_unset_static_property(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "zend_update_static_property_null(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n or the directory does not exist\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((&class_name))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((&class_name_len))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((&is_temp))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((&level))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((&myht))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((&php_element_dump_func))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((&struc))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((&class_name)))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((&class_name_len)))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((&is_temp)))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((&level)))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((&myht)))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((&php_element_dump_func)))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((&struc)))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((myht)))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : (&class_name)), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : (&class_name_len)), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : (&is_temp)), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : (&level)), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : (&myht)), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : (&php_element_dump_func)), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : (&struc)), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : (0)), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? (&class_name) : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? (&class_name_len) : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? (&is_temp) : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? (&level) : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? (&myht) : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? (&php_element_dump_func) : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? (&struc) : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? (0) : \"\"), zend_hash_num_elements(myht))", "php_printf((&class_name), (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf((&class_name_len), (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf((&is_temp), (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf((&level), (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf((&myht), (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf((&php_element_dump_func), (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf((&struc), (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf((0), (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.2247472493954428, -5.9752481693954431, -6.3035206798954437, -6.5693374028954432, -7.2486960708954431, -7.0389447388954434, -6.2476737088954435, -7.1778332388954436, -7.0945295488954434, -7.0945295488954434, -7.0945295488954434, -7.0945295488954434, -7.8524176488954431, -7.8524176488954431, -7.8524176488954431, -7.5637895488954436, -7.0945295488954434, -7.0945295488954434, -7.0945295488954434]
								}, {
									"case":	2,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	3,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	4,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	5,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	6,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	7,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	8,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	9,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	10,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	11,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	12,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	13,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	14,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	15,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	16,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	17,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	18,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	19,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	20,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	21,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	22,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	23,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	24,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	25,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	26,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	27,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	28,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	29,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	30,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	31,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	32,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	33,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	34,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	35,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	36,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	37,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	38,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	39,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	40,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	41,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	42,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	43,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	44,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	45,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	46,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	47,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	48,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	49,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	50,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	51,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	52,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	53,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	54,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	55,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	56,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	57,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	58,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	59,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	60,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	61,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	62,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	63,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	64,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	65,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	66,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	67,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	68,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	69,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	70,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	71,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	72,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	73,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	74,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	75,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	76,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	77,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	78,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	79,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	80,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	81,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	82,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	83,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	84,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	85,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	86,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	87,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	88,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	89,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	90,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	91,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	92,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	93,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	94,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	95,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	96,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	97,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	98,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	99,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	100,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	101,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	102,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	103,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	104,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	105,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	106,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	107,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	108,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	109,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	110,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	111,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	112,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	113,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	114,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	115,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	116,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	117,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	118,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	119,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	120,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	121,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	122,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	123,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	124,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	125,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	126,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	127,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	128,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	129,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	130,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	131,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	132,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	133,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	134,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	135,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	136,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	137,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	138,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	139,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	140,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	141,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	142,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	143,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	144,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	145,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	146,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	147,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	148,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	149,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	150,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	151,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	152,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	153,
									"scores":	[-6.2959424688954435]
								}]
						}]
				}, {
					"line":	125,
					"switches":	[{
							"switch":	31,
							"types":	[[], [], [], [], [305, 306], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], [], [], [], [283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282], [], [], [], [], [], []],
							"begin_line":	126,
							"begin_column":	1,
							"end_line":	126,
							"end_column":	1,
							"patch_codes":	["memset(&(((**struc))).is_ref__gc, 0, sizeof (*(&(((**struc))).is_ref__gc)))", "memset(&(((**struc))).refcount__gc, 0, sizeof (*(&(((**struc))).refcount__gc)))", "memset(&(((**struc))).type, 0, sizeof (*(&(((**struc))).type)))", "memset(&(((**struc))).value, 0, sizeof (*(&(((**struc))).value)))", "memset(&(((**struc))).value.dval, 0, sizeof (*(&(((**struc))).value.dval)))", "memset(&(((**struc))).value.ht, 0, sizeof (*(&(((**struc))).value.ht)))", "memset(&(((**struc))).value.lval, 0, sizeof (*(&(((**struc))).value.lval)))", "memset(&(((**struc))).value.obj, 0, sizeof (*(&(((**struc))).value.obj)))", "memset(&(((**struc))).value.obj.handle, 0, sizeof (*(&(((**struc))).value.obj.handle)))", "memset(&(((**struc))).value.obj.handlers, 0, sizeof (*(&(((**struc))).value.obj.handlers)))", "memset(&(((**struc))).value.obj.handlers->add_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->add_ref)))", "memset(&(((**struc))).value.obj.handlers->call_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->call_method)))", "memset(&(((**struc))).value.obj.handlers->cast_object, 0, sizeof (*(&(((**struc))).value.obj.handlers->cast_object)))", "memset(&(((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*(&(((**struc))).value.obj.handlers->clone_obj)))", "memset(&(((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*(&(((**struc))).value.obj.handlers->compare_objects)))", "memset(&(((**struc))).value.obj.handlers->count_elements, 0, sizeof (*(&(((**struc))).value.obj.handlers->count_elements)))", "memset(&(((**struc))).value.obj.handlers->del_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->del_ref)))", "memset(&(((**struc))).value.obj.handlers->get, 0, sizeof (*(&(((**struc))).value.obj.handlers->get)))", "memset(&(((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_entry)))", "memset(&(((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_name)))", "memset(&(((**struc))).value.obj.handlers->get_closure, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_closure)))", "memset(&(((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_constructor)))", "memset(&(((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_debug_info)))", "memset(&(((**struc))).value.obj.handlers->get_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_method)))", "memset(&(((**struc))).value.obj.handlers->get_properties, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_properties)))", "memset(&(((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_dimension)))", "memset(&(((**struc))).value.obj.handlers->has_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_property)))", "memset(&(((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_dimension)))", "memset(&(((**struc))).value.obj.handlers->read_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_property)))", "memset(&(((**struc))).value.obj.handlers->set, 0, sizeof (*(&(((**struc))).value.obj.handlers->set)))", "memset(&(((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_dimension)))", "memset(&(((**struc))).value.obj.handlers->unset_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_property)))", "memset(&(((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_dimension)))", "memset(&(((**struc))).value.obj.handlers->write_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_property)))", "memset(&(((**struc))).value.str, 0, sizeof (*(&(((**struc))).value.str)))", "memset(&((**struc)).is_ref__gc, 0, sizeof (*(&((**struc)).is_ref__gc)))", "memset(&((**struc)).refcount__gc, 0, sizeof (*(&((**struc)).refcount__gc)))", "memset(&((**struc)).type, 0, sizeof (*(&((**struc)).type)))", "memset(&((**struc)).value, 0, sizeof (*(&((**struc)).value)))", "memset(&((**struc)).value.dval, 0, sizeof (*(&((**struc)).value.dval)))", "memset(&((**struc)).value.ht, 0, sizeof (*(&((**struc)).value.ht)))", "memset(&((**struc)).value.lval, 0, sizeof (*(&((**struc)).value.lval)))", "memset(&((**struc)).value.obj, 0, sizeof (*(&((**struc)).value.obj)))", "memset(&((**struc)).value.obj.handle, 0, sizeof (*(&((**struc)).value.obj.handle)))", "memset(&((**struc)).value.obj.handlers, 0, sizeof (*(&((**struc)).value.obj.handlers)))", "memset(&((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->add_ref)))", "memset(&((**struc)).value.obj.handlers->call_method, 0, sizeof (*(&((**struc)).value.obj.handlers->call_method)))", "memset(&((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(&((**struc)).value.obj.handlers->cast_object)))", "memset(&((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(&((**struc)).value.obj.handlers->clone_obj)))", "memset(&((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(&((**struc)).value.obj.handlers->compare_objects)))", "memset(&((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(&((**struc)).value.obj.handlers->count_elements)))", "memset(&((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->del_ref)))", "memset(&((**struc)).value.obj.handlers->get, 0, sizeof (*(&((**struc)).value.obj.handlers->get)))", "memset(&((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_entry)))", "memset(&((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_name)))", "memset(&((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(&((**struc)).value.obj.handlers->get_closure)))", "memset(&((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(&((**struc)).value.obj.handlers->get_constructor)))", "memset(&((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(&((**struc)).value.obj.handlers->get_debug_info)))", "memset(&((**struc)).value.obj.handlers->get_method, 0, sizeof (*(&((**struc)).value.obj.handlers->get_method)))", "memset(&((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(&((**struc)).value.obj.handlers->get_properties)))", "memset(&((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(&((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->has_dimension)))", "memset(&((**struc)).value.obj.handlers->has_property, 0, sizeof (*(&((**struc)).value.obj.handlers->has_property)))", "memset(&((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->read_dimension)))", "memset(&((**struc)).value.obj.handlers->read_property, 0, sizeof (*(&((**struc)).value.obj.handlers->read_property)))", "memset(&((**struc)).value.obj.handlers->set, 0, sizeof (*(&((**struc)).value.obj.handlers->set)))", "memset(&((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_dimension)))", "memset(&((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_property)))", "memset(&((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->write_dimension)))", "memset(&((**struc)).value.obj.handlers->write_property, 0, sizeof (*(&((**struc)).value.obj.handlers->write_property)))", "memset(&((**struc)).value.str, 0, sizeof (*(&((**struc)).value.str)))", "memset(&(**struc).is_ref__gc, 0, sizeof (*(&(**struc).is_ref__gc)))", "memset(&(**struc).refcount__gc, 0, sizeof (*(&(**struc).refcount__gc)))", "memset(&(**struc).type, 0, sizeof (*(&(**struc).type)))", "memset(&(**struc).value, 0, sizeof (*(&(**struc).value)))", "memset(&(**struc).value.dval, 0, sizeof (*(&(**struc).value.dval)))", "memset(&(**struc).value.ht, 0, sizeof (*(&(**struc).value.ht)))", "memset(&(**struc).value.lval, 0, sizeof (*(&(**struc).value.lval)))", "memset(&(**struc).value.obj, 0, sizeof (*(&(**struc).value.obj)))", "memset(&(**struc).value.obj.handle, 0, sizeof (*(&(**struc).value.obj.handle)))", "memset(&(**struc).value.obj.handlers, 0, sizeof (*(&(**struc).value.obj.handlers)))", "memset(&(**struc).value.str, 0, sizeof (*(&(**struc).value.str)))", "memset(&(**struc).value.str.len, 0, sizeof (*(&(**struc).value.str.len)))", "memset(&(**struc).value.str.val, 0, sizeof (*(&(**struc).value.str.val)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((((**struc))).value.ht, 0, sizeof (*((((**struc))).value.ht)))", "memset((((**struc))).value.obj.handlers, 0, sizeof (*((((**struc))).value.obj.handlers)))", "memset((((**struc))).value.obj.handlers->add_ref, 0, sizeof (*((((**struc))).value.obj.handlers->add_ref)))", "memset((((**struc))).value.obj.handlers->call_method, 0, sizeof (*((((**struc))).value.obj.handlers->call_method)))", "memset((((**struc))).value.obj.handlers->cast_object, 0, sizeof (*((((**struc))).value.obj.handlers->cast_object)))", "memset((((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*((((**struc))).value.obj.handlers->clone_obj)))", "memset((((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*((((**struc))).value.obj.handlers->compare_objects)))", "memset((((**struc))).value.obj.handlers->count_elements, 0, sizeof (*((((**struc))).value.obj.handlers->count_elements)))", "memset((((**struc))).value.obj.handlers->del_ref, 0, sizeof (*((((**struc))).value.obj.handlers->del_ref)))", "memset((((**struc))).value.obj.handlers->get, 0, sizeof (*((((**struc))).value.obj.handlers->get)))", "memset((((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_entry)))", "memset((((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_name)))", "memset((((**struc))).value.obj.handlers->get_closure, 0, sizeof (*((((**struc))).value.obj.handlers->get_closure)))", "memset((((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*((((**struc))).value.obj.handlers->get_constructor)))", "memset((((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*((((**struc))).value.obj.handlers->get_debug_info)))", "memset((((**struc))).value.obj.handlers->get_method, 0, sizeof (*((((**struc))).value.obj.handlers->get_method)))", "memset((((**struc))).value.obj.handlers->get_properties, 0, sizeof (*((((**struc))).value.obj.handlers->get_properties)))", "memset((((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset((((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->has_dimension)))", "memset((((**struc))).value.obj.handlers->has_property, 0, sizeof (*((((**struc))).value.obj.handlers->has_property)))", "memset((((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->read_dimension)))", "memset((((**struc))).value.obj.handlers->read_property, 0, sizeof (*((((**struc))).value.obj.handlers->read_property)))", "memset((((**struc))).value.obj.handlers->set, 0, sizeof (*((((**struc))).value.obj.handlers->set)))", "memset((((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->unset_dimension)))", "memset((((**struc))).value.obj.handlers->unset_property, 0, sizeof (*((((**struc))).value.obj.handlers->unset_property)))", "memset((((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->write_dimension)))", "memset((((**struc))).value.obj.handlers->write_property, 0, sizeof (*((((**struc))).value.obj.handlers->write_property)))", "memset(((**struc)).value.ht, 0, sizeof (*(((**struc)).value.ht)))", "memset(((**struc)).value.obj.handlers, 0, sizeof (*(((**struc)).value.obj.handlers)))", "memset(((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(((**struc)).value.obj.handlers->add_ref)))", "memset(((**struc)).value.obj.handlers->call_method, 0, sizeof (*(((**struc)).value.obj.handlers->call_method)))", "memset(((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(((**struc)).value.obj.handlers->cast_object)))", "memset(((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(((**struc)).value.obj.handlers->clone_obj)))", "memset(((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(((**struc)).value.obj.handlers->compare_objects)))", "memset(((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(((**struc)).value.obj.handlers->count_elements)))", "memset(((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(((**struc)).value.obj.handlers->del_ref)))", "memset(((**struc)).value.obj.handlers->get, 0, sizeof (*(((**struc)).value.obj.handlers->get)))", "memset(((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_entry)))", "memset(((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_name)))", "memset(((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(((**struc)).value.obj.handlers->get_closure)))", "memset(((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(((**struc)).value.obj.handlers->get_constructor)))", "memset(((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(((**struc)).value.obj.handlers->get_debug_info)))", "memset(((**struc)).value.obj.handlers->get_method, 0, sizeof (*(((**struc)).value.obj.handlers->get_method)))", "memset(((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(((**struc)).value.obj.handlers->get_properties)))", "memset(((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->has_dimension)))", "memset(((**struc)).value.obj.handlers->has_property, 0, sizeof (*(((**struc)).value.obj.handlers->has_property)))", "memset(((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->read_dimension)))", "memset(((**struc)).value.obj.handlers->read_property, 0, sizeof (*(((**struc)).value.obj.handlers->read_property)))", "memset(((**struc)).value.obj.handlers->set, 0, sizeof (*(((**struc)).value.obj.handlers->set)))", "memset(((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->unset_dimension)))", "memset(((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(((**struc)).value.obj.handlers->unset_property)))", "memset(((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->write_dimension)))", "memset(((**struc)).value.obj.handlers->write_property, 0, sizeof (*(((**struc)).value.obj.handlers->write_property)))", "memset((**struc).value.ht, 0, sizeof (*((**struc).value.ht)))", "memset((**struc).value.obj.handlers, 0, sizeof (*((**struc).value.obj.handlers)))", "memset((**struc).value.str.val, 0, sizeof (*((**struc).value.str.val)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw, 0, sizeof (*(executor_globals.saved_fpu_cw)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "((**(struc))).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*(struc), &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*struc, &(class_name), &class_name_len, 0)", "(**(struc)).value.ht->nApplyCount++", "(**(struc)).value.ht->nApplyCount--", "(class_name)++", "--(myht)->nApplyCount", "_efree(((class_name)))", "_efree(((myht)))", "is_temp = (0)", "is_temp = (1)", "is_temp = (2)", "is_temp = (3)", "is_temp = (4)", "is_temp = (5)", "is_temp = (6)", "is_temp = (7)", "is_temp = (is_temp)", "is_temp = (level)", "php_body_write(((**(struc)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(struc)).value.str.len))", "php_element_dump_func = (php_element_dump_func)", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted long input array (%s) overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted super-global (%s) variable overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(struc)).value.str.val)", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((myht)))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), (class_name), (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**(struc)).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, (myht) ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements((myht)) : 0)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((struc))))", "php_printf(\"\\\"%s\\\"\", (class_name))", "php_printf(\"\\\"%s\\\":protected\", (class_name))", "zend_hash_apply_with_arguments((myht), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy((myht))", "((**struc)).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "--myht->nApplyCount", "_efree((class_name))", "_efree((myht))", "exit(1)", "is_temp = 0", "php_body_write(((**struc).value.str.val), ((**struc).value.str.len))", "php_element_dump_func = php_array_element_dump", "php_element_dump_func = php_object_property_dump", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c\", level - 1, ' ')", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy(myht)", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L126\", 19, &(php_element_dump_func), sizeof (php_element_dump_func), &(struc), sizeof (struc), &(myht), sizeof (myht), &(is_temp), sizeof (is_temp), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &(level), sizeof (level), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection)))\n    goto head_done;\n", "if (__is_neg(\"\", \"L126\", 19, &(php_element_dump_func), sizeof (php_element_dump_func), &(struc), sizeof (struc), &(myht), sizeof (myht), &(is_temp), sizeof (is_temp), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &(level), sizeof (level), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.275739761577924]
								}, {
									"case":	2,
									"scores":	[-6.275739761577924]
								}, {
									"case":	3,
									"scores":	[-6.275739761577924]
								}, {
									"case":	4,
									"scores":	[-6.275739761577924]
								}, {
									"case":	5,
									"scores":	[-6.275739761577924]
								}, {
									"case":	6,
									"scores":	[-6.275739761577924]
								}, {
									"case":	7,
									"scores":	[-6.275739761577924]
								}, {
									"case":	8,
									"scores":	[-6.275739761577924]
								}, {
									"case":	9,
									"scores":	[-6.275739761577924]
								}, {
									"case":	10,
									"scores":	[-6.275739761577924]
								}, {
									"case":	11,
									"scores":	[-6.275739761577924]
								}, {
									"case":	12,
									"scores":	[-6.275739761577924]
								}, {
									"case":	13,
									"scores":	[-6.275739761577924]
								}, {
									"case":	14,
									"scores":	[-6.275739761577924]
								}, {
									"case":	15,
									"scores":	[-6.275739761577924]
								}, {
									"case":	16,
									"scores":	[-6.275739761577924]
								}, {
									"case":	17,
									"scores":	[-6.275739761577924]
								}, {
									"case":	18,
									"scores":	[-6.275739761577924]
								}, {
									"case":	19,
									"scores":	[-6.275739761577924]
								}, {
									"case":	20,
									"scores":	[-6.275739761577924]
								}, {
									"case":	21,
									"scores":	[-6.275739761577924]
								}, {
									"case":	22,
									"scores":	[-6.275739761577924]
								}, {
									"case":	23,
									"scores":	[-6.275739761577924]
								}, {
									"case":	24,
									"scores":	[-6.275739761577924]
								}, {
									"case":	25,
									"scores":	[-6.275739761577924]
								}, {
									"case":	26,
									"scores":	[-6.275739761577924]
								}, {
									"case":	27,
									"scores":	[-6.275739761577924]
								}, {
									"case":	28,
									"scores":	[-6.275739761577924]
								}, {
									"case":	29,
									"scores":	[-6.275739761577924]
								}, {
									"case":	30,
									"scores":	[-6.275739761577924]
								}, {
									"case":	31,
									"scores":	[-6.275739761577924]
								}, {
									"case":	32,
									"scores":	[-6.275739761577924]
								}, {
									"case":	33,
									"scores":	[-6.275739761577924]
								}, {
									"case":	34,
									"scores":	[-6.275739761577924]
								}, {
									"case":	35,
									"scores":	[-6.275739761577924]
								}, {
									"case":	36,
									"scores":	[-6.275739761577924]
								}, {
									"case":	37,
									"scores":	[-6.275739761577924]
								}, {
									"case":	38,
									"scores":	[-6.275739761577924]
								}, {
									"case":	39,
									"scores":	[-6.275739761577924]
								}, {
									"case":	40,
									"scores":	[-6.275739761577924]
								}, {
									"case":	41,
									"scores":	[-6.275739761577924]
								}, {
									"case":	42,
									"scores":	[-6.275739761577924]
								}, {
									"case":	43,
									"scores":	[-6.275739761577924]
								}, {
									"case":	44,
									"scores":	[-6.275739761577924]
								}, {
									"case":	45,
									"scores":	[-6.275739761577924]
								}, {
									"case":	46,
									"scores":	[-6.275739761577924]
								}, {
									"case":	47,
									"scores":	[-6.275739761577924]
								}, {
									"case":	48,
									"scores":	[-6.275739761577924]
								}, {
									"case":	49,
									"scores":	[-6.275739761577924]
								}, {
									"case":	50,
									"scores":	[-6.275739761577924]
								}, {
									"case":	51,
									"scores":	[-6.275739761577924]
								}, {
									"case":	52,
									"scores":	[-6.275739761577924]
								}, {
									"case":	53,
									"scores":	[-6.275739761577924]
								}, {
									"case":	54,
									"scores":	[-6.275739761577924]
								}, {
									"case":	55,
									"scores":	[-6.275739761577924]
								}, {
									"case":	56,
									"scores":	[-6.275739761577924]
								}, {
									"case":	57,
									"scores":	[-6.275739761577924]
								}, {
									"case":	58,
									"scores":	[-6.275739761577924]
								}, {
									"case":	59,
									"scores":	[-6.275739761577924]
								}, {
									"case":	60,
									"scores":	[-6.275739761577924]
								}, {
									"case":	61,
									"scores":	[-6.275739761577924]
								}, {
									"case":	62,
									"scores":	[-6.275739761577924]
								}, {
									"case":	63,
									"scores":	[-6.275739761577924]
								}, {
									"case":	64,
									"scores":	[-6.275739761577924]
								}, {
									"case":	65,
									"scores":	[-6.275739761577924]
								}, {
									"case":	66,
									"scores":	[-6.275739761577924]
								}, {
									"case":	67,
									"scores":	[-6.275739761577924]
								}, {
									"case":	68,
									"scores":	[-6.275739761577924]
								}, {
									"case":	69,
									"scores":	[-6.275739761577924]
								}, {
									"case":	70,
									"scores":	[-6.275739761577924]
								}, {
									"case":	71,
									"scores":	[-6.275739761577924]
								}, {
									"case":	72,
									"scores":	[-6.275739761577924]
								}, {
									"case":	73,
									"scores":	[-6.275739761577924]
								}, {
									"case":	74,
									"scores":	[-6.275739761577924]
								}, {
									"case":	75,
									"scores":	[-6.275739761577924]
								}, {
									"case":	76,
									"scores":	[-6.275739761577924]
								}, {
									"case":	77,
									"scores":	[-6.275739761577924]
								}, {
									"case":	78,
									"scores":	[-6.275739761577924]
								}, {
									"case":	79,
									"scores":	[-6.275739761577924]
								}, {
									"case":	80,
									"scores":	[-6.275739761577924]
								}, {
									"case":	81,
									"scores":	[-6.275739761577924]
								}, {
									"case":	82,
									"scores":	[-6.275739761577924]
								}, {
									"case":	83,
									"scores":	[-6.275739761577924]
								}, {
									"case":	84,
									"scores":	[-6.275739761577924]
								}, {
									"case":	85,
									"scores":	[-6.275739761577924]
								}, {
									"case":	86,
									"scores":	[-6.275739761577924]
								}, {
									"case":	87,
									"scores":	[-6.275739761577924]
								}, {
									"case":	88,
									"scores":	[-6.275739761577924]
								}, {
									"case":	89,
									"scores":	[-6.275739761577924]
								}, {
									"case":	90,
									"scores":	[-6.275739761577924]
								}, {
									"case":	91,
									"scores":	[-6.275739761577924]
								}, {
									"case":	92,
									"scores":	[-6.275739761577924]
								}, {
									"case":	93,
									"scores":	[-6.275739761577924]
								}, {
									"case":	94,
									"scores":	[-6.275739761577924]
								}, {
									"case":	95,
									"scores":	[-6.275739761577924]
								}, {
									"case":	96,
									"scores":	[-6.275739761577924]
								}, {
									"case":	97,
									"scores":	[-6.275739761577924]
								}, {
									"case":	98,
									"scores":	[-6.275739761577924]
								}, {
									"case":	99,
									"scores":	[-6.275739761577924]
								}, {
									"case":	100,
									"scores":	[-6.275739761577924]
								}, {
									"case":	101,
									"scores":	[-6.275739761577924]
								}, {
									"case":	102,
									"scores":	[-6.275739761577924]
								}, {
									"case":	103,
									"scores":	[-6.275739761577924]
								}, {
									"case":	104,
									"scores":	[-6.275739761577924]
								}, {
									"case":	105,
									"scores":	[-6.275739761577924]
								}, {
									"case":	106,
									"scores":	[-6.275739761577924]
								}, {
									"case":	107,
									"scores":	[-6.275739761577924]
								}, {
									"case":	108,
									"scores":	[-6.275739761577924]
								}, {
									"case":	109,
									"scores":	[-6.275739761577924]
								}, {
									"case":	110,
									"scores":	[-6.275739761577924]
								}, {
									"case":	111,
									"scores":	[-6.275739761577924]
								}, {
									"case":	112,
									"scores":	[-6.275739761577924]
								}, {
									"case":	113,
									"scores":	[-6.275739761577924]
								}, {
									"case":	114,
									"scores":	[-6.275739761577924]
								}, {
									"case":	115,
									"scores":	[-6.275739761577924]
								}, {
									"case":	116,
									"scores":	[-6.275739761577924]
								}, {
									"case":	117,
									"scores":	[-6.275739761577924]
								}, {
									"case":	118,
									"scores":	[-6.275739761577924]
								}, {
									"case":	119,
									"scores":	[-6.275739761577924]
								}, {
									"case":	120,
									"scores":	[-6.275739761577924]
								}, {
									"case":	121,
									"scores":	[-6.275739761577924]
								}, {
									"case":	122,
									"scores":	[-6.275739761577924]
								}, {
									"case":	123,
									"scores":	[-6.275739761577924]
								}, {
									"case":	124,
									"scores":	[-6.275739761577924]
								}, {
									"case":	125,
									"scores":	[-6.275739761577924]
								}, {
									"case":	126,
									"scores":	[-6.275739761577924]
								}, {
									"case":	127,
									"scores":	[-6.275739761577924]
								}, {
									"case":	128,
									"scores":	[-6.275739761577924]
								}, {
									"case":	129,
									"scores":	[-6.275739761577924]
								}, {
									"case":	130,
									"scores":	[-6.275739761577924]
								}, {
									"case":	131,
									"scores":	[-6.275739761577924]
								}, {
									"case":	132,
									"scores":	[-6.275739761577924]
								}, {
									"case":	133,
									"scores":	[-6.275739761577924]
								}, {
									"case":	134,
									"scores":	[-6.275739761577924]
								}, {
									"case":	135,
									"scores":	[-6.275739761577924]
								}, {
									"case":	136,
									"scores":	[-6.275739761577924]
								}, {
									"case":	137,
									"scores":	[-6.275739761577924]
								}, {
									"case":	138,
									"scores":	[-6.275739761577924]
								}, {
									"case":	139,
									"scores":	[-6.275739761577924]
								}, {
									"case":	140,
									"scores":	[-6.275739761577924]
								}, {
									"case":	141,
									"scores":	[-6.275739761577924]
								}, {
									"case":	142,
									"scores":	[-6.275739761577924]
								}, {
									"case":	143,
									"scores":	[-6.275739761577924]
								}, {
									"case":	144,
									"scores":	[-6.275739761577924]
								}, {
									"case":	145,
									"scores":	[-6.275739761577924]
								}, {
									"case":	146,
									"scores":	[-6.275739761577924]
								}, {
									"case":	147,
									"scores":	[-6.275739761577924]
								}, {
									"case":	148,
									"scores":	[-6.275739761577924]
								}, {
									"case":	149,
									"scores":	[-6.275739761577924]
								}, {
									"case":	150,
									"scores":	[-6.275739761577924]
								}, {
									"case":	151,
									"scores":	[-6.275739761577924]
								}, {
									"case":	152,
									"scores":	[-6.275739761577924]
								}, {
									"case":	153,
									"scores":	[-6.275739761577924]
								}, {
									"case":	154,
									"scores":	[-6.275739761577924]
								}, {
									"case":	155,
									"scores":	[-6.275739761577924]
								}, {
									"case":	156,
									"scores":	[-6.275739761577924]
								}, {
									"case":	157,
									"scores":	[-6.275739761577924]
								}, {
									"case":	158,
									"scores":	[-6.275739761577924]
								}, {
									"case":	159,
									"scores":	[-6.275739761577924]
								}, {
									"case":	160,
									"scores":	[-6.275739761577924]
								}, {
									"case":	161,
									"scores":	[-6.275739761577924]
								}, {
									"case":	162,
									"scores":	[-6.275739761577924]
								}, {
									"case":	163,
									"scores":	[-6.275739761577924]
								}, {
									"case":	164,
									"scores":	[-6.275739761577924]
								}, {
									"case":	165,
									"scores":	[-6.275739761577924]
								}, {
									"case":	166,
									"scores":	[-6.275739761577924]
								}, {
									"case":	167,
									"scores":	[-6.275739761577924]
								}, {
									"case":	168,
									"scores":	[-6.275739761577924]
								}, {
									"case":	169,
									"scores":	[-6.275739761577924]
								}, {
									"case":	170,
									"scores":	[-6.275739761577924]
								}, {
									"case":	171,
									"scores":	[-6.275739761577924]
								}, {
									"case":	172,
									"scores":	[-6.275739761577924]
								}, {
									"case":	173,
									"scores":	[-6.275739761577924]
								}, {
									"case":	174,
									"scores":	[-6.275739761577924]
								}, {
									"case":	175,
									"scores":	[-6.275739761577924]
								}, {
									"case":	176,
									"scores":	[-6.275739761577924]
								}, {
									"case":	177,
									"scores":	[-6.275739761577924]
								}, {
									"case":	178,
									"scores":	[-6.275739761577924]
								}, {
									"case":	179,
									"scores":	[-6.275739761577924]
								}, {
									"case":	180,
									"scores":	[-6.275739761577924]
								}, {
									"case":	181,
									"scores":	[-6.275739761577924]
								}, {
									"case":	182,
									"scores":	[-6.275739761577924]
								}, {
									"case":	183,
									"scores":	[-6.275739761577924]
								}, {
									"case":	184,
									"scores":	[-6.275739761577924]
								}, {
									"case":	185,
									"scores":	[-6.275739761577924]
								}, {
									"case":	186,
									"scores":	[-6.275739761577924]
								}, {
									"case":	187,
									"scores":	[-6.275739761577924]
								}, {
									"case":	188,
									"scores":	[-6.275739761577924]
								}, {
									"case":	189,
									"scores":	[-6.275739761577924]
								}, {
									"case":	190,
									"scores":	[-6.275739761577924]
								}, {
									"case":	191,
									"scores":	[-6.275739761577924]
								}, {
									"case":	192,
									"scores":	[-6.275739761577924]
								}, {
									"case":	193,
									"scores":	[-6.275739761577924]
								}, {
									"case":	194,
									"scores":	[-6.275739761577924]
								}, {
									"case":	195,
									"scores":	[-6.275739761577924]
								}, {
									"case":	196,
									"scores":	[-6.275739761577924]
								}, {
									"case":	197,
									"scores":	[-6.275739761577924]
								}, {
									"case":	198,
									"scores":	[-6.275739761577924]
								}, {
									"case":	199,
									"scores":	[-6.275739761577924]
								}, {
									"case":	200,
									"scores":	[-6.275739761577924]
								}, {
									"case":	201,
									"scores":	[-6.275739761577924]
								}, {
									"case":	202,
									"scores":	[-6.275739761577924]
								}, {
									"case":	203,
									"scores":	[-6.275739761577924]
								}, {
									"case":	204,
									"scores":	[-6.275739761577924]
								}, {
									"case":	205,
									"scores":	[-6.275739761577924]
								}, {
									"case":	206,
									"scores":	[-6.275739761577924]
								}, {
									"case":	207,
									"scores":	[-6.275739761577924]
								}, {
									"case":	208,
									"scores":	[-6.275739761577924]
								}, {
									"case":	209,
									"scores":	[-6.275739761577924]
								}, {
									"case":	210,
									"scores":	[-6.275739761577924]
								}, {
									"case":	211,
									"scores":	[-6.275739761577924]
								}, {
									"case":	212,
									"scores":	[-6.275739761577924]
								}, {
									"case":	213,
									"scores":	[-6.275739761577924]
								}, {
									"case":	214,
									"scores":	[-6.275739761577924]
								}, {
									"case":	215,
									"scores":	[-6.275739761577924]
								}, {
									"case":	216,
									"scores":	[-6.275739761577924]
								}, {
									"case":	217,
									"scores":	[-6.275739761577924]
								}, {
									"case":	218,
									"scores":	[-6.275739761577924]
								}, {
									"case":	219,
									"scores":	[-6.275739761577924]
								}, {
									"case":	220,
									"scores":	[-6.275739761577924]
								}, {
									"case":	221,
									"scores":	[-6.275739761577924]
								}, {
									"case":	222,
									"scores":	[-6.275739761577924]
								}, {
									"case":	223,
									"scores":	[-6.275739761577924]
								}, {
									"case":	224,
									"scores":	[-6.275739761577924]
								}, {
									"case":	225,
									"scores":	[-6.275739761577924]
								}, {
									"case":	226,
									"scores":	[-6.275739761577924]
								}, {
									"case":	227,
									"scores":	[-6.275739761577924]
								}, {
									"case":	228,
									"scores":	[-6.275739761577924]
								}, {
									"case":	229,
									"scores":	[-6.275739761577924]
								}, {
									"case":	230,
									"scores":	[-6.275739761577924]
								}, {
									"case":	231,
									"scores":	[-6.275739761577924]
								}, {
									"case":	232,
									"scores":	[-6.275739761577924]
								}, {
									"case":	233,
									"scores":	[-6.275739761577924]
								}, {
									"case":	234,
									"scores":	[-6.275739761577924]
								}, {
									"case":	235,
									"scores":	[-6.275739761577924]
								}, {
									"case":	236,
									"scores":	[-6.275739761577924]
								}, {
									"case":	237,
									"scores":	[-6.275739761577924]
								}, {
									"case":	238,
									"scores":	[-6.275739761577924]
								}, {
									"case":	239,
									"scores":	[-6.275739761577924]
								}, {
									"case":	240,
									"scores":	[-6.275739761577924]
								}, {
									"case":	241,
									"scores":	[-6.275739761577924]
								}, {
									"case":	242,
									"scores":	[-6.275739761577924]
								}, {
									"case":	243,
									"scores":	[-6.275739761577924]
								}, {
									"case":	244,
									"scores":	[-6.275739761577924]
								}, {
									"case":	245,
									"scores":	[-6.275739761577924]
								}, {
									"case":	246,
									"scores":	[-6.275739761577924]
								}, {
									"case":	247,
									"scores":	[-6.275739761577924]
								}, {
									"case":	248,
									"scores":	[-6.275739761577924]
								}, {
									"case":	249,
									"scores":	[-6.275739761577924]
								}, {
									"case":	250,
									"scores":	[-6.275739761577924]
								}, {
									"case":	251,
									"scores":	[-6.275739761577924]
								}, {
									"case":	252,
									"scores":	[-6.275739761577924]
								}, {
									"case":	253,
									"scores":	[-6.275739761577924]
								}, {
									"case":	254,
									"scores":	[-6.275739761577924]
								}, {
									"case":	255,
									"scores":	[-6.275739761577924]
								}, {
									"case":	256,
									"scores":	[-6.275739761577924]
								}, {
									"case":	257,
									"scores":	[-6.275739761577924]
								}, {
									"case":	258,
									"scores":	[-6.275739761577924]
								}, {
									"case":	259,
									"scores":	[-6.275739761577924]
								}, {
									"case":	260,
									"scores":	[-6.275739761577924]
								}, {
									"case":	261,
									"scores":	[-6.275739761577924]
								}, {
									"case":	262,
									"scores":	[-6.275739761577924]
								}, {
									"case":	263,
									"scores":	[-6.275739761577924]
								}, {
									"case":	264,
									"scores":	[-6.275739761577924]
								}, {
									"case":	265,
									"scores":	[-6.275739761577924]
								}, {
									"case":	266,
									"scores":	[-6.275739761577924]
								}, {
									"case":	267,
									"scores":	[-6.275739761577924]
								}, {
									"case":	268,
									"scores":	[-6.275739761577924]
								}, {
									"case":	269,
									"scores":	[-6.275739761577924]
								}, {
									"case":	270,
									"scores":	[-6.275739761577924]
								}, {
									"case":	271,
									"scores":	[-6.275739761577924]
								}, {
									"case":	272,
									"scores":	[-6.275739761577924]
								}, {
									"case":	273,
									"scores":	[-6.275739761577924]
								}, {
									"case":	274,
									"scores":	[-6.275739761577924]
								}, {
									"case":	275,
									"scores":	[-6.275739761577924]
								}, {
									"case":	276,
									"scores":	[-6.275739761577924]
								}, {
									"case":	277,
									"scores":	[-6.275739761577924]
								}, {
									"case":	278,
									"scores":	[-6.275739761577924]
								}, {
									"case":	279,
									"scores":	[-6.275739761577924]
								}, {
									"case":	280,
									"scores":	[-6.275739761577924]
								}, {
									"case":	281,
									"scores":	[-6.275739761577924]
								}, {
									"case":	282,
									"scores":	[-6.275739761577924]
								}, {
									"case":	283,
									"scores":	[-6.275739761577924]
								}, {
									"case":	284,
									"scores":	[-6.275739761577924]
								}, {
									"case":	285,
									"scores":	[-6.275739761577924]
								}, {
									"case":	286,
									"scores":	[-6.275739761577924]
								}, {
									"case":	287,
									"scores":	[-6.275739761577924]
								}, {
									"case":	288,
									"scores":	[-6.275739761577924]
								}, {
									"case":	289,
									"scores":	[-6.275739761577924]
								}, {
									"case":	290,
									"scores":	[-6.275739761577924]
								}, {
									"case":	291,
									"scores":	[-6.275739761577924]
								}, {
									"case":	292,
									"scores":	[-6.275739761577924]
								}, {
									"case":	293,
									"scores":	[-6.275739761577924]
								}, {
									"case":	294,
									"scores":	[-6.275739761577924]
								}, {
									"case":	295,
									"scores":	[-6.275739761577924]
								}, {
									"case":	296,
									"scores":	[-6.275739761577924]
								}, {
									"case":	297,
									"scores":	[-6.275739761577924]
								}, {
									"case":	298,
									"scores":	[-6.275739761577924]
								}, {
									"case":	299,
									"scores":	[-6.275739761577924]
								}, {
									"case":	300,
									"scores":	[-6.275739761577924]
								}, {
									"case":	301,
									"scores":	[-6.275739761577924]
								}, {
									"case":	302,
									"scores":	[-6.275739761577924]
								}, {
									"case":	303,
									"scores":	[-6.275739761577924]
								}, {
									"case":	304,
									"scores":	[-6.275739761577924]
								}, {
									"case":	305,
									"scores":	[-8.7529422685779235, -10.602403904577924, -8.60815576137792, -10.263351537577924, -10.098739956277925, -9.8538581445779236, -9.1420340275779228, -9.9376546015779237, -10.457115201577924, -10.457115201577924, -10.457115201577924, -10.457115201577924, -10.703154115377924, -10.703154115377924, -10.703154115377924, -10.668004318577923, -10.457115201577924, -10.457115201577924, -10.457115201577924]
								}, {
									"case":	306,
									"scores":	[-8.7539422685779229, -10.603403904577924, -8.6091557613779237, -10.264351537577923, -10.099739956277924, -9.8548581445779249, -9.143034027577924, -9.9386546015779249, -10.458115201577925, -10.458115201577925, -10.458115201577925, -10.458115201577925, -10.704154115377925, -10.704154115377925, -10.704154115377925, -10.669004318577922, -10.458115201577925, -10.458115201577925, -10.458115201577925]
								}]
						}, {
							"switch":	32,
							"types":	[[], [], [1], [], [], [], [3], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	126,
							"begin_column":	3,
							"end_line":	126,
							"end_column":	27,
							"patch_codes":	["if (!__is_neg(\"\", \"L126\", 19, &(php_element_dump_func), sizeof (php_element_dump_func), &(struc), sizeof (struc), &(myht), sizeof (myht), &(is_temp), sizeof (is_temp), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &(level), sizeof (level), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection)))\n    php_element_dump_func = php_array_element_dump;\n", "{\n}\n", "php_element_dump_func = (php_element_dump_func)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.8652290225779238, -8.2832274720779235, -7.0731614980779245, -8.292140266577924, -7.6772978335779243, -7.4675465015779245, -6.6762754715779238, -7.6064350015779238, -7.5231313115779237, -7.5231313115779237, -7.5231313115779237, -7.5231313115779237, -8.2810194115779243, -8.2810194115779243, -8.2810194115779243, -7.9923913115779239, -7.5231313115779237, -7.5231313115779237, -7.5231313115779237]
								}, {
									"case":	2,
									"scores":	[-6.275739761577924]
								}, {
									"case":	3,
									"scores":	[-6.275739761577924]
								}]
						}]
				}, {
					"line":	126,
					"switches":	[{
							"switch":	33,
							"types":	[[], [], [], [], [305, 306], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], [], [], [], [283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282], [], [], [], [], [], []],
							"begin_line":	127,
							"begin_column":	1,
							"end_line":	127,
							"end_column":	1,
							"patch_codes":	["memset(&(((**struc))).is_ref__gc, 0, sizeof (*(&(((**struc))).is_ref__gc)))", "memset(&(((**struc))).refcount__gc, 0, sizeof (*(&(((**struc))).refcount__gc)))", "memset(&(((**struc))).type, 0, sizeof (*(&(((**struc))).type)))", "memset(&(((**struc))).value, 0, sizeof (*(&(((**struc))).value)))", "memset(&(((**struc))).value.dval, 0, sizeof (*(&(((**struc))).value.dval)))", "memset(&(((**struc))).value.ht, 0, sizeof (*(&(((**struc))).value.ht)))", "memset(&(((**struc))).value.lval, 0, sizeof (*(&(((**struc))).value.lval)))", "memset(&(((**struc))).value.obj, 0, sizeof (*(&(((**struc))).value.obj)))", "memset(&(((**struc))).value.obj.handle, 0, sizeof (*(&(((**struc))).value.obj.handle)))", "memset(&(((**struc))).value.obj.handlers, 0, sizeof (*(&(((**struc))).value.obj.handlers)))", "memset(&(((**struc))).value.obj.handlers->add_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->add_ref)))", "memset(&(((**struc))).value.obj.handlers->call_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->call_method)))", "memset(&(((**struc))).value.obj.handlers->cast_object, 0, sizeof (*(&(((**struc))).value.obj.handlers->cast_object)))", "memset(&(((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*(&(((**struc))).value.obj.handlers->clone_obj)))", "memset(&(((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*(&(((**struc))).value.obj.handlers->compare_objects)))", "memset(&(((**struc))).value.obj.handlers->count_elements, 0, sizeof (*(&(((**struc))).value.obj.handlers->count_elements)))", "memset(&(((**struc))).value.obj.handlers->del_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->del_ref)))", "memset(&(((**struc))).value.obj.handlers->get, 0, sizeof (*(&(((**struc))).value.obj.handlers->get)))", "memset(&(((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_entry)))", "memset(&(((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_name)))", "memset(&(((**struc))).value.obj.handlers->get_closure, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_closure)))", "memset(&(((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_constructor)))", "memset(&(((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_debug_info)))", "memset(&(((**struc))).value.obj.handlers->get_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_method)))", "memset(&(((**struc))).value.obj.handlers->get_properties, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_properties)))", "memset(&(((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_dimension)))", "memset(&(((**struc))).value.obj.handlers->has_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_property)))", "memset(&(((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_dimension)))", "memset(&(((**struc))).value.obj.handlers->read_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_property)))", "memset(&(((**struc))).value.obj.handlers->set, 0, sizeof (*(&(((**struc))).value.obj.handlers->set)))", "memset(&(((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_dimension)))", "memset(&(((**struc))).value.obj.handlers->unset_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_property)))", "memset(&(((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_dimension)))", "memset(&(((**struc))).value.obj.handlers->write_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_property)))", "memset(&(((**struc))).value.str, 0, sizeof (*(&(((**struc))).value.str)))", "memset(&((**struc)).is_ref__gc, 0, sizeof (*(&((**struc)).is_ref__gc)))", "memset(&((**struc)).refcount__gc, 0, sizeof (*(&((**struc)).refcount__gc)))", "memset(&((**struc)).type, 0, sizeof (*(&((**struc)).type)))", "memset(&((**struc)).value, 0, sizeof (*(&((**struc)).value)))", "memset(&((**struc)).value.dval, 0, sizeof (*(&((**struc)).value.dval)))", "memset(&((**struc)).value.ht, 0, sizeof (*(&((**struc)).value.ht)))", "memset(&((**struc)).value.lval, 0, sizeof (*(&((**struc)).value.lval)))", "memset(&((**struc)).value.obj, 0, sizeof (*(&((**struc)).value.obj)))", "memset(&((**struc)).value.obj.handle, 0, sizeof (*(&((**struc)).value.obj.handle)))", "memset(&((**struc)).value.obj.handlers, 0, sizeof (*(&((**struc)).value.obj.handlers)))", "memset(&((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->add_ref)))", "memset(&((**struc)).value.obj.handlers->call_method, 0, sizeof (*(&((**struc)).value.obj.handlers->call_method)))", "memset(&((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(&((**struc)).value.obj.handlers->cast_object)))", "memset(&((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(&((**struc)).value.obj.handlers->clone_obj)))", "memset(&((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(&((**struc)).value.obj.handlers->compare_objects)))", "memset(&((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(&((**struc)).value.obj.handlers->count_elements)))", "memset(&((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->del_ref)))", "memset(&((**struc)).value.obj.handlers->get, 0, sizeof (*(&((**struc)).value.obj.handlers->get)))", "memset(&((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_entry)))", "memset(&((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_name)))", "memset(&((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(&((**struc)).value.obj.handlers->get_closure)))", "memset(&((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(&((**struc)).value.obj.handlers->get_constructor)))", "memset(&((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(&((**struc)).value.obj.handlers->get_debug_info)))", "memset(&((**struc)).value.obj.handlers->get_method, 0, sizeof (*(&((**struc)).value.obj.handlers->get_method)))", "memset(&((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(&((**struc)).value.obj.handlers->get_properties)))", "memset(&((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(&((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->has_dimension)))", "memset(&((**struc)).value.obj.handlers->has_property, 0, sizeof (*(&((**struc)).value.obj.handlers->has_property)))", "memset(&((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->read_dimension)))", "memset(&((**struc)).value.obj.handlers->read_property, 0, sizeof (*(&((**struc)).value.obj.handlers->read_property)))", "memset(&((**struc)).value.obj.handlers->set, 0, sizeof (*(&((**struc)).value.obj.handlers->set)))", "memset(&((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_dimension)))", "memset(&((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_property)))", "memset(&((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->write_dimension)))", "memset(&((**struc)).value.obj.handlers->write_property, 0, sizeof (*(&((**struc)).value.obj.handlers->write_property)))", "memset(&((**struc)).value.str, 0, sizeof (*(&((**struc)).value.str)))", "memset(&(**struc).is_ref__gc, 0, sizeof (*(&(**struc).is_ref__gc)))", "memset(&(**struc).refcount__gc, 0, sizeof (*(&(**struc).refcount__gc)))", "memset(&(**struc).type, 0, sizeof (*(&(**struc).type)))", "memset(&(**struc).value, 0, sizeof (*(&(**struc).value)))", "memset(&(**struc).value.dval, 0, sizeof (*(&(**struc).value.dval)))", "memset(&(**struc).value.ht, 0, sizeof (*(&(**struc).value.ht)))", "memset(&(**struc).value.lval, 0, sizeof (*(&(**struc).value.lval)))", "memset(&(**struc).value.obj, 0, sizeof (*(&(**struc).value.obj)))", "memset(&(**struc).value.obj.handle, 0, sizeof (*(&(**struc).value.obj.handle)))", "memset(&(**struc).value.obj.handlers, 0, sizeof (*(&(**struc).value.obj.handlers)))", "memset(&(**struc).value.str, 0, sizeof (*(&(**struc).value.str)))", "memset(&(**struc).value.str.len, 0, sizeof (*(&(**struc).value.str.len)))", "memset(&(**struc).value.str.val, 0, sizeof (*(&(**struc).value.str.val)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((((**struc))).value.ht, 0, sizeof (*((((**struc))).value.ht)))", "memset((((**struc))).value.obj.handlers, 0, sizeof (*((((**struc))).value.obj.handlers)))", "memset((((**struc))).value.obj.handlers->add_ref, 0, sizeof (*((((**struc))).value.obj.handlers->add_ref)))", "memset((((**struc))).value.obj.handlers->call_method, 0, sizeof (*((((**struc))).value.obj.handlers->call_method)))", "memset((((**struc))).value.obj.handlers->cast_object, 0, sizeof (*((((**struc))).value.obj.handlers->cast_object)))", "memset((((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*((((**struc))).value.obj.handlers->clone_obj)))", "memset((((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*((((**struc))).value.obj.handlers->compare_objects)))", "memset((((**struc))).value.obj.handlers->count_elements, 0, sizeof (*((((**struc))).value.obj.handlers->count_elements)))", "memset((((**struc))).value.obj.handlers->del_ref, 0, sizeof (*((((**struc))).value.obj.handlers->del_ref)))", "memset((((**struc))).value.obj.handlers->get, 0, sizeof (*((((**struc))).value.obj.handlers->get)))", "memset((((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_entry)))", "memset((((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_name)))", "memset((((**struc))).value.obj.handlers->get_closure, 0, sizeof (*((((**struc))).value.obj.handlers->get_closure)))", "memset((((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*((((**struc))).value.obj.handlers->get_constructor)))", "memset((((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*((((**struc))).value.obj.handlers->get_debug_info)))", "memset((((**struc))).value.obj.handlers->get_method, 0, sizeof (*((((**struc))).value.obj.handlers->get_method)))", "memset((((**struc))).value.obj.handlers->get_properties, 0, sizeof (*((((**struc))).value.obj.handlers->get_properties)))", "memset((((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset((((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->has_dimension)))", "memset((((**struc))).value.obj.handlers->has_property, 0, sizeof (*((((**struc))).value.obj.handlers->has_property)))", "memset((((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->read_dimension)))", "memset((((**struc))).value.obj.handlers->read_property, 0, sizeof (*((((**struc))).value.obj.handlers->read_property)))", "memset((((**struc))).value.obj.handlers->set, 0, sizeof (*((((**struc))).value.obj.handlers->set)))", "memset((((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->unset_dimension)))", "memset((((**struc))).value.obj.handlers->unset_property, 0, sizeof (*((((**struc))).value.obj.handlers->unset_property)))", "memset((((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->write_dimension)))", "memset((((**struc))).value.obj.handlers->write_property, 0, sizeof (*((((**struc))).value.obj.handlers->write_property)))", "memset(((**struc)).value.ht, 0, sizeof (*(((**struc)).value.ht)))", "memset(((**struc)).value.obj.handlers, 0, sizeof (*(((**struc)).value.obj.handlers)))", "memset(((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(((**struc)).value.obj.handlers->add_ref)))", "memset(((**struc)).value.obj.handlers->call_method, 0, sizeof (*(((**struc)).value.obj.handlers->call_method)))", "memset(((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(((**struc)).value.obj.handlers->cast_object)))", "memset(((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(((**struc)).value.obj.handlers->clone_obj)))", "memset(((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(((**struc)).value.obj.handlers->compare_objects)))", "memset(((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(((**struc)).value.obj.handlers->count_elements)))", "memset(((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(((**struc)).value.obj.handlers->del_ref)))", "memset(((**struc)).value.obj.handlers->get, 0, sizeof (*(((**struc)).value.obj.handlers->get)))", "memset(((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_entry)))", "memset(((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_name)))", "memset(((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(((**struc)).value.obj.handlers->get_closure)))", "memset(((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(((**struc)).value.obj.handlers->get_constructor)))", "memset(((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(((**struc)).value.obj.handlers->get_debug_info)))", "memset(((**struc)).value.obj.handlers->get_method, 0, sizeof (*(((**struc)).value.obj.handlers->get_method)))", "memset(((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(((**struc)).value.obj.handlers->get_properties)))", "memset(((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->has_dimension)))", "memset(((**struc)).value.obj.handlers->has_property, 0, sizeof (*(((**struc)).value.obj.handlers->has_property)))", "memset(((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->read_dimension)))", "memset(((**struc)).value.obj.handlers->read_property, 0, sizeof (*(((**struc)).value.obj.handlers->read_property)))", "memset(((**struc)).value.obj.handlers->set, 0, sizeof (*(((**struc)).value.obj.handlers->set)))", "memset(((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->unset_dimension)))", "memset(((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(((**struc)).value.obj.handlers->unset_property)))", "memset(((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->write_dimension)))", "memset(((**struc)).value.obj.handlers->write_property, 0, sizeof (*(((**struc)).value.obj.handlers->write_property)))", "memset((**struc).value.ht, 0, sizeof (*((**struc).value.ht)))", "memset((**struc).value.obj.handlers, 0, sizeof (*((**struc).value.obj.handlers)))", "memset((**struc).value.str.val, 0, sizeof (*((**struc).value.str.val)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw, 0, sizeof (*(executor_globals.saved_fpu_cw)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "((**(struc))).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*(struc), &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*struc, &(class_name), &class_name_len, 0)", "(**(struc)).value.ht->nApplyCount++", "(**(struc)).value.ht->nApplyCount--", "(class_name)++", "--(myht)->nApplyCount", "_efree(((class_name)))", "_efree(((myht)))", "is_temp = (0)", "is_temp = (1)", "is_temp = (2)", "is_temp = (3)", "is_temp = (4)", "is_temp = (5)", "is_temp = (6)", "is_temp = (7)", "is_temp = (is_temp)", "is_temp = (level)", "php_body_write(((**(struc)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(struc)).value.str.len))", "php_element_dump_func = (php_element_dump_func)", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted long input array (%s) overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted super-global (%s) variable overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(struc)).value.str.val)", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((myht)))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), (class_name), (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**(struc)).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, (myht) ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements((myht)) : 0)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((struc))))", "php_printf(\"\\\"%s\\\"\", (class_name))", "php_printf(\"\\\"%s\\\":protected\", (class_name))", "zend_hash_apply_with_arguments((myht), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy((myht))", "((**struc)).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "--myht->nApplyCount", "_efree((class_name))", "_efree((myht))", "exit(1)", "is_temp = 0", "php_body_write(((**struc).value.str.val), ((**struc).value.str.len))", "php_element_dump_func = php_array_element_dump", "php_element_dump_func = php_object_property_dump", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c\", level - 1, ' ')", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy(myht)", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L127\", 7, &(is_temp), sizeof (is_temp), &(php_element_dump_func), sizeof (php_element_dump_func), &(struc), sizeof (struc), &(myht), sizeof (myht), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &(level), sizeof (level)))\n    goto head_done;\n", "if (__is_neg(\"\", \"L127\", 7, &(is_temp), sizeof (is_temp), &(php_element_dump_func), sizeof (php_element_dump_func), &(struc), sizeof (struc), &(myht), sizeof (myht), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &(level), sizeof (level)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	2,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	3,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	4,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	5,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	6,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	7,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	8,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	9,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	10,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	11,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	12,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	13,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	14,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	15,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	16,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	17,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	18,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	19,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	20,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	21,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	22,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	23,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	24,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	25,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	26,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	27,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	28,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	29,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	30,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	31,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	32,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	33,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	34,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	35,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	36,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	37,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	38,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	39,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	40,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	41,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	42,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	43,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	44,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	45,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	46,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	47,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	48,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	49,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	50,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	51,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	52,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	53,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	54,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	55,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	56,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	57,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	58,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	59,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	60,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	61,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	62,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	63,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	64,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	65,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	66,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	67,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	68,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	69,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	70,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	71,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	72,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	73,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	74,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	75,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	76,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	77,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	78,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	79,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	80,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	81,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	82,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	83,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	84,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	85,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	86,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	87,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	88,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	89,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	90,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	91,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	92,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	93,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	94,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	95,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	96,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	97,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	98,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	99,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	100,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	101,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	102,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	103,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	104,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	105,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	106,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	107,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	108,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	109,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	110,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	111,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	112,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	113,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	114,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	115,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	116,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	117,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	118,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	119,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	120,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	121,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	122,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	123,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	124,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	125,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	126,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	127,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	128,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	129,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	130,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	131,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	132,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	133,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	134,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	135,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	136,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	137,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	138,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	139,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	140,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	141,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	142,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	143,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	144,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	145,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	146,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	147,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	148,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	149,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	150,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	151,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	152,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	153,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	154,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	155,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	156,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	157,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	158,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	159,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	160,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	161,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	162,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	163,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	164,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	165,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	166,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	167,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	168,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	169,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	170,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	171,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	172,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	173,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	174,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	175,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	176,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	177,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	178,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	179,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	180,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	181,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	182,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	183,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	184,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	185,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	186,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	187,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	188,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	189,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	190,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	191,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	192,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	193,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	194,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	195,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	196,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	197,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	198,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	199,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	200,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	201,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	202,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	203,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	204,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	205,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	206,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	207,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	208,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	209,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	210,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	211,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	212,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	213,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	214,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	215,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	216,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	217,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	218,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	219,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	220,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	221,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	222,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	223,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	224,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	225,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	226,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	227,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	228,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	229,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	230,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	231,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	232,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	233,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	234,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	235,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	236,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	237,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	238,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	239,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	240,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	241,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	242,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	243,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	244,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	245,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	246,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	247,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	248,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	249,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	250,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	251,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	252,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	253,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	254,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	255,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	256,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	257,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	258,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	259,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	260,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	261,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	262,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	263,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	264,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	265,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	266,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	267,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	268,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	269,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	270,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	271,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	272,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	273,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	274,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	275,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	276,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	277,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	278,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	279,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	280,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	281,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	282,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	283,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	284,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	285,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	286,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	287,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	288,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	289,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	290,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	291,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	292,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	293,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	294,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	295,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	296,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	297,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	298,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	299,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	300,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	301,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	302,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	303,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	304,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	305,
									"scores":	[-10.925009385260404, -8.8294575402604032, -11.807799177260407, -12.270810490960407, -10.845178137260405, -10.133354020260404, -10.928974594260403]
								}, {
									"case":	306,
									"scores":	[-10.926009385260404, -8.8304575402604044, -11.808799177260406, -12.271810490960409, -10.846178137260404, -10.134354020260405, -10.929974594260404]
								}]
						}, {
							"switch":	34,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	127,
							"begin_column":	3,
							"end_line":	127,
							"end_column":	13,
							"patch_codes":	["if (!__is_neg(\"\", \"L127\", 7, &(is_temp), sizeof (is_temp), &(php_element_dump_func), sizeof (php_element_dump_func), &(struc), sizeof (struc), &(myht), sizeof (myht), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &(level), sizeof (level)))\n    is_temp = 0;\n", "{\n}\n", "is_temp = (0 * class_name_len)", "is_temp = (0 * is_temp)", "is_temp = (0 * level)", "is_temp = (0)", "is_temp = (1)", "is_temp = (2)", "is_temp = (3)", "is_temp = (4)", "is_temp = (5)", "is_temp = (6)", "is_temp = (7)", "is_temp = (class_name != 0)", "is_temp = (class_name == 0)", "is_temp = (class_name_len != 0)", "is_temp = (class_name_len != is_temp)", "is_temp = (class_name_len * is_temp)", "is_temp = (class_name_len * level)", "is_temp = (class_name_len + 0)", "is_temp = (class_name_len + is_temp)", "is_temp = (class_name_len - 0)", "is_temp = (class_name_len - is_temp)", "is_temp = (class_name_len == 0)", "is_temp = (class_name_len == is_temp)", "is_temp = (is_temp != 0)", "is_temp = (is_temp * class_name_len)", "is_temp = (is_temp * level)", "is_temp = (is_temp + 0)", "is_temp = (is_temp - 0)", "is_temp = (is_temp == 0)", "is_temp = (is_temp)", "is_temp = (level != 0)", "is_temp = (level != class_name_len)", "is_temp = (level != is_temp)", "is_temp = (level * class_name_len)", "is_temp = (level * is_temp)", "is_temp = (level + 0)", "is_temp = (level + class_name_len)", "is_temp = (level + is_temp)", "is_temp = (level - 0)", "is_temp = (level - class_name_len)", "is_temp = (level - is_temp)", "is_temp = (level == 0)", "is_temp = (level == class_name_len)", "is_temp = (level == is_temp)", "is_temp = (level)", "is_temp = (myht != 0)", "is_temp = (myht == 0)", "is_temp = (php_element_dump_func != 0)", "is_temp = (php_element_dump_func == 0)", "is_temp = (struc != 0)", "is_temp = (struc == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.3119682492604046, -6.1374376242604045, -8.6736184547604047, -8.5104880786604049, -7.4873744842604051, -6.6961034542604043, -7.6262629842604044]
								}, {
									"case":	2,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	3,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	4,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	5,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	6,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	7,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	8,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	9,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	10,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	11,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	12,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	13,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	14,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	15,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	16,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	17,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	18,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	19,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	20,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	21,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	22,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	23,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	24,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	25,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	26,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	27,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	28,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	29,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	30,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	31,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	32,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	33,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	34,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	35,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	36,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	37,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	38,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	39,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	40,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	41,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	42,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	43,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	44,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	45,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	46,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	47,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	48,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	49,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	50,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	51,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	52,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	53,
									"scores":	[-6.2555370542604045]
								}]
						}]
				}, {
					"line":	127,
					"switches":	[{
							"switch":	35,
							"types":	[[], [], [], [], [305, 306], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], [], [], [], [283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282], [], [], [], [], [], []],
							"begin_line":	128,
							"begin_column":	1,
							"end_line":	128,
							"end_column":	1,
							"patch_codes":	["memset(&(((**struc))).is_ref__gc, 0, sizeof (*(&(((**struc))).is_ref__gc)))", "memset(&(((**struc))).refcount__gc, 0, sizeof (*(&(((**struc))).refcount__gc)))", "memset(&(((**struc))).type, 0, sizeof (*(&(((**struc))).type)))", "memset(&(((**struc))).value, 0, sizeof (*(&(((**struc))).value)))", "memset(&(((**struc))).value.dval, 0, sizeof (*(&(((**struc))).value.dval)))", "memset(&(((**struc))).value.ht, 0, sizeof (*(&(((**struc))).value.ht)))", "memset(&(((**struc))).value.lval, 0, sizeof (*(&(((**struc))).value.lval)))", "memset(&(((**struc))).value.obj, 0, sizeof (*(&(((**struc))).value.obj)))", "memset(&(((**struc))).value.obj.handle, 0, sizeof (*(&(((**struc))).value.obj.handle)))", "memset(&(((**struc))).value.obj.handlers, 0, sizeof (*(&(((**struc))).value.obj.handlers)))", "memset(&(((**struc))).value.obj.handlers->add_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->add_ref)))", "memset(&(((**struc))).value.obj.handlers->call_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->call_method)))", "memset(&(((**struc))).value.obj.handlers->cast_object, 0, sizeof (*(&(((**struc))).value.obj.handlers->cast_object)))", "memset(&(((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*(&(((**struc))).value.obj.handlers->clone_obj)))", "memset(&(((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*(&(((**struc))).value.obj.handlers->compare_objects)))", "memset(&(((**struc))).value.obj.handlers->count_elements, 0, sizeof (*(&(((**struc))).value.obj.handlers->count_elements)))", "memset(&(((**struc))).value.obj.handlers->del_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->del_ref)))", "memset(&(((**struc))).value.obj.handlers->get, 0, sizeof (*(&(((**struc))).value.obj.handlers->get)))", "memset(&(((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_entry)))", "memset(&(((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_name)))", "memset(&(((**struc))).value.obj.handlers->get_closure, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_closure)))", "memset(&(((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_constructor)))", "memset(&(((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_debug_info)))", "memset(&(((**struc))).value.obj.handlers->get_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_method)))", "memset(&(((**struc))).value.obj.handlers->get_properties, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_properties)))", "memset(&(((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_dimension)))", "memset(&(((**struc))).value.obj.handlers->has_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_property)))", "memset(&(((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_dimension)))", "memset(&(((**struc))).value.obj.handlers->read_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_property)))", "memset(&(((**struc))).value.obj.handlers->set, 0, sizeof (*(&(((**struc))).value.obj.handlers->set)))", "memset(&(((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_dimension)))", "memset(&(((**struc))).value.obj.handlers->unset_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_property)))", "memset(&(((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_dimension)))", "memset(&(((**struc))).value.obj.handlers->write_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_property)))", "memset(&(((**struc))).value.str, 0, sizeof (*(&(((**struc))).value.str)))", "memset(&((**struc)).is_ref__gc, 0, sizeof (*(&((**struc)).is_ref__gc)))", "memset(&((**struc)).refcount__gc, 0, sizeof (*(&((**struc)).refcount__gc)))", "memset(&((**struc)).type, 0, sizeof (*(&((**struc)).type)))", "memset(&((**struc)).value, 0, sizeof (*(&((**struc)).value)))", "memset(&((**struc)).value.dval, 0, sizeof (*(&((**struc)).value.dval)))", "memset(&((**struc)).value.ht, 0, sizeof (*(&((**struc)).value.ht)))", "memset(&((**struc)).value.lval, 0, sizeof (*(&((**struc)).value.lval)))", "memset(&((**struc)).value.obj, 0, sizeof (*(&((**struc)).value.obj)))", "memset(&((**struc)).value.obj.handle, 0, sizeof (*(&((**struc)).value.obj.handle)))", "memset(&((**struc)).value.obj.handlers, 0, sizeof (*(&((**struc)).value.obj.handlers)))", "memset(&((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->add_ref)))", "memset(&((**struc)).value.obj.handlers->call_method, 0, sizeof (*(&((**struc)).value.obj.handlers->call_method)))", "memset(&((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(&((**struc)).value.obj.handlers->cast_object)))", "memset(&((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(&((**struc)).value.obj.handlers->clone_obj)))", "memset(&((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(&((**struc)).value.obj.handlers->compare_objects)))", "memset(&((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(&((**struc)).value.obj.handlers->count_elements)))", "memset(&((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->del_ref)))", "memset(&((**struc)).value.obj.handlers->get, 0, sizeof (*(&((**struc)).value.obj.handlers->get)))", "memset(&((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_entry)))", "memset(&((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_name)))", "memset(&((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(&((**struc)).value.obj.handlers->get_closure)))", "memset(&((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(&((**struc)).value.obj.handlers->get_constructor)))", "memset(&((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(&((**struc)).value.obj.handlers->get_debug_info)))", "memset(&((**struc)).value.obj.handlers->get_method, 0, sizeof (*(&((**struc)).value.obj.handlers->get_method)))", "memset(&((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(&((**struc)).value.obj.handlers->get_properties)))", "memset(&((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(&((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->has_dimension)))", "memset(&((**struc)).value.obj.handlers->has_property, 0, sizeof (*(&((**struc)).value.obj.handlers->has_property)))", "memset(&((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->read_dimension)))", "memset(&((**struc)).value.obj.handlers->read_property, 0, sizeof (*(&((**struc)).value.obj.handlers->read_property)))", "memset(&((**struc)).value.obj.handlers->set, 0, sizeof (*(&((**struc)).value.obj.handlers->set)))", "memset(&((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_dimension)))", "memset(&((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_property)))", "memset(&((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->write_dimension)))", "memset(&((**struc)).value.obj.handlers->write_property, 0, sizeof (*(&((**struc)).value.obj.handlers->write_property)))", "memset(&((**struc)).value.str, 0, sizeof (*(&((**struc)).value.str)))", "memset(&(**struc).is_ref__gc, 0, sizeof (*(&(**struc).is_ref__gc)))", "memset(&(**struc).refcount__gc, 0, sizeof (*(&(**struc).refcount__gc)))", "memset(&(**struc).type, 0, sizeof (*(&(**struc).type)))", "memset(&(**struc).value, 0, sizeof (*(&(**struc).value)))", "memset(&(**struc).value.dval, 0, sizeof (*(&(**struc).value.dval)))", "memset(&(**struc).value.ht, 0, sizeof (*(&(**struc).value.ht)))", "memset(&(**struc).value.lval, 0, sizeof (*(&(**struc).value.lval)))", "memset(&(**struc).value.obj, 0, sizeof (*(&(**struc).value.obj)))", "memset(&(**struc).value.obj.handle, 0, sizeof (*(&(**struc).value.obj.handle)))", "memset(&(**struc).value.obj.handlers, 0, sizeof (*(&(**struc).value.obj.handlers)))", "memset(&(**struc).value.str, 0, sizeof (*(&(**struc).value.str)))", "memset(&(**struc).value.str.len, 0, sizeof (*(&(**struc).value.str.len)))", "memset(&(**struc).value.str.val, 0, sizeof (*(&(**struc).value.str.val)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((((**struc))).value.ht, 0, sizeof (*((((**struc))).value.ht)))", "memset((((**struc))).value.obj.handlers, 0, sizeof (*((((**struc))).value.obj.handlers)))", "memset((((**struc))).value.obj.handlers->add_ref, 0, sizeof (*((((**struc))).value.obj.handlers->add_ref)))", "memset((((**struc))).value.obj.handlers->call_method, 0, sizeof (*((((**struc))).value.obj.handlers->call_method)))", "memset((((**struc))).value.obj.handlers->cast_object, 0, sizeof (*((((**struc))).value.obj.handlers->cast_object)))", "memset((((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*((((**struc))).value.obj.handlers->clone_obj)))", "memset((((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*((((**struc))).value.obj.handlers->compare_objects)))", "memset((((**struc))).value.obj.handlers->count_elements, 0, sizeof (*((((**struc))).value.obj.handlers->count_elements)))", "memset((((**struc))).value.obj.handlers->del_ref, 0, sizeof (*((((**struc))).value.obj.handlers->del_ref)))", "memset((((**struc))).value.obj.handlers->get, 0, sizeof (*((((**struc))).value.obj.handlers->get)))", "memset((((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_entry)))", "memset((((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_name)))", "memset((((**struc))).value.obj.handlers->get_closure, 0, sizeof (*((((**struc))).value.obj.handlers->get_closure)))", "memset((((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*((((**struc))).value.obj.handlers->get_constructor)))", "memset((((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*((((**struc))).value.obj.handlers->get_debug_info)))", "memset((((**struc))).value.obj.handlers->get_method, 0, sizeof (*((((**struc))).value.obj.handlers->get_method)))", "memset((((**struc))).value.obj.handlers->get_properties, 0, sizeof (*((((**struc))).value.obj.handlers->get_properties)))", "memset((((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset((((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->has_dimension)))", "memset((((**struc))).value.obj.handlers->has_property, 0, sizeof (*((((**struc))).value.obj.handlers->has_property)))", "memset((((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->read_dimension)))", "memset((((**struc))).value.obj.handlers->read_property, 0, sizeof (*((((**struc))).value.obj.handlers->read_property)))", "memset((((**struc))).value.obj.handlers->set, 0, sizeof (*((((**struc))).value.obj.handlers->set)))", "memset((((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->unset_dimension)))", "memset((((**struc))).value.obj.handlers->unset_property, 0, sizeof (*((((**struc))).value.obj.handlers->unset_property)))", "memset((((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->write_dimension)))", "memset((((**struc))).value.obj.handlers->write_property, 0, sizeof (*((((**struc))).value.obj.handlers->write_property)))", "memset(((**struc)).value.ht, 0, sizeof (*(((**struc)).value.ht)))", "memset(((**struc)).value.obj.handlers, 0, sizeof (*(((**struc)).value.obj.handlers)))", "memset(((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(((**struc)).value.obj.handlers->add_ref)))", "memset(((**struc)).value.obj.handlers->call_method, 0, sizeof (*(((**struc)).value.obj.handlers->call_method)))", "memset(((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(((**struc)).value.obj.handlers->cast_object)))", "memset(((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(((**struc)).value.obj.handlers->clone_obj)))", "memset(((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(((**struc)).value.obj.handlers->compare_objects)))", "memset(((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(((**struc)).value.obj.handlers->count_elements)))", "memset(((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(((**struc)).value.obj.handlers->del_ref)))", "memset(((**struc)).value.obj.handlers->get, 0, sizeof (*(((**struc)).value.obj.handlers->get)))", "memset(((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_entry)))", "memset(((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_name)))", "memset(((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(((**struc)).value.obj.handlers->get_closure)))", "memset(((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(((**struc)).value.obj.handlers->get_constructor)))", "memset(((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(((**struc)).value.obj.handlers->get_debug_info)))", "memset(((**struc)).value.obj.handlers->get_method, 0, sizeof (*(((**struc)).value.obj.handlers->get_method)))", "memset(((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(((**struc)).value.obj.handlers->get_properties)))", "memset(((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->has_dimension)))", "memset(((**struc)).value.obj.handlers->has_property, 0, sizeof (*(((**struc)).value.obj.handlers->has_property)))", "memset(((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->read_dimension)))", "memset(((**struc)).value.obj.handlers->read_property, 0, sizeof (*(((**struc)).value.obj.handlers->read_property)))", "memset(((**struc)).value.obj.handlers->set, 0, sizeof (*(((**struc)).value.obj.handlers->set)))", "memset(((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->unset_dimension)))", "memset(((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(((**struc)).value.obj.handlers->unset_property)))", "memset(((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->write_dimension)))", "memset(((**struc)).value.obj.handlers->write_property, 0, sizeof (*(((**struc)).value.obj.handlers->write_property)))", "memset((**struc).value.ht, 0, sizeof (*((**struc).value.ht)))", "memset((**struc).value.obj.handlers, 0, sizeof (*((**struc).value.obj.handlers)))", "memset((**struc).value.str.val, 0, sizeof (*((**struc).value.str.val)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw, 0, sizeof (*(executor_globals.saved_fpu_cw)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "((**(struc))).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*(struc), &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*struc, &(class_name), &class_name_len, 0)", "(**(struc)).value.ht->nApplyCount++", "(**(struc)).value.ht->nApplyCount--", "(class_name)++", "--(myht)->nApplyCount", "_efree(((class_name)))", "_efree(((myht)))", "is_temp = (0)", "is_temp = (1)", "is_temp = (2)", "is_temp = (3)", "is_temp = (4)", "is_temp = (5)", "is_temp = (6)", "is_temp = (7)", "is_temp = (is_temp)", "is_temp = (level)", "php_body_write(((**(struc)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(struc)).value.str.len))", "php_element_dump_func = (php_element_dump_func)", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted long input array (%s) overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted super-global (%s) variable overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(struc)).value.str.val)", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((myht)))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), (class_name), (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**(struc)).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, (myht) ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements((myht)) : 0)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((struc))))", "php_printf(\"\\\"%s\\\"\", (class_name))", "php_printf(\"\\\"%s\\\":protected\", (class_name))", "zend_hash_apply_with_arguments((myht), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy((myht))", "((**struc)).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "--myht->nApplyCount", "_efree((class_name))", "_efree((myht))", "exit(1)", "is_temp = 0", "php_body_write(((**struc).value.str.val), ((**struc).value.str.len))", "php_element_dump_func = php_array_element_dump", "php_element_dump_func = php_object_property_dump", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c\", level - 1, ' ')", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy(myht)", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L128\", 7, &(is_temp), sizeof (is_temp), &(struc), sizeof (struc), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &(level), sizeof (level)))\n    goto head_done;\n", "if (__is_neg(\"\", \"L128\", 7, &(is_temp), sizeof (is_temp), &(struc), sizeof (struc), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &(level), sizeof (level)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.235334346942885]
								}, {
									"case":	2,
									"scores":	[-6.235334346942885]
								}, {
									"case":	3,
									"scores":	[-6.235334346942885]
								}, {
									"case":	4,
									"scores":	[-6.235334346942885]
								}, {
									"case":	5,
									"scores":	[-6.235334346942885]
								}, {
									"case":	6,
									"scores":	[-6.235334346942885]
								}, {
									"case":	7,
									"scores":	[-6.235334346942885]
								}, {
									"case":	8,
									"scores":	[-6.235334346942885]
								}, {
									"case":	9,
									"scores":	[-6.235334346942885]
								}, {
									"case":	10,
									"scores":	[-6.235334346942885]
								}, {
									"case":	11,
									"scores":	[-6.235334346942885]
								}, {
									"case":	12,
									"scores":	[-6.235334346942885]
								}, {
									"case":	13,
									"scores":	[-6.235334346942885]
								}, {
									"case":	14,
									"scores":	[-6.235334346942885]
								}, {
									"case":	15,
									"scores":	[-6.235334346942885]
								}, {
									"case":	16,
									"scores":	[-6.235334346942885]
								}, {
									"case":	17,
									"scores":	[-6.235334346942885]
								}, {
									"case":	18,
									"scores":	[-6.235334346942885]
								}, {
									"case":	19,
									"scores":	[-6.235334346942885]
								}, {
									"case":	20,
									"scores":	[-6.235334346942885]
								}, {
									"case":	21,
									"scores":	[-6.235334346942885]
								}, {
									"case":	22,
									"scores":	[-6.235334346942885]
								}, {
									"case":	23,
									"scores":	[-6.235334346942885]
								}, {
									"case":	24,
									"scores":	[-6.235334346942885]
								}, {
									"case":	25,
									"scores":	[-6.235334346942885]
								}, {
									"case":	26,
									"scores":	[-6.235334346942885]
								}, {
									"case":	27,
									"scores":	[-6.235334346942885]
								}, {
									"case":	28,
									"scores":	[-6.235334346942885]
								}, {
									"case":	29,
									"scores":	[-6.235334346942885]
								}, {
									"case":	30,
									"scores":	[-6.235334346942885]
								}, {
									"case":	31,
									"scores":	[-6.235334346942885]
								}, {
									"case":	32,
									"scores":	[-6.235334346942885]
								}, {
									"case":	33,
									"scores":	[-6.235334346942885]
								}, {
									"case":	34,
									"scores":	[-6.235334346942885]
								}, {
									"case":	35,
									"scores":	[-6.235334346942885]
								}, {
									"case":	36,
									"scores":	[-6.235334346942885]
								}, {
									"case":	37,
									"scores":	[-6.235334346942885]
								}, {
									"case":	38,
									"scores":	[-6.235334346942885]
								}, {
									"case":	39,
									"scores":	[-6.235334346942885]
								}, {
									"case":	40,
									"scores":	[-6.235334346942885]
								}, {
									"case":	41,
									"scores":	[-6.235334346942885]
								}, {
									"case":	42,
									"scores":	[-6.235334346942885]
								}, {
									"case":	43,
									"scores":	[-6.235334346942885]
								}, {
									"case":	44,
									"scores":	[-6.235334346942885]
								}, {
									"case":	45,
									"scores":	[-6.235334346942885]
								}, {
									"case":	46,
									"scores":	[-6.235334346942885]
								}, {
									"case":	47,
									"scores":	[-6.235334346942885]
								}, {
									"case":	48,
									"scores":	[-6.235334346942885]
								}, {
									"case":	49,
									"scores":	[-6.235334346942885]
								}, {
									"case":	50,
									"scores":	[-6.235334346942885]
								}, {
									"case":	51,
									"scores":	[-6.235334346942885]
								}, {
									"case":	52,
									"scores":	[-6.235334346942885]
								}, {
									"case":	53,
									"scores":	[-6.235334346942885]
								}, {
									"case":	54,
									"scores":	[-6.235334346942885]
								}, {
									"case":	55,
									"scores":	[-6.235334346942885]
								}, {
									"case":	56,
									"scores":	[-6.235334346942885]
								}, {
									"case":	57,
									"scores":	[-6.235334346942885]
								}, {
									"case":	58,
									"scores":	[-6.235334346942885]
								}, {
									"case":	59,
									"scores":	[-6.235334346942885]
								}, {
									"case":	60,
									"scores":	[-6.235334346942885]
								}, {
									"case":	61,
									"scores":	[-6.235334346942885]
								}, {
									"case":	62,
									"scores":	[-6.235334346942885]
								}, {
									"case":	63,
									"scores":	[-6.235334346942885]
								}, {
									"case":	64,
									"scores":	[-6.235334346942885]
								}, {
									"case":	65,
									"scores":	[-6.235334346942885]
								}, {
									"case":	66,
									"scores":	[-6.235334346942885]
								}, {
									"case":	67,
									"scores":	[-6.235334346942885]
								}, {
									"case":	68,
									"scores":	[-6.235334346942885]
								}, {
									"case":	69,
									"scores":	[-6.235334346942885]
								}, {
									"case":	70,
									"scores":	[-6.235334346942885]
								}, {
									"case":	71,
									"scores":	[-6.235334346942885]
								}, {
									"case":	72,
									"scores":	[-6.235334346942885]
								}, {
									"case":	73,
									"scores":	[-6.235334346942885]
								}, {
									"case":	74,
									"scores":	[-6.235334346942885]
								}, {
									"case":	75,
									"scores":	[-6.235334346942885]
								}, {
									"case":	76,
									"scores":	[-6.235334346942885]
								}, {
									"case":	77,
									"scores":	[-6.235334346942885]
								}, {
									"case":	78,
									"scores":	[-6.235334346942885]
								}, {
									"case":	79,
									"scores":	[-6.235334346942885]
								}, {
									"case":	80,
									"scores":	[-6.235334346942885]
								}, {
									"case":	81,
									"scores":	[-6.235334346942885]
								}, {
									"case":	82,
									"scores":	[-6.235334346942885]
								}, {
									"case":	83,
									"scores":	[-6.235334346942885]
								}, {
									"case":	84,
									"scores":	[-6.235334346942885]
								}, {
									"case":	85,
									"scores":	[-6.235334346942885]
								}, {
									"case":	86,
									"scores":	[-6.235334346942885]
								}, {
									"case":	87,
									"scores":	[-6.235334346942885]
								}, {
									"case":	88,
									"scores":	[-6.235334346942885]
								}, {
									"case":	89,
									"scores":	[-6.235334346942885]
								}, {
									"case":	90,
									"scores":	[-6.235334346942885]
								}, {
									"case":	91,
									"scores":	[-6.235334346942885]
								}, {
									"case":	92,
									"scores":	[-6.235334346942885]
								}, {
									"case":	93,
									"scores":	[-6.235334346942885]
								}, {
									"case":	94,
									"scores":	[-6.235334346942885]
								}, {
									"case":	95,
									"scores":	[-6.235334346942885]
								}, {
									"case":	96,
									"scores":	[-6.235334346942885]
								}, {
									"case":	97,
									"scores":	[-6.235334346942885]
								}, {
									"case":	98,
									"scores":	[-6.235334346942885]
								}, {
									"case":	99,
									"scores":	[-6.235334346942885]
								}, {
									"case":	100,
									"scores":	[-6.235334346942885]
								}, {
									"case":	101,
									"scores":	[-6.235334346942885]
								}, {
									"case":	102,
									"scores":	[-6.235334346942885]
								}, {
									"case":	103,
									"scores":	[-6.235334346942885]
								}, {
									"case":	104,
									"scores":	[-6.235334346942885]
								}, {
									"case":	105,
									"scores":	[-6.235334346942885]
								}, {
									"case":	106,
									"scores":	[-6.235334346942885]
								}, {
									"case":	107,
									"scores":	[-6.235334346942885]
								}, {
									"case":	108,
									"scores":	[-6.235334346942885]
								}, {
									"case":	109,
									"scores":	[-6.235334346942885]
								}, {
									"case":	110,
									"scores":	[-6.235334346942885]
								}, {
									"case":	111,
									"scores":	[-6.235334346942885]
								}, {
									"case":	112,
									"scores":	[-6.235334346942885]
								}, {
									"case":	113,
									"scores":	[-6.235334346942885]
								}, {
									"case":	114,
									"scores":	[-6.235334346942885]
								}, {
									"case":	115,
									"scores":	[-6.235334346942885]
								}, {
									"case":	116,
									"scores":	[-6.235334346942885]
								}, {
									"case":	117,
									"scores":	[-6.235334346942885]
								}, {
									"case":	118,
									"scores":	[-6.235334346942885]
								}, {
									"case":	119,
									"scores":	[-6.235334346942885]
								}, {
									"case":	120,
									"scores":	[-6.235334346942885]
								}, {
									"case":	121,
									"scores":	[-6.235334346942885]
								}, {
									"case":	122,
									"scores":	[-6.235334346942885]
								}, {
									"case":	123,
									"scores":	[-6.235334346942885]
								}, {
									"case":	124,
									"scores":	[-6.235334346942885]
								}, {
									"case":	125,
									"scores":	[-6.235334346942885]
								}, {
									"case":	126,
									"scores":	[-6.235334346942885]
								}, {
									"case":	127,
									"scores":	[-6.235334346942885]
								}, {
									"case":	128,
									"scores":	[-6.235334346942885]
								}, {
									"case":	129,
									"scores":	[-6.235334346942885]
								}, {
									"case":	130,
									"scores":	[-6.235334346942885]
								}, {
									"case":	131,
									"scores":	[-6.235334346942885]
								}, {
									"case":	132,
									"scores":	[-6.235334346942885]
								}, {
									"case":	133,
									"scores":	[-6.235334346942885]
								}, {
									"case":	134,
									"scores":	[-6.235334346942885]
								}, {
									"case":	135,
									"scores":	[-6.235334346942885]
								}, {
									"case":	136,
									"scores":	[-6.235334346942885]
								}, {
									"case":	137,
									"scores":	[-6.235334346942885]
								}, {
									"case":	138,
									"scores":	[-6.235334346942885]
								}, {
									"case":	139,
									"scores":	[-6.235334346942885]
								}, {
									"case":	140,
									"scores":	[-6.235334346942885]
								}, {
									"case":	141,
									"scores":	[-6.235334346942885]
								}, {
									"case":	142,
									"scores":	[-6.235334346942885]
								}, {
									"case":	143,
									"scores":	[-6.235334346942885]
								}, {
									"case":	144,
									"scores":	[-6.235334346942885]
								}, {
									"case":	145,
									"scores":	[-6.235334346942885]
								}, {
									"case":	146,
									"scores":	[-6.235334346942885]
								}, {
									"case":	147,
									"scores":	[-6.235334346942885]
								}, {
									"case":	148,
									"scores":	[-6.235334346942885]
								}, {
									"case":	149,
									"scores":	[-6.235334346942885]
								}, {
									"case":	150,
									"scores":	[-6.235334346942885]
								}, {
									"case":	151,
									"scores":	[-6.235334346942885]
								}, {
									"case":	152,
									"scores":	[-6.235334346942885]
								}, {
									"case":	153,
									"scores":	[-6.235334346942885]
								}, {
									"case":	154,
									"scores":	[-6.235334346942885]
								}, {
									"case":	155,
									"scores":	[-6.235334346942885]
								}, {
									"case":	156,
									"scores":	[-6.235334346942885]
								}, {
									"case":	157,
									"scores":	[-6.235334346942885]
								}, {
									"case":	158,
									"scores":	[-6.235334346942885]
								}, {
									"case":	159,
									"scores":	[-6.235334346942885]
								}, {
									"case":	160,
									"scores":	[-6.235334346942885]
								}, {
									"case":	161,
									"scores":	[-6.235334346942885]
								}, {
									"case":	162,
									"scores":	[-6.235334346942885]
								}, {
									"case":	163,
									"scores":	[-6.235334346942885]
								}, {
									"case":	164,
									"scores":	[-6.235334346942885]
								}, {
									"case":	165,
									"scores":	[-6.235334346942885]
								}, {
									"case":	166,
									"scores":	[-6.235334346942885]
								}, {
									"case":	167,
									"scores":	[-6.235334346942885]
								}, {
									"case":	168,
									"scores":	[-6.235334346942885]
								}, {
									"case":	169,
									"scores":	[-6.235334346942885]
								}, {
									"case":	170,
									"scores":	[-6.235334346942885]
								}, {
									"case":	171,
									"scores":	[-6.235334346942885]
								}, {
									"case":	172,
									"scores":	[-6.235334346942885]
								}, {
									"case":	173,
									"scores":	[-6.235334346942885]
								}, {
									"case":	174,
									"scores":	[-6.235334346942885]
								}, {
									"case":	175,
									"scores":	[-6.235334346942885]
								}, {
									"case":	176,
									"scores":	[-6.235334346942885]
								}, {
									"case":	177,
									"scores":	[-6.235334346942885]
								}, {
									"case":	178,
									"scores":	[-6.235334346942885]
								}, {
									"case":	179,
									"scores":	[-6.235334346942885]
								}, {
									"case":	180,
									"scores":	[-6.235334346942885]
								}, {
									"case":	181,
									"scores":	[-6.235334346942885]
								}, {
									"case":	182,
									"scores":	[-6.235334346942885]
								}, {
									"case":	183,
									"scores":	[-6.235334346942885]
								}, {
									"case":	184,
									"scores":	[-6.235334346942885]
								}, {
									"case":	185,
									"scores":	[-6.235334346942885]
								}, {
									"case":	186,
									"scores":	[-6.235334346942885]
								}, {
									"case":	187,
									"scores":	[-6.235334346942885]
								}, {
									"case":	188,
									"scores":	[-6.235334346942885]
								}, {
									"case":	189,
									"scores":	[-6.235334346942885]
								}, {
									"case":	190,
									"scores":	[-6.235334346942885]
								}, {
									"case":	191,
									"scores":	[-6.235334346942885]
								}, {
									"case":	192,
									"scores":	[-6.235334346942885]
								}, {
									"case":	193,
									"scores":	[-6.235334346942885]
								}, {
									"case":	194,
									"scores":	[-6.235334346942885]
								}, {
									"case":	195,
									"scores":	[-6.235334346942885]
								}, {
									"case":	196,
									"scores":	[-6.235334346942885]
								}, {
									"case":	197,
									"scores":	[-6.235334346942885]
								}, {
									"case":	198,
									"scores":	[-6.235334346942885]
								}, {
									"case":	199,
									"scores":	[-6.235334346942885]
								}, {
									"case":	200,
									"scores":	[-6.235334346942885]
								}, {
									"case":	201,
									"scores":	[-6.235334346942885]
								}, {
									"case":	202,
									"scores":	[-6.235334346942885]
								}, {
									"case":	203,
									"scores":	[-6.235334346942885]
								}, {
									"case":	204,
									"scores":	[-6.235334346942885]
								}, {
									"case":	205,
									"scores":	[-6.235334346942885]
								}, {
									"case":	206,
									"scores":	[-6.235334346942885]
								}, {
									"case":	207,
									"scores":	[-6.235334346942885]
								}, {
									"case":	208,
									"scores":	[-6.235334346942885]
								}, {
									"case":	209,
									"scores":	[-6.235334346942885]
								}, {
									"case":	210,
									"scores":	[-6.235334346942885]
								}, {
									"case":	211,
									"scores":	[-6.235334346942885]
								}, {
									"case":	212,
									"scores":	[-6.235334346942885]
								}, {
									"case":	213,
									"scores":	[-6.235334346942885]
								}, {
									"case":	214,
									"scores":	[-6.235334346942885]
								}, {
									"case":	215,
									"scores":	[-6.235334346942885]
								}, {
									"case":	216,
									"scores":	[-6.235334346942885]
								}, {
									"case":	217,
									"scores":	[-6.235334346942885]
								}, {
									"case":	218,
									"scores":	[-6.235334346942885]
								}, {
									"case":	219,
									"scores":	[-6.235334346942885]
								}, {
									"case":	220,
									"scores":	[-6.235334346942885]
								}, {
									"case":	221,
									"scores":	[-6.235334346942885]
								}, {
									"case":	222,
									"scores":	[-6.235334346942885]
								}, {
									"case":	223,
									"scores":	[-6.235334346942885]
								}, {
									"case":	224,
									"scores":	[-6.235334346942885]
								}, {
									"case":	225,
									"scores":	[-6.235334346942885]
								}, {
									"case":	226,
									"scores":	[-6.235334346942885]
								}, {
									"case":	227,
									"scores":	[-6.235334346942885]
								}, {
									"case":	228,
									"scores":	[-6.235334346942885]
								}, {
									"case":	229,
									"scores":	[-6.235334346942885]
								}, {
									"case":	230,
									"scores":	[-6.235334346942885]
								}, {
									"case":	231,
									"scores":	[-6.235334346942885]
								}, {
									"case":	232,
									"scores":	[-6.235334346942885]
								}, {
									"case":	233,
									"scores":	[-6.235334346942885]
								}, {
									"case":	234,
									"scores":	[-6.235334346942885]
								}, {
									"case":	235,
									"scores":	[-6.235334346942885]
								}, {
									"case":	236,
									"scores":	[-6.235334346942885]
								}, {
									"case":	237,
									"scores":	[-6.235334346942885]
								}, {
									"case":	238,
									"scores":	[-6.235334346942885]
								}, {
									"case":	239,
									"scores":	[-6.235334346942885]
								}, {
									"case":	240,
									"scores":	[-6.235334346942885]
								}, {
									"case":	241,
									"scores":	[-6.235334346942885]
								}, {
									"case":	242,
									"scores":	[-6.235334346942885]
								}, {
									"case":	243,
									"scores":	[-6.235334346942885]
								}, {
									"case":	244,
									"scores":	[-6.235334346942885]
								}, {
									"case":	245,
									"scores":	[-6.235334346942885]
								}, {
									"case":	246,
									"scores":	[-6.235334346942885]
								}, {
									"case":	247,
									"scores":	[-6.235334346942885]
								}, {
									"case":	248,
									"scores":	[-6.235334346942885]
								}, {
									"case":	249,
									"scores":	[-6.235334346942885]
								}, {
									"case":	250,
									"scores":	[-6.235334346942885]
								}, {
									"case":	251,
									"scores":	[-6.235334346942885]
								}, {
									"case":	252,
									"scores":	[-6.235334346942885]
								}, {
									"case":	253,
									"scores":	[-6.235334346942885]
								}, {
									"case":	254,
									"scores":	[-6.235334346942885]
								}, {
									"case":	255,
									"scores":	[-6.235334346942885]
								}, {
									"case":	256,
									"scores":	[-6.235334346942885]
								}, {
									"case":	257,
									"scores":	[-6.235334346942885]
								}, {
									"case":	258,
									"scores":	[-6.235334346942885]
								}, {
									"case":	259,
									"scores":	[-6.235334346942885]
								}, {
									"case":	260,
									"scores":	[-6.235334346942885]
								}, {
									"case":	261,
									"scores":	[-6.235334346942885]
								}, {
									"case":	262,
									"scores":	[-6.235334346942885]
								}, {
									"case":	263,
									"scores":	[-6.235334346942885]
								}, {
									"case":	264,
									"scores":	[-6.235334346942885]
								}, {
									"case":	265,
									"scores":	[-6.235334346942885]
								}, {
									"case":	266,
									"scores":	[-6.235334346942885]
								}, {
									"case":	267,
									"scores":	[-6.235334346942885]
								}, {
									"case":	268,
									"scores":	[-6.235334346942885]
								}, {
									"case":	269,
									"scores":	[-6.235334346942885]
								}, {
									"case":	270,
									"scores":	[-6.235334346942885]
								}, {
									"case":	271,
									"scores":	[-6.235334346942885]
								}, {
									"case":	272,
									"scores":	[-6.235334346942885]
								}, {
									"case":	273,
									"scores":	[-6.235334346942885]
								}, {
									"case":	274,
									"scores":	[-6.235334346942885]
								}, {
									"case":	275,
									"scores":	[-6.235334346942885]
								}, {
									"case":	276,
									"scores":	[-6.235334346942885]
								}, {
									"case":	277,
									"scores":	[-6.235334346942885]
								}, {
									"case":	278,
									"scores":	[-6.235334346942885]
								}, {
									"case":	279,
									"scores":	[-6.235334346942885]
								}, {
									"case":	280,
									"scores":	[-6.235334346942885]
								}, {
									"case":	281,
									"scores":	[-6.235334346942885]
								}, {
									"case":	282,
									"scores":	[-6.235334346942885]
								}, {
									"case":	283,
									"scores":	[-6.235334346942885]
								}, {
									"case":	284,
									"scores":	[-6.235334346942885]
								}, {
									"case":	285,
									"scores":	[-6.235334346942885]
								}, {
									"case":	286,
									"scores":	[-6.235334346942885]
								}, {
									"case":	287,
									"scores":	[-6.235334346942885]
								}, {
									"case":	288,
									"scores":	[-6.235334346942885]
								}, {
									"case":	289,
									"scores":	[-6.235334346942885]
								}, {
									"case":	290,
									"scores":	[-6.235334346942885]
								}, {
									"case":	291,
									"scores":	[-6.235334346942885]
								}, {
									"case":	292,
									"scores":	[-6.235334346942885]
								}, {
									"case":	293,
									"scores":	[-6.235334346942885]
								}, {
									"case":	294,
									"scores":	[-6.235334346942885]
								}, {
									"case":	295,
									"scores":	[-6.235334346942885]
								}, {
									"case":	296,
									"scores":	[-6.235334346942885]
								}, {
									"case":	297,
									"scores":	[-6.235334346942885]
								}, {
									"case":	298,
									"scores":	[-6.235334346942885]
								}, {
									"case":	299,
									"scores":	[-6.235334346942885]
								}, {
									"case":	300,
									"scores":	[-6.235334346942885]
								}, {
									"case":	301,
									"scores":	[-6.235334346942885]
								}, {
									"case":	302,
									"scores":	[-6.235334346942885]
								}, {
									"case":	303,
									"scores":	[-6.235334346942885]
								}, {
									"case":	304,
									"scores":	[-6.235334346942885]
								}, {
									"case":	305,
									"scores":	[-9.5309437393428844, -11.220283531342885, -11.148031145042886, -8.2419418943428848, -10.777466501342886, -10.065642384342885, -10.341458948342884]
								}, {
									"case":	306,
									"scores":	[-9.5319437393428839, -11.221283531342884, -11.149031145042887, -8.2429418943428843, -10.778466501342885, -10.066642384342886, -10.342458948342884]
								}]
						}, {
							"switch":	36,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	128,
							"begin_column":	3,
							"end_line":	128,
							"end_column":	8,
							"patch_codes":	["if (!__is_neg(\"\", \"L128\", 7, &(is_temp), sizeof (is_temp), &(struc), sizeof (struc), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &(level), sizeof (level)))\n    goto head_done;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.8989297819428845, -6.1408627574428856, -7.912285401842885, -5.9140799169428853, -7.7428551869428848, -6.9515841569428849, -7.4029052769428851]
								}]
						}]
				}, {
					"line":	142,
					"switches":	[{
							"switch":	39,
							"types":	[[], [], [], [], [306, 307], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246], [], [], [], [284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305], [247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], [], [], [], [], [], []],
							"begin_line":	143,
							"begin_column":	2,
							"end_line":	143,
							"end_column":	2,
							"patch_codes":	["memset(&(((**struc))).is_ref__gc, 0, sizeof (*(&(((**struc))).is_ref__gc)))", "memset(&(((**struc))).refcount__gc, 0, sizeof (*(&(((**struc))).refcount__gc)))", "memset(&(((**struc))).type, 0, sizeof (*(&(((**struc))).type)))", "memset(&(((**struc))).value, 0, sizeof (*(&(((**struc))).value)))", "memset(&(((**struc))).value.dval, 0, sizeof (*(&(((**struc))).value.dval)))", "memset(&(((**struc))).value.ht, 0, sizeof (*(&(((**struc))).value.ht)))", "memset(&(((**struc))).value.lval, 0, sizeof (*(&(((**struc))).value.lval)))", "memset(&(((**struc))).value.obj, 0, sizeof (*(&(((**struc))).value.obj)))", "memset(&(((**struc))).value.obj.handle, 0, sizeof (*(&(((**struc))).value.obj.handle)))", "memset(&(((**struc))).value.obj.handlers, 0, sizeof (*(&(((**struc))).value.obj.handlers)))", "memset(&(((**struc))).value.obj.handlers->add_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->add_ref)))", "memset(&(((**struc))).value.obj.handlers->call_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->call_method)))", "memset(&(((**struc))).value.obj.handlers->cast_object, 0, sizeof (*(&(((**struc))).value.obj.handlers->cast_object)))", "memset(&(((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*(&(((**struc))).value.obj.handlers->clone_obj)))", "memset(&(((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*(&(((**struc))).value.obj.handlers->compare_objects)))", "memset(&(((**struc))).value.obj.handlers->count_elements, 0, sizeof (*(&(((**struc))).value.obj.handlers->count_elements)))", "memset(&(((**struc))).value.obj.handlers->del_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->del_ref)))", "memset(&(((**struc))).value.obj.handlers->get, 0, sizeof (*(&(((**struc))).value.obj.handlers->get)))", "memset(&(((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_entry)))", "memset(&(((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_name)))", "memset(&(((**struc))).value.obj.handlers->get_closure, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_closure)))", "memset(&(((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_constructor)))", "memset(&(((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_debug_info)))", "memset(&(((**struc))).value.obj.handlers->get_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_method)))", "memset(&(((**struc))).value.obj.handlers->get_properties, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_properties)))", "memset(&(((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_dimension)))", "memset(&(((**struc))).value.obj.handlers->has_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_property)))", "memset(&(((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_dimension)))", "memset(&(((**struc))).value.obj.handlers->read_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_property)))", "memset(&(((**struc))).value.obj.handlers->set, 0, sizeof (*(&(((**struc))).value.obj.handlers->set)))", "memset(&(((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_dimension)))", "memset(&(((**struc))).value.obj.handlers->unset_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_property)))", "memset(&(((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_dimension)))", "memset(&(((**struc))).value.obj.handlers->write_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_property)))", "memset(&(((**struc))).value.str, 0, sizeof (*(&(((**struc))).value.str)))", "memset(&((**struc)).is_ref__gc, 0, sizeof (*(&((**struc)).is_ref__gc)))", "memset(&((**struc)).refcount__gc, 0, sizeof (*(&((**struc)).refcount__gc)))", "memset(&((**struc)).type, 0, sizeof (*(&((**struc)).type)))", "memset(&((**struc)).value, 0, sizeof (*(&((**struc)).value)))", "memset(&((**struc)).value.dval, 0, sizeof (*(&((**struc)).value.dval)))", "memset(&((**struc)).value.ht, 0, sizeof (*(&((**struc)).value.ht)))", "memset(&((**struc)).value.lval, 0, sizeof (*(&((**struc)).value.lval)))", "memset(&((**struc)).value.obj, 0, sizeof (*(&((**struc)).value.obj)))", "memset(&((**struc)).value.obj.handle, 0, sizeof (*(&((**struc)).value.obj.handle)))", "memset(&((**struc)).value.obj.handlers, 0, sizeof (*(&((**struc)).value.obj.handlers)))", "memset(&((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->add_ref)))", "memset(&((**struc)).value.obj.handlers->call_method, 0, sizeof (*(&((**struc)).value.obj.handlers->call_method)))", "memset(&((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(&((**struc)).value.obj.handlers->cast_object)))", "memset(&((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(&((**struc)).value.obj.handlers->clone_obj)))", "memset(&((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(&((**struc)).value.obj.handlers->compare_objects)))", "memset(&((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(&((**struc)).value.obj.handlers->count_elements)))", "memset(&((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->del_ref)))", "memset(&((**struc)).value.obj.handlers->get, 0, sizeof (*(&((**struc)).value.obj.handlers->get)))", "memset(&((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_entry)))", "memset(&((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_name)))", "memset(&((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(&((**struc)).value.obj.handlers->get_closure)))", "memset(&((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(&((**struc)).value.obj.handlers->get_constructor)))", "memset(&((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(&((**struc)).value.obj.handlers->get_debug_info)))", "memset(&((**struc)).value.obj.handlers->get_method, 0, sizeof (*(&((**struc)).value.obj.handlers->get_method)))", "memset(&((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(&((**struc)).value.obj.handlers->get_properties)))", "memset(&((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(&((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->has_dimension)))", "memset(&((**struc)).value.obj.handlers->has_property, 0, sizeof (*(&((**struc)).value.obj.handlers->has_property)))", "memset(&((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->read_dimension)))", "memset(&((**struc)).value.obj.handlers->read_property, 0, sizeof (*(&((**struc)).value.obj.handlers->read_property)))", "memset(&((**struc)).value.obj.handlers->set, 0, sizeof (*(&((**struc)).value.obj.handlers->set)))", "memset(&((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_dimension)))", "memset(&((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_property)))", "memset(&((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->write_dimension)))", "memset(&((**struc)).value.obj.handlers->write_property, 0, sizeof (*(&((**struc)).value.obj.handlers->write_property)))", "memset(&((**struc)).value.str, 0, sizeof (*(&((**struc)).value.str)))", "memset(&(**struc).is_ref__gc, 0, sizeof (*(&(**struc).is_ref__gc)))", "memset(&(**struc).refcount__gc, 0, sizeof (*(&(**struc).refcount__gc)))", "memset(&(**struc).type, 0, sizeof (*(&(**struc).type)))", "memset(&(**struc).value, 0, sizeof (*(&(**struc).value)))", "memset(&(**struc).value.dval, 0, sizeof (*(&(**struc).value.dval)))", "memset(&(**struc).value.ht, 0, sizeof (*(&(**struc).value.ht)))", "memset(&(**struc).value.lval, 0, sizeof (*(&(**struc).value.lval)))", "memset(&(**struc).value.obj, 0, sizeof (*(&(**struc).value.obj)))", "memset(&(**struc).value.obj.handle, 0, sizeof (*(&(**struc).value.obj.handle)))", "memset(&(**struc).value.obj.handlers, 0, sizeof (*(&(**struc).value.obj.handlers)))", "memset(&(**struc).value.str, 0, sizeof (*(&(**struc).value.str)))", "memset(&(**struc).value.str.len, 0, sizeof (*(&(**struc).value.str.len)))", "memset(&(**struc).value.str.val, 0, sizeof (*(&(**struc).value.str.val)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((((**struc))).value.ht, 0, sizeof (*((((**struc))).value.ht)))", "memset((((**struc))).value.obj.handlers, 0, sizeof (*((((**struc))).value.obj.handlers)))", "memset((((**struc))).value.obj.handlers->add_ref, 0, sizeof (*((((**struc))).value.obj.handlers->add_ref)))", "memset((((**struc))).value.obj.handlers->call_method, 0, sizeof (*((((**struc))).value.obj.handlers->call_method)))", "memset((((**struc))).value.obj.handlers->cast_object, 0, sizeof (*((((**struc))).value.obj.handlers->cast_object)))", "memset((((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*((((**struc))).value.obj.handlers->clone_obj)))", "memset((((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*((((**struc))).value.obj.handlers->compare_objects)))", "memset((((**struc))).value.obj.handlers->count_elements, 0, sizeof (*((((**struc))).value.obj.handlers->count_elements)))", "memset((((**struc))).value.obj.handlers->del_ref, 0, sizeof (*((((**struc))).value.obj.handlers->del_ref)))", "memset((((**struc))).value.obj.handlers->get, 0, sizeof (*((((**struc))).value.obj.handlers->get)))", "memset((((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_entry)))", "memset((((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_name)))", "memset((((**struc))).value.obj.handlers->get_closure, 0, sizeof (*((((**struc))).value.obj.handlers->get_closure)))", "memset((((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*((((**struc))).value.obj.handlers->get_constructor)))", "memset((((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*((((**struc))).value.obj.handlers->get_debug_info)))", "memset((((**struc))).value.obj.handlers->get_method, 0, sizeof (*((((**struc))).value.obj.handlers->get_method)))", "memset((((**struc))).value.obj.handlers->get_properties, 0, sizeof (*((((**struc))).value.obj.handlers->get_properties)))", "memset((((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset((((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->has_dimension)))", "memset((((**struc))).value.obj.handlers->has_property, 0, sizeof (*((((**struc))).value.obj.handlers->has_property)))", "memset((((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->read_dimension)))", "memset((((**struc))).value.obj.handlers->read_property, 0, sizeof (*((((**struc))).value.obj.handlers->read_property)))", "memset((((**struc))).value.obj.handlers->set, 0, sizeof (*((((**struc))).value.obj.handlers->set)))", "memset((((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->unset_dimension)))", "memset((((**struc))).value.obj.handlers->unset_property, 0, sizeof (*((((**struc))).value.obj.handlers->unset_property)))", "memset((((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->write_dimension)))", "memset((((**struc))).value.obj.handlers->write_property, 0, sizeof (*((((**struc))).value.obj.handlers->write_property)))", "memset(((**struc)).value.ht, 0, sizeof (*(((**struc)).value.ht)))", "memset(((**struc)).value.obj.handlers, 0, sizeof (*(((**struc)).value.obj.handlers)))", "memset(((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(((**struc)).value.obj.handlers->add_ref)))", "memset(((**struc)).value.obj.handlers->call_method, 0, sizeof (*(((**struc)).value.obj.handlers->call_method)))", "memset(((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(((**struc)).value.obj.handlers->cast_object)))", "memset(((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(((**struc)).value.obj.handlers->clone_obj)))", "memset(((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(((**struc)).value.obj.handlers->compare_objects)))", "memset(((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(((**struc)).value.obj.handlers->count_elements)))", "memset(((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(((**struc)).value.obj.handlers->del_ref)))", "memset(((**struc)).value.obj.handlers->get, 0, sizeof (*(((**struc)).value.obj.handlers->get)))", "memset(((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_entry)))", "memset(((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_name)))", "memset(((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(((**struc)).value.obj.handlers->get_closure)))", "memset(((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(((**struc)).value.obj.handlers->get_constructor)))", "memset(((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(((**struc)).value.obj.handlers->get_debug_info)))", "memset(((**struc)).value.obj.handlers->get_method, 0, sizeof (*(((**struc)).value.obj.handlers->get_method)))", "memset(((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(((**struc)).value.obj.handlers->get_properties)))", "memset(((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->has_dimension)))", "memset(((**struc)).value.obj.handlers->has_property, 0, sizeof (*(((**struc)).value.obj.handlers->has_property)))", "memset(((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->read_dimension)))", "memset(((**struc)).value.obj.handlers->read_property, 0, sizeof (*(((**struc)).value.obj.handlers->read_property)))", "memset(((**struc)).value.obj.handlers->set, 0, sizeof (*(((**struc)).value.obj.handlers->set)))", "memset(((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->unset_dimension)))", "memset(((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(((**struc)).value.obj.handlers->unset_property)))", "memset(((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->write_dimension)))", "memset(((**struc)).value.obj.handlers->write_property, 0, sizeof (*(((**struc)).value.obj.handlers->write_property)))", "memset((**struc).value.ht, 0, sizeof (*((**struc).value.ht)))", "memset((**struc).value.obj.handlers, 0, sizeof (*((**struc).value.obj.handlers)))", "memset((**struc).value.str.val, 0, sizeof (*((**struc).value.str.val)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw, 0, sizeof (*(executor_globals.saved_fpu_cw)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(myht, 0, sizeof (*(myht)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "((**(struc))).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*(struc), &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*struc, &(class_name), &class_name_len, 0)", "(**(struc)).value.ht->nApplyCount++", "(**(struc)).value.ht->nApplyCount--", "(class_name)++", "--(myht)->nApplyCount", "_efree(((class_name)))", "_efree(((myht)))", "is_temp = (0)", "is_temp = (1)", "is_temp = (2)", "is_temp = (3)", "is_temp = (4)", "is_temp = (5)", "is_temp = (6)", "is_temp = (7)", "is_temp = (is_temp)", "is_temp = (level)", "php_body_write(((**(struc)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(struc)).value.str.len))", "php_element_dump_func = (php_element_dump_func)", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted long input array (%s) overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted super-global (%s) variable overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(struc)).value.str.val)", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((myht)))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), (class_name), (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**(struc)).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, (myht) ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements((myht)) : 0)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((struc))))", "php_printf(\"\\\"%s\\\"\", (class_name))", "php_printf(\"\\\"%s\\\":protected\", (class_name))", "zend_hash_apply_with_arguments((myht), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy((myht))", "((**struc)).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "--myht->nApplyCount", "_efree((class_name))", "_efree((myht))", "exit(1)", "is_temp = 0", "php_body_write(((**struc).value.str.val), ((**struc).value.str.len))", "php_element_dump_func = php_array_element_dump", "php_element_dump_func = php_object_property_dump", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c\", level - 1, ' ')", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy(myht)", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L143\", 19, &(level), sizeof (level), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(struc), sizeof (struc), &(class_name_len), sizeof (class_name_len), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection)))\n    goto head_done;\n", "if (__is_neg(\"\", \"L143\", 19, &(level), sizeof (level), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(struc), sizeof (struc), &(class_name_len), sizeof (class_name_len), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	2,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	3,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	4,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	5,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	6,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	7,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	8,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	9,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	10,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	11,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	12,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	13,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	14,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	15,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	16,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	17,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	18,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	19,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	20,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	21,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	22,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	23,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	24,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	25,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	26,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	27,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	28,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	29,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	30,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	31,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	32,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	33,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	34,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	35,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	36,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	37,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	38,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	39,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	40,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	41,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	42,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	43,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	44,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	45,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	46,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	47,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	48,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	49,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	50,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	51,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	52,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	53,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	54,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	55,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	56,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	57,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	58,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	59,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	60,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	61,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	62,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	63,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	64,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	65,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	66,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	67,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	68,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	69,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	70,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	71,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	72,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	73,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	74,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	75,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	76,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	77,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	78,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	79,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	80,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	81,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	82,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	83,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	84,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	85,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	86,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	87,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	88,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	89,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	90,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	91,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	92,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	93,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	94,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	95,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	96,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	97,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	98,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	99,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	100,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	101,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	102,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	103,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	104,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	105,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	106,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	107,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	108,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	109,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	110,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	111,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	112,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	113,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	114,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	115,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	116,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	117,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	118,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	119,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	120,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	121,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	122,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	123,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	124,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	125,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	126,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	127,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	128,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	129,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	130,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	131,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	132,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	133,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	134,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	135,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	136,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	137,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	138,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	139,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	140,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	141,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	142,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	143,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	144,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	145,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	146,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	147,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	148,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	149,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	150,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	151,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	152,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	153,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	154,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	155,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	156,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	157,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	158,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	159,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	160,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	161,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	162,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	163,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	164,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	165,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	166,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	167,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	168,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	169,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	170,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	171,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	172,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	173,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	174,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	175,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	176,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	177,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	178,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	179,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	180,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	181,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	182,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	183,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	184,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	185,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	186,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	187,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	188,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	189,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	190,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	191,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	192,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	193,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	194,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	195,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	196,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	197,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	198,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	199,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	200,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	201,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	202,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	203,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	204,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	205,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	206,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	207,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	208,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	209,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	210,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	211,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	212,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	213,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	214,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	215,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	216,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	217,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	218,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	219,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	220,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	221,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	222,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	223,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	224,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	225,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	226,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	227,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	228,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	229,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	230,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	231,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	232,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	233,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	234,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	235,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	236,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	237,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	238,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	239,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	240,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	241,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	242,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	243,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	244,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	245,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	246,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	247,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	248,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	249,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	250,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	251,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	252,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	253,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	254,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	255,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	256,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	257,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	258,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	259,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	260,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	261,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	262,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	263,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	264,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	265,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	266,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	267,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	268,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	269,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	270,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	271,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	272,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	273,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	274,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	275,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	276,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	277,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	278,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	279,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	280,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	281,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	282,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	283,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	284,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	285,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	286,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	287,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	288,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	289,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	290,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	291,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	292,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	293,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	294,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	295,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	296,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	297,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	298,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	299,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	300,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	301,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	302,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	303,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	304,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	305,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	306,
									"scores":	[-8.79808790204366, -9.61594449874366, -9.2235366750436629, -10.458710217043663, -9.3587102970436629, -9.56959941404366, -9.6066998140436635, -8.8577752970436627, -10.172856471043662, -10.172856471043662, -10.172856471043662, -10.172856471043662, -10.418895384843662, -10.418895384843662, -10.418895384843662, -10.383745588043663, -10.172856471043662, -10.172856471043662, -10.172856471043662]
								}, {
									"case":	307,
									"scores":	[-8.799087902043663, -9.6169444987436634, -9.22453667504366, -10.459710217043664, -9.35971029704366, -9.570599414043663, -9.6076998140436629, -8.85877529704366, -10.173856471043663, -10.173856471043663, -10.173856471043663, -10.173856471043663, -10.419895384843663, -10.419895384843663, -10.419895384843663, -10.384745588043664, -10.173856471043663, -10.173856471043663, -10.173856471043663]
								}]
						}, {
							"switch":	40,
							"types":	[[], [], [1], [], [], [], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], [], [3, 4, 5, 6, 7], [], [], [], [], [], [], [], [2]],
							"begin_line":	143,
							"begin_column":	4,
							"end_line":	143,
							"end_column":	102,
							"patch_codes":	["if (!__is_neg(\"\", \"L143\", 19, &(level), sizeof (level), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(struc), sizeof (struc), &(class_name_len), sizeof (class_name_len), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection)))\n    zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level);\n", "{\n}\n", "Debug(myht, (apply_func_args_t)php_element_dump_func, 1, level)", "php_printf(myht, (apply_func_args_t)php_element_dump_func, 1, level)", "printf(myht, (apply_func_args_t)php_element_dump_func, 1, level)", "wprintf(myht, (apply_func_args_t)php_element_dump_func, 1, level)", "zend_ts_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_apply_with_arguments((&class_name), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_apply_with_arguments((&class_name_len), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_apply_with_arguments((&is_temp), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_apply_with_arguments((&level), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_apply_with_arguments((&myht), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_apply_with_arguments((&php_element_dump_func), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_apply_with_arguments((&struc), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_apply_with_arguments((myht), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (0 * class_name_len), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (0 * is_temp), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (0 * level), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (0), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (class_name != 0), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (class_name == 0), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (class_name_len != 0), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (class_name_len != is_temp), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (class_name_len * is_temp), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (class_name_len * level), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (class_name_len + 0), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (class_name_len + is_temp), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (class_name_len - 0), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (class_name_len - is_temp), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (class_name_len == 0), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (class_name_len == is_temp), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (is_temp != 0), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (is_temp * class_name_len), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (is_temp * level), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (is_temp + 0), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (is_temp - 0), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (is_temp == 0), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (level != 0), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (level != class_name_len), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (level != is_temp), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (level * class_name_len), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (level * is_temp), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (level + 0), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (level + class_name_len), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (level + is_temp), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (level - 0), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (level - class_name_len), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (level - is_temp), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (level == 0), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (level == class_name_len), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (level == is_temp), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (myht != 0), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (myht == 0), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (php_element_dump_func != 0), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (php_element_dump_func == 0), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (struc != 0), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, (struc == 0), level)", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (0 * class_name_len))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (0 * is_temp))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (0 * level))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (class_name != 0))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (class_name == 0))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (class_name_len != 0))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (class_name_len != is_temp))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (class_name_len * is_temp))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (class_name_len * level))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (class_name_len + 0))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (class_name_len + is_temp))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (class_name_len - 0))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (class_name_len - is_temp))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (class_name_len == 0))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (class_name_len == is_temp))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (is_temp != 0))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (is_temp * class_name_len))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (is_temp * level))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (is_temp + 0))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (is_temp - 0))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (is_temp == 0))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (is_temp))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (level != 0))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (level != class_name_len))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (level != is_temp))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (level * class_name_len))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (level * is_temp))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (level + 0))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (level + class_name_len))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (level + is_temp))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (level - 0))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (level - class_name_len))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (level - is_temp))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (level == 0))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (level == class_name_len))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (level == is_temp))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (level))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (myht != 0))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (myht == 0))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (php_element_dump_func != 0))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (php_element_dump_func == 0))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (struc != 0))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, (struc == 0))", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.4566504996436631, -8.2837533465436639, -6.9458342996436633, -7.9163522276436629, -7.5619372996436631, -8.0311972996436634, -8.3255480996436635, -7.2399262696436635, -8.08678210964366, -8.08678210964366, -8.08678210964366, -8.08678210964366, -8.8446702096436631, -8.8446702096436631, -8.8446702096436631, -8.5560421096436627, -8.08678210964366, -8.08678210964366, -8.08678210964366]
								}, {
									"case":	2,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	3,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	4,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	5,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	6,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	7,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	8,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	9,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	10,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	11,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	12,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	13,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	14,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	15,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	16,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	17,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	18,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	19,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	20,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	21,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	22,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	23,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	24,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	25,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	26,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	27,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	28,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	29,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	30,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	31,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	32,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	33,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	34,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	35,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	36,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	37,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	38,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	39,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	40,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	41,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	42,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	43,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	44,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	45,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	46,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	47,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	48,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	49,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	50,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	51,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	52,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	53,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	54,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	55,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	56,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	57,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	58,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	59,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	60,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	61,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	62,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	63,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	64,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	65,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	66,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	67,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	68,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	69,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	70,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	71,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	72,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	73,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	74,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	75,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	76,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	77,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	78,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	79,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	80,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	81,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	82,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	83,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	84,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	85,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	86,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	87,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	88,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	89,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	90,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	91,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	92,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	93,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	94,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	95,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	96,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	97,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	98,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	99,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	100,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	101,
									"scores":	[-7.0434426396436631]
								}]
						}]
				}, {
					"line":	143,
					"switches":	[{
							"switch":	41,
							"types":	[[], [], [], [], [306, 307], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246], [], [], [], [284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305], [247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], [], [], [], [], [], []],
							"begin_line":	144,
							"begin_column":	2,
							"end_line":	144,
							"end_column":	2,
							"patch_codes":	["memset(&(((**struc))).is_ref__gc, 0, sizeof (*(&(((**struc))).is_ref__gc)))", "memset(&(((**struc))).refcount__gc, 0, sizeof (*(&(((**struc))).refcount__gc)))", "memset(&(((**struc))).type, 0, sizeof (*(&(((**struc))).type)))", "memset(&(((**struc))).value, 0, sizeof (*(&(((**struc))).value)))", "memset(&(((**struc))).value.dval, 0, sizeof (*(&(((**struc))).value.dval)))", "memset(&(((**struc))).value.ht, 0, sizeof (*(&(((**struc))).value.ht)))", "memset(&(((**struc))).value.lval, 0, sizeof (*(&(((**struc))).value.lval)))", "memset(&(((**struc))).value.obj, 0, sizeof (*(&(((**struc))).value.obj)))", "memset(&(((**struc))).value.obj.handle, 0, sizeof (*(&(((**struc))).value.obj.handle)))", "memset(&(((**struc))).value.obj.handlers, 0, sizeof (*(&(((**struc))).value.obj.handlers)))", "memset(&(((**struc))).value.obj.handlers->add_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->add_ref)))", "memset(&(((**struc))).value.obj.handlers->call_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->call_method)))", "memset(&(((**struc))).value.obj.handlers->cast_object, 0, sizeof (*(&(((**struc))).value.obj.handlers->cast_object)))", "memset(&(((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*(&(((**struc))).value.obj.handlers->clone_obj)))", "memset(&(((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*(&(((**struc))).value.obj.handlers->compare_objects)))", "memset(&(((**struc))).value.obj.handlers->count_elements, 0, sizeof (*(&(((**struc))).value.obj.handlers->count_elements)))", "memset(&(((**struc))).value.obj.handlers->del_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->del_ref)))", "memset(&(((**struc))).value.obj.handlers->get, 0, sizeof (*(&(((**struc))).value.obj.handlers->get)))", "memset(&(((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_entry)))", "memset(&(((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_name)))", "memset(&(((**struc))).value.obj.handlers->get_closure, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_closure)))", "memset(&(((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_constructor)))", "memset(&(((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_debug_info)))", "memset(&(((**struc))).value.obj.handlers->get_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_method)))", "memset(&(((**struc))).value.obj.handlers->get_properties, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_properties)))", "memset(&(((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_dimension)))", "memset(&(((**struc))).value.obj.handlers->has_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_property)))", "memset(&(((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_dimension)))", "memset(&(((**struc))).value.obj.handlers->read_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_property)))", "memset(&(((**struc))).value.obj.handlers->set, 0, sizeof (*(&(((**struc))).value.obj.handlers->set)))", "memset(&(((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_dimension)))", "memset(&(((**struc))).value.obj.handlers->unset_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_property)))", "memset(&(((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_dimension)))", "memset(&(((**struc))).value.obj.handlers->write_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_property)))", "memset(&(((**struc))).value.str, 0, sizeof (*(&(((**struc))).value.str)))", "memset(&((**struc)).is_ref__gc, 0, sizeof (*(&((**struc)).is_ref__gc)))", "memset(&((**struc)).refcount__gc, 0, sizeof (*(&((**struc)).refcount__gc)))", "memset(&((**struc)).type, 0, sizeof (*(&((**struc)).type)))", "memset(&((**struc)).value, 0, sizeof (*(&((**struc)).value)))", "memset(&((**struc)).value.dval, 0, sizeof (*(&((**struc)).value.dval)))", "memset(&((**struc)).value.ht, 0, sizeof (*(&((**struc)).value.ht)))", "memset(&((**struc)).value.lval, 0, sizeof (*(&((**struc)).value.lval)))", "memset(&((**struc)).value.obj, 0, sizeof (*(&((**struc)).value.obj)))", "memset(&((**struc)).value.obj.handle, 0, sizeof (*(&((**struc)).value.obj.handle)))", "memset(&((**struc)).value.obj.handlers, 0, sizeof (*(&((**struc)).value.obj.handlers)))", "memset(&((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->add_ref)))", "memset(&((**struc)).value.obj.handlers->call_method, 0, sizeof (*(&((**struc)).value.obj.handlers->call_method)))", "memset(&((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(&((**struc)).value.obj.handlers->cast_object)))", "memset(&((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(&((**struc)).value.obj.handlers->clone_obj)))", "memset(&((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(&((**struc)).value.obj.handlers->compare_objects)))", "memset(&((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(&((**struc)).value.obj.handlers->count_elements)))", "memset(&((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->del_ref)))", "memset(&((**struc)).value.obj.handlers->get, 0, sizeof (*(&((**struc)).value.obj.handlers->get)))", "memset(&((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_entry)))", "memset(&((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_name)))", "memset(&((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(&((**struc)).value.obj.handlers->get_closure)))", "memset(&((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(&((**struc)).value.obj.handlers->get_constructor)))", "memset(&((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(&((**struc)).value.obj.handlers->get_debug_info)))", "memset(&((**struc)).value.obj.handlers->get_method, 0, sizeof (*(&((**struc)).value.obj.handlers->get_method)))", "memset(&((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(&((**struc)).value.obj.handlers->get_properties)))", "memset(&((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(&((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->has_dimension)))", "memset(&((**struc)).value.obj.handlers->has_property, 0, sizeof (*(&((**struc)).value.obj.handlers->has_property)))", "memset(&((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->read_dimension)))", "memset(&((**struc)).value.obj.handlers->read_property, 0, sizeof (*(&((**struc)).value.obj.handlers->read_property)))", "memset(&((**struc)).value.obj.handlers->set, 0, sizeof (*(&((**struc)).value.obj.handlers->set)))", "memset(&((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_dimension)))", "memset(&((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_property)))", "memset(&((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->write_dimension)))", "memset(&((**struc)).value.obj.handlers->write_property, 0, sizeof (*(&((**struc)).value.obj.handlers->write_property)))", "memset(&((**struc)).value.str, 0, sizeof (*(&((**struc)).value.str)))", "memset(&(**struc).is_ref__gc, 0, sizeof (*(&(**struc).is_ref__gc)))", "memset(&(**struc).refcount__gc, 0, sizeof (*(&(**struc).refcount__gc)))", "memset(&(**struc).type, 0, sizeof (*(&(**struc).type)))", "memset(&(**struc).value, 0, sizeof (*(&(**struc).value)))", "memset(&(**struc).value.dval, 0, sizeof (*(&(**struc).value.dval)))", "memset(&(**struc).value.ht, 0, sizeof (*(&(**struc).value.ht)))", "memset(&(**struc).value.lval, 0, sizeof (*(&(**struc).value.lval)))", "memset(&(**struc).value.obj, 0, sizeof (*(&(**struc).value.obj)))", "memset(&(**struc).value.obj.handle, 0, sizeof (*(&(**struc).value.obj.handle)))", "memset(&(**struc).value.obj.handlers, 0, sizeof (*(&(**struc).value.obj.handlers)))", "memset(&(**struc).value.str, 0, sizeof (*(&(**struc).value.str)))", "memset(&(**struc).value.str.len, 0, sizeof (*(&(**struc).value.str.len)))", "memset(&(**struc).value.str.val, 0, sizeof (*(&(**struc).value.str.val)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((((**struc))).value.ht, 0, sizeof (*((((**struc))).value.ht)))", "memset((((**struc))).value.obj.handlers, 0, sizeof (*((((**struc))).value.obj.handlers)))", "memset((((**struc))).value.obj.handlers->add_ref, 0, sizeof (*((((**struc))).value.obj.handlers->add_ref)))", "memset((((**struc))).value.obj.handlers->call_method, 0, sizeof (*((((**struc))).value.obj.handlers->call_method)))", "memset((((**struc))).value.obj.handlers->cast_object, 0, sizeof (*((((**struc))).value.obj.handlers->cast_object)))", "memset((((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*((((**struc))).value.obj.handlers->clone_obj)))", "memset((((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*((((**struc))).value.obj.handlers->compare_objects)))", "memset((((**struc))).value.obj.handlers->count_elements, 0, sizeof (*((((**struc))).value.obj.handlers->count_elements)))", "memset((((**struc))).value.obj.handlers->del_ref, 0, sizeof (*((((**struc))).value.obj.handlers->del_ref)))", "memset((((**struc))).value.obj.handlers->get, 0, sizeof (*((((**struc))).value.obj.handlers->get)))", "memset((((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_entry)))", "memset((((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_name)))", "memset((((**struc))).value.obj.handlers->get_closure, 0, sizeof (*((((**struc))).value.obj.handlers->get_closure)))", "memset((((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*((((**struc))).value.obj.handlers->get_constructor)))", "memset((((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*((((**struc))).value.obj.handlers->get_debug_info)))", "memset((((**struc))).value.obj.handlers->get_method, 0, sizeof (*((((**struc))).value.obj.handlers->get_method)))", "memset((((**struc))).value.obj.handlers->get_properties, 0, sizeof (*((((**struc))).value.obj.handlers->get_properties)))", "memset((((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset((((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->has_dimension)))", "memset((((**struc))).value.obj.handlers->has_property, 0, sizeof (*((((**struc))).value.obj.handlers->has_property)))", "memset((((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->read_dimension)))", "memset((((**struc))).value.obj.handlers->read_property, 0, sizeof (*((((**struc))).value.obj.handlers->read_property)))", "memset((((**struc))).value.obj.handlers->set, 0, sizeof (*((((**struc))).value.obj.handlers->set)))", "memset((((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->unset_dimension)))", "memset((((**struc))).value.obj.handlers->unset_property, 0, sizeof (*((((**struc))).value.obj.handlers->unset_property)))", "memset((((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->write_dimension)))", "memset((((**struc))).value.obj.handlers->write_property, 0, sizeof (*((((**struc))).value.obj.handlers->write_property)))", "memset(((**struc)).value.ht, 0, sizeof (*(((**struc)).value.ht)))", "memset(((**struc)).value.obj.handlers, 0, sizeof (*(((**struc)).value.obj.handlers)))", "memset(((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(((**struc)).value.obj.handlers->add_ref)))", "memset(((**struc)).value.obj.handlers->call_method, 0, sizeof (*(((**struc)).value.obj.handlers->call_method)))", "memset(((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(((**struc)).value.obj.handlers->cast_object)))", "memset(((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(((**struc)).value.obj.handlers->clone_obj)))", "memset(((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(((**struc)).value.obj.handlers->compare_objects)))", "memset(((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(((**struc)).value.obj.handlers->count_elements)))", "memset(((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(((**struc)).value.obj.handlers->del_ref)))", "memset(((**struc)).value.obj.handlers->get, 0, sizeof (*(((**struc)).value.obj.handlers->get)))", "memset(((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_entry)))", "memset(((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_name)))", "memset(((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(((**struc)).value.obj.handlers->get_closure)))", "memset(((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(((**struc)).value.obj.handlers->get_constructor)))", "memset(((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(((**struc)).value.obj.handlers->get_debug_info)))", "memset(((**struc)).value.obj.handlers->get_method, 0, sizeof (*(((**struc)).value.obj.handlers->get_method)))", "memset(((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(((**struc)).value.obj.handlers->get_properties)))", "memset(((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->has_dimension)))", "memset(((**struc)).value.obj.handlers->has_property, 0, sizeof (*(((**struc)).value.obj.handlers->has_property)))", "memset(((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->read_dimension)))", "memset(((**struc)).value.obj.handlers->read_property, 0, sizeof (*(((**struc)).value.obj.handlers->read_property)))", "memset(((**struc)).value.obj.handlers->set, 0, sizeof (*(((**struc)).value.obj.handlers->set)))", "memset(((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->unset_dimension)))", "memset(((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(((**struc)).value.obj.handlers->unset_property)))", "memset(((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->write_dimension)))", "memset(((**struc)).value.obj.handlers->write_property, 0, sizeof (*(((**struc)).value.obj.handlers->write_property)))", "memset((**struc).value.ht, 0, sizeof (*((**struc).value.ht)))", "memset((**struc).value.obj.handlers, 0, sizeof (*((**struc).value.obj.handlers)))", "memset((**struc).value.str.val, 0, sizeof (*((**struc).value.str.val)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw, 0, sizeof (*(executor_globals.saved_fpu_cw)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(myht, 0, sizeof (*(myht)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "((**(struc))).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*(struc), &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*struc, &(class_name), &class_name_len, 0)", "(**(struc)).value.ht->nApplyCount++", "(**(struc)).value.ht->nApplyCount--", "(class_name)++", "--(myht)->nApplyCount", "_efree(((class_name)))", "_efree(((myht)))", "is_temp = (0)", "is_temp = (1)", "is_temp = (2)", "is_temp = (3)", "is_temp = (4)", "is_temp = (5)", "is_temp = (6)", "is_temp = (7)", "is_temp = (is_temp)", "is_temp = (level)", "php_body_write(((**(struc)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(struc)).value.str.len))", "php_element_dump_func = (php_element_dump_func)", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted long input array (%s) overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted super-global (%s) variable overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(struc)).value.str.val)", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((myht)))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), (class_name), (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**(struc)).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, (myht) ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements((myht)) : 0)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((struc))))", "php_printf(\"\\\"%s\\\"\", (class_name))", "php_printf(\"\\\"%s\\\":protected\", (class_name))", "zend_hash_apply_with_arguments((myht), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy((myht))", "((**struc)).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "--myht->nApplyCount", "_efree((class_name))", "_efree((myht))", "exit(1)", "is_temp = 0", "php_body_write(((**struc).value.str.val), ((**struc).value.str.len))", "php_element_dump_func = php_array_element_dump", "php_element_dump_func = php_object_property_dump", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c\", level - 1, ' ')", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy(myht)", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L144\", 19, &(myht), sizeof (myht), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(level), sizeof (level), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(struc), sizeof (struc), &(class_name_len), sizeof (class_name_len), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection)))\n    goto head_done;\n", "if (__is_neg(\"\", \"L144\", 19, &(myht), sizeof (myht), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(level), sizeof (level), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(struc), sizeof (struc), &(class_name_len), sizeof (class_name_len), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	2,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	3,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	4,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	5,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	6,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	7,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	8,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	9,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	10,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	11,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	12,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	13,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	14,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	15,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	16,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	17,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	18,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	19,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	20,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	21,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	22,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	23,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	24,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	25,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	26,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	27,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	28,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	29,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	30,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	31,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	32,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	33,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	34,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	35,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	36,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	37,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	38,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	39,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	40,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	41,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	42,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	43,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	44,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	45,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	46,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	47,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	48,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	49,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	50,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	51,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	52,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	53,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	54,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	55,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	56,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	57,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	58,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	59,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	60,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	61,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	62,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	63,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	64,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	65,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	66,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	67,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	68,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	69,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	70,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	71,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	72,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	73,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	74,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	75,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	76,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	77,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	78,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	79,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	80,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	81,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	82,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	83,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	84,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	85,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	86,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	87,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	88,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	89,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	90,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	91,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	92,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	93,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	94,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	95,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	96,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	97,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	98,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	99,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	100,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	101,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	102,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	103,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	104,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	105,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	106,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	107,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	108,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	109,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	110,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	111,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	112,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	113,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	114,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	115,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	116,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	117,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	118,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	119,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	120,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	121,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	122,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	123,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	124,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	125,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	126,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	127,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	128,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	129,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	130,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	131,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	132,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	133,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	134,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	135,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	136,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	137,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	138,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	139,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	140,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	141,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	142,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	143,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	144,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	145,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	146,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	147,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	148,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	149,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	150,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	151,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	152,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	153,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	154,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	155,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	156,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	157,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	158,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	159,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	160,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	161,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	162,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	163,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	164,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	165,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	166,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	167,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	168,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	169,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	170,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	171,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	172,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	173,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	174,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	175,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	176,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	177,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	178,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	179,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	180,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	181,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	182,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	183,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	184,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	185,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	186,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	187,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	188,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	189,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	190,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	191,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	192,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	193,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	194,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	195,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	196,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	197,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	198,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	199,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	200,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	201,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	202,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	203,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	204,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	205,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	206,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	207,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	208,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	209,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	210,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	211,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	212,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	213,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	214,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	215,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	216,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	217,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	218,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	219,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	220,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	221,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	222,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	223,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	224,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	225,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	226,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	227,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	228,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	229,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	230,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	231,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	232,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	233,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	234,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	235,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	236,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	237,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	238,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	239,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	240,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	241,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	242,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	243,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	244,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	245,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	246,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	247,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	248,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	249,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	250,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	251,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	252,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	253,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	254,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	255,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	256,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	257,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	258,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	259,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	260,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	261,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	262,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	263,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	264,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	265,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	266,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	267,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	268,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	269,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	270,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	271,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	272,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	273,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	274,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	275,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	276,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	277,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	278,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	279,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	280,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	281,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	282,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	283,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	284,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	285,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	286,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	287,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	288,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	289,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	290,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	291,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	292,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	293,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	294,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	295,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	296,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	297,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	298,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	299,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	300,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	301,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	302,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	303,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	304,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	305,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	306,
									"scores":	[-10.723442068453117, -10.139890310753117, -9.35524128475312, -9.0561078707531166, -9.0404416307531168, -9.25133074775312, -9.28843114775312, -8.5395066307531167, -9.85458780475312, -9.85458780475312, -9.85458780475312, -9.85458780475312, -10.100626718553118, -10.100626718553118, -10.100626718553118, -10.065476921753117, -9.85458780475312, -9.85458780475312, -9.85458780475312]
								}, {
									"case":	307,
									"scores":	[-10.724442068453119, -10.140890310753118, -9.35624128475312, -9.05710787075312, -9.04144163075312, -9.2523307477531169, -9.28943114775312, -8.54050663075312, -9.85558780475312, -9.85558780475312, -9.85558780475312, -9.85558780475312, -10.101626718553117, -10.101626718553117, -10.101626718553117, -10.066476921753118, -9.85558780475312, -9.85558780475312, -9.85558780475312]
								}]
						}, {
							"switch":	42,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	144,
							"begin_column":	4,
							"end_line":	144,
							"end_column":	12,
							"patch_codes":	["if (!__is_neg(\"\", \"L144\", 19, &(myht), sizeof (myht), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(level), sizeof (level), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(struc), sizeof (struc), &(class_name_len), sizeof (class_name_len), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection)))\n    --myht->nApplyCount;\n", "{\n}\n", "--(&class_name)->nApplyCount", "--(&class_name_len)->nApplyCount", "--(&is_temp)->nApplyCount", "--(&level)->nApplyCount", "--(&myht)->nApplyCount", "--(&php_element_dump_func)->nApplyCount", "--(&struc)->nApplyCount", "--(myht)->nApplyCount"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.83391664975312, -8.9111337217531172, -9.25707084075312, -8.64421329475312, -8.5599394947531167, -9.02919949475312, -9.32355029475312, -8.23792846475312, -9.08478430475312, -9.08478430475312, -9.08478430475312, -9.08478430475312, -9.8426724047531167, -9.8426724047531167, -9.8426724047531167, -9.55404430475312, -9.08478430475312, -9.08478430475312, -9.08478430475312]
								}, {
									"case":	2,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	3,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	4,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	5,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	6,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	7,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	8,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	9,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	10,
									"scores":	[-6.4777668347531181]
								}]
						}]
				}, {
					"line":	144,
					"switches":	[{
							"switch":	43,
							"types":	[[], [], [], [], [306, 307], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246], [], [], [], [284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305], [247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], [], [], [], [], [], []],
							"begin_line":	145,
							"begin_column":	2,
							"end_line":	145,
							"end_column":	2,
							"patch_codes":	["memset(&(((**struc))).is_ref__gc, 0, sizeof (*(&(((**struc))).is_ref__gc)))", "memset(&(((**struc))).refcount__gc, 0, sizeof (*(&(((**struc))).refcount__gc)))", "memset(&(((**struc))).type, 0, sizeof (*(&(((**struc))).type)))", "memset(&(((**struc))).value, 0, sizeof (*(&(((**struc))).value)))", "memset(&(((**struc))).value.dval, 0, sizeof (*(&(((**struc))).value.dval)))", "memset(&(((**struc))).value.ht, 0, sizeof (*(&(((**struc))).value.ht)))", "memset(&(((**struc))).value.lval, 0, sizeof (*(&(((**struc))).value.lval)))", "memset(&(((**struc))).value.obj, 0, sizeof (*(&(((**struc))).value.obj)))", "memset(&(((**struc))).value.obj.handle, 0, sizeof (*(&(((**struc))).value.obj.handle)))", "memset(&(((**struc))).value.obj.handlers, 0, sizeof (*(&(((**struc))).value.obj.handlers)))", "memset(&(((**struc))).value.obj.handlers->add_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->add_ref)))", "memset(&(((**struc))).value.obj.handlers->call_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->call_method)))", "memset(&(((**struc))).value.obj.handlers->cast_object, 0, sizeof (*(&(((**struc))).value.obj.handlers->cast_object)))", "memset(&(((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*(&(((**struc))).value.obj.handlers->clone_obj)))", "memset(&(((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*(&(((**struc))).value.obj.handlers->compare_objects)))", "memset(&(((**struc))).value.obj.handlers->count_elements, 0, sizeof (*(&(((**struc))).value.obj.handlers->count_elements)))", "memset(&(((**struc))).value.obj.handlers->del_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->del_ref)))", "memset(&(((**struc))).value.obj.handlers->get, 0, sizeof (*(&(((**struc))).value.obj.handlers->get)))", "memset(&(((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_entry)))", "memset(&(((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_name)))", "memset(&(((**struc))).value.obj.handlers->get_closure, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_closure)))", "memset(&(((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_constructor)))", "memset(&(((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_debug_info)))", "memset(&(((**struc))).value.obj.handlers->get_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_method)))", "memset(&(((**struc))).value.obj.handlers->get_properties, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_properties)))", "memset(&(((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_dimension)))", "memset(&(((**struc))).value.obj.handlers->has_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_property)))", "memset(&(((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_dimension)))", "memset(&(((**struc))).value.obj.handlers->read_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_property)))", "memset(&(((**struc))).value.obj.handlers->set, 0, sizeof (*(&(((**struc))).value.obj.handlers->set)))", "memset(&(((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_dimension)))", "memset(&(((**struc))).value.obj.handlers->unset_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_property)))", "memset(&(((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_dimension)))", "memset(&(((**struc))).value.obj.handlers->write_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_property)))", "memset(&(((**struc))).value.str, 0, sizeof (*(&(((**struc))).value.str)))", "memset(&((**struc)).is_ref__gc, 0, sizeof (*(&((**struc)).is_ref__gc)))", "memset(&((**struc)).refcount__gc, 0, sizeof (*(&((**struc)).refcount__gc)))", "memset(&((**struc)).type, 0, sizeof (*(&((**struc)).type)))", "memset(&((**struc)).value, 0, sizeof (*(&((**struc)).value)))", "memset(&((**struc)).value.dval, 0, sizeof (*(&((**struc)).value.dval)))", "memset(&((**struc)).value.ht, 0, sizeof (*(&((**struc)).value.ht)))", "memset(&((**struc)).value.lval, 0, sizeof (*(&((**struc)).value.lval)))", "memset(&((**struc)).value.obj, 0, sizeof (*(&((**struc)).value.obj)))", "memset(&((**struc)).value.obj.handle, 0, sizeof (*(&((**struc)).value.obj.handle)))", "memset(&((**struc)).value.obj.handlers, 0, sizeof (*(&((**struc)).value.obj.handlers)))", "memset(&((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->add_ref)))", "memset(&((**struc)).value.obj.handlers->call_method, 0, sizeof (*(&((**struc)).value.obj.handlers->call_method)))", "memset(&((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(&((**struc)).value.obj.handlers->cast_object)))", "memset(&((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(&((**struc)).value.obj.handlers->clone_obj)))", "memset(&((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(&((**struc)).value.obj.handlers->compare_objects)))", "memset(&((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(&((**struc)).value.obj.handlers->count_elements)))", "memset(&((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->del_ref)))", "memset(&((**struc)).value.obj.handlers->get, 0, sizeof (*(&((**struc)).value.obj.handlers->get)))", "memset(&((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_entry)))", "memset(&((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_name)))", "memset(&((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(&((**struc)).value.obj.handlers->get_closure)))", "memset(&((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(&((**struc)).value.obj.handlers->get_constructor)))", "memset(&((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(&((**struc)).value.obj.handlers->get_debug_info)))", "memset(&((**struc)).value.obj.handlers->get_method, 0, sizeof (*(&((**struc)).value.obj.handlers->get_method)))", "memset(&((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(&((**struc)).value.obj.handlers->get_properties)))", "memset(&((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(&((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->has_dimension)))", "memset(&((**struc)).value.obj.handlers->has_property, 0, sizeof (*(&((**struc)).value.obj.handlers->has_property)))", "memset(&((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->read_dimension)))", "memset(&((**struc)).value.obj.handlers->read_property, 0, sizeof (*(&((**struc)).value.obj.handlers->read_property)))", "memset(&((**struc)).value.obj.handlers->set, 0, sizeof (*(&((**struc)).value.obj.handlers->set)))", "memset(&((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_dimension)))", "memset(&((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_property)))", "memset(&((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->write_dimension)))", "memset(&((**struc)).value.obj.handlers->write_property, 0, sizeof (*(&((**struc)).value.obj.handlers->write_property)))", "memset(&((**struc)).value.str, 0, sizeof (*(&((**struc)).value.str)))", "memset(&(**struc).is_ref__gc, 0, sizeof (*(&(**struc).is_ref__gc)))", "memset(&(**struc).refcount__gc, 0, sizeof (*(&(**struc).refcount__gc)))", "memset(&(**struc).type, 0, sizeof (*(&(**struc).type)))", "memset(&(**struc).value, 0, sizeof (*(&(**struc).value)))", "memset(&(**struc).value.dval, 0, sizeof (*(&(**struc).value.dval)))", "memset(&(**struc).value.ht, 0, sizeof (*(&(**struc).value.ht)))", "memset(&(**struc).value.lval, 0, sizeof (*(&(**struc).value.lval)))", "memset(&(**struc).value.obj, 0, sizeof (*(&(**struc).value.obj)))", "memset(&(**struc).value.obj.handle, 0, sizeof (*(&(**struc).value.obj.handle)))", "memset(&(**struc).value.obj.handlers, 0, sizeof (*(&(**struc).value.obj.handlers)))", "memset(&(**struc).value.str, 0, sizeof (*(&(**struc).value.str)))", "memset(&(**struc).value.str.len, 0, sizeof (*(&(**struc).value.str.len)))", "memset(&(**struc).value.str.val, 0, sizeof (*(&(**struc).value.str.val)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((((**struc))).value.ht, 0, sizeof (*((((**struc))).value.ht)))", "memset((((**struc))).value.obj.handlers, 0, sizeof (*((((**struc))).value.obj.handlers)))", "memset((((**struc))).value.obj.handlers->add_ref, 0, sizeof (*((((**struc))).value.obj.handlers->add_ref)))", "memset((((**struc))).value.obj.handlers->call_method, 0, sizeof (*((((**struc))).value.obj.handlers->call_method)))", "memset((((**struc))).value.obj.handlers->cast_object, 0, sizeof (*((((**struc))).value.obj.handlers->cast_object)))", "memset((((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*((((**struc))).value.obj.handlers->clone_obj)))", "memset((((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*((((**struc))).value.obj.handlers->compare_objects)))", "memset((((**struc))).value.obj.handlers->count_elements, 0, sizeof (*((((**struc))).value.obj.handlers->count_elements)))", "memset((((**struc))).value.obj.handlers->del_ref, 0, sizeof (*((((**struc))).value.obj.handlers->del_ref)))", "memset((((**struc))).value.obj.handlers->get, 0, sizeof (*((((**struc))).value.obj.handlers->get)))", "memset((((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_entry)))", "memset((((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_name)))", "memset((((**struc))).value.obj.handlers->get_closure, 0, sizeof (*((((**struc))).value.obj.handlers->get_closure)))", "memset((((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*((((**struc))).value.obj.handlers->get_constructor)))", "memset((((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*((((**struc))).value.obj.handlers->get_debug_info)))", "memset((((**struc))).value.obj.handlers->get_method, 0, sizeof (*((((**struc))).value.obj.handlers->get_method)))", "memset((((**struc))).value.obj.handlers->get_properties, 0, sizeof (*((((**struc))).value.obj.handlers->get_properties)))", "memset((((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset((((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->has_dimension)))", "memset((((**struc))).value.obj.handlers->has_property, 0, sizeof (*((((**struc))).value.obj.handlers->has_property)))", "memset((((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->read_dimension)))", "memset((((**struc))).value.obj.handlers->read_property, 0, sizeof (*((((**struc))).value.obj.handlers->read_property)))", "memset((((**struc))).value.obj.handlers->set, 0, sizeof (*((((**struc))).value.obj.handlers->set)))", "memset((((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->unset_dimension)))", "memset((((**struc))).value.obj.handlers->unset_property, 0, sizeof (*((((**struc))).value.obj.handlers->unset_property)))", "memset((((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->write_dimension)))", "memset((((**struc))).value.obj.handlers->write_property, 0, sizeof (*((((**struc))).value.obj.handlers->write_property)))", "memset(((**struc)).value.ht, 0, sizeof (*(((**struc)).value.ht)))", "memset(((**struc)).value.obj.handlers, 0, sizeof (*(((**struc)).value.obj.handlers)))", "memset(((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(((**struc)).value.obj.handlers->add_ref)))", "memset(((**struc)).value.obj.handlers->call_method, 0, sizeof (*(((**struc)).value.obj.handlers->call_method)))", "memset(((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(((**struc)).value.obj.handlers->cast_object)))", "memset(((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(((**struc)).value.obj.handlers->clone_obj)))", "memset(((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(((**struc)).value.obj.handlers->compare_objects)))", "memset(((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(((**struc)).value.obj.handlers->count_elements)))", "memset(((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(((**struc)).value.obj.handlers->del_ref)))", "memset(((**struc)).value.obj.handlers->get, 0, sizeof (*(((**struc)).value.obj.handlers->get)))", "memset(((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_entry)))", "memset(((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_name)))", "memset(((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(((**struc)).value.obj.handlers->get_closure)))", "memset(((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(((**struc)).value.obj.handlers->get_constructor)))", "memset(((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(((**struc)).value.obj.handlers->get_debug_info)))", "memset(((**struc)).value.obj.handlers->get_method, 0, sizeof (*(((**struc)).value.obj.handlers->get_method)))", "memset(((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(((**struc)).value.obj.handlers->get_properties)))", "memset(((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->has_dimension)))", "memset(((**struc)).value.obj.handlers->has_property, 0, sizeof (*(((**struc)).value.obj.handlers->has_property)))", "memset(((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->read_dimension)))", "memset(((**struc)).value.obj.handlers->read_property, 0, sizeof (*(((**struc)).value.obj.handlers->read_property)))", "memset(((**struc)).value.obj.handlers->set, 0, sizeof (*(((**struc)).value.obj.handlers->set)))", "memset(((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->unset_dimension)))", "memset(((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(((**struc)).value.obj.handlers->unset_property)))", "memset(((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->write_dimension)))", "memset(((**struc)).value.obj.handlers->write_property, 0, sizeof (*(((**struc)).value.obj.handlers->write_property)))", "memset((**struc).value.ht, 0, sizeof (*((**struc).value.ht)))", "memset((**struc).value.obj.handlers, 0, sizeof (*((**struc).value.obj.handlers)))", "memset((**struc).value.str.val, 0, sizeof (*((**struc).value.str.val)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw, 0, sizeof (*(executor_globals.saved_fpu_cw)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(myht, 0, sizeof (*(myht)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "((**(struc))).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*(struc), &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*struc, &(class_name), &class_name_len, 0)", "(**(struc)).value.ht->nApplyCount++", "(**(struc)).value.ht->nApplyCount--", "(class_name)++", "--(myht)->nApplyCount", "_efree(((class_name)))", "_efree(((myht)))", "is_temp = (0)", "is_temp = (1)", "is_temp = (2)", "is_temp = (3)", "is_temp = (4)", "is_temp = (5)", "is_temp = (6)", "is_temp = (7)", "is_temp = (is_temp)", "is_temp = (level)", "php_body_write(((**(struc)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(struc)).value.str.len))", "php_element_dump_func = (php_element_dump_func)", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted long input array (%s) overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted super-global (%s) variable overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(struc)).value.str.val)", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((myht)))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), (class_name), (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**(struc)).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, (myht) ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements((myht)) : 0)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((struc))))", "php_printf(\"\\\"%s\\\"\", (class_name))", "php_printf(\"\\\"%s\\\":protected\", (class_name))", "zend_hash_apply_with_arguments((myht), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy((myht))", "((**struc)).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "--myht->nApplyCount", "_efree((class_name))", "_efree((myht))", "exit(1)", "is_temp = 0", "php_body_write(((**struc).value.str.val), ((**struc).value.str.len))", "php_element_dump_func = php_array_element_dump", "php_element_dump_func = php_object_property_dump", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c\", level - 1, ' ')", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy(myht)", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L145\", 19, &(is_temp), sizeof (is_temp), &(myht), sizeof (myht), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(level), sizeof (level), &(php_element_dump_func), sizeof (php_element_dump_func), &(class_name), sizeof (class_name), &(struc), sizeof (struc), &(class_name_len), sizeof (class_name_len), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection)))\n    goto head_done;\n", "if (__is_neg(\"\", \"L145\", 19, &(is_temp), sizeof (is_temp), &(myht), sizeof (myht), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(level), sizeof (level), &(php_element_dump_func), sizeof (php_element_dump_func), &(class_name), sizeof (class_name), &(struc), sizeof (struc), &(class_name_len), sizeof (class_name_len), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	2,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	3,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	4,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	5,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	6,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	7,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	8,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	9,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	10,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	11,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	12,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	13,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	14,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	15,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	16,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	17,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	18,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	19,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	20,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	21,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	22,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	23,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	24,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	25,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	26,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	27,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	28,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	29,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	30,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	31,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	32,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	33,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	34,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	35,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	36,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	37,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	38,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	39,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	40,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	41,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	42,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	43,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	44,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	45,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	46,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	47,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	48,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	49,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	50,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	51,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	52,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	53,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	54,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	55,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	56,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	57,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	58,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	59,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	60,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	61,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	62,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	63,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	64,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	65,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	66,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	67,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	68,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	69,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	70,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	71,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	72,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	73,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	74,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	75,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	76,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	77,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	78,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	79,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	80,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	81,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	82,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	83,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	84,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	85,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	86,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	87,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	88,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	89,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	90,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	91,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	92,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	93,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	94,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	95,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	96,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	97,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	98,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	99,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	100,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	101,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	102,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	103,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	104,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	105,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	106,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	107,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	108,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	109,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	110,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	111,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	112,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	113,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	114,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	115,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	116,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	117,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	118,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	119,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	120,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	121,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	122,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	123,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	124,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	125,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	126,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	127,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	128,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	129,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	130,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	131,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	132,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	133,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	134,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	135,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	136,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	137,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	138,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	139,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	140,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	141,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	142,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	143,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	144,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	145,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	146,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	147,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	148,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	149,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	150,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	151,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	152,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	153,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	154,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	155,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	156,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	157,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	158,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	159,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	160,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	161,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	162,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	163,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	164,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	165,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	166,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	167,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	168,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	169,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	170,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	171,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	172,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	173,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	174,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	175,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	176,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	177,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	178,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	179,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	180,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	181,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	182,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	183,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	184,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	185,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	186,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	187,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	188,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	189,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	190,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	191,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	192,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	193,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	194,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	195,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	196,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	197,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	198,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	199,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	200,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	201,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	202,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	203,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	204,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	205,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	206,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	207,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	208,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	209,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	210,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	211,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	212,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	213,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	214,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	215,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	216,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	217,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	218,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	219,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	220,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	221,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	222,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	223,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	224,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	225,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	226,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	227,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	228,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	229,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	230,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	231,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	232,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	233,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	234,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	235,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	236,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	237,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	238,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	239,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	240,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	241,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	242,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	243,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	244,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	245,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	246,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	247,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	248,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	249,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	250,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	251,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	252,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	253,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	254,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	255,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	256,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	257,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	258,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	259,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	260,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	261,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	262,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	263,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	264,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	265,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	266,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	267,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	268,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	269,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	270,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	271,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	272,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	273,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	274,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	275,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	276,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	277,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	278,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	279,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	280,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	281,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	282,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	283,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	284,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	285,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	286,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	287,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	288,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	289,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	290,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	291,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	292,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	293,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	294,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	295,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	296,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	297,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	298,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	299,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	300,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	301,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	302,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	303,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	304,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	305,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	306,
									"scores":	[-9.6851229234356, -9.6312316482356, -10.0641949034356, -9.9999225774356, -9.7007891634356, -9.8960120404355969, -9.9331124404356, -9.1841879234356, -10.499269097435597, -10.499269097435597, -10.499269097435597, -10.499269097435597, -10.745308011235597, -10.745308011235597, -10.745308011235597, -10.7101582144356, -10.499269097435597, -10.499269097435597, -10.499269097435597]
								}, {
									"case":	307,
									"scores":	[-9.6861229234356, -9.6322316482356, -10.0651949034356, -10.0009225774356, -9.7017891634356, -9.8970120404356, -9.9341124404356, -9.1851879234355973, -10.5002690974356, -10.5002690974356, -10.5002690974356, -10.5002690974356, -10.7463080112356, -10.7463080112356, -10.7463080112356, -10.7111582144356, -10.5002690974356, -10.5002690974356, -10.5002690974356]
								}]
						}, {
							"switch":	44,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	145,
							"begin_column":	4,
							"end_line":	148,
							"end_column":	4,
							"patch_codes":	["if (__is_neg(\"\", \"L145\", 19, &(is_temp), sizeof (is_temp), &(myht), sizeof (myht), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(level), sizeof (level), &(php_element_dump_func), sizeof (php_element_dump_func), &(class_name), sizeof (class_name), &(struc), sizeof (struc), &(class_name_len), sizeof (class_name_len), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection))) {\n    zend_hash_destroy(myht);\n    _efree((myht));\n}\n", "if ((is_temp) || __is_neg(\"\", \"L145\", 19, &(is_temp), sizeof (is_temp), &(myht), sizeof (myht), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(level), sizeof (level), &(php_element_dump_func), sizeof (php_element_dump_func), &(class_name), sizeof (class_name), &(struc), sizeof (struc), &(class_name_len), sizeof (class_name_len), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection))) {\n    zend_hash_destroy(myht);\n    _efree((myht));\n}\n", "if ((is_temp) && !__is_neg(\"\", \"L145\", 19, &(is_temp), sizeof (is_temp), &(myht), sizeof (myht), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(level), sizeof (level), &(php_element_dump_func), sizeof (php_element_dump_func), &(class_name), sizeof (class_name), &(struc), sizeof (struc), &(class_name_len), sizeof (class_name_len), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection))) {\n    zend_hash_destroy(myht);\n    _efree((myht));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.1022029354281457, -4.4774260719281456, -4.7026641074281459, -4.7993342814281457, -4.1864767354281458, -4.571462935428146, -4.8658137354281461, -3.7801919054281461, -4.627047745428146, -4.627047745428146, -4.627047745428146, -4.627047745428146, -5.3849358454281457, -5.3849358454281457, -5.3849358454281457, -5.0963077454281462, -4.627047745428146, -4.627047745428146, -4.627047745428146]
								}, {
									"case":	2,
									"scores":	[-4.4249016984281457, -4.8001248349281456, -5.0253628704281459, -5.1220330444281457, -4.5091754984281458, -4.894161698428146, -5.1885124984281461, -4.1028906684281461, -4.949746508428146, -4.949746508428146, -4.949746508428146, -4.949746508428146, -5.7076346084281457, -5.7076346084281457, -5.7076346084281457, -5.4190065084281454, -4.949746508428146, -4.949746508428146, -4.949746508428146]
								}, {
									"case":	3,
									"scores":	[-4.4249016984281457, -4.8001248349281456, -5.0253628704281459, -5.1220330444281457, -4.5091754984281458, -4.894161698428146, -5.1885124984281461, -4.1028906684281461, -4.949746508428146, -4.949746508428146, -4.949746508428146, -4.949746508428146, -5.7076346084281457, -5.7076346084281457, -5.7076346084281457, -5.4190065084281454, -4.949746508428146, -4.949746508428146, -4.949746508428146]
								}]
						}, {
							"switch":	45,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	145,
							"begin_column":	4,
							"end_line":	148,
							"end_column":	4,
							"patch_codes":	["if (!__is_neg(\"\", \"L145\", 19, &(is_temp), sizeof (is_temp), &(myht), sizeof (myht), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(level), sizeof (level), &(php_element_dump_func), sizeof (php_element_dump_func), &(class_name), sizeof (class_name), &(struc), sizeof (struc), &(class_name_len), sizeof (class_name_len), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection)))\n    if (is_temp) {\n        zend_hash_destroy(myht);\n        _efree((myht));\n    }\n", "if (!__is_neg(\"\", \"L145\", 19, &(is_temp), sizeof (is_temp), &(myht), sizeof (myht), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(level), sizeof (level), &(php_element_dump_func), sizeof (php_element_dump_func), &(class_name), sizeof (class_name), &(struc), sizeof (struc), &(class_name_len), sizeof (class_name_len), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection)) && (is_temp)) {\n    zend_hash_destroy(myht);\n    _efree((myht));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.5335433974355972, -8.9087665339356, -9.1340045694356, -9.2306747434356, -8.6178171974356, -9.0028033974356, -9.2971541974356, -8.2115323674356, -9.0583882074356, -9.0583882074356, -9.0583882074356, -9.0583882074356, -9.8162763074355972, -9.8162763074355972, -9.8162763074355972, -9.5276482074356, -9.0583882074356, -9.0583882074356, -9.0583882074356]
								}, {
									"case":	2,
									"scores":	[-8.4197293974356, -8.7949525339356, -9.0201905694356, -9.1168607434356, -8.5040031974356, -8.8889893974356, -9.1833401974356, -8.0977183674356, -8.9445742074356, -8.9445742074356, -8.9445742074356, -8.9445742074356, -9.7024623074356, -9.7024623074356, -9.7024623074356, -9.4138342074356, -8.9445742074356, -8.9445742074356, -8.9445742074356]
								}]
						}]
				}, {
					"line":	141,
					"switches":	[{
							"switch":	37,
							"types":	[[], [], [], [], [], [], [], [], [], [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [], [], [], [], [], []],
							"begin_line":	142,
							"begin_column":	1,
							"end_line":	142,
							"end_column":	1,
							"patch_codes":	["((**(struc))).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*(struc), &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*struc, &(class_name), &class_name_len, 0)", "(**(struc)).value.ht->nApplyCount++", "(**(struc)).value.ht->nApplyCount--", "(class_name)++", "--(myht)->nApplyCount", "_efree(((class_name)))", "_efree(((myht)))", "is_temp = (0)", "is_temp = (1)", "is_temp = (2)", "is_temp = (3)", "is_temp = (4)", "is_temp = (5)", "is_temp = (6)", "is_temp = (7)", "is_temp = (is_temp)", "is_temp = (level)", "php_body_write(((**(struc)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(struc)).value.str.len))", "php_element_dump_func = (php_element_dump_func)", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted long input array (%s) overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted super-global (%s) variable overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(struc)).value.str.val)", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((myht)))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), (class_name), (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**(struc)).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, (myht) ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements((myht)) : 0)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((struc))))", "php_printf(\"\\\"%s\\\"\", (class_name))", "php_printf(\"\\\"%s\\\":protected\", (class_name))", "zend_hash_apply_with_arguments((myht), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy((myht))", "((**struc)).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "--myht->nApplyCount", "_efree((class_name))", "_efree((myht))", "exit(1)", "is_temp = 0", "php_body_write(((**struc).value.str.val), ((**struc).value.str.len))", "php_element_dump_func = php_array_element_dump", "php_element_dump_func = php_object_property_dump", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c\", level - 1, ' ')", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy(myht)", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	2,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	3,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	4,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	5,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	6,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	7,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	8,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	9,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	10,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	11,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	12,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	13,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	14,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	15,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	16,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	17,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	18,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	19,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	20,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	21,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	22,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	23,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	24,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	25,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	26,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	27,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	28,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	29,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	30,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	31,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	32,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	33,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	34,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	35,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	36,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	37,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	38,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	39,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	40,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	41,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	42,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	43,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	44,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	45,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	46,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	47,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	48,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	49,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	50,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	51,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	52,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	53,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	54,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	55,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	56,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	57,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	58,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	59,
									"scores":	[-7.0434426396436631]
								}]
						}, {
							"switch":	38,
							"types":	[[2], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	142,
							"begin_column":	3,
							"end_line":	149,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L142\", 19, &(myht), sizeof (myht), &(level), sizeof (level), &(php_element_dump_func), sizeof (php_element_dump_func), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(class_name), sizeof (class_name), &(is_temp), sizeof (is_temp), &(struc), sizeof (struc), &(class_name_len), sizeof (class_name_len), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection))) {\n    zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level);\n    --myht->nApplyCount;\n    if (is_temp) {\n        zend_hash_destroy(myht);\n        _efree((myht));\n    }\n}\n", "if ((myht) && !__is_neg(\"\", \"L142\", 19, &(myht), sizeof (myht), &(level), sizeof (level), &(php_element_dump_func), sizeof (php_element_dump_func), &(myht->nApplyCount), sizeof (myht->nApplyCount), &(class_name), sizeof (class_name), &(is_temp), sizeof (is_temp), &(struc), sizeof (struc), &(class_name_len), sizeof (class_name_len), &(myht->nTableSize), sizeof (myht->nTableSize), &(myht->nTableMask), sizeof (myht->nTableMask), &(myht->nNumOfElements), sizeof (myht->nNumOfElements), &(myht->nNextFreeElement), sizeof (myht->nNextFreeElement), &(myht->pInternalPointer), sizeof (myht->pInternalPointer), &(myht->pListHead), sizeof (myht->pListHead), &(myht->pListTail), sizeof (myht->pListTail), &(myht->arBuckets), sizeof (myht->arBuckets), &(myht->pDestructor), sizeof (myht->pDestructor), &(myht->persistent), sizeof (myht->persistent), &(myht->bApplyProtection), sizeof (myht->bApplyProtection))) {\n    zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level);\n    --myht->nApplyCount;\n    if (is_temp) {\n        zend_hash_destroy(myht);\n        _efree((myht));\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.3659612734281463, -3.1088556734281458, -2.5980394734281456, -3.565336700428146, -3.6834024734281456, -3.2141424734281454, -3.9777532734281458, -2.8921314434281458, -3.7389872834281457, -3.7389872834281457, -3.7389872834281457, -3.7389872834281457, -4.4968753834281454, -4.4968753834281454, -4.4968753834281454, -4.2082472834281459, -3.7389872834281457, -3.7389872834281457, -3.7389872834281457]
								}, {
									"case":	2,
									"scores":	[-4.5769627754281457, -4.3198571754281456, -3.8090409754281458, -4.7763382024281462, -4.8944039754281459, -4.4251439754281456, -5.188754775428146, -4.103132945428146, -4.9499887854281459, -4.9499887854281459, -4.9499887854281459, -4.9499887854281459, -5.7078768854281456, -5.7078768854281456, -5.7078768854281456, -5.4192487854281461, -4.9499887854281459, -4.9499887854281459, -4.9499887854281459]
								}]
						}]
				}, {
					"line":	149,
					"switches":	[{
							"switch":	46,
							"types":	[[], [], [], [], [305, 306], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], [], [], [], [283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282], [], [], [], [], [], []],
							"begin_line":	150,
							"begin_column":	1,
							"end_line":	150,
							"end_column":	1,
							"patch_codes":	["memset(&(((**struc))).is_ref__gc, 0, sizeof (*(&(((**struc))).is_ref__gc)))", "memset(&(((**struc))).refcount__gc, 0, sizeof (*(&(((**struc))).refcount__gc)))", "memset(&(((**struc))).type, 0, sizeof (*(&(((**struc))).type)))", "memset(&(((**struc))).value, 0, sizeof (*(&(((**struc))).value)))", "memset(&(((**struc))).value.dval, 0, sizeof (*(&(((**struc))).value.dval)))", "memset(&(((**struc))).value.ht, 0, sizeof (*(&(((**struc))).value.ht)))", "memset(&(((**struc))).value.lval, 0, sizeof (*(&(((**struc))).value.lval)))", "memset(&(((**struc))).value.obj, 0, sizeof (*(&(((**struc))).value.obj)))", "memset(&(((**struc))).value.obj.handle, 0, sizeof (*(&(((**struc))).value.obj.handle)))", "memset(&(((**struc))).value.obj.handlers, 0, sizeof (*(&(((**struc))).value.obj.handlers)))", "memset(&(((**struc))).value.obj.handlers->add_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->add_ref)))", "memset(&(((**struc))).value.obj.handlers->call_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->call_method)))", "memset(&(((**struc))).value.obj.handlers->cast_object, 0, sizeof (*(&(((**struc))).value.obj.handlers->cast_object)))", "memset(&(((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*(&(((**struc))).value.obj.handlers->clone_obj)))", "memset(&(((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*(&(((**struc))).value.obj.handlers->compare_objects)))", "memset(&(((**struc))).value.obj.handlers->count_elements, 0, sizeof (*(&(((**struc))).value.obj.handlers->count_elements)))", "memset(&(((**struc))).value.obj.handlers->del_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->del_ref)))", "memset(&(((**struc))).value.obj.handlers->get, 0, sizeof (*(&(((**struc))).value.obj.handlers->get)))", "memset(&(((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_entry)))", "memset(&(((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_name)))", "memset(&(((**struc))).value.obj.handlers->get_closure, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_closure)))", "memset(&(((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_constructor)))", "memset(&(((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_debug_info)))", "memset(&(((**struc))).value.obj.handlers->get_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_method)))", "memset(&(((**struc))).value.obj.handlers->get_properties, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_properties)))", "memset(&(((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_dimension)))", "memset(&(((**struc))).value.obj.handlers->has_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_property)))", "memset(&(((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_dimension)))", "memset(&(((**struc))).value.obj.handlers->read_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_property)))", "memset(&(((**struc))).value.obj.handlers->set, 0, sizeof (*(&(((**struc))).value.obj.handlers->set)))", "memset(&(((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_dimension)))", "memset(&(((**struc))).value.obj.handlers->unset_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_property)))", "memset(&(((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_dimension)))", "memset(&(((**struc))).value.obj.handlers->write_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_property)))", "memset(&(((**struc))).value.str, 0, sizeof (*(&(((**struc))).value.str)))", "memset(&((**struc)).is_ref__gc, 0, sizeof (*(&((**struc)).is_ref__gc)))", "memset(&((**struc)).refcount__gc, 0, sizeof (*(&((**struc)).refcount__gc)))", "memset(&((**struc)).type, 0, sizeof (*(&((**struc)).type)))", "memset(&((**struc)).value, 0, sizeof (*(&((**struc)).value)))", "memset(&((**struc)).value.dval, 0, sizeof (*(&((**struc)).value.dval)))", "memset(&((**struc)).value.ht, 0, sizeof (*(&((**struc)).value.ht)))", "memset(&((**struc)).value.lval, 0, sizeof (*(&((**struc)).value.lval)))", "memset(&((**struc)).value.obj, 0, sizeof (*(&((**struc)).value.obj)))", "memset(&((**struc)).value.obj.handle, 0, sizeof (*(&((**struc)).value.obj.handle)))", "memset(&((**struc)).value.obj.handlers, 0, sizeof (*(&((**struc)).value.obj.handlers)))", "memset(&((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->add_ref)))", "memset(&((**struc)).value.obj.handlers->call_method, 0, sizeof (*(&((**struc)).value.obj.handlers->call_method)))", "memset(&((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(&((**struc)).value.obj.handlers->cast_object)))", "memset(&((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(&((**struc)).value.obj.handlers->clone_obj)))", "memset(&((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(&((**struc)).value.obj.handlers->compare_objects)))", "memset(&((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(&((**struc)).value.obj.handlers->count_elements)))", "memset(&((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->del_ref)))", "memset(&((**struc)).value.obj.handlers->get, 0, sizeof (*(&((**struc)).value.obj.handlers->get)))", "memset(&((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_entry)))", "memset(&((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_name)))", "memset(&((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(&((**struc)).value.obj.handlers->get_closure)))", "memset(&((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(&((**struc)).value.obj.handlers->get_constructor)))", "memset(&((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(&((**struc)).value.obj.handlers->get_debug_info)))", "memset(&((**struc)).value.obj.handlers->get_method, 0, sizeof (*(&((**struc)).value.obj.handlers->get_method)))", "memset(&((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(&((**struc)).value.obj.handlers->get_properties)))", "memset(&((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(&((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->has_dimension)))", "memset(&((**struc)).value.obj.handlers->has_property, 0, sizeof (*(&((**struc)).value.obj.handlers->has_property)))", "memset(&((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->read_dimension)))", "memset(&((**struc)).value.obj.handlers->read_property, 0, sizeof (*(&((**struc)).value.obj.handlers->read_property)))", "memset(&((**struc)).value.obj.handlers->set, 0, sizeof (*(&((**struc)).value.obj.handlers->set)))", "memset(&((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_dimension)))", "memset(&((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_property)))", "memset(&((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->write_dimension)))", "memset(&((**struc)).value.obj.handlers->write_property, 0, sizeof (*(&((**struc)).value.obj.handlers->write_property)))", "memset(&((**struc)).value.str, 0, sizeof (*(&((**struc)).value.str)))", "memset(&(**struc).is_ref__gc, 0, sizeof (*(&(**struc).is_ref__gc)))", "memset(&(**struc).refcount__gc, 0, sizeof (*(&(**struc).refcount__gc)))", "memset(&(**struc).type, 0, sizeof (*(&(**struc).type)))", "memset(&(**struc).value, 0, sizeof (*(&(**struc).value)))", "memset(&(**struc).value.dval, 0, sizeof (*(&(**struc).value.dval)))", "memset(&(**struc).value.ht, 0, sizeof (*(&(**struc).value.ht)))", "memset(&(**struc).value.lval, 0, sizeof (*(&(**struc).value.lval)))", "memset(&(**struc).value.obj, 0, sizeof (*(&(**struc).value.obj)))", "memset(&(**struc).value.obj.handle, 0, sizeof (*(&(**struc).value.obj.handle)))", "memset(&(**struc).value.obj.handlers, 0, sizeof (*(&(**struc).value.obj.handlers)))", "memset(&(**struc).value.str, 0, sizeof (*(&(**struc).value.str)))", "memset(&(**struc).value.str.len, 0, sizeof (*(&(**struc).value.str.len)))", "memset(&(**struc).value.str.val, 0, sizeof (*(&(**struc).value.str.val)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((((**struc))).value.ht, 0, sizeof (*((((**struc))).value.ht)))", "memset((((**struc))).value.obj.handlers, 0, sizeof (*((((**struc))).value.obj.handlers)))", "memset((((**struc))).value.obj.handlers->add_ref, 0, sizeof (*((((**struc))).value.obj.handlers->add_ref)))", "memset((((**struc))).value.obj.handlers->call_method, 0, sizeof (*((((**struc))).value.obj.handlers->call_method)))", "memset((((**struc))).value.obj.handlers->cast_object, 0, sizeof (*((((**struc))).value.obj.handlers->cast_object)))", "memset((((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*((((**struc))).value.obj.handlers->clone_obj)))", "memset((((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*((((**struc))).value.obj.handlers->compare_objects)))", "memset((((**struc))).value.obj.handlers->count_elements, 0, sizeof (*((((**struc))).value.obj.handlers->count_elements)))", "memset((((**struc))).value.obj.handlers->del_ref, 0, sizeof (*((((**struc))).value.obj.handlers->del_ref)))", "memset((((**struc))).value.obj.handlers->get, 0, sizeof (*((((**struc))).value.obj.handlers->get)))", "memset((((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_entry)))", "memset((((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_name)))", "memset((((**struc))).value.obj.handlers->get_closure, 0, sizeof (*((((**struc))).value.obj.handlers->get_closure)))", "memset((((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*((((**struc))).value.obj.handlers->get_constructor)))", "memset((((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*((((**struc))).value.obj.handlers->get_debug_info)))", "memset((((**struc))).value.obj.handlers->get_method, 0, sizeof (*((((**struc))).value.obj.handlers->get_method)))", "memset((((**struc))).value.obj.handlers->get_properties, 0, sizeof (*((((**struc))).value.obj.handlers->get_properties)))", "memset((((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset((((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->has_dimension)))", "memset((((**struc))).value.obj.handlers->has_property, 0, sizeof (*((((**struc))).value.obj.handlers->has_property)))", "memset((((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->read_dimension)))", "memset((((**struc))).value.obj.handlers->read_property, 0, sizeof (*((((**struc))).value.obj.handlers->read_property)))", "memset((((**struc))).value.obj.handlers->set, 0, sizeof (*((((**struc))).value.obj.handlers->set)))", "memset((((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->unset_dimension)))", "memset((((**struc))).value.obj.handlers->unset_property, 0, sizeof (*((((**struc))).value.obj.handlers->unset_property)))", "memset((((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->write_dimension)))", "memset((((**struc))).value.obj.handlers->write_property, 0, sizeof (*((((**struc))).value.obj.handlers->write_property)))", "memset(((**struc)).value.ht, 0, sizeof (*(((**struc)).value.ht)))", "memset(((**struc)).value.obj.handlers, 0, sizeof (*(((**struc)).value.obj.handlers)))", "memset(((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(((**struc)).value.obj.handlers->add_ref)))", "memset(((**struc)).value.obj.handlers->call_method, 0, sizeof (*(((**struc)).value.obj.handlers->call_method)))", "memset(((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(((**struc)).value.obj.handlers->cast_object)))", "memset(((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(((**struc)).value.obj.handlers->clone_obj)))", "memset(((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(((**struc)).value.obj.handlers->compare_objects)))", "memset(((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(((**struc)).value.obj.handlers->count_elements)))", "memset(((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(((**struc)).value.obj.handlers->del_ref)))", "memset(((**struc)).value.obj.handlers->get, 0, sizeof (*(((**struc)).value.obj.handlers->get)))", "memset(((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_entry)))", "memset(((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_name)))", "memset(((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(((**struc)).value.obj.handlers->get_closure)))", "memset(((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(((**struc)).value.obj.handlers->get_constructor)))", "memset(((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(((**struc)).value.obj.handlers->get_debug_info)))", "memset(((**struc)).value.obj.handlers->get_method, 0, sizeof (*(((**struc)).value.obj.handlers->get_method)))", "memset(((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(((**struc)).value.obj.handlers->get_properties)))", "memset(((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->has_dimension)))", "memset(((**struc)).value.obj.handlers->has_property, 0, sizeof (*(((**struc)).value.obj.handlers->has_property)))", "memset(((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->read_dimension)))", "memset(((**struc)).value.obj.handlers->read_property, 0, sizeof (*(((**struc)).value.obj.handlers->read_property)))", "memset(((**struc)).value.obj.handlers->set, 0, sizeof (*(((**struc)).value.obj.handlers->set)))", "memset(((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->unset_dimension)))", "memset(((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(((**struc)).value.obj.handlers->unset_property)))", "memset(((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->write_dimension)))", "memset(((**struc)).value.obj.handlers->write_property, 0, sizeof (*(((**struc)).value.obj.handlers->write_property)))", "memset((**struc).value.ht, 0, sizeof (*((**struc).value.ht)))", "memset((**struc).value.obj.handlers, 0, sizeof (*((**struc).value.obj.handlers)))", "memset((**struc).value.str.val, 0, sizeof (*((**struc).value.str.val)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw, 0, sizeof (*(executor_globals.saved_fpu_cw)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "((**(struc))).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*(struc), &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*struc, &(class_name), &class_name_len, 0)", "(**(struc)).value.ht->nApplyCount++", "(**(struc)).value.ht->nApplyCount--", "(class_name)++", "--(myht)->nApplyCount", "_efree(((class_name)))", "_efree(((myht)))", "is_temp = (0)", "is_temp = (1)", "is_temp = (2)", "is_temp = (3)", "is_temp = (4)", "is_temp = (5)", "is_temp = (6)", "is_temp = (7)", "is_temp = (is_temp)", "is_temp = (level)", "php_body_write(((**(struc)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(struc)).value.str.len))", "php_element_dump_func = (php_element_dump_func)", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted long input array (%s) overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted super-global (%s) variable overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(struc)).value.str.val)", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((myht)))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), (class_name), (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**(struc)).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, (myht) ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements((myht)) : 0)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((struc))))", "php_printf(\"\\\"%s\\\"\", (class_name))", "php_printf(\"\\\"%s\\\":protected\", (class_name))", "zend_hash_apply_with_arguments((myht), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy((myht))", "((**struc)).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "--myht->nApplyCount", "_efree((class_name))", "_efree((myht))", "exit(1)", "is_temp = 0", "php_body_write(((**struc).value.str.val), ((**struc).value.str.len))", "php_element_dump_func = php_array_element_dump", "php_element_dump_func = php_object_property_dump", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c\", level - 1, ' ')", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy(myht)", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L150\", 7, &(level), sizeof (level), &(myht), sizeof (myht), &(is_temp), sizeof (is_temp), &(php_element_dump_func), sizeof (php_element_dump_func), &(struc), sizeof (struc), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len)))\n    goto head_done;\n", "if (__is_neg(\"\", \"L150\", 7, &(level), sizeof (level), &(myht), sizeof (myht), &(is_temp), sizeof (is_temp), &(php_element_dump_func), sizeof (php_element_dump_func), &(struc), sizeof (struc), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.43736142011808]
								}, {
									"case":	2,
									"scores":	[-6.43736142011808]
								}, {
									"case":	3,
									"scores":	[-6.43736142011808]
								}, {
									"case":	4,
									"scores":	[-6.43736142011808]
								}, {
									"case":	5,
									"scores":	[-6.43736142011808]
								}, {
									"case":	6,
									"scores":	[-6.43736142011808]
								}, {
									"case":	7,
									"scores":	[-6.43736142011808]
								}, {
									"case":	8,
									"scores":	[-6.43736142011808]
								}, {
									"case":	9,
									"scores":	[-6.43736142011808]
								}, {
									"case":	10,
									"scores":	[-6.43736142011808]
								}, {
									"case":	11,
									"scores":	[-6.43736142011808]
								}, {
									"case":	12,
									"scores":	[-6.43736142011808]
								}, {
									"case":	13,
									"scores":	[-6.43736142011808]
								}, {
									"case":	14,
									"scores":	[-6.43736142011808]
								}, {
									"case":	15,
									"scores":	[-6.43736142011808]
								}, {
									"case":	16,
									"scores":	[-6.43736142011808]
								}, {
									"case":	17,
									"scores":	[-6.43736142011808]
								}, {
									"case":	18,
									"scores":	[-6.43736142011808]
								}, {
									"case":	19,
									"scores":	[-6.43736142011808]
								}, {
									"case":	20,
									"scores":	[-6.43736142011808]
								}, {
									"case":	21,
									"scores":	[-6.43736142011808]
								}, {
									"case":	22,
									"scores":	[-6.43736142011808]
								}, {
									"case":	23,
									"scores":	[-6.43736142011808]
								}, {
									"case":	24,
									"scores":	[-6.43736142011808]
								}, {
									"case":	25,
									"scores":	[-6.43736142011808]
								}, {
									"case":	26,
									"scores":	[-6.43736142011808]
								}, {
									"case":	27,
									"scores":	[-6.43736142011808]
								}, {
									"case":	28,
									"scores":	[-6.43736142011808]
								}, {
									"case":	29,
									"scores":	[-6.43736142011808]
								}, {
									"case":	30,
									"scores":	[-6.43736142011808]
								}, {
									"case":	31,
									"scores":	[-6.43736142011808]
								}, {
									"case":	32,
									"scores":	[-6.43736142011808]
								}, {
									"case":	33,
									"scores":	[-6.43736142011808]
								}, {
									"case":	34,
									"scores":	[-6.43736142011808]
								}, {
									"case":	35,
									"scores":	[-6.43736142011808]
								}, {
									"case":	36,
									"scores":	[-6.43736142011808]
								}, {
									"case":	37,
									"scores":	[-6.43736142011808]
								}, {
									"case":	38,
									"scores":	[-6.43736142011808]
								}, {
									"case":	39,
									"scores":	[-6.43736142011808]
								}, {
									"case":	40,
									"scores":	[-6.43736142011808]
								}, {
									"case":	41,
									"scores":	[-6.43736142011808]
								}, {
									"case":	42,
									"scores":	[-6.43736142011808]
								}, {
									"case":	43,
									"scores":	[-6.43736142011808]
								}, {
									"case":	44,
									"scores":	[-6.43736142011808]
								}, {
									"case":	45,
									"scores":	[-6.43736142011808]
								}, {
									"case":	46,
									"scores":	[-6.43736142011808]
								}, {
									"case":	47,
									"scores":	[-6.43736142011808]
								}, {
									"case":	48,
									"scores":	[-6.43736142011808]
								}, {
									"case":	49,
									"scores":	[-6.43736142011808]
								}, {
									"case":	50,
									"scores":	[-6.43736142011808]
								}, {
									"case":	51,
									"scores":	[-6.43736142011808]
								}, {
									"case":	52,
									"scores":	[-6.43736142011808]
								}, {
									"case":	53,
									"scores":	[-6.43736142011808]
								}, {
									"case":	54,
									"scores":	[-6.43736142011808]
								}, {
									"case":	55,
									"scores":	[-6.43736142011808]
								}, {
									"case":	56,
									"scores":	[-6.43736142011808]
								}, {
									"case":	57,
									"scores":	[-6.43736142011808]
								}, {
									"case":	58,
									"scores":	[-6.43736142011808]
								}, {
									"case":	59,
									"scores":	[-6.43736142011808]
								}, {
									"case":	60,
									"scores":	[-6.43736142011808]
								}, {
									"case":	61,
									"scores":	[-6.43736142011808]
								}, {
									"case":	62,
									"scores":	[-6.43736142011808]
								}, {
									"case":	63,
									"scores":	[-6.43736142011808]
								}, {
									"case":	64,
									"scores":	[-6.43736142011808]
								}, {
									"case":	65,
									"scores":	[-6.43736142011808]
								}, {
									"case":	66,
									"scores":	[-6.43736142011808]
								}, {
									"case":	67,
									"scores":	[-6.43736142011808]
								}, {
									"case":	68,
									"scores":	[-6.43736142011808]
								}, {
									"case":	69,
									"scores":	[-6.43736142011808]
								}, {
									"case":	70,
									"scores":	[-6.43736142011808]
								}, {
									"case":	71,
									"scores":	[-6.43736142011808]
								}, {
									"case":	72,
									"scores":	[-6.43736142011808]
								}, {
									"case":	73,
									"scores":	[-6.43736142011808]
								}, {
									"case":	74,
									"scores":	[-6.43736142011808]
								}, {
									"case":	75,
									"scores":	[-6.43736142011808]
								}, {
									"case":	76,
									"scores":	[-6.43736142011808]
								}, {
									"case":	77,
									"scores":	[-6.43736142011808]
								}, {
									"case":	78,
									"scores":	[-6.43736142011808]
								}, {
									"case":	79,
									"scores":	[-6.43736142011808]
								}, {
									"case":	80,
									"scores":	[-6.43736142011808]
								}, {
									"case":	81,
									"scores":	[-6.43736142011808]
								}, {
									"case":	82,
									"scores":	[-6.43736142011808]
								}, {
									"case":	83,
									"scores":	[-6.43736142011808]
								}, {
									"case":	84,
									"scores":	[-6.43736142011808]
								}, {
									"case":	85,
									"scores":	[-6.43736142011808]
								}, {
									"case":	86,
									"scores":	[-6.43736142011808]
								}, {
									"case":	87,
									"scores":	[-6.43736142011808]
								}, {
									"case":	88,
									"scores":	[-6.43736142011808]
								}, {
									"case":	89,
									"scores":	[-6.43736142011808]
								}, {
									"case":	90,
									"scores":	[-6.43736142011808]
								}, {
									"case":	91,
									"scores":	[-6.43736142011808]
								}, {
									"case":	92,
									"scores":	[-6.43736142011808]
								}, {
									"case":	93,
									"scores":	[-6.43736142011808]
								}, {
									"case":	94,
									"scores":	[-6.43736142011808]
								}, {
									"case":	95,
									"scores":	[-6.43736142011808]
								}, {
									"case":	96,
									"scores":	[-6.43736142011808]
								}, {
									"case":	97,
									"scores":	[-6.43736142011808]
								}, {
									"case":	98,
									"scores":	[-6.43736142011808]
								}, {
									"case":	99,
									"scores":	[-6.43736142011808]
								}, {
									"case":	100,
									"scores":	[-6.43736142011808]
								}, {
									"case":	101,
									"scores":	[-6.43736142011808]
								}, {
									"case":	102,
									"scores":	[-6.43736142011808]
								}, {
									"case":	103,
									"scores":	[-6.43736142011808]
								}, {
									"case":	104,
									"scores":	[-6.43736142011808]
								}, {
									"case":	105,
									"scores":	[-6.43736142011808]
								}, {
									"case":	106,
									"scores":	[-6.43736142011808]
								}, {
									"case":	107,
									"scores":	[-6.43736142011808]
								}, {
									"case":	108,
									"scores":	[-6.43736142011808]
								}, {
									"case":	109,
									"scores":	[-6.43736142011808]
								}, {
									"case":	110,
									"scores":	[-6.43736142011808]
								}, {
									"case":	111,
									"scores":	[-6.43736142011808]
								}, {
									"case":	112,
									"scores":	[-6.43736142011808]
								}, {
									"case":	113,
									"scores":	[-6.43736142011808]
								}, {
									"case":	114,
									"scores":	[-6.43736142011808]
								}, {
									"case":	115,
									"scores":	[-6.43736142011808]
								}, {
									"case":	116,
									"scores":	[-6.43736142011808]
								}, {
									"case":	117,
									"scores":	[-6.43736142011808]
								}, {
									"case":	118,
									"scores":	[-6.43736142011808]
								}, {
									"case":	119,
									"scores":	[-6.43736142011808]
								}, {
									"case":	120,
									"scores":	[-6.43736142011808]
								}, {
									"case":	121,
									"scores":	[-6.43736142011808]
								}, {
									"case":	122,
									"scores":	[-6.43736142011808]
								}, {
									"case":	123,
									"scores":	[-6.43736142011808]
								}, {
									"case":	124,
									"scores":	[-6.43736142011808]
								}, {
									"case":	125,
									"scores":	[-6.43736142011808]
								}, {
									"case":	126,
									"scores":	[-6.43736142011808]
								}, {
									"case":	127,
									"scores":	[-6.43736142011808]
								}, {
									"case":	128,
									"scores":	[-6.43736142011808]
								}, {
									"case":	129,
									"scores":	[-6.43736142011808]
								}, {
									"case":	130,
									"scores":	[-6.43736142011808]
								}, {
									"case":	131,
									"scores":	[-6.43736142011808]
								}, {
									"case":	132,
									"scores":	[-6.43736142011808]
								}, {
									"case":	133,
									"scores":	[-6.43736142011808]
								}, {
									"case":	134,
									"scores":	[-6.43736142011808]
								}, {
									"case":	135,
									"scores":	[-6.43736142011808]
								}, {
									"case":	136,
									"scores":	[-6.43736142011808]
								}, {
									"case":	137,
									"scores":	[-6.43736142011808]
								}, {
									"case":	138,
									"scores":	[-6.43736142011808]
								}, {
									"case":	139,
									"scores":	[-6.43736142011808]
								}, {
									"case":	140,
									"scores":	[-6.43736142011808]
								}, {
									"case":	141,
									"scores":	[-6.43736142011808]
								}, {
									"case":	142,
									"scores":	[-6.43736142011808]
								}, {
									"case":	143,
									"scores":	[-6.43736142011808]
								}, {
									"case":	144,
									"scores":	[-6.43736142011808]
								}, {
									"case":	145,
									"scores":	[-6.43736142011808]
								}, {
									"case":	146,
									"scores":	[-6.43736142011808]
								}, {
									"case":	147,
									"scores":	[-6.43736142011808]
								}, {
									"case":	148,
									"scores":	[-6.43736142011808]
								}, {
									"case":	149,
									"scores":	[-6.43736142011808]
								}, {
									"case":	150,
									"scores":	[-6.43736142011808]
								}, {
									"case":	151,
									"scores":	[-6.43736142011808]
								}, {
									"case":	152,
									"scores":	[-6.43736142011808]
								}, {
									"case":	153,
									"scores":	[-6.43736142011808]
								}, {
									"case":	154,
									"scores":	[-6.43736142011808]
								}, {
									"case":	155,
									"scores":	[-6.43736142011808]
								}, {
									"case":	156,
									"scores":	[-6.43736142011808]
								}, {
									"case":	157,
									"scores":	[-6.43736142011808]
								}, {
									"case":	158,
									"scores":	[-6.43736142011808]
								}, {
									"case":	159,
									"scores":	[-6.43736142011808]
								}, {
									"case":	160,
									"scores":	[-6.43736142011808]
								}, {
									"case":	161,
									"scores":	[-6.43736142011808]
								}, {
									"case":	162,
									"scores":	[-6.43736142011808]
								}, {
									"case":	163,
									"scores":	[-6.43736142011808]
								}, {
									"case":	164,
									"scores":	[-6.43736142011808]
								}, {
									"case":	165,
									"scores":	[-6.43736142011808]
								}, {
									"case":	166,
									"scores":	[-6.43736142011808]
								}, {
									"case":	167,
									"scores":	[-6.43736142011808]
								}, {
									"case":	168,
									"scores":	[-6.43736142011808]
								}, {
									"case":	169,
									"scores":	[-6.43736142011808]
								}, {
									"case":	170,
									"scores":	[-6.43736142011808]
								}, {
									"case":	171,
									"scores":	[-6.43736142011808]
								}, {
									"case":	172,
									"scores":	[-6.43736142011808]
								}, {
									"case":	173,
									"scores":	[-6.43736142011808]
								}, {
									"case":	174,
									"scores":	[-6.43736142011808]
								}, {
									"case":	175,
									"scores":	[-6.43736142011808]
								}, {
									"case":	176,
									"scores":	[-6.43736142011808]
								}, {
									"case":	177,
									"scores":	[-6.43736142011808]
								}, {
									"case":	178,
									"scores":	[-6.43736142011808]
								}, {
									"case":	179,
									"scores":	[-6.43736142011808]
								}, {
									"case":	180,
									"scores":	[-6.43736142011808]
								}, {
									"case":	181,
									"scores":	[-6.43736142011808]
								}, {
									"case":	182,
									"scores":	[-6.43736142011808]
								}, {
									"case":	183,
									"scores":	[-6.43736142011808]
								}, {
									"case":	184,
									"scores":	[-6.43736142011808]
								}, {
									"case":	185,
									"scores":	[-6.43736142011808]
								}, {
									"case":	186,
									"scores":	[-6.43736142011808]
								}, {
									"case":	187,
									"scores":	[-6.43736142011808]
								}, {
									"case":	188,
									"scores":	[-6.43736142011808]
								}, {
									"case":	189,
									"scores":	[-6.43736142011808]
								}, {
									"case":	190,
									"scores":	[-6.43736142011808]
								}, {
									"case":	191,
									"scores":	[-6.43736142011808]
								}, {
									"case":	192,
									"scores":	[-6.43736142011808]
								}, {
									"case":	193,
									"scores":	[-6.43736142011808]
								}, {
									"case":	194,
									"scores":	[-6.43736142011808]
								}, {
									"case":	195,
									"scores":	[-6.43736142011808]
								}, {
									"case":	196,
									"scores":	[-6.43736142011808]
								}, {
									"case":	197,
									"scores":	[-6.43736142011808]
								}, {
									"case":	198,
									"scores":	[-6.43736142011808]
								}, {
									"case":	199,
									"scores":	[-6.43736142011808]
								}, {
									"case":	200,
									"scores":	[-6.43736142011808]
								}, {
									"case":	201,
									"scores":	[-6.43736142011808]
								}, {
									"case":	202,
									"scores":	[-6.43736142011808]
								}, {
									"case":	203,
									"scores":	[-6.43736142011808]
								}, {
									"case":	204,
									"scores":	[-6.43736142011808]
								}, {
									"case":	205,
									"scores":	[-6.43736142011808]
								}, {
									"case":	206,
									"scores":	[-6.43736142011808]
								}, {
									"case":	207,
									"scores":	[-6.43736142011808]
								}, {
									"case":	208,
									"scores":	[-6.43736142011808]
								}, {
									"case":	209,
									"scores":	[-6.43736142011808]
								}, {
									"case":	210,
									"scores":	[-6.43736142011808]
								}, {
									"case":	211,
									"scores":	[-6.43736142011808]
								}, {
									"case":	212,
									"scores":	[-6.43736142011808]
								}, {
									"case":	213,
									"scores":	[-6.43736142011808]
								}, {
									"case":	214,
									"scores":	[-6.43736142011808]
								}, {
									"case":	215,
									"scores":	[-6.43736142011808]
								}, {
									"case":	216,
									"scores":	[-6.43736142011808]
								}, {
									"case":	217,
									"scores":	[-6.43736142011808]
								}, {
									"case":	218,
									"scores":	[-6.43736142011808]
								}, {
									"case":	219,
									"scores":	[-6.43736142011808]
								}, {
									"case":	220,
									"scores":	[-6.43736142011808]
								}, {
									"case":	221,
									"scores":	[-6.43736142011808]
								}, {
									"case":	222,
									"scores":	[-6.43736142011808]
								}, {
									"case":	223,
									"scores":	[-6.43736142011808]
								}, {
									"case":	224,
									"scores":	[-6.43736142011808]
								}, {
									"case":	225,
									"scores":	[-6.43736142011808]
								}, {
									"case":	226,
									"scores":	[-6.43736142011808]
								}, {
									"case":	227,
									"scores":	[-6.43736142011808]
								}, {
									"case":	228,
									"scores":	[-6.43736142011808]
								}, {
									"case":	229,
									"scores":	[-6.43736142011808]
								}, {
									"case":	230,
									"scores":	[-6.43736142011808]
								}, {
									"case":	231,
									"scores":	[-6.43736142011808]
								}, {
									"case":	232,
									"scores":	[-6.43736142011808]
								}, {
									"case":	233,
									"scores":	[-6.43736142011808]
								}, {
									"case":	234,
									"scores":	[-6.43736142011808]
								}, {
									"case":	235,
									"scores":	[-6.43736142011808]
								}, {
									"case":	236,
									"scores":	[-6.43736142011808]
								}, {
									"case":	237,
									"scores":	[-6.43736142011808]
								}, {
									"case":	238,
									"scores":	[-6.43736142011808]
								}, {
									"case":	239,
									"scores":	[-6.43736142011808]
								}, {
									"case":	240,
									"scores":	[-6.43736142011808]
								}, {
									"case":	241,
									"scores":	[-6.43736142011808]
								}, {
									"case":	242,
									"scores":	[-6.43736142011808]
								}, {
									"case":	243,
									"scores":	[-6.43736142011808]
								}, {
									"case":	244,
									"scores":	[-6.43736142011808]
								}, {
									"case":	245,
									"scores":	[-6.43736142011808]
								}, {
									"case":	246,
									"scores":	[-6.43736142011808]
								}, {
									"case":	247,
									"scores":	[-6.43736142011808]
								}, {
									"case":	248,
									"scores":	[-6.43736142011808]
								}, {
									"case":	249,
									"scores":	[-6.43736142011808]
								}, {
									"case":	250,
									"scores":	[-6.43736142011808]
								}, {
									"case":	251,
									"scores":	[-6.43736142011808]
								}, {
									"case":	252,
									"scores":	[-6.43736142011808]
								}, {
									"case":	253,
									"scores":	[-6.43736142011808]
								}, {
									"case":	254,
									"scores":	[-6.43736142011808]
								}, {
									"case":	255,
									"scores":	[-6.43736142011808]
								}, {
									"case":	256,
									"scores":	[-6.43736142011808]
								}, {
									"case":	257,
									"scores":	[-6.43736142011808]
								}, {
									"case":	258,
									"scores":	[-6.43736142011808]
								}, {
									"case":	259,
									"scores":	[-6.43736142011808]
								}, {
									"case":	260,
									"scores":	[-6.43736142011808]
								}, {
									"case":	261,
									"scores":	[-6.43736142011808]
								}, {
									"case":	262,
									"scores":	[-6.43736142011808]
								}, {
									"case":	263,
									"scores":	[-6.43736142011808]
								}, {
									"case":	264,
									"scores":	[-6.43736142011808]
								}, {
									"case":	265,
									"scores":	[-6.43736142011808]
								}, {
									"case":	266,
									"scores":	[-6.43736142011808]
								}, {
									"case":	267,
									"scores":	[-6.43736142011808]
								}, {
									"case":	268,
									"scores":	[-6.43736142011808]
								}, {
									"case":	269,
									"scores":	[-6.43736142011808]
								}, {
									"case":	270,
									"scores":	[-6.43736142011808]
								}, {
									"case":	271,
									"scores":	[-6.43736142011808]
								}, {
									"case":	272,
									"scores":	[-6.43736142011808]
								}, {
									"case":	273,
									"scores":	[-6.43736142011808]
								}, {
									"case":	274,
									"scores":	[-6.43736142011808]
								}, {
									"case":	275,
									"scores":	[-6.43736142011808]
								}, {
									"case":	276,
									"scores":	[-6.43736142011808]
								}, {
									"case":	277,
									"scores":	[-6.43736142011808]
								}, {
									"case":	278,
									"scores":	[-6.43736142011808]
								}, {
									"case":	279,
									"scores":	[-6.43736142011808]
								}, {
									"case":	280,
									"scores":	[-6.43736142011808]
								}, {
									"case":	281,
									"scores":	[-6.43736142011808]
								}, {
									"case":	282,
									"scores":	[-6.43736142011808]
								}, {
									"case":	283,
									"scores":	[-6.43736142011808]
								}, {
									"case":	284,
									"scores":	[-6.43736142011808]
								}, {
									"case":	285,
									"scores":	[-6.43736142011808]
								}, {
									"case":	286,
									"scores":	[-6.43736142011808]
								}, {
									"case":	287,
									"scores":	[-6.43736142011808]
								}, {
									"case":	288,
									"scores":	[-6.43736142011808]
								}, {
									"case":	289,
									"scores":	[-6.43736142011808]
								}, {
									"case":	290,
									"scores":	[-6.43736142011808]
								}, {
									"case":	291,
									"scores":	[-6.43736142011808]
								}, {
									"case":	292,
									"scores":	[-6.43736142011808]
								}, {
									"case":	293,
									"scores":	[-6.43736142011808]
								}, {
									"case":	294,
									"scores":	[-6.43736142011808]
								}, {
									"case":	295,
									"scores":	[-6.43736142011808]
								}, {
									"case":	296,
									"scores":	[-6.43736142011808]
								}, {
									"case":	297,
									"scores":	[-6.43736142011808]
								}, {
									"case":	298,
									"scores":	[-6.43736142011808]
								}, {
									"case":	299,
									"scores":	[-6.43736142011808]
								}, {
									"case":	300,
									"scores":	[-6.43736142011808]
								}, {
									"case":	301,
									"scores":	[-6.43736142011808]
								}, {
									"case":	302,
									"scores":	[-6.43736142011808]
								}, {
									"case":	303,
									"scores":	[-6.43736142011808]
								}, {
									"case":	304,
									"scores":	[-6.43736142011808]
								}, {
									"case":	305,
									"scores":	[-9.93185884651808, -11.52992667131808, -10.728509977518078, -8.939344737518077, -11.577300494518079, -10.959513174518079, -10.227574977518078]
								}, {
									"case":	306,
									"scores":	[-9.93285884651808, -11.530926671318079, -10.729509977518077, -8.94034473751808, -11.578300494518079, -10.960513174518079, -10.228574977518077]
								}]
						}, {
							"switch":	47,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	150,
							"begin_column":	3,
							"end_line":	152,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L150\", 7, &(level), sizeof (level), &(myht), sizeof (myht), &(is_temp), sizeof (is_temp), &(php_element_dump_func), sizeof (php_element_dump_func), &(struc), sizeof (struc), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len))) {\n    php_printf(\"%*c\", level - 1, ' ');\n}\n", "if ((level > 1) || __is_neg(\"\", \"L150\", 7, &(level), sizeof (level), &(myht), sizeof (myht), &(is_temp), sizeof (is_temp), &(php_element_dump_func), sizeof (php_element_dump_func), &(struc), sizeof (struc), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len))) {\n    php_printf(\"%*c\", level - 1, ' ');\n}\n", "if ((level > 1) && !__is_neg(\"\", \"L150\", 7, &(level), sizeof (level), &(myht), sizeof (myht), &(is_temp), sizeof (is_temp), &(php_element_dump_func), sizeof (php_element_dump_func), &(struc), sizeof (struc), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len))) {\n    php_printf(\"%*c\", level - 1, ' ');\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.680570248428146, -4.7481263389281461, -3.6594679024281458, -2.863064842428146, -5.1541943624281465, -4.2177107484281455, -3.3374568724281461]
								}, {
									"case":	2,
									"scores":	[-3.0515906409281457, -6.1191467314281454, -5.030488294928146, -4.2340852349281457, -6.5252147549281458, -5.5887311409281457, -4.7084772649281454]
								}, {
									"case":	3,
									"scores":	[-3.0515906409281457, -6.1191467314281454, -5.030488294928146, -4.2340852349281457, -6.5252147549281458, -5.5887311409281457, -4.7084772649281454]
								}]
						}, {
							"switch":	48,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	150,
							"begin_column":	3,
							"end_line":	152,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L150\", 7, &(level), sizeof (level), &(myht), sizeof (myht), &(is_temp), sizeof (is_temp), &(php_element_dump_func), sizeof (php_element_dump_func), &(struc), sizeof (struc), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len)))\n    if (level > 1) {\n        php_printf(\"%*c\", level - 1, ' ');\n    }\n", "if (!__is_neg(\"\", \"L150\", 7, &(level), sizeof (level), &(myht), sizeof (myht), &(is_temp), sizeof (is_temp), &(php_element_dump_func), sizeof (php_element_dump_func), &(struc), sizeof (struc), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len)) && (level > 1)) {\n    php_printf(\"%*c\", level - 1, ' ');\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.11591873611808, -9.18347482661808, -8.09481639011808, -7.29841333011808, -9.58954285011808, -8.65305923611808, -7.77280536011808]
								}, {
									"case":	2,
									"scores":	[-6.25121009561808, -9.31876618611808, -8.23010774961808, -7.43370468961808, -9.72483420961808, -8.78835059561808, -7.90809671961808]
								}]
						}]
				}, {
					"line":	152,
					"switches":	[{
							"switch":	49,
							"types":	[[], [], [], [], [305, 306], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], [], [], [], [283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282], [], [], [], [], [], []],
							"begin_line":	153,
							"begin_column":	1,
							"end_line":	153,
							"end_column":	1,
							"patch_codes":	["memset(&(((**struc))).is_ref__gc, 0, sizeof (*(&(((**struc))).is_ref__gc)))", "memset(&(((**struc))).refcount__gc, 0, sizeof (*(&(((**struc))).refcount__gc)))", "memset(&(((**struc))).type, 0, sizeof (*(&(((**struc))).type)))", "memset(&(((**struc))).value, 0, sizeof (*(&(((**struc))).value)))", "memset(&(((**struc))).value.dval, 0, sizeof (*(&(((**struc))).value.dval)))", "memset(&(((**struc))).value.ht, 0, sizeof (*(&(((**struc))).value.ht)))", "memset(&(((**struc))).value.lval, 0, sizeof (*(&(((**struc))).value.lval)))", "memset(&(((**struc))).value.obj, 0, sizeof (*(&(((**struc))).value.obj)))", "memset(&(((**struc))).value.obj.handle, 0, sizeof (*(&(((**struc))).value.obj.handle)))", "memset(&(((**struc))).value.obj.handlers, 0, sizeof (*(&(((**struc))).value.obj.handlers)))", "memset(&(((**struc))).value.obj.handlers->add_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->add_ref)))", "memset(&(((**struc))).value.obj.handlers->call_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->call_method)))", "memset(&(((**struc))).value.obj.handlers->cast_object, 0, sizeof (*(&(((**struc))).value.obj.handlers->cast_object)))", "memset(&(((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*(&(((**struc))).value.obj.handlers->clone_obj)))", "memset(&(((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*(&(((**struc))).value.obj.handlers->compare_objects)))", "memset(&(((**struc))).value.obj.handlers->count_elements, 0, sizeof (*(&(((**struc))).value.obj.handlers->count_elements)))", "memset(&(((**struc))).value.obj.handlers->del_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->del_ref)))", "memset(&(((**struc))).value.obj.handlers->get, 0, sizeof (*(&(((**struc))).value.obj.handlers->get)))", "memset(&(((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_entry)))", "memset(&(((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_name)))", "memset(&(((**struc))).value.obj.handlers->get_closure, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_closure)))", "memset(&(((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_constructor)))", "memset(&(((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_debug_info)))", "memset(&(((**struc))).value.obj.handlers->get_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_method)))", "memset(&(((**struc))).value.obj.handlers->get_properties, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_properties)))", "memset(&(((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_dimension)))", "memset(&(((**struc))).value.obj.handlers->has_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_property)))", "memset(&(((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_dimension)))", "memset(&(((**struc))).value.obj.handlers->read_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_property)))", "memset(&(((**struc))).value.obj.handlers->set, 0, sizeof (*(&(((**struc))).value.obj.handlers->set)))", "memset(&(((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_dimension)))", "memset(&(((**struc))).value.obj.handlers->unset_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_property)))", "memset(&(((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_dimension)))", "memset(&(((**struc))).value.obj.handlers->write_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_property)))", "memset(&(((**struc))).value.str, 0, sizeof (*(&(((**struc))).value.str)))", "memset(&((**struc)).is_ref__gc, 0, sizeof (*(&((**struc)).is_ref__gc)))", "memset(&((**struc)).refcount__gc, 0, sizeof (*(&((**struc)).refcount__gc)))", "memset(&((**struc)).type, 0, sizeof (*(&((**struc)).type)))", "memset(&((**struc)).value, 0, sizeof (*(&((**struc)).value)))", "memset(&((**struc)).value.dval, 0, sizeof (*(&((**struc)).value.dval)))", "memset(&((**struc)).value.ht, 0, sizeof (*(&((**struc)).value.ht)))", "memset(&((**struc)).value.lval, 0, sizeof (*(&((**struc)).value.lval)))", "memset(&((**struc)).value.obj, 0, sizeof (*(&((**struc)).value.obj)))", "memset(&((**struc)).value.obj.handle, 0, sizeof (*(&((**struc)).value.obj.handle)))", "memset(&((**struc)).value.obj.handlers, 0, sizeof (*(&((**struc)).value.obj.handlers)))", "memset(&((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->add_ref)))", "memset(&((**struc)).value.obj.handlers->call_method, 0, sizeof (*(&((**struc)).value.obj.handlers->call_method)))", "memset(&((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(&((**struc)).value.obj.handlers->cast_object)))", "memset(&((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(&((**struc)).value.obj.handlers->clone_obj)))", "memset(&((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(&((**struc)).value.obj.handlers->compare_objects)))", "memset(&((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(&((**struc)).value.obj.handlers->count_elements)))", "memset(&((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->del_ref)))", "memset(&((**struc)).value.obj.handlers->get, 0, sizeof (*(&((**struc)).value.obj.handlers->get)))", "memset(&((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_entry)))", "memset(&((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_name)))", "memset(&((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(&((**struc)).value.obj.handlers->get_closure)))", "memset(&((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(&((**struc)).value.obj.handlers->get_constructor)))", "memset(&((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(&((**struc)).value.obj.handlers->get_debug_info)))", "memset(&((**struc)).value.obj.handlers->get_method, 0, sizeof (*(&((**struc)).value.obj.handlers->get_method)))", "memset(&((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(&((**struc)).value.obj.handlers->get_properties)))", "memset(&((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(&((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->has_dimension)))", "memset(&((**struc)).value.obj.handlers->has_property, 0, sizeof (*(&((**struc)).value.obj.handlers->has_property)))", "memset(&((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->read_dimension)))", "memset(&((**struc)).value.obj.handlers->read_property, 0, sizeof (*(&((**struc)).value.obj.handlers->read_property)))", "memset(&((**struc)).value.obj.handlers->set, 0, sizeof (*(&((**struc)).value.obj.handlers->set)))", "memset(&((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_dimension)))", "memset(&((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_property)))", "memset(&((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->write_dimension)))", "memset(&((**struc)).value.obj.handlers->write_property, 0, sizeof (*(&((**struc)).value.obj.handlers->write_property)))", "memset(&((**struc)).value.str, 0, sizeof (*(&((**struc)).value.str)))", "memset(&(**struc).is_ref__gc, 0, sizeof (*(&(**struc).is_ref__gc)))", "memset(&(**struc).refcount__gc, 0, sizeof (*(&(**struc).refcount__gc)))", "memset(&(**struc).type, 0, sizeof (*(&(**struc).type)))", "memset(&(**struc).value, 0, sizeof (*(&(**struc).value)))", "memset(&(**struc).value.dval, 0, sizeof (*(&(**struc).value.dval)))", "memset(&(**struc).value.ht, 0, sizeof (*(&(**struc).value.ht)))", "memset(&(**struc).value.lval, 0, sizeof (*(&(**struc).value.lval)))", "memset(&(**struc).value.obj, 0, sizeof (*(&(**struc).value.obj)))", "memset(&(**struc).value.obj.handle, 0, sizeof (*(&(**struc).value.obj.handle)))", "memset(&(**struc).value.obj.handlers, 0, sizeof (*(&(**struc).value.obj.handlers)))", "memset(&(**struc).value.str, 0, sizeof (*(&(**struc).value.str)))", "memset(&(**struc).value.str.len, 0, sizeof (*(&(**struc).value.str.len)))", "memset(&(**struc).value.str.val, 0, sizeof (*(&(**struc).value.str.val)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((((**struc))).value.ht, 0, sizeof (*((((**struc))).value.ht)))", "memset((((**struc))).value.obj.handlers, 0, sizeof (*((((**struc))).value.obj.handlers)))", "memset((((**struc))).value.obj.handlers->add_ref, 0, sizeof (*((((**struc))).value.obj.handlers->add_ref)))", "memset((((**struc))).value.obj.handlers->call_method, 0, sizeof (*((((**struc))).value.obj.handlers->call_method)))", "memset((((**struc))).value.obj.handlers->cast_object, 0, sizeof (*((((**struc))).value.obj.handlers->cast_object)))", "memset((((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*((((**struc))).value.obj.handlers->clone_obj)))", "memset((((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*((((**struc))).value.obj.handlers->compare_objects)))", "memset((((**struc))).value.obj.handlers->count_elements, 0, sizeof (*((((**struc))).value.obj.handlers->count_elements)))", "memset((((**struc))).value.obj.handlers->del_ref, 0, sizeof (*((((**struc))).value.obj.handlers->del_ref)))", "memset((((**struc))).value.obj.handlers->get, 0, sizeof (*((((**struc))).value.obj.handlers->get)))", "memset((((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_entry)))", "memset((((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_name)))", "memset((((**struc))).value.obj.handlers->get_closure, 0, sizeof (*((((**struc))).value.obj.handlers->get_closure)))", "memset((((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*((((**struc))).value.obj.handlers->get_constructor)))", "memset((((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*((((**struc))).value.obj.handlers->get_debug_info)))", "memset((((**struc))).value.obj.handlers->get_method, 0, sizeof (*((((**struc))).value.obj.handlers->get_method)))", "memset((((**struc))).value.obj.handlers->get_properties, 0, sizeof (*((((**struc))).value.obj.handlers->get_properties)))", "memset((((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset((((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->has_dimension)))", "memset((((**struc))).value.obj.handlers->has_property, 0, sizeof (*((((**struc))).value.obj.handlers->has_property)))", "memset((((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->read_dimension)))", "memset((((**struc))).value.obj.handlers->read_property, 0, sizeof (*((((**struc))).value.obj.handlers->read_property)))", "memset((((**struc))).value.obj.handlers->set, 0, sizeof (*((((**struc))).value.obj.handlers->set)))", "memset((((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->unset_dimension)))", "memset((((**struc))).value.obj.handlers->unset_property, 0, sizeof (*((((**struc))).value.obj.handlers->unset_property)))", "memset((((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->write_dimension)))", "memset((((**struc))).value.obj.handlers->write_property, 0, sizeof (*((((**struc))).value.obj.handlers->write_property)))", "memset(((**struc)).value.ht, 0, sizeof (*(((**struc)).value.ht)))", "memset(((**struc)).value.obj.handlers, 0, sizeof (*(((**struc)).value.obj.handlers)))", "memset(((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(((**struc)).value.obj.handlers->add_ref)))", "memset(((**struc)).value.obj.handlers->call_method, 0, sizeof (*(((**struc)).value.obj.handlers->call_method)))", "memset(((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(((**struc)).value.obj.handlers->cast_object)))", "memset(((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(((**struc)).value.obj.handlers->clone_obj)))", "memset(((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(((**struc)).value.obj.handlers->compare_objects)))", "memset(((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(((**struc)).value.obj.handlers->count_elements)))", "memset(((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(((**struc)).value.obj.handlers->del_ref)))", "memset(((**struc)).value.obj.handlers->get, 0, sizeof (*(((**struc)).value.obj.handlers->get)))", "memset(((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_entry)))", "memset(((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_name)))", "memset(((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(((**struc)).value.obj.handlers->get_closure)))", "memset(((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(((**struc)).value.obj.handlers->get_constructor)))", "memset(((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(((**struc)).value.obj.handlers->get_debug_info)))", "memset(((**struc)).value.obj.handlers->get_method, 0, sizeof (*(((**struc)).value.obj.handlers->get_method)))", "memset(((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(((**struc)).value.obj.handlers->get_properties)))", "memset(((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->has_dimension)))", "memset(((**struc)).value.obj.handlers->has_property, 0, sizeof (*(((**struc)).value.obj.handlers->has_property)))", "memset(((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->read_dimension)))", "memset(((**struc)).value.obj.handlers->read_property, 0, sizeof (*(((**struc)).value.obj.handlers->read_property)))", "memset(((**struc)).value.obj.handlers->set, 0, sizeof (*(((**struc)).value.obj.handlers->set)))", "memset(((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->unset_dimension)))", "memset(((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(((**struc)).value.obj.handlers->unset_property)))", "memset(((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->write_dimension)))", "memset(((**struc)).value.obj.handlers->write_property, 0, sizeof (*(((**struc)).value.obj.handlers->write_property)))", "memset((**struc).value.ht, 0, sizeof (*((**struc).value.ht)))", "memset((**struc).value.obj.handlers, 0, sizeof (*((**struc).value.obj.handlers)))", "memset((**struc).value.str.val, 0, sizeof (*((**struc).value.str.val)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw, 0, sizeof (*(executor_globals.saved_fpu_cw)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "((**(struc))).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*(struc), &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*struc, &(class_name), &class_name_len, 0)", "(**(struc)).value.ht->nApplyCount++", "(**(struc)).value.ht->nApplyCount--", "(class_name)++", "--(myht)->nApplyCount", "_efree(((class_name)))", "_efree(((myht)))", "is_temp = (0)", "is_temp = (1)", "is_temp = (2)", "is_temp = (3)", "is_temp = (4)", "is_temp = (5)", "is_temp = (6)", "is_temp = (7)", "is_temp = (is_temp)", "is_temp = (level)", "php_body_write(((**(struc)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(struc)).value.str.len))", "php_element_dump_func = (php_element_dump_func)", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted long input array (%s) overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted super-global (%s) variable overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(struc)).value.str.val)", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((myht)))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), (class_name), (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**(struc)).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, (myht) ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements((myht)) : 0)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((struc))))", "php_printf(\"\\\"%s\\\"\", (class_name))", "php_printf(\"\\\"%s\\\":protected\", (class_name))", "zend_hash_apply_with_arguments((myht), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy((myht))", "((**struc)).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "--myht->nApplyCount", "_efree((class_name))", "_efree((myht))", "exit(1)", "is_temp = 0", "php_body_write(((**struc).value.str.val), ((**struc).value.str.len))", "php_element_dump_func = php_array_element_dump", "php_element_dump_func = php_object_property_dump", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c\", level - 1, ' ')", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy(myht)", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L153\", 7, &(level), sizeof (level), &(struc), sizeof (struc), &(myht), sizeof (myht), &(is_temp), sizeof (is_temp), &(php_element_dump_func), sizeof (php_element_dump_func), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len)))\n    goto head_done;\n", "if (__is_neg(\"\", \"L153\", 7, &(level), sizeof (level), &(struc), sizeof (struc), &(myht), sizeof (myht), &(is_temp), sizeof (is_temp), &(php_element_dump_func), sizeof (php_element_dump_func), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.41715871280056]
								}, {
									"case":	2,
									"scores":	[-6.41715871280056]
								}, {
									"case":	3,
									"scores":	[-6.41715871280056]
								}, {
									"case":	4,
									"scores":	[-6.41715871280056]
								}, {
									"case":	5,
									"scores":	[-6.41715871280056]
								}, {
									"case":	6,
									"scores":	[-6.41715871280056]
								}, {
									"case":	7,
									"scores":	[-6.41715871280056]
								}, {
									"case":	8,
									"scores":	[-6.41715871280056]
								}, {
									"case":	9,
									"scores":	[-6.41715871280056]
								}, {
									"case":	10,
									"scores":	[-6.41715871280056]
								}, {
									"case":	11,
									"scores":	[-6.41715871280056]
								}, {
									"case":	12,
									"scores":	[-6.41715871280056]
								}, {
									"case":	13,
									"scores":	[-6.41715871280056]
								}, {
									"case":	14,
									"scores":	[-6.41715871280056]
								}, {
									"case":	15,
									"scores":	[-6.41715871280056]
								}, {
									"case":	16,
									"scores":	[-6.41715871280056]
								}, {
									"case":	17,
									"scores":	[-6.41715871280056]
								}, {
									"case":	18,
									"scores":	[-6.41715871280056]
								}, {
									"case":	19,
									"scores":	[-6.41715871280056]
								}, {
									"case":	20,
									"scores":	[-6.41715871280056]
								}, {
									"case":	21,
									"scores":	[-6.41715871280056]
								}, {
									"case":	22,
									"scores":	[-6.41715871280056]
								}, {
									"case":	23,
									"scores":	[-6.41715871280056]
								}, {
									"case":	24,
									"scores":	[-6.41715871280056]
								}, {
									"case":	25,
									"scores":	[-6.41715871280056]
								}, {
									"case":	26,
									"scores":	[-6.41715871280056]
								}, {
									"case":	27,
									"scores":	[-6.41715871280056]
								}, {
									"case":	28,
									"scores":	[-6.41715871280056]
								}, {
									"case":	29,
									"scores":	[-6.41715871280056]
								}, {
									"case":	30,
									"scores":	[-6.41715871280056]
								}, {
									"case":	31,
									"scores":	[-6.41715871280056]
								}, {
									"case":	32,
									"scores":	[-6.41715871280056]
								}, {
									"case":	33,
									"scores":	[-6.41715871280056]
								}, {
									"case":	34,
									"scores":	[-6.41715871280056]
								}, {
									"case":	35,
									"scores":	[-6.41715871280056]
								}, {
									"case":	36,
									"scores":	[-6.41715871280056]
								}, {
									"case":	37,
									"scores":	[-6.41715871280056]
								}, {
									"case":	38,
									"scores":	[-6.41715871280056]
								}, {
									"case":	39,
									"scores":	[-6.41715871280056]
								}, {
									"case":	40,
									"scores":	[-6.41715871280056]
								}, {
									"case":	41,
									"scores":	[-6.41715871280056]
								}, {
									"case":	42,
									"scores":	[-6.41715871280056]
								}, {
									"case":	43,
									"scores":	[-6.41715871280056]
								}, {
									"case":	44,
									"scores":	[-6.41715871280056]
								}, {
									"case":	45,
									"scores":	[-6.41715871280056]
								}, {
									"case":	46,
									"scores":	[-6.41715871280056]
								}, {
									"case":	47,
									"scores":	[-6.41715871280056]
								}, {
									"case":	48,
									"scores":	[-6.41715871280056]
								}, {
									"case":	49,
									"scores":	[-6.41715871280056]
								}, {
									"case":	50,
									"scores":	[-6.41715871280056]
								}, {
									"case":	51,
									"scores":	[-6.41715871280056]
								}, {
									"case":	52,
									"scores":	[-6.41715871280056]
								}, {
									"case":	53,
									"scores":	[-6.41715871280056]
								}, {
									"case":	54,
									"scores":	[-6.41715871280056]
								}, {
									"case":	55,
									"scores":	[-6.41715871280056]
								}, {
									"case":	56,
									"scores":	[-6.41715871280056]
								}, {
									"case":	57,
									"scores":	[-6.41715871280056]
								}, {
									"case":	58,
									"scores":	[-6.41715871280056]
								}, {
									"case":	59,
									"scores":	[-6.41715871280056]
								}, {
									"case":	60,
									"scores":	[-6.41715871280056]
								}, {
									"case":	61,
									"scores":	[-6.41715871280056]
								}, {
									"case":	62,
									"scores":	[-6.41715871280056]
								}, {
									"case":	63,
									"scores":	[-6.41715871280056]
								}, {
									"case":	64,
									"scores":	[-6.41715871280056]
								}, {
									"case":	65,
									"scores":	[-6.41715871280056]
								}, {
									"case":	66,
									"scores":	[-6.41715871280056]
								}, {
									"case":	67,
									"scores":	[-6.41715871280056]
								}, {
									"case":	68,
									"scores":	[-6.41715871280056]
								}, {
									"case":	69,
									"scores":	[-6.41715871280056]
								}, {
									"case":	70,
									"scores":	[-6.41715871280056]
								}, {
									"case":	71,
									"scores":	[-6.41715871280056]
								}, {
									"case":	72,
									"scores":	[-6.41715871280056]
								}, {
									"case":	73,
									"scores":	[-6.41715871280056]
								}, {
									"case":	74,
									"scores":	[-6.41715871280056]
								}, {
									"case":	75,
									"scores":	[-6.41715871280056]
								}, {
									"case":	76,
									"scores":	[-6.41715871280056]
								}, {
									"case":	77,
									"scores":	[-6.41715871280056]
								}, {
									"case":	78,
									"scores":	[-6.41715871280056]
								}, {
									"case":	79,
									"scores":	[-6.41715871280056]
								}, {
									"case":	80,
									"scores":	[-6.41715871280056]
								}, {
									"case":	81,
									"scores":	[-6.41715871280056]
								}, {
									"case":	82,
									"scores":	[-6.41715871280056]
								}, {
									"case":	83,
									"scores":	[-6.41715871280056]
								}, {
									"case":	84,
									"scores":	[-6.41715871280056]
								}, {
									"case":	85,
									"scores":	[-6.41715871280056]
								}, {
									"case":	86,
									"scores":	[-6.41715871280056]
								}, {
									"case":	87,
									"scores":	[-6.41715871280056]
								}, {
									"case":	88,
									"scores":	[-6.41715871280056]
								}, {
									"case":	89,
									"scores":	[-6.41715871280056]
								}, {
									"case":	90,
									"scores":	[-6.41715871280056]
								}, {
									"case":	91,
									"scores":	[-6.41715871280056]
								}, {
									"case":	92,
									"scores":	[-6.41715871280056]
								}, {
									"case":	93,
									"scores":	[-6.41715871280056]
								}, {
									"case":	94,
									"scores":	[-6.41715871280056]
								}, {
									"case":	95,
									"scores":	[-6.41715871280056]
								}, {
									"case":	96,
									"scores":	[-6.41715871280056]
								}, {
									"case":	97,
									"scores":	[-6.41715871280056]
								}, {
									"case":	98,
									"scores":	[-6.41715871280056]
								}, {
									"case":	99,
									"scores":	[-6.41715871280056]
								}, {
									"case":	100,
									"scores":	[-6.41715871280056]
								}, {
									"case":	101,
									"scores":	[-6.41715871280056]
								}, {
									"case":	102,
									"scores":	[-6.41715871280056]
								}, {
									"case":	103,
									"scores":	[-6.41715871280056]
								}, {
									"case":	104,
									"scores":	[-6.41715871280056]
								}, {
									"case":	105,
									"scores":	[-6.41715871280056]
								}, {
									"case":	106,
									"scores":	[-6.41715871280056]
								}, {
									"case":	107,
									"scores":	[-6.41715871280056]
								}, {
									"case":	108,
									"scores":	[-6.41715871280056]
								}, {
									"case":	109,
									"scores":	[-6.41715871280056]
								}, {
									"case":	110,
									"scores":	[-6.41715871280056]
								}, {
									"case":	111,
									"scores":	[-6.41715871280056]
								}, {
									"case":	112,
									"scores":	[-6.41715871280056]
								}, {
									"case":	113,
									"scores":	[-6.41715871280056]
								}, {
									"case":	114,
									"scores":	[-6.41715871280056]
								}, {
									"case":	115,
									"scores":	[-6.41715871280056]
								}, {
									"case":	116,
									"scores":	[-6.41715871280056]
								}, {
									"case":	117,
									"scores":	[-6.41715871280056]
								}, {
									"case":	118,
									"scores":	[-6.41715871280056]
								}, {
									"case":	119,
									"scores":	[-6.41715871280056]
								}, {
									"case":	120,
									"scores":	[-6.41715871280056]
								}, {
									"case":	121,
									"scores":	[-6.41715871280056]
								}, {
									"case":	122,
									"scores":	[-6.41715871280056]
								}, {
									"case":	123,
									"scores":	[-6.41715871280056]
								}, {
									"case":	124,
									"scores":	[-6.41715871280056]
								}, {
									"case":	125,
									"scores":	[-6.41715871280056]
								}, {
									"case":	126,
									"scores":	[-6.41715871280056]
								}, {
									"case":	127,
									"scores":	[-6.41715871280056]
								}, {
									"case":	128,
									"scores":	[-6.41715871280056]
								}, {
									"case":	129,
									"scores":	[-6.41715871280056]
								}, {
									"case":	130,
									"scores":	[-6.41715871280056]
								}, {
									"case":	131,
									"scores":	[-6.41715871280056]
								}, {
									"case":	132,
									"scores":	[-6.41715871280056]
								}, {
									"case":	133,
									"scores":	[-6.41715871280056]
								}, {
									"case":	134,
									"scores":	[-6.41715871280056]
								}, {
									"case":	135,
									"scores":	[-6.41715871280056]
								}, {
									"case":	136,
									"scores":	[-6.41715871280056]
								}, {
									"case":	137,
									"scores":	[-6.41715871280056]
								}, {
									"case":	138,
									"scores":	[-6.41715871280056]
								}, {
									"case":	139,
									"scores":	[-6.41715871280056]
								}, {
									"case":	140,
									"scores":	[-6.41715871280056]
								}, {
									"case":	141,
									"scores":	[-6.41715871280056]
								}, {
									"case":	142,
									"scores":	[-6.41715871280056]
								}, {
									"case":	143,
									"scores":	[-6.41715871280056]
								}, {
									"case":	144,
									"scores":	[-6.41715871280056]
								}, {
									"case":	145,
									"scores":	[-6.41715871280056]
								}, {
									"case":	146,
									"scores":	[-6.41715871280056]
								}, {
									"case":	147,
									"scores":	[-6.41715871280056]
								}, {
									"case":	148,
									"scores":	[-6.41715871280056]
								}, {
									"case":	149,
									"scores":	[-6.41715871280056]
								}, {
									"case":	150,
									"scores":	[-6.41715871280056]
								}, {
									"case":	151,
									"scores":	[-6.41715871280056]
								}, {
									"case":	152,
									"scores":	[-6.41715871280056]
								}, {
									"case":	153,
									"scores":	[-6.41715871280056]
								}, {
									"case":	154,
									"scores":	[-6.41715871280056]
								}, {
									"case":	155,
									"scores":	[-6.41715871280056]
								}, {
									"case":	156,
									"scores":	[-6.41715871280056]
								}, {
									"case":	157,
									"scores":	[-6.41715871280056]
								}, {
									"case":	158,
									"scores":	[-6.41715871280056]
								}, {
									"case":	159,
									"scores":	[-6.41715871280056]
								}, {
									"case":	160,
									"scores":	[-6.41715871280056]
								}, {
									"case":	161,
									"scores":	[-6.41715871280056]
								}, {
									"case":	162,
									"scores":	[-6.41715871280056]
								}, {
									"case":	163,
									"scores":	[-6.41715871280056]
								}, {
									"case":	164,
									"scores":	[-6.41715871280056]
								}, {
									"case":	165,
									"scores":	[-6.41715871280056]
								}, {
									"case":	166,
									"scores":	[-6.41715871280056]
								}, {
									"case":	167,
									"scores":	[-6.41715871280056]
								}, {
									"case":	168,
									"scores":	[-6.41715871280056]
								}, {
									"case":	169,
									"scores":	[-6.41715871280056]
								}, {
									"case":	170,
									"scores":	[-6.41715871280056]
								}, {
									"case":	171,
									"scores":	[-6.41715871280056]
								}, {
									"case":	172,
									"scores":	[-6.41715871280056]
								}, {
									"case":	173,
									"scores":	[-6.41715871280056]
								}, {
									"case":	174,
									"scores":	[-6.41715871280056]
								}, {
									"case":	175,
									"scores":	[-6.41715871280056]
								}, {
									"case":	176,
									"scores":	[-6.41715871280056]
								}, {
									"case":	177,
									"scores":	[-6.41715871280056]
								}, {
									"case":	178,
									"scores":	[-6.41715871280056]
								}, {
									"case":	179,
									"scores":	[-6.41715871280056]
								}, {
									"case":	180,
									"scores":	[-6.41715871280056]
								}, {
									"case":	181,
									"scores":	[-6.41715871280056]
								}, {
									"case":	182,
									"scores":	[-6.41715871280056]
								}, {
									"case":	183,
									"scores":	[-6.41715871280056]
								}, {
									"case":	184,
									"scores":	[-6.41715871280056]
								}, {
									"case":	185,
									"scores":	[-6.41715871280056]
								}, {
									"case":	186,
									"scores":	[-6.41715871280056]
								}, {
									"case":	187,
									"scores":	[-6.41715871280056]
								}, {
									"case":	188,
									"scores":	[-6.41715871280056]
								}, {
									"case":	189,
									"scores":	[-6.41715871280056]
								}, {
									"case":	190,
									"scores":	[-6.41715871280056]
								}, {
									"case":	191,
									"scores":	[-6.41715871280056]
								}, {
									"case":	192,
									"scores":	[-6.41715871280056]
								}, {
									"case":	193,
									"scores":	[-6.41715871280056]
								}, {
									"case":	194,
									"scores":	[-6.41715871280056]
								}, {
									"case":	195,
									"scores":	[-6.41715871280056]
								}, {
									"case":	196,
									"scores":	[-6.41715871280056]
								}, {
									"case":	197,
									"scores":	[-6.41715871280056]
								}, {
									"case":	198,
									"scores":	[-6.41715871280056]
								}, {
									"case":	199,
									"scores":	[-6.41715871280056]
								}, {
									"case":	200,
									"scores":	[-6.41715871280056]
								}, {
									"case":	201,
									"scores":	[-6.41715871280056]
								}, {
									"case":	202,
									"scores":	[-6.41715871280056]
								}, {
									"case":	203,
									"scores":	[-6.41715871280056]
								}, {
									"case":	204,
									"scores":	[-6.41715871280056]
								}, {
									"case":	205,
									"scores":	[-6.41715871280056]
								}, {
									"case":	206,
									"scores":	[-6.41715871280056]
								}, {
									"case":	207,
									"scores":	[-6.41715871280056]
								}, {
									"case":	208,
									"scores":	[-6.41715871280056]
								}, {
									"case":	209,
									"scores":	[-6.41715871280056]
								}, {
									"case":	210,
									"scores":	[-6.41715871280056]
								}, {
									"case":	211,
									"scores":	[-6.41715871280056]
								}, {
									"case":	212,
									"scores":	[-6.41715871280056]
								}, {
									"case":	213,
									"scores":	[-6.41715871280056]
								}, {
									"case":	214,
									"scores":	[-6.41715871280056]
								}, {
									"case":	215,
									"scores":	[-6.41715871280056]
								}, {
									"case":	216,
									"scores":	[-6.41715871280056]
								}, {
									"case":	217,
									"scores":	[-6.41715871280056]
								}, {
									"case":	218,
									"scores":	[-6.41715871280056]
								}, {
									"case":	219,
									"scores":	[-6.41715871280056]
								}, {
									"case":	220,
									"scores":	[-6.41715871280056]
								}, {
									"case":	221,
									"scores":	[-6.41715871280056]
								}, {
									"case":	222,
									"scores":	[-6.41715871280056]
								}, {
									"case":	223,
									"scores":	[-6.41715871280056]
								}, {
									"case":	224,
									"scores":	[-6.41715871280056]
								}, {
									"case":	225,
									"scores":	[-6.41715871280056]
								}, {
									"case":	226,
									"scores":	[-6.41715871280056]
								}, {
									"case":	227,
									"scores":	[-6.41715871280056]
								}, {
									"case":	228,
									"scores":	[-6.41715871280056]
								}, {
									"case":	229,
									"scores":	[-6.41715871280056]
								}, {
									"case":	230,
									"scores":	[-6.41715871280056]
								}, {
									"case":	231,
									"scores":	[-6.41715871280056]
								}, {
									"case":	232,
									"scores":	[-6.41715871280056]
								}, {
									"case":	233,
									"scores":	[-6.41715871280056]
								}, {
									"case":	234,
									"scores":	[-6.41715871280056]
								}, {
									"case":	235,
									"scores":	[-6.41715871280056]
								}, {
									"case":	236,
									"scores":	[-6.41715871280056]
								}, {
									"case":	237,
									"scores":	[-6.41715871280056]
								}, {
									"case":	238,
									"scores":	[-6.41715871280056]
								}, {
									"case":	239,
									"scores":	[-6.41715871280056]
								}, {
									"case":	240,
									"scores":	[-6.41715871280056]
								}, {
									"case":	241,
									"scores":	[-6.41715871280056]
								}, {
									"case":	242,
									"scores":	[-6.41715871280056]
								}, {
									"case":	243,
									"scores":	[-6.41715871280056]
								}, {
									"case":	244,
									"scores":	[-6.41715871280056]
								}, {
									"case":	245,
									"scores":	[-6.41715871280056]
								}, {
									"case":	246,
									"scores":	[-6.41715871280056]
								}, {
									"case":	247,
									"scores":	[-6.41715871280056]
								}, {
									"case":	248,
									"scores":	[-6.41715871280056]
								}, {
									"case":	249,
									"scores":	[-6.41715871280056]
								}, {
									"case":	250,
									"scores":	[-6.41715871280056]
								}, {
									"case":	251,
									"scores":	[-6.41715871280056]
								}, {
									"case":	252,
									"scores":	[-6.41715871280056]
								}, {
									"case":	253,
									"scores":	[-6.41715871280056]
								}, {
									"case":	254,
									"scores":	[-6.41715871280056]
								}, {
									"case":	255,
									"scores":	[-6.41715871280056]
								}, {
									"case":	256,
									"scores":	[-6.41715871280056]
								}, {
									"case":	257,
									"scores":	[-6.41715871280056]
								}, {
									"case":	258,
									"scores":	[-6.41715871280056]
								}, {
									"case":	259,
									"scores":	[-6.41715871280056]
								}, {
									"case":	260,
									"scores":	[-6.41715871280056]
								}, {
									"case":	261,
									"scores":	[-6.41715871280056]
								}, {
									"case":	262,
									"scores":	[-6.41715871280056]
								}, {
									"case":	263,
									"scores":	[-6.41715871280056]
								}, {
									"case":	264,
									"scores":	[-6.41715871280056]
								}, {
									"case":	265,
									"scores":	[-6.41715871280056]
								}, {
									"case":	266,
									"scores":	[-6.41715871280056]
								}, {
									"case":	267,
									"scores":	[-6.41715871280056]
								}, {
									"case":	268,
									"scores":	[-6.41715871280056]
								}, {
									"case":	269,
									"scores":	[-6.41715871280056]
								}, {
									"case":	270,
									"scores":	[-6.41715871280056]
								}, {
									"case":	271,
									"scores":	[-6.41715871280056]
								}, {
									"case":	272,
									"scores":	[-6.41715871280056]
								}, {
									"case":	273,
									"scores":	[-6.41715871280056]
								}, {
									"case":	274,
									"scores":	[-6.41715871280056]
								}, {
									"case":	275,
									"scores":	[-6.41715871280056]
								}, {
									"case":	276,
									"scores":	[-6.41715871280056]
								}, {
									"case":	277,
									"scores":	[-6.41715871280056]
								}, {
									"case":	278,
									"scores":	[-6.41715871280056]
								}, {
									"case":	279,
									"scores":	[-6.41715871280056]
								}, {
									"case":	280,
									"scores":	[-6.41715871280056]
								}, {
									"case":	281,
									"scores":	[-6.41715871280056]
								}, {
									"case":	282,
									"scores":	[-6.41715871280056]
								}, {
									"case":	283,
									"scores":	[-6.41715871280056]
								}, {
									"case":	284,
									"scores":	[-6.41715871280056]
								}, {
									"case":	285,
									"scores":	[-6.41715871280056]
								}, {
									"case":	286,
									"scores":	[-6.41715871280056]
								}, {
									"case":	287,
									"scores":	[-6.41715871280056]
								}, {
									"case":	288,
									"scores":	[-6.41715871280056]
								}, {
									"case":	289,
									"scores":	[-6.41715871280056]
								}, {
									"case":	290,
									"scores":	[-6.41715871280056]
								}, {
									"case":	291,
									"scores":	[-6.41715871280056]
								}, {
									"case":	292,
									"scores":	[-6.41715871280056]
								}, {
									"case":	293,
									"scores":	[-6.41715871280056]
								}, {
									"case":	294,
									"scores":	[-6.41715871280056]
								}, {
									"case":	295,
									"scores":	[-6.41715871280056]
								}, {
									"case":	296,
									"scores":	[-6.41715871280056]
								}, {
									"case":	297,
									"scores":	[-6.41715871280056]
								}, {
									"case":	298,
									"scores":	[-6.41715871280056]
								}, {
									"case":	299,
									"scores":	[-6.41715871280056]
								}, {
									"case":	300,
									"scores":	[-6.41715871280056]
								}, {
									"case":	301,
									"scores":	[-6.41715871280056]
								}, {
									"case":	302,
									"scores":	[-6.41715871280056]
								}, {
									"case":	303,
									"scores":	[-6.41715871280056]
								}, {
									"case":	304,
									"scores":	[-6.41715871280056]
								}, {
									"case":	305,
									"scores":	[-9.07199898120056, -9.61482658720056, -9.56745276400056, -8.76603607020056, -6.97687083020056, -8.97692518720056, -8.26510107020056]
								}, {
									"case":	306,
									"scores":	[-9.07299898120056, -9.61582658720056, -9.56845276400056, -8.76703607020056, -6.97787083020056, -8.97792518720056, -8.26610107020056]
								}]
						}, {
							"switch":	50,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	153,
							"begin_column":	3,
							"end_line":	153,
							"end_column":	13,
							"patch_codes":	["if (!__is_neg(\"\", \"L153\", 7, &(level), sizeof (level), &(struc), sizeof (struc), &(myht), sizeof (myht), &(is_temp), sizeof (is_temp), &(php_element_dump_func), sizeof (php_element_dump_func), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len)))\n    do {\n        const char *__str = (\"}\\n\");\n        php_body_write(__str, strlen(__str));\n    } while (0);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.51868128280056, -8.17180074280056, -7.76573271930056, -6.67707428280056, -5.88067122280056, -7.14633428280056, -6.35506325280056]
								}]
						}]
				}, {
					"line":	153,
					"switches":	[{
							"switch":	51,
							"types":	[[], [], [], [], [305, 306], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], [], [], [], [283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282], [], [], [], [], [], []],
							"begin_line":	154,
							"begin_column":	1,
							"end_line":	154,
							"end_column":	1,
							"patch_codes":	["memset(&(((**struc))).is_ref__gc, 0, sizeof (*(&(((**struc))).is_ref__gc)))", "memset(&(((**struc))).refcount__gc, 0, sizeof (*(&(((**struc))).refcount__gc)))", "memset(&(((**struc))).type, 0, sizeof (*(&(((**struc))).type)))", "memset(&(((**struc))).value, 0, sizeof (*(&(((**struc))).value)))", "memset(&(((**struc))).value.dval, 0, sizeof (*(&(((**struc))).value.dval)))", "memset(&(((**struc))).value.ht, 0, sizeof (*(&(((**struc))).value.ht)))", "memset(&(((**struc))).value.lval, 0, sizeof (*(&(((**struc))).value.lval)))", "memset(&(((**struc))).value.obj, 0, sizeof (*(&(((**struc))).value.obj)))", "memset(&(((**struc))).value.obj.handle, 0, sizeof (*(&(((**struc))).value.obj.handle)))", "memset(&(((**struc))).value.obj.handlers, 0, sizeof (*(&(((**struc))).value.obj.handlers)))", "memset(&(((**struc))).value.obj.handlers->add_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->add_ref)))", "memset(&(((**struc))).value.obj.handlers->call_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->call_method)))", "memset(&(((**struc))).value.obj.handlers->cast_object, 0, sizeof (*(&(((**struc))).value.obj.handlers->cast_object)))", "memset(&(((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*(&(((**struc))).value.obj.handlers->clone_obj)))", "memset(&(((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*(&(((**struc))).value.obj.handlers->compare_objects)))", "memset(&(((**struc))).value.obj.handlers->count_elements, 0, sizeof (*(&(((**struc))).value.obj.handlers->count_elements)))", "memset(&(((**struc))).value.obj.handlers->del_ref, 0, sizeof (*(&(((**struc))).value.obj.handlers->del_ref)))", "memset(&(((**struc))).value.obj.handlers->get, 0, sizeof (*(&(((**struc))).value.obj.handlers->get)))", "memset(&(((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_entry)))", "memset(&(((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_class_name)))", "memset(&(((**struc))).value.obj.handlers->get_closure, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_closure)))", "memset(&(((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_constructor)))", "memset(&(((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_debug_info)))", "memset(&(((**struc))).value.obj.handlers->get_method, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_method)))", "memset(&(((**struc))).value.obj.handlers->get_properties, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_properties)))", "memset(&(((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_dimension)))", "memset(&(((**struc))).value.obj.handlers->has_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->has_property)))", "memset(&(((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_dimension)))", "memset(&(((**struc))).value.obj.handlers->read_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->read_property)))", "memset(&(((**struc))).value.obj.handlers->set, 0, sizeof (*(&(((**struc))).value.obj.handlers->set)))", "memset(&(((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_dimension)))", "memset(&(((**struc))).value.obj.handlers->unset_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->unset_property)))", "memset(&(((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_dimension)))", "memset(&(((**struc))).value.obj.handlers->write_property, 0, sizeof (*(&(((**struc))).value.obj.handlers->write_property)))", "memset(&(((**struc))).value.str, 0, sizeof (*(&(((**struc))).value.str)))", "memset(&((**struc)).is_ref__gc, 0, sizeof (*(&((**struc)).is_ref__gc)))", "memset(&((**struc)).refcount__gc, 0, sizeof (*(&((**struc)).refcount__gc)))", "memset(&((**struc)).type, 0, sizeof (*(&((**struc)).type)))", "memset(&((**struc)).value, 0, sizeof (*(&((**struc)).value)))", "memset(&((**struc)).value.dval, 0, sizeof (*(&((**struc)).value.dval)))", "memset(&((**struc)).value.ht, 0, sizeof (*(&((**struc)).value.ht)))", "memset(&((**struc)).value.lval, 0, sizeof (*(&((**struc)).value.lval)))", "memset(&((**struc)).value.obj, 0, sizeof (*(&((**struc)).value.obj)))", "memset(&((**struc)).value.obj.handle, 0, sizeof (*(&((**struc)).value.obj.handle)))", "memset(&((**struc)).value.obj.handlers, 0, sizeof (*(&((**struc)).value.obj.handlers)))", "memset(&((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->add_ref)))", "memset(&((**struc)).value.obj.handlers->call_method, 0, sizeof (*(&((**struc)).value.obj.handlers->call_method)))", "memset(&((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(&((**struc)).value.obj.handlers->cast_object)))", "memset(&((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(&((**struc)).value.obj.handlers->clone_obj)))", "memset(&((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(&((**struc)).value.obj.handlers->compare_objects)))", "memset(&((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(&((**struc)).value.obj.handlers->count_elements)))", "memset(&((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(&((**struc)).value.obj.handlers->del_ref)))", "memset(&((**struc)).value.obj.handlers->get, 0, sizeof (*(&((**struc)).value.obj.handlers->get)))", "memset(&((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_entry)))", "memset(&((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(&((**struc)).value.obj.handlers->get_class_name)))", "memset(&((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(&((**struc)).value.obj.handlers->get_closure)))", "memset(&((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(&((**struc)).value.obj.handlers->get_constructor)))", "memset(&((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(&((**struc)).value.obj.handlers->get_debug_info)))", "memset(&((**struc)).value.obj.handlers->get_method, 0, sizeof (*(&((**struc)).value.obj.handlers->get_method)))", "memset(&((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(&((**struc)).value.obj.handlers->get_properties)))", "memset(&((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(&((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->has_dimension)))", "memset(&((**struc)).value.obj.handlers->has_property, 0, sizeof (*(&((**struc)).value.obj.handlers->has_property)))", "memset(&((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->read_dimension)))", "memset(&((**struc)).value.obj.handlers->read_property, 0, sizeof (*(&((**struc)).value.obj.handlers->read_property)))", "memset(&((**struc)).value.obj.handlers->set, 0, sizeof (*(&((**struc)).value.obj.handlers->set)))", "memset(&((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_dimension)))", "memset(&((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(&((**struc)).value.obj.handlers->unset_property)))", "memset(&((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(&((**struc)).value.obj.handlers->write_dimension)))", "memset(&((**struc)).value.obj.handlers->write_property, 0, sizeof (*(&((**struc)).value.obj.handlers->write_property)))", "memset(&((**struc)).value.str, 0, sizeof (*(&((**struc)).value.str)))", "memset(&(**struc).is_ref__gc, 0, sizeof (*(&(**struc).is_ref__gc)))", "memset(&(**struc).refcount__gc, 0, sizeof (*(&(**struc).refcount__gc)))", "memset(&(**struc).type, 0, sizeof (*(&(**struc).type)))", "memset(&(**struc).value, 0, sizeof (*(&(**struc).value)))", "memset(&(**struc).value.dval, 0, sizeof (*(&(**struc).value.dval)))", "memset(&(**struc).value.ht, 0, sizeof (*(&(**struc).value.ht)))", "memset(&(**struc).value.lval, 0, sizeof (*(&(**struc).value.lval)))", "memset(&(**struc).value.obj, 0, sizeof (*(&(**struc).value.obj)))", "memset(&(**struc).value.obj.handle, 0, sizeof (*(&(**struc).value.obj.handle)))", "memset(&(**struc).value.obj.handlers, 0, sizeof (*(&(**struc).value.obj.handlers)))", "memset(&(**struc).value.str, 0, sizeof (*(&(**struc).value.str)))", "memset(&(**struc).value.str.len, 0, sizeof (*(&(**struc).value.str.len)))", "memset(&(**struc).value.str.val, 0, sizeof (*(&(**struc).value.str.val)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&myht->arBuckets, 0, sizeof (*(&myht->arBuckets)))", "memset(&myht->bApplyProtection, 0, sizeof (*(&myht->bApplyProtection)))", "memset(&myht->nApplyCount, 0, sizeof (*(&myht->nApplyCount)))", "memset(&myht->nNextFreeElement, 0, sizeof (*(&myht->nNextFreeElement)))", "memset(&myht->nNumOfElements, 0, sizeof (*(&myht->nNumOfElements)))", "memset(&myht->nTableMask, 0, sizeof (*(&myht->nTableMask)))", "memset(&myht->nTableSize, 0, sizeof (*(&myht->nTableSize)))", "memset(&myht->pDestructor, 0, sizeof (*(&myht->pDestructor)))", "memset(&myht->pInternalPointer, 0, sizeof (*(&myht->pInternalPointer)))", "memset(&myht->pListHead, 0, sizeof (*(&myht->pListHead)))", "memset(&myht->pListTail, 0, sizeof (*(&myht->pListTail)))", "memset(&myht->persistent, 0, sizeof (*(&myht->persistent)))", "memset((((**struc))).value.ht, 0, sizeof (*((((**struc))).value.ht)))", "memset((((**struc))).value.obj.handlers, 0, sizeof (*((((**struc))).value.obj.handlers)))", "memset((((**struc))).value.obj.handlers->add_ref, 0, sizeof (*((((**struc))).value.obj.handlers->add_ref)))", "memset((((**struc))).value.obj.handlers->call_method, 0, sizeof (*((((**struc))).value.obj.handlers->call_method)))", "memset((((**struc))).value.obj.handlers->cast_object, 0, sizeof (*((((**struc))).value.obj.handlers->cast_object)))", "memset((((**struc))).value.obj.handlers->clone_obj, 0, sizeof (*((((**struc))).value.obj.handlers->clone_obj)))", "memset((((**struc))).value.obj.handlers->compare_objects, 0, sizeof (*((((**struc))).value.obj.handlers->compare_objects)))", "memset((((**struc))).value.obj.handlers->count_elements, 0, sizeof (*((((**struc))).value.obj.handlers->count_elements)))", "memset((((**struc))).value.obj.handlers->del_ref, 0, sizeof (*((((**struc))).value.obj.handlers->del_ref)))", "memset((((**struc))).value.obj.handlers->get, 0, sizeof (*((((**struc))).value.obj.handlers->get)))", "memset((((**struc))).value.obj.handlers->get_class_entry, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_entry)))", "memset((((**struc))).value.obj.handlers->get_class_name, 0, sizeof (*((((**struc))).value.obj.handlers->get_class_name)))", "memset((((**struc))).value.obj.handlers->get_closure, 0, sizeof (*((((**struc))).value.obj.handlers->get_closure)))", "memset((((**struc))).value.obj.handlers->get_constructor, 0, sizeof (*((((**struc))).value.obj.handlers->get_constructor)))", "memset((((**struc))).value.obj.handlers->get_debug_info, 0, sizeof (*((((**struc))).value.obj.handlers->get_debug_info)))", "memset((((**struc))).value.obj.handlers->get_method, 0, sizeof (*((((**struc))).value.obj.handlers->get_method)))", "memset((((**struc))).value.obj.handlers->get_properties, 0, sizeof (*((((**struc))).value.obj.handlers->get_properties)))", "memset((((**struc))).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((((**struc))).value.obj.handlers->get_property_ptr_ptr)))", "memset((((**struc))).value.obj.handlers->has_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->has_dimension)))", "memset((((**struc))).value.obj.handlers->has_property, 0, sizeof (*((((**struc))).value.obj.handlers->has_property)))", "memset((((**struc))).value.obj.handlers->read_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->read_dimension)))", "memset((((**struc))).value.obj.handlers->read_property, 0, sizeof (*((((**struc))).value.obj.handlers->read_property)))", "memset((((**struc))).value.obj.handlers->set, 0, sizeof (*((((**struc))).value.obj.handlers->set)))", "memset((((**struc))).value.obj.handlers->unset_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->unset_dimension)))", "memset((((**struc))).value.obj.handlers->unset_property, 0, sizeof (*((((**struc))).value.obj.handlers->unset_property)))", "memset((((**struc))).value.obj.handlers->write_dimension, 0, sizeof (*((((**struc))).value.obj.handlers->write_dimension)))", "memset((((**struc))).value.obj.handlers->write_property, 0, sizeof (*((((**struc))).value.obj.handlers->write_property)))", "memset(((**struc)).value.ht, 0, sizeof (*(((**struc)).value.ht)))", "memset(((**struc)).value.obj.handlers, 0, sizeof (*(((**struc)).value.obj.handlers)))", "memset(((**struc)).value.obj.handlers->add_ref, 0, sizeof (*(((**struc)).value.obj.handlers->add_ref)))", "memset(((**struc)).value.obj.handlers->call_method, 0, sizeof (*(((**struc)).value.obj.handlers->call_method)))", "memset(((**struc)).value.obj.handlers->cast_object, 0, sizeof (*(((**struc)).value.obj.handlers->cast_object)))", "memset(((**struc)).value.obj.handlers->clone_obj, 0, sizeof (*(((**struc)).value.obj.handlers->clone_obj)))", "memset(((**struc)).value.obj.handlers->compare_objects, 0, sizeof (*(((**struc)).value.obj.handlers->compare_objects)))", "memset(((**struc)).value.obj.handlers->count_elements, 0, sizeof (*(((**struc)).value.obj.handlers->count_elements)))", "memset(((**struc)).value.obj.handlers->del_ref, 0, sizeof (*(((**struc)).value.obj.handlers->del_ref)))", "memset(((**struc)).value.obj.handlers->get, 0, sizeof (*(((**struc)).value.obj.handlers->get)))", "memset(((**struc)).value.obj.handlers->get_class_entry, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_entry)))", "memset(((**struc)).value.obj.handlers->get_class_name, 0, sizeof (*(((**struc)).value.obj.handlers->get_class_name)))", "memset(((**struc)).value.obj.handlers->get_closure, 0, sizeof (*(((**struc)).value.obj.handlers->get_closure)))", "memset(((**struc)).value.obj.handlers->get_constructor, 0, sizeof (*(((**struc)).value.obj.handlers->get_constructor)))", "memset(((**struc)).value.obj.handlers->get_debug_info, 0, sizeof (*(((**struc)).value.obj.handlers->get_debug_info)))", "memset(((**struc)).value.obj.handlers->get_method, 0, sizeof (*(((**struc)).value.obj.handlers->get_method)))", "memset(((**struc)).value.obj.handlers->get_properties, 0, sizeof (*(((**struc)).value.obj.handlers->get_properties)))", "memset(((**struc)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(((**struc)).value.obj.handlers->get_property_ptr_ptr)))", "memset(((**struc)).value.obj.handlers->has_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->has_dimension)))", "memset(((**struc)).value.obj.handlers->has_property, 0, sizeof (*(((**struc)).value.obj.handlers->has_property)))", "memset(((**struc)).value.obj.handlers->read_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->read_dimension)))", "memset(((**struc)).value.obj.handlers->read_property, 0, sizeof (*(((**struc)).value.obj.handlers->read_property)))", "memset(((**struc)).value.obj.handlers->set, 0, sizeof (*(((**struc)).value.obj.handlers->set)))", "memset(((**struc)).value.obj.handlers->unset_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->unset_dimension)))", "memset(((**struc)).value.obj.handlers->unset_property, 0, sizeof (*(((**struc)).value.obj.handlers->unset_property)))", "memset(((**struc)).value.obj.handlers->write_dimension, 0, sizeof (*(((**struc)).value.obj.handlers->write_dimension)))", "memset(((**struc)).value.obj.handlers->write_property, 0, sizeof (*(((**struc)).value.obj.handlers->write_property)))", "memset((**struc).value.ht, 0, sizeof (*((**struc).value.ht)))", "memset((**struc).value.obj.handlers, 0, sizeof (*((**struc).value.obj.handlers)))", "memset((**struc).value.str.val, 0, sizeof (*((**struc).value.str.val)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw, 0, sizeof (*(executor_globals.saved_fpu_cw)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(myht->arBuckets, 0, sizeof (*(myht->arBuckets)))", "memset(myht->pDestructor, 0, sizeof (*(myht->pDestructor)))", "memset(myht->pInternalPointer, 0, sizeof (*(myht->pInternalPointer)))", "memset(myht->pListHead, 0, sizeof (*(myht->pListHead)))", "memset(myht->pListTail, 0, sizeof (*(myht->pListTail)))", "((**(struc))).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*(struc), &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*struc, &(class_name), &class_name_len, 0)", "(**(struc)).value.ht->nApplyCount++", "(**(struc)).value.ht->nApplyCount--", "(class_name)++", "--(myht)->nApplyCount", "_efree(((class_name)))", "_efree(((myht)))", "is_temp = (0)", "is_temp = (1)", "is_temp = (2)", "is_temp = (3)", "is_temp = (4)", "is_temp = (5)", "is_temp = (6)", "is_temp = (7)", "is_temp = (is_temp)", "is_temp = (level)", "php_body_write(((**(struc)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(struc)).value.str.len))", "php_element_dump_func = (php_element_dump_func)", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted long input array (%s) overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted super-global (%s) variable overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(struc)).value.str.val)", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((myht)))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), (class_name), (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**(struc)).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, (myht) ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements((myht)) : 0)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((struc))))", "php_printf(\"\\\"%s\\\"\", (class_name))", "php_printf(\"\\\"%s\\\":protected\", (class_name))", "zend_hash_apply_with_arguments((myht), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy((myht))", "((**struc)).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "--myht->nApplyCount", "_efree((class_name))", "_efree((myht))", "exit(1)", "is_temp = 0", "php_body_write(((**struc).value.str.val), ((**struc).value.str.len))", "php_element_dump_func = php_array_element_dump", "php_element_dump_func = php_object_property_dump", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c\", level - 1, ' ')", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy(myht)", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L154\", 7, &(level), sizeof (level), &(struc), sizeof (struc), &(myht), sizeof (myht), &(is_temp), sizeof (is_temp), &(php_element_dump_func), sizeof (php_element_dump_func), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len)))\n    goto head_done;\n", "if (__is_neg(\"\", \"L154\", 7, &(level), sizeof (level), &(struc), sizeof (struc), &(myht), sizeof (myht), &(is_temp), sizeof (is_temp), &(php_element_dump_func), sizeof (php_element_dump_func), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.356550590848]
								}, {
									"case":	2,
									"scores":	[-6.356550590848]
								}, {
									"case":	3,
									"scores":	[-6.356550590848]
								}, {
									"case":	4,
									"scores":	[-6.356550590848]
								}, {
									"case":	5,
									"scores":	[-6.356550590848]
								}, {
									"case":	6,
									"scores":	[-6.356550590848]
								}, {
									"case":	7,
									"scores":	[-6.356550590848]
								}, {
									"case":	8,
									"scores":	[-6.356550590848]
								}, {
									"case":	9,
									"scores":	[-6.356550590848]
								}, {
									"case":	10,
									"scores":	[-6.356550590848]
								}, {
									"case":	11,
									"scores":	[-6.356550590848]
								}, {
									"case":	12,
									"scores":	[-6.356550590848]
								}, {
									"case":	13,
									"scores":	[-6.356550590848]
								}, {
									"case":	14,
									"scores":	[-6.356550590848]
								}, {
									"case":	15,
									"scores":	[-6.356550590848]
								}, {
									"case":	16,
									"scores":	[-6.356550590848]
								}, {
									"case":	17,
									"scores":	[-6.356550590848]
								}, {
									"case":	18,
									"scores":	[-6.356550590848]
								}, {
									"case":	19,
									"scores":	[-6.356550590848]
								}, {
									"case":	20,
									"scores":	[-6.356550590848]
								}, {
									"case":	21,
									"scores":	[-6.356550590848]
								}, {
									"case":	22,
									"scores":	[-6.356550590848]
								}, {
									"case":	23,
									"scores":	[-6.356550590848]
								}, {
									"case":	24,
									"scores":	[-6.356550590848]
								}, {
									"case":	25,
									"scores":	[-6.356550590848]
								}, {
									"case":	26,
									"scores":	[-6.356550590848]
								}, {
									"case":	27,
									"scores":	[-6.356550590848]
								}, {
									"case":	28,
									"scores":	[-6.356550590848]
								}, {
									"case":	29,
									"scores":	[-6.356550590848]
								}, {
									"case":	30,
									"scores":	[-6.356550590848]
								}, {
									"case":	31,
									"scores":	[-6.356550590848]
								}, {
									"case":	32,
									"scores":	[-6.356550590848]
								}, {
									"case":	33,
									"scores":	[-6.356550590848]
								}, {
									"case":	34,
									"scores":	[-6.356550590848]
								}, {
									"case":	35,
									"scores":	[-6.356550590848]
								}, {
									"case":	36,
									"scores":	[-6.356550590848]
								}, {
									"case":	37,
									"scores":	[-6.356550590848]
								}, {
									"case":	38,
									"scores":	[-6.356550590848]
								}, {
									"case":	39,
									"scores":	[-6.356550590848]
								}, {
									"case":	40,
									"scores":	[-6.356550590848]
								}, {
									"case":	41,
									"scores":	[-6.356550590848]
								}, {
									"case":	42,
									"scores":	[-6.356550590848]
								}, {
									"case":	43,
									"scores":	[-6.356550590848]
								}, {
									"case":	44,
									"scores":	[-6.356550590848]
								}, {
									"case":	45,
									"scores":	[-6.356550590848]
								}, {
									"case":	46,
									"scores":	[-6.356550590848]
								}, {
									"case":	47,
									"scores":	[-6.356550590848]
								}, {
									"case":	48,
									"scores":	[-6.356550590848]
								}, {
									"case":	49,
									"scores":	[-6.356550590848]
								}, {
									"case":	50,
									"scores":	[-6.356550590848]
								}, {
									"case":	51,
									"scores":	[-6.356550590848]
								}, {
									"case":	52,
									"scores":	[-6.356550590848]
								}, {
									"case":	53,
									"scores":	[-6.356550590848]
								}, {
									"case":	54,
									"scores":	[-6.356550590848]
								}, {
									"case":	55,
									"scores":	[-6.356550590848]
								}, {
									"case":	56,
									"scores":	[-6.356550590848]
								}, {
									"case":	57,
									"scores":	[-6.356550590848]
								}, {
									"case":	58,
									"scores":	[-6.356550590848]
								}, {
									"case":	59,
									"scores":	[-6.356550590848]
								}, {
									"case":	60,
									"scores":	[-6.356550590848]
								}, {
									"case":	61,
									"scores":	[-6.356550590848]
								}, {
									"case":	62,
									"scores":	[-6.356550590848]
								}, {
									"case":	63,
									"scores":	[-6.356550590848]
								}, {
									"case":	64,
									"scores":	[-6.356550590848]
								}, {
									"case":	65,
									"scores":	[-6.356550590848]
								}, {
									"case":	66,
									"scores":	[-6.356550590848]
								}, {
									"case":	67,
									"scores":	[-6.356550590848]
								}, {
									"case":	68,
									"scores":	[-6.356550590848]
								}, {
									"case":	69,
									"scores":	[-6.356550590848]
								}, {
									"case":	70,
									"scores":	[-6.356550590848]
								}, {
									"case":	71,
									"scores":	[-6.356550590848]
								}, {
									"case":	72,
									"scores":	[-6.356550590848]
								}, {
									"case":	73,
									"scores":	[-6.356550590848]
								}, {
									"case":	74,
									"scores":	[-6.356550590848]
								}, {
									"case":	75,
									"scores":	[-6.356550590848]
								}, {
									"case":	76,
									"scores":	[-6.356550590848]
								}, {
									"case":	77,
									"scores":	[-6.356550590848]
								}, {
									"case":	78,
									"scores":	[-6.356550590848]
								}, {
									"case":	79,
									"scores":	[-6.356550590848]
								}, {
									"case":	80,
									"scores":	[-6.356550590848]
								}, {
									"case":	81,
									"scores":	[-6.356550590848]
								}, {
									"case":	82,
									"scores":	[-6.356550590848]
								}, {
									"case":	83,
									"scores":	[-6.356550590848]
								}, {
									"case":	84,
									"scores":	[-6.356550590848]
								}, {
									"case":	85,
									"scores":	[-6.356550590848]
								}, {
									"case":	86,
									"scores":	[-6.356550590848]
								}, {
									"case":	87,
									"scores":	[-6.356550590848]
								}, {
									"case":	88,
									"scores":	[-6.356550590848]
								}, {
									"case":	89,
									"scores":	[-6.356550590848]
								}, {
									"case":	90,
									"scores":	[-6.356550590848]
								}, {
									"case":	91,
									"scores":	[-6.356550590848]
								}, {
									"case":	92,
									"scores":	[-6.356550590848]
								}, {
									"case":	93,
									"scores":	[-6.356550590848]
								}, {
									"case":	94,
									"scores":	[-6.356550590848]
								}, {
									"case":	95,
									"scores":	[-6.356550590848]
								}, {
									"case":	96,
									"scores":	[-6.356550590848]
								}, {
									"case":	97,
									"scores":	[-6.356550590848]
								}, {
									"case":	98,
									"scores":	[-6.356550590848]
								}, {
									"case":	99,
									"scores":	[-6.356550590848]
								}, {
									"case":	100,
									"scores":	[-6.356550590848]
								}, {
									"case":	101,
									"scores":	[-6.356550590848]
								}, {
									"case":	102,
									"scores":	[-6.356550590848]
								}, {
									"case":	103,
									"scores":	[-6.356550590848]
								}, {
									"case":	104,
									"scores":	[-6.356550590848]
								}, {
									"case":	105,
									"scores":	[-6.356550590848]
								}, {
									"case":	106,
									"scores":	[-6.356550590848]
								}, {
									"case":	107,
									"scores":	[-6.356550590848]
								}, {
									"case":	108,
									"scores":	[-6.356550590848]
								}, {
									"case":	109,
									"scores":	[-6.356550590848]
								}, {
									"case":	110,
									"scores":	[-6.356550590848]
								}, {
									"case":	111,
									"scores":	[-6.356550590848]
								}, {
									"case":	112,
									"scores":	[-6.356550590848]
								}, {
									"case":	113,
									"scores":	[-6.356550590848]
								}, {
									"case":	114,
									"scores":	[-6.356550590848]
								}, {
									"case":	115,
									"scores":	[-6.356550590848]
								}, {
									"case":	116,
									"scores":	[-6.356550590848]
								}, {
									"case":	117,
									"scores":	[-6.356550590848]
								}, {
									"case":	118,
									"scores":	[-6.356550590848]
								}, {
									"case":	119,
									"scores":	[-6.356550590848]
								}, {
									"case":	120,
									"scores":	[-6.356550590848]
								}, {
									"case":	121,
									"scores":	[-6.356550590848]
								}, {
									"case":	122,
									"scores":	[-6.356550590848]
								}, {
									"case":	123,
									"scores":	[-6.356550590848]
								}, {
									"case":	124,
									"scores":	[-6.356550590848]
								}, {
									"case":	125,
									"scores":	[-6.356550590848]
								}, {
									"case":	126,
									"scores":	[-6.356550590848]
								}, {
									"case":	127,
									"scores":	[-6.356550590848]
								}, {
									"case":	128,
									"scores":	[-6.356550590848]
								}, {
									"case":	129,
									"scores":	[-6.356550590848]
								}, {
									"case":	130,
									"scores":	[-6.356550590848]
								}, {
									"case":	131,
									"scores":	[-6.356550590848]
								}, {
									"case":	132,
									"scores":	[-6.356550590848]
								}, {
									"case":	133,
									"scores":	[-6.356550590848]
								}, {
									"case":	134,
									"scores":	[-6.356550590848]
								}, {
									"case":	135,
									"scores":	[-6.356550590848]
								}, {
									"case":	136,
									"scores":	[-6.356550590848]
								}, {
									"case":	137,
									"scores":	[-6.356550590848]
								}, {
									"case":	138,
									"scores":	[-6.356550590848]
								}, {
									"case":	139,
									"scores":	[-6.356550590848]
								}, {
									"case":	140,
									"scores":	[-6.356550590848]
								}, {
									"case":	141,
									"scores":	[-6.356550590848]
								}, {
									"case":	142,
									"scores":	[-6.356550590848]
								}, {
									"case":	143,
									"scores":	[-6.356550590848]
								}, {
									"case":	144,
									"scores":	[-6.356550590848]
								}, {
									"case":	145,
									"scores":	[-6.356550590848]
								}, {
									"case":	146,
									"scores":	[-6.356550590848]
								}, {
									"case":	147,
									"scores":	[-6.356550590848]
								}, {
									"case":	148,
									"scores":	[-6.356550590848]
								}, {
									"case":	149,
									"scores":	[-6.356550590848]
								}, {
									"case":	150,
									"scores":	[-6.356550590848]
								}, {
									"case":	151,
									"scores":	[-6.356550590848]
								}, {
									"case":	152,
									"scores":	[-6.356550590848]
								}, {
									"case":	153,
									"scores":	[-6.356550590848]
								}, {
									"case":	154,
									"scores":	[-6.356550590848]
								}, {
									"case":	155,
									"scores":	[-6.356550590848]
								}, {
									"case":	156,
									"scores":	[-6.356550590848]
								}, {
									"case":	157,
									"scores":	[-6.356550590848]
								}, {
									"case":	158,
									"scores":	[-6.356550590848]
								}, {
									"case":	159,
									"scores":	[-6.356550590848]
								}, {
									"case":	160,
									"scores":	[-6.356550590848]
								}, {
									"case":	161,
									"scores":	[-6.356550590848]
								}, {
									"case":	162,
									"scores":	[-6.356550590848]
								}, {
									"case":	163,
									"scores":	[-6.356550590848]
								}, {
									"case":	164,
									"scores":	[-6.356550590848]
								}, {
									"case":	165,
									"scores":	[-6.356550590848]
								}, {
									"case":	166,
									"scores":	[-6.356550590848]
								}, {
									"case":	167,
									"scores":	[-6.356550590848]
								}, {
									"case":	168,
									"scores":	[-6.356550590848]
								}, {
									"case":	169,
									"scores":	[-6.356550590848]
								}, {
									"case":	170,
									"scores":	[-6.356550590848]
								}, {
									"case":	171,
									"scores":	[-6.356550590848]
								}, {
									"case":	172,
									"scores":	[-6.356550590848]
								}, {
									"case":	173,
									"scores":	[-6.356550590848]
								}, {
									"case":	174,
									"scores":	[-6.356550590848]
								}, {
									"case":	175,
									"scores":	[-6.356550590848]
								}, {
									"case":	176,
									"scores":	[-6.356550590848]
								}, {
									"case":	177,
									"scores":	[-6.356550590848]
								}, {
									"case":	178,
									"scores":	[-6.356550590848]
								}, {
									"case":	179,
									"scores":	[-6.356550590848]
								}, {
									"case":	180,
									"scores":	[-6.356550590848]
								}, {
									"case":	181,
									"scores":	[-6.356550590848]
								}, {
									"case":	182,
									"scores":	[-6.356550590848]
								}, {
									"case":	183,
									"scores":	[-6.356550590848]
								}, {
									"case":	184,
									"scores":	[-6.356550590848]
								}, {
									"case":	185,
									"scores":	[-6.356550590848]
								}, {
									"case":	186,
									"scores":	[-6.356550590848]
								}, {
									"case":	187,
									"scores":	[-6.356550590848]
								}, {
									"case":	188,
									"scores":	[-6.356550590848]
								}, {
									"case":	189,
									"scores":	[-6.356550590848]
								}, {
									"case":	190,
									"scores":	[-6.356550590848]
								}, {
									"case":	191,
									"scores":	[-6.356550590848]
								}, {
									"case":	192,
									"scores":	[-6.356550590848]
								}, {
									"case":	193,
									"scores":	[-6.356550590848]
								}, {
									"case":	194,
									"scores":	[-6.356550590848]
								}, {
									"case":	195,
									"scores":	[-6.356550590848]
								}, {
									"case":	196,
									"scores":	[-6.356550590848]
								}, {
									"case":	197,
									"scores":	[-6.356550590848]
								}, {
									"case":	198,
									"scores":	[-6.356550590848]
								}, {
									"case":	199,
									"scores":	[-6.356550590848]
								}, {
									"case":	200,
									"scores":	[-6.356550590848]
								}, {
									"case":	201,
									"scores":	[-6.356550590848]
								}, {
									"case":	202,
									"scores":	[-6.356550590848]
								}, {
									"case":	203,
									"scores":	[-6.356550590848]
								}, {
									"case":	204,
									"scores":	[-6.356550590848]
								}, {
									"case":	205,
									"scores":	[-6.356550590848]
								}, {
									"case":	206,
									"scores":	[-6.356550590848]
								}, {
									"case":	207,
									"scores":	[-6.356550590848]
								}, {
									"case":	208,
									"scores":	[-6.356550590848]
								}, {
									"case":	209,
									"scores":	[-6.356550590848]
								}, {
									"case":	210,
									"scores":	[-6.356550590848]
								}, {
									"case":	211,
									"scores":	[-6.356550590848]
								}, {
									"case":	212,
									"scores":	[-6.356550590848]
								}, {
									"case":	213,
									"scores":	[-6.356550590848]
								}, {
									"case":	214,
									"scores":	[-6.356550590848]
								}, {
									"case":	215,
									"scores":	[-6.356550590848]
								}, {
									"case":	216,
									"scores":	[-6.356550590848]
								}, {
									"case":	217,
									"scores":	[-6.356550590848]
								}, {
									"case":	218,
									"scores":	[-6.356550590848]
								}, {
									"case":	219,
									"scores":	[-6.356550590848]
								}, {
									"case":	220,
									"scores":	[-6.356550590848]
								}, {
									"case":	221,
									"scores":	[-6.356550590848]
								}, {
									"case":	222,
									"scores":	[-6.356550590848]
								}, {
									"case":	223,
									"scores":	[-6.356550590848]
								}, {
									"case":	224,
									"scores":	[-6.356550590848]
								}, {
									"case":	225,
									"scores":	[-6.356550590848]
								}, {
									"case":	226,
									"scores":	[-6.356550590848]
								}, {
									"case":	227,
									"scores":	[-6.356550590848]
								}, {
									"case":	228,
									"scores":	[-6.356550590848]
								}, {
									"case":	229,
									"scores":	[-6.356550590848]
								}, {
									"case":	230,
									"scores":	[-6.356550590848]
								}, {
									"case":	231,
									"scores":	[-6.356550590848]
								}, {
									"case":	232,
									"scores":	[-6.356550590848]
								}, {
									"case":	233,
									"scores":	[-6.356550590848]
								}, {
									"case":	234,
									"scores":	[-6.356550590848]
								}, {
									"case":	235,
									"scores":	[-6.356550590848]
								}, {
									"case":	236,
									"scores":	[-6.356550590848]
								}, {
									"case":	237,
									"scores":	[-6.356550590848]
								}, {
									"case":	238,
									"scores":	[-6.356550590848]
								}, {
									"case":	239,
									"scores":	[-6.356550590848]
								}, {
									"case":	240,
									"scores":	[-6.356550590848]
								}, {
									"case":	241,
									"scores":	[-6.356550590848]
								}, {
									"case":	242,
									"scores":	[-6.356550590848]
								}, {
									"case":	243,
									"scores":	[-6.356550590848]
								}, {
									"case":	244,
									"scores":	[-6.356550590848]
								}, {
									"case":	245,
									"scores":	[-6.356550590848]
								}, {
									"case":	246,
									"scores":	[-6.356550590848]
								}, {
									"case":	247,
									"scores":	[-6.356550590848]
								}, {
									"case":	248,
									"scores":	[-6.356550590848]
								}, {
									"case":	249,
									"scores":	[-6.356550590848]
								}, {
									"case":	250,
									"scores":	[-6.356550590848]
								}, {
									"case":	251,
									"scores":	[-6.356550590848]
								}, {
									"case":	252,
									"scores":	[-6.356550590848]
								}, {
									"case":	253,
									"scores":	[-6.356550590848]
								}, {
									"case":	254,
									"scores":	[-6.356550590848]
								}, {
									"case":	255,
									"scores":	[-6.356550590848]
								}, {
									"case":	256,
									"scores":	[-6.356550590848]
								}, {
									"case":	257,
									"scores":	[-6.356550590848]
								}, {
									"case":	258,
									"scores":	[-6.356550590848]
								}, {
									"case":	259,
									"scores":	[-6.356550590848]
								}, {
									"case":	260,
									"scores":	[-6.356550590848]
								}, {
									"case":	261,
									"scores":	[-6.356550590848]
								}, {
									"case":	262,
									"scores":	[-6.356550590848]
								}, {
									"case":	263,
									"scores":	[-6.356550590848]
								}, {
									"case":	264,
									"scores":	[-6.356550590848]
								}, {
									"case":	265,
									"scores":	[-6.356550590848]
								}, {
									"case":	266,
									"scores":	[-6.356550590848]
								}, {
									"case":	267,
									"scores":	[-6.356550590848]
								}, {
									"case":	268,
									"scores":	[-6.356550590848]
								}, {
									"case":	269,
									"scores":	[-6.356550590848]
								}, {
									"case":	270,
									"scores":	[-6.356550590848]
								}, {
									"case":	271,
									"scores":	[-6.356550590848]
								}, {
									"case":	272,
									"scores":	[-6.356550590848]
								}, {
									"case":	273,
									"scores":	[-6.356550590848]
								}, {
									"case":	274,
									"scores":	[-6.356550590848]
								}, {
									"case":	275,
									"scores":	[-6.356550590848]
								}, {
									"case":	276,
									"scores":	[-6.356550590848]
								}, {
									"case":	277,
									"scores":	[-6.356550590848]
								}, {
									"case":	278,
									"scores":	[-6.356550590848]
								}, {
									"case":	279,
									"scores":	[-6.356550590848]
								}, {
									"case":	280,
									"scores":	[-6.356550590848]
								}, {
									"case":	281,
									"scores":	[-6.356550590848]
								}, {
									"case":	282,
									"scores":	[-6.356550590848]
								}, {
									"case":	283,
									"scores":	[-6.356550590848]
								}, {
									"case":	284,
									"scores":	[-6.356550590848]
								}, {
									"case":	285,
									"scores":	[-6.356550590848]
								}, {
									"case":	286,
									"scores":	[-6.356550590848]
								}, {
									"case":	287,
									"scores":	[-6.356550590848]
								}, {
									"case":	288,
									"scores":	[-6.356550590848]
								}, {
									"case":	289,
									"scores":	[-6.356550590848]
								}, {
									"case":	290,
									"scores":	[-6.356550590848]
								}, {
									"case":	291,
									"scores":	[-6.356550590848]
								}, {
									"case":	292,
									"scores":	[-6.356550590848]
								}, {
									"case":	293,
									"scores":	[-6.356550590848]
								}, {
									"case":	294,
									"scores":	[-6.356550590848]
								}, {
									"case":	295,
									"scores":	[-6.356550590848]
								}, {
									"case":	296,
									"scores":	[-6.356550590848]
								}, {
									"case":	297,
									"scores":	[-6.356550590848]
								}, {
									"case":	298,
									"scores":	[-6.356550590848]
								}, {
									"case":	299,
									"scores":	[-6.356550590848]
								}, {
									"case":	300,
									"scores":	[-6.356550590848]
								}, {
									"case":	301,
									"scores":	[-6.356550590848]
								}, {
									"case":	302,
									"scores":	[-6.356550590848]
								}, {
									"case":	303,
									"scores":	[-6.356550590848]
								}, {
									"case":	304,
									"scores":	[-6.356550590848]
								}, {
									"case":	305,
									"scores":	[-8.346514059248, -8.889341665248, -8.841967842048, -8.040551148248, -8.056217388248, -8.251440265248, -7.539616148248]
								}, {
									"case":	306,
									"scores":	[-8.347514059248, -8.890341665248, -8.842967842048, -8.041551148248, -8.057217388248, -8.252440265248, -7.5406161482480014]
								}]
						}]
				}, {
					"line":	99,
					"switches":	[{
							"switch":	20,
							"types":	[[], [], [], [], [65, 66], [1, 2, 3, 4, 5], [], [], [], [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], [], [], [], [], [], []],
							"begin_line":	100,
							"begin_column":	0,
							"end_line":	100,
							"end_column":	0,
							"patch_codes":	["memset(&(**struc), 0, sizeof (*(&(**struc))))", "memset(&(**struc).is_ref__gc, 0, sizeof (*(&(**struc).is_ref__gc)))", "memset(&(**struc).refcount__gc, 0, sizeof (*(&(**struc).refcount__gc)))", "memset(&(**struc).type, 0, sizeof (*(&(**struc).type)))", "memset(&(**struc).value, 0, sizeof (*(&(**struc).value)))", "((**(struc))).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*(struc), &class_name, &class_name_len, 0)", "((**struc)).value.obj.handlers->get_class_name(*struc, &(class_name), &class_name_len, 0)", "(**(struc)).value.ht->nApplyCount++", "(**(struc)).value.ht->nApplyCount--", "(class_name)++", "--(myht)->nApplyCount", "_efree(((class_name)))", "_efree(((myht)))", "is_temp = (0)", "is_temp = (1)", "is_temp = (2)", "is_temp = (3)", "is_temp = (4)", "is_temp = (5)", "is_temp = (6)", "is_temp = (7)", "is_temp = (is_temp)", "is_temp = (level)", "php_body_write(((**(struc)).value.str.val), ((**struc).value.str.len))", "php_body_write(((**struc).value.str.val), ((**(struc)).value.str.len))", "php_element_dump_func = (php_element_dump_func)", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted long input array (%s) overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted super-global (%s) variable overwrite\", (class_name))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(struc)).value.str.val)", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements((myht)))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*((struc))) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), (class_name), (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**(struc)).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, (myht) ? zend_hash_num_elements(myht) : 0)", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements((myht)) : 0)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((struc))))", "php_printf(\"\\\"%s\\\"\", (class_name))", "php_printf(\"\\\"%s\\\":protected\", (class_name))", "zend_hash_apply_with_arguments((myht), (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy((myht))", "((**struc)).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "--myht->nApplyCount", "_efree((class_name))", "_efree((myht))", "exit(1)", "is_temp = 0", "php_body_write(((**struc).value.str.val), ((**struc).value.str.len))", "php_element_dump_func = php_array_element_dump", "php_element_dump_func = php_object_property_dump", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"%*c\", level - 1, ' ')", "php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht))", "php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0)", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level)", "zend_hash_destroy(myht)", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L100\", 10, &(struc), sizeof (struc), &((**struc).type), sizeof ((**struc).type), &(level), sizeof (level), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &((**struc).refcount__gc), sizeof ((**struc).refcount__gc), &((**struc).is_ref__gc), sizeof ((**struc).is_ref__gc)))\n    goto head_done;\n", "if (__is_neg(\"\", \"L100\", 10, &(struc), sizeof (struc), &((**struc).type), sizeof ((**struc).type), &(level), sizeof (level), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &((**struc).refcount__gc), sizeof ((**struc).refcount__gc), &((**struc).is_ref__gc), sizeof ((**struc).is_ref__gc)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.56871302989917]
								}, {
									"case":	2,
									"scores":	[-7.56871302989917]
								}, {
									"case":	3,
									"scores":	[-7.56871302989917]
								}, {
									"case":	4,
									"scores":	[-7.56871302989917]
								}, {
									"case":	5,
									"scores":	[-7.56871302989917]
								}, {
									"case":	6,
									"scores":	[-7.56871302989917]
								}, {
									"case":	7,
									"scores":	[-7.56871302989917]
								}, {
									"case":	8,
									"scores":	[-7.56871302989917]
								}, {
									"case":	9,
									"scores":	[-7.56871302989917]
								}, {
									"case":	10,
									"scores":	[-7.56871302989917]
								}, {
									"case":	11,
									"scores":	[-7.56871302989917]
								}, {
									"case":	12,
									"scores":	[-7.56871302989917]
								}, {
									"case":	13,
									"scores":	[-7.56871302989917]
								}, {
									"case":	14,
									"scores":	[-7.56871302989917]
								}, {
									"case":	15,
									"scores":	[-7.56871302989917]
								}, {
									"case":	16,
									"scores":	[-7.56871302989917]
								}, {
									"case":	17,
									"scores":	[-7.56871302989917]
								}, {
									"case":	18,
									"scores":	[-7.56871302989917]
								}, {
									"case":	19,
									"scores":	[-7.56871302989917]
								}, {
									"case":	20,
									"scores":	[-7.56871302989917]
								}, {
									"case":	21,
									"scores":	[-7.56871302989917]
								}, {
									"case":	22,
									"scores":	[-7.56871302989917]
								}, {
									"case":	23,
									"scores":	[-7.56871302989917]
								}, {
									"case":	24,
									"scores":	[-7.56871302989917]
								}, {
									"case":	25,
									"scores":	[-7.56871302989917]
								}, {
									"case":	26,
									"scores":	[-7.56871302989917]
								}, {
									"case":	27,
									"scores":	[-7.56871302989917]
								}, {
									"case":	28,
									"scores":	[-7.56871302989917]
								}, {
									"case":	29,
									"scores":	[-7.56871302989917]
								}, {
									"case":	30,
									"scores":	[-7.56871302989917]
								}, {
									"case":	31,
									"scores":	[-7.56871302989917]
								}, {
									"case":	32,
									"scores":	[-7.56871302989917]
								}, {
									"case":	33,
									"scores":	[-7.56871302989917]
								}, {
									"case":	34,
									"scores":	[-7.56871302989917]
								}, {
									"case":	35,
									"scores":	[-7.56871302989917]
								}, {
									"case":	36,
									"scores":	[-7.56871302989917]
								}, {
									"case":	37,
									"scores":	[-7.56871302989917]
								}, {
									"case":	38,
									"scores":	[-7.56871302989917]
								}, {
									"case":	39,
									"scores":	[-7.56871302989917]
								}, {
									"case":	40,
									"scores":	[-7.56871302989917]
								}, {
									"case":	41,
									"scores":	[-7.56871302989917]
								}, {
									"case":	42,
									"scores":	[-7.56871302989917]
								}, {
									"case":	43,
									"scores":	[-7.56871302989917]
								}, {
									"case":	44,
									"scores":	[-7.56871302989917]
								}, {
									"case":	45,
									"scores":	[-7.56871302989917]
								}, {
									"case":	46,
									"scores":	[-7.56871302989917]
								}, {
									"case":	47,
									"scores":	[-7.56871302989917]
								}, {
									"case":	48,
									"scores":	[-7.56871302989917]
								}, {
									"case":	49,
									"scores":	[-7.56871302989917]
								}, {
									"case":	50,
									"scores":	[-7.56871302989917]
								}, {
									"case":	51,
									"scores":	[-7.56871302989917]
								}, {
									"case":	52,
									"scores":	[-7.56871302989917]
								}, {
									"case":	53,
									"scores":	[-7.56871302989917]
								}, {
									"case":	54,
									"scores":	[-7.56871302989917]
								}, {
									"case":	55,
									"scores":	[-7.56871302989917]
								}, {
									"case":	56,
									"scores":	[-7.56871302989917]
								}, {
									"case":	57,
									"scores":	[-7.56871302989917]
								}, {
									"case":	58,
									"scores":	[-7.56871302989917]
								}, {
									"case":	59,
									"scores":	[-7.56871302989917]
								}, {
									"case":	60,
									"scores":	[-7.56871302989917]
								}, {
									"case":	61,
									"scores":	[-7.56871302989917]
								}, {
									"case":	62,
									"scores":	[-7.56871302989917]
								}, {
									"case":	63,
									"scores":	[-7.56871302989917]
								}, {
									"case":	64,
									"scores":	[-7.56871302989917]
								}, {
									"case":	65,
									"scores":	[-9.48465552089917, -11.380249999899169, -9.03603376489917, -10.337972802599168, -9.54090344489917, -10.581063510899169, -10.300901925899169, -10.309212155899168, -11.380249999899169, -11.380249999899169]
								}, {
									"case":	66,
									"scores":	[-9.48565552089917, -11.381249999899168, -9.03703376489917, -10.338972802599169, -9.54190344489917, -10.582063510899168, -10.30190192589917, -10.310212155899169, -11.381249999899168, -11.381249999899168]
								}]
						}, {
							"switch":	52,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	100,
							"begin_column":	2,
							"end_line":	165,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L100\", 10, &(struc), sizeof (struc), &((**struc).type), sizeof ((**struc).type), &(level), sizeof (level), &(myht), sizeof (myht), &(php_element_dump_func), sizeof (php_element_dump_func), &(is_temp), sizeof (is_temp), &(class_name), sizeof (class_name), &(class_name_len), sizeof (class_name_len), &((**struc).refcount__gc), sizeof ((**struc).refcount__gc), &((**struc).is_ref__gc), sizeof ((**struc).is_ref__gc)))\n    switch ((**struc).type) {\n      case 3:\n        php_printf(\"%sbool(%s)\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), (**struc).value.lval ? \"true\" : \"false\");\n        break;\n      case 0:\n        php_printf(\"%sNULL\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"));\n        break;\n      case 1:\n        php_printf(\"%sint(%ld)\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), (**struc).value.lval);\n        break;\n      case 2:\n        php_printf(\"%sfloat(%.*G)\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), (int)(executor_globals.precision), (**struc).value.dval);\n        break;\n      case 6:\n        php_printf(\"%sstring(%d) \\\"\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), (**struc).value.str.len);\n        php_body_write(((**struc).value.str.val), ((**struc).value.str.len));\n        do {\n            const char *__str = (\"\\\"\\n\");\n            php_body_write(__str, strlen(__str));\n        } while (0);\n        break;\n      case 4:\n        myht = (**struc).value.ht;\n        if (++myht->nApplyCount > 1) {\n            do {\n                const char *__str = (\"*RECURSION*\\n\");\n                php_body_write(__str, strlen(__str));\n            } while (0);\n            --myht->nApplyCount;\n            return;\n        }\n        php_printf(\"%sarray(%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), zend_hash_num_elements(myht));\n        php_element_dump_func = php_array_element_dump;\n        is_temp = 0;\n        goto head_done;\n      case 5:\n        myht = ((((**struc))).value.obj.handlers->get_debug_info ? (((**struc))).value.obj.handlers->get_debug_info(&(**struc), &is_temp) : (is_temp = 0 , (((**struc))).value.obj.handlers->get_properties ? ((**struc)).value.obj.handlers->get_properties(&(**struc)) : ((void *)0)));\n        if (myht && ++myht->nApplyCount > 1) {\n            do {\n                const char *__str = (\"*RECURSION*\\n\");\n                php_body_write(__str, strlen(__str));\n            } while (0);\n            --myht->nApplyCount;\n            return;\n        }\n        ((**struc)).value.obj.handlers->get_class_name(*struc, &class_name, &class_name_len, 0);\n        php_printf(\"%sobject(%s)#%d (%d) {\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), class_name, (**struc).value.obj.handle, myht ? zend_hash_num_elements(myht) : 0);\n        _efree((class_name));\n        php_element_dump_func = php_object_property_dump;\n      head_done:\n        if (myht) {\n            zend_hash_apply_with_arguments(myht, (apply_func_args_t)php_element_dump_func, 1, level);\n            --myht->nApplyCount;\n            if (is_temp) {\n                zend_hash_destroy(myht);\n                _efree((myht));\n            }\n        }\n        if (level > 1) {\n            php_printf(\"%*c\", level - 1, ' ');\n        }\n        do {\n            const char *__str = (\"}\\n\");\n            php_body_write(__str, strlen(__str));\n        } while (0);\n        break;\n      case 7:\n        {\n            char *type_name;\n            type_name = zend_rsrc_list_get_rsrc_type((**struc).value.lval);\n            php_printf(\"%sresource(%ld) of type (%s)\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"), (**struc).value.lval, type_name ? type_name : \"Unknown\");\n            break;\n        }\n      default:\n        php_printf(\"%sUNKNOWN:0\\n\", (zval_isref_p(*(struc)) ? \"&\" : \"\"));\n        break;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.90519610989917, -9.97582810989917, -7.51451995389917, -9.46974462089917, -8.70182282089917, -9.81099509089917, -9.36756009989917, -8.67362136989917, -9.97582810989917, -9.97582810989917]
								}]
						}]
				}, {
					"line":	172,
					"switches":	[]
				}, {
					"line":	173,
					"switches":	[]
				}, {
					"line":	174,
					"switches":	[]
				}, {
					"line":	176,
					"switches":	[{
							"switch":	53,
							"types":	[[], [], [], [], [30], [], [], [], [], [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [], [], [], [], [], []],
							"begin_line":	177,
							"begin_column":	0,
							"end_line":	177,
							"end_column":	0,
							"patch_codes":	["(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "_efree(((args)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(return_value_ptr)).value.str.val)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((return_value_ptr))))", "php_var_dump((args)[i], 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "_efree((args))", "exit(1)", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "php_var_dump(args[i], 1)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L177\", 4, &(ht), sizeof (ht), &(args), sizeof (args), &(argc), sizeof (argc), &(i), sizeof (i)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	2,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	3,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	4,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	5,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	6,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	7,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	8,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	9,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	10,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	11,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	12,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	13,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	14,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	15,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	16,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	17,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-10.032944784156845, -12.332876423956845, -11.096429362556844, -11.266670451556843]
								}]
						}, {
							"switch":	54,
							"types":	[[5], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4], []],
							"begin_line":	177,
							"begin_column":	2,
							"end_line":	179,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L177\", 4, &(ht), sizeof (ht), &(args), sizeof (args), &(argc), sizeof (argc), &(i), sizeof (i))) {\n    return;\n}\n", "if ((zend_parse_parameters((ht), \"+\", &args, &argc) == -1) || __is_neg(\"\", \"L177\", 4, &(ht), sizeof (ht), &(args), sizeof (args), &(argc), sizeof (argc), &(i), sizeof (i))) {\n    return;\n}\n", "if (dprintf((ht), \"+\", &args, &argc) == -1) {\n    return;\n}\n", "if (zend_get_parameters_ex((ht), \"+\", &args, &argc) == -1) {\n    return;\n}\n", "if ((zend_parse_parameters((ht), \"+\", &args, &argc) == -1) && !__is_neg(\"\", \"L177\", 4, &(ht), sizeof (ht), &(args), sizeof (args), &(argc), sizeof (argc), &(i), sizeof (i))) {\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.010255447428146, -4.5656271564281461, -4.0029718788281459, -4.8564597145381461]
								}, {
									"case":	2,
									"scores":	[-4.5695412327281462, -5.1249129417281463, -4.562257664128146, -5.4157454998381453]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-4.5695412327281462, -5.1249129417281463, -4.562257664128146, -5.4157454998381453]
								}]
						}, {
							"switch":	55,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	177,
							"begin_column":	2,
							"end_line":	179,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L177\", 4, &(ht), sizeof (ht), &(args), sizeof (args), &(argc), sizeof (argc), &(i), sizeof (i)))\n    if (zend_parse_parameters((ht), \"+\", &args, &argc) == -1) {\n        return;\n    }\n", "if (!__is_neg(\"\", \"L177\", 4, &(ht), sizeof (ht), &(args), sizeof (args), &(argc), sizeof (argc), &(i), sizeof (i)) && (zend_parse_parameters((ht), \"+\", &args, &argc) == -1)) {\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.2467952657568446, -9.8021669747568438, -9.2395116971568445, -10.092999532866845]
								}, {
									"case":	2,
									"scores":	[-9.8584056510568452, -10.413777360056844, -9.8511220824568451, -10.704609918166843]
								}]
						}]
				}, {
					"line":	181,
					"switches":	[{
							"switch":	57,
							"types":	[[], [], [], [], [30, 31], [], [], [], [], [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [], [], [], [], [], []],
							"begin_line":	182,
							"begin_column":	1,
							"end_line":	182,
							"end_column":	1,
							"patch_codes":	["(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "_efree(((args)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(return_value_ptr)).value.str.val)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((return_value_ptr))))", "php_var_dump((args)[i], 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "_efree((args))", "exit(1)", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "php_var_dump(args[i], 1)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L182\", 4, &(args), sizeof (args), &(i), sizeof (i), &(argc), sizeof (argc), &(ht), sizeof (ht)))\n    break;\n", "if (__is_neg(\"\", \"L182\", 4, &(args), sizeof (args), &(i), sizeof (i), &(argc), sizeof (argc), &(ht), sizeof (ht)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	2,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	3,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	4,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	5,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	6,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	7,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	8,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	9,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	10,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	11,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	12,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	13,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	14,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	15,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	16,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	17,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	18,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	19,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	20,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	21,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	22,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	23,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	24,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	25,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	26,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	27,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	28,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	29,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	30,
									"scores":	[-9.7855360043218056, -8.7145883625218055, -8.8948817385218053, -8.9319821385218052]
								}, {
									"case":	31,
									"scores":	[-9.7855360043218056, -8.7145883625218055, -8.8948817385218053, -8.9319821385218052]
								}]
						}, {
							"switch":	58,
							"types":	[[], [], [1], [], [], [], [137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282], [], [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72], [], [], [73]],
							"begin_line":	182,
							"begin_column":	3,
							"end_line":	182,
							"end_column":	36,
							"patch_codes":	["if (!__is_neg(\"\", \"L182\", 4, &(args), sizeof (args), &(i), sizeof (i), &(argc), sizeof (argc), &(ht), sizeof (ht)))\n    php_var_dump(args[i], 1);\n", "_IO_padn(args[i], 1, -1)", "_IO_padn(args[i], 1, 0)", "_IO_padn(args[i], 1, 1)", "_php_glob_stream_get_path(args[i], 1, 0)", "_php_glob_stream_get_pattern(args[i], 1, 0)", "_php_stream_opendir(args[i], 1, 0)", "_php_stream_rmdir(args[i], 1, 0)", "fgets(args[i], 1, 0)", "fgetws(args[i], 1, 0)", "memchr(args[i], 1, -1)", "memchr(args[i], 1, 0)", "memchr(args[i], 1, 1)", "memset(args[i], 1, -1)", "memset(args[i], 1, 0)", "memset(args[i], 1, 1)", "php_ini_activate_config(args[i], 1, -1)", "php_ini_activate_config(args[i], 1, 0)", "php_ini_activate_config(args[i], 1, 1)", "php_ini_activate_config(args[i], 1, argc)", "php_ini_activate_config(args[i], 1, ht)", "php_ini_activate_config(args[i], 1, i)", "php_ini_activate_config(args[i], 1, le_index_ptr)", "php_ini_activate_config(args[i], 1, return_value_used)", "php_resolve_path(args[i], 1, 0)", "php_stream_xport_listen(args[i], 1, 0)", "php_stream_xport_listen(args[i], 1, environ)", "php_var_export_ex(args[i], 1, 0)", "php_varname_check(args[i], 1, -1)", "php_varname_check(args[i], 1, 0)", "php_varname_check(args[i], 1, 1)", "realpath_cache_lookup(args[i], 1, -1)", "realpath_cache_lookup(args[i], 1, 0)", "realpath_cache_lookup(args[i], 1, 1)", "symlinkat(args[i], 1, 0)", "wcrtomb(args[i], 1, 0)", "wmemchr(args[i], 1, -1)", "wmemchr(args[i], 1, 0)", "wmemchr(args[i], 1, 1)", "wmemset(args[i], 1, -1)", "wmemset(args[i], 1, 0)", "wmemset(args[i], 1, 1)", "zend_do_end_variable_parse(args[i], 1, -1)", "zend_do_end_variable_parse(args[i], 1, 0)", "zend_do_end_variable_parse(args[i], 1, 1)", "zend_do_end_variable_parse(args[i], 1, argc)", "zend_do_end_variable_parse(args[i], 1, ht)", "zend_do_end_variable_parse(args[i], 1, i)", "zend_do_end_variable_parse(args[i], 1, le_index_ptr)", "zend_do_end_variable_parse(args[i], 1, return_value_used)", "zend_fcall_info_argp(args[i], 1, 0)", "zend_fcall_info_argp(args[i], 1, args)", "zend_fcall_info_args_restore(args[i], 1, 0)", "zend_fcall_info_args_restore(args[i], 1, args)", "zend_fcall_info_argv(args[i], 1, 0)", "zend_lookup_class(args[i], 1, 0)", "zend_memrchr(args[i], 1, -1)", "zend_memrchr(args[i], 1, 0)", "zend_memrchr(args[i], 1, 1)", "zend_mm_shutdown(args[i], 1, -1)", "zend_mm_shutdown(args[i], 1, 0)", "zend_mm_shutdown(args[i], 1, 1)", "zend_mm_shutdown(args[i], 1, argc)", "zend_mm_shutdown(args[i], 1, ht)", "zend_mm_shutdown(args[i], 1, i)", "zend_mm_shutdown(args[i], 1, le_index_ptr)", "zend_mm_shutdown(args[i], 1, return_value_used)", "zend_register_class_alias_ex(args[i], 1, 0)", "zend_stack_apply(args[i], 1, 0)", "zend_stack_apply(args[i], 1, brk)", "zend_stack_apply(args[i], 1, dlclose)", "zend_unregister_functions(args[i], 1, 0)", "{\n}\n", "Debug(args[i], 1)", "__overflow(args[i], 1)", "__sigsetjmp(args[i], 1)", "_longjmp(args[i], 1)", "_php_stream_filter_flush(args[i], 1)", "_php_stream_flush(args[i], 1)", "_php_stream_free(args[i], 1)", "_php_stream_putc(args[i], 1)", "access(args[i], 1)", "add_next_index_bool(args[i], 1)", "add_next_index_resource(args[i], 1)", "compile_file(args[i], 1)", "convert_to_long_base(args[i], 1)", "display_link_numbers(args[i], 1)", "dlopen(args[i], 1)", "execute_internal(args[i], 1)", "fwide(args[i], 1)", "getloadavg(args[i], 1)", "index(args[i], 1)", "longjmp(args[i], 1)", "mkstemps(args[i], 1)", "pathconf(args[i], 1)", "php_check_open_basedir_ex(args[i], 1)", "php_create_empty_class(args[i], 1)", "php_debug_zval_dump(args[i], 1)", "php_printf(args[i], 1)", "php_stream_filter_remove(args[i], 1)", "php_stream_xport_crypto_enable(args[i], 1)", "php_var_dump(args[i], 1)", "php_var_export(args[i], 1)", "print_op_array(args[i], 1)", "printf(args[i], 1)", "realpath_cache_del(args[i], 1)", "rindex(args[i], 1)", "sigaddset(args[i], 1)", "sigdelset(args[i], 1)", "sigismember(args[i], 1)", "siglongjmp(args[i], 1)", "strchr(args[i], 1)", "strrchr(args[i], 1)", "timespec_get(args[i], 1)", "virtual_access(args[i], 1)", "virtual_open(args[i], 1)", "wcschr(args[i], 1)", "wcsrchr(args[i], 1)", "wctomb(args[i], 1)", "wprintf(args[i], 1)", "zend_atoi(args[i], 1)", "zend_atol(args[i], 1)", "zend_class_implements(args[i], 1)", "zend_delete_global_variable(args[i], 1)", "zend_do_begin_dynamic_function_call(args[i], 1)", "zend_do_return(args[i], 1)", "zend_fcall_info_argn(args[i], 1)", "zend_fcall_info_args_clear(args[i], 1)", "zend_ini_boolean_displayer_cb(args[i], 1)", "zend_ini_color_displayer_cb(args[i], 1)", "zend_list_insert(args[i], 1)", "zend_print_zval(args[i], 1)", "zend_print_zval_r(args[i], 1)", "zend_ptr_stack_n_pop(args[i], 1)", "zend_ptr_stack_n_push(args[i], 1)", "zend_register_ini_entries(args[i], 1)", "php_var_dump((&argc)[i], 1)", "php_var_dump((&args)[i], 1)", "php_var_dump((&ht)[i], 1)", "php_var_dump((&i)[i], 1)", "php_var_dump((&return_value)[i], 1)", "php_var_dump((&return_value_ptr)[i], 1)", "php_var_dump((&return_value_used)[i], 1)", "php_var_dump((&this_ptr)[i], 1)", "php_var_dump((args)[i], 1)", "php_var_dump(args[(0 * argc)], 1)", "php_var_dump(args[(0 * ht)], 1)", "php_var_dump(args[(0 * i)], 1)", "php_var_dump(args[(0 * return_value_used)], 1)", "php_var_dump(args[(argc != 0)], 1)", "php_var_dump(args[(argc != i)], 1)", "php_var_dump(args[(argc * ht)], 1)", "php_var_dump(args[(argc * i)], 1)", "php_var_dump(args[(argc * return_value_used)], 1)", "php_var_dump(args[(argc + 0)], 1)", "php_var_dump(args[(argc + i)], 1)", "php_var_dump(args[(argc - 0)], 1)", "php_var_dump(args[(argc - i)], 1)", "php_var_dump(args[(argc == 0)], 1)", "php_var_dump(args[(argc == i)], 1)", "php_var_dump(args[(argc)], 1)", "php_var_dump(args[(args != 0)], 1)", "php_var_dump(args[(args == 0)], 1)", "php_var_dump(args[(ht != 0)], 1)", "php_var_dump(args[(ht != argc)], 1)", "php_var_dump(args[(ht != i)], 1)", "php_var_dump(args[(ht != return_value_used)], 1)", "php_var_dump(args[(ht * argc)], 1)", "php_var_dump(args[(ht * i)], 1)", "php_var_dump(args[(ht * return_value_used)], 1)", "php_var_dump(args[(ht + 0)], 1)", "php_var_dump(args[(ht + argc)], 1)", "php_var_dump(args[(ht + i)], 1)", "php_var_dump(args[(ht + return_value_used)], 1)", "php_var_dump(args[(ht - 0)], 1)", "php_var_dump(args[(ht - argc)], 1)", "php_var_dump(args[(ht - i)], 1)", "php_var_dump(args[(ht - return_value_used)], 1)", "php_var_dump(args[(ht == 0)], 1)", "php_var_dump(args[(ht == argc)], 1)", "php_var_dump(args[(ht == i)], 1)", "php_var_dump(args[(ht == return_value_used)], 1)", "php_var_dump(args[(ht)], 1)", "php_var_dump(args[(i != 0)], 1)", "php_var_dump(args[(i * argc)], 1)", "php_var_dump(args[(i * ht)], 1)", "php_var_dump(args[(i * return_value_used)], 1)", "php_var_dump(args[(i + 0)], 1)", "php_var_dump(args[(i - 0)], 1)", "php_var_dump(args[(i == 0)], 1)", "php_var_dump(args[(i)], 1)", "php_var_dump(args[(return_value != 0)], 1)", "php_var_dump(args[(return_value != this_ptr)], 1)", "php_var_dump(args[(return_value == 0)], 1)", "php_var_dump(args[(return_value == this_ptr)], 1)", "php_var_dump(args[(return_value_ptr != 0)], 1)", "php_var_dump(args[(return_value_ptr == 0)], 1)", "php_var_dump(args[(return_value_used != 0)], 1)", "php_var_dump(args[(return_value_used != argc)], 1)", "php_var_dump(args[(return_value_used != i)], 1)", "php_var_dump(args[(return_value_used * argc)], 1)", "php_var_dump(args[(return_value_used * ht)], 1)", "php_var_dump(args[(return_value_used * i)], 1)", "php_var_dump(args[(return_value_used + 0)], 1)", "php_var_dump(args[(return_value_used + argc)], 1)", "php_var_dump(args[(return_value_used + i)], 1)", "php_var_dump(args[(return_value_used - 0)], 1)", "php_var_dump(args[(return_value_used - argc)], 1)", "php_var_dump(args[(return_value_used - i)], 1)", "php_var_dump(args[(return_value_used == 0)], 1)", "php_var_dump(args[(return_value_used == argc)], 1)", "php_var_dump(args[(return_value_used == i)], 1)", "php_var_dump(args[(return_value_used)], 1)", "php_var_dump(args[(this_ptr != 0)], 1)", "php_var_dump(args[(this_ptr == 0)], 1)", "php_var_dump(args[i], (0 * argc))", "php_var_dump(args[i], (0 * ht))", "php_var_dump(args[i], (0 * i))", "php_var_dump(args[i], (0 * return_value_used))", "php_var_dump(args[i], (0))", "php_var_dump(args[i], (argc != 0))", "php_var_dump(args[i], (argc != i))", "php_var_dump(args[i], (argc * ht))", "php_var_dump(args[i], (argc * i))", "php_var_dump(args[i], (argc * return_value_used))", "php_var_dump(args[i], (argc + 0))", "php_var_dump(args[i], (argc + i))", "php_var_dump(args[i], (argc - 0))", "php_var_dump(args[i], (argc - i))", "php_var_dump(args[i], (argc == 0))", "php_var_dump(args[i], (argc == i))", "php_var_dump(args[i], (args != 0))", "php_var_dump(args[i], (args == 0))", "php_var_dump(args[i], (ht != 0))", "php_var_dump(args[i], (ht != argc))", "php_var_dump(args[i], (ht != i))", "php_var_dump(args[i], (ht != return_value_used))", "php_var_dump(args[i], (ht * argc))", "php_var_dump(args[i], (ht * i))", "php_var_dump(args[i], (ht * return_value_used))", "php_var_dump(args[i], (ht + 0))", "php_var_dump(args[i], (ht + argc))", "php_var_dump(args[i], (ht + i))", "php_var_dump(args[i], (ht + return_value_used))", "php_var_dump(args[i], (ht - 0))", "php_var_dump(args[i], (ht - argc))", "php_var_dump(args[i], (ht - i))", "php_var_dump(args[i], (ht - return_value_used))", "php_var_dump(args[i], (ht == 0))", "php_var_dump(args[i], (ht == argc))", "php_var_dump(args[i], (ht == i))", "php_var_dump(args[i], (ht == return_value_used))", "php_var_dump(args[i], (i != 0))", "php_var_dump(args[i], (i * argc))", "php_var_dump(args[i], (i * ht))", "php_var_dump(args[i], (i * return_value_used))", "php_var_dump(args[i], (i + 0))", "php_var_dump(args[i], (i - 0))", "php_var_dump(args[i], (i == 0))", "php_var_dump(args[i], (return_value != 0))", "php_var_dump(args[i], (return_value != this_ptr))", "php_var_dump(args[i], (return_value == 0))", "php_var_dump(args[i], (return_value == this_ptr))", "php_var_dump(args[i], (return_value_ptr != 0))", "php_var_dump(args[i], (return_value_ptr == 0))", "php_var_dump(args[i], (return_value_used != 0))", "php_var_dump(args[i], (return_value_used != argc))", "php_var_dump(args[i], (return_value_used != i))", "php_var_dump(args[i], (return_value_used * argc))", "php_var_dump(args[i], (return_value_used * ht))", "php_var_dump(args[i], (return_value_used * i))", "php_var_dump(args[i], (return_value_used + 0))", "php_var_dump(args[i], (return_value_used + argc))", "php_var_dump(args[i], (return_value_used + i))", "php_var_dump(args[i], (return_value_used - 0))", "php_var_dump(args[i], (return_value_used - argc))", "php_var_dump(args[i], (return_value_used - i))", "php_var_dump(args[i], (return_value_used == 0))", "php_var_dump(args[i], (return_value_used == argc))", "php_var_dump(args[i], (return_value_used == i))", "php_var_dump(args[i], (this_ptr != 0))", "php_var_dump(args[i], (this_ptr == 0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.378122151121806, -7.2280091511218059, -8.1209253511218051, -8.4152761511218053]
								}, {
									"case":	2,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	3,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	4,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	5,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	6,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	7,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	8,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	9,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	10,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	11,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	12,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	13,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	14,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	15,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	16,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	17,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	18,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	19,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	20,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	21,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	22,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	23,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	24,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	25,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	26,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	27,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	28,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	29,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	30,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	31,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	32,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	33,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	34,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	35,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	36,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	37,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	38,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	39,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	40,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	41,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	42,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	43,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	44,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	45,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	46,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	47,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	48,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	49,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	50,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	51,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	52,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	53,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	54,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	55,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	56,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	57,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	58,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	59,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	60,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	61,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	62,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	63,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	64,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	65,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	66,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	67,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	68,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	69,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	70,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	71,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	72,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	73,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	74,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	75,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	76,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	77,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	78,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	79,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	80,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	81,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	82,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	83,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	84,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	85,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	86,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	87,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	88,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	89,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	90,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	91,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	92,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	93,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	94,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	95,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	96,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	97,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	98,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	99,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	100,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	101,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	102,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	103,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	104,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	105,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	106,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	107,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	108,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	109,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	110,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	111,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	112,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	113,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	114,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	115,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	116,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	117,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	118,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	119,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	120,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	121,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	122,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	123,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	124,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	125,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	126,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	127,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	128,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	129,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	130,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	131,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	132,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	133,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	134,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	135,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	136,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	137,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	138,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	139,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	140,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	141,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	142,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	143,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	144,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	145,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	146,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	147,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	148,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	149,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	150,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	151,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	152,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	153,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	154,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	155,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	156,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	157,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	158,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	159,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	160,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	161,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	162,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	163,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	164,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	165,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	166,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	167,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	168,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	169,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	170,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	171,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	172,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	173,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	174,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	175,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	176,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	177,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	178,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	179,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	180,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	181,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	182,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	183,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	184,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	185,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	186,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	187,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	188,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	189,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	190,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	191,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	192,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	193,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	194,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	195,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	196,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	197,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	198,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	199,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	200,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	201,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	202,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	203,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	204,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	205,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	206,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	207,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	208,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	209,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	210,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	211,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	212,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	213,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	214,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	215,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	216,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	217,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	218,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	219,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	220,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	221,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	222,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	223,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	224,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	225,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	226,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	227,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	228,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	229,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	230,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	231,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	232,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	233,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	234,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	235,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	236,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	237,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	238,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	239,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	240,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	241,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	242,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	243,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	244,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	245,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	246,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	247,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	248,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	249,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	250,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	251,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	252,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	253,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	254,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	255,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	256,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	257,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	258,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	259,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	260,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	261,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	262,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	263,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	264,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	265,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	266,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	267,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	268,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	269,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	270,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	271,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	272,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	273,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	274,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	275,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	276,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	277,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	278,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	279,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	280,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	281,
									"scores":	[-7.7101319811218056]
								}, {
									"case":	282,
									"scores":	[-7.7101319811218056]
								}]
						}]
				}, {
					"line":	180,
					"switches":	[{
							"switch":	56,
							"types":	[[], [], [], [], [30], [], [], [], [], [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [], [], [], [], [], []],
							"begin_line":	181,
							"begin_column":	0,
							"end_line":	181,
							"end_column":	0,
							"patch_codes":	["(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "_efree(((args)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(return_value_ptr)).value.str.val)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((return_value_ptr))))", "php_var_dump((args)[i], 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "_efree((args))", "exit(1)", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "php_var_dump(args[i], 1)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L181\", 4, &(argc), sizeof (argc), &(i), sizeof (i), &(args), sizeof (args), &(ht), sizeof (ht)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	2,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	3,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	4,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	5,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	6,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	7,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	8,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	9,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	10,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	11,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	12,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	13,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	14,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	15,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	16,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	17,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	18,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	19,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	20,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	21,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	22,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	23,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	24,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	25,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	26,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	27,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	28,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	29,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	30,
									"scores":	[-9.9261964502393241, -10.021184337239324, -10.328735204639324, -9.9690291258393238]
								}]
						}, {
							"switch":	59,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	181,
							"begin_column":	2,
							"end_line":	183,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L181\", 4, &(argc), sizeof (argc), &(i), sizeof (i), &(args), sizeof (args), &(ht), sizeof (ht)))\n    for (i = 0; i < argc; i++) {\n        php_var_dump(args[i], 1);\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.0855632824393258, -9.4954745494393258, -7.8372982914393257, -9.2235647044393261]
								}]
						}]
				}, {
					"line":	183,
					"switches":	[{
							"switch":	60,
							"types":	[[], [], [], [], [30], [], [], [], [], [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [], [], [], [], [], []],
							"begin_line":	184,
							"begin_column":	0,
							"end_line":	184,
							"end_column":	0,
							"patch_codes":	["(**(return_value_ptr)).value.ht->nApplyCount++", "(**(return_value_ptr)).value.ht->nApplyCount--", "_efree(((args)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "php_error_docref0(((void *)0), (1 << 3L), \"\\\"%s\\\" returned as member variable from __sleep() but does not exist\", (**(return_value_ptr)).value.str.val)", "php_printf(\"\\\" refcount(%u)\\n\", zval_refcount_p(*((return_value_ptr))))", "php_var_dump((args)[i], 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((64 * 1024) - 64))", "_efree((args))", "exit(1)", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize\")", "php_error_docref0(((void *)0), (1 << 3L), \"__sleep should return an array only containing the names of instance-variables to serialize.\")", "php_printf(\"\\\"\")", "php_printf(\"\\\"]=>\\n\")", "php_var_dump(args[i], 1)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_write((\"]=>\\n\"), strlen((\"]=>\\n\")))", "if (__is_neg(\"\", \"L184\", 4, &(args), sizeof (args), &(i), sizeof (i), &(argc), sizeof (argc), &(ht), sizeof (ht)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.54851032258165]
								}, {
									"case":	2,
									"scores":	[-7.54851032258165]
								}, {
									"case":	3,
									"scores":	[-7.54851032258165]
								}, {
									"case":	4,
									"scores":	[-7.54851032258165]
								}, {
									"case":	5,
									"scores":	[-7.54851032258165]
								}, {
									"case":	6,
									"scores":	[-7.54851032258165]
								}, {
									"case":	7,
									"scores":	[-7.54851032258165]
								}, {
									"case":	8,
									"scores":	[-7.54851032258165]
								}, {
									"case":	9,
									"scores":	[-7.54851032258165]
								}, {
									"case":	10,
									"scores":	[-7.54851032258165]
								}, {
									"case":	11,
									"scores":	[-7.54851032258165]
								}, {
									"case":	12,
									"scores":	[-7.54851032258165]
								}, {
									"case":	13,
									"scores":	[-7.54851032258165]
								}, {
									"case":	14,
									"scores":	[-7.54851032258165]
								}, {
									"case":	15,
									"scores":	[-7.54851032258165]
								}, {
									"case":	16,
									"scores":	[-7.54851032258165]
								}, {
									"case":	17,
									"scores":	[-7.54851032258165]
								}, {
									"case":	18,
									"scores":	[-7.54851032258165]
								}, {
									"case":	19,
									"scores":	[-7.54851032258165]
								}, {
									"case":	20,
									"scores":	[-7.54851032258165]
								}, {
									"case":	21,
									"scores":	[-7.54851032258165]
								}, {
									"case":	22,
									"scores":	[-7.54851032258165]
								}, {
									"case":	23,
									"scores":	[-7.54851032258165]
								}, {
									"case":	24,
									"scores":	[-7.54851032258165]
								}, {
									"case":	25,
									"scores":	[-7.54851032258165]
								}, {
									"case":	26,
									"scores":	[-7.54851032258165]
								}, {
									"case":	27,
									"scores":	[-7.54851032258165]
								}, {
									"case":	28,
									"scores":	[-7.54851032258165]
								}, {
									"case":	29,
									"scores":	[-7.54851032258165]
								}, {
									"case":	30,
									"scores":	[-8.91157263878165, -8.61535063018165, -9.11005617968165, -9.35310195998165]
								}]
						}, {
							"switch":	61,
							"types":	[[], [], [1], [], [], [], [41, 42, 43, 44, 45, 46, 47, 48, 49], [], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [], [], [30]],
							"begin_line":	184,
							"begin_column":	2,
							"end_line":	184,
							"end_column":	12,
							"patch_codes":	["if (!__is_neg(\"\", \"L184\", 4, &(args), sizeof (args), &(i), sizeof (i), &(argc), sizeof (argc), &(ht), sizeof (ht)))\n    _efree((args));\n", "__zend_realloc((args), -1)", "__zend_realloc((args), 0)", "__zend_realloc((args), 1)", "bzero((args), -1)", "bzero((args), 0)", "bzero((args), 1)", "dlsym((args), 0)", "explicit_bzero((args), -1)", "explicit_bzero((args), 0)", "explicit_bzero((args), 1)", "getentropy((args), -1)", "getentropy((args), 0)", "getentropy((args), 1)", "php_write((args), -1)", "php_write((args), 0)", "php_write((args), 1)", "realloc((args), -1)", "realloc((args), 0)", "realloc((args), 1)", "timer_gettime((args), 0)", "zend_list_insert((args), -1)", "zend_list_insert((args), 0)", "zend_list_insert((args), 1)", "zend_list_insert((args), argc)", "zend_list_insert((args), ht)", "zend_list_insert((args), i)", "zend_list_insert((args), le_index_ptr)", "zend_list_insert((args), return_value_used)", "{\n}\n", "_zend_mem_block_size((args))", "brk((args))", "dlclose((args))", "free((args))", "list_entry_destructor((args))", "plist_entry_destructor((args))", "zend_vm_stack_free((args))", "zend_vm_stack_free_int((args))", "zend_vm_stack_push((args))", "zend_vm_stack_push_nocheck((args))", "_efree(((&argc)))", "_efree(((&args)))", "_efree(((&ht)))", "_efree(((&i)))", "_efree(((&return_value)))", "_efree(((&return_value_ptr)))", "_efree(((&return_value_used)))", "_efree(((&this_ptr)))", "_efree(((args)))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.61744112708165, -9.29056547908165, -8.33639160308165, -8.76199333858165]
								}, {
									"case":	2,
									"scores":	[-7.54851032258165]
								}, {
									"case":	3,
									"scores":	[-7.54851032258165]
								}, {
									"case":	4,
									"scores":	[-7.54851032258165]
								}, {
									"case":	5,
									"scores":	[-7.54851032258165]
								}, {
									"case":	6,
									"scores":	[-7.54851032258165]
								}, {
									"case":	7,
									"scores":	[-7.54851032258165]
								}, {
									"case":	8,
									"scores":	[-7.54851032258165]
								}, {
									"case":	9,
									"scores":	[-7.54851032258165]
								}, {
									"case":	10,
									"scores":	[-7.54851032258165]
								}, {
									"case":	11,
									"scores":	[-7.54851032258165]
								}, {
									"case":	12,
									"scores":	[-7.54851032258165]
								}, {
									"case":	13,
									"scores":	[-7.54851032258165]
								}, {
									"case":	14,
									"scores":	[-7.54851032258165]
								}, {
									"case":	15,
									"scores":	[-7.54851032258165]
								}, {
									"case":	16,
									"scores":	[-7.54851032258165]
								}, {
									"case":	17,
									"scores":	[-7.54851032258165]
								}, {
									"case":	18,
									"scores":	[-7.54851032258165]
								}, {
									"case":	19,
									"scores":	[-7.54851032258165]
								}, {
									"case":	20,
									"scores":	[-7.54851032258165]
								}, {
									"case":	21,
									"scores":	[-7.54851032258165]
								}, {
									"case":	22,
									"scores":	[-7.54851032258165]
								}, {
									"case":	23,
									"scores":	[-7.54851032258165]
								}, {
									"case":	24,
									"scores":	[-7.54851032258165]
								}, {
									"case":	25,
									"scores":	[-7.54851032258165]
								}, {
									"case":	26,
									"scores":	[-7.54851032258165]
								}, {
									"case":	27,
									"scores":	[-7.54851032258165]
								}, {
									"case":	28,
									"scores":	[-7.54851032258165]
								}, {
									"case":	29,
									"scores":	[-7.54851032258165]
								}, {
									"case":	30,
									"scores":	[-7.54851032258165]
								}, {
									"case":	31,
									"scores":	[-7.54851032258165]
								}, {
									"case":	32,
									"scores":	[-7.54851032258165]
								}, {
									"case":	33,
									"scores":	[-7.54851032258165]
								}, {
									"case":	34,
									"scores":	[-7.54851032258165]
								}, {
									"case":	35,
									"scores":	[-7.54851032258165]
								}, {
									"case":	36,
									"scores":	[-7.54851032258165]
								}, {
									"case":	37,
									"scores":	[-7.54851032258165]
								}, {
									"case":	38,
									"scores":	[-7.54851032258165]
								}, {
									"case":	39,
									"scores":	[-7.54851032258165]
								}, {
									"case":	40,
									"scores":	[-7.54851032258165]
								}, {
									"case":	41,
									"scores":	[-7.54851032258165]
								}, {
									"case":	42,
									"scores":	[-7.54851032258165]
								}, {
									"case":	43,
									"scores":	[-7.54851032258165]
								}, {
									"case":	44,
									"scores":	[-7.54851032258165]
								}, {
									"case":	45,
									"scores":	[-7.54851032258165]
								}, {
									"case":	46,
									"scores":	[-7.54851032258165]
								}, {
									"case":	47,
									"scores":	[-7.54851032258165]
								}, {
									"case":	48,
									"scores":	[-7.54851032258165]
								}, {
									"case":	49,
									"scores":	[-7.54851032258165]
								}]
						}]
				}]
		}],
	"sizes":	[{
			"switch":	0,
			"case":	32,
			"size":	4
		}, {
			"switch":	0,
			"case":	33,
			"size":	4
		}, {
			"switch":	0,
			"case":	34,
			"size":	4
		}, {
			"switch":	1,
			"case":	1,
			"size":	4
		}, {
			"switch":	2,
			"case":	33,
			"size":	7
		}, {
			"switch":	2,
			"case":	34,
			"size":	7
		}, {
			"switch":	2,
			"case":	35,
			"size":	7
		}, {
			"switch":	3,
			"case":	1,
			"size":	7
		}, {
			"switch":	3,
			"case":	2,
			"size":	7
		}, {
			"switch":	3,
			"case":	3,
			"size":	7
		}, {
			"switch":	4,
			"case":	32,
			"size":	7
		}, {
			"switch":	4,
			"case":	33,
			"size":	7
		}, {
			"switch":	4,
			"case":	34,
			"size":	7
		}, {
			"switch":	5,
			"case":	1,
			"size":	7
		}, {
			"switch":	6,
			"case":	33,
			"size":	7
		}, {
			"switch":	6,
			"case":	34,
			"size":	7
		}, {
			"switch":	6,
			"case":	35,
			"size":	7
		}, {
			"switch":	7,
			"case":	1,
			"size":	7
		}, {
			"switch":	8,
			"case":	32,
			"size":	7
		}, {
			"switch":	8,
			"case":	33,
			"size":	7
		}, {
			"switch":	8,
			"case":	34,
			"size":	7
		}, {
			"switch":	9,
			"case":	1,
			"size":	7
		}, {
			"switch":	10,
			"case":	1,
			"size":	7
		}, {
			"switch":	10,
			"case":	2,
			"size":	7
		}, {
			"switch":	11,
			"case":	32,
			"size":	4
		}, {
			"switch":	11,
			"case":	33,
			"size":	4
		}, {
			"switch":	11,
			"case":	34,
			"size":	4
		}, {
			"switch":	12,
			"case":	1,
			"size":	4
		}, {
			"switch":	13,
			"case":	32,
			"size":	4
		}, {
			"switch":	13,
			"case":	33,
			"size":	4
		}, {
			"switch":	13,
			"case":	34,
			"size":	4
		}, {
			"switch":	14,
			"case":	1,
			"size":	4
		}, {
			"switch":	15,
			"case":	64,
			"size":	7
		}, {
			"switch":	15,
			"case":	65,
			"size":	7
		}, {
			"switch":	16,
			"case":	1,
			"size":	7
		}, {
			"switch":	16,
			"case":	2,
			"size":	7
		}, {
			"switch":	16,
			"case":	3,
			"size":	7
		}, {
			"switch":	17,
			"case":	64,
			"size":	7
		}, {
			"switch":	17,
			"case":	65,
			"size":	7
		}, {
			"switch":	18,
			"case":	1,
			"size":	7
		}, {
			"switch":	19,
			"case":	1,
			"size":	7
		}, {
			"switch":	19,
			"case":	2,
			"size":	7
		}, {
			"switch":	20,
			"case":	65,
			"size":	10
		}, {
			"switch":	20,
			"case":	66,
			"size":	10
		}, {
			"switch":	21,
			"case":	306,
			"size":	12
		}, {
			"switch":	21,
			"case":	307,
			"size":	12
		}, {
			"switch":	22,
			"case":	1,
			"size":	12
		}, {
			"switch":	23,
			"case":	305,
			"size":	12
		}, {
			"switch":	23,
			"case":	306,
			"size":	12
		}, {
			"switch":	24,
			"case":	1,
			"size":	12
		}, {
			"switch":	25,
			"case":	305,
			"size":	7
		}, {
			"switch":	25,
			"case":	306,
			"size":	7
		}, {
			"switch":	26,
			"case":	306,
			"size":	22
		}, {
			"switch":	26,
			"case":	307,
			"size":	22
		}, {
			"switch":	27,
			"case":	1,
			"size":	22
		}, {
			"switch":	27,
			"case":	2,
			"size":	22
		}, {
			"switch":	27,
			"case":	3,
			"size":	22
		}, {
			"switch":	28,
			"case":	1,
			"size":	22
		}, {
			"switch":	28,
			"case":	2,
			"size":	22
		}, {
			"switch":	29,
			"case":	306,
			"size":	19
		}, {
			"switch":	29,
			"case":	307,
			"size":	19
		}, {
			"switch":	30,
			"case":	1,
			"size":	19
		}, {
			"switch":	31,
			"case":	305,
			"size":	19
		}, {
			"switch":	31,
			"case":	306,
			"size":	19
		}, {
			"switch":	32,
			"case":	1,
			"size":	19
		}, {
			"switch":	33,
			"case":	305,
			"size":	7
		}, {
			"switch":	33,
			"case":	306,
			"size":	7
		}, {
			"switch":	34,
			"case":	1,
			"size":	7
		}, {
			"switch":	35,
			"case":	305,
			"size":	7
		}, {
			"switch":	35,
			"case":	306,
			"size":	7
		}, {
			"switch":	36,
			"case":	1,
			"size":	7
		}, {
			"switch":	38,
			"case":	1,
			"size":	19
		}, {
			"switch":	38,
			"case":	2,
			"size":	19
		}, {
			"switch":	39,
			"case":	306,
			"size":	19
		}, {
			"switch":	39,
			"case":	307,
			"size":	19
		}, {
			"switch":	40,
			"case":	1,
			"size":	19
		}, {
			"switch":	41,
			"case":	306,
			"size":	19
		}, {
			"switch":	41,
			"case":	307,
			"size":	19
		}, {
			"switch":	42,
			"case":	1,
			"size":	19
		}, {
			"switch":	43,
			"case":	306,
			"size":	19
		}, {
			"switch":	43,
			"case":	307,
			"size":	19
		}, {
			"switch":	44,
			"case":	1,
			"size":	19
		}, {
			"switch":	44,
			"case":	2,
			"size":	19
		}, {
			"switch":	44,
			"case":	3,
			"size":	19
		}, {
			"switch":	45,
			"case":	1,
			"size":	19
		}, {
			"switch":	45,
			"case":	2,
			"size":	19
		}, {
			"switch":	46,
			"case":	305,
			"size":	7
		}, {
			"switch":	46,
			"case":	306,
			"size":	7
		}, {
			"switch":	47,
			"case":	1,
			"size":	7
		}, {
			"switch":	47,
			"case":	2,
			"size":	7
		}, {
			"switch":	47,
			"case":	3,
			"size":	7
		}, {
			"switch":	48,
			"case":	1,
			"size":	7
		}, {
			"switch":	48,
			"case":	2,
			"size":	7
		}, {
			"switch":	49,
			"case":	305,
			"size":	7
		}, {
			"switch":	49,
			"case":	306,
			"size":	7
		}, {
			"switch":	50,
			"case":	1,
			"size":	7
		}, {
			"switch":	51,
			"case":	305,
			"size":	7
		}, {
			"switch":	51,
			"case":	306,
			"size":	7
		}, {
			"switch":	52,
			"case":	1,
			"size":	10
		}, {
			"switch":	53,
			"case":	30,
			"size":	4
		}, {
			"switch":	54,
			"case":	1,
			"size":	4
		}, {
			"switch":	54,
			"case":	2,
			"size":	4
		}, {
			"switch":	54,
			"case":	5,
			"size":	4
		}, {
			"switch":	55,
			"case":	1,
			"size":	4
		}, {
			"switch":	55,
			"case":	2,
			"size":	4
		}, {
			"switch":	56,
			"case":	30,
			"size":	4
		}, {
			"switch":	57,
			"case":	30,
			"size":	4
		}, {
			"switch":	57,
			"case":	31,
			"size":	4
		}, {
			"switch":	58,
			"case":	1,
			"size":	4
		}, {
			"switch":	59,
			"case":	1,
			"size":	4
		}, {
			"switch":	60,
			"case":	30,
			"size":	4
		}, {
			"switch":	61,
			"case":	1,
			"size":	4
		}],
	"func_locations":	[{
			"file":	"ext/standard/var.c",
			"functions":	[{
					"function":	"__cmsg_nxthdr",
					"begin":	308,
					"end":	324
				}, {
					"function":	"__uint16_identity",
					"begin":	32,
					"end":	36
				}, {
					"function":	"__uint32_identity",
					"begin":	38,
					"end":	42
				}, {
					"function":	"__uint64_identity",
					"begin":	44,
					"end":	48
				}, {
					"function":	"__zend_calloc",
					"begin":	103,
					"end":	108
				}, {
					"function":	"__zend_malloc",
					"begin":	93,
					"end":	101
				}, {
					"function":	"__zend_realloc",
					"begin":	110,
					"end":	118
				}, {
					"function":	"_zval_copy_ctor",
					"begin":	40,
					"end":	46
				}, {
					"function":	"_zval_dtor",
					"begin":	30,
					"end":	36
				}, {
					"function":	"atof",
					"begin":	24,
					"end":	28
				}, {
					"function":	"atoi",
					"begin":	360,
					"end":	364
				}, {
					"function":	"atol",
					"begin":	365,
					"end":	369
				}, {
					"function":	"atoll",
					"begin":	372,
					"end":	376
				}, {
					"function":	"bsearch",
					"begin":	19,
					"end":	43
				}, {
					"function":	"btowc",
					"begin":	317,
					"end":	320
				}, {
					"function":	"feof_unlocked",
					"begin":	124,
					"end":	128
				}, {
					"function":	"ferror_unlocked",
					"begin":	131,
					"end":	135
				}, {
					"function":	"fgetc_unlocked",
					"begin":	52,
					"end":	56
				}, {
					"function":	"fputc_unlocked",
					"begin":	87,
					"end":	91
				}, {
					"function":	"fstat",
					"begin":	462,
					"end":	466
				}, {
					"function":	"fstatat",
					"begin":	469,
					"end":	474
				}, {
					"function":	"gc_remove_from_buffer",
					"begin":	187,
					"end":	194
				}, {
					"function":	"gc_zval_check_possible_root",
					"begin":	180,
					"end":	185
				}, {
					"function":	"getc_unlocked",
					"begin":	62,
					"end":	66
				}, {
					"function":	"getchar",
					"begin":	43,
					"end":	47
				}, {
					"function":	"getchar_unlocked",
					"begin":	69,
					"end":	73
				}, {
					"function":	"gnu_dev_major",
					"begin":	79,
					"end":	79
				}, {
					"function":	"gnu_dev_makedev",
					"begin":	81,
					"end":	81
				}, {
					"function":	"gnu_dev_minor",
					"begin":	80,
					"end":	80
				}, {
					"function":	"i_zend_is_true",
					"begin":	80,
					"end":	135
				}, {
					"function":	"is_numeric_string",
					"begin":	102,
					"end":	224
				}, {
					"function":	"lstat",
					"begin":	455,
					"end":	459
				}, {
					"function":	"mbrlen",
					"begin":	328,
					"end":	332
				}, {
					"function":	"mknod",
					"begin":	478,
					"end":	482
				}, {
					"function":	"mknodat",
					"begin":	486,
					"end":	491
				}, {
					"function":	"php_add_var_hash",
					"begin":	534,
					"end":	569
				}, {
					"function":	"php_array_element_dump",
					"begin":	39,
					"end":	54
				}, {
					"function":	"php_array_element_export",
					"begin":	351,
					"end":	384
				}, {
					"function":	"php_debug_zval_dump",
					"begin":	241,
					"end":	320
				}, {
					"function":	"php_object_element_export",
					"begin":	387,
					"end":	413
				}, {
					"function":	"php_object_property_dump",
					"begin":	57,
					"end":	85
				}, {
					"function":	"php_set_error_handling",
					"begin":	291,
					"end":	294
				}, {
					"function":	"php_std_error_handling",
					"begin":	295,
					"end":	295
				}, {
					"function":	"php_var_dump",
					"begin":	88,
					"end":	166
				}, {
					"function":	"php_var_export",
					"begin":	498,
					"end":	505
				}, {
					"function":	"php_var_export_ex",
					"begin":	416,
					"end":	494
				}, {
					"function":	"php_var_serialize",
					"begin":	878,
					"end":	882
				}, {
					"function":	"php_var_serialize_class",
					"begin":	605,
					"end":	691
				}, {
					"function":	"php_var_serialize_class_name",
					"begin":	590,
					"end":	602
				}, {
					"function":	"php_var_serialize_intern",
					"begin":	694,
					"end":	875
				}, {
					"function":	"php_var_serialize_long",
					"begin":	572,
					"end":	577
				}, {
					"function":	"php_var_serialize_string",
					"begin":	580,
					"end":	587
				}, {
					"function":	"php_varname_check",
					"begin":	73,
					"end":	114
				}, {
					"function":	"putc_unlocked",
					"begin":	97,
					"end":	101
				}, {
					"function":	"putchar",
					"begin":	78,
					"end":	82
				}, {
					"function":	"putchar_unlocked",
					"begin":	104,
					"end":	108
				}, {
					"function":	"safe_free_zval_ptr_rel",
					"begin":	65,
					"end":	72
				}, {
					"function":	"smart_str_print_long",
					"begin":	153,
					"end":	157
				}, {
					"function":	"smart_str_print_unsigned",
					"begin":	159,
					"end":	163
				}, {
					"function":	"stat",
					"begin":	448,
					"end":	452
				}, {
					"function":	"tolower",
					"begin":	206,
					"end":	210
				}, {
					"function":	"toupper",
					"begin":	212,
					"end":	216
				}, {
					"function":	"vprintf",
					"begin":	35,
					"end":	39
				}, {
					"function":	"wctob",
					"begin":	323,
					"end":	326
				}, {
					"function":	"zend_arg_types_stack_2_pop",
					"begin":	334,
					"end":	342
				}, {
					"function":	"zend_arg_types_stack_3_pop",
					"begin":	344,
					"end":	353
				}, {
					"function":	"zend_dval_to_lval",
					"begin":	77,
					"end":	83
				}, {
					"function":	"zend_inline_hash_func",
					"begin":	261,
					"end":	288
				}, {
					"function":	"zend_memnstr",
					"begin":	226,
					"end":	257
				}, {
					"function":	"zend_memrchr",
					"begin":	259,
					"end":	274
				}, {
					"function":	"zend_objects_store_del_ref_by_handle",
					"begin":	71,
					"end":	73
				}, {
					"function":	"zend_ptr_stack_2_pop",
					"begin":	92,
					"end":	97
				}, {
					"function":	"zend_ptr_stack_2_push",
					"begin":	71,
					"end":	82
				}, {
					"function":	"zend_ptr_stack_3_pop",
					"begin":	84,
					"end":	90
				}, {
					"function":	"zend_ptr_stack_3_push",
					"begin":	57,
					"end":	69
				}, {
					"function":	"zend_ptr_stack_pop",
					"begin":	107,
					"end":	111
				}, {
					"function":	"zend_ptr_stack_push",
					"begin":	99,
					"end":	105
				}, {
					"function":	"zend_symtable_del",
					"begin":	350,
					"end":	354
				}, {
					"function":	"zend_symtable_exists",
					"begin":	364,
					"end":	368
				}, {
					"function":	"zend_symtable_find",
					"begin":	357,
					"end":	361
				}, {
					"function":	"zend_symtable_update",
					"begin":	343,
					"end":	347
				}, {
					"function":	"zend_symtable_update_current_key_ex",
					"begin":	370,
					"end":	374
				}, {
					"function":	"zend_vm_stack_alloc",
					"begin":	222,
					"end":	249
				}, {
					"function":	"zend_vm_stack_clear_multiple",
					"begin":	310,
					"end":	321
				}, {
					"function":	"zend_vm_stack_destroy",
					"begin":	176,
					"end":	185
				}, {
					"function":	"zend_vm_stack_extend",
					"begin":	187,
					"end":	192
				}, {
					"function":	"zend_vm_stack_free",
					"begin":	263,
					"end":	279
				}, {
					"function":	"zend_vm_stack_free_int",
					"begin":	251,
					"end":	261
				}, {
					"function":	"zend_vm_stack_get_arg",
					"begin":	323,
					"end":	332
				}, {
					"function":	"zend_vm_stack_init",
					"begin":	171,
					"end":	174
				}, {
					"function":	"zend_vm_stack_new_page",
					"begin":	162,
					"end":	169
				}, {
					"function":	"zend_vm_stack_pop",
					"begin":	210,
					"end":	220
				}, {
					"function":	"zend_vm_stack_push",
					"begin":	199,
					"end":	203
				}, {
					"function":	"zend_vm_stack_push_args",
					"begin":	281,
					"end":	308
				}, {
					"function":	"zend_vm_stack_push_nocheck",
					"begin":	205,
					"end":	208
				}, {
					"function":	"zend_vm_stack_top",
					"begin":	194,
					"end":	197
				}, {
					"function":	"zif_debug_zval_dump",
					"begin":	325,
					"end":	339
				}, {
					"function":	"zif_memory_get_peak_usage",
					"begin":	957,
					"end":	965
				}, {
					"function":	"zif_memory_get_usage",
					"begin":	944,
					"end":	952
				}, {
					"function":	"zif_serialize",
					"begin":	887,
					"end":	910
				}, {
					"function":	"zif_unserialize",
					"begin":	915,
					"end":	939
				}, {
					"function":	"zif_var_dump",
					"begin":	171,
					"end":	185
				}, {
					"function":	"zif_var_export",
					"begin":	510,
					"end":	529
				}, {
					"function":	"zval_addref_p",
					"begin":	380,
					"end":	382
				}, {
					"function":	"zval_array_element_dump",
					"begin":	188,
					"end":	209
				}, {
					"function":	"zval_delref_p",
					"begin":	384,
					"end":	386
				}, {
					"function":	"zval_isref_p",
					"begin":	388,
					"end":	390
				}, {
					"function":	"zval_object_property_dump",
					"begin":	212,
					"end":	238
				}, {
					"function":	"zval_refcount_p",
					"begin":	372,
					"end":	374
				}, {
					"function":	"zval_set_isref_p",
					"begin":	392,
					"end":	394
				}, {
					"function":	"zval_set_isref_to_p",
					"begin":	400,
					"end":	402
				}, {
					"function":	"zval_set_refcount_p",
					"begin":	376,
					"end":	378
				}, {
					"function":	"zval_unset_isref_p",
					"begin":	396,
					"end":	398
				}]
		}]
}
